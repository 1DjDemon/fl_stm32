
fl_stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bb8c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e5c  0800bca0  0800bca0  0001bca0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cafc  0800cafc  000201ec  2**0
                  CONTENTS
  4 .ARM          00000000  0800cafc  0800cafc  000201ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800cafc  0800cafc  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cafc  0800cafc  0001cafc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cb00  0800cb00  0001cb00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800cb04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000025c8  200001f0  0800ccf0  000201f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200027b8  0800ccf0  000227b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   000249a5  00000000  00000000  00020215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000050d7  00000000  00000000  00044bba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00018d61  00000000  00000000  00049c91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001768  00000000  00000000  000629f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001be8  00000000  00000000  00064160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c907  00000000  00000000  00065d48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00026733  00000000  00000000  0008264f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00098f43  00000000  00000000  000a8d82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00141cc5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000057c4  00000000  00000000  00141d18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f0 	.word	0x200001f0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800bc84 	.word	0x0800bc84

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f4 	.word	0x200001f4
 800014c:	0800bc84 	.word	0x0800bc84

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2uiz>:
 8000a9c:	004a      	lsls	r2, r1, #1
 8000a9e:	d211      	bcs.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa4:	d211      	bcs.n	8000aca <__aeabi_d2uiz+0x2e>
 8000aa6:	d50d      	bpl.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d40e      	bmi.n	8000ad0 <__aeabi_d2uiz+0x34>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ace:	d102      	bne.n	8000ad6 <__aeabi_d2uiz+0x3a>
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad4:	4770      	bx	lr
 8000ad6:	f04f 0000 	mov.w	r0, #0
 8000ada:	4770      	bx	lr

08000adc <__aeabi_d2f>:
 8000adc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ae4:	bf24      	itt	cs
 8000ae6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aee:	d90d      	bls.n	8000b0c <__aeabi_d2f+0x30>
 8000af0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000af4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000afc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b04:	bf08      	it	eq
 8000b06:	f020 0001 	biceq.w	r0, r0, #1
 8000b0a:	4770      	bx	lr
 8000b0c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b10:	d121      	bne.n	8000b56 <__aeabi_d2f+0x7a>
 8000b12:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b16:	bfbc      	itt	lt
 8000b18:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	4770      	bxlt	lr
 8000b1e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b26:	f1c2 0218 	rsb	r2, r2, #24
 8000b2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b32:	fa20 f002 	lsr.w	r0, r0, r2
 8000b36:	bf18      	it	ne
 8000b38:	f040 0001 	orrne.w	r0, r0, #1
 8000b3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b48:	ea40 000c 	orr.w	r0, r0, ip
 8000b4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b54:	e7cc      	b.n	8000af0 <__aeabi_d2f+0x14>
 8000b56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5a:	d107      	bne.n	8000b6c <__aeabi_d2f+0x90>
 8000b5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b60:	bf1e      	ittt	ne
 8000b62:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b66:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b6a:	4770      	bxne	lr
 8000b6c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b70:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_frsub>:
 8000b7c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b80:	e002      	b.n	8000b88 <__addsf3>
 8000b82:	bf00      	nop

08000b84 <__aeabi_fsub>:
 8000b84:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b88 <__addsf3>:
 8000b88:	0042      	lsls	r2, r0, #1
 8000b8a:	bf1f      	itttt	ne
 8000b8c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b90:	ea92 0f03 	teqne	r2, r3
 8000b94:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b98:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b9c:	d06a      	beq.n	8000c74 <__addsf3+0xec>
 8000b9e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ba2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ba6:	bfc1      	itttt	gt
 8000ba8:	18d2      	addgt	r2, r2, r3
 8000baa:	4041      	eorgt	r1, r0
 8000bac:	4048      	eorgt	r0, r1
 8000bae:	4041      	eorgt	r1, r0
 8000bb0:	bfb8      	it	lt
 8000bb2:	425b      	neglt	r3, r3
 8000bb4:	2b19      	cmp	r3, #25
 8000bb6:	bf88      	it	hi
 8000bb8:	4770      	bxhi	lr
 8000bba:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bbe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bc2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bc6:	bf18      	it	ne
 8000bc8:	4240      	negne	r0, r0
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bd2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bd6:	bf18      	it	ne
 8000bd8:	4249      	negne	r1, r1
 8000bda:	ea92 0f03 	teq	r2, r3
 8000bde:	d03f      	beq.n	8000c60 <__addsf3+0xd8>
 8000be0:	f1a2 0201 	sub.w	r2, r2, #1
 8000be4:	fa41 fc03 	asr.w	ip, r1, r3
 8000be8:	eb10 000c 	adds.w	r0, r0, ip
 8000bec:	f1c3 0320 	rsb	r3, r3, #32
 8000bf0:	fa01 f103 	lsl.w	r1, r1, r3
 8000bf4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bf8:	d502      	bpl.n	8000c00 <__addsf3+0x78>
 8000bfa:	4249      	negs	r1, r1
 8000bfc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c00:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c04:	d313      	bcc.n	8000c2e <__addsf3+0xa6>
 8000c06:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c0a:	d306      	bcc.n	8000c1a <__addsf3+0x92>
 8000c0c:	0840      	lsrs	r0, r0, #1
 8000c0e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c12:	f102 0201 	add.w	r2, r2, #1
 8000c16:	2afe      	cmp	r2, #254	; 0xfe
 8000c18:	d251      	bcs.n	8000cbe <__addsf3+0x136>
 8000c1a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c1e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c22:	bf08      	it	eq
 8000c24:	f020 0001 	biceq.w	r0, r0, #1
 8000c28:	ea40 0003 	orr.w	r0, r0, r3
 8000c2c:	4770      	bx	lr
 8000c2e:	0049      	lsls	r1, r1, #1
 8000c30:	eb40 0000 	adc.w	r0, r0, r0
 8000c34:	3a01      	subs	r2, #1
 8000c36:	bf28      	it	cs
 8000c38:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c3c:	d2ed      	bcs.n	8000c1a <__addsf3+0x92>
 8000c3e:	fab0 fc80 	clz	ip, r0
 8000c42:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c46:	ebb2 020c 	subs.w	r2, r2, ip
 8000c4a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c4e:	bfaa      	itet	ge
 8000c50:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c54:	4252      	neglt	r2, r2
 8000c56:	4318      	orrge	r0, r3
 8000c58:	bfbc      	itt	lt
 8000c5a:	40d0      	lsrlt	r0, r2
 8000c5c:	4318      	orrlt	r0, r3
 8000c5e:	4770      	bx	lr
 8000c60:	f092 0f00 	teq	r2, #0
 8000c64:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c68:	bf06      	itte	eq
 8000c6a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c6e:	3201      	addeq	r2, #1
 8000c70:	3b01      	subne	r3, #1
 8000c72:	e7b5      	b.n	8000be0 <__addsf3+0x58>
 8000c74:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c7c:	bf18      	it	ne
 8000c7e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c82:	d021      	beq.n	8000cc8 <__addsf3+0x140>
 8000c84:	ea92 0f03 	teq	r2, r3
 8000c88:	d004      	beq.n	8000c94 <__addsf3+0x10c>
 8000c8a:	f092 0f00 	teq	r2, #0
 8000c8e:	bf08      	it	eq
 8000c90:	4608      	moveq	r0, r1
 8000c92:	4770      	bx	lr
 8000c94:	ea90 0f01 	teq	r0, r1
 8000c98:	bf1c      	itt	ne
 8000c9a:	2000      	movne	r0, #0
 8000c9c:	4770      	bxne	lr
 8000c9e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ca2:	d104      	bne.n	8000cae <__addsf3+0x126>
 8000ca4:	0040      	lsls	r0, r0, #1
 8000ca6:	bf28      	it	cs
 8000ca8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cac:	4770      	bx	lr
 8000cae:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cb2:	bf3c      	itt	cc
 8000cb4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cb8:	4770      	bxcc	lr
 8000cba:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cbe:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cc2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc6:	4770      	bx	lr
 8000cc8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ccc:	bf16      	itet	ne
 8000cce:	4608      	movne	r0, r1
 8000cd0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cd4:	4601      	movne	r1, r0
 8000cd6:	0242      	lsls	r2, r0, #9
 8000cd8:	bf06      	itte	eq
 8000cda:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cde:	ea90 0f01 	teqeq	r0, r1
 8000ce2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_ui2f>:
 8000ce8:	f04f 0300 	mov.w	r3, #0
 8000cec:	e004      	b.n	8000cf8 <__aeabi_i2f+0x8>
 8000cee:	bf00      	nop

08000cf0 <__aeabi_i2f>:
 8000cf0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cf4:	bf48      	it	mi
 8000cf6:	4240      	negmi	r0, r0
 8000cf8:	ea5f 0c00 	movs.w	ip, r0
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d04:	4601      	mov	r1, r0
 8000d06:	f04f 0000 	mov.w	r0, #0
 8000d0a:	e01c      	b.n	8000d46 <__aeabi_l2f+0x2a>

08000d0c <__aeabi_ul2f>:
 8000d0c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d10:	bf08      	it	eq
 8000d12:	4770      	bxeq	lr
 8000d14:	f04f 0300 	mov.w	r3, #0
 8000d18:	e00a      	b.n	8000d30 <__aeabi_l2f+0x14>
 8000d1a:	bf00      	nop

08000d1c <__aeabi_l2f>:
 8000d1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d20:	bf08      	it	eq
 8000d22:	4770      	bxeq	lr
 8000d24:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d28:	d502      	bpl.n	8000d30 <__aeabi_l2f+0x14>
 8000d2a:	4240      	negs	r0, r0
 8000d2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d30:	ea5f 0c01 	movs.w	ip, r1
 8000d34:	bf02      	ittt	eq
 8000d36:	4684      	moveq	ip, r0
 8000d38:	4601      	moveq	r1, r0
 8000d3a:	2000      	moveq	r0, #0
 8000d3c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d40:	bf08      	it	eq
 8000d42:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d46:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d4a:	fabc f28c 	clz	r2, ip
 8000d4e:	3a08      	subs	r2, #8
 8000d50:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d54:	db10      	blt.n	8000d78 <__aeabi_l2f+0x5c>
 8000d56:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d60:	f1c2 0220 	rsb	r2, r2, #32
 8000d64:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d68:	fa20 f202 	lsr.w	r2, r0, r2
 8000d6c:	eb43 0002 	adc.w	r0, r3, r2
 8000d70:	bf08      	it	eq
 8000d72:	f020 0001 	biceq.w	r0, r0, #1
 8000d76:	4770      	bx	lr
 8000d78:	f102 0220 	add.w	r2, r2, #32
 8000d7c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d80:	f1c2 0220 	rsb	r2, r2, #32
 8000d84:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d88:	fa21 f202 	lsr.w	r2, r1, r2
 8000d8c:	eb43 0002 	adc.w	r0, r3, r2
 8000d90:	bf08      	it	eq
 8000d92:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d96:	4770      	bx	lr

08000d98 <__aeabi_fmul>:
 8000d98:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d9c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000da0:	bf1e      	ittt	ne
 8000da2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000da6:	ea92 0f0c 	teqne	r2, ip
 8000daa:	ea93 0f0c 	teqne	r3, ip
 8000dae:	d06f      	beq.n	8000e90 <__aeabi_fmul+0xf8>
 8000db0:	441a      	add	r2, r3
 8000db2:	ea80 0c01 	eor.w	ip, r0, r1
 8000db6:	0240      	lsls	r0, r0, #9
 8000db8:	bf18      	it	ne
 8000dba:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dbe:	d01e      	beq.n	8000dfe <__aeabi_fmul+0x66>
 8000dc0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000dc4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dc8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000dcc:	fba0 3101 	umull	r3, r1, r0, r1
 8000dd0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dd4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dd8:	bf3e      	ittt	cc
 8000dda:	0049      	lslcc	r1, r1, #1
 8000ddc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000de0:	005b      	lslcc	r3, r3, #1
 8000de2:	ea40 0001 	orr.w	r0, r0, r1
 8000de6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dea:	2afd      	cmp	r2, #253	; 0xfd
 8000dec:	d81d      	bhi.n	8000e2a <__aeabi_fmul+0x92>
 8000dee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000df2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000df6:	bf08      	it	eq
 8000df8:	f020 0001 	biceq.w	r0, r0, #1
 8000dfc:	4770      	bx	lr
 8000dfe:	f090 0f00 	teq	r0, #0
 8000e02:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e06:	bf08      	it	eq
 8000e08:	0249      	lsleq	r1, r1, #9
 8000e0a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e0e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e12:	3a7f      	subs	r2, #127	; 0x7f
 8000e14:	bfc2      	ittt	gt
 8000e16:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e1a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e1e:	4770      	bxgt	lr
 8000e20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e24:	f04f 0300 	mov.w	r3, #0
 8000e28:	3a01      	subs	r2, #1
 8000e2a:	dc5d      	bgt.n	8000ee8 <__aeabi_fmul+0x150>
 8000e2c:	f112 0f19 	cmn.w	r2, #25
 8000e30:	bfdc      	itt	le
 8000e32:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e36:	4770      	bxle	lr
 8000e38:	f1c2 0200 	rsb	r2, r2, #0
 8000e3c:	0041      	lsls	r1, r0, #1
 8000e3e:	fa21 f102 	lsr.w	r1, r1, r2
 8000e42:	f1c2 0220 	rsb	r2, r2, #32
 8000e46:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e4a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e4e:	f140 0000 	adc.w	r0, r0, #0
 8000e52:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e56:	bf08      	it	eq
 8000e58:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e5c:	4770      	bx	lr
 8000e5e:	f092 0f00 	teq	r2, #0
 8000e62:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e66:	bf02      	ittt	eq
 8000e68:	0040      	lsleq	r0, r0, #1
 8000e6a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e6e:	3a01      	subeq	r2, #1
 8000e70:	d0f9      	beq.n	8000e66 <__aeabi_fmul+0xce>
 8000e72:	ea40 000c 	orr.w	r0, r0, ip
 8000e76:	f093 0f00 	teq	r3, #0
 8000e7a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e7e:	bf02      	ittt	eq
 8000e80:	0049      	lsleq	r1, r1, #1
 8000e82:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e86:	3b01      	subeq	r3, #1
 8000e88:	d0f9      	beq.n	8000e7e <__aeabi_fmul+0xe6>
 8000e8a:	ea41 010c 	orr.w	r1, r1, ip
 8000e8e:	e78f      	b.n	8000db0 <__aeabi_fmul+0x18>
 8000e90:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e94:	ea92 0f0c 	teq	r2, ip
 8000e98:	bf18      	it	ne
 8000e9a:	ea93 0f0c 	teqne	r3, ip
 8000e9e:	d00a      	beq.n	8000eb6 <__aeabi_fmul+0x11e>
 8000ea0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ea4:	bf18      	it	ne
 8000ea6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000eaa:	d1d8      	bne.n	8000e5e <__aeabi_fmul+0xc6>
 8000eac:	ea80 0001 	eor.w	r0, r0, r1
 8000eb0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000eb4:	4770      	bx	lr
 8000eb6:	f090 0f00 	teq	r0, #0
 8000eba:	bf17      	itett	ne
 8000ebc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ec0:	4608      	moveq	r0, r1
 8000ec2:	f091 0f00 	teqne	r1, #0
 8000ec6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eca:	d014      	beq.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ecc:	ea92 0f0c 	teq	r2, ip
 8000ed0:	d101      	bne.n	8000ed6 <__aeabi_fmul+0x13e>
 8000ed2:	0242      	lsls	r2, r0, #9
 8000ed4:	d10f      	bne.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ed6:	ea93 0f0c 	teq	r3, ip
 8000eda:	d103      	bne.n	8000ee4 <__aeabi_fmul+0x14c>
 8000edc:	024b      	lsls	r3, r1, #9
 8000ede:	bf18      	it	ne
 8000ee0:	4608      	movne	r0, r1
 8000ee2:	d108      	bne.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ee4:	ea80 0001 	eor.w	r0, r0, r1
 8000ee8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000eec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ef0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ef4:	4770      	bx	lr
 8000ef6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000efa:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000efe:	4770      	bx	lr

08000f00 <__aeabi_fdiv>:
 8000f00:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f04:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f08:	bf1e      	ittt	ne
 8000f0a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f0e:	ea92 0f0c 	teqne	r2, ip
 8000f12:	ea93 0f0c 	teqne	r3, ip
 8000f16:	d069      	beq.n	8000fec <__aeabi_fdiv+0xec>
 8000f18:	eba2 0203 	sub.w	r2, r2, r3
 8000f1c:	ea80 0c01 	eor.w	ip, r0, r1
 8000f20:	0249      	lsls	r1, r1, #9
 8000f22:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f26:	d037      	beq.n	8000f98 <__aeabi_fdiv+0x98>
 8000f28:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f2c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f30:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f34:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f38:	428b      	cmp	r3, r1
 8000f3a:	bf38      	it	cc
 8000f3c:	005b      	lslcc	r3, r3, #1
 8000f3e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f42:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f46:	428b      	cmp	r3, r1
 8000f48:	bf24      	itt	cs
 8000f4a:	1a5b      	subcs	r3, r3, r1
 8000f4c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f50:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f54:	bf24      	itt	cs
 8000f56:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f5a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f5e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f62:	bf24      	itt	cs
 8000f64:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f68:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f6c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f70:	bf24      	itt	cs
 8000f72:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f76:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f7a:	011b      	lsls	r3, r3, #4
 8000f7c:	bf18      	it	ne
 8000f7e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f82:	d1e0      	bne.n	8000f46 <__aeabi_fdiv+0x46>
 8000f84:	2afd      	cmp	r2, #253	; 0xfd
 8000f86:	f63f af50 	bhi.w	8000e2a <__aeabi_fmul+0x92>
 8000f8a:	428b      	cmp	r3, r1
 8000f8c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f90:	bf08      	it	eq
 8000f92:	f020 0001 	biceq.w	r0, r0, #1
 8000f96:	4770      	bx	lr
 8000f98:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f9c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fa0:	327f      	adds	r2, #127	; 0x7f
 8000fa2:	bfc2      	ittt	gt
 8000fa4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fa8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fac:	4770      	bxgt	lr
 8000fae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fb2:	f04f 0300 	mov.w	r3, #0
 8000fb6:	3a01      	subs	r2, #1
 8000fb8:	e737      	b.n	8000e2a <__aeabi_fmul+0x92>
 8000fba:	f092 0f00 	teq	r2, #0
 8000fbe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fc2:	bf02      	ittt	eq
 8000fc4:	0040      	lsleq	r0, r0, #1
 8000fc6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fca:	3a01      	subeq	r2, #1
 8000fcc:	d0f9      	beq.n	8000fc2 <__aeabi_fdiv+0xc2>
 8000fce:	ea40 000c 	orr.w	r0, r0, ip
 8000fd2:	f093 0f00 	teq	r3, #0
 8000fd6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fda:	bf02      	ittt	eq
 8000fdc:	0049      	lsleq	r1, r1, #1
 8000fde:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fe2:	3b01      	subeq	r3, #1
 8000fe4:	d0f9      	beq.n	8000fda <__aeabi_fdiv+0xda>
 8000fe6:	ea41 010c 	orr.w	r1, r1, ip
 8000fea:	e795      	b.n	8000f18 <__aeabi_fdiv+0x18>
 8000fec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ff0:	ea92 0f0c 	teq	r2, ip
 8000ff4:	d108      	bne.n	8001008 <__aeabi_fdiv+0x108>
 8000ff6:	0242      	lsls	r2, r0, #9
 8000ff8:	f47f af7d 	bne.w	8000ef6 <__aeabi_fmul+0x15e>
 8000ffc:	ea93 0f0c 	teq	r3, ip
 8001000:	f47f af70 	bne.w	8000ee4 <__aeabi_fmul+0x14c>
 8001004:	4608      	mov	r0, r1
 8001006:	e776      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001008:	ea93 0f0c 	teq	r3, ip
 800100c:	d104      	bne.n	8001018 <__aeabi_fdiv+0x118>
 800100e:	024b      	lsls	r3, r1, #9
 8001010:	f43f af4c 	beq.w	8000eac <__aeabi_fmul+0x114>
 8001014:	4608      	mov	r0, r1
 8001016:	e76e      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001018:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800101c:	bf18      	it	ne
 800101e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001022:	d1ca      	bne.n	8000fba <__aeabi_fdiv+0xba>
 8001024:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001028:	f47f af5c 	bne.w	8000ee4 <__aeabi_fmul+0x14c>
 800102c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001030:	f47f af3c 	bne.w	8000eac <__aeabi_fmul+0x114>
 8001034:	e75f      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001036:	bf00      	nop

08001038 <__gesf2>:
 8001038:	f04f 3cff 	mov.w	ip, #4294967295
 800103c:	e006      	b.n	800104c <__cmpsf2+0x4>
 800103e:	bf00      	nop

08001040 <__lesf2>:
 8001040:	f04f 0c01 	mov.w	ip, #1
 8001044:	e002      	b.n	800104c <__cmpsf2+0x4>
 8001046:	bf00      	nop

08001048 <__cmpsf2>:
 8001048:	f04f 0c01 	mov.w	ip, #1
 800104c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001050:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001054:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001058:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800105c:	bf18      	it	ne
 800105e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001062:	d011      	beq.n	8001088 <__cmpsf2+0x40>
 8001064:	b001      	add	sp, #4
 8001066:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800106a:	bf18      	it	ne
 800106c:	ea90 0f01 	teqne	r0, r1
 8001070:	bf58      	it	pl
 8001072:	ebb2 0003 	subspl.w	r0, r2, r3
 8001076:	bf88      	it	hi
 8001078:	17c8      	asrhi	r0, r1, #31
 800107a:	bf38      	it	cc
 800107c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001080:	bf18      	it	ne
 8001082:	f040 0001 	orrne.w	r0, r0, #1
 8001086:	4770      	bx	lr
 8001088:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800108c:	d102      	bne.n	8001094 <__cmpsf2+0x4c>
 800108e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001092:	d105      	bne.n	80010a0 <__cmpsf2+0x58>
 8001094:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001098:	d1e4      	bne.n	8001064 <__cmpsf2+0x1c>
 800109a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800109e:	d0e1      	beq.n	8001064 <__cmpsf2+0x1c>
 80010a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop

080010a8 <__aeabi_cfrcmple>:
 80010a8:	4684      	mov	ip, r0
 80010aa:	4608      	mov	r0, r1
 80010ac:	4661      	mov	r1, ip
 80010ae:	e7ff      	b.n	80010b0 <__aeabi_cfcmpeq>

080010b0 <__aeabi_cfcmpeq>:
 80010b0:	b50f      	push	{r0, r1, r2, r3, lr}
 80010b2:	f7ff ffc9 	bl	8001048 <__cmpsf2>
 80010b6:	2800      	cmp	r0, #0
 80010b8:	bf48      	it	mi
 80010ba:	f110 0f00 	cmnmi.w	r0, #0
 80010be:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010c0 <__aeabi_fcmpeq>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff fff4 	bl	80010b0 <__aeabi_cfcmpeq>
 80010c8:	bf0c      	ite	eq
 80010ca:	2001      	moveq	r0, #1
 80010cc:	2000      	movne	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmplt>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffea 	bl	80010b0 <__aeabi_cfcmpeq>
 80010dc:	bf34      	ite	cc
 80010de:	2001      	movcc	r0, #1
 80010e0:	2000      	movcs	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmple>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffe0 	bl	80010b0 <__aeabi_cfcmpeq>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpge>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffd2 	bl	80010a8 <__aeabi_cfrcmple>
 8001104:	bf94      	ite	ls
 8001106:	2001      	movls	r0, #1
 8001108:	2000      	movhi	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_fcmpgt>:
 8001110:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001114:	f7ff ffc8 	bl	80010a8 <__aeabi_cfrcmple>
 8001118:	bf34      	ite	cc
 800111a:	2001      	movcc	r0, #1
 800111c:	2000      	movcs	r0, #0
 800111e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001122:	bf00      	nop

08001124 <__aeabi_d2lz>:
 8001124:	b538      	push	{r3, r4, r5, lr}
 8001126:	4605      	mov	r5, r0
 8001128:	460c      	mov	r4, r1
 800112a:	2200      	movs	r2, #0
 800112c:	2300      	movs	r3, #0
 800112e:	4628      	mov	r0, r5
 8001130:	4621      	mov	r1, r4
 8001132:	f7ff fc4d 	bl	80009d0 <__aeabi_dcmplt>
 8001136:	b928      	cbnz	r0, 8001144 <__aeabi_d2lz+0x20>
 8001138:	4628      	mov	r0, r5
 800113a:	4621      	mov	r1, r4
 800113c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001140:	f000 b80a 	b.w	8001158 <__aeabi_d2ulz>
 8001144:	4628      	mov	r0, r5
 8001146:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 800114a:	f000 f805 	bl	8001158 <__aeabi_d2ulz>
 800114e:	4240      	negs	r0, r0
 8001150:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001154:	bd38      	pop	{r3, r4, r5, pc}
 8001156:	bf00      	nop

08001158 <__aeabi_d2ulz>:
 8001158:	b5d0      	push	{r4, r6, r7, lr}
 800115a:	2200      	movs	r2, #0
 800115c:	4b0b      	ldr	r3, [pc, #44]	; (800118c <__aeabi_d2ulz+0x34>)
 800115e:	4606      	mov	r6, r0
 8001160:	460f      	mov	r7, r1
 8001162:	f7ff f9c3 	bl	80004ec <__aeabi_dmul>
 8001166:	f7ff fc99 	bl	8000a9c <__aeabi_d2uiz>
 800116a:	4604      	mov	r4, r0
 800116c:	f7ff f944 	bl	80003f8 <__aeabi_ui2d>
 8001170:	2200      	movs	r2, #0
 8001172:	4b07      	ldr	r3, [pc, #28]	; (8001190 <__aeabi_d2ulz+0x38>)
 8001174:	f7ff f9ba 	bl	80004ec <__aeabi_dmul>
 8001178:	4602      	mov	r2, r0
 800117a:	460b      	mov	r3, r1
 800117c:	4630      	mov	r0, r6
 800117e:	4639      	mov	r1, r7
 8001180:	f7fe fffc 	bl	800017c <__aeabi_dsub>
 8001184:	f7ff fc8a 	bl	8000a9c <__aeabi_d2uiz>
 8001188:	4621      	mov	r1, r4
 800118a:	bdd0      	pop	{r4, r6, r7, pc}
 800118c:	3df00000 	.word	0x3df00000
 8001190:	41f00000 	.word	0x41f00000

08001194 <I2Cx_ReadData16>:
  status = HAL_I2C_Mem_Read(&hi2c2, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, 0x10000);
  return value;
}
//------------------------------------------------
static void I2Cx_ReadData16(uint16_t Addr, uint8_t Reg, uint16_t *Value)
{
 8001194:	b500      	push	{lr}
 8001196:	b085      	sub	sp, #20
  HAL_StatusTypeDef status = HAL_OK;
  status = HAL_I2C_Mem_Read(&hi2c2, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)Value, 2, 0x10000);
 8001198:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800119c:	9302      	str	r3, [sp, #8]
 800119e:	2302      	movs	r3, #2
 80011a0:	9301      	str	r3, [sp, #4]
 80011a2:	9200      	str	r2, [sp, #0]
 80011a4:	2301      	movs	r3, #1
 80011a6:	460a      	mov	r2, r1
 80011a8:	4601      	mov	r1, r0
 80011aa:	4803      	ldr	r0, [pc, #12]	; (80011b8 <I2Cx_ReadData16+0x24>)
 80011ac:	f003 f832 	bl	8004214 <HAL_I2C_Mem_Read>
}
 80011b0:	b005      	add	sp, #20
 80011b2:	f85d fb04 	ldr.w	pc, [sp], #4
 80011b6:	bf00      	nop
 80011b8:	20000554 	.word	0x20000554

080011bc <BME280_WriteReg>:
  HAL_StatusTypeDef status = HAL_OK;
  status = HAL_I2C_Mem_Read(&hi2c2, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)Value, 3, 0x10000);
}
//------------------------------------------------
void BME280_WriteReg(uint8_t Reg, uint8_t Value)
{
 80011bc:	b500      	push	{lr}
 80011be:	b087      	sub	sp, #28
 80011c0:	4602      	mov	r2, r0
  I2Cx_WriteData(BME280_ADDRESS, Reg, Value);
 80011c2:	f88d 1017 	strb.w	r1, [sp, #23]
  status = HAL_I2C_Mem_Write(&hi2c2, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, 0x10000);
 80011c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011ca:	9302      	str	r3, [sp, #8]
 80011cc:	2301      	movs	r3, #1
 80011ce:	9301      	str	r3, [sp, #4]
 80011d0:	f10d 0117 	add.w	r1, sp, #23
 80011d4:	9100      	str	r1, [sp, #0]
 80011d6:	21ec      	movs	r1, #236	; 0xec
 80011d8:	4802      	ldr	r0, [pc, #8]	; (80011e4 <BME280_WriteReg+0x28>)
 80011da:	f002 ff65 	bl	80040a8 <HAL_I2C_Mem_Write>
}
 80011de:	b007      	add	sp, #28
 80011e0:	f85d fb04 	ldr.w	pc, [sp], #4
 80011e4:	20000554 	.word	0x20000554

080011e8 <BME280_ReadReg>:
//------------------------------------------------
uint8_t BME280_ReadReg(uint8_t Reg)
{
 80011e8:	b500      	push	{lr}
 80011ea:	b087      	sub	sp, #28
 80011ec:	4602      	mov	r2, r0
  uint8_t value = 0;
 80011ee:	2300      	movs	r3, #0
 80011f0:	f88d 3017 	strb.w	r3, [sp, #23]
  status = HAL_I2C_Mem_Read(&hi2c2, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, 0x10000);
 80011f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011f8:	9302      	str	r3, [sp, #8]
 80011fa:	2301      	movs	r3, #1
 80011fc:	9301      	str	r3, [sp, #4]
 80011fe:	f10d 0117 	add.w	r1, sp, #23
 8001202:	9100      	str	r1, [sp, #0]
 8001204:	21ec      	movs	r1, #236	; 0xec
 8001206:	4804      	ldr	r0, [pc, #16]	; (8001218 <BME280_ReadReg+0x30>)
 8001208:	f003 f804 	bl	8004214 <HAL_I2C_Mem_Read>
  uint8_t res = I2Cx_ReadData(BME280_ADDRESS,Reg);
  return res;
}
 800120c:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8001210:	b007      	add	sp, #28
 8001212:	f85d fb04 	ldr.w	pc, [sp], #4
 8001216:	bf00      	nop
 8001218:	20000554 	.word	0x20000554

0800121c <BME280_ReadReg_U16>:
//------------------------------------------------
void BME280_ReadReg_U16(uint8_t Reg, uint16_t *Value)
{
 800121c:	b508      	push	{r3, lr}
 800121e:	460a      	mov	r2, r1
  I2Cx_ReadData16(BME280_ADDRESS,Reg,Value);
 8001220:	4601      	mov	r1, r0
 8001222:	20ec      	movs	r0, #236	; 0xec
 8001224:	f7ff ffb6 	bl	8001194 <I2Cx_ReadData16>
}
 8001228:	bd08      	pop	{r3, pc}

0800122a <BME280_ReadReg_S16>:
//------------------------------------------------
void BME280_ReadReg_S16(uint8_t Reg, int16_t *Value)
{
 800122a:	b508      	push	{r3, lr}
 800122c:	460a      	mov	r2, r1
  I2Cx_ReadData16(BME280_ADDRESS,Reg, (uint16_t*) Value);
 800122e:	4601      	mov	r1, r0
 8001230:	20ec      	movs	r0, #236	; 0xec
 8001232:	f7ff ffaf 	bl	8001194 <I2Cx_ReadData16>
}
 8001236:	bd08      	pop	{r3, pc}

08001238 <BME280_ReadReg_BE_U24>:
  I2Cx_ReadData24(BME280_ADDRESS,Reg,Value);
  *(uint32_t *) Value &= 0x00FFFFFF;
}
//------------------------------------------------
void BME280_ReadReg_BE_U24(uint8_t Reg, uint32_t *Value)
{
 8001238:	b510      	push	{r4, lr}
 800123a:	b084      	sub	sp, #16
 800123c:	4602      	mov	r2, r0
 800123e:	460c      	mov	r4, r1
  status = HAL_I2C_Mem_Read(&hi2c2, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)Value, 3, 0x10000);
 8001240:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001244:	9302      	str	r3, [sp, #8]
 8001246:	2303      	movs	r3, #3
 8001248:	9301      	str	r3, [sp, #4]
 800124a:	9100      	str	r1, [sp, #0]
 800124c:	2301      	movs	r3, #1
 800124e:	21ec      	movs	r1, #236	; 0xec
 8001250:	4807      	ldr	r0, [pc, #28]	; (8001270 <BME280_ReadReg_BE_U24+0x38>)
 8001252:	f002 ffdf 	bl	8004214 <HAL_I2C_Mem_Read>
  I2Cx_ReadData24(BME280_ADDRESS,Reg,Value);
  *(uint32_t *) Value = be24toword(*(uint32_t *) Value) & 0x00FFFFFF;
 8001256:	6822      	ldr	r2, [r4, #0]
 8001258:	f3c2 4307 	ubfx	r3, r2, #16, #8
 800125c:	0411      	lsls	r1, r2, #16
 800125e:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
 8001262:	430b      	orrs	r3, r1
 8001264:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8001268:	4313      	orrs	r3, r2
 800126a:	6023      	str	r3, [r4, #0]
}
 800126c:	b004      	add	sp, #16
 800126e:	bd10      	pop	{r4, pc}
 8001270:	20000554 	.word	0x20000554

08001274 <BME280_ReadStatus>:
//------------------------------------------------
uint8_t BME280_ReadStatus(void)
{
 8001274:	b508      	push	{r3, lr}
  //clear unuset bits
  uint8_t res = BME280_ReadReg(BME280_REGISTER_STATUS)&0x09;
 8001276:	20f3      	movs	r0, #243	; 0xf3
 8001278:	f7ff ffb6 	bl	80011e8 <BME280_ReadReg>
  return res;
}
 800127c:	f000 0009 	and.w	r0, r0, #9
 8001280:	bd08      	pop	{r3, pc}
	...

08001284 <BME280_ReadCoefficients>:
//------------------------------------------------
void BME280_ReadCoefficients(void)
{
 8001284:	b538      	push	{r3, r4, r5, lr}
  BME280_ReadReg_U16(BME280_REGISTER_DIG_T1,&CalibData.dig_T1);
 8001286:	4c32      	ldr	r4, [pc, #200]	; (8001350 <BME280_ReadCoefficients+0xcc>)
 8001288:	4621      	mov	r1, r4
 800128a:	2088      	movs	r0, #136	; 0x88
 800128c:	f7ff ffc6 	bl	800121c <BME280_ReadReg_U16>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_T2,&CalibData.dig_T2);
 8001290:	1ca1      	adds	r1, r4, #2
 8001292:	208a      	movs	r0, #138	; 0x8a
 8001294:	f7ff ffc9 	bl	800122a <BME280_ReadReg_S16>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_T3,&CalibData.dig_T3);
 8001298:	1d21      	adds	r1, r4, #4
 800129a:	208c      	movs	r0, #140	; 0x8c
 800129c:	f7ff ffc5 	bl	800122a <BME280_ReadReg_S16>
  BME280_ReadReg_U16(BME280_REGISTER_DIG_P1,&CalibData.dig_P1);
 80012a0:	1da1      	adds	r1, r4, #6
 80012a2:	208e      	movs	r0, #142	; 0x8e
 80012a4:	f7ff ffba 	bl	800121c <BME280_ReadReg_U16>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P2,&CalibData.dig_P2);
 80012a8:	f104 0108 	add.w	r1, r4, #8
 80012ac:	2090      	movs	r0, #144	; 0x90
 80012ae:	f7ff ffbc 	bl	800122a <BME280_ReadReg_S16>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P3,&CalibData.dig_P3);
 80012b2:	f104 010a 	add.w	r1, r4, #10
 80012b6:	2092      	movs	r0, #146	; 0x92
 80012b8:	f7ff ffb7 	bl	800122a <BME280_ReadReg_S16>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P4,&CalibData.dig_P4);
 80012bc:	f104 010c 	add.w	r1, r4, #12
 80012c0:	2094      	movs	r0, #148	; 0x94
 80012c2:	f7ff ffb2 	bl	800122a <BME280_ReadReg_S16>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P5,&CalibData.dig_P5);
 80012c6:	f104 010e 	add.w	r1, r4, #14
 80012ca:	2096      	movs	r0, #150	; 0x96
 80012cc:	f7ff ffad 	bl	800122a <BME280_ReadReg_S16>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P6,&CalibData.dig_P6);
 80012d0:	f104 0110 	add.w	r1, r4, #16
 80012d4:	2098      	movs	r0, #152	; 0x98
 80012d6:	f7ff ffa8 	bl	800122a <BME280_ReadReg_S16>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P7,&CalibData.dig_P7);
 80012da:	f104 0112 	add.w	r1, r4, #18
 80012de:	209a      	movs	r0, #154	; 0x9a
 80012e0:	f7ff ffa3 	bl	800122a <BME280_ReadReg_S16>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P8,&CalibData.dig_P8);
 80012e4:	f104 0114 	add.w	r1, r4, #20
 80012e8:	209c      	movs	r0, #156	; 0x9c
 80012ea:	f7ff ff9e 	bl	800122a <BME280_ReadReg_S16>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P9,&CalibData.dig_P9);
 80012ee:	f104 0116 	add.w	r1, r4, #22
 80012f2:	209e      	movs	r0, #158	; 0x9e
 80012f4:	f7ff ff99 	bl	800122a <BME280_ReadReg_S16>
  CalibData.dig_H1 = BME280_ReadReg(BME280_REGISTER_DIG_H1);
 80012f8:	20a1      	movs	r0, #161	; 0xa1
 80012fa:	f7ff ff75 	bl	80011e8 <BME280_ReadReg>
 80012fe:	7620      	strb	r0, [r4, #24]
  BME280_ReadReg_S16(BME280_REGISTER_DIG_H2,&CalibData.dig_H2);
 8001300:	f104 011a 	add.w	r1, r4, #26
 8001304:	20e1      	movs	r0, #225	; 0xe1
 8001306:	f7ff ff90 	bl	800122a <BME280_ReadReg_S16>
  CalibData.dig_H3 = BME280_ReadReg(BME280_REGISTER_DIG_H3);
 800130a:	20e3      	movs	r0, #227	; 0xe3
 800130c:	f7ff ff6c 	bl	80011e8 <BME280_ReadReg>
 8001310:	7720      	strb	r0, [r4, #28]
  CalibData.dig_H4 = (BME280_ReadReg(BME280_REGISTER_DIG_H4) << 4) | (BME280_ReadReg(BME280_REGISTER_DIG_H4+1) & 0xF);
 8001312:	20e4      	movs	r0, #228	; 0xe4
 8001314:	f7ff ff68 	bl	80011e8 <BME280_ReadReg>
 8001318:	4605      	mov	r5, r0
 800131a:	20e5      	movs	r0, #229	; 0xe5
 800131c:	f7ff ff64 	bl	80011e8 <BME280_ReadReg>
 8001320:	f000 030f 	and.w	r3, r0, #15
 8001324:	ea43 1005 	orr.w	r0, r3, r5, lsl #4
 8001328:	83e0      	strh	r0, [r4, #30]
  CalibData.dig_H5 = (BME280_ReadReg(BME280_REGISTER_DIG_H5+1) << 4) | (BME280_ReadReg(BME280_REGISTER_DIG_H5) >> 4);
 800132a:	20e6      	movs	r0, #230	; 0xe6
 800132c:	f7ff ff5c 	bl	80011e8 <BME280_ReadReg>
 8001330:	4605      	mov	r5, r0
 8001332:	20e5      	movs	r0, #229	; 0xe5
 8001334:	f7ff ff58 	bl	80011e8 <BME280_ReadReg>
 8001338:	f3c0 1307 	ubfx	r3, r0, #4, #8
 800133c:	ea43 1005 	orr.w	r0, r3, r5, lsl #4
 8001340:	8420      	strh	r0, [r4, #32]
  CalibData.dig_H6 = (int8_t)BME280_ReadReg(BME280_REGISTER_DIG_H6);
 8001342:	20e7      	movs	r0, #231	; 0xe7
 8001344:	f7ff ff50 	bl	80011e8 <BME280_ReadReg>
 8001348:	f884 0022 	strb.w	r0, [r4, #34]	; 0x22
}
 800134c:	bd38      	pop	{r3, r4, r5, pc}
 800134e:	bf00      	nop
 8001350:	2000020c 	.word	0x2000020c

08001354 <BME280_SetStandby>:
//------------------------------------------------
void BME280_SetStandby(uint8_t tsb) {
 8001354:	b510      	push	{r4, lr}
 8001356:	4604      	mov	r4, r0
  uint8_t reg;
  reg = BME280_ReadReg(BME280_REG_CONFIG) & ~BME280_STBY_MSK;
 8001358:	20f5      	movs	r0, #245	; 0xf5
 800135a:	f7ff ff45 	bl	80011e8 <BME280_ReadReg>
  reg |= tsb & BME280_STBY_MSK;
 800135e:	f024 041f 	bic.w	r4, r4, #31
  reg = BME280_ReadReg(BME280_REG_CONFIG) & ~BME280_STBY_MSK;
 8001362:	f000 011f 	and.w	r1, r0, #31
  BME280_WriteReg(BME280_REG_CONFIG,reg);
 8001366:	4321      	orrs	r1, r4
 8001368:	20f5      	movs	r0, #245	; 0xf5
 800136a:	f7ff ff27 	bl	80011bc <BME280_WriteReg>
}
 800136e:	bd10      	pop	{r4, pc}

08001370 <BME280_SetFilter>:
//------------------------------------------------
  void BME280_SetFilter(uint8_t filter) {
 8001370:	b510      	push	{r4, lr}
 8001372:	4604      	mov	r4, r0
  uint8_t reg;
  reg = BME280_ReadReg(BME280_REG_CONFIG) & ~BME280_FILTER_MSK;
 8001374:	20f5      	movs	r0, #245	; 0xf5
 8001376:	f7ff ff37 	bl	80011e8 <BME280_ReadReg>
  reg |= filter & BME280_FILTER_MSK;
 800137a:	f004 041c 	and.w	r4, r4, #28
 800137e:	f000 01e3 	and.w	r1, r0, #227	; 0xe3
  BME280_WriteReg(BME280_REG_CONFIG,reg);
 8001382:	4321      	orrs	r1, r4
 8001384:	20f5      	movs	r0, #245	; 0xf5
 8001386:	f7ff ff19 	bl	80011bc <BME280_WriteReg>
}
 800138a:	bd10      	pop	{r4, pc}

0800138c <BME280_SetOversamplingTemper>:
//------------------------------------------------
void BME280_SetOversamplingTemper(uint8_t osrs)
{
 800138c:	b510      	push	{r4, lr}
 800138e:	4604      	mov	r4, r0
  uint8_t reg;
  reg = BME280_ReadReg(BME280_REG_CTRL_MEAS) & ~BME280_OSRS_T_MSK;
 8001390:	20f4      	movs	r0, #244	; 0xf4
 8001392:	f7ff ff29 	bl	80011e8 <BME280_ReadReg>
  reg |= osrs & BME280_OSRS_T_MSK;
 8001396:	f024 041f 	bic.w	r4, r4, #31
  reg = BME280_ReadReg(BME280_REG_CTRL_MEAS) & ~BME280_OSRS_T_MSK;
 800139a:	f000 011f 	and.w	r1, r0, #31
  BME280_WriteReg(BME280_REG_CTRL_MEAS,reg);
 800139e:	4321      	orrs	r1, r4
 80013a0:	20f4      	movs	r0, #244	; 0xf4
 80013a2:	f7ff ff0b 	bl	80011bc <BME280_WriteReg>
}
 80013a6:	bd10      	pop	{r4, pc}

080013a8 <BME280_SetOversamplingPressure>:
//------------------------------------------------
void BME280_SetOversamplingPressure(uint8_t osrs)
{
 80013a8:	b510      	push	{r4, lr}
 80013aa:	4604      	mov	r4, r0
  uint8_t reg;
  reg = BME280_ReadReg(BME280_REG_CTRL_MEAS) & ~BME280_OSRS_P_MSK;
 80013ac:	20f4      	movs	r0, #244	; 0xf4
 80013ae:	f7ff ff1b 	bl	80011e8 <BME280_ReadReg>
  reg |= osrs & BME280_OSRS_P_MSK;
 80013b2:	f004 041c 	and.w	r4, r4, #28
 80013b6:	f000 01e3 	and.w	r1, r0, #227	; 0xe3
  BME280_WriteReg(BME280_REG_CTRL_MEAS,reg);
 80013ba:	4321      	orrs	r1, r4
 80013bc:	20f4      	movs	r0, #244	; 0xf4
 80013be:	f7ff fefd 	bl	80011bc <BME280_WriteReg>
}
 80013c2:	bd10      	pop	{r4, pc}

080013c4 <BME280_SetOversamplingHum>:
//------------------------------------------------
void BME280_SetOversamplingHum(uint8_t osrs)
{
 80013c4:	b510      	push	{r4, lr}
 80013c6:	4604      	mov	r4, r0
  uint8_t reg;
  reg = BME280_ReadReg(BME280_REG_CTRL_HUM) & ~BME280_OSRS_H_MSK;
 80013c8:	20f2      	movs	r0, #242	; 0xf2
 80013ca:	f7ff ff0d 	bl	80011e8 <BME280_ReadReg>
  reg |= osrs & BME280_OSRS_H_MSK;
 80013ce:	f004 0407 	and.w	r4, r4, #7
 80013d2:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
  BME280_WriteReg(BME280_REG_CTRL_HUM,reg);
 80013d6:	4321      	orrs	r1, r4
 80013d8:	20f2      	movs	r0, #242	; 0xf2
 80013da:	f7ff feef 	bl	80011bc <BME280_WriteReg>
  //The 'ctrl_hum' register needs to be written
  //after changing 'ctrl_hum' for the changes to become effwctive.
  reg = BME280_ReadReg(BME280_REG_CTRL_MEAS);
 80013de:	20f4      	movs	r0, #244	; 0xf4
 80013e0:	f7ff ff02 	bl	80011e8 <BME280_ReadReg>
 80013e4:	4601      	mov	r1, r0
  BME280_WriteReg(BME280_REG_CTRL_MEAS,reg);
 80013e6:	20f4      	movs	r0, #244	; 0xf4
 80013e8:	f7ff fee8 	bl	80011bc <BME280_WriteReg>
}
 80013ec:	bd10      	pop	{r4, pc}

080013ee <BME280_SetMode>:
//------------------------------------------------
void BME280_SetMode(uint8_t mode) {
 80013ee:	b510      	push	{r4, lr}
 80013f0:	4604      	mov	r4, r0
  uint8_t reg;
  reg = BME280_ReadReg(BME280_REG_CTRL_MEAS) & ~BME280_MODE_MSK;
 80013f2:	20f4      	movs	r0, #244	; 0xf4
 80013f4:	f7ff fef8 	bl	80011e8 <BME280_ReadReg>
  reg |= mode & BME280_MODE_MSK;
 80013f8:	f004 0403 	and.w	r4, r4, #3
 80013fc:	f000 01fc 	and.w	r1, r0, #252	; 0xfc
  BME280_WriteReg(BME280_REG_CTRL_MEAS,reg);
 8001400:	4321      	orrs	r1, r4
 8001402:	20f4      	movs	r0, #244	; 0xf4
 8001404:	f7ff feda 	bl	80011bc <BME280_WriteReg>
}
 8001408:	bd10      	pop	{r4, pc}
	...

0800140c <BME280_ReadTemperature>:
//------------------------------------------------
float BME280_ReadTemperature(void)
{
 800140c:	b500      	push	{lr}
 800140e:	b083      	sub	sp, #12
  float temper_float = 0.0f;
	uint32_t temper_raw;
	int32_t val1, val2;
	BME280_ReadReg_BE_U24(BME280_REGISTER_TEMPDATA,&temper_raw);
 8001410:	a901      	add	r1, sp, #4
 8001412:	20fa      	movs	r0, #250	; 0xfa
 8001414:	f7ff ff10 	bl	8001238 <BME280_ReadReg_BE_U24>
	temper_raw >>= 4;
 8001418:	9801      	ldr	r0, [sp, #4]
	val1 = ((((temper_raw>>3) - ((int32_t)CalibData.dig_T1 <<1))) *
 800141a:	4911      	ldr	r1, [pc, #68]	; (8001460 <BME280_ReadTemperature+0x54>)
 800141c:	880a      	ldrh	r2, [r1, #0]
		((int32_t)CalibData.dig_T2)) >> 11;
	val2 = (((((temper_raw>>4) - ((int32_t)CalibData.dig_T1)) *
 800141e:	ebc2 2310 	rsb	r3, r2, r0, lsr #8
	val1 = ((((temper_raw>>3) - ((int32_t)CalibData.dig_T1 <<1))) *
 8001422:	0052      	lsls	r2, r2, #1
 8001424:	ebc2 12d0 	rsb	r2, r2, r0, lsr #7
		((int32_t)CalibData.dig_T2)) >> 11;
 8001428:	f9b1 0002 	ldrsh.w	r0, [r1, #2]
	val1 = ((((temper_raw>>3) - ((int32_t)CalibData.dig_T1 <<1))) *
 800142c:	fb00 f202 	mul.w	r2, r0, r2
	val2 = (((((temper_raw>>4) - ((int32_t)CalibData.dig_T1)) *
 8001430:	fb03 f003 	mul.w	r0, r3, r3
		((temper_raw>>4) - ((int32_t)CalibData.dig_T1))) >> 12) *
 8001434:	0b00      	lsrs	r0, r0, #12
		((int32_t)CalibData.dig_T3)) >> 14;
 8001436:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
		((temper_raw>>4) - ((int32_t)CalibData.dig_T1))) >> 12) *
 800143a:	fb03 f000 	mul.w	r0, r3, r0
		((int32_t)CalibData.dig_T3)) >> 14;
 800143e:	0b80      	lsrs	r0, r0, #14
	temper_int = val1 + val2;
 8001440:	eb00 20d2 	add.w	r0, r0, r2, lsr #11
 8001444:	4b07      	ldr	r3, [pc, #28]	; (8001464 <BME280_ReadTemperature+0x58>)
 8001446:	6018      	str	r0, [r3, #0]
	temper_float = ((temper_int * 5 + 128) >> 8);
 8001448:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800144c:	3080      	adds	r0, #128	; 0x80
 800144e:	1200      	asrs	r0, r0, #8
 8001450:	f7ff fc4e 	bl	8000cf0 <__aeabi_i2f>
	temper_float /= 100.0f;
 8001454:	4904      	ldr	r1, [pc, #16]	; (8001468 <BME280_ReadTemperature+0x5c>)
 8001456:	f7ff fd53 	bl	8000f00 <__aeabi_fdiv>
//	temper_float = temper_int / 5120.0;
  return temper_float;
}
 800145a:	b003      	add	sp, #12
 800145c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001460:	2000020c 	.word	0x2000020c
 8001464:	20000230 	.word	0x20000230
 8001468:	42c80000 	.word	0x42c80000
 800146c:	00000000 	.word	0x00000000

08001470 <BME280_ReadPressure>:
//------------------------------------------------
float BME280_ReadPressure(void)
{
 8001470:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001474:	b083      	sub	sp, #12
	float var1;
	float var2;
	float p;
	uint32_t t_fine;
	uint32_t press_raw;
	BME280_ReadTemperature(); // must be done first to get t_fine
 8001476:	f7ff ffc9 	bl	800140c <BME280_ReadTemperature>
	BME280_ReadReg_BE_U24(BME280_REGISTER_PRESSUREDATA,&press_raw);
 800147a:	a901      	add	r1, sp, #4
 800147c:	20f7      	movs	r0, #247	; 0xf7
 800147e:	f7ff fedb 	bl	8001238 <BME280_ReadReg_BE_U24>
	press_raw >>= 4;
	var1 = ((((float)t_fine)/2.0)-64000.0);
 8001482:	2000      	movs	r0, #0
 8001484:	f7ff fc30 	bl	8000ce8 <__aeabi_ui2f>
 8001488:	f7fe ffd8 	bl	800043c <__aeabi_f2d>
 800148c:	2200      	movs	r2, #0
 800148e:	4b8c      	ldr	r3, [pc, #560]	; (80016c0 <BME280_ReadPressure+0x250>)
 8001490:	f7ff f82c 	bl	80004ec <__aeabi_dmul>
 8001494:	2200      	movs	r2, #0
 8001496:	4b8b      	ldr	r3, [pc, #556]	; (80016c4 <BME280_ReadPressure+0x254>)
 8001498:	f7fe fe70 	bl	800017c <__aeabi_dsub>
 800149c:	f7ff fb1e 	bl	8000adc <__aeabi_d2f>
 80014a0:	4606      	mov	r6, r0
	var2 = var1 * var1 * ((float)CalibData.dig_P6) / 32768.0;
	var2 = var2 + var1 * ((float)CalibData.dig_P5) * 2.0;
	var2 = (var2/4.0)+(((float)CalibData.dig_P4) * 65536.0);
	var1 = (((float)CalibData.dig_P3) * var1 * var1 / 524288.0 + ((float)CalibData.dig_P2) * var1) / 524288.0;
 80014a2:	4f89      	ldr	r7, [pc, #548]	; (80016c8 <BME280_ReadPressure+0x258>)
 80014a4:	f9b7 000a 	ldrsh.w	r0, [r7, #10]
 80014a8:	f7ff fc22 	bl	8000cf0 <__aeabi_i2f>
 80014ac:	4631      	mov	r1, r6
 80014ae:	f7ff fc73 	bl	8000d98 <__aeabi_fmul>
 80014b2:	4631      	mov	r1, r6
 80014b4:	f7ff fc70 	bl	8000d98 <__aeabi_fmul>
 80014b8:	f7fe ffc0 	bl	800043c <__aeabi_f2d>
 80014bc:	2200      	movs	r2, #0
 80014be:	f04f 537b 	mov.w	r3, #1052770304	; 0x3ec00000
 80014c2:	f7ff f813 	bl	80004ec <__aeabi_dmul>
 80014c6:	4604      	mov	r4, r0
 80014c8:	460d      	mov	r5, r1
 80014ca:	f9b7 0008 	ldrsh.w	r0, [r7, #8]
 80014ce:	f7ff fc0f 	bl	8000cf0 <__aeabi_i2f>
 80014d2:	4631      	mov	r1, r6
 80014d4:	f7ff fc60 	bl	8000d98 <__aeabi_fmul>
 80014d8:	f7fe ffb0 	bl	800043c <__aeabi_f2d>
 80014dc:	4602      	mov	r2, r0
 80014de:	460b      	mov	r3, r1
 80014e0:	4620      	mov	r0, r4
 80014e2:	4629      	mov	r1, r5
 80014e4:	f7fe fe4c 	bl	8000180 <__adddf3>
 80014e8:	2200      	movs	r2, #0
 80014ea:	f04f 537b 	mov.w	r3, #1052770304	; 0x3ec00000
 80014ee:	f7fe fffd 	bl	80004ec <__aeabi_dmul>
 80014f2:	f7ff faf3 	bl	8000adc <__aeabi_d2f>
	var1 = (1.0 + var1 / 32768.0)*((float)CalibData.dig_P1);
 80014f6:	f7fe ffa1 	bl	800043c <__aeabi_f2d>
 80014fa:	2200      	movs	r2, #0
 80014fc:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8001500:	f7fe fff4 	bl	80004ec <__aeabi_dmul>
 8001504:	2200      	movs	r2, #0
 8001506:	4b71      	ldr	r3, [pc, #452]	; (80016cc <BME280_ReadPressure+0x25c>)
 8001508:	f7fe fe3a 	bl	8000180 <__adddf3>
 800150c:	4604      	mov	r4, r0
 800150e:	460d      	mov	r5, r1
 8001510:	88f8      	ldrh	r0, [r7, #6]
 8001512:	f7ff fbe9 	bl	8000ce8 <__aeabi_ui2f>
 8001516:	f7fe ff91 	bl	800043c <__aeabi_f2d>
 800151a:	4602      	mov	r2, r0
 800151c:	460b      	mov	r3, r1
 800151e:	4620      	mov	r0, r4
 8001520:	4629      	mov	r1, r5
 8001522:	f7fe ffe3 	bl	80004ec <__aeabi_dmul>
 8001526:	f7ff fad9 	bl	8000adc <__aeabi_d2f>
 800152a:	4605      	mov	r5, r0
	if (var1 == 0.0)
 800152c:	2100      	movs	r1, #0
 800152e:	f7ff fdc7 	bl	80010c0 <__aeabi_fcmpeq>
 8001532:	2800      	cmp	r0, #0
 8001534:	f040 80b7 	bne.w	80016a6 <BME280_ReadPressure+0x236>
	var2 = var1 * var1 * ((float)CalibData.dig_P6) / 32768.0;
 8001538:	463c      	mov	r4, r7
 800153a:	f9b7 0010 	ldrsh.w	r0, [r7, #16]
 800153e:	f7ff fbd7 	bl	8000cf0 <__aeabi_i2f>
 8001542:	4607      	mov	r7, r0
 8001544:	4631      	mov	r1, r6
 8001546:	4630      	mov	r0, r6
 8001548:	f7ff fc26 	bl	8000d98 <__aeabi_fmul>
 800154c:	4601      	mov	r1, r0
 800154e:	4638      	mov	r0, r7
 8001550:	f7ff fc22 	bl	8000d98 <__aeabi_fmul>
 8001554:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
 8001558:	f7ff fc1e 	bl	8000d98 <__aeabi_fmul>
	var2 = var2 + var1 * ((float)CalibData.dig_P5) * 2.0;
 800155c:	f7fe ff6e 	bl	800043c <__aeabi_f2d>
 8001560:	4680      	mov	r8, r0
 8001562:	4689      	mov	r9, r1
 8001564:	f9b4 000e 	ldrsh.w	r0, [r4, #14]
 8001568:	f7ff fbc2 	bl	8000cf0 <__aeabi_i2f>
 800156c:	4631      	mov	r1, r6
 800156e:	f7ff fc13 	bl	8000d98 <__aeabi_fmul>
 8001572:	f7fe ff63 	bl	800043c <__aeabi_f2d>
 8001576:	4602      	mov	r2, r0
 8001578:	460b      	mov	r3, r1
 800157a:	f7fe fe01 	bl	8000180 <__adddf3>
 800157e:	4602      	mov	r2, r0
 8001580:	460b      	mov	r3, r1
 8001582:	4640      	mov	r0, r8
 8001584:	4649      	mov	r1, r9
 8001586:	f7fe fdfb 	bl	8000180 <__adddf3>
 800158a:	4680      	mov	r8, r0
 800158c:	4689      	mov	r9, r1
	var2 = (var2/4.0)+(((float)CalibData.dig_P4) * 65536.0);
 800158e:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 8001592:	f7ff fbad 	bl	8000cf0 <__aeabi_i2f>
 8001596:	f7fe ff51 	bl	800043c <__aeabi_f2d>
 800159a:	2200      	movs	r2, #0
 800159c:	4b4c      	ldr	r3, [pc, #304]	; (80016d0 <BME280_ReadPressure+0x260>)
 800159e:	f7fe ffa5 	bl	80004ec <__aeabi_dmul>
 80015a2:	4606      	mov	r6, r0
 80015a4:	460f      	mov	r7, r1
	var2 = var2 + var1 * ((float)CalibData.dig_P5) * 2.0;
 80015a6:	4640      	mov	r0, r8
 80015a8:	4649      	mov	r1, r9
 80015aa:	f7ff fa97 	bl	8000adc <__aeabi_d2f>
	var2 = (var2/4.0)+(((float)CalibData.dig_P4) * 65536.0);
 80015ae:	f7fe ff45 	bl	800043c <__aeabi_f2d>
 80015b2:	2200      	movs	r2, #0
 80015b4:	4b47      	ldr	r3, [pc, #284]	; (80016d4 <BME280_ReadPressure+0x264>)
 80015b6:	f7fe ff99 	bl	80004ec <__aeabi_dmul>
 80015ba:	4602      	mov	r2, r0
 80015bc:	460b      	mov	r3, r1
 80015be:	4630      	mov	r0, r6
 80015c0:	4639      	mov	r1, r7
 80015c2:	f7fe fddd 	bl	8000180 <__adddf3>
 80015c6:	4606      	mov	r6, r0
 80015c8:	460f      	mov	r7, r1
	{
		return 0; // avoid exception caused by division by zero
	}
	p = (1048576.0 - ((float)press_raw));
 80015ca:	9801      	ldr	r0, [sp, #4]
 80015cc:	0900      	lsrs	r0, r0, #4
 80015ce:	f7ff fb8b 	bl	8000ce8 <__aeabi_ui2f>
 80015d2:	4601      	mov	r1, r0
 80015d4:	f04f 4093 	mov.w	r0, #1233125376	; 0x49800000
 80015d8:	f7ff fad4 	bl	8000b84 <__aeabi_fsub>
	p = ((p - (var2 / 4069.0)) * 6250.0 / var1);
 80015dc:	f7fe ff2e 	bl	800043c <__aeabi_f2d>
 80015e0:	4680      	mov	r8, r0
 80015e2:	4689      	mov	r9, r1
	var2 = (var2/4.0)+(((float)CalibData.dig_P4) * 65536.0);
 80015e4:	4630      	mov	r0, r6
 80015e6:	4639      	mov	r1, r7
 80015e8:	f7ff fa78 	bl	8000adc <__aeabi_d2f>
	p = ((p - (var2 / 4069.0)) * 6250.0 / var1);
 80015ec:	f7fe ff26 	bl	800043c <__aeabi_f2d>
 80015f0:	a32f      	add	r3, pc, #188	; (adr r3, 80016b0 <BME280_ReadPressure+0x240>)
 80015f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015f6:	f7ff f8a3 	bl	8000740 <__aeabi_ddiv>
 80015fa:	4602      	mov	r2, r0
 80015fc:	460b      	mov	r3, r1
 80015fe:	4640      	mov	r0, r8
 8001600:	4649      	mov	r1, r9
 8001602:	f7fe fdbb 	bl	800017c <__aeabi_dsub>
 8001606:	a32c      	add	r3, pc, #176	; (adr r3, 80016b8 <BME280_ReadPressure+0x248>)
 8001608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800160c:	f7fe ff6e 	bl	80004ec <__aeabi_dmul>
 8001610:	4606      	mov	r6, r0
 8001612:	460f      	mov	r7, r1
 8001614:	4628      	mov	r0, r5
 8001616:	f7fe ff11 	bl	800043c <__aeabi_f2d>
 800161a:	4602      	mov	r2, r0
 800161c:	460b      	mov	r3, r1
 800161e:	4630      	mov	r0, r6
 8001620:	4639      	mov	r1, r7
 8001622:	f7ff f88d 	bl	8000740 <__aeabi_ddiv>
 8001626:	f7ff fa59 	bl	8000adc <__aeabi_d2f>
 800162a:	4605      	mov	r5, r0
	var1 = ((float)CalibData.dig_P9) * p * p / 2147483648.0;
 800162c:	f9b4 0016 	ldrsh.w	r0, [r4, #22]
 8001630:	f7ff fb5e 	bl	8000cf0 <__aeabi_i2f>
 8001634:	4629      	mov	r1, r5
 8001636:	f7ff fbaf 	bl	8000d98 <__aeabi_fmul>
 800163a:	4629      	mov	r1, r5
 800163c:	f7ff fbac 	bl	8000d98 <__aeabi_fmul>
 8001640:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
 8001644:	f7ff fba8 	bl	8000d98 <__aeabi_fmul>
 8001648:	4606      	mov	r6, r0
	var2 = p * ((float)CalibData.dig_P8) / 32768.0;
 800164a:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 800164e:	f7ff fb4f 	bl	8000cf0 <__aeabi_i2f>
 8001652:	4629      	mov	r1, r5
 8001654:	f7ff fba0 	bl	8000d98 <__aeabi_fmul>
 8001658:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
 800165c:	f7ff fb9c 	bl	8000d98 <__aeabi_fmul>
 8001660:	4601      	mov	r1, r0
	p = p + (var1 + var2 + ((float)CalibData.dig_P7)) / 16.0;
 8001662:	4630      	mov	r0, r6
 8001664:	f7ff fa90 	bl	8000b88 <__addsf3>
 8001668:	4606      	mov	r6, r0
 800166a:	f9b4 0012 	ldrsh.w	r0, [r4, #18]
 800166e:	f7ff fb3f 	bl	8000cf0 <__aeabi_i2f>
 8001672:	4601      	mov	r1, r0
 8001674:	4630      	mov	r0, r6
 8001676:	f7ff fa87 	bl	8000b88 <__addsf3>
 800167a:	f7fe fedf 	bl	800043c <__aeabi_f2d>
 800167e:	2200      	movs	r2, #0
 8001680:	4b15      	ldr	r3, [pc, #84]	; (80016d8 <BME280_ReadPressure+0x268>)
 8001682:	f7fe ff33 	bl	80004ec <__aeabi_dmul>
 8001686:	4606      	mov	r6, r0
 8001688:	460f      	mov	r7, r1
 800168a:	4628      	mov	r0, r5
 800168c:	f7fe fed6 	bl	800043c <__aeabi_f2d>
 8001690:	4602      	mov	r2, r0
 8001692:	460b      	mov	r3, r1
 8001694:	4630      	mov	r0, r6
 8001696:	4639      	mov	r1, r7
 8001698:	f7fe fd72 	bl	8000180 <__adddf3>
 800169c:	f7ff fa1e 	bl	8000adc <__aeabi_d2f>
	return p;

}
 80016a0:	b003      	add	sp, #12
 80016a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return 0; // avoid exception caused by division by zero
 80016a6:	2000      	movs	r0, #0
 80016a8:	e7fa      	b.n	80016a0 <BME280_ReadPressure+0x230>
 80016aa:	bf00      	nop
 80016ac:	f3af 8000 	nop.w
 80016b0:	00000000 	.word	0x00000000
 80016b4:	40afca00 	.word	0x40afca00
 80016b8:	00000000 	.word	0x00000000
 80016bc:	40b86a00 	.word	0x40b86a00
 80016c0:	3fe00000 	.word	0x3fe00000
 80016c4:	40ef4000 	.word	0x40ef4000
 80016c8:	2000020c 	.word	0x2000020c
 80016cc:	3ff00000 	.word	0x3ff00000
 80016d0:	40f00000 	.word	0x40f00000
 80016d4:	3fd00000 	.word	0x3fd00000
 80016d8:	3fb00000 	.word	0x3fb00000

080016dc <BME280_Init>:
	att = 44330.0 * (1.0 - pow(atm / seaLevel, 0.1903));
  return att;
}
//------------------------------------------------
void BME280_Init(void)
{
 80016dc:	b508      	push	{r3, lr}

	BME280_WriteReg(BME280_REG_SOFTRESET,BME280_SOFTRESET_VALUE);
 80016de:	21b6      	movs	r1, #182	; 0xb6
 80016e0:	20e0      	movs	r0, #224	; 0xe0
 80016e2:	f7ff fd6b 	bl	80011bc <BME280_WriteReg>
	while (BME280_ReadStatus() & BME280_STATUS_IM_UPDATE) ;
 80016e6:	f7ff fdc5 	bl	8001274 <BME280_ReadStatus>
 80016ea:	f010 0f01 	tst.w	r0, #1
 80016ee:	d1fa      	bne.n	80016e6 <BME280_Init+0xa>
	BME280_ReadCoefficients();
 80016f0:	f7ff fdc8 	bl	8001284 <BME280_ReadCoefficients>
	BME280_SetStandby(BME280_STBY_1000);
 80016f4:	20a0      	movs	r0, #160	; 0xa0
 80016f6:	f7ff fe2d 	bl	8001354 <BME280_SetStandby>
	BME280_SetFilter(BME280_FILTER_4);
 80016fa:	2008      	movs	r0, #8
 80016fc:	f7ff fe38 	bl	8001370 <BME280_SetFilter>
	BME280_SetOversamplingTemper(BME280_OSRS_T_x4);
 8001700:	2060      	movs	r0, #96	; 0x60
 8001702:	f7ff fe43 	bl	800138c <BME280_SetOversamplingTemper>
	BME280_SetOversamplingPressure(BME280_OSRS_P_x2);
 8001706:	2008      	movs	r0, #8
 8001708:	f7ff fe4e 	bl	80013a8 <BME280_SetOversamplingPressure>
	BME280_SetOversamplingHum(BME280_OSRS_H_x1);
 800170c:	2001      	movs	r0, #1
 800170e:	f7ff fe59 	bl	80013c4 <BME280_SetOversamplingHum>

	BME280_SetMode(BME280_MODE_NORMAL);
 8001712:	2003      	movs	r0, #3
 8001714:	f7ff fe6b 	bl	80013ee <BME280_SetMode>
}
 8001718:	bd08      	pop	{r3, pc}
	...

0800171c <display_Init>:
void display_seting_time_screen (void);
void display_seting_GPS_screen (void);

/* Private user code ---------------------------------------------------------*/
void display_Init(void)
{
 800171c:	b508      	push	{r3, lr}
	ssd1306_Init();
 800171e:	f001 fbb9 	bl	8002e94 <ssd1306_Init>
	page_properties.page_list = page_start;
 8001722:	4b04      	ldr	r3, [pc, #16]	; (8001734 <display_Init+0x18>)
 8001724:	2200      	movs	r2, #0
 8001726:	701a      	strb	r2, [r3, #0]
	page_properties.line = line_0;
 8001728:	705a      	strb	r2, [r3, #1]
	osDelay(1000);
 800172a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800172e:	f004 ffd5 	bl	80066dc <osDelay>

}
 8001732:	bd08      	pop	{r3, pc}
 8001734:	20000274 	.word	0x20000274

08001738 <display_start_screen>:
	ssd1306_UpdateScreen();

}

void display_start_screen (void)
{
 8001738:	b570      	push	{r4, r5, r6, lr}
 800173a:	b084      	sub	sp, #16
	ssd1306_SetCursor(2,0);
 800173c:	2100      	movs	r1, #0
 800173e:	2002      	movs	r0, #2
 8001740:	f001 fb88 	bl	8002e54 <ssd1306_SetCursor>
	sprintf((char*)Message,	"%02d:%02d:%02d %02d.%02d.%02d   ", timedata.hour,
																timedata.min,
 8001744:	4a36      	ldr	r2, [pc, #216]	; (8001820 <display_start_screen+0xe8>)
	sprintf((char*)Message,	"%02d:%02d:%02d %02d.%02d.%02d   ", timedata.hour,
 8001746:	4c37      	ldr	r4, [pc, #220]	; (8001824 <display_start_screen+0xec>)
																timedata.sec,
																timedata.date,
																timedata.month,
																timedata.year - 2000);
 8001748:	88d3      	ldrh	r3, [r2, #6]
	sprintf((char*)Message,	"%02d:%02d:%02d %02d.%02d.%02d   ", timedata.hour,
 800174a:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 800174e:	9303      	str	r3, [sp, #12]
 8001750:	7913      	ldrb	r3, [r2, #4]
 8001752:	9302      	str	r3, [sp, #8]
 8001754:	78d3      	ldrb	r3, [r2, #3]
 8001756:	9301      	str	r3, [sp, #4]
 8001758:	7813      	ldrb	r3, [r2, #0]
 800175a:	9300      	str	r3, [sp, #0]
 800175c:	7853      	ldrb	r3, [r2, #1]
 800175e:	7892      	ldrb	r2, [r2, #2]
 8001760:	4931      	ldr	r1, [pc, #196]	; (8001828 <display_start_screen+0xf0>)
 8001762:	4620      	mov	r0, r4
 8001764:	f006 fcca 	bl	80080fc <siprintf>
	ssd1306_WriteString((char*)Message, Font_7x10, White);
 8001768:	4d30      	ldr	r5, [pc, #192]	; (800182c <display_start_screen+0xf4>)
 800176a:	2301      	movs	r3, #1
 800176c:	e895 0006 	ldmia.w	r5, {r1, r2}
 8001770:	4620      	mov	r0, r4
 8001772:	f001 fb55 	bl	8002e20 <ssd1306_WriteString>
	//ssd1306_Line(2, 17, 24, 17, White);

	ssd1306_SetCursor(2, 12);
 8001776:	210c      	movs	r1, #12
 8001778:	2002      	movs	r0, #2
 800177a:	f001 fb6b 	bl	8002e54 <ssd1306_SetCursor>
	sprintf((char*)Message,	"T= %.2fC      ", BME280_sensor.temperature);
 800177e:	4e2c      	ldr	r6, [pc, #176]	; (8001830 <display_start_screen+0xf8>)
 8001780:	6830      	ldr	r0, [r6, #0]
 8001782:	f7fe fe5b 	bl	800043c <__aeabi_f2d>
 8001786:	4602      	mov	r2, r0
 8001788:	460b      	mov	r3, r1
 800178a:	492a      	ldr	r1, [pc, #168]	; (8001834 <display_start_screen+0xfc>)
 800178c:	4620      	mov	r0, r4
 800178e:	f006 fcb5 	bl	80080fc <siprintf>
	ssd1306_WriteString((char*)Message, Font_7x10, White);
 8001792:	2301      	movs	r3, #1
 8001794:	e895 0006 	ldmia.w	r5, {r1, r2}
 8001798:	4620      	mov	r0, r4
 800179a:	f001 fb41 	bl	8002e20 <ssd1306_WriteString>
	ssd1306_SetCursor(2, 24);
 800179e:	2118      	movs	r1, #24
 80017a0:	2002      	movs	r0, #2
 80017a2:	f001 fb57 	bl	8002e54 <ssd1306_SetCursor>

	sprintf((char*)Message,	"P= %.2fkPa      ", BME280_sensor.pressure/1000);
 80017a6:	4924      	ldr	r1, [pc, #144]	; (8001838 <display_start_screen+0x100>)
 80017a8:	6870      	ldr	r0, [r6, #4]
 80017aa:	f7ff fba9 	bl	8000f00 <__aeabi_fdiv>
 80017ae:	f7fe fe45 	bl	800043c <__aeabi_f2d>
 80017b2:	4602      	mov	r2, r0
 80017b4:	460b      	mov	r3, r1
 80017b6:	4921      	ldr	r1, [pc, #132]	; (800183c <display_start_screen+0x104>)
 80017b8:	4620      	mov	r0, r4
 80017ba:	f006 fc9f 	bl	80080fc <siprintf>
	ssd1306_WriteString((char*)Message, Font_7x10, White);
 80017be:	2301      	movs	r3, #1
 80017c0:	e895 0006 	ldmia.w	r5, {r1, r2}
 80017c4:	4620      	mov	r0, r4
 80017c6:	f001 fb2b 	bl	8002e20 <ssd1306_WriteString>
	ssd1306_SetCursor(2, 36);
 80017ca:	2124      	movs	r1, #36	; 0x24
 80017cc:	2002      	movs	r0, #2
 80017ce:	f001 fb41 	bl	8002e54 <ssd1306_SetCursor>
	sprintf((char*)Message,	"K= %02d %02d %02d     ", button_get_clicks_count (&button), (GPIOA->IDR & 0x20)>>5, global_tick);
 80017d2:	481b      	ldr	r0, [pc, #108]	; (8001840 <display_start_screen+0x108>)
 80017d4:	f000 f9b2 	bl	8001b3c <button_get_clicks_count>
 80017d8:	4602      	mov	r2, r0
 80017da:	4b1a      	ldr	r3, [pc, #104]	; (8001844 <display_start_screen+0x10c>)
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	491a      	ldr	r1, [pc, #104]	; (8001848 <display_start_screen+0x110>)
 80017e0:	6809      	ldr	r1, [r1, #0]
 80017e2:	9100      	str	r1, [sp, #0]
 80017e4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80017e8:	4918      	ldr	r1, [pc, #96]	; (800184c <display_start_screen+0x114>)
 80017ea:	4620      	mov	r0, r4
 80017ec:	f006 fc86 	bl	80080fc <siprintf>
	ssd1306_WriteString((char*)Message, Font_7x10, White);
 80017f0:	2301      	movs	r3, #1
 80017f2:	e895 0006 	ldmia.w	r5, {r1, r2}
 80017f6:	4620      	mov	r0, r4
 80017f8:	f001 fb12 	bl	8002e20 <ssd1306_WriteString>
	ssd1306_SetCursor(2, 48);
 80017fc:	2130      	movs	r1, #48	; 0x30
 80017fe:	2002      	movs	r0, #2
 8001800:	f001 fb28 	bl	8002e54 <ssd1306_SetCursor>
	sprintf((char*)Message,	"E= %02d    ", Enc_Counter);
 8001804:	4b12      	ldr	r3, [pc, #72]	; (8001850 <display_start_screen+0x118>)
 8001806:	781a      	ldrb	r2, [r3, #0]
 8001808:	4912      	ldr	r1, [pc, #72]	; (8001854 <display_start_screen+0x11c>)
 800180a:	4620      	mov	r0, r4
 800180c:	f006 fc76 	bl	80080fc <siprintf>
	ssd1306_WriteString((char*)Message, Font_7x10, White);
 8001810:	2301      	movs	r3, #1
 8001812:	e895 0006 	ldmia.w	r5, {r1, r2}
 8001816:	4620      	mov	r0, r4
 8001818:	f001 fb02 	bl	8002e20 <ssd1306_WriteString>
	//page_list = page_start;

}
 800181c:	b004      	add	sp, #16
 800181e:	bd70      	pop	{r4, r5, r6, pc}
 8001820:	200005a8 	.word	0x200005a8
 8001824:	20000234 	.word	0x20000234
 8001828:	0800bd64 	.word	0x0800bd64
 800182c:	20000004 	.word	0x20000004
 8001830:	200005b0 	.word	0x200005b0
 8001834:	0800bd88 	.word	0x0800bd88
 8001838:	447a0000 	.word	0x447a0000
 800183c:	0800bd98 	.word	0x0800bd98
 8001840:	20000278 	.word	0x20000278
 8001844:	40010800 	.word	0x40010800
 8001848:	2000028c 	.word	0x2000028c
 800184c:	0800bdac 	.word	0x0800bdac
 8001850:	20000276 	.word	0x20000276
 8001854:	0800bdc4 	.word	0x0800bdc4

08001858 <display_menu_screen>:

void display_menu_screen (void)
{
 8001858:	b538      	push	{r3, r4, r5, lr}
	ssd1306_Fill(Black);
 800185a:	2000      	movs	r0, #0
 800185c:	f001 fa38 	bl	8002cd0 <ssd1306_Fill>

	ssd1306_SetCursor(2, 0);
 8001860:	2100      	movs	r1, #0
 8001862:	2002      	movs	r0, #2
 8001864:	f001 faf6 	bl	8002e54 <ssd1306_SetCursor>
	sprintf((char*)Message,	"Menu");
 8001868:	4c23      	ldr	r4, [pc, #140]	; (80018f8 <display_menu_screen+0xa0>)
 800186a:	4b24      	ldr	r3, [pc, #144]	; (80018fc <display_menu_screen+0xa4>)
 800186c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001870:	6020      	str	r0, [r4, #0]
 8001872:	7121      	strb	r1, [r4, #4]
	ssd1306_WriteString((char*)Message, Font_7x10, White);
 8001874:	4d22      	ldr	r5, [pc, #136]	; (8001900 <display_menu_screen+0xa8>)
 8001876:	2301      	movs	r3, #1
 8001878:	e895 0006 	ldmia.w	r5, {r1, r2}
 800187c:	4620      	mov	r0, r4
 800187e:	f001 facf 	bl	8002e20 <ssd1306_WriteString>

//if(Enc_Counter%2 == 0)
	ssd1306_SetCursor(10, 24);
 8001882:	2118      	movs	r1, #24
 8001884:	200a      	movs	r0, #10
 8001886:	f001 fae5 	bl	8002e54 <ssd1306_SetCursor>
	sprintf((char*)Message,	"Setings");
 800188a:	4b1e      	ldr	r3, [pc, #120]	; (8001904 <display_menu_screen+0xac>)
 800188c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001890:	e884 0003 	stmia.w	r4, {r0, r1}
	ssd1306_WriteString((char*)Message, Font_7x10, White);
 8001894:	2301      	movs	r3, #1
 8001896:	e895 0006 	ldmia.w	r5, {r1, r2}
 800189a:	4620      	mov	r0, r4
 800189c:	f001 fac0 	bl	8002e20 <ssd1306_WriteString>
	ssd1306_SetCursor(10, 36);
 80018a0:	2124      	movs	r1, #36	; 0x24
 80018a2:	200a      	movs	r0, #10
 80018a4:	f001 fad6 	bl	8002e54 <ssd1306_SetCursor>
	sprintf((char*)Message,	"Test ");
 80018a8:	4b17      	ldr	r3, [pc, #92]	; (8001908 <display_menu_screen+0xb0>)
 80018aa:	e893 0003 	ldmia.w	r3, {r0, r1}
 80018ae:	6020      	str	r0, [r4, #0]
 80018b0:	80a1      	strh	r1, [r4, #4]
	ssd1306_WriteString((char*)Message, Font_7x10, White);
 80018b2:	2301      	movs	r3, #1
 80018b4:	e895 0006 	ldmia.w	r5, {r1, r2}
 80018b8:	4620      	mov	r0, r4
 80018ba:	f001 fab1 	bl	8002e20 <ssd1306_WriteString>

	switch(Enc_Counter%2)
 80018be:	4b13      	ldr	r3, [pc, #76]	; (800190c <display_menu_screen+0xb4>)
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	f013 0f01 	tst.w	r3, #1
 80018c6:	d007      	beq.n	80018d8 <display_menu_screen+0x80>
	{
		case 0: ssd1306_SetCursor(2, 24); page_properties.line=line_0; break;
		case 1: ssd1306_SetCursor(2, 36); page_properties.line=line_1;break;
 80018c8:	2124      	movs	r1, #36	; 0x24
 80018ca:	2002      	movs	r0, #2
 80018cc:	f001 fac2 	bl	8002e54 <ssd1306_SetCursor>
 80018d0:	4b0f      	ldr	r3, [pc, #60]	; (8001910 <display_menu_screen+0xb8>)
 80018d2:	2201      	movs	r2, #1
 80018d4:	705a      	strb	r2, [r3, #1]
 80018d6:	e006      	b.n	80018e6 <display_menu_screen+0x8e>
		case 0: ssd1306_SetCursor(2, 24); page_properties.line=line_0; break;
 80018d8:	2118      	movs	r1, #24
 80018da:	2002      	movs	r0, #2
 80018dc:	f001 faba 	bl	8002e54 <ssd1306_SetCursor>
 80018e0:	4b0b      	ldr	r3, [pc, #44]	; (8001910 <display_menu_screen+0xb8>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	705a      	strb	r2, [r3, #1]

		default: break;
	}
	sprintf((char*)Message,	"*");
 80018e6:	4804      	ldr	r0, [pc, #16]	; (80018f8 <display_menu_screen+0xa0>)
 80018e8:	232a      	movs	r3, #42	; 0x2a
 80018ea:	8003      	strh	r3, [r0, #0]
	ssd1306_WriteString((char*)Message, Font_7x10, White);
 80018ec:	4a04      	ldr	r2, [pc, #16]	; (8001900 <display_menu_screen+0xa8>)
 80018ee:	2301      	movs	r3, #1
 80018f0:	ca06      	ldmia	r2, {r1, r2}
 80018f2:	f001 fa95 	bl	8002e20 <ssd1306_WriteString>


}
 80018f6:	bd38      	pop	{r3, r4, r5, pc}
 80018f8:	20000234 	.word	0x20000234
 80018fc:	0800bdd0 	.word	0x0800bdd0
 8001900:	20000004 	.word	0x20000004
 8001904:	0800bdd8 	.word	0x0800bdd8
 8001908:	0800bde0 	.word	0x0800bde0
 800190c:	20000276 	.word	0x20000276
 8001910:	20000274 	.word	0x20000274

08001914 <display_setings_screen>:


void display_setings_screen (void)
{
 8001914:	b538      	push	{r3, r4, r5, lr}
	ssd1306_Fill(Black);
 8001916:	2000      	movs	r0, #0
 8001918:	f001 f9da 	bl	8002cd0 <ssd1306_Fill>

	ssd1306_SetCursor(2, 0);
 800191c:	2100      	movs	r1, #0
 800191e:	2002      	movs	r0, #2
 8001920:	f001 fa98 	bl	8002e54 <ssd1306_SetCursor>
	sprintf((char*)Message,	"Setings");
 8001924:	4c35      	ldr	r4, [pc, #212]	; (80019fc <display_setings_screen+0xe8>)
 8001926:	4b36      	ldr	r3, [pc, #216]	; (8001a00 <display_setings_screen+0xec>)
 8001928:	e893 0003 	ldmia.w	r3, {r0, r1}
 800192c:	e884 0003 	stmia.w	r4, {r0, r1}
	ssd1306_WriteString((char*)Message, Font_7x10, White);
 8001930:	4d34      	ldr	r5, [pc, #208]	; (8001a04 <display_setings_screen+0xf0>)
 8001932:	2301      	movs	r3, #1
 8001934:	e895 0006 	ldmia.w	r5, {r1, r2}
 8001938:	4620      	mov	r0, r4
 800193a:	f001 fa71 	bl	8002e20 <ssd1306_WriteString>

//if(Enc_Counter%2 == 0)
	ssd1306_SetCursor(10, 14);
 800193e:	210e      	movs	r1, #14
 8001940:	200a      	movs	r0, #10
 8001942:	f001 fa87 	bl	8002e54 <ssd1306_SetCursor>
	sprintf((char*)Message,	"Date");
 8001946:	4b30      	ldr	r3, [pc, #192]	; (8001a08 <display_setings_screen+0xf4>)
 8001948:	e893 0003 	ldmia.w	r3, {r0, r1}
 800194c:	6020      	str	r0, [r4, #0]
 800194e:	7121      	strb	r1, [r4, #4]
	ssd1306_WriteString((char*)Message, Font_7x10, White);
 8001950:	2301      	movs	r3, #1
 8001952:	e895 0006 	ldmia.w	r5, {r1, r2}
 8001956:	4620      	mov	r0, r4
 8001958:	f001 fa62 	bl	8002e20 <ssd1306_WriteString>
	ssd1306_SetCursor(10, 26);
 800195c:	211a      	movs	r1, #26
 800195e:	200a      	movs	r0, #10
 8001960:	f001 fa78 	bl	8002e54 <ssd1306_SetCursor>
	sprintf((char*)Message,	"Time");
 8001964:	4b29      	ldr	r3, [pc, #164]	; (8001a0c <display_setings_screen+0xf8>)
 8001966:	e893 0003 	ldmia.w	r3, {r0, r1}
 800196a:	6020      	str	r0, [r4, #0]
 800196c:	7121      	strb	r1, [r4, #4]
	ssd1306_WriteString((char*)Message, Font_7x10, White);
 800196e:	2301      	movs	r3, #1
 8001970:	e895 0006 	ldmia.w	r5, {r1, r2}
 8001974:	4620      	mov	r0, r4
 8001976:	f001 fa53 	bl	8002e20 <ssd1306_WriteString>
	ssd1306_SetCursor(10, 38);
 800197a:	2126      	movs	r1, #38	; 0x26
 800197c:	200a      	movs	r0, #10
 800197e:	f001 fa69 	bl	8002e54 <ssd1306_SetCursor>
	sprintf((char*)Message,	"Synch GPS");
 8001982:	4a23      	ldr	r2, [pc, #140]	; (8001a10 <display_setings_screen+0xfc>)
 8001984:	4623      	mov	r3, r4
 8001986:	ca07      	ldmia	r2, {r0, r1, r2}
 8001988:	c303      	stmia	r3!, {r0, r1}
 800198a:	801a      	strh	r2, [r3, #0]
	ssd1306_WriteString((char*)Message, Font_7x10, White);
 800198c:	2301      	movs	r3, #1
 800198e:	e895 0006 	ldmia.w	r5, {r1, r2}
 8001992:	4620      	mov	r0, r4
 8001994:	f001 fa44 	bl	8002e20 <ssd1306_WriteString>

	switch(Enc_Counter%3)
 8001998:	4b1e      	ldr	r3, [pc, #120]	; (8001a14 <display_setings_screen+0x100>)
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	4a1e      	ldr	r2, [pc, #120]	; (8001a18 <display_setings_screen+0x104>)
 800199e:	fba2 1203 	umull	r1, r2, r2, r3
 80019a2:	f002 01fe 	and.w	r1, r2, #254	; 0xfe
 80019a6:	eb01 0252 	add.w	r2, r1, r2, lsr #1
 80019aa:	1a9b      	subs	r3, r3, r2
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d013      	beq.n	80019da <display_setings_screen+0xc6>
 80019b2:	2b02      	cmp	r3, #2
 80019b4:	d019      	beq.n	80019ea <display_setings_screen+0xd6>
 80019b6:	b143      	cbz	r3, 80019ca <display_setings_screen+0xb6>
		case 1: ssd1306_SetCursor(2, 26); page_properties.line=line_1;break;
		case 2: ssd1306_SetCursor(2, 38); page_properties.line=line_2;break;

		default: break;
	}
	sprintf((char*)Message,	"*");
 80019b8:	4810      	ldr	r0, [pc, #64]	; (80019fc <display_setings_screen+0xe8>)
 80019ba:	232a      	movs	r3, #42	; 0x2a
 80019bc:	8003      	strh	r3, [r0, #0]
	ssd1306_WriteString((char*)Message, Font_7x10, White);
 80019be:	4a11      	ldr	r2, [pc, #68]	; (8001a04 <display_setings_screen+0xf0>)
 80019c0:	2301      	movs	r3, #1
 80019c2:	ca06      	ldmia	r2, {r1, r2}
 80019c4:	f001 fa2c 	bl	8002e20 <ssd1306_WriteString>

}
 80019c8:	bd38      	pop	{r3, r4, r5, pc}
		case 0: ssd1306_SetCursor(2, 14); page_properties.line=line_0; break;
 80019ca:	210e      	movs	r1, #14
 80019cc:	2002      	movs	r0, #2
 80019ce:	f001 fa41 	bl	8002e54 <ssd1306_SetCursor>
 80019d2:	4b12      	ldr	r3, [pc, #72]	; (8001a1c <display_setings_screen+0x108>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	705a      	strb	r2, [r3, #1]
 80019d8:	e7ee      	b.n	80019b8 <display_setings_screen+0xa4>
		case 1: ssd1306_SetCursor(2, 26); page_properties.line=line_1;break;
 80019da:	211a      	movs	r1, #26
 80019dc:	2002      	movs	r0, #2
 80019de:	f001 fa39 	bl	8002e54 <ssd1306_SetCursor>
 80019e2:	4b0e      	ldr	r3, [pc, #56]	; (8001a1c <display_setings_screen+0x108>)
 80019e4:	2201      	movs	r2, #1
 80019e6:	705a      	strb	r2, [r3, #1]
 80019e8:	e7e6      	b.n	80019b8 <display_setings_screen+0xa4>
		case 2: ssd1306_SetCursor(2, 38); page_properties.line=line_2;break;
 80019ea:	2126      	movs	r1, #38	; 0x26
 80019ec:	2002      	movs	r0, #2
 80019ee:	f001 fa31 	bl	8002e54 <ssd1306_SetCursor>
 80019f2:	4b0a      	ldr	r3, [pc, #40]	; (8001a1c <display_setings_screen+0x108>)
 80019f4:	2202      	movs	r2, #2
 80019f6:	705a      	strb	r2, [r3, #1]
 80019f8:	e7de      	b.n	80019b8 <display_setings_screen+0xa4>
 80019fa:	bf00      	nop
 80019fc:	20000234 	.word	0x20000234
 8001a00:	0800bdd8 	.word	0x0800bdd8
 8001a04:	20000004 	.word	0x20000004
 8001a08:	0800bde8 	.word	0x0800bde8
 8001a0c:	0800bdf0 	.word	0x0800bdf0
 8001a10:	0800bdf8 	.word	0x0800bdf8
 8001a14:	20000276 	.word	0x20000276
 8001a18:	aaaaaaab 	.word	0xaaaaaaab
 8001a1c:	20000274 	.word	0x20000274

08001a20 <display_seting_data_screen>:

void display_seting_data_screen (void)
{
 8001a20:	b510      	push	{r4, lr}
	ssd1306_Fill(Black);
 8001a22:	2000      	movs	r0, #0
 8001a24:	f001 f954 	bl	8002cd0 <ssd1306_Fill>

	ssd1306_SetCursor(2, 0);
 8001a28:	2100      	movs	r1, #0
 8001a2a:	2002      	movs	r0, #2
 8001a2c:	f001 fa12 	bl	8002e54 <ssd1306_SetCursor>
	sprintf((char*)Message,	"Seting Date");
 8001a30:	4c06      	ldr	r4, [pc, #24]	; (8001a4c <display_seting_data_screen+0x2c>)
 8001a32:	4b07      	ldr	r3, [pc, #28]	; (8001a50 <display_seting_data_screen+0x30>)
 8001a34:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001a38:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	ssd1306_WriteString((char*)Message, Font_7x10, White);
 8001a3c:	4a05      	ldr	r2, [pc, #20]	; (8001a54 <display_seting_data_screen+0x34>)
 8001a3e:	2301      	movs	r3, #1
 8001a40:	ca06      	ldmia	r2, {r1, r2}
 8001a42:	4620      	mov	r0, r4
 8001a44:	f001 f9ec 	bl	8002e20 <ssd1306_WriteString>


}
 8001a48:	bd10      	pop	{r4, pc}
 8001a4a:	bf00      	nop
 8001a4c:	20000234 	.word	0x20000234
 8001a50:	0800be04 	.word	0x0800be04
 8001a54:	20000004 	.word	0x20000004

08001a58 <display_seting_time_screen>:
void display_seting_time_screen (void)
{
 8001a58:	b510      	push	{r4, lr}
	ssd1306_Fill(Black);
 8001a5a:	2000      	movs	r0, #0
 8001a5c:	f001 f938 	bl	8002cd0 <ssd1306_Fill>

	ssd1306_SetCursor(2, 0);
 8001a60:	2100      	movs	r1, #0
 8001a62:	2002      	movs	r0, #2
 8001a64:	f001 f9f6 	bl	8002e54 <ssd1306_SetCursor>
	sprintf((char*)Message,	"Seting Time");
 8001a68:	4c06      	ldr	r4, [pc, #24]	; (8001a84 <display_seting_time_screen+0x2c>)
 8001a6a:	4b07      	ldr	r3, [pc, #28]	; (8001a88 <display_seting_time_screen+0x30>)
 8001a6c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001a70:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	ssd1306_WriteString((char*)Message, Font_7x10, White);
 8001a74:	4a05      	ldr	r2, [pc, #20]	; (8001a8c <display_seting_time_screen+0x34>)
 8001a76:	2301      	movs	r3, #1
 8001a78:	ca06      	ldmia	r2, {r1, r2}
 8001a7a:	4620      	mov	r0, r4
 8001a7c:	f001 f9d0 	bl	8002e20 <ssd1306_WriteString>

}
 8001a80:	bd10      	pop	{r4, pc}
 8001a82:	bf00      	nop
 8001a84:	20000234 	.word	0x20000234
 8001a88:	0800be10 	.word	0x0800be10
 8001a8c:	20000004 	.word	0x20000004

08001a90 <display_seting_GPS_screen>:
void display_seting_GPS_screen (void)
{
 8001a90:	b510      	push	{r4, lr}
	ssd1306_Fill(Black);
 8001a92:	2000      	movs	r0, #0
 8001a94:	f001 f91c 	bl	8002cd0 <ssd1306_Fill>

	ssd1306_SetCursor(2, 0);
 8001a98:	2100      	movs	r1, #0
 8001a9a:	2002      	movs	r0, #2
 8001a9c:	f001 f9da 	bl	8002e54 <ssd1306_SetCursor>
	sprintf((char*)Message,	"Seting GPS");
 8001aa0:	4c07      	ldr	r4, [pc, #28]	; (8001ac0 <display_seting_GPS_screen+0x30>)
 8001aa2:	4a08      	ldr	r2, [pc, #32]	; (8001ac4 <display_seting_GPS_screen+0x34>)
 8001aa4:	4623      	mov	r3, r4
 8001aa6:	ca07      	ldmia	r2, {r0, r1, r2}
 8001aa8:	c303      	stmia	r3!, {r0, r1}
 8001aaa:	f823 2b02 	strh.w	r2, [r3], #2
 8001aae:	0c12      	lsrs	r2, r2, #16
 8001ab0:	701a      	strb	r2, [r3, #0]
	ssd1306_WriteString((char*)Message, Font_7x10, White);
 8001ab2:	4a05      	ldr	r2, [pc, #20]	; (8001ac8 <display_seting_GPS_screen+0x38>)
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	ca06      	ldmia	r2, {r1, r2}
 8001ab8:	4620      	mov	r0, r4
 8001aba:	f001 f9b1 	bl	8002e20 <ssd1306_WriteString>

}
 8001abe:	bd10      	pop	{r4, pc}
 8001ac0:	20000234 	.word	0x20000234
 8001ac4:	0800be1c 	.word	0x0800be1c
 8001ac8:	20000004 	.word	0x20000004

08001acc <display_handle>:
{
 8001acc:	b508      	push	{r3, lr}
	switch (page_properties.page_list)
 8001ace:	4b10      	ldr	r3, [pc, #64]	; (8001b10 <display_handle+0x44>)
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	2b05      	cmp	r3, #5
 8001ad4:	d818      	bhi.n	8001b08 <display_handle+0x3c>
 8001ad6:	e8df f003 	tbb	[pc, r3]
 8001ada:	0803      	.short	0x0803
 8001adc:	14110e0b 	.word	0x14110e0b
	  case page_start			: display_start_screen(); 	break;
 8001ae0:	f7ff fe2a 	bl	8001738 <display_start_screen>
	ssd1306_UpdateScreen();
 8001ae4:	f001 f902 	bl	8002cec <ssd1306_UpdateScreen>
}
 8001ae8:	bd08      	pop	{r3, pc}
	  case page_menu			:display_menu_screen();		break;
 8001aea:	f7ff feb5 	bl	8001858 <display_menu_screen>
 8001aee:	e7f9      	b.n	8001ae4 <display_handle+0x18>
	  case page_settings		: display_setings_screen();	break;
 8001af0:	f7ff ff10 	bl	8001914 <display_setings_screen>
 8001af4:	e7f6      	b.n	8001ae4 <display_handle+0x18>
	  case page_setting_date	: display_seting_data_screen();	break;
 8001af6:	f7ff ff93 	bl	8001a20 <display_seting_data_screen>
 8001afa:	e7f3      	b.n	8001ae4 <display_handle+0x18>
	  case page_setting_time	: display_seting_time_screen();	break;
 8001afc:	f7ff ffac 	bl	8001a58 <display_seting_time_screen>
 8001b00:	e7f0      	b.n	8001ae4 <display_handle+0x18>
	  case page_setting_GPS		: display_seting_GPS_screen();	break;
 8001b02:	f7ff ffc5 	bl	8001a90 <display_seting_GPS_screen>
 8001b06:	e7ed      	b.n	8001ae4 <display_handle+0x18>
	  default:              display_start_screen(); 	break;
 8001b08:	f7ff fe16 	bl	8001738 <display_start_screen>
 8001b0c:	e7ea      	b.n	8001ae4 <display_handle+0x18>
 8001b0e:	bf00      	nop
 8001b10:	20000274 	.word	0x20000274

08001b14 <button_has_clicks>:

button_status_t button_has_clicks (button_t *_button)
{
  button_status_t status = BUTTON_NO;

  if (get_state(MANY_CLICKS) != 0)
 8001b14:	4b03      	ldr	r3, [pc, #12]	; (8001b24 <button_has_clicks+0x10>)
 8001b16:	8898      	ldrh	r0, [r3, #4]
 8001b18:	f080 0080 	eor.w	r0, r0, #128	; 0x80
  {
    status = BUTTON_YES;
  }

  return status;
}
 8001b1c:	f3c0 10c0 	ubfx	r0, r0, #7, #1
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	20000278 	.word	0x20000278

08001b28 <button_is_holding>:

button_status_t button_is_holding (button_t *_button)
{
  button_status_t status = BUTTON_NO;

  if (get_state(HOLDING_PROCESS) != 0)
 8001b28:	4b03      	ldr	r3, [pc, #12]	; (8001b38 <button_is_holding+0x10>)
 8001b2a:	8898      	ldrh	r0, [r3, #4]
 8001b2c:	f080 0008 	eor.w	r0, r0, #8
  {
    status = BUTTON_YES;
  }

  return status;
}
 8001b30:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	20000278 	.word	0x20000278

08001b3c <button_get_clicks_count>:
uint8_t button_get_clicks_count (button_t *_button)
{
//  reset_state(MANY_CLICKS);
//  set_state(CLICKS_COUNTER_RESET);
  return _button->_clicks_counter;
}
 8001b3c:	7980      	ldrb	r0, [r0, #6]
 8001b3e:	4770      	bx	lr

08001b40 <button_is_click>:

button_status_t button_is_click (button_t *_button)
{
  button_status_t status = BUTTON_NO;

  if (get_state(CLICK) != 0)
 8001b40:	4b06      	ldr	r3, [pc, #24]	; (8001b5c <button_is_click+0x1c>)
 8001b42:	889b      	ldrh	r3, [r3, #4]
 8001b44:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001b48:	d005      	beq.n	8001b56 <button_is_click+0x16>
  {
    reset_state(CLICK);
 8001b4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001b4e:	4a03      	ldr	r2, [pc, #12]	; (8001b5c <button_is_click+0x1c>)
 8001b50:	8093      	strh	r3, [r2, #4]
    status = BUTTON_YES;
 8001b52:	2000      	movs	r0, #0
 8001b54:	4770      	bx	lr
  button_status_t status = BUTTON_NO;
 8001b56:	2001      	movs	r0, #1
  }

  return status;
}
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	20000278 	.word	0x20000278

08001b60 <encoder_init>:

  return status;
}

void encoder_init	(void)
{
 8001b60:	b510      	push	{r4, lr}
	HAL_TIM_Encoder_MspInit(&htim3);
 8001b62:	4c12      	ldr	r4, [pc, #72]	; (8001bac <encoder_init+0x4c>)
 8001b64:	4620      	mov	r0, r4
 8001b66:	f000 fd2b 	bl	80025c0 <HAL_TIM_Encoder_MspInit>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001b6a:	213c      	movs	r1, #60	; 0x3c
 8001b6c:	4620      	mov	r0, r4
 8001b6e:	f004 f9d6 	bl	8005f1e <HAL_TIM_Encoder_Start>
	osDelay(100);
 8001b72:	2064      	movs	r0, #100	; 0x64
 8001b74:	f004 fdb2 	bl	80066dc <osDelay>

	button._type             = BUTTON_NORM_OPEN;
 8001b78:	4b0d      	ldr	r3, [pc, #52]	; (8001bb0 <encoder_init+0x50>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	701a      	strb	r2, [r3, #0]
	button._pulling_mode     = BUTTON_PULL_UP;
 8001b7e:	705a      	strb	r2, [r3, #1]

	button._debounce_timeout = 30;
 8001b80:	211e      	movs	r1, #30
 8001b82:	71d9      	strb	r1, [r3, #7]
	button._click_timeout    = 400;
 8001b84:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8001b88:	8119      	strh	r1, [r3, #8]
	button._hold_timeout     = 500;
 8001b8a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001b8e:	8159      	strh	r1, [r3, #10]
	button._step_timeout     = 350;
 8001b90:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8001b94:	8199      	strh	r1, [r3, #12]
	button._idle_timeout     = 1000;
 8001b96:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001b9a:	81d9      	strh	r1, [r3, #14]
	button._timer            = global_tick;
 8001b9c:	4905      	ldr	r1, [pc, #20]	; (8001bb4 <encoder_init+0x54>)
 8001b9e:	6809      	ldr	r1, [r1, #0]
 8001ba0:	6119      	str	r1, [r3, #16]

	button._state            = 0;
 8001ba2:	709a      	strb	r2, [r3, #2]
	button._previous_state   = 0;
 8001ba4:	70da      	strb	r2, [r3, #3]

	button._status           = 0;
 8001ba6:	809a      	strh	r2, [r3, #4]

	button._clicks_counter   = 0;
 8001ba8:	719a      	strb	r2, [r3, #6]

}
 8001baa:	bd10      	pop	{r4, pc}
 8001bac:	20000608 	.word	0x20000608
 8001bb0:	20000278 	.word	0x20000278
 8001bb4:	2000028c 	.word	0x2000028c

08001bb8 <button_timer_tick>:


void button_timer_tick (void)
{
	global_tick += 1U;
 8001bb8:	4a02      	ldr	r2, [pc, #8]	; (8001bc4 <button_timer_tick+0xc>)
 8001bba:	6813      	ldr	r3, [r2, #0]
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	6013      	str	r3, [r2, #0]
}
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	2000028c 	.word	0x2000028c

08001bc8 <encoder_handling>:

void encoder_handling (void)
{
 8001bc8:	b410      	push	{r4}
	//Обработка энкодера
	Enc_Counter = (TIM3->CNT)/2;;
 8001bca:	4b5a      	ldr	r3, [pc, #360]	; (8001d34 <encoder_handling+0x16c>)
 8001bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bce:	085b      	lsrs	r3, r3, #1
 8001bd0:	4a59      	ldr	r2, [pc, #356]	; (8001d38 <encoder_handling+0x170>)
 8001bd2:	7013      	strb	r3, [r2, #0]
	//Обработка кнопки
	if ((GPIOA->IDR & 0x20) != (uint32_t)GPIO_PIN_RESET)
 8001bd4:	4b59      	ldr	r3, [pc, #356]	; (8001d3c <encoder_handling+0x174>)
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	f013 0f20 	tst.w	r3, #32
 8001bdc:	d017      	beq.n	8001c0e <encoder_handling+0x46>
	{
		button._state = button._type ^ button._pulling_mode ^ 0x00U;
 8001bde:	4a58      	ldr	r2, [pc, #352]	; (8001d40 <encoder_handling+0x178>)
 8001be0:	7811      	ldrb	r1, [r2, #0]
 8001be2:	7853      	ldrb	r3, [r2, #1]
 8001be4:	404b      	eors	r3, r1
 8001be6:	4a56      	ldr	r2, [pc, #344]	; (8001d40 <encoder_handling+0x178>)
 8001be8:	7093      	strb	r3, [r2, #2]
		button._state = button._type ^ button._pulling_mode ^ 0x01U;
	}


	// Обработка нажатия
	if ((button._state) && !(button._previous_state))
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d06c      	beq.n	8001cc8 <encoder_handling+0x100>
 8001bee:	78d2      	ldrb	r2, [r2, #3]
 8001bf0:	2a00      	cmp	r2, #0
 8001bf2:	d14b      	bne.n	8001c8c <encoder_handling+0xc4>
	{
		if (get_state(DEBOUNCE_PROCESS) == 0U)
 8001bf4:	4a52      	ldr	r2, [pc, #328]	; (8001d40 <encoder_handling+0x178>)
 8001bf6:	8892      	ldrh	r2, [r2, #4]
 8001bf8:	f012 0f01 	tst.w	r2, #1
 8001bfc:	d10e      	bne.n	8001c1c <encoder_handling+0x54>
		{
		  set_state(DEBOUNCE_PROCESS);
 8001bfe:	4950      	ldr	r1, [pc, #320]	; (8001d40 <encoder_handling+0x178>)
 8001c00:	f042 0201 	orr.w	r2, r2, #1
 8001c04:	808a      	strh	r2, [r1, #4]
		  button._timer = global_tick;
 8001c06:	4a4f      	ldr	r2, [pc, #316]	; (8001d44 <encoder_handling+0x17c>)
 8001c08:	6812      	ldr	r2, [r2, #0]
 8001c0a:	610a      	str	r2, [r1, #16]
 8001c0c:	e064      	b.n	8001cd8 <encoder_handling+0x110>
		button._state = button._type ^ button._pulling_mode ^ 0x01U;
 8001c0e:	4a4c      	ldr	r2, [pc, #304]	; (8001d40 <encoder_handling+0x178>)
 8001c10:	7813      	ldrb	r3, [r2, #0]
 8001c12:	7852      	ldrb	r2, [r2, #1]
 8001c14:	4053      	eors	r3, r2
 8001c16:	f083 0301 	eor.w	r3, r3, #1
 8001c1a:	e7e4      	b.n	8001be6 <encoder_handling+0x1e>
		}
		else
		{
		  if (timeout_passed(_debounce_timeout))
 8001c1c:	4949      	ldr	r1, [pc, #292]	; (8001d44 <encoder_handling+0x17c>)
 8001c1e:	6809      	ldr	r1, [r1, #0]
 8001c20:	4847      	ldr	r0, [pc, #284]	; (8001d40 <encoder_handling+0x178>)
 8001c22:	6904      	ldr	r4, [r0, #16]
 8001c24:	1b09      	subs	r1, r1, r4
 8001c26:	79c0      	ldrb	r0, [r0, #7]
 8001c28:	4281      	cmp	r1, r0
 8001c2a:	d355      	bcc.n	8001cd8 <encoder_handling+0x110>
		  {
			button._previous_state = 0x01U;
 8001c2c:	4944      	ldr	r1, [pc, #272]	; (8001d40 <encoder_handling+0x178>)
 8001c2e:	2001      	movs	r0, #1
 8001c30:	70c8      	strb	r0, [r1, #3]
			set_state(PRESSED);
			set_state(CLICK_PROCESS);
 8001c32:	f042 0212 	orr.w	r2, r2, #18
 8001c36:	808a      	strh	r2, [r1, #4]

	    button._timer = global_tick;
	  }

	  // Удержание
	  if ((button._previous_state) && (button._state))
 8001c38:	e02f      	b.n	8001c9a <encoder_handling+0xd2>
	    button._previous_state = 0x00U;
 8001c3a:	4a41      	ldr	r2, [pc, #260]	; (8001d40 <encoder_handling+0x178>)
 8001c3c:	2000      	movs	r0, #0
 8001c3e:	70d0      	strb	r0, [r2, #3]
	    if (get_state(CLICK_PROCESS) != 0U)
 8001c40:	f011 0f02 	tst.w	r1, #2
 8001c44:	d007      	beq.n	8001c56 <encoder_handling+0x8e>
	      reset_state(CLICK_PROCESS);
 8001c46:	f021 0103 	bic.w	r1, r1, #3
 8001c4a:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8001c4e:	8091      	strh	r1, [r2, #4]
	      button._clicks_counter++;
 8001c50:	7991      	ldrb	r1, [r2, #6]
 8001c52:	3101      	adds	r1, #1
 8001c54:	7191      	strb	r1, [r2, #6]
	    reset_state(HOLDING_PROCESS);
 8001c56:	493a      	ldr	r1, [pc, #232]	; (8001d40 <encoder_handling+0x178>)
 8001c58:	888a      	ldrh	r2, [r1, #4]
 8001c5a:	f022 0218 	bic.w	r2, r2, #24
 8001c5e:	f042 0220 	orr.w	r2, r2, #32
 8001c62:	808a      	strh	r2, [r1, #4]
	    button._timer = global_tick;
 8001c64:	4a37      	ldr	r2, [pc, #220]	; (8001d44 <encoder_handling+0x17c>)
 8001c66:	6812      	ldr	r2, [r2, #0]
 8001c68:	610a      	str	r2, [r1, #16]
 8001c6a:	e035      	b.n	8001cd8 <encoder_handling+0x110>
	  }

	  // Удержание "с инкрементацией" (для пошагового изменения величин)
	  if (get_state(HOLDING_PROCESS) != 0U)
	  {
	    if (timeout_passed(_step_timeout))
 8001c6c:	4935      	ldr	r1, [pc, #212]	; (8001d44 <encoder_handling+0x17c>)
 8001c6e:	6809      	ldr	r1, [r1, #0]
 8001c70:	4833      	ldr	r0, [pc, #204]	; (8001d40 <encoder_handling+0x178>)
 8001c72:	6904      	ldr	r4, [r0, #16]
 8001c74:	1b09      	subs	r1, r1, r4
 8001c76:	8980      	ldrh	r0, [r0, #12]
 8001c78:	4281      	cmp	r1, r0
 8001c7a:	d332      	bcc.n	8001ce2 <encoder_handling+0x11a>
	    {
	      set_state(INCREMENTING_HOLD);
 8001c7c:	4930      	ldr	r1, [pc, #192]	; (8001d40 <encoder_handling+0x178>)
 8001c7e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001c82:	808a      	strh	r2, [r1, #4]
	      button._timer = global_tick;
 8001c84:	4a2f      	ldr	r2, [pc, #188]	; (8001d44 <encoder_handling+0x17c>)
 8001c86:	6812      	ldr	r2, [r2, #0]
 8001c88:	610a      	str	r2, [r1, #16]
 8001c8a:	e02a      	b.n	8001ce2 <encoder_handling+0x11a>
		reset_state(DEBOUNCE_PROCESS);
 8001c8c:	4a2c      	ldr	r2, [pc, #176]	; (8001d40 <encoder_handling+0x178>)
 8001c8e:	8891      	ldrh	r1, [r2, #4]
 8001c90:	f021 0101 	bic.w	r1, r1, #1
 8001c94:	8091      	strh	r1, [r2, #4]
	  if ((button._previous_state) && (button._state))
 8001c96:	78d2      	ldrb	r2, [r2, #3]
 8001c98:	b1f2      	cbz	r2, 8001cd8 <encoder_handling+0x110>
	    if (timeout_passed(_hold_timeout))
 8001c9a:	4a2a      	ldr	r2, [pc, #168]	; (8001d44 <encoder_handling+0x17c>)
 8001c9c:	6812      	ldr	r2, [r2, #0]
 8001c9e:	4928      	ldr	r1, [pc, #160]	; (8001d40 <encoder_handling+0x178>)
 8001ca0:	6908      	ldr	r0, [r1, #16]
 8001ca2:	1a12      	subs	r2, r2, r0
 8001ca4:	8949      	ldrh	r1, [r1, #10]
 8001ca6:	428a      	cmp	r2, r1
 8001ca8:	d316      	bcc.n	8001cd8 <encoder_handling+0x110>
	      if (get_state(HOLDING_PROCESS) == 0U)
 8001caa:	4a25      	ldr	r2, [pc, #148]	; (8001d40 <encoder_handling+0x178>)
 8001cac:	8892      	ldrh	r2, [r2, #4]
 8001cae:	f012 0f08 	tst.w	r2, #8
 8001cb2:	d1db      	bne.n	8001c6c <encoder_handling+0xa4>
	        reset_state(CLICK_PROCESS);
 8001cb4:	4922      	ldr	r1, [pc, #136]	; (8001d40 <encoder_handling+0x178>)
 8001cb6:	f022 0202 	bic.w	r2, r2, #2
 8001cba:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 8001cbe:	808a      	strh	r2, [r1, #4]
	        button._timer = global_tick;
 8001cc0:	4a20      	ldr	r2, [pc, #128]	; (8001d44 <encoder_handling+0x17c>)
 8001cc2:	6812      	ldr	r2, [r2, #0]
 8001cc4:	610a      	str	r2, [r1, #16]
 8001cc6:	e007      	b.n	8001cd8 <encoder_handling+0x110>
		reset_state(DEBOUNCE_PROCESS);
 8001cc8:	4a1d      	ldr	r2, [pc, #116]	; (8001d40 <encoder_handling+0x178>)
 8001cca:	8891      	ldrh	r1, [r2, #4]
 8001ccc:	f021 0001 	bic.w	r0, r1, #1
 8001cd0:	8090      	strh	r0, [r2, #4]
	  if (!(button._state) && (button._previous_state))
 8001cd2:	78d2      	ldrb	r2, [r2, #3]
 8001cd4:	2a00      	cmp	r2, #0
 8001cd6:	d1b0      	bne.n	8001c3a <encoder_handling+0x72>
	  if (get_state(HOLDING_PROCESS) != 0U)
 8001cd8:	4a19      	ldr	r2, [pc, #100]	; (8001d40 <encoder_handling+0x178>)
 8001cda:	8892      	ldrh	r2, [r2, #4]
 8001cdc:	f012 0f08 	tst.w	r2, #8
 8001ce0:	d1c4      	bne.n	8001c6c <encoder_handling+0xa4>
	    }
	  }

	  // Многократное нажатие
	  if (timeout_passed(_click_timeout))
 8001ce2:	4a18      	ldr	r2, [pc, #96]	; (8001d44 <encoder_handling+0x17c>)
 8001ce4:	6812      	ldr	r2, [r2, #0]
 8001ce6:	4816      	ldr	r0, [pc, #88]	; (8001d40 <encoder_handling+0x178>)
 8001ce8:	6901      	ldr	r1, [r0, #16]
 8001cea:	1a52      	subs	r2, r2, r1
 8001cec:	8900      	ldrh	r0, [r0, #8]
 8001cee:	4282      	cmp	r2, r0
 8001cf0:	d308      	bcc.n	8001d04 <encoder_handling+0x13c>
	  {
	    if ((button._clicks_counter > 0U) && (button._state == 0U))
 8001cf2:	4a13      	ldr	r2, [pc, #76]	; (8001d40 <encoder_handling+0x178>)
 8001cf4:	7992      	ldrb	r2, [r2, #6]
 8001cf6:	b12a      	cbz	r2, 8001d04 <encoder_handling+0x13c>
 8001cf8:	b923      	cbnz	r3, 8001d04 <encoder_handling+0x13c>
	    {
	      set_state(MANY_CLICKS);
 8001cfa:	4a11      	ldr	r2, [pc, #68]	; (8001d40 <encoder_handling+0x178>)
 8001cfc:	8893      	ldrh	r3, [r2, #4]
 8001cfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d02:	8093      	strh	r3, [r2, #4]
	    }
	  }

	  // Сброс многократного нажатия
	  if (get_state(CLICKS_COUNTER_RESET) != 0U)
 8001d04:	4b0e      	ldr	r3, [pc, #56]	; (8001d40 <encoder_handling+0x178>)
 8001d06:	889a      	ldrh	r2, [r3, #4]
 8001d08:	f412 7f80 	tst.w	r2, #256	; 0x100
 8001d0c:	d004      	beq.n	8001d18 <encoder_handling+0x150>
	  {
	    reset_state(CLICKS_COUNTER_RESET);
	    reset_state(MANY_CLICKS);
 8001d0e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8001d12:	809a      	strh	r2, [r3, #4]
	    button._clicks_counter = 0U;
 8001d14:	2200      	movs	r2, #0
 8001d16:	719a      	strb	r2, [r3, #6]
	  }

	  // Сброс необработанных состояний
	  if (timeout_passed(_idle_timeout))
 8001d18:	4b0a      	ldr	r3, [pc, #40]	; (8001d44 <encoder_handling+0x17c>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	1a5b      	subs	r3, r3, r1
 8001d1e:	4a08      	ldr	r2, [pc, #32]	; (8001d40 <encoder_handling+0x178>)
 8001d20:	89d2      	ldrh	r2, [r2, #14]
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d303      	bcc.n	8001d2e <encoder_handling+0x166>
	  {
	    button._status = 0;
 8001d26:	4b06      	ldr	r3, [pc, #24]	; (8001d40 <encoder_handling+0x178>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	809a      	strh	r2, [r3, #4]
	    button._clicks_counter = 0U;
 8001d2c:	719a      	strb	r2, [r3, #6]
	  }

}
 8001d2e:	bc10      	pop	{r4}
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	40000400 	.word	0x40000400
 8001d38:	20000276 	.word	0x20000276
 8001d3c:	40010800 	.word	0x40010800
 8001d40:	20000278 	.word	0x20000278
 8001d44:	2000028c 	.word	0x2000028c

08001d48 <keyboard_handling>:

void keyboard_handling(void)
{
 8001d48:	b508      	push	{r3, lr}
	if (button_has_clicks (&button) == BUTTON_YES)
 8001d4a:	482a      	ldr	r0, [pc, #168]	; (8001df4 <keyboard_handling+0xac>)
 8001d4c:	f7ff fee2 	bl	8001b14 <button_has_clicks>
 8001d50:	b918      	cbnz	r0, 8001d5a <keyboard_handling+0x12>
  return _button->_clicks_counter;
 8001d52:	4b28      	ldr	r3, [pc, #160]	; (8001df4 <keyboard_handling+0xac>)
	  {
	    switch (button_get_clicks_count (&button))
 8001d54:	799b      	ldrb	r3, [r3, #6]
 8001d56:	2b05      	cmp	r3, #5
 8001d58:	d02c      	beq.n	8001db4 <keyboard_handling+0x6c>
	      //case 1:   agregat_reset_alarm (); break;
	      case 5:   NVIC_SystemReset ();    break;
	      default:                          break;
	    }
	  }
	if(page_properties.page_list == page_start)
 8001d5a:	4b27      	ldr	r3, [pc, #156]	; (8001df8 <keyboard_handling+0xb0>)
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d135      	bne.n	8001dce <keyboard_handling+0x86>
	{
		if (button_is_holding (&button) == BUTTON_YES)
 8001d62:	4824      	ldr	r0, [pc, #144]	; (8001df4 <keyboard_handling+0xac>)
 8001d64:	f7ff fee0 	bl	8001b28 <button_is_holding>
 8001d68:	2800      	cmp	r0, #0
 8001d6a:	d136      	bne.n	8001dda <keyboard_handling+0x92>
		{
			page_properties.page_list	= page_menu;
 8001d6c:	4b22      	ldr	r3, [pc, #136]	; (8001df8 <keyboard_handling+0xb0>)
 8001d6e:	2201      	movs	r2, #1
 8001d70:	701a      	strb	r2, [r3, #0]
			page_properties.line 		= line_0;
 8001d72:	2200      	movs	r2, #0
 8001d74:	705a      	strb	r2, [r3, #1]
		}
	}
	if(page_properties.page_list == page_menu)
	{
		if(button_is_click(&button) == BUTTON_YES)
 8001d76:	481f      	ldr	r0, [pc, #124]	; (8001df4 <keyboard_handling+0xac>)
 8001d78:	f7ff fee2 	bl	8001b40 <button_is_click>
		{
			switch(page_properties.line)
 8001d7c:	4b1e      	ldr	r3, [pc, #120]	; (8001df8 <keyboard_handling+0xb0>)
 8001d7e:	785b      	ldrb	r3, [r3, #1]
 8001d80:	4318      	orrs	r0, r3
 8001d82:	f010 0fff 	tst.w	r0, #255	; 0xff
 8001d86:	d124      	bne.n	8001dd2 <keyboard_handling+0x8a>
			{
				case line_0: page_properties.page_list = page_settings; page_properties.line = line_0; break;
 8001d88:	4b1b      	ldr	r3, [pc, #108]	; (8001df8 <keyboard_handling+0xb0>)
 8001d8a:	2202      	movs	r2, #2
 8001d8c:	701a      	strb	r2, [r3, #0]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	705a      	strb	r2, [r3, #1]
			}
		}
	}
	if(page_properties.page_list == page_settings)
	{
		if(button_is_click(&button) == BUTTON_YES)
 8001d92:	4818      	ldr	r0, [pc, #96]	; (8001df4 <keyboard_handling+0xac>)
 8001d94:	f7ff fed4 	bl	8001b40 <button_is_click>
 8001d98:	b9f8      	cbnz	r0, 8001dda <keyboard_handling+0x92>
		{
			switch(page_properties.line)
 8001d9a:	4b17      	ldr	r3, [pc, #92]	; (8001df8 <keyboard_handling+0xb0>)
 8001d9c:	785b      	ldrb	r3, [r3, #1]
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d01c      	beq.n	8001ddc <keyboard_handling+0x94>
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d020      	beq.n	8001de8 <keyboard_handling+0xa0>
 8001da6:	b9c3      	cbnz	r3, 8001dda <keyboard_handling+0x92>
			{
				case line_0: page_properties.page_list = page_setting_date; page_properties.line = line_0; break;
 8001da8:	4b13      	ldr	r3, [pc, #76]	; (8001df8 <keyboard_handling+0xb0>)
 8001daa:	2203      	movs	r2, #3
 8001dac:	701a      	strb	r2, [r3, #0]
 8001dae:	2200      	movs	r2, #0
 8001db0:	705a      	strb	r2, [r3, #1]
 8001db2:	e012      	b.n	8001dda <keyboard_handling+0x92>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001db4:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001db8:	4910      	ldr	r1, [pc, #64]	; (8001dfc <keyboard_handling+0xb4>)
 8001dba:	68ca      	ldr	r2, [r1, #12]
 8001dbc:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001dc0:	4b0f      	ldr	r3, [pc, #60]	; (8001e00 <keyboard_handling+0xb8>)
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	60cb      	str	r3, [r1, #12]
 8001dc6:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001dca:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8001dcc:	e7fd      	b.n	8001dca <keyboard_handling+0x82>
	if(page_properties.page_list == page_menu)
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d0d1      	beq.n	8001d76 <keyboard_handling+0x2e>
	if(page_properties.page_list == page_settings)
 8001dd2:	4b09      	ldr	r3, [pc, #36]	; (8001df8 <keyboard_handling+0xb0>)
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	2b02      	cmp	r3, #2
 8001dd8:	d0db      	beq.n	8001d92 <keyboard_handling+0x4a>

		}

	}

}
 8001dda:	bd08      	pop	{r3, pc}
				case line_1: page_properties.page_list = page_setting_time; page_properties.line = line_0; break;
 8001ddc:	4b06      	ldr	r3, [pc, #24]	; (8001df8 <keyboard_handling+0xb0>)
 8001dde:	2204      	movs	r2, #4
 8001de0:	701a      	strb	r2, [r3, #0]
 8001de2:	2200      	movs	r2, #0
 8001de4:	705a      	strb	r2, [r3, #1]
 8001de6:	e7f8      	b.n	8001dda <keyboard_handling+0x92>
				case line_2: page_properties.page_list = page_setting_GPS; page_properties.line = line_0; break;
 8001de8:	4b03      	ldr	r3, [pc, #12]	; (8001df8 <keyboard_handling+0xb0>)
 8001dea:	2205      	movs	r2, #5
 8001dec:	701a      	strb	r2, [r3, #0]
 8001dee:	2200      	movs	r2, #0
 8001df0:	705a      	strb	r2, [r3, #1]
}
 8001df2:	e7f2      	b.n	8001dda <keyboard_handling+0x92>
 8001df4:	20000278 	.word	0x20000278
 8001df8:	20000274 	.word	0x20000274
 8001dfc:	e000ed00 	.word	0xe000ed00
 8001e00:	05fa0004 	.word	0x05fa0004

08001e04 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001e04:	b508      	push	{r3, lr}
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001e06:	2401      	movs	r4, #1
 8001e08:	4620      	mov	r0, r4
 8001e0a:	f004 fc67 	bl	80066dc <osDelay>
  for(;;)
 8001e0e:	e7fb      	b.n	8001e08 <StartDefaultTask+0x4>

08001e10 <StartUARTTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUARTTask */
void StartUARTTask(void const * argument)
{
 8001e10:	b508      	push	{r3, lr}
  /* USER CODE BEGIN StartUARTTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001e12:	2401      	movs	r4, #1
 8001e14:	4620      	mov	r0, r4
 8001e16:	f004 fc61 	bl	80066dc <osDelay>
  for(;;)
 8001e1a:	e7fb      	b.n	8001e14 <StartUARTTask+0x4>

08001e1c <StartdispleyTask>:
{
 8001e1c:	b508      	push	{r3, lr}
	display_Init();
 8001e1e:	f7ff fc7d 	bl	800171c <display_Init>
		osDelay(500);
 8001e22:	f44f 74fa 	mov.w	r4, #500	; 0x1f4
		display_handle();
 8001e26:	f7ff fe51 	bl	8001acc <display_handle>
		osDelay(500);
 8001e2a:	4620      	mov	r0, r4
 8001e2c:	f004 fc56 	bl	80066dc <osDelay>
	for(;;)
 8001e30:	e7f9      	b.n	8001e26 <StartdispleyTask+0xa>

08001e32 <StartencodetTask>:
{
 8001e32:	b508      	push	{r3, lr}
	encoder_init();
 8001e34:	f7ff fe94 	bl	8001b60 <encoder_init>
		  osDelay(1);
 8001e38:	2401      	movs	r4, #1
		encoder_handling();
 8001e3a:	f7ff fec5 	bl	8001bc8 <encoder_handling>
		keyboard_handling();
 8001e3e:	f7ff ff83 	bl	8001d48 <keyboard_handling>
		  osDelay(1);
 8001e42:	4620      	mov	r0, r4
 8001e44:	f004 fc4a 	bl	80066dc <osDelay>
	for(;;)
 8001e48:	e7f7      	b.n	8001e3a <StartencodetTask+0x8>
	...

08001e4c <StartGPSTask>:
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
	sprintf((char*)Message, "T %02d:%02d:%02d", 12, 12, 12);
 8001e50:	4d26      	ldr	r5, [pc, #152]	; (8001eec <StartGPSTask+0xa0>)
 8001e52:	4c27      	ldr	r4, [pc, #156]	; (8001ef0 <StartGPSTask+0xa4>)
 8001e54:	220c      	movs	r2, #12
 8001e56:	9200      	str	r2, [sp, #0]
 8001e58:	4613      	mov	r3, r2
 8001e5a:	4629      	mov	r1, r5
 8001e5c:	4620      	mov	r0, r4
 8001e5e:	f006 f94d 	bl	80080fc <siprintf>
	osDelay(1000);
 8001e62:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e66:	f004 fc39 	bl	80066dc <osDelay>
	sprintf((char*)Message, "T %02d:%02d:%02d", GpsState.Hour, GpsState.Minute, GpsState.Second);
 8001e6a:	4a22      	ldr	r2, [pc, #136]	; (8001ef4 <StartGPSTask+0xa8>)
 8001e6c:	f892 3189 	ldrb.w	r3, [r2, #393]	; 0x189
 8001e70:	9300      	str	r3, [sp, #0]
 8001e72:	f892 3188 	ldrb.w	r3, [r2, #392]	; 0x188
 8001e76:	f892 2187 	ldrb.w	r2, [r2, #391]	; 0x187
 8001e7a:	4629      	mov	r1, r5
 8001e7c:	4620      	mov	r0, r4
 8001e7e:	f006 f93d 	bl	80080fc <siprintf>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001e82:	4f1d      	ldr	r7, [pc, #116]	; (8001ef8 <StartGPSTask+0xac>)
 8001e84:	f44f 5600 	mov.w	r6, #8192	; 0x2000
	  osDelay(1000);
 8001e88:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8001e8c:	e015      	b.n	8001eba <StartGPSTask+0x6e>
		 sprintf((char*)Message, "T %02d:%02d:%02d", GpsState.Hour, GpsState.Minute, GpsState.Second);
 8001e8e:	f895 3189 	ldrb.w	r3, [r5, #393]	; 0x189
 8001e92:	9300      	str	r3, [sp, #0]
 8001e94:	f895 3188 	ldrb.w	r3, [r5, #392]	; 0x188
 8001e98:	f895 2187 	ldrb.w	r2, [r5, #391]	; 0x187
 8001e9c:	4913      	ldr	r1, [pc, #76]	; (8001eec <StartGPSTask+0xa0>)
 8001e9e:	4814      	ldr	r0, [pc, #80]	; (8001ef0 <StartGPSTask+0xa4>)
 8001ea0:	f006 f92c 	bl	80080fc <siprintf>
	  osDelay(1000);
 8001ea4:	4620      	mov	r0, r4
 8001ea6:	f004 fc19 	bl	80066dc <osDelay>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001eaa:	2201      	movs	r2, #1
 8001eac:	4631      	mov	r1, r6
 8001eae:	4638      	mov	r0, r7
 8001eb0:	f001 fa90 	bl	80033d4 <HAL_GPIO_WritePin>
	  osDelay(1000);
 8001eb4:	4620      	mov	r0, r4
 8001eb6:	f004 fc11 	bl	80066dc <osDelay>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001eba:	2200      	movs	r2, #0
 8001ebc:	4631      	mov	r1, r6
 8001ebe:	4638      	mov	r0, r7
 8001ec0:	f001 fa88 	bl	80033d4 <HAL_GPIO_WritePin>
	  NEO6_Task(&GpsState);
 8001ec4:	4d0b      	ldr	r5, [pc, #44]	; (8001ef4 <StartGPSTask+0xa8>)
 8001ec6:	4628      	mov	r0, r5
 8001ec8:	f000 fecb 	bl	8002c62 <NEO6_Task>
	  osDelay(1000);
 8001ecc:	4620      	mov	r0, r4
 8001ece:	f004 fc05 	bl	80066dc <osDelay>
	  if(NEO6_IsFix(&GpsState))
 8001ed2:	4628      	mov	r0, r5
 8001ed4:	f000 fec2 	bl	8002c5c <NEO6_IsFix>
 8001ed8:	2800      	cmp	r0, #0
 8001eda:	d1d8      	bne.n	8001e8e <StartGPSTask+0x42>
		  sprintf((char*)Message, "No Fix\n\r");
 8001edc:	4a04      	ldr	r2, [pc, #16]	; (8001ef0 <StartGPSTask+0xa4>)
 8001ede:	4b07      	ldr	r3, [pc, #28]	; (8001efc <StartGPSTask+0xb0>)
 8001ee0:	cb03      	ldmia	r3!, {r0, r1}
 8001ee2:	6010      	str	r0, [r2, #0]
 8001ee4:	6051      	str	r1, [r2, #4]
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	7213      	strb	r3, [r2, #8]
 8001eea:	e7db      	b.n	8001ea4 <StartGPSTask+0x58>
 8001eec:	0800be74 	.word	0x0800be74
 8001ef0:	20000234 	.word	0x20000234
 8001ef4:	200006e8 	.word	0x200006e8
 8001ef8:	40011000 	.word	0x40011000
 8001efc:	0800be88 	.word	0x0800be88

08001f00 <StartRTCTask>:
{
 8001f00:	b508      	push	{r3, lr}
	rtc_Init();
 8001f02:	f000 f9fd 	bl	8002300 <rtc_Init>
    osDelay(100);
 8001f06:	2464      	movs	r4, #100	; 0x64
	  rtc_handle();
 8001f08:	f000 fa0c 	bl	8002324 <rtc_handle>
    osDelay(100);
 8001f0c:	4620      	mov	r0, r4
 8001f0e:	f004 fbe5 	bl	80066dc <osDelay>
  for(;;)
 8001f12:	e7f9      	b.n	8001f08 <StartRTCTask+0x8>

08001f14 <StartSensorTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSensorTask */
void StartSensorTask(void const * argument)
{
 8001f14:	b508      	push	{r3, lr}
  /* USER CODE BEGIN StartSensorTask */
  /* Infinite loop */

	sensors_Init();
 8001f16:	f000 fa1d 	bl	8002354 <sensors_Init>

  for(;;)
  {
	  sensors_Handle();
	  osDelay(1000);
 8001f1a:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
	  sensors_Handle();
 8001f1e:	f000 fa25 	bl	800236c <sensors_Handle>
	  osDelay(1000);
 8001f22:	4620      	mov	r0, r4
 8001f24:	f004 fbda 	bl	80066dc <osDelay>
  for(;;)
 8001f28:	e7f9      	b.n	8001f1e <StartSensorTask+0xa>
	...

08001f2c <vApplicationGetIdleTaskMemory>:
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001f2c:	4b03      	ldr	r3, [pc, #12]	; (8001f3c <vApplicationGetIdleTaskMemory+0x10>)
 8001f2e:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001f30:	4b03      	ldr	r3, [pc, #12]	; (8001f40 <vApplicationGetIdleTaskMemory+0x14>)
 8001f32:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001f34:	2380      	movs	r3, #128	; 0x80
 8001f36:	6013      	str	r3, [r2, #0]
}
 8001f38:	4770      	bx	lr
 8001f3a:	bf00      	nop
 8001f3c:	200004ac 	.word	0x200004ac
 8001f40:	200002ac 	.word	0x200002ac

08001f44 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 8001f44:	b510      	push	{r4, lr}
 8001f46:	b0b2      	sub	sp, #200	; 0xc8
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001f48:	4c3f      	ldr	r4, [pc, #252]	; (8002048 <MX_FREERTOS_Init+0x104>)
 8001f4a:	f10d 0cac 	add.w	ip, sp, #172	; 0xac
 8001f4e:	46a6      	mov	lr, r4
 8001f50:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8001f54:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001f58:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8001f5c:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001f60:	2100      	movs	r1, #0
 8001f62:	a82b      	add	r0, sp, #172	; 0xac
 8001f64:	f004 fb85 	bl	8006672 <osThreadCreate>
 8001f68:	4b38      	ldr	r3, [pc, #224]	; (800204c <MX_FREERTOS_Init+0x108>)
 8001f6a:	6018      	str	r0, [r3, #0]
  osThreadDef(displeyTask, StartdispleyTask, osPriorityLow, 0, 512);
 8001f6c:	f10d 0c90 	add.w	ip, sp, #144	; 0x90
 8001f70:	f104 0e1c 	add.w	lr, r4, #28
 8001f74:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8001f78:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001f7c:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8001f80:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
  displeyTaskHandle = osThreadCreate(osThread(displeyTask), NULL);
 8001f84:	2100      	movs	r1, #0
 8001f86:	a824      	add	r0, sp, #144	; 0x90
 8001f88:	f004 fb73 	bl	8006672 <osThreadCreate>
 8001f8c:	4b30      	ldr	r3, [pc, #192]	; (8002050 <MX_FREERTOS_Init+0x10c>)
 8001f8e:	6018      	str	r0, [r3, #0]
  osThreadDef(encodetTask, StartencodetTask, osPriorityLow, 0, 128);
 8001f90:	f10d 0c74 	add.w	ip, sp, #116	; 0x74
 8001f94:	f104 0e38 	add.w	lr, r4, #56	; 0x38
 8001f98:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8001f9c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001fa0:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8001fa4:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
  encodetTaskHandle = osThreadCreate(osThread(encodetTask), NULL);
 8001fa8:	2100      	movs	r1, #0
 8001faa:	a81d      	add	r0, sp, #116	; 0x74
 8001fac:	f004 fb61 	bl	8006672 <osThreadCreate>
 8001fb0:	4b28      	ldr	r3, [pc, #160]	; (8002054 <MX_FREERTOS_Init+0x110>)
 8001fb2:	6018      	str	r0, [r3, #0]
  osThreadDef(gpsTask, StartGPSTask, osPriorityLow, 0, 128);
 8001fb4:	f10d 0c58 	add.w	ip, sp, #88	; 0x58
 8001fb8:	f104 0e54 	add.w	lr, r4, #84	; 0x54
 8001fbc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8001fc0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001fc4:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8001fc8:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
  gpsTaskHandle = osThreadCreate(osThread(gpsTask), NULL);
 8001fcc:	2100      	movs	r1, #0
 8001fce:	a816      	add	r0, sp, #88	; 0x58
 8001fd0:	f004 fb4f 	bl	8006672 <osThreadCreate>
 8001fd4:	4b20      	ldr	r3, [pc, #128]	; (8002058 <MX_FREERTOS_Init+0x114>)
 8001fd6:	6018      	str	r0, [r3, #0]
  osThreadDef(rtcTask, StartRTCTask, osPriorityLow, 0, 128);
 8001fd8:	f10d 0c3c 	add.w	ip, sp, #60	; 0x3c
 8001fdc:	f104 0e70 	add.w	lr, r4, #112	; 0x70
 8001fe0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8001fe4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001fe8:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8001fec:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
  rtcTaskHandle = osThreadCreate(osThread(rtcTask), NULL);
 8001ff0:	2100      	movs	r1, #0
 8001ff2:	a80f      	add	r0, sp, #60	; 0x3c
 8001ff4:	f004 fb3d 	bl	8006672 <osThreadCreate>
 8001ff8:	4b18      	ldr	r3, [pc, #96]	; (800205c <MX_FREERTOS_Init+0x118>)
 8001ffa:	6018      	str	r0, [r3, #0]
  osThreadDef(UARTTask, StartUARTTask, osPriorityIdle, 0, 128);
 8001ffc:	f10d 0c20 	add.w	ip, sp, #32
 8002000:	f104 0e8c 	add.w	lr, r4, #140	; 0x8c
 8002004:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8002008:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800200c:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8002010:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
  UARTTaskHandle = osThreadCreate(osThread(UARTTask), NULL);
 8002014:	2100      	movs	r1, #0
 8002016:	a808      	add	r0, sp, #32
 8002018:	f004 fb2b 	bl	8006672 <osThreadCreate>
 800201c:	4b10      	ldr	r3, [pc, #64]	; (8002060 <MX_FREERTOS_Init+0x11c>)
 800201e:	6018      	str	r0, [r3, #0]
  osThreadDef(sensorsTask, StartSensorTask, osPriorityIdle, 0, 128);
 8002020:	f10d 0e04 	add.w	lr, sp, #4
 8002024:	f104 0ca8 	add.w	ip, r4, #168	; 0xa8
 8002028:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800202c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8002030:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8002034:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
  sensorsTaskHandle = osThreadCreate(osThread(sensorsTask), NULL);
 8002038:	2100      	movs	r1, #0
 800203a:	a801      	add	r0, sp, #4
 800203c:	f004 fb19 	bl	8006672 <osThreadCreate>
 8002040:	4b08      	ldr	r3, [pc, #32]	; (8002064 <MX_FREERTOS_Init+0x120>)
 8002042:	6018      	str	r0, [r3, #0]
}
 8002044:	b032      	add	sp, #200	; 0xc8
 8002046:	bd10      	pop	{r4, pc}
 8002048:	0800bca0 	.word	0x0800bca0
 800204c:	20000294 	.word	0x20000294
 8002050:	20000298 	.word	0x20000298
 8002054:	2000029c 	.word	0x2000029c
 8002058:	200002a0 	.word	0x200002a0
 800205c:	200002a4 	.word	0x200002a4
 8002060:	20000290 	.word	0x20000290
 8002064:	200002a8 	.word	0x200002a8

08002068 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002068:	b530      	push	{r4, r5, lr}
 800206a:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800206c:	2400      	movs	r4, #0
 800206e:	9404      	str	r4, [sp, #16]
 8002070:	9405      	str	r4, [sp, #20]
 8002072:	9406      	str	r4, [sp, #24]
 8002074:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002076:	4b20      	ldr	r3, [pc, #128]	; (80020f8 <MX_GPIO_Init+0x90>)
 8002078:	699a      	ldr	r2, [r3, #24]
 800207a:	f042 0210 	orr.w	r2, r2, #16
 800207e:	619a      	str	r2, [r3, #24]
 8002080:	699a      	ldr	r2, [r3, #24]
 8002082:	f002 0210 	and.w	r2, r2, #16
 8002086:	9200      	str	r2, [sp, #0]
 8002088:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800208a:	699a      	ldr	r2, [r3, #24]
 800208c:	f042 0220 	orr.w	r2, r2, #32
 8002090:	619a      	str	r2, [r3, #24]
 8002092:	699a      	ldr	r2, [r3, #24]
 8002094:	f002 0220 	and.w	r2, r2, #32
 8002098:	9201      	str	r2, [sp, #4]
 800209a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800209c:	699a      	ldr	r2, [r3, #24]
 800209e:	f042 0204 	orr.w	r2, r2, #4
 80020a2:	619a      	str	r2, [r3, #24]
 80020a4:	699a      	ldr	r2, [r3, #24]
 80020a6:	f002 0204 	and.w	r2, r2, #4
 80020aa:	9202      	str	r2, [sp, #8]
 80020ac:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020ae:	699a      	ldr	r2, [r3, #24]
 80020b0:	f042 0208 	orr.w	r2, r2, #8
 80020b4:	619a      	str	r2, [r3, #24]
 80020b6:	699b      	ldr	r3, [r3, #24]
 80020b8:	f003 0308 	and.w	r3, r3, #8
 80020bc:	9303      	str	r3, [sp, #12]
 80020be:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80020c0:	4d0e      	ldr	r5, [pc, #56]	; (80020fc <MX_GPIO_Init+0x94>)
 80020c2:	4622      	mov	r2, r4
 80020c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80020c8:	4628      	mov	r0, r5
 80020ca:	f001 f983 	bl	80033d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80020ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020d2:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020d4:	2301      	movs	r3, #1
 80020d6:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d8:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80020da:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020dc:	a904      	add	r1, sp, #16
 80020de:	4628      	mov	r0, r5
 80020e0:	f001 f83e 	bl	8003160 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80020e4:	2320      	movs	r3, #32
 80020e6:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020e8:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ea:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ec:	a904      	add	r1, sp, #16
 80020ee:	4804      	ldr	r0, [pc, #16]	; (8002100 <MX_GPIO_Init+0x98>)
 80020f0:	f001 f836 	bl	8003160 <HAL_GPIO_Init>

}
 80020f4:	b009      	add	sp, #36	; 0x24
 80020f6:	bd30      	pop	{r4, r5, pc}
 80020f8:	40021000 	.word	0x40021000
 80020fc:	40011000 	.word	0x40011000
 8002100:	40010800 	.word	0x40010800

08002104 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002104:	b508      	push	{r3, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002106:	480b      	ldr	r0, [pc, #44]	; (8002134 <MX_I2C1_Init+0x30>)
 8002108:	4b0b      	ldr	r3, [pc, #44]	; (8002138 <MX_I2C1_Init+0x34>)
 800210a:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800210c:	4b0b      	ldr	r3, [pc, #44]	; (800213c <MX_I2C1_Init+0x38>)
 800210e:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002110:	2300      	movs	r3, #0
 8002112:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002114:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002116:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800211a:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800211c:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800211e:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002120:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002122:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002124:	f001 fbd8 	bl	80038d8 <HAL_I2C_Init>
 8002128:	b900      	cbnz	r0, 800212c <MX_I2C1_Init+0x28>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800212a:	bd08      	pop	{r3, pc}
    Error_Handler();
 800212c:	f000 f8e6 	bl	80022fc <Error_Handler>
}
 8002130:	e7fb      	b.n	800212a <MX_I2C1_Init+0x26>
 8002132:	bf00      	nop
 8002134:	20000500 	.word	0x20000500
 8002138:	40005400 	.word	0x40005400
 800213c:	00061a80 	.word	0x00061a80

08002140 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8002140:	b508      	push	{r3, lr}
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002142:	480b      	ldr	r0, [pc, #44]	; (8002170 <MX_I2C2_Init+0x30>)
 8002144:	4b0b      	ldr	r3, [pc, #44]	; (8002174 <MX_I2C2_Init+0x34>)
 8002146:	6003      	str	r3, [r0, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8002148:	4b0b      	ldr	r3, [pc, #44]	; (8002178 <MX_I2C2_Init+0x38>)
 800214a:	6043      	str	r3, [r0, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800214c:	2300      	movs	r3, #0
 800214e:	6083      	str	r3, [r0, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002150:	60c3      	str	r3, [r0, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002152:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002156:	6102      	str	r2, [r0, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002158:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800215a:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800215c:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800215e:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002160:	f001 fbba 	bl	80038d8 <HAL_I2C_Init>
 8002164:	b900      	cbnz	r0, 8002168 <MX_I2C2_Init+0x28>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002166:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002168:	f000 f8c8 	bl	80022fc <Error_Handler>
}
 800216c:	e7fb      	b.n	8002166 <MX_I2C2_Init+0x26>
 800216e:	bf00      	nop
 8002170:	20000554 	.word	0x20000554
 8002174:	40005800 	.word	0x40005800
 8002178:	000186a0 	.word	0x000186a0

0800217c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800217c:	b510      	push	{r4, lr}
 800217e:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002180:	2300      	movs	r3, #0
 8002182:	9304      	str	r3, [sp, #16]
 8002184:	9305      	str	r3, [sp, #20]
 8002186:	9306      	str	r3, [sp, #24]
 8002188:	9307      	str	r3, [sp, #28]
  if(i2cHandle->Instance==I2C1)
 800218a:	6803      	ldr	r3, [r0, #0]
 800218c:	4a2a      	ldr	r2, [pc, #168]	; (8002238 <HAL_I2C_MspInit+0xbc>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d004      	beq.n	800219c <HAL_I2C_MspInit+0x20>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
  else if(i2cHandle->Instance==I2C2)
 8002192:	4a2a      	ldr	r2, [pc, #168]	; (800223c <HAL_I2C_MspInit+0xc0>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d02f      	beq.n	80021f8 <HAL_I2C_MspInit+0x7c>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8002198:	b008      	add	sp, #32
 800219a:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800219c:	4c28      	ldr	r4, [pc, #160]	; (8002240 <HAL_I2C_MspInit+0xc4>)
 800219e:	69a3      	ldr	r3, [r4, #24]
 80021a0:	f043 0308 	orr.w	r3, r3, #8
 80021a4:	61a3      	str	r3, [r4, #24]
 80021a6:	69a3      	ldr	r3, [r4, #24]
 80021a8:	f003 0308 	and.w	r3, r3, #8
 80021ac:	9300      	str	r3, [sp, #0]
 80021ae:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80021b0:	23c0      	movs	r3, #192	; 0xc0
 80021b2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021b4:	2312      	movs	r3, #18
 80021b6:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021b8:	2303      	movs	r3, #3
 80021ba:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021bc:	a904      	add	r1, sp, #16
 80021be:	4821      	ldr	r0, [pc, #132]	; (8002244 <HAL_I2C_MspInit+0xc8>)
 80021c0:	f000 ffce 	bl	8003160 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 80021c4:	69e3      	ldr	r3, [r4, #28]
 80021c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80021ca:	61e3      	str	r3, [r4, #28]
 80021cc:	69e3      	ldr	r3, [r4, #28]
 80021ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021d2:	9301      	str	r3, [sp, #4]
 80021d4:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 80021d6:	2200      	movs	r2, #0
 80021d8:	2105      	movs	r1, #5
 80021da:	201f      	movs	r0, #31
 80021dc:	f000 ff08 	bl	8002ff0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80021e0:	201f      	movs	r0, #31
 80021e2:	f000 ff3b 	bl	800305c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 80021e6:	2200      	movs	r2, #0
 80021e8:	2105      	movs	r1, #5
 80021ea:	2020      	movs	r0, #32
 80021ec:	f000 ff00 	bl	8002ff0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80021f0:	2020      	movs	r0, #32
 80021f2:	f000 ff33 	bl	800305c <HAL_NVIC_EnableIRQ>
 80021f6:	e7cf      	b.n	8002198 <HAL_I2C_MspInit+0x1c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021f8:	4c11      	ldr	r4, [pc, #68]	; (8002240 <HAL_I2C_MspInit+0xc4>)
 80021fa:	69a3      	ldr	r3, [r4, #24]
 80021fc:	f043 0308 	orr.w	r3, r3, #8
 8002200:	61a3      	str	r3, [r4, #24]
 8002202:	69a3      	ldr	r3, [r4, #24]
 8002204:	f003 0308 	and.w	r3, r3, #8
 8002208:	9302      	str	r3, [sp, #8]
 800220a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800220c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002210:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002212:	2312      	movs	r3, #18
 8002214:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002216:	2303      	movs	r3, #3
 8002218:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800221a:	a904      	add	r1, sp, #16
 800221c:	4809      	ldr	r0, [pc, #36]	; (8002244 <HAL_I2C_MspInit+0xc8>)
 800221e:	f000 ff9f 	bl	8003160 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002222:	69e3      	ldr	r3, [r4, #28]
 8002224:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002228:	61e3      	str	r3, [r4, #28]
 800222a:	69e3      	ldr	r3, [r4, #28]
 800222c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002230:	9303      	str	r3, [sp, #12]
 8002232:	9b03      	ldr	r3, [sp, #12]
}
 8002234:	e7b0      	b.n	8002198 <HAL_I2C_MspInit+0x1c>
 8002236:	bf00      	nop
 8002238:	40005400 	.word	0x40005400
 800223c:	40005800 	.word	0x40005800
 8002240:	40021000 	.word	0x40021000
 8002244:	40010c00 	.word	0x40010c00

08002248 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002248:	b500      	push	{lr}
 800224a:	b091      	sub	sp, #68	; 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800224c:	2300      	movs	r3, #0
 800224e:	9308      	str	r3, [sp, #32]
 8002250:	9309      	str	r3, [sp, #36]	; 0x24
 8002252:	930b      	str	r3, [sp, #44]	; 0x2c
 8002254:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002256:	9301      	str	r3, [sp, #4]
 8002258:	9302      	str	r3, [sp, #8]
 800225a:	9303      	str	r3, [sp, #12]
 800225c:	9304      	str	r3, [sp, #16]
 800225e:	9305      	str	r3, [sp, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002260:	2201      	movs	r2, #1
 8002262:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002264:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002268:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800226a:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800226c:	2202      	movs	r2, #2
 800226e:	920d      	str	r2, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002270:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002272:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002276:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002278:	a806      	add	r0, sp, #24
 800227a:	f003 f941 	bl	8005500 <HAL_RCC_OscConfig>
 800227e:	b980      	cbnz	r0, 80022a2 <SystemClock_Config+0x5a>
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002280:	230f      	movs	r3, #15
 8002282:	9301      	str	r3, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002284:	2102      	movs	r1, #2
 8002286:	9102      	str	r1, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002288:	2300      	movs	r3, #0
 800228a:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800228c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002290:	9204      	str	r2, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002292:	9305      	str	r3, [sp, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002294:	a801      	add	r0, sp, #4
 8002296:	f003 fb73 	bl	8005980 <HAL_RCC_ClockConfig>
 800229a:	b920      	cbnz	r0, 80022a6 <SystemClock_Config+0x5e>
  {
    Error_Handler();
  }
}
 800229c:	b011      	add	sp, #68	; 0x44
 800229e:	f85d fb04 	ldr.w	pc, [sp], #4
  __ASM volatile ("cpsid i" : : : "memory");
 80022a2:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80022a4:	e7fe      	b.n	80022a4 <SystemClock_Config+0x5c>
 80022a6:	b672      	cpsid	i
 80022a8:	e7fe      	b.n	80022a8 <SystemClock_Config+0x60>

080022aa <main>:
{
 80022aa:	b508      	push	{r3, lr}
  HAL_Init();
 80022ac:	f000 fe56 	bl	8002f5c <HAL_Init>
  SystemClock_Config();
 80022b0:	f7ff ffca 	bl	8002248 <SystemClock_Config>
  MX_GPIO_Init();
 80022b4:	f7ff fed8 	bl	8002068 <MX_GPIO_Init>
  MX_I2C1_Init();
 80022b8:	f7ff ff24 	bl	8002104 <MX_I2C1_Init>
  MX_I2C2_Init();
 80022bc:	f7ff ff40 	bl	8002140 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 80022c0:	f000 f9b4 	bl	800262c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80022c4:	f000 f9cc 	bl	8002660 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80022c8:	f000 f946 	bl	8002558 <MX_TIM3_Init>
  MX_FREERTOS_Init();
 80022cc:	f7ff fe3a 	bl	8001f44 <MX_FREERTOS_Init>
  osKernelStart();
 80022d0:	f004 f9ca 	bl	8006668 <osKernelStart>
  while (1)
 80022d4:	e7fe      	b.n	80022d4 <main+0x2a>
	...

080022d8 <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM4) {
 80022d8:	6802      	ldr	r2, [r0, #0]
 80022da:	4b07      	ldr	r3, [pc, #28]	; (80022f8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80022dc:	429a      	cmp	r2, r3
 80022de:	d000      	beq.n	80022e2 <HAL_TIM_PeriodElapsedCallback+0xa>
 80022e0:	4770      	bx	lr
{
 80022e2:	b510      	push	{r4, lr}
 80022e4:	4604      	mov	r4, r0
    HAL_IncTick();
 80022e6:	f000 fe4b 	bl	8002f80 <HAL_IncTick>
  if (htim->Instance == TIM4)
 80022ea:	6822      	ldr	r2, [r4, #0]
 80022ec:	4b02      	ldr	r3, [pc, #8]	; (80022f8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d101      	bne.n	80022f6 <HAL_TIM_PeriodElapsedCallback+0x1e>
	  button_timer_tick();
 80022f2:	f7ff fc61 	bl	8001bb8 <button_timer_tick>
}
 80022f6:	bd10      	pop	{r4, pc}
 80022f8:	40000800 	.word	0x40000800

080022fc <Error_Handler>:
 80022fc:	b672      	cpsid	i
  while (1)
 80022fe:	e7fe      	b.n	80022fe <Error_Handler+0x2>

08002300 <rtc_Init>:
/* Private function prototypes -----------------------------------------------*/


/* Private user code ---------------------------------------------------------*/
void rtc_Init(void)
{
 8002300:	b508      	push	{r3, lr}
	timedata.sec	= 0;
 8002302:	4b06      	ldr	r3, [pc, #24]	; (800231c <rtc_Init+0x1c>)
 8002304:	2200      	movs	r2, #0
 8002306:	701a      	strb	r2, [r3, #0]
	timedata.min	= 0;
 8002308:	705a      	strb	r2, [r3, #1]
	timedata.hour	= 0;
 800230a:	709a      	strb	r2, [r3, #2]

	timedata.date	= 0;
 800230c:	70da      	strb	r2, [r3, #3]
	timedata.month	= 0;
 800230e:	711a      	strb	r2, [r3, #4]
	timedata.year	= 0;
 8002310:	80da      	strh	r2, [r3, #6]

	DS1307_Init(&hi2c2);
 8002312:	4803      	ldr	r0, [pc, #12]	; (8002320 <rtc_Init+0x20>)
 8002314:	f000 fa98 	bl	8002848 <DS1307_Init>
//		DS1307_SetYear(2024);
////		DS1307_SetDayOfWeek(4);
//		DS1307_SetHour(17);
//		DS1307_SetMinute(6);
//		DS1307_SetSecond(00);
}
 8002318:	bd08      	pop	{r3, pc}
 800231a:	bf00      	nop
 800231c:	200005a8 	.word	0x200005a8
 8002320:	20000554 	.word	0x20000554

08002324 <rtc_handle>:

void rtc_handle (void)
{
 8002324:	b510      	push	{r4, lr}
	timedata.sec	= DS1307_GetSecond();
 8002326:	f000 fad2 	bl	80028ce <DS1307_GetSecond>
 800232a:	4c09      	ldr	r4, [pc, #36]	; (8002350 <rtc_handle+0x2c>)
 800232c:	7020      	strb	r0, [r4, #0]
	timedata.min	= DS1307_GetMinute();
 800232e:	f000 fac7 	bl	80028c0 <DS1307_GetMinute>
 8002332:	7060      	strb	r0, [r4, #1]
	timedata.hour	= DS1307_GetHour();
 8002334:	f000 fabb 	bl	80028ae <DS1307_GetHour>
 8002338:	70a0      	strb	r0, [r4, #2]

	timedata.date	= DS1307_GetDate();
 800233a:	f000 fa98 	bl	800286e <DS1307_GetDate>
 800233e:	70e0      	strb	r0, [r4, #3]
	timedata.month	= DS1307_GetMonth();
 8002340:	f000 fa9c 	bl	800287c <DS1307_GetMonth>
 8002344:	7120      	strb	r0, [r4, #4]
	timedata.year	= DS1307_GetYear();
 8002346:	f000 faa0 	bl	800288a <DS1307_GetYear>
 800234a:	80e0      	strh	r0, [r4, #6]
}
 800234c:	bd10      	pop	{r4, pc}
 800234e:	bf00      	nop
 8002350:	200005a8 	.word	0x200005a8

08002354 <sensors_Init>:
/* Private function prototypes -----------------------------------------------*/


/* Private user code ---------------------------------------------------------*/
void sensors_Init(void)
{
 8002354:	b508      	push	{r3, lr}
	BME280_sensor.temperature = 0.0f;
 8002356:	4b04      	ldr	r3, [pc, #16]	; (8002368 <sensors_Init+0x14>)
 8002358:	2200      	movs	r2, #0
 800235a:	601a      	str	r2, [r3, #0]
	BME280_sensor.pressure = 0.0f;
 800235c:	605a      	str	r2, [r3, #4]
	BME280_sensor.humidity = 0.0f;
 800235e:	609a      	str	r2, [r3, #8]
	BME280_Init();
 8002360:	f7ff f9bc 	bl	80016dc <BME280_Init>
}
 8002364:	bd08      	pop	{r3, pc}
 8002366:	bf00      	nop
 8002368:	200005b0 	.word	0x200005b0

0800236c <sensors_Handle>:

void sensors_Handle(void)
{
 800236c:	b510      	push	{r4, lr}
	BME280_sensor.temperature = BME280_ReadTemperature();
 800236e:	f7ff f84d 	bl	800140c <BME280_ReadTemperature>
 8002372:	4c03      	ldr	r4, [pc, #12]	; (8002380 <sensors_Handle+0x14>)
 8002374:	6020      	str	r0, [r4, #0]
	BME280_sensor.pressure = BME280_ReadPressure();
 8002376:	f7ff f87b 	bl	8001470 <BME280_ReadPressure>
 800237a:	6060      	str	r0, [r4, #4]

}
 800237c:	bd10      	pop	{r4, pc}
 800237e:	bf00      	nop
 8002380:	200005b0 	.word	0x200005b0

08002384 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002384:	b500      	push	{lr}
 8002386:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002388:	4b11      	ldr	r3, [pc, #68]	; (80023d0 <HAL_MspInit+0x4c>)
 800238a:	699a      	ldr	r2, [r3, #24]
 800238c:	f042 0201 	orr.w	r2, r2, #1
 8002390:	619a      	str	r2, [r3, #24]
 8002392:	699a      	ldr	r2, [r3, #24]
 8002394:	f002 0201 	and.w	r2, r2, #1
 8002398:	9200      	str	r2, [sp, #0]
 800239a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800239c:	69da      	ldr	r2, [r3, #28]
 800239e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80023a2:	61da      	str	r2, [r3, #28]
 80023a4:	69db      	ldr	r3, [r3, #28]
 80023a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023aa:	9301      	str	r3, [sp, #4]
 80023ac:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80023ae:	2200      	movs	r2, #0
 80023b0:	210f      	movs	r1, #15
 80023b2:	f06f 0001 	mvn.w	r0, #1
 80023b6:	f000 fe1b 	bl	8002ff0 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80023ba:	4a06      	ldr	r2, [pc, #24]	; (80023d4 <HAL_MspInit+0x50>)
 80023bc:	6853      	ldr	r3, [r2, #4]
 80023be:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80023c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80023c6:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023c8:	b003      	add	sp, #12
 80023ca:	f85d fb04 	ldr.w	pc, [sp], #4
 80023ce:	bf00      	nop
 80023d0:	40021000 	.word	0x40021000
 80023d4:	40010000 	.word	0x40010000

080023d8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023d8:	b500      	push	{lr}
 80023da:	b089      	sub	sp, #36	; 0x24
 80023dc:	4601      	mov	r1, r0
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 80023de:	2200      	movs	r2, #0
 80023e0:	201e      	movs	r0, #30
 80023e2:	f000 fe05 	bl	8002ff0 <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80023e6:	201e      	movs	r0, #30
 80023e8:	f000 fe38 	bl	800305c <HAL_NVIC_EnableIRQ>

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80023ec:	4b15      	ldr	r3, [pc, #84]	; (8002444 <HAL_InitTick+0x6c>)
 80023ee:	69da      	ldr	r2, [r3, #28]
 80023f0:	f042 0204 	orr.w	r2, r2, #4
 80023f4:	61da      	str	r2, [r3, #28]
 80023f6:	69db      	ldr	r3, [r3, #28]
 80023f8:	f003 0304 	and.w	r3, r3, #4
 80023fc:	9301      	str	r3, [sp, #4]
 80023fe:	9b01      	ldr	r3, [sp, #4]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002400:	a902      	add	r1, sp, #8
 8002402:	a803      	add	r0, sp, #12
 8002404:	f003 fb94 	bl	8005b30 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002408:	f003 fb72 	bl	8005af0 <HAL_RCC_GetPCLK1Freq>
 800240c:	4603      	mov	r3, r0
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 800240e:	480e      	ldr	r0, [pc, #56]	; (8002448 <HAL_InitTick+0x70>)
 8002410:	4a0e      	ldr	r2, [pc, #56]	; (800244c <HAL_InitTick+0x74>)
 8002412:	6002      	str	r2, [r0, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8002414:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002418:	60c2      	str	r2, [r0, #12]
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800241a:	005b      	lsls	r3, r3, #1
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800241c:	4a0c      	ldr	r2, [pc, #48]	; (8002450 <HAL_InitTick+0x78>)
 800241e:	fba2 2303 	umull	r2, r3, r2, r3
 8002422:	0c9b      	lsrs	r3, r3, #18
 8002424:	3b01      	subs	r3, #1
  htim4.Init.Prescaler = uwPrescalerValue;
 8002426:	6043      	str	r3, [r0, #4]
  htim4.Init.ClockDivision = 0;
 8002428:	2300      	movs	r3, #0
 800242a:	6103      	str	r3, [r0, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800242c:	6083      	str	r3, [r0, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 800242e:	f003 fce3 	bl	8005df8 <HAL_TIM_Base_Init>
 8002432:	b118      	cbz	r0, 800243c <HAL_InitTick+0x64>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
  }

  /* Return function status */
  return HAL_ERROR;
 8002434:	2001      	movs	r0, #1
}
 8002436:	b009      	add	sp, #36	; 0x24
 8002438:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_TIM_Base_Start_IT(&htim4);
 800243c:	4802      	ldr	r0, [pc, #8]	; (8002448 <HAL_InitTick+0x70>)
 800243e:	f003 fb97 	bl	8005b70 <HAL_TIM_Base_Start_IT>
 8002442:	e7f8      	b.n	8002436 <HAL_InitTick+0x5e>
 8002444:	40021000 	.word	0x40021000
 8002448:	200005bc 	.word	0x200005bc
 800244c:	40000800 	.word	0x40000800
 8002450:	431bde83 	.word	0x431bde83

08002454 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002454:	e7fe      	b.n	8002454 <NMI_Handler>

08002456 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002456:	e7fe      	b.n	8002456 <HardFault_Handler>

08002458 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002458:	e7fe      	b.n	8002458 <MemManage_Handler>

0800245a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800245a:	e7fe      	b.n	800245a <BusFault_Handler>

0800245c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800245c:	e7fe      	b.n	800245c <UsageFault_Handler>

0800245e <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800245e:	4770      	bx	lr

08002460 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002460:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002462:	4802      	ldr	r0, [pc, #8]	; (800246c <TIM4_IRQHandler+0xc>)
 8002464:	f003 fbbc 	bl	8005be0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002468:	bd08      	pop	{r3, pc}
 800246a:	bf00      	nop
 800246c:	200005bc 	.word	0x200005bc

08002470 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002470:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002472:	4802      	ldr	r0, [pc, #8]	; (800247c <I2C1_EV_IRQHandler+0xc>)
 8002474:	f002 fa14 	bl	80048a0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002478:	bd08      	pop	{r3, pc}
 800247a:	bf00      	nop
 800247c:	20000500 	.word	0x20000500

08002480 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002480:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002482:	4802      	ldr	r0, [pc, #8]	; (800248c <I2C1_ER_IRQHandler+0xc>)
 8002484:	f002 ff5c 	bl	8005340 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002488:	bd08      	pop	{r3, pc}
 800248a:	bf00      	nop
 800248c:	20000500 	.word	0x20000500

08002490 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002490:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002492:	4802      	ldr	r0, [pc, #8]	; (800249c <USART1_IRQHandler+0xc>)
 8002494:	f003 ff6a 	bl	800636c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002498:	bd08      	pop	{r3, pc}
 800249a:	bf00      	nop
 800249c:	20000650 	.word	0x20000650

080024a0 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80024a0:	2001      	movs	r0, #1
 80024a2:	4770      	bx	lr

080024a4 <_kill>:

int _kill(int pid, int sig)
{
 80024a4:	b508      	push	{r3, lr}
	errno = EINVAL;
 80024a6:	f004 ff5d 	bl	8007364 <__errno>
 80024aa:	2316      	movs	r3, #22
 80024ac:	6003      	str	r3, [r0, #0]
	return -1;
}
 80024ae:	f04f 30ff 	mov.w	r0, #4294967295
 80024b2:	bd08      	pop	{r3, pc}

080024b4 <_exit>:

void _exit (int status)
{
 80024b4:	b508      	push	{r3, lr}
	errno = EINVAL;
 80024b6:	f004 ff55 	bl	8007364 <__errno>
 80024ba:	2316      	movs	r3, #22
 80024bc:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 80024be:	e7fe      	b.n	80024be <_exit+0xa>

080024c0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024c0:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024c2:	1e16      	subs	r6, r2, #0
 80024c4:	dd07      	ble.n	80024d6 <_read+0x16>
 80024c6:	460c      	mov	r4, r1
 80024c8:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 80024ca:	f3af 8000 	nop.w
 80024ce:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024d2:	42a5      	cmp	r5, r4
 80024d4:	d1f9      	bne.n	80024ca <_read+0xa>
	}

return len;
}
 80024d6:	4630      	mov	r0, r6
 80024d8:	bd70      	pop	{r4, r5, r6, pc}

080024da <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80024da:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024dc:	1e16      	subs	r6, r2, #0
 80024de:	dd07      	ble.n	80024f0 <_write+0x16>
 80024e0:	460c      	mov	r4, r1
 80024e2:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 80024e4:	f814 0b01 	ldrb.w	r0, [r4], #1
 80024e8:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024ec:	42a5      	cmp	r5, r4
 80024ee:	d1f9      	bne.n	80024e4 <_write+0xa>
	}
	return len;
}
 80024f0:	4630      	mov	r0, r6
 80024f2:	bd70      	pop	{r4, r5, r6, pc}

080024f4 <_close>:

int _close(int file)
{
	return -1;
}
 80024f4:	f04f 30ff 	mov.w	r0, #4294967295
 80024f8:	4770      	bx	lr

080024fa <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80024fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024fe:	604b      	str	r3, [r1, #4]
	return 0;
}
 8002500:	2000      	movs	r0, #0
 8002502:	4770      	bx	lr

08002504 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8002504:	2001      	movs	r0, #1
 8002506:	4770      	bx	lr

08002508 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8002508:	2000      	movs	r0, #0
 800250a:	4770      	bx	lr

0800250c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800250c:	b508      	push	{r3, lr}
 800250e:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002510:	4a0c      	ldr	r2, [pc, #48]	; (8002544 <_sbrk+0x38>)
 8002512:	6812      	ldr	r2, [r2, #0]
 8002514:	b152      	cbz	r2, 800252c <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002516:	4a0b      	ldr	r2, [pc, #44]	; (8002544 <_sbrk+0x38>)
 8002518:	6810      	ldr	r0, [r2, #0]
 800251a:	4403      	add	r3, r0
 800251c:	4a0a      	ldr	r2, [pc, #40]	; (8002548 <_sbrk+0x3c>)
 800251e:	490b      	ldr	r1, [pc, #44]	; (800254c <_sbrk+0x40>)
 8002520:	1a52      	subs	r2, r2, r1
 8002522:	4293      	cmp	r3, r2
 8002524:	d806      	bhi.n	8002534 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8002526:	4a07      	ldr	r2, [pc, #28]	; (8002544 <_sbrk+0x38>)
 8002528:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 800252a:	bd08      	pop	{r3, pc}
    __sbrk_heap_end = &_end;
 800252c:	4a05      	ldr	r2, [pc, #20]	; (8002544 <_sbrk+0x38>)
 800252e:	4908      	ldr	r1, [pc, #32]	; (8002550 <_sbrk+0x44>)
 8002530:	6011      	str	r1, [r2, #0]
 8002532:	e7f0      	b.n	8002516 <_sbrk+0xa>
    errno = ENOMEM;
 8002534:	f004 ff16 	bl	8007364 <__errno>
 8002538:	230c      	movs	r3, #12
 800253a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800253c:	f04f 30ff 	mov.w	r0, #4294967295
 8002540:	e7f3      	b.n	800252a <_sbrk+0x1e>
 8002542:	bf00      	nop
 8002544:	20000604 	.word	0x20000604
 8002548:	20005000 	.word	0x20005000
 800254c:	00000400 	.word	0x00000400
 8002550:	200027b8 	.word	0x200027b8

08002554 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002554:	4770      	bx	lr
	...

08002558 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002558:	b500      	push	{lr}
 800255a:	b08d      	sub	sp, #52	; 0x34

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800255c:	2300      	movs	r3, #0
 800255e:	9306      	str	r3, [sp, #24]
 8002560:	930a      	str	r3, [sp, #40]	; 0x28
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002562:	9301      	str	r3, [sp, #4]
 8002564:	9302      	str	r3, [sp, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002566:	4814      	ldr	r0, [pc, #80]	; (80025b8 <MX_TIM3_Init+0x60>)
 8002568:	4a14      	ldr	r2, [pc, #80]	; (80025bc <MX_TIM3_Init+0x64>)
 800256a:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 0;
 800256c:	6043      	str	r3, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800256e:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 1000;
 8002570:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002574:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002576:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002578:	6183      	str	r3, [r0, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800257a:	2301      	movs	r3, #1
 800257c:	9303      	str	r3, [sp, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 800257e:	2102      	movs	r1, #2
 8002580:	9104      	str	r1, [sp, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002582:	9305      	str	r3, [sp, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC1Filter = 6;
 8002584:	2206      	movs	r2, #6
 8002586:	9207      	str	r2, [sp, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8002588:	9108      	str	r1, [sp, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800258a:	9309      	str	r3, [sp, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC2Filter = 6;
 800258c:	920b      	str	r2, [sp, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800258e:	a903      	add	r1, sp, #12
 8002590:	f003 fc5e 	bl	8005e50 <HAL_TIM_Encoder_Init>
 8002594:	b950      	cbnz	r0, 80025ac <MX_TIM3_Init+0x54>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002596:	2300      	movs	r3, #0
 8002598:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800259a:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800259c:	a901      	add	r1, sp, #4
 800259e:	4806      	ldr	r0, [pc, #24]	; (80025b8 <MX_TIM3_Init+0x60>)
 80025a0:	f003 fd8e 	bl	80060c0 <HAL_TIMEx_MasterConfigSynchronization>
 80025a4:	b928      	cbnz	r0, 80025b2 <MX_TIM3_Init+0x5a>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80025a6:	b00d      	add	sp, #52	; 0x34
 80025a8:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80025ac:	f7ff fea6 	bl	80022fc <Error_Handler>
 80025b0:	e7f1      	b.n	8002596 <MX_TIM3_Init+0x3e>
    Error_Handler();
 80025b2:	f7ff fea3 	bl	80022fc <Error_Handler>
}
 80025b6:	e7f6      	b.n	80025a6 <MX_TIM3_Init+0x4e>
 80025b8:	20000608 	.word	0x20000608
 80025bc:	40000400 	.word	0x40000400

080025c0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80025c0:	b500      	push	{lr}
 80025c2:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025c4:	2300      	movs	r3, #0
 80025c6:	9302      	str	r3, [sp, #8]
 80025c8:	9303      	str	r3, [sp, #12]
 80025ca:	9304      	str	r3, [sp, #16]
 80025cc:	9305      	str	r3, [sp, #20]
  if(tim_encoderHandle->Instance==TIM3)
 80025ce:	6802      	ldr	r2, [r0, #0]
 80025d0:	4b13      	ldr	r3, [pc, #76]	; (8002620 <HAL_TIM_Encoder_MspInit+0x60>)
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d002      	beq.n	80025dc <HAL_TIM_Encoder_MspInit+0x1c>
  /* USER CODE BEGIN TIM3_MspInit 1 */
    HAL_TIM_Encoder_Start_IT(&htim3,TIM_CHANNEL_2);

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80025d6:	b007      	add	sp, #28
 80025d8:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM3_CLK_ENABLE();
 80025dc:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 80025e0:	69da      	ldr	r2, [r3, #28]
 80025e2:	f042 0202 	orr.w	r2, r2, #2
 80025e6:	61da      	str	r2, [r3, #28]
 80025e8:	69da      	ldr	r2, [r3, #28]
 80025ea:	f002 0202 	and.w	r2, r2, #2
 80025ee:	9200      	str	r2, [sp, #0]
 80025f0:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025f2:	699a      	ldr	r2, [r3, #24]
 80025f4:	f042 0204 	orr.w	r2, r2, #4
 80025f8:	619a      	str	r2, [r3, #24]
 80025fa:	699b      	ldr	r3, [r3, #24]
 80025fc:	f003 0304 	and.w	r3, r3, #4
 8002600:	9301      	str	r3, [sp, #4]
 8002602:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002604:	23c0      	movs	r3, #192	; 0xc0
 8002606:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002608:	2301      	movs	r3, #1
 800260a:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800260c:	a902      	add	r1, sp, #8
 800260e:	4805      	ldr	r0, [pc, #20]	; (8002624 <HAL_TIM_Encoder_MspInit+0x64>)
 8002610:	f000 fda6 	bl	8003160 <HAL_GPIO_Init>
    HAL_TIM_Encoder_Start_IT(&htim3,TIM_CHANNEL_2);
 8002614:	2104      	movs	r1, #4
 8002616:	4804      	ldr	r0, [pc, #16]	; (8002628 <HAL_TIM_Encoder_MspInit+0x68>)
 8002618:	f003 fcdf 	bl	8005fda <HAL_TIM_Encoder_Start_IT>
}
 800261c:	e7db      	b.n	80025d6 <HAL_TIM_Encoder_MspInit+0x16>
 800261e:	bf00      	nop
 8002620:	40000400 	.word	0x40000400
 8002624:	40010800 	.word	0x40010800
 8002628:	20000608 	.word	0x20000608

0800262c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800262c:	b508      	push	{r3, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800262e:	480a      	ldr	r0, [pc, #40]	; (8002658 <MX_USART1_UART_Init+0x2c>)
 8002630:	4b0a      	ldr	r3, [pc, #40]	; (800265c <MX_USART1_UART_Init+0x30>)
 8002632:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 9600;
 8002634:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8002638:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800263a:	2300      	movs	r3, #0
 800263c:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800263e:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002640:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002642:	220c      	movs	r2, #12
 8002644:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002646:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002648:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800264a:	f003 fde3 	bl	8006214 <HAL_UART_Init>
 800264e:	b900      	cbnz	r0, 8002652 <MX_USART1_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002650:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002652:	f7ff fe53 	bl	80022fc <Error_Handler>
}
 8002656:	e7fb      	b.n	8002650 <MX_USART1_UART_Init+0x24>
 8002658:	20000650 	.word	0x20000650
 800265c:	40013800 	.word	0x40013800

08002660 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002660:	b508      	push	{r3, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002662:	480a      	ldr	r0, [pc, #40]	; (800268c <MX_USART2_UART_Init+0x2c>)
 8002664:	4b0a      	ldr	r3, [pc, #40]	; (8002690 <MX_USART2_UART_Init+0x30>)
 8002666:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8002668:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800266c:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800266e:	2300      	movs	r3, #0
 8002670:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002672:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002674:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002676:	220c      	movs	r2, #12
 8002678:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800267a:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800267c:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800267e:	f003 fdc9 	bl	8006214 <HAL_UART_Init>
 8002682:	b900      	cbnz	r0, 8002686 <MX_USART2_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002684:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002686:	f7ff fe39 	bl	80022fc <Error_Handler>
}
 800268a:	e7fb      	b.n	8002684 <MX_USART2_UART_Init+0x24>
 800268c:	20000698 	.word	0x20000698
 8002690:	40004400 	.word	0x40004400

08002694 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002694:	b530      	push	{r4, r5, lr}
 8002696:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002698:	2300      	movs	r3, #0
 800269a:	9304      	str	r3, [sp, #16]
 800269c:	9305      	str	r3, [sp, #20]
 800269e:	9306      	str	r3, [sp, #24]
 80026a0:	9307      	str	r3, [sp, #28]
  if(uartHandle->Instance==USART1)
 80026a2:	6803      	ldr	r3, [r0, #0]
 80026a4:	4a30      	ldr	r2, [pc, #192]	; (8002768 <HAL_UART_MspInit+0xd4>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d004      	beq.n	80026b4 <HAL_UART_MspInit+0x20>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(uartHandle->Instance==USART2)
 80026aa:	4a30      	ldr	r2, [pc, #192]	; (800276c <HAL_UART_MspInit+0xd8>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d033      	beq.n	8002718 <HAL_UART_MspInit+0x84>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80026b0:	b009      	add	sp, #36	; 0x24
 80026b2:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 80026b4:	4b2e      	ldr	r3, [pc, #184]	; (8002770 <HAL_UART_MspInit+0xdc>)
 80026b6:	699a      	ldr	r2, [r3, #24]
 80026b8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80026bc:	619a      	str	r2, [r3, #24]
 80026be:	699a      	ldr	r2, [r3, #24]
 80026c0:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80026c4:	9200      	str	r2, [sp, #0]
 80026c6:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026c8:	699a      	ldr	r2, [r3, #24]
 80026ca:	f042 0204 	orr.w	r2, r2, #4
 80026ce:	619a      	str	r2, [r3, #24]
 80026d0:	699b      	ldr	r3, [r3, #24]
 80026d2:	f003 0304 	and.w	r3, r3, #4
 80026d6:	9301      	str	r3, [sp, #4]
 80026d8:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80026da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80026de:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026e0:	2302      	movs	r3, #2
 80026e2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80026e4:	2303      	movs	r3, #3
 80026e6:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026e8:	4d22      	ldr	r5, [pc, #136]	; (8002774 <HAL_UART_MspInit+0xe0>)
 80026ea:	a904      	add	r1, sp, #16
 80026ec:	4628      	mov	r0, r5
 80026ee:	f000 fd37 	bl	8003160 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80026f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026f6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026f8:	2400      	movs	r4, #0
 80026fa:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026fc:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026fe:	a904      	add	r1, sp, #16
 8002700:	4628      	mov	r0, r5
 8002702:	f000 fd2d 	bl	8003160 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002706:	4622      	mov	r2, r4
 8002708:	2105      	movs	r1, #5
 800270a:	2025      	movs	r0, #37	; 0x25
 800270c:	f000 fc70 	bl	8002ff0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002710:	2025      	movs	r0, #37	; 0x25
 8002712:	f000 fca3 	bl	800305c <HAL_NVIC_EnableIRQ>
 8002716:	e7cb      	b.n	80026b0 <HAL_UART_MspInit+0x1c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002718:	4b15      	ldr	r3, [pc, #84]	; (8002770 <HAL_UART_MspInit+0xdc>)
 800271a:	69da      	ldr	r2, [r3, #28]
 800271c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002720:	61da      	str	r2, [r3, #28]
 8002722:	69da      	ldr	r2, [r3, #28]
 8002724:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8002728:	9202      	str	r2, [sp, #8]
 800272a:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800272c:	699a      	ldr	r2, [r3, #24]
 800272e:	f042 0204 	orr.w	r2, r2, #4
 8002732:	619a      	str	r2, [r3, #24]
 8002734:	699b      	ldr	r3, [r3, #24]
 8002736:	f003 0304 	and.w	r3, r3, #4
 800273a:	9303      	str	r3, [sp, #12]
 800273c:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800273e:	2304      	movs	r3, #4
 8002740:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002742:	2302      	movs	r3, #2
 8002744:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002746:	2303      	movs	r3, #3
 8002748:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800274a:	4c0a      	ldr	r4, [pc, #40]	; (8002774 <HAL_UART_MspInit+0xe0>)
 800274c:	a904      	add	r1, sp, #16
 800274e:	4620      	mov	r0, r4
 8002750:	f000 fd06 	bl	8003160 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002754:	2308      	movs	r3, #8
 8002756:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002758:	2300      	movs	r3, #0
 800275a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800275c:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800275e:	a904      	add	r1, sp, #16
 8002760:	4620      	mov	r0, r4
 8002762:	f000 fcfd 	bl	8003160 <HAL_GPIO_Init>
}
 8002766:	e7a3      	b.n	80026b0 <HAL_UART_MspInit+0x1c>
 8002768:	40013800 	.word	0x40013800
 800276c:	40004400 	.word	0x40004400
 8002770:	40021000 	.word	0x40021000
 8002774:	40010800 	.word	0x40010800

08002778 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002778:	f7ff feec 	bl	8002554 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800277c:	480b      	ldr	r0, [pc, #44]	; (80027ac <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800277e:	490c      	ldr	r1, [pc, #48]	; (80027b0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002780:	4a0c      	ldr	r2, [pc, #48]	; (80027b4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002782:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002784:	e002      	b.n	800278c <LoopCopyDataInit>

08002786 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002786:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002788:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800278a:	3304      	adds	r3, #4

0800278c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800278c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800278e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002790:	d3f9      	bcc.n	8002786 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002792:	4a09      	ldr	r2, [pc, #36]	; (80027b8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002794:	4c09      	ldr	r4, [pc, #36]	; (80027bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002796:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002798:	e001      	b.n	800279e <LoopFillZerobss>

0800279a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800279a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800279c:	3204      	adds	r2, #4

0800279e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800279e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027a0:	d3fb      	bcc.n	800279a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80027a2:	f004 fde5 	bl	8007370 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80027a6:	f7ff fd80 	bl	80022aa <main>
  bx lr
 80027aa:	4770      	bx	lr
  ldr r0, =_sdata
 80027ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027b0:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 80027b4:	0800cb04 	.word	0x0800cb04
  ldr r2, =_sbss
 80027b8:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 80027bc:	200027b8 	.word	0x200027b8

080027c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80027c0:	e7fe      	b.n	80027c0 <ADC1_2_IRQHandler>
	...

080027c4 <DS1307_SetRegByte>:
/**
 * @brief Sets the byte in the designated DS1307 register to value.
 * @param regAddr Register address to write.
 * @param val Value to set, 0 to 255.
 */
void DS1307_SetRegByte(uint8_t regAddr, uint8_t val) {
 80027c4:	b500      	push	{lr}
 80027c6:	b085      	sub	sp, #20
	uint8_t bytes[2] = { regAddr, val };
 80027c8:	f88d 000c 	strb.w	r0, [sp, #12]
 80027cc:	f88d 100d 	strb.w	r1, [sp, #13]
	HAL_I2C_Master_Transmit(_ds1307_ui2c, DS1307_I2C_ADDR << 1, bytes, 2, DS1307_TIMEOUT);
 80027d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027d4:	9300      	str	r3, [sp, #0]
 80027d6:	2302      	movs	r3, #2
 80027d8:	aa03      	add	r2, sp, #12
 80027da:	21d0      	movs	r1, #208	; 0xd0
 80027dc:	4803      	ldr	r0, [pc, #12]	; (80027ec <DS1307_SetRegByte+0x28>)
 80027de:	6800      	ldr	r0, [r0, #0]
 80027e0:	f001 f93c 	bl	8003a5c <HAL_I2C_Master_Transmit>
}
 80027e4:	b005      	add	sp, #20
 80027e6:	f85d fb04 	ldr.w	pc, [sp], #4
 80027ea:	bf00      	nop
 80027ec:	200006e0 	.word	0x200006e0

080027f0 <DS1307_GetRegByte>:
/**
 * @brief Gets the byte in the designated DS1307 register.
 * @param regAddr Register address to read.
 * @return Value stored in the register, 0 to 255.
 */
uint8_t DS1307_GetRegByte(uint8_t regAddr) {
 80027f0:	b530      	push	{r4, r5, lr}
 80027f2:	b087      	sub	sp, #28
 80027f4:	f88d 000f 	strb.w	r0, [sp, #15]
	uint8_t val;
	HAL_I2C_Master_Transmit(_ds1307_ui2c, DS1307_I2C_ADDR << 1, &regAddr, 1, DS1307_TIMEOUT);
 80027f8:	4c0b      	ldr	r4, [pc, #44]	; (8002828 <DS1307_GetRegByte+0x38>)
 80027fa:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 80027fe:	9500      	str	r5, [sp, #0]
 8002800:	2301      	movs	r3, #1
 8002802:	f10d 020f 	add.w	r2, sp, #15
 8002806:	21d0      	movs	r1, #208	; 0xd0
 8002808:	6820      	ldr	r0, [r4, #0]
 800280a:	f001 f927 	bl	8003a5c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_ds1307_ui2c, DS1307_I2C_ADDR << 1, &val, 1, DS1307_TIMEOUT);
 800280e:	9500      	str	r5, [sp, #0]
 8002810:	2301      	movs	r3, #1
 8002812:	f10d 0217 	add.w	r2, sp, #23
 8002816:	21d0      	movs	r1, #208	; 0xd0
 8002818:	6820      	ldr	r0, [r4, #0]
 800281a:	f001 fa23 	bl	8003c64 <HAL_I2C_Master_Receive>
	return val;
}
 800281e:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8002822:	b007      	add	sp, #28
 8002824:	bd30      	pop	{r4, r5, pc}
 8002826:	bf00      	nop
 8002828:	200006e0 	.word	0x200006e0

0800282c <DS1307_SetClockHalt>:
void DS1307_SetClockHalt(uint8_t halt) {
 800282c:	b510      	push	{r4, lr}
	uint8_t ch = (halt ? 1 << 7 : 0);
 800282e:	1e04      	subs	r4, r0, #0
 8002830:	bf18      	it	ne
 8002832:	2480      	movne	r4, #128	; 0x80
	DS1307_SetRegByte(DS1307_REG_SECOND, ch | (DS1307_GetRegByte(DS1307_REG_SECOND) & 0x7f));
 8002834:	2000      	movs	r0, #0
 8002836:	f7ff ffdb 	bl	80027f0 <DS1307_GetRegByte>
 800283a:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 800283e:	4321      	orrs	r1, r4
 8002840:	2000      	movs	r0, #0
 8002842:	f7ff ffbf 	bl	80027c4 <DS1307_SetRegByte>
}
 8002846:	bd10      	pop	{r4, pc}

08002848 <DS1307_Init>:
void DS1307_Init(I2C_HandleTypeDef *hi2c) {
 8002848:	b508      	push	{r3, lr}
	_ds1307_ui2c = hi2c;
 800284a:	4b03      	ldr	r3, [pc, #12]	; (8002858 <DS1307_Init+0x10>)
 800284c:	6018      	str	r0, [r3, #0]
	DS1307_SetClockHalt(0);
 800284e:	2000      	movs	r0, #0
 8002850:	f7ff ffec 	bl	800282c <DS1307_SetClockHalt>
}
 8002854:	bd08      	pop	{r3, pc}
 8002856:	bf00      	nop
 8002858:	200006e0 	.word	0x200006e0

0800285c <DS1307_DecodeBCD>:
 * @brief Decodes the raw binary value stored in registers to decimal format.
 * @param bin Binary-coded decimal value retrieved from register, 0 to 255.
 * @return Decoded decimal value.
 */
uint8_t DS1307_DecodeBCD(uint8_t bin) {
	return (((bin & 0xf0) >> 4) * 10) + (bin & 0x0f);
 800285c:	0903      	lsrs	r3, r0, #4
 800285e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002862:	f000 000f 	and.w	r0, r0, #15
 8002866:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 800286a:	b2c0      	uxtb	r0, r0
 800286c:	4770      	bx	lr

0800286e <DS1307_GetDate>:
uint8_t DS1307_GetDate(void) {
 800286e:	b508      	push	{r3, lr}
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_DATE));
 8002870:	2004      	movs	r0, #4
 8002872:	f7ff ffbd 	bl	80027f0 <DS1307_GetRegByte>
 8002876:	f7ff fff1 	bl	800285c <DS1307_DecodeBCD>
}
 800287a:	bd08      	pop	{r3, pc}

0800287c <DS1307_GetMonth>:
uint8_t DS1307_GetMonth(void) {
 800287c:	b508      	push	{r3, lr}
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_MONTH));
 800287e:	2005      	movs	r0, #5
 8002880:	f7ff ffb6 	bl	80027f0 <DS1307_GetRegByte>
 8002884:	f7ff ffea 	bl	800285c <DS1307_DecodeBCD>
}
 8002888:	bd08      	pop	{r3, pc}

0800288a <DS1307_GetYear>:
uint16_t DS1307_GetYear(void) {
 800288a:	b510      	push	{r4, lr}
	uint16_t cen = DS1307_GetRegByte(DS1307_REG_CENT) * 100;
 800288c:	2010      	movs	r0, #16
 800288e:	f7ff ffaf 	bl	80027f0 <DS1307_GetRegByte>
 8002892:	4604      	mov	r4, r0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_YEAR)) + cen;
 8002894:	2006      	movs	r0, #6
 8002896:	f7ff ffab 	bl	80027f0 <DS1307_GetRegByte>
 800289a:	f7ff ffdf 	bl	800285c <DS1307_DecodeBCD>
	uint16_t cen = DS1307_GetRegByte(DS1307_REG_CENT) * 100;
 800289e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80028a2:	eb04 0484 	add.w	r4, r4, r4, lsl #2
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_YEAR)) + cen;
 80028a6:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
 80028aa:	b280      	uxth	r0, r0
 80028ac:	bd10      	pop	{r4, pc}

080028ae <DS1307_GetHour>:
uint8_t DS1307_GetHour(void) {
 80028ae:	b508      	push	{r3, lr}
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_HOUR) & 0x3f);
 80028b0:	2002      	movs	r0, #2
 80028b2:	f7ff ff9d 	bl	80027f0 <DS1307_GetRegByte>
 80028b6:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 80028ba:	f7ff ffcf 	bl	800285c <DS1307_DecodeBCD>
}
 80028be:	bd08      	pop	{r3, pc}

080028c0 <DS1307_GetMinute>:
uint8_t DS1307_GetMinute(void) {
 80028c0:	b508      	push	{r3, lr}
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_MINUTE));
 80028c2:	2001      	movs	r0, #1
 80028c4:	f7ff ff94 	bl	80027f0 <DS1307_GetRegByte>
 80028c8:	f7ff ffc8 	bl	800285c <DS1307_DecodeBCD>
}
 80028cc:	bd08      	pop	{r3, pc}

080028ce <DS1307_GetSecond>:
uint8_t DS1307_GetSecond(void) {
 80028ce:	b508      	push	{r3, lr}
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_SECOND) & 0x7f);
 80028d0:	2000      	movs	r0, #0
 80028d2:	f7ff ff8d 	bl	80027f0 <DS1307_GetRegByte>
 80028d6:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80028da:	f7ff ffbf 	bl	800285c <DS1307_DecodeBCD>
}
 80028de:	bd08      	pop	{r3, pc}

080028e0 <strtoke>:
/*
 * Behaves like strtok() except that it returns empty tokens also.
 * Found on https://stackoverflow.com/questions/42315585/split-string-into-tokens-in-c-when-there-are-2-delimiters-in-a-row
 */
char* strtoke(char *str, const char *delim)
{
 80028e0:	b510      	push	{r4, lr}
  static char *start = NULL; /* stores string str for consecutive calls */
  char *token = NULL; /* found token */
  /* assign new start in case */
  if (str) start = str;
 80028e2:	4604      	mov	r4, r0
 80028e4:	b150      	cbz	r0, 80028fc <strtoke+0x1c>
  /* check whether text to parse left */
  if (!start) return NULL;
  /* remember current start as found token */
  token = start;
  /* find next occurrence of delim */
  start = strpbrk(start, delim);
 80028e6:	4620      	mov	r0, r4
 80028e8:	f005 fc28 	bl	800813c <strpbrk>
  /* replace delim with terminator and move start to follower */
  if (start) *start++ = '\0';
 80028ec:	b160      	cbz	r0, 8002908 <strtoke+0x28>
 80028ee:	1c41      	adds	r1, r0, #1
 80028f0:	4a08      	ldr	r2, [pc, #32]	; (8002914 <strtoke+0x34>)
 80028f2:	6011      	str	r1, [r2, #0]
 80028f4:	2200      	movs	r2, #0
 80028f6:	7002      	strb	r2, [r0, #0]
 80028f8:	4620      	mov	r0, r4
  /* done */
  return token;
}
 80028fa:	bd10      	pop	{r4, pc}
  if (!start) return NULL;
 80028fc:	4b05      	ldr	r3, [pc, #20]	; (8002914 <strtoke+0x34>)
 80028fe:	681c      	ldr	r4, [r3, #0]
 8002900:	2c00      	cmp	r4, #0
 8002902:	d1f0      	bne.n	80028e6 <strtoke+0x6>
 8002904:	4620      	mov	r0, r4
 8002906:	e7f8      	b.n	80028fa <strtoke+0x1a>
  start = strpbrk(start, delim);
 8002908:	4b02      	ldr	r3, [pc, #8]	; (8002914 <strtoke+0x34>)
 800290a:	2200      	movs	r2, #0
 800290c:	601a      	str	r2, [r3, #0]
 800290e:	4620      	mov	r0, r4
 8002910:	e7f3      	b.n	80028fa <strtoke+0x1a>
 8002912:	bf00      	nop
 8002914:	200008d0 	.word	0x200008d0

08002918 <NEO6_GetCharFromBuffer>:
	HAL_UART_Receive_IT(GpsStateHandler->neo6_huart, (uint8_t*)&UartReceivedChar, 1);
}

int NEO6_GetCharFromBuffer(NEO6_State *GpsStateHandler)
{
	if(GpsStateHandler->UartBufferHead == GpsStateHandler->UartBufferTail)
 8002918:	f890 3105 	ldrb.w	r3, [r0, #261]	; 0x105
 800291c:	f890 2104 	ldrb.w	r2, [r0, #260]	; 0x104
 8002920:	429a      	cmp	r2, r3
 8002922:	d00a      	beq.n	800293a <NEO6_GetCharFromBuffer+0x22>
	{
		return -1; // error - no char to return
	}
	GpsStateHandler->UartBufferTail = (GpsStateHandler->UartBufferTail + 1) % GPS_UART_BUFFER_SIZE;
 8002924:	3301      	adds	r3, #1
 8002926:	425a      	negs	r2, r3
 8002928:	b2db      	uxtb	r3, r3
 800292a:	b2d2      	uxtb	r2, r2
 800292c:	bf58      	it	pl
 800292e:	4253      	negpl	r3, r2
 8002930:	f880 3105 	strb.w	r3, [r0, #261]	; 0x105

	return GpsStateHandler->UartBuffer[GpsStateHandler->UartBufferTail];
 8002934:	4418      	add	r0, r3
 8002936:	7900      	ldrb	r0, [r0, #4]
 8002938:	4770      	bx	lr
		return -1; // error - no char to return
 800293a:	f04f 30ff 	mov.w	r0, #4294967295
}
 800293e:	4770      	bx	lr

08002940 <NEO6_GetLineFromBuffer>:

int NEO6_GetLineFromBuffer(NEO6_State *GpsStateHandler)
{
 8002940:	b538      	push	{r3, r4, r5, lr}
	char TempChar;
	char* LinePointer = (char*)GpsStateHandler->WorkingBuffer;
	if(GpsStateHandler->UartBufferLines)
 8002942:	f890 3106 	ldrb.w	r3, [r0, #262]	; 0x106
 8002946:	b1a3      	cbz	r3, 8002972 <NEO6_GetLineFromBuffer+0x32>
 8002948:	4604      	mov	r4, r0
	char* LinePointer = (char*)GpsStateHandler->WorkingBuffer;
 800294a:	f200 1507 	addw	r5, r0, #263	; 0x107
 800294e:	e001      	b.n	8002954 <NEO6_GetLineFromBuffer+0x14>
		{
			if(TempChar == 13)
			{
				break;
			}
			*LinePointer = TempChar;
 8002950:	f805 0b01 	strb.w	r0, [r5], #1
		while((TempChar = NEO6_GetCharFromBuffer(GpsStateHandler)))
 8002954:	4620      	mov	r0, r4
 8002956:	f7ff ffdf 	bl	8002918 <NEO6_GetCharFromBuffer>
 800295a:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 800295e:	d001      	beq.n	8002964 <NEO6_GetLineFromBuffer+0x24>
			if(TempChar == 13)
 8002960:	280d      	cmp	r0, #13
 8002962:	d1f5      	bne.n	8002950 <NEO6_GetLineFromBuffer+0x10>
			LinePointer++;
		}
		*LinePointer = 0; // end of cstring
 8002964:	2300      	movs	r3, #0
 8002966:	702b      	strb	r3, [r5, #0]
		GpsStateHandler->UartBufferLines--; // decrement line counter
 8002968:	f894 3106 	ldrb.w	r3, [r4, #262]	; 0x106
 800296c:	3b01      	subs	r3, #1
 800296e:	f884 3106 	strb.w	r3, [r4, #262]	; 0x106
	}
	return 0;
}
 8002972:	2000      	movs	r0, #0
 8002974:	bd38      	pop	{r3, r4, r5, pc}
	...

08002978 <NEO6_ParseGPRMC>:

//
// Recommended minimum specific GPS/Transit data
//
void NEO6_ParseGPRMC(NEO6_State *GpsStateHandler)
{
 8002978:	b538      	push	{r3, r4, r5, lr}
 800297a:	4604      	mov	r4, r0

	char *ParsePoiner;
	uint32_t Temp;

	// Time of FIX
	ParsePoiner = strtoke(NULL, ",");
 800297c:	493f      	ldr	r1, [pc, #252]	; (8002a7c <NEO6_ParseGPRMC+0x104>)
 800297e:	2000      	movs	r0, #0
 8002980:	f7ff ffae 	bl	80028e0 <strtoke>
	if(strlen(ParsePoiner) > 0)
 8002984:	7803      	ldrb	r3, [r0, #0]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d132      	bne.n	80029f0 <NEO6_ParseGPRMC+0x78>
		GpsStateHandler->Second = Temp % 100;
		GpsStateHandler->Minute = (Temp / 100) % 100;
		GpsStateHandler->Hour = (Temp / 10000) % 100;
	}
	// Navigation receiver warning A = OK, V = warning
	ParsePoiner = strtoke(NULL, ",");
 800298a:	4d3c      	ldr	r5, [pc, #240]	; (8002a7c <NEO6_ParseGPRMC+0x104>)
 800298c:	4629      	mov	r1, r5
 800298e:	2000      	movs	r0, #0
 8002990:	f7ff ffa6 	bl	80028e0 <strtoke>
	// Latitude
	ParsePoiner = strtoke(NULL, ",");
 8002994:	4629      	mov	r1, r5
 8002996:	2000      	movs	r0, #0
 8002998:	f7ff ffa2 	bl	80028e0 <strtoke>
	if(strlen(ParsePoiner) > 0)
 800299c:	7803      	ldrb	r3, [r0, #0]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d144      	bne.n	8002a2c <NEO6_ParseGPRMC+0xb4>
	{
		GpsStateHandler->Latitude = atof(ParsePoiner);
	}
	// Latitude Direction
	ParsePoiner = strtoke(NULL, ",");
 80029a2:	4936      	ldr	r1, [pc, #216]	; (8002a7c <NEO6_ParseGPRMC+0x104>)
 80029a4:	2000      	movs	r0, #0
 80029a6:	f7ff ff9b 	bl	80028e0 <strtoke>
	if(strlen(ParsePoiner) > 0)
 80029aa:	7803      	ldrb	r3, [r0, #0]
 80029ac:	b10b      	cbz	r3, 80029b2 <NEO6_ParseGPRMC+0x3a>
	{
		GpsStateHandler->LatitudeDirection = *ParsePoiner;
 80029ae:	f884 3198 	strb.w	r3, [r4, #408]	; 0x198
	}
	// Longnitude
	ParsePoiner = strtoke(NULL, ",");
 80029b2:	4932      	ldr	r1, [pc, #200]	; (8002a7c <NEO6_ParseGPRMC+0x104>)
 80029b4:	2000      	movs	r0, #0
 80029b6:	f7ff ff93 	bl	80028e0 <strtoke>
	if(strlen(ParsePoiner) > 0)
 80029ba:	7803      	ldrb	r3, [r0, #0]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d13a      	bne.n	8002a36 <NEO6_ParseGPRMC+0xbe>
	{
		GpsStateHandler->Longitude = atof(ParsePoiner);
	}
	// Longnitude Direction
	ParsePoiner = strtoke(NULL, ",");
 80029c0:	492e      	ldr	r1, [pc, #184]	; (8002a7c <NEO6_ParseGPRMC+0x104>)
 80029c2:	2000      	movs	r0, #0
 80029c4:	f7ff ff8c 	bl	80028e0 <strtoke>
	if(strlen(ParsePoiner) > 0)
 80029c8:	7803      	ldrb	r3, [r0, #0]
 80029ca:	b10b      	cbz	r3, 80029d0 <NEO6_ParseGPRMC+0x58>
	{
		GpsStateHandler->LongitudeDirection = *ParsePoiner;
 80029cc:	f884 31a8 	strb.w	r3, [r4, #424]	; 0x1a8
	}
	// Speed over ground, Knots
	ParsePoiner = strtoke(NULL, ",");
 80029d0:	4d2a      	ldr	r5, [pc, #168]	; (8002a7c <NEO6_ParseGPRMC+0x104>)
 80029d2:	4629      	mov	r1, r5
 80029d4:	2000      	movs	r0, #0
 80029d6:	f7ff ff83 	bl	80028e0 <strtoke>
	// Course Made Good, True
	ParsePoiner = strtoke(NULL, ",");
 80029da:	4629      	mov	r1, r5
 80029dc:	2000      	movs	r0, #0
 80029de:	f7ff ff7f 	bl	80028e0 <strtoke>
	// Date of fix
	ParsePoiner = strtoke(NULL, ",");
 80029e2:	4629      	mov	r1, r5
 80029e4:	2000      	movs	r0, #0
 80029e6:	f7ff ff7b 	bl	80028e0 <strtoke>
	if(strlen(ParsePoiner) > 0)
 80029ea:	7803      	ldrb	r3, [r0, #0]
 80029ec:	bb43      	cbnz	r3, 8002a40 <NEO6_ParseGPRMC+0xc8>
		Temp = atoi(ParsePoiner);
		GpsStateHandler->Year = Temp % 100;
		GpsStateHandler->Month = (Temp / 100) % 100;
		GpsStateHandler->Day = (Temp / 10000) % 100;
	}
}
 80029ee:	bd38      	pop	{r3, r4, r5, pc}
		Temp = atoi(ParsePoiner);
 80029f0:	f004 fcb3 	bl	800735a <atoi>
		GpsStateHandler->Second = Temp % 100;
 80029f4:	4b22      	ldr	r3, [pc, #136]	; (8002a80 <NEO6_ParseGPRMC+0x108>)
 80029f6:	fba3 1200 	umull	r1, r2, r3, r0
 80029fa:	0952      	lsrs	r2, r2, #5
 80029fc:	2164      	movs	r1, #100	; 0x64
 80029fe:	fb01 0512 	mls	r5, r1, r2, r0
 8002a02:	f884 5189 	strb.w	r5, [r4, #393]	; 0x189
		GpsStateHandler->Minute = (Temp / 100) % 100;
 8002a06:	fba3 c502 	umull	ip, r5, r3, r2
 8002a0a:	096d      	lsrs	r5, r5, #5
 8002a0c:	fb01 2215 	mls	r2, r1, r5, r2
 8002a10:	f884 2188 	strb.w	r2, [r4, #392]	; 0x188
		GpsStateHandler->Hour = (Temp / 10000) % 100;
 8002a14:	4a1b      	ldr	r2, [pc, #108]	; (8002a84 <NEO6_ParseGPRMC+0x10c>)
 8002a16:	fba2 2000 	umull	r2, r0, r2, r0
 8002a1a:	0b40      	lsrs	r0, r0, #13
 8002a1c:	fba3 2300 	umull	r2, r3, r3, r0
 8002a20:	095b      	lsrs	r3, r3, #5
 8002a22:	fb01 0013 	mls	r0, r1, r3, r0
 8002a26:	f884 0187 	strb.w	r0, [r4, #391]	; 0x187
 8002a2a:	e7ae      	b.n	800298a <NEO6_ParseGPRMC+0x12>
		GpsStateHandler->Latitude = atof(ParsePoiner);
 8002a2c:	f004 fc92 	bl	8007354 <atof>
 8002a30:	e9c4 0164 	strd	r0, r1, [r4, #400]	; 0x190
 8002a34:	e7b5      	b.n	80029a2 <NEO6_ParseGPRMC+0x2a>
		GpsStateHandler->Longitude = atof(ParsePoiner);
 8002a36:	f004 fc8d 	bl	8007354 <atof>
 8002a3a:	e9c4 0168 	strd	r0, r1, [r4, #416]	; 0x1a0
 8002a3e:	e7bf      	b.n	80029c0 <NEO6_ParseGPRMC+0x48>
		Temp = atoi(ParsePoiner);
 8002a40:	f004 fc8b 	bl	800735a <atoi>
		GpsStateHandler->Year = Temp % 100;
 8002a44:	4b0e      	ldr	r3, [pc, #56]	; (8002a80 <NEO6_ParseGPRMC+0x108>)
 8002a46:	fba3 1200 	umull	r1, r2, r3, r0
 8002a4a:	0952      	lsrs	r2, r2, #5
 8002a4c:	2164      	movs	r1, #100	; 0x64
 8002a4e:	fb01 0512 	mls	r5, r1, r2, r0
 8002a52:	f884 518c 	strb.w	r5, [r4, #396]	; 0x18c
		GpsStateHandler->Month = (Temp / 100) % 100;
 8002a56:	fba3 c502 	umull	ip, r5, r3, r2
 8002a5a:	096d      	lsrs	r5, r5, #5
 8002a5c:	fb01 2215 	mls	r2, r1, r5, r2
 8002a60:	f884 218b 	strb.w	r2, [r4, #395]	; 0x18b
		GpsStateHandler->Day = (Temp / 10000) % 100;
 8002a64:	4a07      	ldr	r2, [pc, #28]	; (8002a84 <NEO6_ParseGPRMC+0x10c>)
 8002a66:	fba2 2000 	umull	r2, r0, r2, r0
 8002a6a:	0b40      	lsrs	r0, r0, #13
 8002a6c:	fba3 2300 	umull	r2, r3, r3, r0
 8002a70:	095b      	lsrs	r3, r3, #5
 8002a72:	fb01 0013 	mls	r0, r1, r3, r0
 8002a76:	f884 018a 	strb.w	r0, [r4, #394]	; 0x18a
}
 8002a7a:	e7b8      	b.n	80029ee <NEO6_ParseGPRMC+0x76>
 8002a7c:	0800beac 	.word	0x0800beac
 8002a80:	51eb851f 	.word	0x51eb851f
 8002a84:	d1b71759 	.word	0xd1b71759

08002a88 <NEO6_ParseGPVTG>:

//
//	Track Made Good and Ground Speed.
//
void NEO6_ParseGPVTG(NEO6_State *GpsStateHandler)
{
 8002a88:	b538      	push	{r3, r4, r5, lr}
 8002a8a:	4605      	mov	r5, r0
	// eg2. $GPVTG,054.7,T,034.4,M,005.5,N,010.2,K

	char *ParsePoiner;

	// True track made good
	ParsePoiner = strtoke(NULL, ",");
 8002a8c:	4c16      	ldr	r4, [pc, #88]	; (8002ae8 <NEO6_ParseGPVTG+0x60>)
 8002a8e:	4621      	mov	r1, r4
 8002a90:	2000      	movs	r0, #0
 8002a92:	f7ff ff25 	bl	80028e0 <strtoke>
	ParsePoiner = strtoke(NULL, ",");
 8002a96:	4621      	mov	r1, r4
 8002a98:	2000      	movs	r0, #0
 8002a9a:	f7ff ff21 	bl	80028e0 <strtoke>
	// Magnetic track made good
	ParsePoiner = strtoke(NULL, ",");
 8002a9e:	4621      	mov	r1, r4
 8002aa0:	2000      	movs	r0, #0
 8002aa2:	f7ff ff1d 	bl	80028e0 <strtoke>
	ParsePoiner = strtoke(NULL, ",");
 8002aa6:	4621      	mov	r1, r4
 8002aa8:	2000      	movs	r0, #0
 8002aaa:	f7ff ff19 	bl	80028e0 <strtoke>
	// Ground speed, knots
	ParsePoiner = strtoke(NULL, ",");
 8002aae:	4621      	mov	r1, r4
 8002ab0:	2000      	movs	r0, #0
 8002ab2:	f7ff ff15 	bl	80028e0 <strtoke>
	if(strlen(ParsePoiner) > 0)
 8002ab6:	7803      	ldrb	r3, [r0, #0]
 8002ab8:	b95b      	cbnz	r3, 8002ad2 <NEO6_ParseGPVTG+0x4a>
	{
		GpsStateHandler->SpeedKnots = atof(ParsePoiner);
	}
	ParsePoiner = strtoke(NULL, ",");
 8002aba:	4c0b      	ldr	r4, [pc, #44]	; (8002ae8 <NEO6_ParseGPVTG+0x60>)
 8002abc:	4621      	mov	r1, r4
 8002abe:	2000      	movs	r0, #0
 8002ac0:	f7ff ff0e 	bl	80028e0 <strtoke>
	// Ground speed, Kilometers per hour
	ParsePoiner = strtoke(NULL, ",");
 8002ac4:	4621      	mov	r1, r4
 8002ac6:	2000      	movs	r0, #0
 8002ac8:	f7ff ff0a 	bl	80028e0 <strtoke>
	if(strlen(ParsePoiner) > 0)
 8002acc:	7803      	ldrb	r3, [r0, #0]
 8002ace:	b92b      	cbnz	r3, 8002adc <NEO6_ParseGPVTG+0x54>
	{
		GpsStateHandler->SpeedKilometers = atof(ParsePoiner);
	}
}
 8002ad0:	bd38      	pop	{r3, r4, r5, pc}
		GpsStateHandler->SpeedKnots = atof(ParsePoiner);
 8002ad2:	f004 fc3f 	bl	8007354 <atof>
 8002ad6:	e9c5 016e 	strd	r0, r1, [r5, #440]	; 0x1b8
 8002ada:	e7ee      	b.n	8002aba <NEO6_ParseGPVTG+0x32>
		GpsStateHandler->SpeedKilometers = atof(ParsePoiner);
 8002adc:	f004 fc3a 	bl	8007354 <atof>
 8002ae0:	e9c5 0170 	strd	r0, r1, [r5, #448]	; 0x1c0
}
 8002ae4:	e7f4      	b.n	8002ad0 <NEO6_ParseGPVTG+0x48>
 8002ae6:	bf00      	nop
 8002ae8:	0800beac 	.word	0x0800beac

08002aec <NEO6_ParseGPGGA>:

//
//	Global Positioning System Fix Data
//
void NEO6_ParseGPGGA(NEO6_State *GpsStateHandler)
{
 8002aec:	b538      	push	{r3, r4, r5, lr}
 8002aee:	4605      	mov	r5, r0
	// eg. $GPGGA,212846.00,5025.81511,N,01639.92090,E,1,04,4.72,281.1,M,42.0,M,,*5F

	char *ParsePoiner;

	// UTC of Position
	ParsePoiner = strtoke(NULL, ",");
 8002af0:	4c1d      	ldr	r4, [pc, #116]	; (8002b68 <NEO6_ParseGPGGA+0x7c>)
 8002af2:	4621      	mov	r1, r4
 8002af4:	2000      	movs	r0, #0
 8002af6:	f7ff fef3 	bl	80028e0 <strtoke>
	// Latitude
	ParsePoiner = strtoke(NULL, ",");
 8002afa:	4621      	mov	r1, r4
 8002afc:	2000      	movs	r0, #0
 8002afe:	f7ff feef 	bl	80028e0 <strtoke>
	// N or S
	ParsePoiner = strtoke(NULL, ",");
 8002b02:	4621      	mov	r1, r4
 8002b04:	2000      	movs	r0, #0
 8002b06:	f7ff feeb 	bl	80028e0 <strtoke>
	// Longitude
	ParsePoiner = strtoke(NULL, ",");
 8002b0a:	4621      	mov	r1, r4
 8002b0c:	2000      	movs	r0, #0
 8002b0e:	f7ff fee7 	bl	80028e0 <strtoke>
	// E or W
	ParsePoiner = strtoke(NULL, ",");
 8002b12:	4621      	mov	r1, r4
 8002b14:	2000      	movs	r0, #0
 8002b16:	f7ff fee3 	bl	80028e0 <strtoke>
	// GPS quality indicator (0=invalid; 1=GPS fix; 2=Diff. GPS fix)
	ParsePoiner = strtoke(NULL, ",");
 8002b1a:	4621      	mov	r1, r4
 8002b1c:	2000      	movs	r0, #0
 8002b1e:	f7ff fedf 	bl	80028e0 <strtoke>
	if(strlen(ParsePoiner) > 0)
 8002b22:	7803      	ldrb	r3, [r0, #0]
 8002b24:	b98b      	cbnz	r3, 8002b4a <NEO6_ParseGPGGA+0x5e>
	{
		GpsStateHandler->Quality = atoi(ParsePoiner);
	}
	// Number of satellites in use [not those in view]
	ParsePoiner = strtoke(NULL, ",");
 8002b26:	4910      	ldr	r1, [pc, #64]	; (8002b68 <NEO6_ParseGPGGA+0x7c>)
 8002b28:	2000      	movs	r0, #0
 8002b2a:	f7ff fed9 	bl	80028e0 <strtoke>
	if(strlen(ParsePoiner) > 0)
 8002b2e:	7803      	ldrb	r3, [r0, #0]
 8002b30:	b983      	cbnz	r3, 8002b54 <NEO6_ParseGPGGA+0x68>
	{
		GpsStateHandler->SatelitesNumber = atoi(ParsePoiner);
	}
	// Horizontal dilution of position
	ParsePoiner = strtoke(NULL, ",");
 8002b32:	4c0d      	ldr	r4, [pc, #52]	; (8002b68 <NEO6_ParseGPGGA+0x7c>)
 8002b34:	4621      	mov	r1, r4
 8002b36:	2000      	movs	r0, #0
 8002b38:	f7ff fed2 	bl	80028e0 <strtoke>
	// Antenna altitude above/below mean sea level (geoid)
	ParsePoiner = strtoke(NULL, ",");
 8002b3c:	4621      	mov	r1, r4
 8002b3e:	2000      	movs	r0, #0
 8002b40:	f7ff fece 	bl	80028e0 <strtoke>
	if(strlen(ParsePoiner) > 0)
 8002b44:	7803      	ldrb	r3, [r0, #0]
 8002b46:	b953      	cbnz	r3, 8002b5e <NEO6_ParseGPGGA+0x72>
	{
		GpsStateHandler->Altitude = atof(ParsePoiner);
	}
}
 8002b48:	bd38      	pop	{r3, r4, r5, pc}
		GpsStateHandler->Quality = atoi(ParsePoiner);
 8002b4a:	f004 fc06 	bl	800735a <atoi>
 8002b4e:	f885 01c9 	strb.w	r0, [r5, #457]	; 0x1c9
 8002b52:	e7e8      	b.n	8002b26 <NEO6_ParseGPGGA+0x3a>
		GpsStateHandler->SatelitesNumber = atoi(ParsePoiner);
 8002b54:	f004 fc01 	bl	800735a <atoi>
 8002b58:	f885 01c8 	strb.w	r0, [r5, #456]	; 0x1c8
 8002b5c:	e7e9      	b.n	8002b32 <NEO6_ParseGPGGA+0x46>
		GpsStateHandler->Altitude = atof(ParsePoiner);
 8002b5e:	f004 fbf9 	bl	8007354 <atof>
 8002b62:	e9c5 016c 	strd	r0, r1, [r5, #432]	; 0x1b0
}
 8002b66:	e7ef      	b.n	8002b48 <NEO6_ParseGPGGA+0x5c>
 8002b68:	0800beac 	.word	0x0800beac

08002b6c <NEO6_ParseGPGSA>:

//
//	GPS DOP and active satellites
//
void NEO6_ParseGPGSA(NEO6_State *GpsStateHandler)
{
 8002b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b6e:	4607      	mov	r7, r0
	// eg2. $GPGSA,A,3,19,28,14,18,27,22,31,39,,,,,1.7,1.0,1.3*35

	char *ParsePoiner;

	// Mode
	ParsePoiner = strtoke(NULL, ",");
 8002b70:	4c1e      	ldr	r4, [pc, #120]	; (8002bec <NEO6_ParseGPGSA+0x80>)
 8002b72:	4621      	mov	r1, r4
 8002b74:	2000      	movs	r0, #0
 8002b76:	f7ff feb3 	bl	80028e0 <strtoke>
	// 2D/3D Fix
	ParsePoiner = strtoke(NULL, ",");
 8002b7a:	4621      	mov	r1, r4
 8002b7c:	2000      	movs	r0, #0
 8002b7e:	f7ff feaf 	bl	80028e0 <strtoke>
	if(strlen(ParsePoiner) > 0)
 8002b82:	7803      	ldrb	r3, [r0, #0]
 8002b84:	b9eb      	cbnz	r3, 8002bc2 <NEO6_ParseGPGSA+0x56>
{
 8002b86:	240c      	movs	r4, #12
		GpsStateHandler->FixMode = atoi(ParsePoiner);
	}
	// IDs of SVs used in position fix (null for unused fields)
	for(uint8_t i=0; i < 12; i++)
	{
		ParsePoiner = strtoke(NULL, ",");
 8002b88:	4e18      	ldr	r6, [pc, #96]	; (8002bec <NEO6_ParseGPGSA+0x80>)
 8002b8a:	2500      	movs	r5, #0
 8002b8c:	4631      	mov	r1, r6
 8002b8e:	4628      	mov	r0, r5
 8002b90:	f7ff fea6 	bl	80028e0 <strtoke>
	for(uint8_t i=0; i < 12; i++)
 8002b94:	1e63      	subs	r3, r4, #1
 8002b96:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 8002b9a:	d1f7      	bne.n	8002b8c <NEO6_ParseGPGSA+0x20>
	}
	// PDOP
	ParsePoiner = strtoke(NULL, ",");
 8002b9c:	4913      	ldr	r1, [pc, #76]	; (8002bec <NEO6_ParseGPGSA+0x80>)
 8002b9e:	2000      	movs	r0, #0
 8002ba0:	f7ff fe9e 	bl	80028e0 <strtoke>
	if(strlen(ParsePoiner) > 0)
 8002ba4:	7803      	ldrb	r3, [r0, #0]
 8002ba6:	b98b      	cbnz	r3, 8002bcc <NEO6_ParseGPGSA+0x60>
	{
		GpsStateHandler->Dop = atof(ParsePoiner);
	}
	// HDOP
	ParsePoiner = strtoke(NULL, ",");
 8002ba8:	4910      	ldr	r1, [pc, #64]	; (8002bec <NEO6_ParseGPGSA+0x80>)
 8002baa:	2000      	movs	r0, #0
 8002bac:	f7ff fe98 	bl	80028e0 <strtoke>
	if(strlen(ParsePoiner) > 0)
 8002bb0:	7803      	ldrb	r3, [r0, #0]
 8002bb2:	b983      	cbnz	r3, 8002bd6 <NEO6_ParseGPGSA+0x6a>
	{
		GpsStateHandler->Hdop = atof(ParsePoiner);
	}
	// VDOP
	ParsePoiner = strtoke(NULL, ",");
 8002bb4:	490d      	ldr	r1, [pc, #52]	; (8002bec <NEO6_ParseGPGSA+0x80>)
 8002bb6:	2000      	movs	r0, #0
 8002bb8:	f7ff fe92 	bl	80028e0 <strtoke>
	if(strlen(ParsePoiner) > 0)
 8002bbc:	7803      	ldrb	r3, [r0, #0]
 8002bbe:	b97b      	cbnz	r3, 8002be0 <NEO6_ParseGPGSA+0x74>
	{
		GpsStateHandler->Vdop = atof(ParsePoiner);
	}
}
 8002bc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		GpsStateHandler->FixMode = atoi(ParsePoiner);
 8002bc2:	f004 fbca 	bl	800735a <atoi>
 8002bc6:	f887 01ca 	strb.w	r0, [r7, #458]	; 0x1ca
 8002bca:	e7dc      	b.n	8002b86 <NEO6_ParseGPGSA+0x1a>
		GpsStateHandler->Dop = atof(ParsePoiner);
 8002bcc:	f004 fbc2 	bl	8007354 <atof>
 8002bd0:	e9c7 0174 	strd	r0, r1, [r7, #464]	; 0x1d0
 8002bd4:	e7e8      	b.n	8002ba8 <NEO6_ParseGPGSA+0x3c>
		GpsStateHandler->Hdop = atof(ParsePoiner);
 8002bd6:	f004 fbbd 	bl	8007354 <atof>
 8002bda:	e9c7 0176 	strd	r0, r1, [r7, #472]	; 0x1d8
 8002bde:	e7e9      	b.n	8002bb4 <NEO6_ParseGPGSA+0x48>
		GpsStateHandler->Vdop = atof(ParsePoiner);
 8002be0:	f004 fbb8 	bl	8007354 <atof>
 8002be4:	e9c7 0178 	strd	r0, r1, [r7, #480]	; 0x1e0
}
 8002be8:	e7ea      	b.n	8002bc0 <NEO6_ParseGPGSA+0x54>
 8002bea:	bf00      	nop
 8002bec:	0800beac 	.word	0x0800beac

08002bf0 <NEO6_ParseLine>:
	// Could be good for minimal system for LoRa device
}


void NEO6_ParseLine(NEO6_State *GpsStateHandler)
{
 8002bf0:	b538      	push	{r3, r4, r5, lr}
 8002bf2:	4604      	mov	r4, r0
	// Nice website with NMEA commuincates description
	//	http://aprs.gids.nl/nmea
	//

	// Header
	char* ParsePoiner = strtoke((char*)GpsStateHandler->WorkingBuffer, ",");
 8002bf4:	4914      	ldr	r1, [pc, #80]	; (8002c48 <NEO6_ParseLine+0x58>)
 8002bf6:	f200 1007 	addw	r0, r0, #263	; 0x107
 8002bfa:	f7ff fe71 	bl	80028e0 <strtoke>
 8002bfe:	4605      	mov	r5, r0

	if(strcmp(ParsePoiner, "$GPRMC") == 0) NEO6_ParseGPRMC(GpsStateHandler);
 8002c00:	4912      	ldr	r1, [pc, #72]	; (8002c4c <NEO6_ParseLine+0x5c>)
 8002c02:	f7fd faa5 	bl	8000150 <strcmp>
 8002c06:	b190      	cbz	r0, 8002c2e <NEO6_ParseLine+0x3e>
	else if(strcmp(ParsePoiner, "$GPVTG") == 0) NEO6_ParseGPVTG(GpsStateHandler);
 8002c08:	4911      	ldr	r1, [pc, #68]	; (8002c50 <NEO6_ParseLine+0x60>)
 8002c0a:	4628      	mov	r0, r5
 8002c0c:	f7fd faa0 	bl	8000150 <strcmp>
 8002c10:	b188      	cbz	r0, 8002c36 <NEO6_ParseLine+0x46>
	else if(strcmp(ParsePoiner, "$GPGGA") == 0) NEO6_ParseGPGGA(GpsStateHandler);
 8002c12:	4910      	ldr	r1, [pc, #64]	; (8002c54 <NEO6_ParseLine+0x64>)
 8002c14:	4628      	mov	r0, r5
 8002c16:	f7fd fa9b 	bl	8000150 <strcmp>
 8002c1a:	b180      	cbz	r0, 8002c3e <NEO6_ParseLine+0x4e>
	else if(strcmp(ParsePoiner, "$GPGSA") == 0) NEO6_ParseGPGSA(GpsStateHandler);
 8002c1c:	490e      	ldr	r1, [pc, #56]	; (8002c58 <NEO6_ParseLine+0x68>)
 8002c1e:	4628      	mov	r0, r5
 8002c20:	f7fd fa96 	bl	8000150 <strcmp>
 8002c24:	b930      	cbnz	r0, 8002c34 <NEO6_ParseLine+0x44>
 8002c26:	4620      	mov	r0, r4
 8002c28:	f7ff ffa0 	bl	8002b6c <NEO6_ParseGPGSA>
//	else if(strcmp(ParsePoiner, "$GPGSV") == 0) NEO6_ParseGPGSV(GpsStateHandler);
//	else if(strcmp(ParsePoiner, "$GPGLL") == 0) NEO6_ParseGPGLL(GpsStateHandler);
}
 8002c2c:	e002      	b.n	8002c34 <NEO6_ParseLine+0x44>
	if(strcmp(ParsePoiner, "$GPRMC") == 0) NEO6_ParseGPRMC(GpsStateHandler);
 8002c2e:	4620      	mov	r0, r4
 8002c30:	f7ff fea2 	bl	8002978 <NEO6_ParseGPRMC>
}
 8002c34:	bd38      	pop	{r3, r4, r5, pc}
	else if(strcmp(ParsePoiner, "$GPVTG") == 0) NEO6_ParseGPVTG(GpsStateHandler);
 8002c36:	4620      	mov	r0, r4
 8002c38:	f7ff ff26 	bl	8002a88 <NEO6_ParseGPVTG>
 8002c3c:	e7fa      	b.n	8002c34 <NEO6_ParseLine+0x44>
	else if(strcmp(ParsePoiner, "$GPGGA") == 0) NEO6_ParseGPGGA(GpsStateHandler);
 8002c3e:	4620      	mov	r0, r4
 8002c40:	f7ff ff54 	bl	8002aec <NEO6_ParseGPGGA>
 8002c44:	e7f6      	b.n	8002c34 <NEO6_ParseLine+0x44>
 8002c46:	bf00      	nop
 8002c48:	0800beac 	.word	0x0800beac
 8002c4c:	0800beb0 	.word	0x0800beb0
 8002c50:	0800beb8 	.word	0x0800beb8
 8002c54:	0800bec0 	.word	0x0800bec0
 8002c58:	0800bec8 	.word	0x0800bec8

08002c5c <NEO6_IsFix>:

uint8_t NEO6_IsFix(NEO6_State *GpsStateHandler)
{
	return GpsStateHandler->Quality;
}
 8002c5c:	f890 01c9 	ldrb.w	r0, [r0, #457]	; 0x1c9
 8002c60:	4770      	bx	lr

08002c62 <NEO6_Task>:

void NEO6_Task(NEO6_State *GpsStateHandler)
{
	if(GpsStateHandler->UartBufferLines)
 8002c62:	f890 3106 	ldrb.w	r3, [r0, #262]	; 0x106
 8002c66:	b903      	cbnz	r3, 8002c6a <NEO6_Task+0x8>
 8002c68:	4770      	bx	lr
{
 8002c6a:	b510      	push	{r4, lr}
 8002c6c:	4604      	mov	r4, r0
	{
		NEO6_GetLineFromBuffer(GpsStateHandler);
 8002c6e:	f7ff fe67 	bl	8002940 <NEO6_GetLineFromBuffer>
		NEO6_ParseLine(GpsStateHandler);
 8002c72:	4620      	mov	r0, r4
 8002c74:	f7ff ffbc 	bl	8002bf0 <NEO6_ParseLine>
	}
}
 8002c78:	bd10      	pop	{r4, pc}
	...

08002c7c <ssd1306_WriteCommand>:
void ssd1306_Reset(void) {
    /* for I2C - do nothing */
}

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8002c7c:	b500      	push	{lr}
 8002c7e:	b087      	sub	sp, #28
 8002c80:	f88d 0017 	strb.w	r0, [sp, #23]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8002c84:	f04f 33ff 	mov.w	r3, #4294967295
 8002c88:	9302      	str	r3, [sp, #8]
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	9301      	str	r3, [sp, #4]
 8002c8e:	f10d 0217 	add.w	r2, sp, #23
 8002c92:	9200      	str	r2, [sp, #0]
 8002c94:	2200      	movs	r2, #0
 8002c96:	2178      	movs	r1, #120	; 0x78
 8002c98:	4802      	ldr	r0, [pc, #8]	; (8002ca4 <ssd1306_WriteCommand+0x28>)
 8002c9a:	f001 fa05 	bl	80040a8 <HAL_I2C_Mem_Write>
}
 8002c9e:	b007      	add	sp, #28
 8002ca0:	f85d fb04 	ldr.w	pc, [sp], #4
 8002ca4:	20000500 	.word	0x20000500

08002ca8 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8002ca8:	b500      	push	{lr}
 8002caa:	b085      	sub	sp, #20
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8002cac:	f04f 33ff 	mov.w	r3, #4294967295
 8002cb0:	9302      	str	r3, [sp, #8]
 8002cb2:	b289      	uxth	r1, r1
 8002cb4:	9101      	str	r1, [sp, #4]
 8002cb6:	9000      	str	r0, [sp, #0]
 8002cb8:	2301      	movs	r3, #1
 8002cba:	2240      	movs	r2, #64	; 0x40
 8002cbc:	2178      	movs	r1, #120	; 0x78
 8002cbe:	4803      	ldr	r0, [pc, #12]	; (8002ccc <ssd1306_WriteData+0x24>)
 8002cc0:	f001 f9f2 	bl	80040a8 <HAL_I2C_Mem_Write>
}
 8002cc4:	b005      	add	sp, #20
 8002cc6:	f85d fb04 	ldr.w	pc, [sp], #4
 8002cca:	bf00      	nop
 8002ccc:	20000500 	.word	0x20000500

08002cd0 <ssd1306_Fill>:
    
    SSD1306.Initialized = 1;
}

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8002cd0:	b508      	push	{r3, lr}
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8002cd2:	2800      	cmp	r0, #0
 8002cd4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002cd8:	bf0c      	ite	eq
 8002cda:	2100      	moveq	r1, #0
 8002cdc:	21ff      	movne	r1, #255	; 0xff
 8002cde:	4802      	ldr	r0, [pc, #8]	; (8002ce8 <ssd1306_Fill+0x18>)
 8002ce0:	f004 fb92 	bl	8007408 <memset>
}
 8002ce4:	bd08      	pop	{r3, pc}
 8002ce6:	bf00      	nop
 8002ce8:	200008dc 	.word	0x200008dc

08002cec <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8002cec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002cf0:	4d0c      	ldr	r5, [pc, #48]	; (8002d24 <ssd1306_UpdateScreen+0x38>)
void ssd1306_UpdateScreen(void) {
 8002cf2:	24b0      	movs	r4, #176	; 0xb0
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8002cf4:	f04f 0800 	mov.w	r8, #0
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8002cf8:	2710      	movs	r7, #16
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8002cfa:	2680      	movs	r6, #128	; 0x80
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8002cfc:	4620      	mov	r0, r4
 8002cfe:	f7ff ffbd 	bl	8002c7c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8002d02:	4640      	mov	r0, r8
 8002d04:	f7ff ffba 	bl	8002c7c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8002d08:	4638      	mov	r0, r7
 8002d0a:	f7ff ffb7 	bl	8002c7c <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8002d0e:	4631      	mov	r1, r6
 8002d10:	4628      	mov	r0, r5
 8002d12:	f7ff ffc9 	bl	8002ca8 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002d16:	3401      	adds	r4, #1
 8002d18:	b2e4      	uxtb	r4, r4
 8002d1a:	3580      	adds	r5, #128	; 0x80
 8002d1c:	2cb8      	cmp	r4, #184	; 0xb8
 8002d1e:	d1ed      	bne.n	8002cfc <ssd1306_UpdateScreen+0x10>
    }
}
 8002d20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002d24:	200008dc 	.word	0x200008dc

08002d28 <ssd1306_DrawPixel>:
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002d28:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002d2c:	d10f      	bne.n	8002d4e <ssd1306_DrawPixel+0x26>
 8002d2e:	293f      	cmp	r1, #63	; 0x3f
 8002d30:	d80d      	bhi.n	8002d4e <ssd1306_DrawPixel+0x26>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8002d32:	2a01      	cmp	r2, #1
 8002d34:	d00c      	beq.n	8002d50 <ssd1306_DrawPixel+0x28>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002d36:	08cb      	lsrs	r3, r1, #3
 8002d38:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
 8002d3c:	4a0b      	ldr	r2, [pc, #44]	; (8002d6c <ssd1306_DrawPixel+0x44>)
 8002d3e:	f001 0107 	and.w	r1, r1, #7
 8002d42:	2301      	movs	r3, #1
 8002d44:	408b      	lsls	r3, r1
 8002d46:	5c11      	ldrb	r1, [r2, r0]
 8002d48:	ea21 0103 	bic.w	r1, r1, r3
 8002d4c:	5411      	strb	r1, [r2, r0]
    }
}
 8002d4e:	4770      	bx	lr
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002d50:	08cb      	lsrs	r3, r1, #3
 8002d52:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
 8002d56:	4a05      	ldr	r2, [pc, #20]	; (8002d6c <ssd1306_DrawPixel+0x44>)
 8002d58:	f001 0107 	and.w	r1, r1, #7
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	fa03 f101 	lsl.w	r1, r3, r1
 8002d62:	5c13      	ldrb	r3, [r2, r0]
 8002d64:	4319      	orrs	r1, r3
 8002d66:	5411      	strb	r1, [r2, r0]
 8002d68:	4770      	bx	lr
 8002d6a:	bf00      	nop
 8002d6c:	200008dc 	.word	0x200008dc

08002d70 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8002d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d74:	b085      	sub	sp, #20
 8002d76:	9001      	str	r0, [sp, #4]
 8002d78:	ac04      	add	r4, sp, #16
 8002d7a:	e904 0006 	stmdb	r4, {r1, r2}
 8002d7e:	461f      	mov	r7, r3
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8002d80:	f1a0 0320 	sub.w	r3, r0, #32
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	2b5e      	cmp	r3, #94	; 0x5e
 8002d88:	d83f      	bhi.n	8002e0a <ssd1306_WriteChar+0x9a>
 8002d8a:	f89d 6008 	ldrb.w	r6, [sp, #8]
        return 0;
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8002d8e:	4b23      	ldr	r3, [pc, #140]	; (8002e1c <ssd1306_WriteChar+0xac>)
 8002d90:	f8b3 9000 	ldrh.w	r9, [r3]
 8002d94:	eb09 0306 	add.w	r3, r9, r6
 8002d98:	2b80      	cmp	r3, #128	; 0x80
 8002d9a:	dc3a      	bgt.n	8002e12 <ssd1306_WriteChar+0xa2>
 8002d9c:	f89d 2009 	ldrb.w	r2, [sp, #9]
 8002da0:	9200      	str	r2, [sp, #0]
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8002da2:	4b1e      	ldr	r3, [pc, #120]	; (8002e1c <ssd1306_WriteChar+0xac>)
 8002da4:	885d      	ldrh	r5, [r3, #2]
 8002da6:	18ab      	adds	r3, r5, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8002da8:	2b40      	cmp	r3, #64	; 0x40
 8002daa:	dc34      	bgt.n	8002e16 <ssd1306_WriteChar+0xa6>
        // Not enough space on current line
        return 0;
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8002dac:	b342      	cbz	r2, 8002e00 <ssd1306_WriteChar+0x90>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8002dae:	f1a0 0a20 	sub.w	sl, r0, #32
 8002db2:	fb02 fa0a 	mul.w	sl, r2, sl
 8002db6:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
 8002dba:	b2ed      	uxtb	r5, r5
    for(i = 0; i < Font.FontHeight; i++) {
 8002dbc:	f04f 0b00 	mov.w	fp, #0
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8002dc0:	9b03      	ldr	r3, [sp, #12]
 8002dc2:	f833 800a 	ldrh.w	r8, [r3, sl]
        for(j = 0; j < Font.FontWidth; j++) {
 8002dc6:	b196      	cbz	r6, 8002dee <ssd1306_WriteChar+0x7e>
 8002dc8:	2400      	movs	r4, #0
            if((b << j) & 0x8000)  {
 8002dca:	fa08 f304 	lsl.w	r3, r8, r4
 8002dce:	f413 4f00 	tst.w	r3, #32768	; 0x8000
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8002dd2:	eb09 0004 	add.w	r0, r9, r4
 8002dd6:	bf12      	itee	ne
 8002dd8:	463a      	movne	r2, r7
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002dda:	fab7 f287 	clzeq	r2, r7
 8002dde:	0952      	lsreq	r2, r2, #5
 8002de0:	4629      	mov	r1, r5
 8002de2:	b2c0      	uxtb	r0, r0
 8002de4:	f7ff ffa0 	bl	8002d28 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8002de8:	3401      	adds	r4, #1
 8002dea:	42b4      	cmp	r4, r6
 8002dec:	d1ed      	bne.n	8002dca <ssd1306_WriteChar+0x5a>
    for(i = 0; i < Font.FontHeight; i++) {
 8002dee:	f10b 0b01 	add.w	fp, fp, #1
 8002df2:	f10a 0a02 	add.w	sl, sl, #2
 8002df6:	3501      	adds	r5, #1
 8002df8:	b2ed      	uxtb	r5, r5
 8002dfa:	9b00      	ldr	r3, [sp, #0]
 8002dfc:	455b      	cmp	r3, fp
 8002dfe:	d1df      	bne.n	8002dc0 <ssd1306_WriteChar+0x50>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8002e00:	444e      	add	r6, r9
 8002e02:	4b06      	ldr	r3, [pc, #24]	; (8002e1c <ssd1306_WriteChar+0xac>)
 8002e04:	801e      	strh	r6, [r3, #0]
    
    // Return written char for validation
    return ch;
 8002e06:	9801      	ldr	r0, [sp, #4]
 8002e08:	e000      	b.n	8002e0c <ssd1306_WriteChar+0x9c>
        return 0;
 8002e0a:	2000      	movs	r0, #0
}
 8002e0c:	b005      	add	sp, #20
 8002e0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return 0;
 8002e12:	2000      	movs	r0, #0
 8002e14:	e7fa      	b.n	8002e0c <ssd1306_WriteChar+0x9c>
 8002e16:	2000      	movs	r0, #0
 8002e18:	e7f8      	b.n	8002e0c <ssd1306_WriteChar+0x9c>
 8002e1a:	bf00      	nop
 8002e1c:	200008d4 	.word	0x200008d4

08002e20 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8002e20:	b570      	push	{r4, r5, r6, lr}
 8002e22:	b082      	sub	sp, #8
 8002e24:	4604      	mov	r4, r0
 8002e26:	a802      	add	r0, sp, #8
 8002e28:	e900 0006 	stmdb	r0, {r1, r2}
    while (*str) {
 8002e2c:	7820      	ldrb	r0, [r4, #0]
 8002e2e:	b170      	cbz	r0, 8002e4e <ssd1306_WriteString+0x2e>
 8002e30:	461e      	mov	r6, r3
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8002e32:	466d      	mov	r5, sp
 8002e34:	4633      	mov	r3, r6
 8002e36:	e895 0006 	ldmia.w	r5, {r1, r2}
 8002e3a:	f7ff ff99 	bl	8002d70 <ssd1306_WriteChar>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	7820      	ldrb	r0, [r4, #0]
 8002e42:	4282      	cmp	r2, r0
 8002e44:	d103      	bne.n	8002e4e <ssd1306_WriteString+0x2e>
    while (*str) {
 8002e46:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8002e4a:	2800      	cmp	r0, #0
 8002e4c:	d1f2      	bne.n	8002e34 <ssd1306_WriteString+0x14>
        str++;
    }
    
    // Everything ok
    return *str;
}
 8002e4e:	b002      	add	sp, #8
 8002e50:	bd70      	pop	{r4, r5, r6, pc}
	...

08002e54 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
    SSD1306.CurrentX = x;
 8002e54:	4b01      	ldr	r3, [pc, #4]	; (8002e5c <ssd1306_SetCursor+0x8>)
 8002e56:	8018      	strh	r0, [r3, #0]
    SSD1306.CurrentY = y;
 8002e58:	8059      	strh	r1, [r3, #2]
}
 8002e5a:	4770      	bx	lr
 8002e5c:	200008d4 	.word	0x200008d4

08002e60 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8002e60:	b510      	push	{r4, lr}
 8002e62:	4604      	mov	r4, r0
    const uint8_t kSetContrastControlRegister = 0x81;
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8002e64:	2081      	movs	r0, #129	; 0x81
 8002e66:	f7ff ff09 	bl	8002c7c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8002e6a:	4620      	mov	r0, r4
 8002e6c:	f7ff ff06 	bl	8002c7c <ssd1306_WriteCommand>
}
 8002e70:	bd10      	pop	{r4, pc}
	...

08002e74 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8002e74:	b508      	push	{r3, lr}
 8002e76:	4602      	mov	r2, r0
    uint8_t value;
    if (on) {
 8002e78:	4603      	mov	r3, r0
        value = 0xAF;   // Display on
        SSD1306.DisplayOn = 1;
    } else {
        value = 0xAE;   // Display off
 8002e7a:	2800      	cmp	r0, #0
 8002e7c:	bf13      	iteet	ne
 8002e7e:	20af      	movne	r0, #175	; 0xaf
 8002e80:	20ae      	moveq	r0, #174	; 0xae
 8002e82:	4613      	moveq	r3, r2
 8002e84:	2301      	movne	r3, #1
 8002e86:	4a02      	ldr	r2, [pc, #8]	; (8002e90 <ssd1306_SetDisplayOn+0x1c>)
 8002e88:	7153      	strb	r3, [r2, #5]
        SSD1306.DisplayOn = 0;
    }
    ssd1306_WriteCommand(value);
 8002e8a:	f7ff fef7 	bl	8002c7c <ssd1306_WriteCommand>
}
 8002e8e:	bd08      	pop	{r3, pc}
 8002e90:	200008d4 	.word	0x200008d4

08002e94 <ssd1306_Init>:
void ssd1306_Init(void) {
 8002e94:	b508      	push	{r3, lr}
    HAL_Delay(100);
 8002e96:	2064      	movs	r0, #100	; 0x64
 8002e98:	f000 f884 	bl	8002fa4 <HAL_Delay>
    ssd1306_SetDisplayOn(0); //display off
 8002e9c:	2000      	movs	r0, #0
 8002e9e:	f7ff ffe9 	bl	8002e74 <ssd1306_SetDisplayOn>
    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8002ea2:	2020      	movs	r0, #32
 8002ea4:	f7ff feea 	bl	8002c7c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8002ea8:	2000      	movs	r0, #0
 8002eaa:	f7ff fee7 	bl	8002c7c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002eae:	20b0      	movs	r0, #176	; 0xb0
 8002eb0:	f7ff fee4 	bl	8002c7c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8002eb4:	20c8      	movs	r0, #200	; 0xc8
 8002eb6:	f7ff fee1 	bl	8002c7c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //---set low column address
 8002eba:	2000      	movs	r0, #0
 8002ebc:	f7ff fede 	bl	8002c7c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8002ec0:	2010      	movs	r0, #16
 8002ec2:	f7ff fedb 	bl	8002c7c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8002ec6:	2040      	movs	r0, #64	; 0x40
 8002ec8:	f7ff fed8 	bl	8002c7c <ssd1306_WriteCommand>
    ssd1306_SetContrast(0xFF);
 8002ecc:	20ff      	movs	r0, #255	; 0xff
 8002ece:	f7ff ffc7 	bl	8002e60 <ssd1306_SetContrast>
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8002ed2:	20a1      	movs	r0, #161	; 0xa1
 8002ed4:	f7ff fed2 	bl	8002c7c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xA6); //--set normal color
 8002ed8:	20a6      	movs	r0, #166	; 0xa6
 8002eda:	f7ff fecf 	bl	8002c7c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8002ede:	20a8      	movs	r0, #168	; 0xa8
 8002ee0:	f7ff fecc 	bl	8002c7c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); //
 8002ee4:	203f      	movs	r0, #63	; 0x3f
 8002ee6:	f7ff fec9 	bl	8002c7c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002eea:	20a4      	movs	r0, #164	; 0xa4
 8002eec:	f7ff fec6 	bl	8002c7c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8002ef0:	20d3      	movs	r0, #211	; 0xd3
 8002ef2:	f7ff fec3 	bl	8002c7c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8002ef6:	2000      	movs	r0, #0
 8002ef8:	f7ff fec0 	bl	8002c7c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8002efc:	20d5      	movs	r0, #213	; 0xd5
 8002efe:	f7ff febd 	bl	8002c7c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8002f02:	20f0      	movs	r0, #240	; 0xf0
 8002f04:	f7ff feba 	bl	8002c7c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8002f08:	20d9      	movs	r0, #217	; 0xd9
 8002f0a:	f7ff feb7 	bl	8002c7c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8002f0e:	2022      	movs	r0, #34	; 0x22
 8002f10:	f7ff feb4 	bl	8002c7c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8002f14:	20da      	movs	r0, #218	; 0xda
 8002f16:	f7ff feb1 	bl	8002c7c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
 8002f1a:	2012      	movs	r0, #18
 8002f1c:	f7ff feae 	bl	8002c7c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xDB); //--set vcomh
 8002f20:	20db      	movs	r0, #219	; 0xdb
 8002f22:	f7ff feab 	bl	8002c7c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8002f26:	2020      	movs	r0, #32
 8002f28:	f7ff fea8 	bl	8002c7c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8002f2c:	208d      	movs	r0, #141	; 0x8d
 8002f2e:	f7ff fea5 	bl	8002c7c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8002f32:	2014      	movs	r0, #20
 8002f34:	f7ff fea2 	bl	8002c7c <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8002f38:	2001      	movs	r0, #1
 8002f3a:	f7ff ff9b 	bl	8002e74 <ssd1306_SetDisplayOn>
    ssd1306_Fill(Black);
 8002f3e:	2000      	movs	r0, #0
 8002f40:	f7ff fec6 	bl	8002cd0 <ssd1306_Fill>
    ssd1306_UpdateScreen();
 8002f44:	f7ff fed2 	bl	8002cec <ssd1306_UpdateScreen>
    SSD1306.CurrentX = 0;
 8002f48:	4b03      	ldr	r3, [pc, #12]	; (8002f58 <ssd1306_Init+0xc4>)
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8002f4e:	805a      	strh	r2, [r3, #2]
    SSD1306.Initialized = 1;
 8002f50:	2201      	movs	r2, #1
 8002f52:	711a      	strb	r2, [r3, #4]
}
 8002f54:	bd08      	pop	{r3, pc}
 8002f56:	bf00      	nop
 8002f58:	200008d4 	.word	0x200008d4

08002f5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f5c:	b508      	push	{r3, lr}
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f5e:	4a07      	ldr	r2, [pc, #28]	; (8002f7c <HAL_Init+0x20>)
 8002f60:	6813      	ldr	r3, [r2, #0]
 8002f62:	f043 0310 	orr.w	r3, r3, #16
 8002f66:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f68:	2003      	movs	r0, #3
 8002f6a:	f000 f82f 	bl	8002fcc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f6e:	200f      	movs	r0, #15
 8002f70:	f7ff fa32 	bl	80023d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f74:	f7ff fa06 	bl	8002384 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8002f78:	2000      	movs	r0, #0
 8002f7a:	bd08      	pop	{r3, pc}
 8002f7c:	40022000 	.word	0x40022000

08002f80 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002f80:	4a03      	ldr	r2, [pc, #12]	; (8002f90 <HAL_IncTick+0x10>)
 8002f82:	6811      	ldr	r1, [r2, #0]
 8002f84:	4b03      	ldr	r3, [pc, #12]	; (8002f94 <HAL_IncTick+0x14>)
 8002f86:	781b      	ldrb	r3, [r3, #0]
 8002f88:	440b      	add	r3, r1
 8002f8a:	6013      	str	r3, [r2, #0]
}
 8002f8c:	4770      	bx	lr
 8002f8e:	bf00      	nop
 8002f90:	20000cdc 	.word	0x20000cdc
 8002f94:	2000000c 	.word	0x2000000c

08002f98 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002f98:	4b01      	ldr	r3, [pc, #4]	; (8002fa0 <HAL_GetTick+0x8>)
 8002f9a:	6818      	ldr	r0, [r3, #0]
}
 8002f9c:	4770      	bx	lr
 8002f9e:	bf00      	nop
 8002fa0:	20000cdc 	.word	0x20000cdc

08002fa4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fa4:	b538      	push	{r3, r4, r5, lr}
 8002fa6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002fa8:	f7ff fff6 	bl	8002f98 <HAL_GetTick>
 8002fac:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002fae:	f1b4 3fff 	cmp.w	r4, #4294967295
 8002fb2:	d002      	beq.n	8002fba <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8002fb4:	4b04      	ldr	r3, [pc, #16]	; (8002fc8 <HAL_Delay+0x24>)
 8002fb6:	781b      	ldrb	r3, [r3, #0]
 8002fb8:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002fba:	f7ff ffed 	bl	8002f98 <HAL_GetTick>
 8002fbe:	1b40      	subs	r0, r0, r5
 8002fc0:	42a0      	cmp	r0, r4
 8002fc2:	d3fa      	bcc.n	8002fba <HAL_Delay+0x16>
  {
  }
}
 8002fc4:	bd38      	pop	{r3, r4, r5, pc}
 8002fc6:	bf00      	nop
 8002fc8:	2000000c 	.word	0x2000000c

08002fcc <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fcc:	4907      	ldr	r1, [pc, #28]	; (8002fec <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002fce:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002fd0:	0203      	lsls	r3, r0, #8
 8002fd2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fd6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002fda:	0412      	lsls	r2, r2, #16
 8002fdc:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002fe0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002fe4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8002fe8:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002fea:	4770      	bx	lr
 8002fec:	e000ed00 	.word	0xe000ed00

08002ff0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ff0:	b500      	push	{lr}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ff2:	4b18      	ldr	r3, [pc, #96]	; (8003054 <HAL_NVIC_SetPriority+0x64>)
 8002ff4:	68db      	ldr	r3, [r3, #12]
 8002ff6:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ffa:	f1c3 0c07 	rsb	ip, r3, #7
 8002ffe:	f1bc 0f04 	cmp.w	ip, #4
 8003002:	bf28      	it	cs
 8003004:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003008:	f103 0e04 	add.w	lr, r3, #4
 800300c:	f1be 0f06 	cmp.w	lr, #6
 8003010:	bf8c      	ite	hi
 8003012:	3b03      	subhi	r3, #3
 8003014:	2300      	movls	r3, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003016:	f04f 3eff 	mov.w	lr, #4294967295
 800301a:	fa0e fc0c 	lsl.w	ip, lr, ip
 800301e:	ea21 010c 	bic.w	r1, r1, ip
 8003022:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003024:	fa0e f303 	lsl.w	r3, lr, r3
 8003028:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800302c:	4311      	orrs	r1, r2
  if ((int32_t)(IRQn) >= 0)
 800302e:	2800      	cmp	r0, #0
 8003030:	db09      	blt.n	8003046 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003032:	0109      	lsls	r1, r1, #4
 8003034:	b2c9      	uxtb	r1, r1
 8003036:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800303a:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800303e:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003042:	f85d fb04 	ldr.w	pc, [sp], #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003046:	f000 000f 	and.w	r0, r0, #15
 800304a:	0109      	lsls	r1, r1, #4
 800304c:	b2c9      	uxtb	r1, r1
 800304e:	4b02      	ldr	r3, [pc, #8]	; (8003058 <HAL_NVIC_SetPriority+0x68>)
 8003050:	5419      	strb	r1, [r3, r0]
 8003052:	e7f6      	b.n	8003042 <HAL_NVIC_SetPriority+0x52>
 8003054:	e000ed00 	.word	0xe000ed00
 8003058:	e000ed14 	.word	0xe000ed14

0800305c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800305c:	2800      	cmp	r0, #0
 800305e:	db08      	blt.n	8003072 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003060:	0942      	lsrs	r2, r0, #5
 8003062:	f000 001f 	and.w	r0, r0, #31
 8003066:	2301      	movs	r3, #1
 8003068:	fa03 f000 	lsl.w	r0, r3, r0
 800306c:	4b01      	ldr	r3, [pc, #4]	; (8003074 <HAL_NVIC_EnableIRQ+0x18>)
 800306e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003072:	4770      	bx	lr
 8003074:	e000e100 	.word	0xe000e100

08003078 <HAL_DMA_Abort>:
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003078:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800307c:	b2db      	uxtb	r3, r3
 800307e:	2b02      	cmp	r3, #2
 8003080:	d006      	beq.n	8003090 <HAL_DMA_Abort+0x18>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003082:	2304      	movs	r3, #4
 8003084:	6383      	str	r3, [r0, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003086:	2300      	movs	r3, #0
 8003088:	f880 3020 	strb.w	r3, [r0, #32]
    
    return HAL_ERROR;
 800308c:	2001      	movs	r0, #1
 800308e:	4770      	bx	lr
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003090:	6802      	ldr	r2, [r0, #0]
 8003092:	6813      	ldr	r3, [r2, #0]
 8003094:	f023 030e 	bic.w	r3, r3, #14
 8003098:	6013      	str	r3, [r2, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800309a:	6802      	ldr	r2, [r0, #0]
 800309c:	6813      	ldr	r3, [r2, #0]
 800309e:	f023 0301 	bic.w	r3, r3, #1
 80030a2:	6013      	str	r3, [r2, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80030a4:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 80030a6:	2201      	movs	r2, #1
 80030a8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80030aa:	fa02 f303 	lsl.w	r3, r2, r3
 80030ae:	604b      	str	r3, [r1, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80030b0:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80030b4:	2300      	movs	r3, #0
 80030b6:	f880 3020 	strb.w	r3, [r0, #32]
  
  return status; 
 80030ba:	4618      	mov	r0, r3
}
 80030bc:	4770      	bx	lr
	...

080030c0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80030c0:	b508      	push	{r3, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80030c2:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	2b02      	cmp	r3, #2
 80030ca:	d003      	beq.n	80030d4 <HAL_DMA_Abort_IT+0x14>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030cc:	2304      	movs	r3, #4
 80030ce:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 80030d0:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    } 
  }
  return status;
}
 80030d2:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030d4:	6802      	ldr	r2, [r0, #0]
 80030d6:	6813      	ldr	r3, [r2, #0]
 80030d8:	f023 030e 	bic.w	r3, r3, #14
 80030dc:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80030de:	6802      	ldr	r2, [r0, #0]
 80030e0:	6813      	ldr	r3, [r2, #0]
 80030e2:	f023 0301 	bic.w	r3, r3, #1
 80030e6:	6013      	str	r3, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80030e8:	6803      	ldr	r3, [r0, #0]
 80030ea:	4a19      	ldr	r2, [pc, #100]	; (8003150 <HAL_DMA_Abort_IT+0x90>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d013      	beq.n	8003118 <HAL_DMA_Abort_IT+0x58>
 80030f0:	3214      	adds	r2, #20
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d01e      	beq.n	8003134 <HAL_DMA_Abort_IT+0x74>
 80030f6:	3214      	adds	r2, #20
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d01d      	beq.n	8003138 <HAL_DMA_Abort_IT+0x78>
 80030fc:	3214      	adds	r2, #20
 80030fe:	4293      	cmp	r3, r2
 8003100:	d01d      	beq.n	800313e <HAL_DMA_Abort_IT+0x7e>
 8003102:	3214      	adds	r2, #20
 8003104:	4293      	cmp	r3, r2
 8003106:	d01d      	beq.n	8003144 <HAL_DMA_Abort_IT+0x84>
 8003108:	3214      	adds	r2, #20
 800310a:	4293      	cmp	r3, r2
 800310c:	bf0c      	ite	eq
 800310e:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 8003112:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 8003116:	e000      	b.n	800311a <HAL_DMA_Abort_IT+0x5a>
 8003118:	2301      	movs	r3, #1
 800311a:	4a0e      	ldr	r2, [pc, #56]	; (8003154 <HAL_DMA_Abort_IT+0x94>)
 800311c:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800311e:	2301      	movs	r3, #1
 8003120:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8003124:	2300      	movs	r3, #0
 8003126:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 800312a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800312c:	b16b      	cbz	r3, 800314a <HAL_DMA_Abort_IT+0x8a>
      hdma->XferAbortCallback(hdma);
 800312e:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8003130:	2000      	movs	r0, #0
 8003132:	e7ce      	b.n	80030d2 <HAL_DMA_Abort_IT+0x12>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003134:	2310      	movs	r3, #16
 8003136:	e7f0      	b.n	800311a <HAL_DMA_Abort_IT+0x5a>
 8003138:	f44f 7380 	mov.w	r3, #256	; 0x100
 800313c:	e7ed      	b.n	800311a <HAL_DMA_Abort_IT+0x5a>
 800313e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003142:	e7ea      	b.n	800311a <HAL_DMA_Abort_IT+0x5a>
 8003144:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003148:	e7e7      	b.n	800311a <HAL_DMA_Abort_IT+0x5a>
  HAL_StatusTypeDef status = HAL_OK;
 800314a:	2000      	movs	r0, #0
 800314c:	e7c1      	b.n	80030d2 <HAL_DMA_Abort_IT+0x12>
 800314e:	bf00      	nop
 8003150:	40020008 	.word	0x40020008
 8003154:	40020000 	.word	0x40020000

08003158 <HAL_DMA_GetState>:
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
  /* Return DMA handle state */
  return hdma->State;
 8003158:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
}
 800315c:	4770      	bx	lr
	...

08003160 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003164:	b083      	sub	sp, #12
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003166:	f8d1 9000 	ldr.w	r9, [r1]
 800316a:	f1b9 0f00 	cmp.w	r9, #0
 800316e:	f000 811f 	beq.w	80033b0 <HAL_GPIO_Init+0x250>
 8003172:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 8003174:	4613      	mov	r3, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003176:	4e90      	ldr	r6, [pc, #576]	; (80033b8 <HAL_GPIO_Init+0x258>)
        {
          SET_BIT(EXTI->IMR, iocurrent);
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003178:	4c90      	ldr	r4, [pc, #576]	; (80033bc <HAL_GPIO_Init+0x25c>)
      switch (GPIO_Init->Mode)
 800317a:	4d91      	ldr	r5, [pc, #580]	; (80033c0 <HAL_GPIO_Init+0x260>)
 800317c:	f8df e244 	ldr.w	lr, [pc, #580]	; 80033c4 <HAL_GPIO_Init+0x264>
 8003180:	4694      	mov	ip, r2
 8003182:	e0ba      	b.n	80032fa <HAL_GPIO_Init+0x19a>
 8003184:	f04f 0c00 	mov.w	ip, #0
 8003188:	e025      	b.n	80031d6 <HAL_GPIO_Init+0x76>
 800318a:	45a9      	cmp	r9, r5
 800318c:	d00f      	beq.n	80031ae <HAL_GPIO_Init+0x4e>
 800318e:	d906      	bls.n	800319e <HAL_GPIO_Init+0x3e>
 8003190:	45f1      	cmp	r9, lr
 8003192:	d00c      	beq.n	80031ae <HAL_GPIO_Init+0x4e>
 8003194:	f8df a230 	ldr.w	sl, [pc, #560]	; 80033c8 <HAL_GPIO_Init+0x268>
 8003198:	45d1      	cmp	r9, sl
 800319a:	d008      	beq.n	80031ae <HAL_GPIO_Init+0x4e>
 800319c:	e01b      	b.n	80031d6 <HAL_GPIO_Init+0x76>
 800319e:	f8df a22c 	ldr.w	sl, [pc, #556]	; 80033cc <HAL_GPIO_Init+0x26c>
 80031a2:	45d1      	cmp	r9, sl
 80031a4:	d003      	beq.n	80031ae <HAL_GPIO_Init+0x4e>
 80031a6:	f50a 2a70 	add.w	sl, sl, #983040	; 0xf0000
 80031aa:	45d1      	cmp	r9, sl
 80031ac:	d10f      	bne.n	80031ce <HAL_GPIO_Init+0x6e>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80031ae:	f8d1 c008 	ldr.w	ip, [r1, #8]
 80031b2:	f1bc 0f00 	cmp.w	ip, #0
 80031b6:	f000 80ef 	beq.w	8003398 <HAL_GPIO_Init+0x238>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80031ba:	f1bc 0f01 	cmp.w	ip, #1
            GPIOx->BSRR = ioposition;
 80031be:	bf0c      	ite	eq
 80031c0:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 80031c4:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80031c8:	f04f 0c08 	mov.w	ip, #8
 80031cc:	e003      	b.n	80031d6 <HAL_GPIO_Init+0x76>
      switch (GPIO_Init->Mode)
 80031ce:	f5aa 1a80 	sub.w	sl, sl, #1048576	; 0x100000
 80031d2:	45d1      	cmp	r9, sl
 80031d4:	d0eb      	beq.n	80031ae <HAL_GPIO_Init+0x4e>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80031d6:	2fff      	cmp	r7, #255	; 0xff
 80031d8:	bf99      	ittee	ls
 80031da:	4681      	movls	r9, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80031dc:	4692      	movls	sl, r2
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80031de:	f100 0904 	addhi.w	r9, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80031e2:	f1a2 0a20 	subhi.w	sl, r2, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80031e6:	f8d9 8000 	ldr.w	r8, [r9]
 80031ea:	f04f 0b0f 	mov.w	fp, #15
 80031ee:	fa0b fb0a 	lsl.w	fp, fp, sl
 80031f2:	ea28 080b 	bic.w	r8, r8, fp
 80031f6:	fa0c fa0a 	lsl.w	sl, ip, sl
 80031fa:	ea48 080a 	orr.w	r8, r8, sl
 80031fe:	f8c9 8000 	str.w	r8, [r9]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003202:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8003206:	f018 5f80 	tst.w	r8, #268435456	; 0x10000000
 800320a:	d06f      	beq.n	80032ec <HAL_GPIO_Init+0x18c>
        __HAL_RCC_AFIO_CLK_ENABLE();
 800320c:	f8d6 8018 	ldr.w	r8, [r6, #24]
 8003210:	f048 0801 	orr.w	r8, r8, #1
 8003214:	f8c6 8018 	str.w	r8, [r6, #24]
 8003218:	f8d6 8018 	ldr.w	r8, [r6, #24]
 800321c:	f008 0801 	and.w	r8, r8, #1
 8003220:	f8cd 8004 	str.w	r8, [sp, #4]
 8003224:	f8dd 8004 	ldr.w	r8, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8003228:	f023 0803 	bic.w	r8, r3, #3
 800322c:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8003230:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
 8003234:	f8d8 a008 	ldr.w	sl, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003238:	f003 0903 	and.w	r9, r3, #3
 800323c:	ea4f 0b89 	mov.w	fp, r9, lsl #2
 8003240:	f04f 090f 	mov.w	r9, #15
 8003244:	fa09 f90b 	lsl.w	r9, r9, fp
 8003248:	ea2a 0a09 	bic.w	sl, sl, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800324c:	f8df 9180 	ldr.w	r9, [pc, #384]	; 80033d0 <HAL_GPIO_Init+0x270>
 8003250:	4548      	cmp	r0, r9
 8003252:	f000 80a4 	beq.w	800339e <HAL_GPIO_Init+0x23e>
 8003256:	f509 6980 	add.w	r9, r9, #1024	; 0x400
 800325a:	4548      	cmp	r0, r9
 800325c:	f000 80a2 	beq.w	80033a4 <HAL_GPIO_Init+0x244>
 8003260:	f509 6980 	add.w	r9, r9, #1024	; 0x400
 8003264:	4548      	cmp	r0, r9
 8003266:	f000 80a0 	beq.w	80033aa <HAL_GPIO_Init+0x24a>
 800326a:	f509 6980 	add.w	r9, r9, #1024	; 0x400
 800326e:	4548      	cmp	r0, r9
 8003270:	bf0c      	ite	eq
 8003272:	f04f 0903 	moveq.w	r9, #3
 8003276:	f04f 0904 	movne.w	r9, #4
 800327a:	fa09 f90b 	lsl.w	r9, r9, fp
 800327e:	ea49 090a 	orr.w	r9, r9, sl
        AFIO->EXTICR[position >> 2u] = temp;
 8003282:	f8c8 9008 	str.w	r9, [r8, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003286:	f8d1 8004 	ldr.w	r8, [r1, #4]
 800328a:	f418 1f80 	tst.w	r8, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 800328e:	f8d4 8008 	ldr.w	r8, [r4, #8]
 8003292:	bf14      	ite	ne
 8003294:	ea48 0807 	orrne.w	r8, r8, r7
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003298:	ea28 0807 	biceq.w	r8, r8, r7
 800329c:	f8c4 8008 	str.w	r8, [r4, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80032a0:	f8d1 8004 	ldr.w	r8, [r1, #4]
 80032a4:	f418 1f00 	tst.w	r8, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80032a8:	f8d4 800c 	ldr.w	r8, [r4, #12]
 80032ac:	bf14      	ite	ne
 80032ae:	ea48 0807 	orrne.w	r8, r8, r7
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80032b2:	ea28 0807 	biceq.w	r8, r8, r7
 80032b6:	f8c4 800c 	str.w	r8, [r4, #12]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80032ba:	f8d1 8004 	ldr.w	r8, [r1, #4]
 80032be:	f418 3f00 	tst.w	r8, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80032c2:	f8d4 8004 	ldr.w	r8, [r4, #4]
 80032c6:	bf14      	ite	ne
 80032c8:	ea48 0807 	orrne.w	r8, r8, r7
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80032cc:	ea28 0807 	biceq.w	r8, r8, r7
 80032d0:	f8c4 8004 	str.w	r8, [r4, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80032d4:	f8d1 8004 	ldr.w	r8, [r1, #4]
 80032d8:	f418 3f80 	tst.w	r8, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80032dc:	f8d4 8000 	ldr.w	r8, [r4]
 80032e0:	bf14      	ite	ne
 80032e2:	ea48 0707 	orrne.w	r7, r8, r7
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80032e6:	ea28 0707 	biceq.w	r7, r8, r7
 80032ea:	6027      	str	r7, [r4, #0]
        }
      }
    }

	position++;
 80032ec:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032ee:	f8d1 9000 	ldr.w	r9, [r1]
 80032f2:	3204      	adds	r2, #4
 80032f4:	fa39 f703 	lsrs.w	r7, r9, r3
 80032f8:	d05a      	beq.n	80033b0 <HAL_GPIO_Init+0x250>
    ioposition = (0x01uL << position);
 80032fa:	f04f 0801 	mov.w	r8, #1
 80032fe:	fa08 f803 	lsl.w	r8, r8, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003302:	ea08 0709 	and.w	r7, r8, r9
    if (iocurrent == ioposition)
 8003306:	ea38 0909 	bics.w	r9, r8, r9
 800330a:	d1ef      	bne.n	80032ec <HAL_GPIO_Init+0x18c>
      switch (GPIO_Init->Mode)
 800330c:	f8d1 9004 	ldr.w	r9, [r1, #4]
 8003310:	f1b9 0f12 	cmp.w	r9, #18
 8003314:	f63f af39 	bhi.w	800318a <HAL_GPIO_Init+0x2a>
 8003318:	f1b9 0f12 	cmp.w	r9, #18
 800331c:	f63f af5b 	bhi.w	80031d6 <HAL_GPIO_Init+0x76>
 8003320:	f20f 0a04 	addw	sl, pc, #4
 8003324:	f85a f029 	ldr.w	pc, [sl, r9, lsl #2]
 8003328:	080031af 	.word	0x080031af
 800332c:	08003375 	.word	0x08003375
 8003330:	08003385 	.word	0x08003385
 8003334:	08003185 	.word	0x08003185
 8003338:	080031d7 	.word	0x080031d7
 800333c:	080031d7 	.word	0x080031d7
 8003340:	080031d7 	.word	0x080031d7
 8003344:	080031d7 	.word	0x080031d7
 8003348:	080031d7 	.word	0x080031d7
 800334c:	080031d7 	.word	0x080031d7
 8003350:	080031d7 	.word	0x080031d7
 8003354:	080031d7 	.word	0x080031d7
 8003358:	080031d7 	.word	0x080031d7
 800335c:	080031d7 	.word	0x080031d7
 8003360:	080031d7 	.word	0x080031d7
 8003364:	080031d7 	.word	0x080031d7
 8003368:	080031d7 	.word	0x080031d7
 800336c:	0800337b 	.word	0x0800337b
 8003370:	0800338f 	.word	0x0800338f
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003374:	f8d1 c00c 	ldr.w	ip, [r1, #12]
          break;
 8003378:	e72d      	b.n	80031d6 <HAL_GPIO_Init+0x76>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800337a:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 800337e:	f10c 0c04 	add.w	ip, ip, #4
          break;
 8003382:	e728      	b.n	80031d6 <HAL_GPIO_Init+0x76>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003384:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 8003388:	f10c 0c08 	add.w	ip, ip, #8
          break;
 800338c:	e723      	b.n	80031d6 <HAL_GPIO_Init+0x76>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800338e:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 8003392:	f10c 0c0c 	add.w	ip, ip, #12
          break;
 8003396:	e71e      	b.n	80031d6 <HAL_GPIO_Init+0x76>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003398:	f04f 0c04 	mov.w	ip, #4
 800339c:	e71b      	b.n	80031d6 <HAL_GPIO_Init+0x76>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800339e:	f04f 0900 	mov.w	r9, #0
 80033a2:	e76a      	b.n	800327a <HAL_GPIO_Init+0x11a>
 80033a4:	f04f 0901 	mov.w	r9, #1
 80033a8:	e767      	b.n	800327a <HAL_GPIO_Init+0x11a>
 80033aa:	f04f 0902 	mov.w	r9, #2
 80033ae:	e764      	b.n	800327a <HAL_GPIO_Init+0x11a>
  }
}
 80033b0:	b003      	add	sp, #12
 80033b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80033b6:	bf00      	nop
 80033b8:	40021000 	.word	0x40021000
 80033bc:	40010400 	.word	0x40010400
 80033c0:	10220000 	.word	0x10220000
 80033c4:	10310000 	.word	0x10310000
 80033c8:	10320000 	.word	0x10320000
 80033cc:	10120000 	.word	0x10120000
 80033d0:	40010800 	.word	0x40010800

080033d4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80033d4:	b10a      	cbz	r2, 80033da <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033d6:	6101      	str	r1, [r0, #16]
 80033d8:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80033da:	0409      	lsls	r1, r1, #16
 80033dc:	6101      	str	r1, [r0, #16]
  }
}
 80033de:	4770      	bx	lr

080033e0 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80033e0:	6803      	ldr	r3, [r0, #0]
 80033e2:	695a      	ldr	r2, [r3, #20]
 80033e4:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80033e8:	d101      	bne.n	80033ee <I2C_IsAcknowledgeFailed+0xe>
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_ERROR;
  }
  return HAL_OK;
 80033ea:	2000      	movs	r0, #0
}
 80033ec:	4770      	bx	lr
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033ee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80033f2:	615a      	str	r2, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 80033f4:	2300      	movs	r3, #0
 80033f6:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80033f8:	2220      	movs	r2, #32
 80033fa:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033fe:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003402:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8003404:	f042 0204 	orr.w	r2, r2, #4
 8003408:	6402      	str	r2, [r0, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 800340a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    return HAL_ERROR;
 800340e:	2001      	movs	r0, #1
 8003410:	4770      	bx	lr

08003412 <I2C_WaitOnFlagUntilTimeout>:
{
 8003412:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003416:	4605      	mov	r5, r0
 8003418:	460c      	mov	r4, r1
 800341a:	4616      	mov	r6, r2
 800341c:	461f      	mov	r7, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800341e:	f3c1 4807 	ubfx	r8, r1, #16, #8
 8003422:	f1b8 0f01 	cmp.w	r8, #1
 8003426:	682b      	ldr	r3, [r5, #0]
 8003428:	bf0c      	ite	eq
 800342a:	695b      	ldreq	r3, [r3, #20]
 800342c:	699b      	ldrne	r3, [r3, #24]
 800342e:	ea24 0c03 	bic.w	ip, r4, r3
 8003432:	fa1f fc8c 	uxth.w	ip, ip
 8003436:	fabc fc8c 	clz	ip, ip
 800343a:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800343e:	4566      	cmp	r6, ip
 8003440:	d127      	bne.n	8003492 <I2C_WaitOnFlagUntilTimeout+0x80>
    if (Timeout != HAL_MAX_DELAY)
 8003442:	f1b7 3fff 	cmp.w	r7, #4294967295
 8003446:	d0ec      	beq.n	8003422 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003448:	f7ff fda6 	bl	8002f98 <HAL_GetTick>
 800344c:	9b06      	ldr	r3, [sp, #24]
 800344e:	1ac0      	subs	r0, r0, r3
 8003450:	42b8      	cmp	r0, r7
 8003452:	d801      	bhi.n	8003458 <I2C_WaitOnFlagUntilTimeout+0x46>
 8003454:	2f00      	cmp	r7, #0
 8003456:	d1e4      	bne.n	8003422 <I2C_WaitOnFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003458:	f1b8 0f01 	cmp.w	r8, #1
 800345c:	682b      	ldr	r3, [r5, #0]
 800345e:	bf0c      	ite	eq
 8003460:	695b      	ldreq	r3, [r3, #20]
 8003462:	699b      	ldrne	r3, [r3, #24]
 8003464:	ea24 0303 	bic.w	r3, r4, r3
 8003468:	b29b      	uxth	r3, r3
 800346a:	fab3 f383 	clz	r3, r3
 800346e:	095b      	lsrs	r3, r3, #5
 8003470:	429e      	cmp	r6, r3
 8003472:	d1d6      	bne.n	8003422 <I2C_WaitOnFlagUntilTimeout+0x10>
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003474:	2300      	movs	r3, #0
 8003476:	632b      	str	r3, [r5, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003478:	2220      	movs	r2, #32
 800347a:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800347e:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003482:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8003484:	f042 0220 	orr.w	r2, r2, #32
 8003488:	642a      	str	r2, [r5, #64]	; 0x40
          __HAL_UNLOCK(hi2c);
 800348a:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
          return HAL_ERROR;
 800348e:	2001      	movs	r0, #1
 8003490:	e000      	b.n	8003494 <I2C_WaitOnFlagUntilTimeout+0x82>
  return HAL_OK;
 8003492:	2000      	movs	r0, #0
}
 8003494:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003498 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8003498:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800349c:	4605      	mov	r5, r0
 800349e:	460e      	mov	r6, r1
 80034a0:	4617      	mov	r7, r2
 80034a2:	4699      	mov	r9, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80034a4:	f3c1 4807 	ubfx	r8, r1, #16, #8
 80034a8:	f1b8 0f01 	cmp.w	r8, #1
 80034ac:	682b      	ldr	r3, [r5, #0]
 80034ae:	bf0c      	ite	eq
 80034b0:	695c      	ldreq	r4, [r3, #20]
 80034b2:	699c      	ldrne	r4, [r3, #24]
 80034b4:	ea26 0404 	bic.w	r4, r6, r4
 80034b8:	b2a4      	uxth	r4, r4
 80034ba:	3c00      	subs	r4, #0
 80034bc:	bf18      	it	ne
 80034be:	2401      	movne	r4, #1
 80034c0:	2c00      	cmp	r4, #0
 80034c2:	d044      	beq.n	800354e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80034c4:	682b      	ldr	r3, [r5, #0]
 80034c6:	695a      	ldr	r2, [r3, #20]
 80034c8:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80034cc:	d127      	bne.n	800351e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
    if (Timeout != HAL_MAX_DELAY)
 80034ce:	f1b7 3fff 	cmp.w	r7, #4294967295
 80034d2:	d0e9      	beq.n	80034a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034d4:	f7ff fd60 	bl	8002f98 <HAL_GetTick>
 80034d8:	eba0 0009 	sub.w	r0, r0, r9
 80034dc:	42b8      	cmp	r0, r7
 80034de:	d801      	bhi.n	80034e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4c>
 80034e0:	2f00      	cmp	r7, #0
 80034e2:	d1e1      	bne.n	80034a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80034e4:	f1b8 0f01 	cmp.w	r8, #1
 80034e8:	682b      	ldr	r3, [r5, #0]
 80034ea:	bf0c      	ite	eq
 80034ec:	695b      	ldreq	r3, [r3, #20]
 80034ee:	699b      	ldrne	r3, [r3, #24]
 80034f0:	ea26 0303 	bic.w	r3, r6, r3
 80034f4:	b29b      	uxth	r3, r3
 80034f6:	3b00      	subs	r3, #0
 80034f8:	bf18      	it	ne
 80034fa:	2301      	movne	r3, #1
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d0d3      	beq.n	80034a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003500:	2300      	movs	r3, #0
 8003502:	632b      	str	r3, [r5, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003504:	2220      	movs	r2, #32
 8003506:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800350a:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800350e:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8003510:	f042 0220 	orr.w	r2, r2, #32
 8003514:	642a      	str	r2, [r5, #64]	; 0x40
          __HAL_UNLOCK(hi2c);
 8003516:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
          return HAL_ERROR;
 800351a:	2001      	movs	r0, #1
 800351c:	e015      	b.n	800354a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb2>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003524:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003526:	682b      	ldr	r3, [r5, #0]
 8003528:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800352c:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 800352e:	2300      	movs	r3, #0
 8003530:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003532:	2220      	movs	r2, #32
 8003534:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003538:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800353c:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 800353e:	f042 0204 	orr.w	r2, r2, #4
 8003542:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8003544:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 8003548:	2001      	movs	r0, #1
}
 800354a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  return HAL_OK;
 800354e:	2000      	movs	r0, #0
 8003550:	e7fb      	b.n	800354a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb2>

08003552 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8003552:	b570      	push	{r4, r5, r6, lr}
 8003554:	4604      	mov	r4, r0
 8003556:	460d      	mov	r5, r1
 8003558:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800355a:	6823      	ldr	r3, [r4, #0]
 800355c:	695b      	ldr	r3, [r3, #20]
 800355e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003562:	d121      	bne.n	80035a8 <I2C_WaitOnTXEFlagUntilTimeout+0x56>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003564:	4620      	mov	r0, r4
 8003566:	f7ff ff3b 	bl	80033e0 <I2C_IsAcknowledgeFailed>
 800356a:	b9f8      	cbnz	r0, 80035ac <I2C_WaitOnTXEFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 800356c:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003570:	d0f3      	beq.n	800355a <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003572:	f7ff fd11 	bl	8002f98 <HAL_GetTick>
 8003576:	1b80      	subs	r0, r0, r6
 8003578:	42a8      	cmp	r0, r5
 800357a:	d801      	bhi.n	8003580 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 800357c:	2d00      	cmp	r5, #0
 800357e:	d1ec      	bne.n	800355a <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003580:	6823      	ldr	r3, [r4, #0]
 8003582:	695b      	ldr	r3, [r3, #20]
 8003584:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003588:	d1e7      	bne.n	800355a <I2C_WaitOnTXEFlagUntilTimeout+0x8>
          hi2c->PreviousState       = I2C_STATE_NONE;
 800358a:	2300      	movs	r3, #0
 800358c:	6323      	str	r3, [r4, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800358e:	2220      	movs	r2, #32
 8003590:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003594:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003598:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800359a:	f042 0220 	orr.w	r2, r2, #32
 800359e:	6422      	str	r2, [r4, #64]	; 0x40
          __HAL_UNLOCK(hi2c);
 80035a0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_ERROR;
 80035a4:	2001      	movs	r0, #1
 80035a6:	e000      	b.n	80035aa <I2C_WaitOnTXEFlagUntilTimeout+0x58>
  return HAL_OK;
 80035a8:	2000      	movs	r0, #0
}
 80035aa:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80035ac:	2001      	movs	r0, #1
 80035ae:	e7fc      	b.n	80035aa <I2C_WaitOnTXEFlagUntilTimeout+0x58>

080035b0 <I2C_RequestMemoryWrite>:
{
 80035b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80035b4:	b085      	sub	sp, #20
 80035b6:	4604      	mov	r4, r0
 80035b8:	460d      	mov	r5, r1
 80035ba:	4691      	mov	r9, r2
 80035bc:	461f      	mov	r7, r3
 80035be:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 80035c2:	9e0d      	ldr	r6, [sp, #52]	; 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035c4:	6803      	ldr	r3, [r0, #0]
 80035c6:	6819      	ldr	r1, [r3, #0]
 80035c8:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80035cc:	6019      	str	r1, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80035ce:	9600      	str	r6, [sp, #0]
 80035d0:	4643      	mov	r3, r8
 80035d2:	2200      	movs	r2, #0
 80035d4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80035d8:	f7ff ff1b 	bl	8003412 <I2C_WaitOnFlagUntilTimeout>
 80035dc:	b970      	cbnz	r0, 80035fc <I2C_RequestMemoryWrite+0x4c>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80035de:	6823      	ldr	r3, [r4, #0]
 80035e0:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 80035e4:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80035e6:	4633      	mov	r3, r6
 80035e8:	4642      	mov	r2, r8
 80035ea:	4928      	ldr	r1, [pc, #160]	; (800368c <I2C_RequestMemoryWrite+0xdc>)
 80035ec:	4620      	mov	r0, r4
 80035ee:	f7ff ff53 	bl	8003498 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035f2:	b168      	cbz	r0, 8003610 <I2C_RequestMemoryWrite+0x60>
    return HAL_ERROR;
 80035f4:	2001      	movs	r0, #1
}
 80035f6:	b005      	add	sp, #20
 80035f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80035fc:	6823      	ldr	r3, [r4, #0]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003604:	d040      	beq.n	8003688 <I2C_RequestMemoryWrite+0xd8>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003606:	f44f 7300 	mov.w	r3, #512	; 0x200
 800360a:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 800360c:	2003      	movs	r0, #3
 800360e:	e7f2      	b.n	80035f6 <I2C_RequestMemoryWrite+0x46>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003610:	2300      	movs	r3, #0
 8003612:	9303      	str	r3, [sp, #12]
 8003614:	6823      	ldr	r3, [r4, #0]
 8003616:	695a      	ldr	r2, [r3, #20]
 8003618:	9203      	str	r2, [sp, #12]
 800361a:	699b      	ldr	r3, [r3, #24]
 800361c:	9303      	str	r3, [sp, #12]
 800361e:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003620:	4632      	mov	r2, r6
 8003622:	4641      	mov	r1, r8
 8003624:	4620      	mov	r0, r4
 8003626:	f7ff ff94 	bl	8003552 <I2C_WaitOnTXEFlagUntilTimeout>
 800362a:	b930      	cbnz	r0, 800363a <I2C_RequestMemoryWrite+0x8a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800362c:	2f01      	cmp	r7, #1
 800362e:	d110      	bne.n	8003652 <I2C_RequestMemoryWrite+0xa2>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003630:	6823      	ldr	r3, [r4, #0]
 8003632:	fa5f f689 	uxtb.w	r6, r9
 8003636:	611e      	str	r6, [r3, #16]
 8003638:	e7dd      	b.n	80035f6 <I2C_RequestMemoryWrite+0x46>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800363a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800363c:	2b04      	cmp	r3, #4
 800363e:	d001      	beq.n	8003644 <I2C_RequestMemoryWrite+0x94>
    return HAL_ERROR;
 8003640:	2001      	movs	r0, #1
 8003642:	e7d8      	b.n	80035f6 <I2C_RequestMemoryWrite+0x46>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003644:	6822      	ldr	r2, [r4, #0]
 8003646:	6813      	ldr	r3, [r2, #0]
 8003648:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800364c:	6013      	str	r3, [r2, #0]
    return HAL_ERROR;
 800364e:	2001      	movs	r0, #1
 8003650:	e7d1      	b.n	80035f6 <I2C_RequestMemoryWrite+0x46>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003652:	6823      	ldr	r3, [r4, #0]
 8003654:	ea4f 2219 	mov.w	r2, r9, lsr #8
 8003658:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800365a:	4632      	mov	r2, r6
 800365c:	4641      	mov	r1, r8
 800365e:	4620      	mov	r0, r4
 8003660:	f7ff ff77 	bl	8003552 <I2C_WaitOnTXEFlagUntilTimeout>
 8003664:	b920      	cbnz	r0, 8003670 <I2C_RequestMemoryWrite+0xc0>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003666:	6823      	ldr	r3, [r4, #0]
 8003668:	fa5f f689 	uxtb.w	r6, r9
 800366c:	611e      	str	r6, [r3, #16]
 800366e:	e7c2      	b.n	80035f6 <I2C_RequestMemoryWrite+0x46>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003670:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003672:	2b04      	cmp	r3, #4
 8003674:	d001      	beq.n	800367a <I2C_RequestMemoryWrite+0xca>
      return HAL_ERROR;
 8003676:	2001      	movs	r0, #1
 8003678:	e7bd      	b.n	80035f6 <I2C_RequestMemoryWrite+0x46>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800367a:	6822      	ldr	r2, [r4, #0]
 800367c:	6813      	ldr	r3, [r2, #0]
 800367e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003682:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 8003684:	2001      	movs	r0, #1
 8003686:	e7b6      	b.n	80035f6 <I2C_RequestMemoryWrite+0x46>
    return HAL_TIMEOUT;
 8003688:	2003      	movs	r0, #3
 800368a:	e7b4      	b.n	80035f6 <I2C_RequestMemoryWrite+0x46>
 800368c:	00010002 	.word	0x00010002

08003690 <I2C_RequestMemoryRead>:
{
 8003690:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003694:	b084      	sub	sp, #16
 8003696:	4604      	mov	r4, r0
 8003698:	460d      	mov	r5, r1
 800369a:	4616      	mov	r6, r2
 800369c:	4699      	mov	r9, r3
 800369e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80036a0:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036a4:	6802      	ldr	r2, [r0, #0]
 80036a6:	6813      	ldr	r3, [r2, #0]
 80036a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80036ac:	6013      	str	r3, [r2, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036ae:	6803      	ldr	r3, [r0, #0]
 80036b0:	6819      	ldr	r1, [r3, #0]
 80036b2:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80036b6:	6019      	str	r1, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80036b8:	f8cd 8000 	str.w	r8, [sp]
 80036bc:	463b      	mov	r3, r7
 80036be:	2200      	movs	r2, #0
 80036c0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80036c4:	f7ff fea5 	bl	8003412 <I2C_WaitOnFlagUntilTimeout>
 80036c8:	b980      	cbnz	r0, 80036ec <I2C_RequestMemoryRead+0x5c>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80036ca:	fa5f fa85 	uxtb.w	sl, r5
 80036ce:	6823      	ldr	r3, [r4, #0]
 80036d0:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 80036d4:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80036d6:	4643      	mov	r3, r8
 80036d8:	463a      	mov	r2, r7
 80036da:	4945      	ldr	r1, [pc, #276]	; (80037f0 <I2C_RequestMemoryRead+0x160>)
 80036dc:	4620      	mov	r0, r4
 80036de:	f7ff fedb 	bl	8003498 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036e2:	b168      	cbz	r0, 8003700 <I2C_RequestMemoryRead+0x70>
    return HAL_ERROR;
 80036e4:	2001      	movs	r0, #1
}
 80036e6:	b004      	add	sp, #16
 80036e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80036ec:	6823      	ldr	r3, [r4, #0]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f413 7f80 	tst.w	r3, #256	; 0x100
 80036f4:	d077      	beq.n	80037e6 <I2C_RequestMemoryRead+0x156>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80036f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80036fa:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 80036fc:	2003      	movs	r0, #3
 80036fe:	e7f2      	b.n	80036e6 <I2C_RequestMemoryRead+0x56>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003700:	2300      	movs	r3, #0
 8003702:	9303      	str	r3, [sp, #12]
 8003704:	6823      	ldr	r3, [r4, #0]
 8003706:	695a      	ldr	r2, [r3, #20]
 8003708:	9203      	str	r2, [sp, #12]
 800370a:	699b      	ldr	r3, [r3, #24]
 800370c:	9303      	str	r3, [sp, #12]
 800370e:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003710:	4642      	mov	r2, r8
 8003712:	4639      	mov	r1, r7
 8003714:	4620      	mov	r0, r4
 8003716:	f7ff ff1c 	bl	8003552 <I2C_WaitOnTXEFlagUntilTimeout>
 800371a:	b988      	cbnz	r0, 8003740 <I2C_RequestMemoryRead+0xb0>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800371c:	f1b9 0f01 	cmp.w	r9, #1
 8003720:	d11a      	bne.n	8003758 <I2C_RequestMemoryRead+0xc8>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003722:	6823      	ldr	r3, [r4, #0]
 8003724:	b2f6      	uxtb	r6, r6
 8003726:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003728:	4642      	mov	r2, r8
 800372a:	4639      	mov	r1, r7
 800372c:	4620      	mov	r0, r4
 800372e:	f7ff ff10 	bl	8003552 <I2C_WaitOnTXEFlagUntilTimeout>
 8003732:	2800      	cmp	r0, #0
 8003734:	d030      	beq.n	8003798 <I2C_RequestMemoryRead+0x108>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003736:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003738:	2b04      	cmp	r3, #4
 800373a:	d026      	beq.n	800378a <I2C_RequestMemoryRead+0xfa>
    return HAL_ERROR;
 800373c:	2001      	movs	r0, #1
 800373e:	e7d2      	b.n	80036e6 <I2C_RequestMemoryRead+0x56>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003740:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003742:	2b04      	cmp	r3, #4
 8003744:	d001      	beq.n	800374a <I2C_RequestMemoryRead+0xba>
    return HAL_ERROR;
 8003746:	2001      	movs	r0, #1
 8003748:	e7cd      	b.n	80036e6 <I2C_RequestMemoryRead+0x56>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800374a:	6822      	ldr	r2, [r4, #0]
 800374c:	6813      	ldr	r3, [r2, #0]
 800374e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003752:	6013      	str	r3, [r2, #0]
    return HAL_ERROR;
 8003754:	2001      	movs	r0, #1
 8003756:	e7c6      	b.n	80036e6 <I2C_RequestMemoryRead+0x56>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003758:	6823      	ldr	r3, [r4, #0]
 800375a:	0a32      	lsrs	r2, r6, #8
 800375c:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800375e:	4642      	mov	r2, r8
 8003760:	4639      	mov	r1, r7
 8003762:	4620      	mov	r0, r4
 8003764:	f7ff fef5 	bl	8003552 <I2C_WaitOnTXEFlagUntilTimeout>
 8003768:	b918      	cbnz	r0, 8003772 <I2C_RequestMemoryRead+0xe2>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800376a:	6823      	ldr	r3, [r4, #0]
 800376c:	b2f6      	uxtb	r6, r6
 800376e:	611e      	str	r6, [r3, #16]
 8003770:	e7da      	b.n	8003728 <I2C_RequestMemoryRead+0x98>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003772:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003774:	2b04      	cmp	r3, #4
 8003776:	d001      	beq.n	800377c <I2C_RequestMemoryRead+0xec>
      return HAL_ERROR;
 8003778:	2001      	movs	r0, #1
 800377a:	e7b4      	b.n	80036e6 <I2C_RequestMemoryRead+0x56>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800377c:	6822      	ldr	r2, [r4, #0]
 800377e:	6813      	ldr	r3, [r2, #0]
 8003780:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003784:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 8003786:	2001      	movs	r0, #1
 8003788:	e7ad      	b.n	80036e6 <I2C_RequestMemoryRead+0x56>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800378a:	6822      	ldr	r2, [r4, #0]
 800378c:	6813      	ldr	r3, [r2, #0]
 800378e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003792:	6013      	str	r3, [r2, #0]
    return HAL_ERROR;
 8003794:	2001      	movs	r0, #1
 8003796:	e7a6      	b.n	80036e6 <I2C_RequestMemoryRead+0x56>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003798:	6822      	ldr	r2, [r4, #0]
 800379a:	6813      	ldr	r3, [r2, #0]
 800379c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037a0:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80037a2:	f8cd 8000 	str.w	r8, [sp]
 80037a6:	463b      	mov	r3, r7
 80037a8:	2200      	movs	r2, #0
 80037aa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80037ae:	4620      	mov	r0, r4
 80037b0:	f7ff fe2f 	bl	8003412 <I2C_WaitOnFlagUntilTimeout>
 80037b4:	b968      	cbnz	r0, 80037d2 <I2C_RequestMemoryRead+0x142>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80037b6:	6822      	ldr	r2, [r4, #0]
 80037b8:	f04a 0301 	orr.w	r3, sl, #1
 80037bc:	6113      	str	r3, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80037be:	4643      	mov	r3, r8
 80037c0:	463a      	mov	r2, r7
 80037c2:	490b      	ldr	r1, [pc, #44]	; (80037f0 <I2C_RequestMemoryRead+0x160>)
 80037c4:	4620      	mov	r0, r4
 80037c6:	f7ff fe67 	bl	8003498 <I2C_WaitOnMasterAddressFlagUntilTimeout>
    return HAL_TIMEOUT;
 80037ca:	3800      	subs	r0, #0
 80037cc:	bf18      	it	ne
 80037ce:	2001      	movne	r0, #1
 80037d0:	e789      	b.n	80036e6 <I2C_RequestMemoryRead+0x56>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80037d2:	6823      	ldr	r3, [r4, #0]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f413 7f80 	tst.w	r3, #256	; 0x100
 80037da:	d006      	beq.n	80037ea <I2C_RequestMemoryRead+0x15a>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80037dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80037e0:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 80037e2:	2003      	movs	r0, #3
 80037e4:	e77f      	b.n	80036e6 <I2C_RequestMemoryRead+0x56>
    return HAL_TIMEOUT;
 80037e6:	2003      	movs	r0, #3
 80037e8:	e77d      	b.n	80036e6 <I2C_RequestMemoryRead+0x56>
    return HAL_TIMEOUT;
 80037ea:	2003      	movs	r0, #3
 80037ec:	e77b      	b.n	80036e6 <I2C_RequestMemoryRead+0x56>
 80037ee:	bf00      	nop
 80037f0:	00010002 	.word	0x00010002

080037f4 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 80037f4:	b570      	push	{r4, r5, r6, lr}
 80037f6:	4604      	mov	r4, r0
 80037f8:	460d      	mov	r5, r1
 80037fa:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80037fc:	6823      	ldr	r3, [r4, #0]
 80037fe:	695b      	ldr	r3, [r3, #20]
 8003800:	f013 0f04 	tst.w	r3, #4
 8003804:	d121      	bne.n	800384a <I2C_WaitOnBTFFlagUntilTimeout+0x56>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003806:	4620      	mov	r0, r4
 8003808:	f7ff fdea 	bl	80033e0 <I2C_IsAcknowledgeFailed>
 800380c:	b9f8      	cbnz	r0, 800384e <I2C_WaitOnBTFFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 800380e:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003812:	d0f3      	beq.n	80037fc <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003814:	f7ff fbc0 	bl	8002f98 <HAL_GetTick>
 8003818:	1b80      	subs	r0, r0, r6
 800381a:	42a8      	cmp	r0, r5
 800381c:	d801      	bhi.n	8003822 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 800381e:	2d00      	cmp	r5, #0
 8003820:	d1ec      	bne.n	80037fc <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003822:	6823      	ldr	r3, [r4, #0]
 8003824:	695b      	ldr	r3, [r3, #20]
 8003826:	f013 0f04 	tst.w	r3, #4
 800382a:	d1e7      	bne.n	80037fc <I2C_WaitOnBTFFlagUntilTimeout+0x8>
          hi2c->PreviousState       = I2C_STATE_NONE;
 800382c:	2300      	movs	r3, #0
 800382e:	6323      	str	r3, [r4, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003830:	2220      	movs	r2, #32
 8003832:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003836:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800383a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800383c:	f042 0220 	orr.w	r2, r2, #32
 8003840:	6422      	str	r2, [r4, #64]	; 0x40
          __HAL_UNLOCK(hi2c);
 8003842:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_ERROR;
 8003846:	2001      	movs	r0, #1
 8003848:	e000      	b.n	800384c <I2C_WaitOnBTFFlagUntilTimeout+0x58>
  return HAL_OK;
 800384a:	2000      	movs	r0, #0
}
 800384c:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800384e:	2001      	movs	r0, #1
 8003850:	e7fc      	b.n	800384c <I2C_WaitOnBTFFlagUntilTimeout+0x58>

08003852 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8003852:	b570      	push	{r4, r5, r6, lr}
 8003854:	4604      	mov	r4, r0
 8003856:	460d      	mov	r5, r1
 8003858:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800385a:	6803      	ldr	r3, [r0, #0]
 800385c:	695a      	ldr	r2, [r3, #20]
 800385e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003862:	d01b      	beq.n	800389c <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
  return HAL_OK;
 8003864:	2000      	movs	r0, #0
 8003866:	e00e      	b.n	8003886 <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003868:	f06f 0210 	mvn.w	r2, #16
 800386c:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 800386e:	2300      	movs	r3, #0
 8003870:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003872:	2220      	movs	r2, #32
 8003874:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003878:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800387c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800387e:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8003880:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      return HAL_ERROR;
 8003884:	2001      	movs	r0, #1
}
 8003886:	bd70      	pop	{r4, r5, r6, pc}
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003888:	6823      	ldr	r3, [r4, #0]
 800388a:	695b      	ldr	r3, [r3, #20]
 800388c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003890:	d010      	beq.n	80038b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003892:	6823      	ldr	r3, [r4, #0]
 8003894:	6958      	ldr	r0, [r3, #20]
 8003896:	f010 0f40 	tst.w	r0, #64	; 0x40
 800389a:	d11a      	bne.n	80038d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x80>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800389c:	6958      	ldr	r0, [r3, #20]
 800389e:	f010 0f10 	tst.w	r0, #16
 80038a2:	d1e1      	bne.n	8003868 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038a4:	f7ff fb78 	bl	8002f98 <HAL_GetTick>
 80038a8:	1b80      	subs	r0, r0, r6
 80038aa:	42a8      	cmp	r0, r5
 80038ac:	d8ec      	bhi.n	8003888 <I2C_WaitOnRXNEFlagUntilTimeout+0x36>
 80038ae:	2d00      	cmp	r5, #0
 80038b0:	d1ef      	bne.n	8003892 <I2C_WaitOnRXNEFlagUntilTimeout+0x40>
 80038b2:	e7e9      	b.n	8003888 <I2C_WaitOnRXNEFlagUntilTimeout+0x36>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80038b4:	2300      	movs	r3, #0
 80038b6:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80038b8:	2220      	movs	r2, #32
 80038ba:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038be:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038c2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80038c4:	f042 0220 	orr.w	r2, r2, #32
 80038c8:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80038ca:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 80038ce:	2001      	movs	r0, #1
 80038d0:	e7d9      	b.n	8003886 <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
  return HAL_OK;
 80038d2:	2000      	movs	r0, #0
 80038d4:	e7d7      	b.n	8003886 <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
	...

080038d8 <HAL_I2C_Init>:
  if (hi2c == NULL)
 80038d8:	2800      	cmp	r0, #0
 80038da:	f000 80b1 	beq.w	8003a40 <HAL_I2C_Init+0x168>
{
 80038de:	b538      	push	{r3, r4, r5, lr}
 80038e0:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80038e2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d074      	beq.n	80039d4 <HAL_I2C_Init+0xfc>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80038ea:	2324      	movs	r3, #36	; 0x24
 80038ec:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80038f0:	6822      	ldr	r2, [r4, #0]
 80038f2:	6813      	ldr	r3, [r2, #0]
 80038f4:	f023 0301 	bic.w	r3, r3, #1
 80038f8:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80038fa:	6822      	ldr	r2, [r4, #0]
 80038fc:	6813      	ldr	r3, [r2, #0]
 80038fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003902:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003904:	6822      	ldr	r2, [r4, #0]
 8003906:	6813      	ldr	r3, [r2, #0]
 8003908:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800390c:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800390e:	f002 f8ef 	bl	8005af0 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003912:	6862      	ldr	r2, [r4, #4]
 8003914:	4b4c      	ldr	r3, [pc, #304]	; (8003a48 <HAL_I2C_Init+0x170>)
 8003916:	429a      	cmp	r2, r3
 8003918:	d861      	bhi.n	80039de <HAL_I2C_Init+0x106>
 800391a:	4b4c      	ldr	r3, [pc, #304]	; (8003a4c <HAL_I2C_Init+0x174>)
 800391c:	4298      	cmp	r0, r3
 800391e:	f240 8091 	bls.w	8003a44 <HAL_I2C_Init+0x16c>
  freqrange = I2C_FREQRANGE(pclk1);
 8003922:	494b      	ldr	r1, [pc, #300]	; (8003a50 <HAL_I2C_Init+0x178>)
 8003924:	fba1 3100 	umull	r3, r1, r1, r0
 8003928:	0c8b      	lsrs	r3, r1, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800392a:	6825      	ldr	r5, [r4, #0]
 800392c:	686a      	ldr	r2, [r5, #4]
 800392e:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8003932:	ea42 4291 	orr.w	r2, r2, r1, lsr #18
 8003936:	606a      	str	r2, [r5, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003938:	6821      	ldr	r1, [r4, #0]
 800393a:	6a0a      	ldr	r2, [r1, #32]
 800393c:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8003940:	4d41      	ldr	r5, [pc, #260]	; (8003a48 <HAL_I2C_Init+0x170>)
 8003942:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8003946:	45ac      	cmp	ip, r5
 8003948:	d84e      	bhi.n	80039e8 <HAL_I2C_Init+0x110>
 800394a:	3301      	adds	r3, #1
 800394c:	4313      	orrs	r3, r2
 800394e:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003950:	6821      	ldr	r1, [r4, #0]
 8003952:	69ca      	ldr	r2, [r1, #28]
 8003954:	f422 424f 	bic.w	r2, r2, #52992	; 0xcf00
 8003958:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800395c:	6865      	ldr	r5, [r4, #4]
 800395e:	4b3a      	ldr	r3, [pc, #232]	; (8003a48 <HAL_I2C_Init+0x170>)
 8003960:	429d      	cmp	r5, r3
 8003962:	d84b      	bhi.n	80039fc <HAL_I2C_Init+0x124>
 8003964:	1e43      	subs	r3, r0, #1
 8003966:	006d      	lsls	r5, r5, #1
 8003968:	fbb3 f3f5 	udiv	r3, r3, r5
 800396c:	3301      	adds	r3, #1
 800396e:	f640 70fc 	movw	r0, #4092	; 0xffc
 8003972:	4203      	tst	r3, r0
 8003974:	d05e      	beq.n	8003a34 <HAL_I2C_Init+0x15c>
 8003976:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800397a:	4313      	orrs	r3, r2
 800397c:	61cb      	str	r3, [r1, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800397e:	6821      	ldr	r1, [r4, #0]
 8003980:	680a      	ldr	r2, [r1, #0]
 8003982:	69e3      	ldr	r3, [r4, #28]
 8003984:	6a20      	ldr	r0, [r4, #32]
 8003986:	4303      	orrs	r3, r0
 8003988:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800398c:	4313      	orrs	r3, r2
 800398e:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003990:	6821      	ldr	r1, [r4, #0]
 8003992:	688a      	ldr	r2, [r1, #8]
 8003994:	6923      	ldr	r3, [r4, #16]
 8003996:	68e0      	ldr	r0, [r4, #12]
 8003998:	4303      	orrs	r3, r0
 800399a:	f422 4203 	bic.w	r2, r2, #33536	; 0x8300
 800399e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80039a2:	4313      	orrs	r3, r2
 80039a4:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80039a6:	6821      	ldr	r1, [r4, #0]
 80039a8:	68ca      	ldr	r2, [r1, #12]
 80039aa:	6963      	ldr	r3, [r4, #20]
 80039ac:	69a0      	ldr	r0, [r4, #24]
 80039ae:	4303      	orrs	r3, r0
 80039b0:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80039b4:	4313      	orrs	r3, r2
 80039b6:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 80039b8:	6822      	ldr	r2, [r4, #0]
 80039ba:	6813      	ldr	r3, [r2, #0]
 80039bc:	f043 0301 	orr.w	r3, r3, #1
 80039c0:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039c2:	2000      	movs	r0, #0
 80039c4:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80039c6:	2320      	movs	r3, #32
 80039c8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80039cc:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039ce:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 80039d2:	bd38      	pop	{r3, r4, r5, pc}
    hi2c->Lock = HAL_UNLOCKED;
 80039d4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 80039d8:	f7fe fbd0 	bl	800217c <HAL_I2C_MspInit>
 80039dc:	e785      	b.n	80038ea <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80039de:	4b1d      	ldr	r3, [pc, #116]	; (8003a54 <HAL_I2C_Init+0x17c>)
 80039e0:	4298      	cmp	r0, r3
 80039e2:	d89e      	bhi.n	8003922 <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 80039e4:	2001      	movs	r0, #1
 80039e6:	e7f4      	b.n	80039d2 <HAL_I2C_Init+0xfa>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80039e8:	f44f 7596 	mov.w	r5, #300	; 0x12c
 80039ec:	fb05 f303 	mul.w	r3, r5, r3
 80039f0:	4d19      	ldr	r5, [pc, #100]	; (8003a58 <HAL_I2C_Init+0x180>)
 80039f2:	fba5 5303 	umull	r5, r3, r5, r3
 80039f6:	099b      	lsrs	r3, r3, #6
 80039f8:	3301      	adds	r3, #1
 80039fa:	e7a7      	b.n	800394c <HAL_I2C_Init+0x74>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80039fc:	68a3      	ldr	r3, [r4, #8]
 80039fe:	b95b      	cbnz	r3, 8003a18 <HAL_I2C_Init+0x140>
 8003a00:	3801      	subs	r0, #1
 8003a02:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8003a06:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a0a:	3301      	adds	r3, #1
 8003a0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a10:	b193      	cbz	r3, 8003a38 <HAL_I2C_Init+0x160>
 8003a12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a16:	e7b0      	b.n	800397a <HAL_I2C_Init+0xa2>
 8003a18:	3801      	subs	r0, #1
 8003a1a:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8003a1e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003a22:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a26:	3301      	adds	r3, #1
 8003a28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a2c:	b133      	cbz	r3, 8003a3c <HAL_I2C_Init+0x164>
 8003a2e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a32:	e7a2      	b.n	800397a <HAL_I2C_Init+0xa2>
 8003a34:	2304      	movs	r3, #4
 8003a36:	e7a0      	b.n	800397a <HAL_I2C_Init+0xa2>
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e79e      	b.n	800397a <HAL_I2C_Init+0xa2>
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e79c      	b.n	800397a <HAL_I2C_Init+0xa2>
    return HAL_ERROR;
 8003a40:	2001      	movs	r0, #1
}
 8003a42:	4770      	bx	lr
    return HAL_ERROR;
 8003a44:	2001      	movs	r0, #1
 8003a46:	e7c4      	b.n	80039d2 <HAL_I2C_Init+0xfa>
 8003a48:	000186a0 	.word	0x000186a0
 8003a4c:	001e847f 	.word	0x001e847f
 8003a50:	431bde83 	.word	0x431bde83
 8003a54:	003d08ff 	.word	0x003d08ff
 8003a58:	10624dd3 	.word	0x10624dd3

08003a5c <HAL_I2C_Master_Transmit>:
{
 8003a5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003a60:	b085      	sub	sp, #20
 8003a62:	4604      	mov	r4, r0
 8003a64:	460f      	mov	r7, r1
 8003a66:	4691      	mov	r9, r2
 8003a68:	4698      	mov	r8, r3
 8003a6a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 8003a6c:	f7ff fa94 	bl	8002f98 <HAL_GetTick>
 8003a70:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a72:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 8003a76:	b2c0      	uxtb	r0, r0
 8003a78:	2820      	cmp	r0, #32
 8003a7a:	d004      	beq.n	8003a86 <HAL_I2C_Master_Transmit+0x2a>
    return HAL_BUSY;
 8003a7c:	2702      	movs	r7, #2
}
 8003a7e:	4638      	mov	r0, r7
 8003a80:	b005      	add	sp, #20
 8003a82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a86:	9500      	str	r5, [sp, #0]
 8003a88:	2319      	movs	r3, #25
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	4971      	ldr	r1, [pc, #452]	; (8003c54 <HAL_I2C_Master_Transmit+0x1f8>)
 8003a8e:	4620      	mov	r0, r4
 8003a90:	f7ff fcbf 	bl	8003412 <I2C_WaitOnFlagUntilTimeout>
 8003a94:	2800      	cmp	r0, #0
 8003a96:	f040 80d7 	bne.w	8003c48 <HAL_I2C_Master_Transmit+0x1ec>
    __HAL_LOCK(hi2c);
 8003a9a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	f000 80d4 	beq.w	8003c4c <HAL_I2C_Master_Transmit+0x1f0>
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003aaa:	6823      	ldr	r3, [r4, #0]
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	f012 0f01 	tst.w	r2, #1
 8003ab2:	d103      	bne.n	8003abc <HAL_I2C_Master_Transmit+0x60>
      __HAL_I2C_ENABLE(hi2c);
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	f042 0201 	orr.w	r2, r2, #1
 8003aba:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003abc:	6822      	ldr	r2, [r4, #0]
 8003abe:	6813      	ldr	r3, [r2, #0]
 8003ac0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003ac4:	6013      	str	r3, [r2, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003ac6:	2321      	movs	r3, #33	; 0x21
 8003ac8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003acc:	2310      	movs	r3, #16
 8003ace:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8003ad6:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003ada:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ade:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003ae0:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ae2:	4b5d      	ldr	r3, [pc, #372]	; (8003c58 <HAL_I2C_Master_Transmit+0x1fc>)
 8003ae4:	62e3      	str	r3, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003ae6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003ae8:	2b08      	cmp	r3, #8
 8003aea:	d00d      	beq.n	8003b08 <HAL_I2C_Master_Transmit+0xac>
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d00b      	beq.n	8003b08 <HAL_I2C_Master_Transmit+0xac>
 8003af0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003af4:	d008      	beq.n	8003b08 <HAL_I2C_Master_Transmit+0xac>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003af6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003af8:	2b12      	cmp	r3, #18
 8003afa:	d10a      	bne.n	8003b12 <HAL_I2C_Master_Transmit+0xb6>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003afc:	6822      	ldr	r2, [r4, #0]
 8003afe:	6813      	ldr	r3, [r2, #0]
 8003b00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b04:	6013      	str	r3, [r2, #0]
 8003b06:	e004      	b.n	8003b12 <HAL_I2C_Master_Transmit+0xb6>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b08:	6822      	ldr	r2, [r4, #0]
 8003b0a:	6813      	ldr	r3, [r2, #0]
 8003b0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b10:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b12:	9500      	str	r5, [sp, #0]
 8003b14:	4633      	mov	r3, r6
 8003b16:	2200      	movs	r2, #0
 8003b18:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003b1c:	4620      	mov	r0, r4
 8003b1e:	f7ff fc78 	bl	8003412 <I2C_WaitOnFlagUntilTimeout>
 8003b22:	b9d0      	cbnz	r0, 8003b5a <HAL_I2C_Master_Transmit+0xfe>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b24:	6923      	ldr	r3, [r4, #16]
 8003b26:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b2a:	d120      	bne.n	8003b6e <HAL_I2C_Master_Transmit+0x112>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003b2c:	6823      	ldr	r3, [r4, #0]
 8003b2e:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
 8003b32:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b34:	462b      	mov	r3, r5
 8003b36:	4632      	mov	r2, r6
 8003b38:	4948      	ldr	r1, [pc, #288]	; (8003c5c <HAL_I2C_Master_Transmit+0x200>)
 8003b3a:	4620      	mov	r0, r4
 8003b3c:	f7ff fcac 	bl	8003498 <I2C_WaitOnMasterAddressFlagUntilTimeout>
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003b40:	4607      	mov	r7, r0
 8003b42:	2800      	cmp	r0, #0
 8003b44:	f040 8084 	bne.w	8003c50 <HAL_I2C_Master_Transmit+0x1f4>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b48:	2300      	movs	r3, #0
 8003b4a:	9303      	str	r3, [sp, #12]
 8003b4c:	6823      	ldr	r3, [r4, #0]
 8003b4e:	695a      	ldr	r2, [r3, #20]
 8003b50:	9203      	str	r2, [sp, #12]
 8003b52:	699b      	ldr	r3, [r3, #24]
 8003b54:	9303      	str	r3, [sp, #12]
 8003b56:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 8003b58:	e02f      	b.n	8003bba <HAL_I2C_Master_Transmit+0x15e>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b5a:	6823      	ldr	r3, [r4, #0]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003b62:	d002      	beq.n	8003b6a <HAL_I2C_Master_Transmit+0x10e>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b68:	6423      	str	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8003b6a:	2701      	movs	r7, #1
 8003b6c:	e787      	b.n	8003a7e <HAL_I2C_Master_Transmit+0x22>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003b6e:	6822      	ldr	r2, [r4, #0]
 8003b70:	11fb      	asrs	r3, r7, #7
 8003b72:	f003 0306 	and.w	r3, r3, #6
 8003b76:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8003b7a:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003b7c:	462b      	mov	r3, r5
 8003b7e:	4632      	mov	r2, r6
 8003b80:	4937      	ldr	r1, [pc, #220]	; (8003c60 <HAL_I2C_Master_Transmit+0x204>)
 8003b82:	4620      	mov	r0, r4
 8003b84:	f7ff fc88 	bl	8003498 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b88:	2800      	cmp	r0, #0
 8003b8a:	d1ee      	bne.n	8003b6a <HAL_I2C_Master_Transmit+0x10e>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003b8c:	6823      	ldr	r3, [r4, #0]
 8003b8e:	b2ff      	uxtb	r7, r7
 8003b90:	611f      	str	r7, [r3, #16]
 8003b92:	e7cf      	b.n	8003b34 <HAL_I2C_Master_Transmit+0xd8>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b94:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003b96:	2b04      	cmp	r3, #4
 8003b98:	d001      	beq.n	8003b9e <HAL_I2C_Master_Transmit+0x142>
        return HAL_ERROR;
 8003b9a:	2701      	movs	r7, #1
 8003b9c:	e76f      	b.n	8003a7e <HAL_I2C_Master_Transmit+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b9e:	6822      	ldr	r2, [r4, #0]
 8003ba0:	6813      	ldr	r3, [r2, #0]
 8003ba2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ba6:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 8003ba8:	2701      	movs	r7, #1
 8003baa:	e768      	b.n	8003a7e <HAL_I2C_Master_Transmit+0x22>
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bac:	462a      	mov	r2, r5
 8003bae:	4631      	mov	r1, r6
 8003bb0:	4620      	mov	r0, r4
 8003bb2:	f7ff fe1f 	bl	80037f4 <I2C_WaitOnBTFFlagUntilTimeout>
 8003bb6:	2800      	cmp	r0, #0
 8003bb8:	d12c      	bne.n	8003c14 <HAL_I2C_Master_Transmit+0x1b8>
    while (hi2c->XferSize > 0U)
 8003bba:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d035      	beq.n	8003c2c <HAL_I2C_Master_Transmit+0x1d0>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bc0:	462a      	mov	r2, r5
 8003bc2:	4631      	mov	r1, r6
 8003bc4:	4620      	mov	r0, r4
 8003bc6:	f7ff fcc4 	bl	8003552 <I2C_WaitOnTXEFlagUntilTimeout>
 8003bca:	2800      	cmp	r0, #0
 8003bcc:	d1e2      	bne.n	8003b94 <HAL_I2C_Master_Transmit+0x138>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003bce:	6823      	ldr	r3, [r4, #0]
 8003bd0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003bd2:	7812      	ldrb	r2, [r2, #0]
 8003bd4:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003bd6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003bd8:	1c53      	adds	r3, r2, #1
 8003bda:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003bdc:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8003bde:	3901      	subs	r1, #1
 8003be0:	b289      	uxth	r1, r1
 8003be2:	8561      	strh	r1, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003be4:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 8003be6:	3901      	subs	r1, #1
 8003be8:	b289      	uxth	r1, r1
 8003bea:	8521      	strh	r1, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003bec:	6823      	ldr	r3, [r4, #0]
 8003bee:	6958      	ldr	r0, [r3, #20]
 8003bf0:	f010 0f04 	tst.w	r0, #4
 8003bf4:	d0da      	beq.n	8003bac <HAL_I2C_Master_Transmit+0x150>
 8003bf6:	2900      	cmp	r1, #0
 8003bf8:	d0d8      	beq.n	8003bac <HAL_I2C_Master_Transmit+0x150>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003bfa:	7852      	ldrb	r2, [r2, #1]
 8003bfc:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003bfe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003c00:	3301      	adds	r3, #1
 8003c02:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8003c04:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003c06:	3b01      	subs	r3, #1
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8003c0c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003c0e:	3b01      	subs	r3, #1
 8003c10:	8523      	strh	r3, [r4, #40]	; 0x28
 8003c12:	e7cb      	b.n	8003bac <HAL_I2C_Master_Transmit+0x150>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c14:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003c16:	2b04      	cmp	r3, #4
 8003c18:	d001      	beq.n	8003c1e <HAL_I2C_Master_Transmit+0x1c2>
        return HAL_ERROR;
 8003c1a:	2701      	movs	r7, #1
 8003c1c:	e72f      	b.n	8003a7e <HAL_I2C_Master_Transmit+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c1e:	6822      	ldr	r2, [r4, #0]
 8003c20:	6813      	ldr	r3, [r2, #0]
 8003c22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c26:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 8003c28:	2701      	movs	r7, #1
 8003c2a:	e728      	b.n	8003a7e <HAL_I2C_Master_Transmit+0x22>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c2c:	6822      	ldr	r2, [r4, #0]
 8003c2e:	6813      	ldr	r3, [r2, #0]
 8003c30:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c34:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8003c36:	2320      	movs	r3, #32
 8003c38:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8003c42:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8003c46:	e71a      	b.n	8003a7e <HAL_I2C_Master_Transmit+0x22>
      return HAL_BUSY;
 8003c48:	2702      	movs	r7, #2
 8003c4a:	e718      	b.n	8003a7e <HAL_I2C_Master_Transmit+0x22>
    __HAL_LOCK(hi2c);
 8003c4c:	2702      	movs	r7, #2
 8003c4e:	e716      	b.n	8003a7e <HAL_I2C_Master_Transmit+0x22>
      return HAL_ERROR;
 8003c50:	2701      	movs	r7, #1
 8003c52:	e714      	b.n	8003a7e <HAL_I2C_Master_Transmit+0x22>
 8003c54:	00100002 	.word	0x00100002
 8003c58:	ffff0000 	.word	0xffff0000
 8003c5c:	00010002 	.word	0x00010002
 8003c60:	00010008 	.word	0x00010008

08003c64 <HAL_I2C_Master_Receive>:
{
 8003c64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c68:	b088      	sub	sp, #32
 8003c6a:	4604      	mov	r4, r0
 8003c6c:	460f      	mov	r7, r1
 8003c6e:	4691      	mov	r9, r2
 8003c70:	4698      	mov	r8, r3
 8003c72:	9e10      	ldr	r6, [sp, #64]	; 0x40
  __IO uint32_t count = 0U;
 8003c74:	2300      	movs	r3, #0
 8003c76:	9307      	str	r3, [sp, #28]
  uint32_t tickstart = HAL_GetTick();
 8003c78:	f7ff f98e 	bl	8002f98 <HAL_GetTick>
 8003c7c:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c7e:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 8003c82:	b2c0      	uxtb	r0, r0
 8003c84:	2820      	cmp	r0, #32
 8003c86:	d004      	beq.n	8003c92 <HAL_I2C_Master_Receive+0x2e>
    return HAL_BUSY;
 8003c88:	2702      	movs	r7, #2
}
 8003c8a:	4638      	mov	r0, r7
 8003c8c:	b008      	add	sp, #32
 8003c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c92:	9500      	str	r5, [sp, #0]
 8003c94:	2319      	movs	r3, #25
 8003c96:	2201      	movs	r2, #1
 8003c98:	498a      	ldr	r1, [pc, #552]	; (8003ec4 <HAL_I2C_Master_Receive+0x260>)
 8003c9a:	4620      	mov	r0, r4
 8003c9c:	f7ff fbb9 	bl	8003412 <I2C_WaitOnFlagUntilTimeout>
 8003ca0:	2800      	cmp	r0, #0
 8003ca2:	f040 81f2 	bne.w	800408a <HAL_I2C_Master_Receive+0x426>
    __HAL_LOCK(hi2c);
 8003ca6:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	f000 81ef 	beq.w	800408e <HAL_I2C_Master_Receive+0x42a>
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003cb6:	6823      	ldr	r3, [r4, #0]
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	f012 0f01 	tst.w	r2, #1
 8003cbe:	d103      	bne.n	8003cc8 <HAL_I2C_Master_Receive+0x64>
      __HAL_I2C_ENABLE(hi2c);
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	f042 0201 	orr.w	r2, r2, #1
 8003cc6:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003cc8:	6822      	ldr	r2, [r4, #0]
 8003cca:	6813      	ldr	r3, [r2, #0]
 8003ccc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003cd0:	6013      	str	r3, [r2, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003cd2:	2322      	movs	r3, #34	; 0x22
 8003cd4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003cd8:	2310      	movs	r3, #16
 8003cda:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8003ce2:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003ce6:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003cea:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003cec:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003cee:	4b76      	ldr	r3, [pc, #472]	; (8003ec8 <HAL_I2C_Master_Receive+0x264>)
 8003cf0:	62e3      	str	r3, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003cf2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cf4:	6821      	ldr	r1, [r4, #0]
 8003cf6:	680b      	ldr	r3, [r1, #0]
 8003cf8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003cfc:	600b      	str	r3, [r1, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003cfe:	2a08      	cmp	r2, #8
 8003d00:	d00d      	beq.n	8003d1e <HAL_I2C_Master_Receive+0xba>
 8003d02:	2a01      	cmp	r2, #1
 8003d04:	d00b      	beq.n	8003d1e <HAL_I2C_Master_Receive+0xba>
 8003d06:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8003d0a:	d008      	beq.n	8003d1e <HAL_I2C_Master_Receive+0xba>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003d0c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003d0e:	2b11      	cmp	r3, #17
 8003d10:	d10a      	bne.n	8003d28 <HAL_I2C_Master_Receive+0xc4>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d12:	6822      	ldr	r2, [r4, #0]
 8003d14:	6813      	ldr	r3, [r2, #0]
 8003d16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d1a:	6013      	str	r3, [r2, #0]
 8003d1c:	e004      	b.n	8003d28 <HAL_I2C_Master_Receive+0xc4>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d1e:	6822      	ldr	r2, [r4, #0]
 8003d20:	6813      	ldr	r3, [r2, #0]
 8003d22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d26:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d28:	9500      	str	r5, [sp, #0]
 8003d2a:	4633      	mov	r3, r6
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003d32:	4620      	mov	r0, r4
 8003d34:	f7ff fb6d 	bl	8003412 <I2C_WaitOnFlagUntilTimeout>
 8003d38:	bb58      	cbnz	r0, 8003d92 <HAL_I2C_Master_Receive+0x12e>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d3a:	6923      	ldr	r3, [r4, #16]
 8003d3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d40:	d130      	bne.n	8003da4 <HAL_I2C_Master_Receive+0x140>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003d42:	6823      	ldr	r3, [r4, #0]
 8003d44:	f047 0701 	orr.w	r7, r7, #1
 8003d48:	b2ff      	uxtb	r7, r7
 8003d4a:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d4c:	462b      	mov	r3, r5
 8003d4e:	4632      	mov	r2, r6
 8003d50:	495e      	ldr	r1, [pc, #376]	; (8003ecc <HAL_I2C_Master_Receive+0x268>)
 8003d52:	4620      	mov	r0, r4
 8003d54:	f7ff fba0 	bl	8003498 <I2C_WaitOnMasterAddressFlagUntilTimeout>
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003d58:	4607      	mov	r7, r0
 8003d5a:	2800      	cmp	r0, #0
 8003d5c:	f040 8199 	bne.w	8004092 <HAL_I2C_Master_Receive+0x42e>
    if (hi2c->XferSize == 0U)
 8003d60:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d15c      	bne.n	8003e20 <HAL_I2C_Master_Receive+0x1bc>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d66:	9302      	str	r3, [sp, #8]
 8003d68:	6823      	ldr	r3, [r4, #0]
 8003d6a:	695a      	ldr	r2, [r3, #20]
 8003d6c:	9202      	str	r2, [sp, #8]
 8003d6e:	699a      	ldr	r2, [r3, #24]
 8003d70:	9202      	str	r2, [sp, #8]
 8003d72:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d7a:	601a      	str	r2, [r3, #0]
    while (hi2c->XferSize > 0U)
 8003d7c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	f000 817a 	beq.w	8004078 <HAL_I2C_Master_Receive+0x414>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d84:	f8df 8148 	ldr.w	r8, [pc, #328]	; 8003ed0 <HAL_I2C_Master_Receive+0x26c>
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003d88:	f8df a148 	ldr.w	sl, [pc, #328]	; 8003ed4 <HAL_I2C_Master_Receive+0x270>
 8003d8c:	f8df 9148 	ldr.w	r9, [pc, #328]	; 8003ed8 <HAL_I2C_Master_Receive+0x274>
 8003d90:	e138      	b.n	8004004 <HAL_I2C_Master_Receive+0x3a0>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d92:	6823      	ldr	r3, [r4, #0]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003d9a:	d012      	beq.n	8003dc2 <HAL_I2C_Master_Receive+0x15e>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003da0:	6423      	str	r3, [r4, #64]	; 0x40
 8003da2:	e00e      	b.n	8003dc2 <HAL_I2C_Master_Receive+0x15e>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003da4:	ea4f 18e7 	mov.w	r8, r7, asr #7
 8003da8:	f008 0806 	and.w	r8, r8, #6
 8003dac:	6823      	ldr	r3, [r4, #0]
 8003dae:	f048 02f0 	orr.w	r2, r8, #240	; 0xf0
 8003db2:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003db4:	462b      	mov	r3, r5
 8003db6:	4632      	mov	r2, r6
 8003db8:	4948      	ldr	r1, [pc, #288]	; (8003edc <HAL_I2C_Master_Receive+0x278>)
 8003dba:	4620      	mov	r0, r4
 8003dbc:	f7ff fb6c 	bl	8003498 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003dc0:	b108      	cbz	r0, 8003dc6 <HAL_I2C_Master_Receive+0x162>
      return HAL_ERROR;
 8003dc2:	2701      	movs	r7, #1
 8003dc4:	e761      	b.n	8003c8a <HAL_I2C_Master_Receive+0x26>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003dc6:	6823      	ldr	r3, [r4, #0]
 8003dc8:	b2ff      	uxtb	r7, r7
 8003dca:	611f      	str	r7, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003dcc:	462b      	mov	r3, r5
 8003dce:	4632      	mov	r2, r6
 8003dd0:	493e      	ldr	r1, [pc, #248]	; (8003ecc <HAL_I2C_Master_Receive+0x268>)
 8003dd2:	4620      	mov	r0, r4
 8003dd4:	f7ff fb60 	bl	8003498 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003dd8:	2800      	cmp	r0, #0
 8003dda:	d1f2      	bne.n	8003dc2 <HAL_I2C_Master_Receive+0x15e>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ddc:	2200      	movs	r2, #0
 8003dde:	9206      	str	r2, [sp, #24]
 8003de0:	6823      	ldr	r3, [r4, #0]
 8003de2:	6959      	ldr	r1, [r3, #20]
 8003de4:	9106      	str	r1, [sp, #24]
 8003de6:	6999      	ldr	r1, [r3, #24]
 8003de8:	9106      	str	r1, [sp, #24]
 8003dea:	9906      	ldr	r1, [sp, #24]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003dec:	6819      	ldr	r1, [r3, #0]
 8003dee:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8003df2:	6019      	str	r1, [r3, #0]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003df4:	9500      	str	r5, [sp, #0]
 8003df6:	4633      	mov	r3, r6
 8003df8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003dfc:	4620      	mov	r0, r4
 8003dfe:	f7ff fb08 	bl	8003412 <I2C_WaitOnFlagUntilTimeout>
 8003e02:	b920      	cbnz	r0, 8003e0e <HAL_I2C_Master_Receive+0x1aa>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003e04:	6822      	ldr	r2, [r4, #0]
 8003e06:	f048 03f1 	orr.w	r3, r8, #241	; 0xf1
 8003e0a:	6113      	str	r3, [r2, #16]
 8003e0c:	e79e      	b.n	8003d4c <HAL_I2C_Master_Receive+0xe8>
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e0e:	6823      	ldr	r3, [r4, #0]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003e16:	d0d4      	beq.n	8003dc2 <HAL_I2C_Master_Receive+0x15e>
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003e1c:	6423      	str	r3, [r4, #64]	; 0x40
 8003e1e:	e7d0      	b.n	8003dc2 <HAL_I2C_Master_Receive+0x15e>
    else if (hi2c->XferSize == 1U)
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d00f      	beq.n	8003e44 <HAL_I2C_Master_Receive+0x1e0>
    else if (hi2c->XferSize == 2U)
 8003e24:	2b02      	cmp	r3, #2
 8003e26:	d021      	beq.n	8003e6c <HAL_I2C_Master_Receive+0x208>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e28:	6822      	ldr	r2, [r4, #0]
 8003e2a:	6813      	ldr	r3, [r2, #0]
 8003e2c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e30:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e32:	2300      	movs	r3, #0
 8003e34:	9305      	str	r3, [sp, #20]
 8003e36:	6823      	ldr	r3, [r4, #0]
 8003e38:	695a      	ldr	r2, [r3, #20]
 8003e3a:	9205      	str	r2, [sp, #20]
 8003e3c:	699b      	ldr	r3, [r3, #24]
 8003e3e:	9305      	str	r3, [sp, #20]
 8003e40:	9b05      	ldr	r3, [sp, #20]
 8003e42:	e79b      	b.n	8003d7c <HAL_I2C_Master_Receive+0x118>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e44:	6822      	ldr	r2, [r4, #0]
 8003e46:	6813      	ldr	r3, [r2, #0]
 8003e48:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e4c:	6013      	str	r3, [r2, #0]
 8003e4e:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e50:	2300      	movs	r3, #0
 8003e52:	9303      	str	r3, [sp, #12]
 8003e54:	6823      	ldr	r3, [r4, #0]
 8003e56:	695a      	ldr	r2, [r3, #20]
 8003e58:	9203      	str	r2, [sp, #12]
 8003e5a:	699a      	ldr	r2, [r3, #24]
 8003e5c:	9203      	str	r2, [sp, #12]
 8003e5e:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e66:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003e68:	b662      	cpsie	i
}
 8003e6a:	e787      	b.n	8003d7c <HAL_I2C_Master_Receive+0x118>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e6c:	6822      	ldr	r2, [r4, #0]
 8003e6e:	6813      	ldr	r3, [r2, #0]
 8003e70:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003e74:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003e76:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e78:	2300      	movs	r3, #0
 8003e7a:	9304      	str	r3, [sp, #16]
 8003e7c:	6823      	ldr	r3, [r4, #0]
 8003e7e:	695a      	ldr	r2, [r3, #20]
 8003e80:	9204      	str	r2, [sp, #16]
 8003e82:	699a      	ldr	r2, [r3, #24]
 8003e84:	9204      	str	r2, [sp, #16]
 8003e86:	9a04      	ldr	r2, [sp, #16]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e8e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003e90:	b662      	cpsie	i
}
 8003e92:	e773      	b.n	8003d7c <HAL_I2C_Master_Receive+0x118>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e94:	462a      	mov	r2, r5
 8003e96:	4631      	mov	r1, r6
 8003e98:	4620      	mov	r0, r4
 8003e9a:	f7ff fcda 	bl	8003852 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003e9e:	2800      	cmp	r0, #0
 8003ea0:	f040 80f9 	bne.w	8004096 <HAL_I2C_Master_Receive+0x432>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ea4:	6823      	ldr	r3, [r4, #0]
 8003ea6:	691a      	ldr	r2, [r3, #16]
 8003ea8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003eaa:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8003eac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003eae:	3301      	adds	r3, #1
 8003eb0:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8003eb2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003eb4:	3b01      	subs	r3, #1
 8003eb6:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8003eb8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003eba:	3b01      	subs	r3, #1
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	8563      	strh	r3, [r4, #42]	; 0x2a
 8003ec0:	e09d      	b.n	8003ffe <HAL_I2C_Master_Receive+0x39a>
 8003ec2:	bf00      	nop
 8003ec4:	00100002 	.word	0x00100002
 8003ec8:	ffff0000 	.word	0xffff0000
 8003ecc:	00010002 	.word	0x00010002
 8003ed0:	00010004 	.word	0x00010004
 8003ed4:	20000000 	.word	0x20000000
 8003ed8:	14f8b589 	.word	0x14f8b589
 8003edc:	00010008 	.word	0x00010008
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ee0:	9500      	str	r5, [sp, #0]
 8003ee2:	4633      	mov	r3, r6
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	4641      	mov	r1, r8
 8003ee8:	4620      	mov	r0, r4
 8003eea:	f7ff fa92 	bl	8003412 <I2C_WaitOnFlagUntilTimeout>
 8003eee:	2800      	cmp	r0, #0
 8003ef0:	f040 80d5 	bne.w	800409e <HAL_I2C_Master_Receive+0x43a>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ef4:	6822      	ldr	r2, [r4, #0]
 8003ef6:	6813      	ldr	r3, [r2, #0]
 8003ef8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003efc:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003efe:	b672      	cpsid	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f00:	6823      	ldr	r3, [r4, #0]
 8003f02:	691a      	ldr	r2, [r3, #16]
 8003f04:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003f06:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8003f08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003f0a:	3301      	adds	r3, #1
 8003f0c:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8003f0e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003f10:	3b01      	subs	r3, #1
 8003f12:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8003f14:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003f16:	3b01      	subs	r3, #1
 8003f18:	b29b      	uxth	r3, r3
 8003f1a:	8563      	strh	r3, [r4, #42]	; 0x2a
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003f1c:	f8da 3000 	ldr.w	r3, [sl]
 8003f20:	08db      	lsrs	r3, r3, #3
 8003f22:	fba9 2303 	umull	r2, r3, r9, r3
 8003f26:	0a1b      	lsrs	r3, r3, #8
 8003f28:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003f2c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8003f30:	9307      	str	r3, [sp, #28]
            count--;
 8003f32:	9907      	ldr	r1, [sp, #28]
 8003f34:	3901      	subs	r1, #1
 8003f36:	9107      	str	r1, [sp, #28]
            if (count == 0U)
 8003f38:	9b07      	ldr	r3, [sp, #28]
 8003f3a:	b333      	cbz	r3, 8003f8a <HAL_I2C_Master_Receive+0x326>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003f3c:	6823      	ldr	r3, [r4, #0]
 8003f3e:	695a      	ldr	r2, [r3, #20]
 8003f40:	f012 0f04 	tst.w	r2, #4
 8003f44:	d0f5      	beq.n	8003f32 <HAL_I2C_Master_Receive+0x2ce>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f4c:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f4e:	6823      	ldr	r3, [r4, #0]
 8003f50:	691a      	ldr	r2, [r3, #16]
 8003f52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003f54:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8003f56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003f58:	3301      	adds	r3, #1
 8003f5a:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8003f5c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003f5e:	3b01      	subs	r3, #1
 8003f60:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8003f62:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003f64:	3b01      	subs	r3, #1
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	8563      	strh	r3, [r4, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003f6a:	b662      	cpsie	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f6c:	6823      	ldr	r3, [r4, #0]
 8003f6e:	691a      	ldr	r2, [r3, #16]
 8003f70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003f72:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8003f74:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003f76:	3301      	adds	r3, #1
 8003f78:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8003f7a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003f7c:	3b01      	subs	r3, #1
 8003f7e:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8003f80:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003f82:	3b01      	subs	r3, #1
 8003f84:	b29b      	uxth	r3, r3
 8003f86:	8563      	strh	r3, [r4, #42]	; 0x2a
 8003f88:	e039      	b.n	8003ffe <HAL_I2C_Master_Receive+0x39a>
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003f8a:	6323      	str	r3, [r4, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003f8c:	2220      	movs	r2, #32
 8003f8e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f92:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f96:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003f98:	f042 0220 	orr.w	r2, r2, #32
 8003f9c:	6422      	str	r2, [r4, #64]	; 0x40
 8003f9e:	b662      	cpsie	i
              __HAL_UNLOCK(hi2c);
 8003fa0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
              return HAL_ERROR;
 8003fa4:	2701      	movs	r7, #1
 8003fa6:	e670      	b.n	8003c8a <HAL_I2C_Master_Receive+0x26>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fa8:	462a      	mov	r2, r5
 8003faa:	4631      	mov	r1, r6
 8003fac:	4620      	mov	r0, r4
 8003fae:	f7ff fc50 	bl	8003852 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003fb2:	2800      	cmp	r0, #0
 8003fb4:	d175      	bne.n	80040a2 <HAL_I2C_Master_Receive+0x43e>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fb6:	6823      	ldr	r3, [r4, #0]
 8003fb8:	691a      	ldr	r2, [r3, #16]
 8003fba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003fbc:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003fbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003fc0:	3301      	adds	r3, #1
 8003fc2:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8003fc4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003fc6:	3b01      	subs	r3, #1
 8003fc8:	b29b      	uxth	r3, r3
 8003fca:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8003fcc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003fce:	3a01      	subs	r2, #1
 8003fd0:	b292      	uxth	r2, r2
 8003fd2:	8562      	strh	r2, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003fd4:	6822      	ldr	r2, [r4, #0]
 8003fd6:	6951      	ldr	r1, [r2, #20]
 8003fd8:	f011 0f04 	tst.w	r1, #4
 8003fdc:	d00f      	beq.n	8003ffe <HAL_I2C_Master_Receive+0x39a>
          if (hi2c->XferSize == 3U)
 8003fde:	2b03      	cmp	r3, #3
 8003fe0:	d045      	beq.n	800406e <HAL_I2C_Master_Receive+0x40a>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fe2:	6823      	ldr	r3, [r4, #0]
 8003fe4:	691a      	ldr	r2, [r3, #16]
 8003fe6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003fe8:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8003fea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003fec:	3301      	adds	r3, #1
 8003fee:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8003ff0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003ff2:	3b01      	subs	r3, #1
 8003ff4:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8003ff6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003ff8:	3b01      	subs	r3, #1
 8003ffa:	b29b      	uxth	r3, r3
 8003ffc:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003ffe:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004000:	2b00      	cmp	r3, #0
 8004002:	d039      	beq.n	8004078 <HAL_I2C_Master_Receive+0x414>
      if (hi2c->XferSize <= 3U)
 8004004:	2b03      	cmp	r3, #3
 8004006:	d8cf      	bhi.n	8003fa8 <HAL_I2C_Master_Receive+0x344>
        if (hi2c->XferSize == 1U)
 8004008:	2b01      	cmp	r3, #1
 800400a:	f43f af43 	beq.w	8003e94 <HAL_I2C_Master_Receive+0x230>
        else if (hi2c->XferSize == 2U)
 800400e:	2b02      	cmp	r3, #2
 8004010:	f47f af66 	bne.w	8003ee0 <HAL_I2C_Master_Receive+0x27c>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004014:	9500      	str	r5, [sp, #0]
 8004016:	4633      	mov	r3, r6
 8004018:	2200      	movs	r2, #0
 800401a:	4641      	mov	r1, r8
 800401c:	4620      	mov	r0, r4
 800401e:	f7ff f9f8 	bl	8003412 <I2C_WaitOnFlagUntilTimeout>
 8004022:	2800      	cmp	r0, #0
 8004024:	d139      	bne.n	800409a <HAL_I2C_Master_Receive+0x436>
  __ASM volatile ("cpsid i" : : : "memory");
 8004026:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004028:	6822      	ldr	r2, [r4, #0]
 800402a:	6813      	ldr	r3, [r2, #0]
 800402c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004030:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004032:	6823      	ldr	r3, [r4, #0]
 8004034:	691a      	ldr	r2, [r3, #16]
 8004036:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004038:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 800403a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800403c:	3301      	adds	r3, #1
 800403e:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8004040:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004042:	3b01      	subs	r3, #1
 8004044:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8004046:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004048:	3b01      	subs	r3, #1
 800404a:	b29b      	uxth	r3, r3
 800404c:	8563      	strh	r3, [r4, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800404e:	b662      	cpsie	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004050:	6823      	ldr	r3, [r4, #0]
 8004052:	691a      	ldr	r2, [r3, #16]
 8004054:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004056:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8004058:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800405a:	3301      	adds	r3, #1
 800405c:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800405e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004060:	3b01      	subs	r3, #1
 8004062:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8004064:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004066:	3b01      	subs	r3, #1
 8004068:	b29b      	uxth	r3, r3
 800406a:	8563      	strh	r3, [r4, #42]	; 0x2a
 800406c:	e7c7      	b.n	8003ffe <HAL_I2C_Master_Receive+0x39a>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800406e:	6813      	ldr	r3, [r2, #0]
 8004070:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004074:	6013      	str	r3, [r2, #0]
 8004076:	e7b4      	b.n	8003fe2 <HAL_I2C_Master_Receive+0x37e>
    hi2c->State = HAL_I2C_STATE_READY;
 8004078:	2320      	movs	r3, #32
 800407a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800407e:	2300      	movs	r3, #0
 8004080:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8004084:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8004088:	e5ff      	b.n	8003c8a <HAL_I2C_Master_Receive+0x26>
      return HAL_BUSY;
 800408a:	2702      	movs	r7, #2
 800408c:	e5fd      	b.n	8003c8a <HAL_I2C_Master_Receive+0x26>
    __HAL_LOCK(hi2c);
 800408e:	2702      	movs	r7, #2
 8004090:	e5fb      	b.n	8003c8a <HAL_I2C_Master_Receive+0x26>
      return HAL_ERROR;
 8004092:	2701      	movs	r7, #1
 8004094:	e5f9      	b.n	8003c8a <HAL_I2C_Master_Receive+0x26>
            return HAL_ERROR;
 8004096:	2701      	movs	r7, #1
 8004098:	e5f7      	b.n	8003c8a <HAL_I2C_Master_Receive+0x26>
            return HAL_ERROR;
 800409a:	2701      	movs	r7, #1
 800409c:	e5f5      	b.n	8003c8a <HAL_I2C_Master_Receive+0x26>
            return HAL_ERROR;
 800409e:	2701      	movs	r7, #1
 80040a0:	e5f3      	b.n	8003c8a <HAL_I2C_Master_Receive+0x26>
          return HAL_ERROR;
 80040a2:	2701      	movs	r7, #1
 80040a4:	e5f1      	b.n	8003c8a <HAL_I2C_Master_Receive+0x26>
 80040a6:	bf00      	nop

080040a8 <HAL_I2C_Mem_Write>:
{
 80040a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80040ac:	b083      	sub	sp, #12
 80040ae:	4604      	mov	r4, r0
 80040b0:	460f      	mov	r7, r1
 80040b2:	4690      	mov	r8, r2
 80040b4:	4699      	mov	r9, r3
 80040b6:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 80040b8:	f7fe ff6e 	bl	8002f98 <HAL_GetTick>
 80040bc:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80040be:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 80040c2:	b2c0      	uxtb	r0, r0
 80040c4:	2820      	cmp	r0, #32
 80040c6:	d003      	beq.n	80040d0 <HAL_I2C_Mem_Write+0x28>
    return HAL_BUSY;
 80040c8:	2002      	movs	r0, #2
}
 80040ca:	b003      	add	sp, #12
 80040cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80040d0:	9500      	str	r5, [sp, #0]
 80040d2:	2319      	movs	r3, #25
 80040d4:	2201      	movs	r2, #1
 80040d6:	494d      	ldr	r1, [pc, #308]	; (800420c <HAL_I2C_Mem_Write+0x164>)
 80040d8:	4620      	mov	r0, r4
 80040da:	f7ff f99a 	bl	8003412 <I2C_WaitOnFlagUntilTimeout>
 80040de:	2800      	cmp	r0, #0
 80040e0:	f040 808d 	bne.w	80041fe <HAL_I2C_Mem_Write+0x156>
    __HAL_LOCK(hi2c);
 80040e4:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	f000 808a 	beq.w	8004202 <HAL_I2C_Mem_Write+0x15a>
 80040ee:	2301      	movs	r3, #1
 80040f0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80040f4:	6823      	ldr	r3, [r4, #0]
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	f012 0f01 	tst.w	r2, #1
 80040fc:	d103      	bne.n	8004106 <HAL_I2C_Mem_Write+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	f042 0201 	orr.w	r2, r2, #1
 8004104:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004106:	6822      	ldr	r2, [r4, #0]
 8004108:	6813      	ldr	r3, [r2, #0]
 800410a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800410e:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004110:	2321      	movs	r3, #33	; 0x21
 8004112:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004116:	2340      	movs	r3, #64	; 0x40
 8004118:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800411c:	2300      	movs	r3, #0
 800411e:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8004120:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004122:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004124:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8004128:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800412a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800412c:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800412e:	4b38      	ldr	r3, [pc, #224]	; (8004210 <HAL_I2C_Mem_Write+0x168>)
 8004130:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004132:	9501      	str	r5, [sp, #4]
 8004134:	9600      	str	r6, [sp, #0]
 8004136:	464b      	mov	r3, r9
 8004138:	4642      	mov	r2, r8
 800413a:	4639      	mov	r1, r7
 800413c:	4620      	mov	r0, r4
 800413e:	f7ff fa37 	bl	80035b0 <I2C_RequestMemoryWrite>
 8004142:	2800      	cmp	r0, #0
 8004144:	d15f      	bne.n	8004206 <HAL_I2C_Mem_Write+0x15e>
    while (hi2c->XferSize > 0U)
 8004146:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004148:	b9d3      	cbnz	r3, 8004180 <HAL_I2C_Mem_Write+0xd8>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800414a:	462a      	mov	r2, r5
 800414c:	4631      	mov	r1, r6
 800414e:	4620      	mov	r0, r4
 8004150:	f7ff fb50 	bl	80037f4 <I2C_WaitOnBTFFlagUntilTimeout>
 8004154:	2800      	cmp	r0, #0
 8004156:	d044      	beq.n	80041e2 <HAL_I2C_Mem_Write+0x13a>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004158:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800415a:	2b04      	cmp	r3, #4
 800415c:	d03a      	beq.n	80041d4 <HAL_I2C_Mem_Write+0x12c>
      return HAL_ERROR;
 800415e:	2001      	movs	r0, #1
 8004160:	e7b3      	b.n	80040ca <HAL_I2C_Mem_Write+0x22>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004162:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004164:	2b04      	cmp	r3, #4
 8004166:	d001      	beq.n	800416c <HAL_I2C_Mem_Write+0xc4>
        return HAL_ERROR;
 8004168:	2001      	movs	r0, #1
 800416a:	e7ae      	b.n	80040ca <HAL_I2C_Mem_Write+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800416c:	6822      	ldr	r2, [r4, #0]
 800416e:	6813      	ldr	r3, [r2, #0]
 8004170:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004174:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 8004176:	2001      	movs	r0, #1
 8004178:	e7a7      	b.n	80040ca <HAL_I2C_Mem_Write+0x22>
    while (hi2c->XferSize > 0U)
 800417a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800417c:	2b00      	cmp	r3, #0
 800417e:	d0e4      	beq.n	800414a <HAL_I2C_Mem_Write+0xa2>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004180:	462a      	mov	r2, r5
 8004182:	4631      	mov	r1, r6
 8004184:	4620      	mov	r0, r4
 8004186:	f7ff f9e4 	bl	8003552 <I2C_WaitOnTXEFlagUntilTimeout>
 800418a:	2800      	cmp	r0, #0
 800418c:	d1e9      	bne.n	8004162 <HAL_I2C_Mem_Write+0xba>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800418e:	6823      	ldr	r3, [r4, #0]
 8004190:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004192:	7812      	ldrb	r2, [r2, #0]
 8004194:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004196:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004198:	1c43      	adds	r3, r0, #1
 800419a:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800419c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800419e:	3b01      	subs	r3, #1
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80041a4:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 80041a6:	3901      	subs	r1, #1
 80041a8:	b289      	uxth	r1, r1
 80041aa:	8561      	strh	r1, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80041ac:	6822      	ldr	r2, [r4, #0]
 80041ae:	6951      	ldr	r1, [r2, #20]
 80041b0:	f011 0f04 	tst.w	r1, #4
 80041b4:	d0e1      	beq.n	800417a <HAL_I2C_Mem_Write+0xd2>
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d0c7      	beq.n	800414a <HAL_I2C_Mem_Write+0xa2>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041ba:	7843      	ldrb	r3, [r0, #1]
 80041bc:	6113      	str	r3, [r2, #16]
        hi2c->pBuffPtr++;
 80041be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80041c0:	3301      	adds	r3, #1
 80041c2:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 80041c4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80041c6:	3b01      	subs	r3, #1
 80041c8:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 80041ca:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80041cc:	3b01      	subs	r3, #1
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	8563      	strh	r3, [r4, #42]	; 0x2a
 80041d2:	e7d2      	b.n	800417a <HAL_I2C_Mem_Write+0xd2>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041d4:	6822      	ldr	r2, [r4, #0]
 80041d6:	6813      	ldr	r3, [r2, #0]
 80041d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80041dc:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 80041de:	2001      	movs	r0, #1
 80041e0:	e773      	b.n	80040ca <HAL_I2C_Mem_Write+0x22>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041e2:	6822      	ldr	r2, [r4, #0]
 80041e4:	6813      	ldr	r3, [r2, #0]
 80041e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80041ea:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80041ec:	2320      	movs	r3, #32
 80041ee:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80041f2:	2300      	movs	r3, #0
 80041f4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 80041f8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 80041fc:	e765      	b.n	80040ca <HAL_I2C_Mem_Write+0x22>
      return HAL_BUSY;
 80041fe:	2002      	movs	r0, #2
 8004200:	e763      	b.n	80040ca <HAL_I2C_Mem_Write+0x22>
    __HAL_LOCK(hi2c);
 8004202:	2002      	movs	r0, #2
 8004204:	e761      	b.n	80040ca <HAL_I2C_Mem_Write+0x22>
      return HAL_ERROR;
 8004206:	2001      	movs	r0, #1
 8004208:	e75f      	b.n	80040ca <HAL_I2C_Mem_Write+0x22>
 800420a:	bf00      	nop
 800420c:	00100002 	.word	0x00100002
 8004210:	ffff0000 	.word	0xffff0000

08004214 <HAL_I2C_Mem_Read>:
{
 8004214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004218:	b088      	sub	sp, #32
 800421a:	4604      	mov	r4, r0
 800421c:	460f      	mov	r7, r1
 800421e:	4690      	mov	r8, r2
 8004220:	4699      	mov	r9, r3
 8004222:	9e12      	ldr	r6, [sp, #72]	; 0x48
  __IO uint32_t count = 0U;
 8004224:	2300      	movs	r3, #0
 8004226:	9307      	str	r3, [sp, #28]
  uint32_t tickstart = HAL_GetTick();
 8004228:	f7fe feb6 	bl	8002f98 <HAL_GetTick>
 800422c:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800422e:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 8004232:	b2c0      	uxtb	r0, r0
 8004234:	2820      	cmp	r0, #32
 8004236:	d004      	beq.n	8004242 <HAL_I2C_Mem_Read+0x2e>
    return HAL_BUSY;
 8004238:	2702      	movs	r7, #2
}
 800423a:	4638      	mov	r0, r7
 800423c:	b008      	add	sp, #32
 800423e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004242:	9500      	str	r5, [sp, #0]
 8004244:	2319      	movs	r3, #25
 8004246:	2201      	movs	r2, #1
 8004248:	4983      	ldr	r1, [pc, #524]	; (8004458 <HAL_I2C_Mem_Read+0x244>)
 800424a:	4620      	mov	r0, r4
 800424c:	f7ff f8e1 	bl	8003412 <I2C_WaitOnFlagUntilTimeout>
 8004250:	2800      	cmp	r0, #0
 8004252:	f040 8172 	bne.w	800453a <HAL_I2C_Mem_Read+0x326>
    __HAL_LOCK(hi2c);
 8004256:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800425a:	2b01      	cmp	r3, #1
 800425c:	f000 816f 	beq.w	800453e <HAL_I2C_Mem_Read+0x32a>
 8004260:	2301      	movs	r3, #1
 8004262:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004266:	6823      	ldr	r3, [r4, #0]
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	f012 0f01 	tst.w	r2, #1
 800426e:	d103      	bne.n	8004278 <HAL_I2C_Mem_Read+0x64>
      __HAL_I2C_ENABLE(hi2c);
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	f042 0201 	orr.w	r2, r2, #1
 8004276:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004278:	6822      	ldr	r2, [r4, #0]
 800427a:	6813      	ldr	r3, [r2, #0]
 800427c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004280:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004282:	2322      	movs	r3, #34	; 0x22
 8004284:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004288:	2340      	movs	r3, #64	; 0x40
 800428a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800428e:	2300      	movs	r3, #0
 8004290:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8004292:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004294:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004296:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800429a:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800429c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800429e:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80042a0:	4b6e      	ldr	r3, [pc, #440]	; (800445c <HAL_I2C_Mem_Read+0x248>)
 80042a2:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80042a4:	9501      	str	r5, [sp, #4]
 80042a6:	9600      	str	r6, [sp, #0]
 80042a8:	464b      	mov	r3, r9
 80042aa:	4642      	mov	r2, r8
 80042ac:	4639      	mov	r1, r7
 80042ae:	4620      	mov	r0, r4
 80042b0:	f7ff f9ee 	bl	8003690 <I2C_RequestMemoryRead>
 80042b4:	4607      	mov	r7, r0
 80042b6:	2800      	cmp	r0, #0
 80042b8:	f040 8143 	bne.w	8004542 <HAL_I2C_Mem_Read+0x32e>
    if (hi2c->XferSize == 0U)
 80042bc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80042be:	b9ab      	cbnz	r3, 80042ec <HAL_I2C_Mem_Read+0xd8>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042c0:	9303      	str	r3, [sp, #12]
 80042c2:	6823      	ldr	r3, [r4, #0]
 80042c4:	695a      	ldr	r2, [r3, #20]
 80042c6:	9203      	str	r2, [sp, #12]
 80042c8:	699a      	ldr	r2, [r3, #24]
 80042ca:	9203      	str	r2, [sp, #12]
 80042cc:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042d4:	601a      	str	r2, [r3, #0]
    while (hi2c->XferSize > 0U)
 80042d6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80042d8:	2b00      	cmp	r3, #0
 80042da:	f000 8125 	beq.w	8004528 <HAL_I2C_Mem_Read+0x314>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80042de:	f8df 8180 	ldr.w	r8, [pc, #384]	; 8004460 <HAL_I2C_Mem_Read+0x24c>
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80042e2:	f8df a180 	ldr.w	sl, [pc, #384]	; 8004464 <HAL_I2C_Mem_Read+0x250>
 80042e6:	f8df 9180 	ldr.w	r9, [pc, #384]	; 8004468 <HAL_I2C_Mem_Read+0x254>
 80042ea:	e0e8      	b.n	80044be <HAL_I2C_Mem_Read+0x2aa>
    else if (hi2c->XferSize == 1U)
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d00f      	beq.n	8004310 <HAL_I2C_Mem_Read+0xfc>
    else if (hi2c->XferSize == 2U)
 80042f0:	2b02      	cmp	r3, #2
 80042f2:	d021      	beq.n	8004338 <HAL_I2C_Mem_Read+0x124>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042f4:	6822      	ldr	r2, [r4, #0]
 80042f6:	6813      	ldr	r3, [r2, #0]
 80042f8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80042fc:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042fe:	2300      	movs	r3, #0
 8004300:	9306      	str	r3, [sp, #24]
 8004302:	6823      	ldr	r3, [r4, #0]
 8004304:	695a      	ldr	r2, [r3, #20]
 8004306:	9206      	str	r2, [sp, #24]
 8004308:	699b      	ldr	r3, [r3, #24]
 800430a:	9306      	str	r3, [sp, #24]
 800430c:	9b06      	ldr	r3, [sp, #24]
 800430e:	e7e2      	b.n	80042d6 <HAL_I2C_Mem_Read+0xc2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004310:	6822      	ldr	r2, [r4, #0]
 8004312:	6813      	ldr	r3, [r2, #0]
 8004314:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004318:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800431a:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800431c:	2300      	movs	r3, #0
 800431e:	9304      	str	r3, [sp, #16]
 8004320:	6823      	ldr	r3, [r4, #0]
 8004322:	695a      	ldr	r2, [r3, #20]
 8004324:	9204      	str	r2, [sp, #16]
 8004326:	699a      	ldr	r2, [r3, #24]
 8004328:	9204      	str	r2, [sp, #16]
 800432a:	9a04      	ldr	r2, [sp, #16]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004332:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004334:	b662      	cpsie	i
}
 8004336:	e7ce      	b.n	80042d6 <HAL_I2C_Mem_Read+0xc2>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004338:	6822      	ldr	r2, [r4, #0]
 800433a:	6813      	ldr	r3, [r2, #0]
 800433c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004340:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004342:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004344:	2300      	movs	r3, #0
 8004346:	9305      	str	r3, [sp, #20]
 8004348:	6823      	ldr	r3, [r4, #0]
 800434a:	695a      	ldr	r2, [r3, #20]
 800434c:	9205      	str	r2, [sp, #20]
 800434e:	699a      	ldr	r2, [r3, #24]
 8004350:	9205      	str	r2, [sp, #20]
 8004352:	9a05      	ldr	r2, [sp, #20]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800435a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800435c:	b662      	cpsie	i
}
 800435e:	e7ba      	b.n	80042d6 <HAL_I2C_Mem_Read+0xc2>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004360:	462a      	mov	r2, r5
 8004362:	4631      	mov	r1, r6
 8004364:	4620      	mov	r0, r4
 8004366:	f7ff fa74 	bl	8003852 <I2C_WaitOnRXNEFlagUntilTimeout>
 800436a:	2800      	cmp	r0, #0
 800436c:	f040 80eb 	bne.w	8004546 <HAL_I2C_Mem_Read+0x332>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004370:	6823      	ldr	r3, [r4, #0]
 8004372:	691a      	ldr	r2, [r3, #16]
 8004374:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004376:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8004378:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800437a:	3301      	adds	r3, #1
 800437c:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800437e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004380:	3b01      	subs	r3, #1
 8004382:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8004384:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004386:	3b01      	subs	r3, #1
 8004388:	b29b      	uxth	r3, r3
 800438a:	8563      	strh	r3, [r4, #42]	; 0x2a
 800438c:	e094      	b.n	80044b8 <HAL_I2C_Mem_Read+0x2a4>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800438e:	9500      	str	r5, [sp, #0]
 8004390:	4633      	mov	r3, r6
 8004392:	2200      	movs	r2, #0
 8004394:	4641      	mov	r1, r8
 8004396:	4620      	mov	r0, r4
 8004398:	f7ff f83b 	bl	8003412 <I2C_WaitOnFlagUntilTimeout>
 800439c:	2800      	cmp	r0, #0
 800439e:	f040 80d6 	bne.w	800454e <HAL_I2C_Mem_Read+0x33a>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043a2:	6822      	ldr	r2, [r4, #0]
 80043a4:	6813      	ldr	r3, [r2, #0]
 80043a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80043aa:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80043ac:	b672      	cpsid	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043ae:	6823      	ldr	r3, [r4, #0]
 80043b0:	691a      	ldr	r2, [r3, #16]
 80043b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80043b4:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80043b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80043b8:	3301      	adds	r3, #1
 80043ba:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80043bc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80043be:	3b01      	subs	r3, #1
 80043c0:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80043c2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80043c4:	3b01      	subs	r3, #1
 80043c6:	b29b      	uxth	r3, r3
 80043c8:	8563      	strh	r3, [r4, #42]	; 0x2a
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80043ca:	f8da 3000 	ldr.w	r3, [sl]
 80043ce:	08db      	lsrs	r3, r3, #3
 80043d0:	fba9 2303 	umull	r2, r3, r9, r3
 80043d4:	0a1b      	lsrs	r3, r3, #8
 80043d6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80043da:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80043de:	9307      	str	r3, [sp, #28]
            count--;
 80043e0:	9b07      	ldr	r3, [sp, #28]
 80043e2:	3b01      	subs	r3, #1
 80043e4:	9307      	str	r3, [sp, #28]
            if (count == 0U)
 80043e6:	9b07      	ldr	r3, [sp, #28]
 80043e8:	b333      	cbz	r3, 8004438 <HAL_I2C_Mem_Read+0x224>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80043ea:	6823      	ldr	r3, [r4, #0]
 80043ec:	695a      	ldr	r2, [r3, #20]
 80043ee:	f012 0f04 	tst.w	r2, #4
 80043f2:	d0f5      	beq.n	80043e0 <HAL_I2C_Mem_Read+0x1cc>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043fa:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043fc:	6823      	ldr	r3, [r4, #0]
 80043fe:	691a      	ldr	r2, [r3, #16]
 8004400:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004402:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8004404:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004406:	3301      	adds	r3, #1
 8004408:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800440a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800440c:	3b01      	subs	r3, #1
 800440e:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8004410:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004412:	3b01      	subs	r3, #1
 8004414:	b29b      	uxth	r3, r3
 8004416:	8563      	strh	r3, [r4, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004418:	b662      	cpsie	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800441a:	6823      	ldr	r3, [r4, #0]
 800441c:	691a      	ldr	r2, [r3, #16]
 800441e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004420:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8004422:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004424:	3301      	adds	r3, #1
 8004426:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8004428:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800442a:	3b01      	subs	r3, #1
 800442c:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800442e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004430:	3b01      	subs	r3, #1
 8004432:	b29b      	uxth	r3, r3
 8004434:	8563      	strh	r3, [r4, #42]	; 0x2a
 8004436:	e03f      	b.n	80044b8 <HAL_I2C_Mem_Read+0x2a4>
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004438:	6323      	str	r3, [r4, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800443a:	2220      	movs	r2, #32
 800443c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004440:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004444:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004446:	f042 0220 	orr.w	r2, r2, #32
 800444a:	6422      	str	r2, [r4, #64]	; 0x40
 800444c:	b662      	cpsie	i
              __HAL_UNLOCK(hi2c);
 800444e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
              return HAL_ERROR;
 8004452:	2701      	movs	r7, #1
 8004454:	e6f1      	b.n	800423a <HAL_I2C_Mem_Read+0x26>
 8004456:	bf00      	nop
 8004458:	00100002 	.word	0x00100002
 800445c:	ffff0000 	.word	0xffff0000
 8004460:	00010004 	.word	0x00010004
 8004464:	20000000 	.word	0x20000000
 8004468:	14f8b589 	.word	0x14f8b589
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800446c:	462a      	mov	r2, r5
 800446e:	4631      	mov	r1, r6
 8004470:	4620      	mov	r0, r4
 8004472:	f7ff f9ee 	bl	8003852 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004476:	2800      	cmp	r0, #0
 8004478:	d16b      	bne.n	8004552 <HAL_I2C_Mem_Read+0x33e>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800447a:	6823      	ldr	r3, [r4, #0]
 800447c:	691a      	ldr	r2, [r3, #16]
 800447e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004480:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004482:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004484:	1c53      	adds	r3, r2, #1
 8004486:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8004488:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800448a:	3b01      	subs	r3, #1
 800448c:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 800448e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004490:	3b01      	subs	r3, #1
 8004492:	b29b      	uxth	r3, r3
 8004494:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004496:	6823      	ldr	r3, [r4, #0]
 8004498:	6959      	ldr	r1, [r3, #20]
 800449a:	f011 0f04 	tst.w	r1, #4
 800449e:	d00b      	beq.n	80044b8 <HAL_I2C_Mem_Read+0x2a4>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044a0:	691b      	ldr	r3, [r3, #16]
 80044a2:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 80044a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80044a6:	3301      	adds	r3, #1
 80044a8:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80044aa:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80044ac:	3b01      	subs	r3, #1
 80044ae:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80044b0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80044b2:	3b01      	subs	r3, #1
 80044b4:	b29b      	uxth	r3, r3
 80044b6:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80044b8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d034      	beq.n	8004528 <HAL_I2C_Mem_Read+0x314>
      if (hi2c->XferSize <= 3U)
 80044be:	2b03      	cmp	r3, #3
 80044c0:	d8d4      	bhi.n	800446c <HAL_I2C_Mem_Read+0x258>
        if (hi2c->XferSize == 1U)
 80044c2:	2b01      	cmp	r3, #1
 80044c4:	f43f af4c 	beq.w	8004360 <HAL_I2C_Mem_Read+0x14c>
        else if (hi2c->XferSize == 2U)
 80044c8:	2b02      	cmp	r3, #2
 80044ca:	f47f af60 	bne.w	800438e <HAL_I2C_Mem_Read+0x17a>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80044ce:	9500      	str	r5, [sp, #0]
 80044d0:	4633      	mov	r3, r6
 80044d2:	2200      	movs	r2, #0
 80044d4:	4641      	mov	r1, r8
 80044d6:	4620      	mov	r0, r4
 80044d8:	f7fe ff9b 	bl	8003412 <I2C_WaitOnFlagUntilTimeout>
 80044dc:	2800      	cmp	r0, #0
 80044de:	d134      	bne.n	800454a <HAL_I2C_Mem_Read+0x336>
  __ASM volatile ("cpsid i" : : : "memory");
 80044e0:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044e2:	6822      	ldr	r2, [r4, #0]
 80044e4:	6813      	ldr	r3, [r2, #0]
 80044e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80044ea:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044ec:	6823      	ldr	r3, [r4, #0]
 80044ee:	691a      	ldr	r2, [r3, #16]
 80044f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80044f2:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80044f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80044f6:	3301      	adds	r3, #1
 80044f8:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80044fa:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80044fc:	3b01      	subs	r3, #1
 80044fe:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8004500:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004502:	3b01      	subs	r3, #1
 8004504:	b29b      	uxth	r3, r3
 8004506:	8563      	strh	r3, [r4, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004508:	b662      	cpsie	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800450a:	6823      	ldr	r3, [r4, #0]
 800450c:	691a      	ldr	r2, [r3, #16]
 800450e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004510:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8004512:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004514:	3301      	adds	r3, #1
 8004516:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8004518:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800451a:	3b01      	subs	r3, #1
 800451c:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800451e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004520:	3b01      	subs	r3, #1
 8004522:	b29b      	uxth	r3, r3
 8004524:	8563      	strh	r3, [r4, #42]	; 0x2a
 8004526:	e7c7      	b.n	80044b8 <HAL_I2C_Mem_Read+0x2a4>
    hi2c->State = HAL_I2C_STATE_READY;
 8004528:	2320      	movs	r3, #32
 800452a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800452e:	2300      	movs	r3, #0
 8004530:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8004534:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8004538:	e67f      	b.n	800423a <HAL_I2C_Mem_Read+0x26>
      return HAL_BUSY;
 800453a:	2702      	movs	r7, #2
 800453c:	e67d      	b.n	800423a <HAL_I2C_Mem_Read+0x26>
    __HAL_LOCK(hi2c);
 800453e:	2702      	movs	r7, #2
 8004540:	e67b      	b.n	800423a <HAL_I2C_Mem_Read+0x26>
      return HAL_ERROR;
 8004542:	2701      	movs	r7, #1
 8004544:	e679      	b.n	800423a <HAL_I2C_Mem_Read+0x26>
            return HAL_ERROR;
 8004546:	2701      	movs	r7, #1
 8004548:	e677      	b.n	800423a <HAL_I2C_Mem_Read+0x26>
            return HAL_ERROR;
 800454a:	2701      	movs	r7, #1
 800454c:	e675      	b.n	800423a <HAL_I2C_Mem_Read+0x26>
            return HAL_ERROR;
 800454e:	2701      	movs	r7, #1
 8004550:	e673      	b.n	800423a <HAL_I2C_Mem_Read+0x26>
          return HAL_ERROR;
 8004552:	2701      	movs	r7, #1
 8004554:	e671      	b.n	800423a <HAL_I2C_Mem_Read+0x26>
 8004556:	bf00      	nop

08004558 <HAL_I2C_MasterTxCpltCallback>:
}
 8004558:	4770      	bx	lr

0800455a <HAL_I2C_MasterRxCpltCallback>:
}
 800455a:	4770      	bx	lr

0800455c <HAL_I2C_SlaveTxCpltCallback>:
}
 800455c:	4770      	bx	lr

0800455e <HAL_I2C_SlaveRxCpltCallback>:
}
 800455e:	4770      	bx	lr

08004560 <HAL_I2C_AddrCallback>:
}
 8004560:	4770      	bx	lr

08004562 <HAL_I2C_ListenCpltCallback>:
}
 8004562:	4770      	bx	lr

08004564 <HAL_I2C_MemTxCpltCallback>:
}
 8004564:	4770      	bx	lr

08004566 <I2C_MemoryTransmit_TXE_BTF>:
{
 8004566:	b508      	push	{r3, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004568:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
  if (hi2c->EventCount == 0U)
 800456c:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800456e:	b99a      	cbnz	r2, 8004598 <I2C_MemoryTransmit_TXE_BTF+0x32>
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004570:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8004572:	2b01      	cmp	r3, #1
 8004574:	d008      	beq.n	8004588 <I2C_MemoryTransmit_TXE_BTF+0x22>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004576:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8004578:	6802      	ldr	r2, [r0, #0]
 800457a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800457e:	6113      	str	r3, [r2, #16]
      hi2c->EventCount++;
 8004580:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8004582:	3301      	adds	r3, #1
 8004584:	6503      	str	r3, [r0, #80]	; 0x50
}
 8004586:	bd08      	pop	{r3, pc}
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004588:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800458a:	6802      	ldr	r2, [r0, #0]
 800458c:	b2db      	uxtb	r3, r3
 800458e:	6113      	str	r3, [r2, #16]
      hi2c->EventCount += 2U;
 8004590:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8004592:	3302      	adds	r3, #2
 8004594:	6503      	str	r3, [r0, #80]	; 0x50
 8004596:	e7f6      	b.n	8004586 <I2C_MemoryTransmit_TXE_BTF+0x20>
 8004598:	b2db      	uxtb	r3, r3
  else if (hi2c->EventCount == 1U)
 800459a:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800459c:	2a01      	cmp	r2, #1
 800459e:	d00b      	beq.n	80045b8 <I2C_MemoryTransmit_TXE_BTF+0x52>
  else if (hi2c->EventCount == 2U)
 80045a0:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80045a2:	2a02      	cmp	r2, #2
 80045a4:	d13f      	bne.n	8004626 <I2C_MemoryTransmit_TXE_BTF+0xc0>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80045a6:	2b22      	cmp	r3, #34	; 0x22
 80045a8:	d00e      	beq.n	80045c8 <I2C_MemoryTransmit_TXE_BTF+0x62>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80045aa:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 80045ac:	b292      	uxth	r2, r2
 80045ae:	b302      	cbz	r2, 80045f2 <I2C_MemoryTransmit_TXE_BTF+0x8c>
 80045b0:	2b21      	cmp	r3, #33	; 0x21
 80045b2:	d012      	beq.n	80045da <I2C_MemoryTransmit_TXE_BTF+0x74>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80045b4:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80045b6:	e7e6      	b.n	8004586 <I2C_MemoryTransmit_TXE_BTF+0x20>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80045b8:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80045ba:	6802      	ldr	r2, [r0, #0]
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	6113      	str	r3, [r2, #16]
    hi2c->EventCount++;
 80045c0:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80045c2:	3301      	adds	r3, #1
 80045c4:	6503      	str	r3, [r0, #80]	; 0x50
 80045c6:	e7de      	b.n	8004586 <I2C_MemoryTransmit_TXE_BTF+0x20>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80045c8:	6802      	ldr	r2, [r0, #0]
 80045ca:	6813      	ldr	r3, [r2, #0]
 80045cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045d0:	6013      	str	r3, [r2, #0]
      hi2c->EventCount++;
 80045d2:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80045d4:	3301      	adds	r3, #1
 80045d6:	6503      	str	r3, [r0, #80]	; 0x50
 80045d8:	e7d5      	b.n	8004586 <I2C_MemoryTransmit_TXE_BTF+0x20>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80045da:	6803      	ldr	r3, [r0, #0]
 80045dc:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80045de:	7812      	ldrb	r2, [r2, #0]
 80045e0:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80045e2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80045e4:	3301      	adds	r3, #1
 80045e6:	6243      	str	r3, [r0, #36]	; 0x24
      hi2c->XferCount--;
 80045e8:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80045ea:	3b01      	subs	r3, #1
 80045ec:	b29b      	uxth	r3, r3
 80045ee:	8543      	strh	r3, [r0, #42]	; 0x2a
 80045f0:	e7c9      	b.n	8004586 <I2C_MemoryTransmit_TXE_BTF+0x20>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80045f2:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 80045f4:	b292      	uxth	r2, r2
 80045f6:	2a00      	cmp	r2, #0
 80045f8:	d1c5      	bne.n	8004586 <I2C_MemoryTransmit_TXE_BTF+0x20>
 80045fa:	2b21      	cmp	r3, #33	; 0x21
 80045fc:	d1c3      	bne.n	8004586 <I2C_MemoryTransmit_TXE_BTF+0x20>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80045fe:	6802      	ldr	r2, [r0, #0]
 8004600:	6853      	ldr	r3, [r2, #4]
 8004602:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004606:	6053      	str	r3, [r2, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004608:	6802      	ldr	r2, [r0, #0]
 800460a:	6813      	ldr	r3, [r2, #0]
 800460c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004610:	6013      	str	r3, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004612:	2300      	movs	r3, #0
 8004614:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004616:	2220      	movs	r2, #32
 8004618:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800461c:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004620:	f7ff ffa0 	bl	8004564 <HAL_I2C_MemTxCpltCallback>
 8004624:	e7af      	b.n	8004586 <I2C_MemoryTransmit_TXE_BTF+0x20>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8004626:	6803      	ldr	r3, [r0, #0]
 8004628:	695a      	ldr	r2, [r3, #20]
 800462a:	f012 0f80 	tst.w	r2, #128	; 0x80
 800462e:	d0aa      	beq.n	8004586 <I2C_MemoryTransmit_TXE_BTF+0x20>
    hi2c->Instance->DR = 0x00U;
 8004630:	2200      	movs	r2, #0
 8004632:	611a      	str	r2, [r3, #16]
}
 8004634:	e7a7      	b.n	8004586 <I2C_MemoryTransmit_TXE_BTF+0x20>

08004636 <HAL_I2C_MemRxCpltCallback>:
}
 8004636:	4770      	bx	lr

08004638 <HAL_I2C_ErrorCallback>:
}
 8004638:	4770      	bx	lr

0800463a <HAL_I2C_AbortCpltCallback>:
}
 800463a:	4770      	bx	lr

0800463c <I2C_DMAAbort>:
{
 800463c:	b500      	push	{lr}
 800463e:	b083      	sub	sp, #12
  __IO uint32_t count = 0U;
 8004640:	2300      	movs	r3, #0
 8004642:	9301      	str	r3, [sp, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004644:	6a40      	ldr	r0, [r0, #36]	; 0x24
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004646:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 800464a:	b2d2      	uxtb	r2, r2
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800464c:	4b32      	ldr	r3, [pc, #200]	; (8004718 <I2C_DMAAbort+0xdc>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	08db      	lsrs	r3, r3, #3
 8004652:	4932      	ldr	r1, [pc, #200]	; (800471c <I2C_DMAAbort+0xe0>)
 8004654:	fba1 1303 	umull	r1, r3, r1, r3
 8004658:	0a1b      	lsrs	r3, r3, #8
 800465a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800465e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8004662:	9301      	str	r3, [sp, #4]
    if (count == 0U)
 8004664:	9b01      	ldr	r3, [sp, #4]
 8004666:	b143      	cbz	r3, 800467a <I2C_DMAAbort+0x3e>
    count--;
 8004668:	9b01      	ldr	r3, [sp, #4]
 800466a:	3b01      	subs	r3, #1
 800466c:	9301      	str	r3, [sp, #4]
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800466e:	6803      	ldr	r3, [r0, #0]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f413 7f00 	tst.w	r3, #512	; 0x200
 8004676:	d1f5      	bne.n	8004664 <I2C_DMAAbort+0x28>
 8004678:	e003      	b.n	8004682 <I2C_DMAAbort+0x46>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800467a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800467c:	f043 0320 	orr.w	r3, r3, #32
 8004680:	6403      	str	r3, [r0, #64]	; 0x40
  if (hi2c->hdmatx != NULL)
 8004682:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004684:	b10b      	cbz	r3, 800468a <I2C_DMAAbort+0x4e>
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004686:	2100      	movs	r1, #0
 8004688:	6299      	str	r1, [r3, #40]	; 0x28
  if (hi2c->hdmarx != NULL)
 800468a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800468c:	b10b      	cbz	r3, 8004692 <I2C_DMAAbort+0x56>
    hi2c->hdmarx->XferCpltCallback = NULL;
 800468e:	2100      	movs	r1, #0
 8004690:	6299      	str	r1, [r3, #40]	; 0x28
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004692:	6801      	ldr	r1, [r0, #0]
 8004694:	680b      	ldr	r3, [r1, #0]
 8004696:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800469a:	600b      	str	r3, [r1, #0]
  hi2c->XferCount = 0U;
 800469c:	2300      	movs	r3, #0
 800469e:	8543      	strh	r3, [r0, #42]	; 0x2a
  if (hi2c->hdmatx != NULL)
 80046a0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80046a2:	b10b      	cbz	r3, 80046a8 <I2C_DMAAbort+0x6c>
    hi2c->hdmatx->XferAbortCallback = NULL;
 80046a4:	2100      	movs	r1, #0
 80046a6:	6359      	str	r1, [r3, #52]	; 0x34
  if (hi2c->hdmarx != NULL)
 80046a8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80046aa:	b10b      	cbz	r3, 80046b0 <I2C_DMAAbort+0x74>
    hi2c->hdmarx->XferAbortCallback = NULL;
 80046ac:	2100      	movs	r1, #0
 80046ae:	6359      	str	r1, [r3, #52]	; 0x34
  __HAL_I2C_DISABLE(hi2c);
 80046b0:	6801      	ldr	r1, [r0, #0]
 80046b2:	680b      	ldr	r3, [r1, #0]
 80046b4:	f023 0301 	bic.w	r3, r3, #1
 80046b8:	600b      	str	r3, [r1, #0]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80046ba:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80046be:	b2db      	uxtb	r3, r3
 80046c0:	2b60      	cmp	r3, #96	; 0x60
 80046c2:	d00e      	beq.n	80046e2 <I2C_DMAAbort+0xa6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80046c4:	f002 0228 	and.w	r2, r2, #40	; 0x28
 80046c8:	2a28      	cmp	r2, #40	; 0x28
 80046ca:	d014      	beq.n	80046f6 <I2C_DMAAbort+0xba>
      hi2c->State = HAL_I2C_STATE_READY;
 80046cc:	2320      	movs	r3, #32
 80046ce:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80046d2:	2300      	movs	r3, #0
 80046d4:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80046d8:	f7ff ffae 	bl	8004638 <HAL_I2C_ErrorCallback>
}
 80046dc:	b003      	add	sp, #12
 80046de:	f85d fb04 	ldr.w	pc, [sp], #4
    hi2c->State         = HAL_I2C_STATE_READY;
 80046e2:	2320      	movs	r3, #32
 80046e4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80046e8:	2300      	movs	r3, #0
 80046ea:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80046ee:	6403      	str	r3, [r0, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 80046f0:	f7ff ffa3 	bl	800463a <HAL_I2C_AbortCpltCallback>
 80046f4:	e7f2      	b.n	80046dc <I2C_DMAAbort+0xa0>
      __HAL_I2C_ENABLE(hi2c);
 80046f6:	6802      	ldr	r2, [r0, #0]
 80046f8:	6813      	ldr	r3, [r2, #0]
 80046fa:	f043 0301 	orr.w	r3, r3, #1
 80046fe:	6013      	str	r3, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004700:	6802      	ldr	r2, [r0, #0]
 8004702:	6813      	ldr	r3, [r2, #0]
 8004704:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004708:	6013      	str	r3, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800470a:	2300      	movs	r3, #0
 800470c:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800470e:	2328      	movs	r3, #40	; 0x28
 8004710:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 8004714:	e7e0      	b.n	80046d8 <I2C_DMAAbort+0x9c>
 8004716:	bf00      	nop
 8004718:	20000000 	.word	0x20000000
 800471c:	14f8b589 	.word	0x14f8b589

08004720 <I2C_ITError>:
{
 8004720:	b510      	push	{r4, lr}
 8004722:	4604      	mov	r4, r0
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004724:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 8004728:	b2d2      	uxtb	r2, r2
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800472a:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 800472e:	b2db      	uxtb	r3, r3
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004730:	2b10      	cmp	r3, #16
 8004732:	d036      	beq.n	80047a2 <I2C_ITError+0x82>
 8004734:	2b40      	cmp	r3, #64	; 0x40
 8004736:	d034      	beq.n	80047a2 <I2C_ITError+0x82>
  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004738:	f002 0328 	and.w	r3, r2, #40	; 0x28
 800473c:	2b28      	cmp	r3, #40	; 0x28
 800473e:	d03d      	beq.n	80047bc <I2C_ITError+0x9c>
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004740:	6823      	ldr	r3, [r4, #0]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8004748:	d107      	bne.n	800475a <I2C_ITError+0x3a>
 800474a:	2a60      	cmp	r2, #96	; 0x60
 800474c:	d005      	beq.n	800475a <I2C_ITError+0x3a>
      hi2c->State = HAL_I2C_STATE_READY;
 800474e:	2320      	movs	r3, #32
 8004750:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004754:	2300      	movs	r3, #0
 8004756:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->PreviousState = I2C_STATE_NONE;
 800475a:	2300      	movs	r3, #0
 800475c:	6323      	str	r3, [r4, #48]	; 0x30
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800475e:	6823      	ldr	r3, [r4, #0]
 8004760:	685a      	ldr	r2, [r3, #4]
 8004762:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8004766:	d04d      	beq.n	8004804 <I2C_ITError+0xe4>
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004768:	685a      	ldr	r2, [r3, #4]
 800476a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800476e:	605a      	str	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004770:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8004772:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 8004776:	b2db      	uxtb	r3, r3
 8004778:	2b01      	cmp	r3, #1
 800477a:	d025      	beq.n	80047c8 <I2C_ITError+0xa8>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800477c:	4b46      	ldr	r3, [pc, #280]	; (8004898 <I2C_ITError+0x178>)
 800477e:	6353      	str	r3, [r2, #52]	; 0x34
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004780:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8004782:	f7fe fc9d 	bl	80030c0 <HAL_DMA_Abort_IT>
 8004786:	2800      	cmp	r0, #0
 8004788:	d04e      	beq.n	8004828 <I2C_ITError+0x108>
        __HAL_I2C_DISABLE(hi2c);
 800478a:	6822      	ldr	r2, [r4, #0]
 800478c:	6813      	ldr	r3, [r2, #0]
 800478e:	f023 0301 	bic.w	r3, r3, #1
 8004792:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8004794:	2320      	movs	r3, #32
 8004796:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800479a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800479c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800479e:	4798      	blx	r3
 80047a0:	e042      	b.n	8004828 <I2C_ITError+0x108>
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80047a2:	2a22      	cmp	r2, #34	; 0x22
 80047a4:	d1c8      	bne.n	8004738 <I2C_ITError+0x18>
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80047a6:	6822      	ldr	r2, [r4, #0]
 80047a8:	6813      	ldr	r3, [r2, #0]
 80047aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80047ae:	6013      	str	r3, [r2, #0]
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80047b0:	6823      	ldr	r3, [r4, #0]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80047b8:	d0c9      	beq.n	800474e <I2C_ITError+0x2e>
 80047ba:	e7ce      	b.n	800475a <I2C_ITError+0x3a>
    hi2c->PreviousState = I2C_STATE_NONE;
 80047bc:	2300      	movs	r3, #0
 80047be:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80047c0:	2328      	movs	r3, #40	; 0x28
 80047c2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 80047c6:	e7ca      	b.n	800475e <I2C_ITError+0x3e>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80047c8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80047ca:	4a33      	ldr	r2, [pc, #204]	; (8004898 <I2C_ITError+0x178>)
 80047cc:	635a      	str	r2, [r3, #52]	; 0x34
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80047ce:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80047d0:	f7fe fc76 	bl	80030c0 <HAL_DMA_Abort_IT>
 80047d4:	b340      	cbz	r0, 8004828 <I2C_ITError+0x108>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80047d6:	6823      	ldr	r3, [r4, #0]
 80047d8:	695a      	ldr	r2, [r3, #20]
 80047da:	f012 0f40 	tst.w	r2, #64	; 0x40
 80047de:	d005      	beq.n	80047ec <I2C_ITError+0xcc>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047e0:	691a      	ldr	r2, [r3, #16]
 80047e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80047e4:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80047e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80047e8:	3301      	adds	r3, #1
 80047ea:	6263      	str	r3, [r4, #36]	; 0x24
        __HAL_I2C_DISABLE(hi2c);
 80047ec:	6822      	ldr	r2, [r4, #0]
 80047ee:	6813      	ldr	r3, [r2, #0]
 80047f0:	f023 0301 	bic.w	r3, r3, #1
 80047f4:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 80047f6:	2320      	movs	r3, #32
 80047f8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80047fc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80047fe:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004800:	4798      	blx	r3
 8004802:	e011      	b.n	8004828 <I2C_ITError+0x108>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004804:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8004808:	b2d2      	uxtb	r2, r2
 800480a:	2a60      	cmp	r2, #96	; 0x60
 800480c:	d01f      	beq.n	800484e <I2C_ITError+0x12e>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800480e:	695a      	ldr	r2, [r3, #20]
 8004810:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004814:	d005      	beq.n	8004822 <I2C_ITError+0x102>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004816:	691a      	ldr	r2, [r3, #16]
 8004818:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800481a:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800481c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800481e:	3301      	adds	r3, #1
 8004820:	6263      	str	r3, [r4, #36]	; 0x24
    HAL_I2C_ErrorCallback(hi2c);
 8004822:	4620      	mov	r0, r4
 8004824:	f7ff ff08 	bl	8004638 <HAL_I2C_ErrorCallback>
  CurrentError = hi2c->ErrorCode;
 8004828:	6c23      	ldr	r3, [r4, #64]	; 0x40
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800482a:	f013 0f0f 	tst.w	r3, #15
 800482e:	d004      	beq.n	800483a <I2C_ITError+0x11a>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004830:	6822      	ldr	r2, [r4, #0]
 8004832:	6853      	ldr	r3, [r2, #4]
 8004834:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004838:	6053      	str	r3, [r2, #4]
  CurrentState = hi2c->State;
 800483a:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800483e:	b2db      	uxtb	r3, r3
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004840:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004842:	f012 0f04 	tst.w	r2, #4
 8004846:	d001      	beq.n	800484c <I2C_ITError+0x12c>
 8004848:	2b28      	cmp	r3, #40	; 0x28
 800484a:	d018      	beq.n	800487e <I2C_ITError+0x15e>
}
 800484c:	bd10      	pop	{r4, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 800484e:	2220      	movs	r2, #32
 8004850:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004854:	2200      	movs	r2, #0
 8004856:	6422      	str	r2, [r4, #64]	; 0x40
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004858:	695a      	ldr	r2, [r3, #20]
 800485a:	f012 0f40 	tst.w	r2, #64	; 0x40
 800485e:	d005      	beq.n	800486c <I2C_ITError+0x14c>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004860:	691a      	ldr	r2, [r3, #16]
 8004862:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004864:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8004866:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004868:	3301      	adds	r3, #1
 800486a:	6263      	str	r3, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE(hi2c);
 800486c:	6822      	ldr	r2, [r4, #0]
 800486e:	6813      	ldr	r3, [r2, #0]
 8004870:	f023 0301 	bic.w	r3, r3, #1
 8004874:	6013      	str	r3, [r2, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 8004876:	4620      	mov	r0, r4
 8004878:	f7ff fedf 	bl	800463a <HAL_I2C_AbortCpltCallback>
 800487c:	e7d4      	b.n	8004828 <I2C_ITError+0x108>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800487e:	4b07      	ldr	r3, [pc, #28]	; (800489c <I2C_ITError+0x17c>)
 8004880:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004882:	2300      	movs	r3, #0
 8004884:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004886:	2220      	movs	r2, #32
 8004888:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800488c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 8004890:	4620      	mov	r0, r4
 8004892:	f7ff fe66 	bl	8004562 <HAL_I2C_ListenCpltCallback>
}
 8004896:	e7d9      	b.n	800484c <I2C_ITError+0x12c>
 8004898:	0800463d 	.word	0x0800463d
 800489c:	ffff0000 	.word	0xffff0000

080048a0 <HAL_I2C_EV_IRQHandler>:
{
 80048a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048a2:	b08f      	sub	sp, #60	; 0x3c
 80048a4:	4604      	mov	r4, r0
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80048a6:	6803      	ldr	r3, [r0, #0]
 80048a8:	6858      	ldr	r0, [r3, #4]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80048aa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80048ac:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 80048b0:	b2d2      	uxtb	r2, r2
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80048b2:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 80048b6:	b2c9      	uxtb	r1, r1
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80048b8:	2a10      	cmp	r2, #16
 80048ba:	d024      	beq.n	8004906 <HAL_I2C_EV_IRQHandler+0x66>
 80048bc:	2a40      	cmp	r2, #64	; 0x40
 80048be:	d022      	beq.n	8004906 <HAL_I2C_EV_IRQHandler+0x66>
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80048c0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80048c2:	2a00      	cmp	r2, #0
 80048c4:	f000 83bb 	beq.w	800503e <HAL_I2C_EV_IRQHandler+0x79e>
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80048c8:	695a      	ldr	r2, [r3, #20]
  uint32_t sr2itflags               = 0U;
 80048ca:	2500      	movs	r5, #0
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80048cc:	f012 0f02 	tst.w	r2, #2
 80048d0:	f000 83cc 	beq.w	800506c <HAL_I2C_EV_IRQHandler+0x7cc>
 80048d4:	f410 7f00 	tst.w	r0, #512	; 0x200
 80048d8:	f000 83ce 	beq.w	8005078 <HAL_I2C_EV_IRQHandler+0x7d8>
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80048dc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80048de:	b102      	cbz	r2, 80048e2 <HAL_I2C_EV_IRQHandler+0x42>
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80048e0:	699d      	ldr	r5, [r3, #24]
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80048e2:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 80048e6:	f002 0228 	and.w	r2, r2, #40	; 0x28
 80048ea:	2a28      	cmp	r2, #40	; 0x28
 80048ec:	f000 83aa 	beq.w	8005044 <HAL_I2C_EV_IRQHandler+0x7a4>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048f0:	2200      	movs	r2, #0
 80048f2:	920c      	str	r2, [sp, #48]	; 0x30
 80048f4:	6959      	ldr	r1, [r3, #20]
 80048f6:	910c      	str	r1, [sp, #48]	; 0x30
 80048f8:	699b      	ldr	r3, [r3, #24]
 80048fa:	930c      	str	r3, [sp, #48]	; 0x30
 80048fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80048fe:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
}
 8004902:	b00f      	add	sp, #60	; 0x3c
 8004904:	bdf0      	pop	{r4, r5, r6, r7, pc}
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004906:	699f      	ldr	r7, [r3, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004908:	695d      	ldr	r5, [r3, #20]
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800490a:	f015 0f01 	tst.w	r5, #1
 800490e:	d11d      	bne.n	800494c <HAL_I2C_EV_IRQHandler+0xac>
 8004910:	f5b6 0f2a 	cmp.w	r6, #11141120	; 0xaa0000
 8004914:	d0f5      	beq.n	8004902 <HAL_I2C_EV_IRQHandler+0x62>
 8004916:	f1b6 4f2a 	cmp.w	r6, #2852126720	; 0xaa000000
 800491a:	d0f2      	beq.n	8004902 <HAL_I2C_EV_IRQHandler+0x62>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800491c:	f015 0f08 	tst.w	r5, #8
 8004920:	d01b      	beq.n	800495a <HAL_I2C_EV_IRQHandler+0xba>
 8004922:	f410 7f00 	tst.w	r0, #512	; 0x200
 8004926:	f000 8183 	beq.w	8004c30 <HAL_I2C_EV_IRQHandler+0x390>
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800492a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800492c:	b2d2      	uxtb	r2, r2
 800492e:	611a      	str	r2, [r3, #16]
  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004930:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004932:	2b00      	cmp	r3, #0
 8004934:	f000 8085 	beq.w	8004a42 <HAL_I2C_EV_IRQHandler+0x1a2>
 8004938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800493a:	2b00      	cmp	r3, #0
 800493c:	f000 8081 	beq.w	8004a42 <HAL_I2C_EV_IRQHandler+0x1a2>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004940:	6822      	ldr	r2, [r4, #0]
 8004942:	6853      	ldr	r3, [r2, #4]
 8004944:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004948:	6053      	str	r3, [r2, #4]
 800494a:	e7da      	b.n	8004902 <HAL_I2C_EV_IRQHandler+0x62>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800494c:	f410 7f00 	tst.w	r0, #512	; 0x200
 8004950:	d11d      	bne.n	800498e <HAL_I2C_EV_IRQHandler+0xee>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004952:	f015 0f08 	tst.w	r5, #8
 8004956:	f040 816b 	bne.w	8004c30 <HAL_I2C_EV_IRQHandler+0x390>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800495a:	f015 0f02 	tst.w	r5, #2
 800495e:	f000 8167 	beq.w	8004c30 <HAL_I2C_EV_IRQHandler+0x390>
 8004962:	f410 7f00 	tst.w	r0, #512	; 0x200
 8004966:	f000 8163 	beq.w	8004c30 <HAL_I2C_EV_IRQHandler+0x390>
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800496a:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 800496e:	b2d1      	uxtb	r1, r2
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004970:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004972:	6b25      	ldr	r5, [r4, #48]	; 0x30
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004974:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8004978:	b2d2      	uxtb	r2, r2
 800497a:	2a22      	cmp	r2, #34	; 0x22
 800497c:	d06a      	beq.n	8004a54 <HAL_I2C_EV_IRQHandler+0x1b4>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800497e:	2200      	movs	r2, #0
 8004980:	920a      	str	r2, [sp, #40]	; 0x28
 8004982:	695a      	ldr	r2, [r3, #20]
 8004984:	920a      	str	r2, [sp, #40]	; 0x28
 8004986:	699b      	ldr	r3, [r3, #24]
 8004988:	930a      	str	r3, [sp, #40]	; 0x28
 800498a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800498c:	e7b9      	b.n	8004902 <HAL_I2C_EV_IRQHandler+0x62>
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800498e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004990:	f5b2 0f2a 	cmp.w	r2, #11141120	; 0xaa0000
 8004994:	d01a      	beq.n	80049cc <HAL_I2C_EV_IRQHandler+0x12c>
  }
  /* else if user set XferOptions to I2C_OTHER_AND_LAST_FRAME */
  /* it request implicitly to generate a restart condition    */
  /* then generate a stop condition at the end of transfer    */
  /* set XferOptions to I2C_FIRST_AND_LAST_FRAME              */
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004996:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004998:	f1b2 4f2a 	cmp.w	r2, #2852126720	; 0xaa000000
  {
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800499c:	bf04      	itt	eq
 800499e:	2208      	moveq	r2, #8
 80049a0:	62e2      	streq	r2, [r4, #44]	; 0x2c
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80049a2:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 80049a6:	b2d2      	uxtb	r2, r2
 80049a8:	2a40      	cmp	r2, #64	; 0x40
 80049aa:	d012      	beq.n	80049d2 <HAL_I2C_EV_IRQHandler+0x132>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80049ac:	6922      	ldr	r2, [r4, #16]
 80049ae:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 80049b2:	d01b      	beq.n	80049ec <HAL_I2C_EV_IRQHandler+0x14c>
      if (hi2c->EventCount == 0U)
 80049b4:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80049b6:	2a00      	cmp	r2, #0
 80049b8:	d136      	bne.n	8004a28 <HAL_I2C_EV_IRQHandler+0x188>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80049ba:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80049bc:	f3c2 12c8 	ubfx	r2, r2, #7, #9
 80049c0:	f002 0206 	and.w	r2, r2, #6
 80049c4:	f042 02f0 	orr.w	r2, r2, #240	; 0xf0
 80049c8:	611a      	str	r2, [r3, #16]
 80049ca:	e79a      	b.n	8004902 <HAL_I2C_EV_IRQHandler+0x62>
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80049cc:	2201      	movs	r2, #1
 80049ce:	62e2      	str	r2, [r4, #44]	; 0x2c
 80049d0:	e7e7      	b.n	80049a2 <HAL_I2C_EV_IRQHandler+0x102>
    if (hi2c->EventCount == 0U)
 80049d2:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80049d4:	b922      	cbnz	r2, 80049e0 <HAL_I2C_EV_IRQHandler+0x140>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80049d6:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80049d8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80049dc:	611a      	str	r2, [r3, #16]
 80049de:	e790      	b.n	8004902 <HAL_I2C_EV_IRQHandler+0x62>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80049e0:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80049e2:	f042 0201 	orr.w	r2, r2, #1
 80049e6:	b2d2      	uxtb	r2, r2
 80049e8:	611a      	str	r2, [r3, #16]
 80049ea:	e78a      	b.n	8004902 <HAL_I2C_EV_IRQHandler+0x62>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80049ec:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 80049f0:	b2d2      	uxtb	r2, r2
 80049f2:	2a21      	cmp	r2, #33	; 0x21
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80049f4:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80049f6:	bf0e      	itee	eq
 80049f8:	f002 02fe 	andeq.w	r2, r2, #254	; 0xfe
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80049fc:	f042 0201 	orrne.w	r2, r2, #1
 8004a00:	b2d2      	uxtbne	r2, r2
 8004a02:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004a04:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004a06:	b13b      	cbz	r3, 8004a18 <HAL_I2C_EV_IRQHandler+0x178>
 8004a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a0a:	b12b      	cbz	r3, 8004a18 <HAL_I2C_EV_IRQHandler+0x178>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004a0c:	6822      	ldr	r2, [r4, #0]
 8004a0e:	6853      	ldr	r3, [r2, #4]
 8004a10:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004a14:	6053      	str	r3, [r2, #4]
 8004a16:	e774      	b.n	8004902 <HAL_I2C_EV_IRQHandler+0x62>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004a18:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	f43f af71 	beq.w	8004902 <HAL_I2C_EV_IRQHandler+0x62>
 8004a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d1f2      	bne.n	8004a0c <HAL_I2C_EV_IRQHandler+0x16c>
 8004a26:	e76c      	b.n	8004902 <HAL_I2C_EV_IRQHandler+0x62>
      else if (hi2c->EventCount == 1U)
 8004a28:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8004a2a:	2a01      	cmp	r2, #1
 8004a2c:	f47f af69 	bne.w	8004902 <HAL_I2C_EV_IRQHandler+0x62>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004a30:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004a32:	f3c2 12c8 	ubfx	r2, r2, #7, #9
 8004a36:	f002 0206 	and.w	r2, r2, #6
 8004a3a:	f042 02f1 	orr.w	r2, r2, #241	; 0xf1
 8004a3e:	611a      	str	r2, [r3, #16]
 8004a40:	e75f      	b.n	8004902 <HAL_I2C_EV_IRQHandler+0x62>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004a42:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	f43f af5c 	beq.w	8004902 <HAL_I2C_EV_IRQHandler+0x62>
 8004a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	f47f af77 	bne.w	8004940 <HAL_I2C_EV_IRQHandler+0xa0>
 8004a52:	e756      	b.n	8004902 <HAL_I2C_EV_IRQHandler+0x62>
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004a54:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8004a56:	b90a      	cbnz	r2, 8004a5c <HAL_I2C_EV_IRQHandler+0x1bc>
 8004a58:	2940      	cmp	r1, #64	; 0x40
 8004a5a:	d015      	beq.n	8004a88 <HAL_I2C_EV_IRQHandler+0x1e8>
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004a5c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8004a5e:	b91a      	cbnz	r2, 8004a68 <HAL_I2C_EV_IRQHandler+0x1c8>
 8004a60:	6922      	ldr	r2, [r4, #16]
 8004a62:	f5b2 4f40 	cmp.w	r2, #49152	; 0xc000
 8004a66:	d016      	beq.n	8004a96 <HAL_I2C_EV_IRQHandler+0x1f6>
      if (hi2c->XferCount == 0U)
 8004a68:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004a6a:	b292      	uxth	r2, r2
 8004a6c:	bb12      	cbnz	r2, 8004ab4 <HAL_I2C_EV_IRQHandler+0x214>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a6e:	9202      	str	r2, [sp, #8]
 8004a70:	695a      	ldr	r2, [r3, #20]
 8004a72:	9202      	str	r2, [sp, #8]
 8004a74:	699a      	ldr	r2, [r3, #24]
 8004a76:	9202      	str	r2, [sp, #8]
 8004a78:	9a02      	ldr	r2, [sp, #8]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a80:	601a      	str	r2, [r3, #0]
      hi2c->EventCount = 0U;
 8004a82:	2300      	movs	r3, #0
 8004a84:	6523      	str	r3, [r4, #80]	; 0x50
 8004a86:	e73c      	b.n	8004902 <HAL_I2C_EV_IRQHandler+0x62>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a88:	9200      	str	r2, [sp, #0]
 8004a8a:	695a      	ldr	r2, [r3, #20]
 8004a8c:	9200      	str	r2, [sp, #0]
 8004a8e:	699b      	ldr	r3, [r3, #24]
 8004a90:	9300      	str	r3, [sp, #0]
 8004a92:	9b00      	ldr	r3, [sp, #0]
 8004a94:	e735      	b.n	8004902 <HAL_I2C_EV_IRQHandler+0x62>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a96:	2200      	movs	r2, #0
 8004a98:	9201      	str	r2, [sp, #4]
 8004a9a:	695a      	ldr	r2, [r3, #20]
 8004a9c:	9201      	str	r2, [sp, #4]
 8004a9e:	699a      	ldr	r2, [r3, #24]
 8004aa0:	9201      	str	r2, [sp, #4]
 8004aa2:	9a01      	ldr	r2, [sp, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004aaa:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004aac:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004aae:	3301      	adds	r3, #1
 8004ab0:	6523      	str	r3, [r4, #80]	; 0x50
 8004ab2:	e726      	b.n	8004902 <HAL_I2C_EV_IRQHandler+0x62>
      else if (hi2c->XferCount == 1U)
 8004ab4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004ab6:	b292      	uxth	r2, r2
 8004ab8:	2a01      	cmp	r2, #1
 8004aba:	d025      	beq.n	8004b08 <HAL_I2C_EV_IRQHandler+0x268>
      else if (hi2c->XferCount == 2U)
 8004abc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004abe:	b292      	uxth	r2, r2
 8004ac0:	2a02      	cmp	r2, #2
 8004ac2:	d079      	beq.n	8004bb8 <HAL_I2C_EV_IRQHandler+0x318>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004aca:	601a      	str	r2, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004acc:	6823      	ldr	r3, [r4, #0]
 8004ace:	685a      	ldr	r2, [r3, #4]
 8004ad0:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8004ad4:	d00f      	beq.n	8004af6 <HAL_I2C_EV_IRQHandler+0x256>
 8004ad6:	f510 3f80 	cmn.w	r0, #65536	; 0x10000
 8004ada:	d008      	beq.n	8004aee <HAL_I2C_EV_IRQHandler+0x24e>
 8004adc:	3801      	subs	r0, #1
 8004ade:	281f      	cmp	r0, #31
 8004ae0:	d809      	bhi.n	8004af6 <HAL_I2C_EV_IRQHandler+0x256>
 8004ae2:	4a99      	ldr	r2, [pc, #612]	; (8004d48 <HAL_I2C_EV_IRQHandler+0x4a8>)
 8004ae4:	fa22 f000 	lsr.w	r0, r2, r0
 8004ae8:	f010 0f01 	tst.w	r0, #1
 8004aec:	d003      	beq.n	8004af6 <HAL_I2C_EV_IRQHandler+0x256>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004aee:	685a      	ldr	r2, [r3, #4]
 8004af0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004af4:	605a      	str	r2, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004af6:	2300      	movs	r3, #0
 8004af8:	9309      	str	r3, [sp, #36]	; 0x24
 8004afa:	6823      	ldr	r3, [r4, #0]
 8004afc:	695a      	ldr	r2, [r3, #20]
 8004afe:	9209      	str	r2, [sp, #36]	; 0x24
 8004b00:	699b      	ldr	r3, [r3, #24]
 8004b02:	9309      	str	r3, [sp, #36]	; 0x24
 8004b04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b06:	e7bc      	b.n	8004a82 <HAL_I2C_EV_IRQHandler+0x1e2>
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004b08:	f510 3f80 	cmn.w	r0, #65536	; 0x10000
 8004b0c:	d01a      	beq.n	8004b44 <HAL_I2C_EV_IRQHandler+0x2a4>
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004b0e:	2808      	cmp	r0, #8
 8004b10:	d03c      	beq.n	8004b8c <HAL_I2C_EV_IRQHandler+0x2ec>
 8004b12:	2820      	cmp	r0, #32
 8004b14:	d03a      	beq.n	8004b8c <HAL_I2C_EV_IRQHandler+0x2ec>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004b16:	2d12      	cmp	r5, #18
 8004b18:	d036      	beq.n	8004b88 <HAL_I2C_EV_IRQHandler+0x2e8>
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004b1a:	2810      	cmp	r0, #16
 8004b1c:	d847      	bhi.n	8004bae <HAL_I2C_EV_IRQHandler+0x30e>
 8004b1e:	4a8b      	ldr	r2, [pc, #556]	; (8004d4c <HAL_I2C_EV_IRQHandler+0x4ac>)
 8004b20:	fa22 f000 	lsr.w	r0, r2, r0
 8004b24:	f010 0f01 	tst.w	r0, #1
 8004b28:	d041      	beq.n	8004bae <HAL_I2C_EV_IRQHandler+0x30e>
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004b30:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b32:	2300      	movs	r3, #0
 8004b34:	9305      	str	r3, [sp, #20]
 8004b36:	6823      	ldr	r3, [r4, #0]
 8004b38:	695a      	ldr	r2, [r3, #20]
 8004b3a:	9205      	str	r2, [sp, #20]
 8004b3c:	699b      	ldr	r3, [r3, #24]
 8004b3e:	9305      	str	r3, [sp, #20]
 8004b40:	9b05      	ldr	r3, [sp, #20]
 8004b42:	e79e      	b.n	8004a82 <HAL_I2C_EV_IRQHandler+0x1e2>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b44:	681a      	ldr	r2, [r3, #0]
 8004b46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b4a:	601a      	str	r2, [r3, #0]
          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004b4c:	6823      	ldr	r3, [r4, #0]
 8004b4e:	685a      	ldr	r2, [r3, #4]
 8004b50:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8004b54:	d00c      	beq.n	8004b70 <HAL_I2C_EV_IRQHandler+0x2d0>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b56:	681a      	ldr	r2, [r3, #0]
 8004b58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b5c:	601a      	str	r2, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b5e:	2300      	movs	r3, #0
 8004b60:	9303      	str	r3, [sp, #12]
 8004b62:	6823      	ldr	r3, [r4, #0]
 8004b64:	695a      	ldr	r2, [r3, #20]
 8004b66:	9203      	str	r2, [sp, #12]
 8004b68:	699b      	ldr	r3, [r3, #24]
 8004b6a:	9303      	str	r3, [sp, #12]
 8004b6c:	9b03      	ldr	r3, [sp, #12]
 8004b6e:	e788      	b.n	8004a82 <HAL_I2C_EV_IRQHandler+0x1e2>
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b70:	2200      	movs	r2, #0
 8004b72:	9204      	str	r2, [sp, #16]
 8004b74:	695a      	ldr	r2, [r3, #20]
 8004b76:	9204      	str	r2, [sp, #16]
 8004b78:	699a      	ldr	r2, [r3, #24]
 8004b7a:	9204      	str	r2, [sp, #16]
 8004b7c:	9a04      	ldr	r2, [sp, #16]
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b84:	601a      	str	r2, [r3, #0]
 8004b86:	e77c      	b.n	8004a82 <HAL_I2C_EV_IRQHandler+0x1e2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004b88:	2801      	cmp	r0, #1
 8004b8a:	d010      	beq.n	8004bae <HAL_I2C_EV_IRQHandler+0x30e>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b8c:	681a      	ldr	r2, [r3, #0]
 8004b8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b92:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b94:	2300      	movs	r3, #0
 8004b96:	9306      	str	r3, [sp, #24]
 8004b98:	6823      	ldr	r3, [r4, #0]
 8004b9a:	695a      	ldr	r2, [r3, #20]
 8004b9c:	9206      	str	r2, [sp, #24]
 8004b9e:	699a      	ldr	r2, [r3, #24]
 8004ba0:	9206      	str	r2, [sp, #24]
 8004ba2:	9a06      	ldr	r2, [sp, #24]
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004baa:	601a      	str	r2, [r3, #0]
 8004bac:	e769      	b.n	8004a82 <HAL_I2C_EV_IRQHandler+0x1e2>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bb4:	601a      	str	r2, [r3, #0]
 8004bb6:	e7bc      	b.n	8004b32 <HAL_I2C_EV_IRQHandler+0x292>
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004bb8:	2810      	cmp	r0, #16
 8004bba:	d828      	bhi.n	8004c0e <HAL_I2C_EV_IRQHandler+0x36e>
 8004bbc:	4a63      	ldr	r2, [pc, #396]	; (8004d4c <HAL_I2C_EV_IRQHandler+0x4ac>)
 8004bbe:	40c2      	lsrs	r2, r0
 8004bc0:	f012 0f01 	tst.w	r2, #1
 8004bc4:	d023      	beq.n	8004c0e <HAL_I2C_EV_IRQHandler+0x36e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004bcc:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bce:	2300      	movs	r3, #0
 8004bd0:	9308      	str	r3, [sp, #32]
 8004bd2:	6823      	ldr	r3, [r4, #0]
 8004bd4:	695a      	ldr	r2, [r3, #20]
 8004bd6:	9208      	str	r2, [sp, #32]
 8004bd8:	699b      	ldr	r3, [r3, #24]
 8004bda:	9308      	str	r3, [sp, #32]
 8004bdc:	9b08      	ldr	r3, [sp, #32]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004bde:	6823      	ldr	r3, [r4, #0]
 8004be0:	685a      	ldr	r2, [r3, #4]
 8004be2:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8004be6:	f43f af4c 	beq.w	8004a82 <HAL_I2C_EV_IRQHandler+0x1e2>
 8004bea:	f510 3f80 	cmn.w	r0, #65536	; 0x10000
 8004bee:	d009      	beq.n	8004c04 <HAL_I2C_EV_IRQHandler+0x364>
 8004bf0:	3801      	subs	r0, #1
 8004bf2:	281f      	cmp	r0, #31
 8004bf4:	f63f af45 	bhi.w	8004a82 <HAL_I2C_EV_IRQHandler+0x1e2>
 8004bf8:	4a53      	ldr	r2, [pc, #332]	; (8004d48 <HAL_I2C_EV_IRQHandler+0x4a8>)
 8004bfa:	40c2      	lsrs	r2, r0
 8004bfc:	f012 0f01 	tst.w	r2, #1
 8004c00:	f43f af3f 	beq.w	8004a82 <HAL_I2C_EV_IRQHandler+0x1e2>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004c04:	685a      	ldr	r2, [r3, #4]
 8004c06:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004c0a:	605a      	str	r2, [r3, #4]
 8004c0c:	e739      	b.n	8004a82 <HAL_I2C_EV_IRQHandler+0x1e2>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c0e:	681a      	ldr	r2, [r3, #0]
 8004c10:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c14:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c16:	2300      	movs	r3, #0
 8004c18:	9307      	str	r3, [sp, #28]
 8004c1a:	6823      	ldr	r3, [r4, #0]
 8004c1c:	695a      	ldr	r2, [r3, #20]
 8004c1e:	9207      	str	r2, [sp, #28]
 8004c20:	699a      	ldr	r2, [r3, #24]
 8004c22:	9207      	str	r2, [sp, #28]
 8004c24:	9a07      	ldr	r2, [sp, #28]
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c2c:	601a      	str	r2, [r3, #0]
 8004c2e:	e7d6      	b.n	8004bde <HAL_I2C_EV_IRQHandler+0x33e>
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004c30:	f017 0f04 	tst.w	r7, #4
 8004c34:	f000 80d9 	beq.w	8004dea <HAL_I2C_EV_IRQHandler+0x54a>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004c38:	685e      	ldr	r6, [r3, #4]
 8004c3a:	f416 6f00 	tst.w	r6, #2048	; 0x800
 8004c3e:	f47f ae60 	bne.w	8004902 <HAL_I2C_EV_IRQHandler+0x62>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004c42:	f015 0f80 	tst.w	r5, #128	; 0x80
 8004c46:	d06e      	beq.n	8004d26 <HAL_I2C_EV_IRQHandler+0x486>
 8004c48:	f410 6f80 	tst.w	r0, #1024	; 0x400
 8004c4c:	d06b      	beq.n	8004d26 <HAL_I2C_EV_IRQHandler+0x486>
 8004c4e:	f015 0f04 	tst.w	r5, #4
 8004c52:	d16c      	bne.n	8004d2e <HAL_I2C_EV_IRQHandler+0x48e>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004c54:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8004c58:	b2d2      	uxtb	r2, r2
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004c5a:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
 8004c5e:	b2c9      	uxtb	r1, r1
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004c60:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004c62:	8d20      	ldrh	r0, [r4, #40]	; 0x28
 8004c64:	2800      	cmp	r0, #0
 8004c66:	d140      	bne.n	8004cea <HAL_I2C_EV_IRQHandler+0x44a>
 8004c68:	2a21      	cmp	r2, #33	; 0x21
 8004c6a:	d006      	beq.n	8004c7a <HAL_I2C_EV_IRQHandler+0x3da>
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004c6c:	2940      	cmp	r1, #64	; 0x40
 8004c6e:	f47f ae48 	bne.w	8004902 <HAL_I2C_EV_IRQHandler+0x62>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004c72:	2a22      	cmp	r2, #34	; 0x22
 8004c74:	f47f ae45 	bne.w	8004902 <HAL_I2C_EV_IRQHandler+0x62>
 8004c78:	e039      	b.n	8004cee <HAL_I2C_EV_IRQHandler+0x44e>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004c7a:	2d08      	cmp	r5, #8
 8004c7c:	d004      	beq.n	8004c88 <HAL_I2C_EV_IRQHandler+0x3e8>
 8004c7e:	2d20      	cmp	r5, #32
 8004c80:	d002      	beq.n	8004c88 <HAL_I2C_EV_IRQHandler+0x3e8>
 8004c82:	f515 3f80 	cmn.w	r5, #65536	; 0x10000
 8004c86:	d119      	bne.n	8004cbc <HAL_I2C_EV_IRQHandler+0x41c>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c88:	685a      	ldr	r2, [r3, #4]
 8004c8a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004c8e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c90:	6822      	ldr	r2, [r4, #0]
 8004c92:	6813      	ldr	r3, [r2, #0]
 8004c94:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004c98:	6013      	str	r3, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004c9e:	2320      	movs	r3, #32
 8004ca0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004ca4:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8004ca8:	b2db      	uxtb	r3, r3
 8004caa:	2b40      	cmp	r3, #64	; 0x40
 8004cac:	d016      	beq.n	8004cdc <HAL_I2C_EV_IRQHandler+0x43c>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004cb4:	4620      	mov	r0, r4
 8004cb6:	f7ff fc4f 	bl	8004558 <HAL_I2C_MasterTxCpltCallback>
 8004cba:	e622      	b.n	8004902 <HAL_I2C_EV_IRQHandler+0x62>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004cbc:	685a      	ldr	r2, [r3, #4]
 8004cbe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004cc2:	605a      	str	r2, [r3, #4]
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004cc4:	2311      	movs	r3, #17
 8004cc6:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004cce:	2320      	movs	r3, #32
 8004cd0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004cd4:	4620      	mov	r0, r4
 8004cd6:	f7ff fc3f 	bl	8004558 <HAL_I2C_MasterTxCpltCallback>
 8004cda:	e612      	b.n	8004902 <HAL_I2C_EV_IRQHandler+0x62>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cdc:	2300      	movs	r3, #0
 8004cde:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004ce2:	4620      	mov	r0, r4
 8004ce4:	f7ff fc3e 	bl	8004564 <HAL_I2C_MemTxCpltCallback>
 8004ce8:	e60b      	b.n	8004902 <HAL_I2C_EV_IRQHandler+0x62>
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004cea:	2a21      	cmp	r2, #33	; 0x21
 8004cec:	d1be      	bne.n	8004c6c <HAL_I2C_EV_IRQHandler+0x3cc>
    if (hi2c->XferCount == 0U)
 8004cee:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004cf0:	b292      	uxth	r2, r2
 8004cf2:	b922      	cbnz	r2, 8004cfe <HAL_I2C_EV_IRQHandler+0x45e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004cf4:	685a      	ldr	r2, [r3, #4]
 8004cf6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cfa:	605a      	str	r2, [r3, #4]
 8004cfc:	e601      	b.n	8004902 <HAL_I2C_EV_IRQHandler+0x62>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004cfe:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8004d02:	b2d2      	uxtb	r2, r2
 8004d04:	2a40      	cmp	r2, #64	; 0x40
 8004d06:	d00a      	beq.n	8004d1e <HAL_I2C_EV_IRQHandler+0x47e>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d08:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004d0a:	7812      	ldrb	r2, [r2, #0]
 8004d0c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004d0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d10:	3301      	adds	r3, #1
 8004d12:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8004d14:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004d16:	3b01      	subs	r3, #1
 8004d18:	b29b      	uxth	r3, r3
 8004d1a:	8563      	strh	r3, [r4, #42]	; 0x2a
 8004d1c:	e5f1      	b.n	8004902 <HAL_I2C_EV_IRQHandler+0x62>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004d1e:	4620      	mov	r0, r4
 8004d20:	f7ff fc21 	bl	8004566 <I2C_MemoryTransmit_TXE_BTF>
 8004d24:	e5ed      	b.n	8004902 <HAL_I2C_EV_IRQHandler+0x62>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004d26:	f015 0f04 	tst.w	r5, #4
 8004d2a:	f43f adea 	beq.w	8004902 <HAL_I2C_EV_IRQHandler+0x62>
 8004d2e:	f410 7f00 	tst.w	r0, #512	; 0x200
 8004d32:	f43f ade6 	beq.w	8004902 <HAL_I2C_EV_IRQHandler+0x62>
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004d36:	2921      	cmp	r1, #33	; 0x21
 8004d38:	d00a      	beq.n	8004d50 <HAL_I2C_EV_IRQHandler+0x4b0>
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8004d3a:	2a40      	cmp	r2, #64	; 0x40
 8004d3c:	f47f ade1 	bne.w	8004902 <HAL_I2C_EV_IRQHandler+0x62>
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004d40:	4620      	mov	r0, r4
 8004d42:	f7ff fc10 	bl	8004566 <I2C_MemoryTransmit_TXE_BTF>
 8004d46:	e5dc      	b.n	8004902 <HAL_I2C_EV_IRQHandler+0x62>
 8004d48:	80008081 	.word	0x80008081
 8004d4c:	00010014 	.word	0x00010014
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004d50:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004d52:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8004d56:	b2d2      	uxtb	r2, r2
 8004d58:	2a21      	cmp	r2, #33	; 0x21
 8004d5a:	f47f add2 	bne.w	8004902 <HAL_I2C_EV_IRQHandler+0x62>
    if (hi2c->XferCount != 0U)
 8004d5e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004d60:	b292      	uxth	r2, r2
 8004d62:	b152      	cbz	r2, 8004d7a <HAL_I2C_EV_IRQHandler+0x4da>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d64:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004d66:	7812      	ldrb	r2, [r2, #0]
 8004d68:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004d6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d6c:	3301      	adds	r3, #1
 8004d6e:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8004d70:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004d72:	3b01      	subs	r3, #1
 8004d74:	b29b      	uxth	r3, r3
 8004d76:	8563      	strh	r3, [r4, #42]	; 0x2a
 8004d78:	e5c3      	b.n	8004902 <HAL_I2C_EV_IRQHandler+0x62>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004d7a:	2908      	cmp	r1, #8
 8004d7c:	d004      	beq.n	8004d88 <HAL_I2C_EV_IRQHandler+0x4e8>
 8004d7e:	2920      	cmp	r1, #32
 8004d80:	d002      	beq.n	8004d88 <HAL_I2C_EV_IRQHandler+0x4e8>
 8004d82:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 8004d86:	d119      	bne.n	8004dbc <HAL_I2C_EV_IRQHandler+0x51c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d88:	685a      	ldr	r2, [r3, #4]
 8004d8a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004d8e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d90:	6822      	ldr	r2, [r4, #0]
 8004d92:	6813      	ldr	r3, [r2, #0]
 8004d94:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d98:	6013      	str	r3, [r2, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004d9e:	2320      	movs	r3, #32
 8004da0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004da4:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8004da8:	b2db      	uxtb	r3, r3
 8004daa:	2b40      	cmp	r3, #64	; 0x40
 8004dac:	d016      	beq.n	8004ddc <HAL_I2C_EV_IRQHandler+0x53c>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dae:	2300      	movs	r3, #0
 8004db0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004db4:	4620      	mov	r0, r4
 8004db6:	f7ff fbcf 	bl	8004558 <HAL_I2C_MasterTxCpltCallback>
 8004dba:	e5a2      	b.n	8004902 <HAL_I2C_EV_IRQHandler+0x62>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004dbc:	685a      	ldr	r2, [r3, #4]
 8004dbe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004dc2:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004dc4:	2311      	movs	r3, #17
 8004dc6:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004dce:	2320      	movs	r3, #32
 8004dd0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004dd4:	4620      	mov	r0, r4
 8004dd6:	f7ff fbbf 	bl	8004558 <HAL_I2C_MasterTxCpltCallback>
 8004dda:	e592      	b.n	8004902 <HAL_I2C_EV_IRQHandler+0x62>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004de2:	4620      	mov	r0, r4
 8004de4:	f7ff fbbe 	bl	8004564 <HAL_I2C_MemTxCpltCallback>
 8004de8:	e58b      	b.n	8004902 <HAL_I2C_EV_IRQHandler+0x62>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004dea:	685a      	ldr	r2, [r3, #4]
 8004dec:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8004df0:	f47f ad87 	bne.w	8004902 <HAL_I2C_EV_IRQHandler+0x62>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004df4:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004df8:	f000 808f 	beq.w	8004f1a <HAL_I2C_EV_IRQHandler+0x67a>
 8004dfc:	f410 6f80 	tst.w	r0, #1024	; 0x400
 8004e00:	f000 808b 	beq.w	8004f1a <HAL_I2C_EV_IRQHandler+0x67a>
 8004e04:	f015 0f04 	tst.w	r5, #4
 8004e08:	f040 808b 	bne.w	8004f22 <HAL_I2C_EV_IRQHandler+0x682>
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004e0c:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8004e10:	b2d2      	uxtb	r2, r2
 8004e12:	2a22      	cmp	r2, #34	; 0x22
 8004e14:	f47f ad75 	bne.w	8004902 <HAL_I2C_EV_IRQHandler+0x62>
    tmp = hi2c->XferCount;
 8004e18:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004e1a:	b292      	uxth	r2, r2
    if (tmp > 3U)
 8004e1c:	2a03      	cmp	r2, #3
 8004e1e:	d914      	bls.n	8004e4a <HAL_I2C_EV_IRQHandler+0x5aa>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e20:	691a      	ldr	r2, [r3, #16]
 8004e22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004e24:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8004e26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004e28:	3301      	adds	r3, #1
 8004e2a:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8004e2c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004e2e:	3b01      	subs	r3, #1
 8004e30:	b29b      	uxth	r3, r3
 8004e32:	8563      	strh	r3, [r4, #42]	; 0x2a
      if (hi2c->XferCount == (uint16_t)3)
 8004e34:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004e36:	b29b      	uxth	r3, r3
 8004e38:	2b03      	cmp	r3, #3
 8004e3a:	f47f ad62 	bne.w	8004902 <HAL_I2C_EV_IRQHandler+0x62>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004e3e:	6822      	ldr	r2, [r4, #0]
 8004e40:	6853      	ldr	r3, [r2, #4]
 8004e42:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e46:	6053      	str	r3, [r2, #4]
 8004e48:	e55b      	b.n	8004902 <HAL_I2C_EV_IRQHandler+0x62>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004e4a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004e4c:	2902      	cmp	r1, #2
 8004e4e:	d001      	beq.n	8004e54 <HAL_I2C_EV_IRQHandler+0x5b4>
 8004e50:	2a01      	cmp	r2, #1
 8004e52:	d904      	bls.n	8004e5e <HAL_I2C_EV_IRQHandler+0x5be>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004e54:	685a      	ldr	r2, [r3, #4]
 8004e56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e5a:	605a      	str	r2, [r3, #4]
 8004e5c:	e551      	b.n	8004902 <HAL_I2C_EV_IRQHandler+0x62>
  __IO uint32_t count = 0U;
 8004e5e:	2200      	movs	r2, #0
 8004e60:	920b      	str	r2, [sp, #44]	; 0x2c
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004e62:	4aa2      	ldr	r2, [pc, #648]	; (80050ec <HAL_I2C_EV_IRQHandler+0x84c>)
 8004e64:	6812      	ldr	r2, [r2, #0]
 8004e66:	f246 11a8 	movw	r1, #25000	; 0x61a8
 8004e6a:	fbb2 f2f1 	udiv	r2, r2, r1
 8004e6e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8004e72:	920b      	str	r2, [sp, #44]	; 0x2c
    count--;
 8004e74:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004e76:	3a01      	subs	r2, #1
 8004e78:	920b      	str	r2, [sp, #44]	; 0x2c
    if (count == 0U)
 8004e7a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004e7c:	b342      	cbz	r2, 8004ed0 <HAL_I2C_EV_IRQHandler+0x630>
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	f412 7f00 	tst.w	r2, #512	; 0x200
 8004e84:	d1f6      	bne.n	8004e74 <HAL_I2C_EV_IRQHandler+0x5d4>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e8c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004e8e:	6822      	ldr	r2, [r4, #0]
 8004e90:	6853      	ldr	r3, [r2, #4]
 8004e92:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004e96:	6053      	str	r3, [r2, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e98:	6823      	ldr	r3, [r4, #0]
 8004e9a:	691a      	ldr	r2, [r3, #16]
 8004e9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004e9e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004ea0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004ea2:	3301      	adds	r3, #1
 8004ea4:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8004ea6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004ea8:	3b01      	subs	r3, #1
 8004eaa:	b29b      	uxth	r3, r3
 8004eac:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004eae:	2320      	movs	r3, #32
 8004eb0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004eb4:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8004eb8:	b2db      	uxtb	r3, r3
 8004eba:	2b40      	cmp	r3, #64	; 0x40
 8004ebc:	d025      	beq.n	8004f0a <HAL_I2C_EV_IRQHandler+0x66a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004ec4:	2312      	movs	r3, #18
 8004ec6:	6323      	str	r3, [r4, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004ec8:	4620      	mov	r0, r4
 8004eca:	f7ff fb46 	bl	800455a <HAL_I2C_MasterRxCpltCallback>
 8004ece:	e518      	b.n	8004902 <HAL_I2C_EV_IRQHandler+0x62>
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ed0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004ed2:	f042 0220 	orr.w	r2, r2, #32
 8004ed6:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004ed8:	685a      	ldr	r2, [r3, #4]
 8004eda:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004ede:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ee0:	6823      	ldr	r3, [r4, #0]
 8004ee2:	691a      	ldr	r2, [r3, #16]
 8004ee4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004ee6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004ee8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004eea:	3301      	adds	r3, #1
 8004eec:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8004eee:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004ef0:	3b01      	subs	r3, #1
 8004ef2:	b29b      	uxth	r3, r3
 8004ef4:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004ef6:	2320      	movs	r3, #32
 8004ef8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004efc:	2300      	movs	r3, #0
 8004efe:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004f02:	4620      	mov	r0, r4
 8004f04:	f7ff fb98 	bl	8004638 <HAL_I2C_ErrorCallback>
 8004f08:	e4fb      	b.n	8004902 <HAL_I2C_EV_IRQHandler+0x62>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004f10:	6323      	str	r3, [r4, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004f12:	4620      	mov	r0, r4
 8004f14:	f7ff fb8f 	bl	8004636 <HAL_I2C_MemRxCpltCallback>
 8004f18:	e4f3      	b.n	8004902 <HAL_I2C_EV_IRQHandler+0x62>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004f1a:	f015 0f04 	tst.w	r5, #4
 8004f1e:	f43f acf0 	beq.w	8004902 <HAL_I2C_EV_IRQHandler+0x62>
 8004f22:	f410 7f00 	tst.w	r0, #512	; 0x200
 8004f26:	f43f acec 	beq.w	8004902 <HAL_I2C_EV_IRQHandler+0x62>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004f2a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  if (hi2c->XferCount == 4U)
 8004f2c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004f2e:	b292      	uxth	r2, r2
 8004f30:	2a04      	cmp	r2, #4
 8004f32:	d012      	beq.n	8004f5a <HAL_I2C_EV_IRQHandler+0x6ba>
  else if (hi2c->XferCount == 3U)
 8004f34:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004f36:	b292      	uxth	r2, r2
 8004f38:	2a03      	cmp	r2, #3
 8004f3a:	d01e      	beq.n	8004f7a <HAL_I2C_EV_IRQHandler+0x6da>
  else if (hi2c->XferCount == 2U)
 8004f3c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004f3e:	b292      	uxth	r2, r2
 8004f40:	2a02      	cmp	r2, #2
 8004f42:	d033      	beq.n	8004fac <HAL_I2C_EV_IRQHandler+0x70c>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f44:	691a      	ldr	r2, [r3, #16]
 8004f46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f48:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004f4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f4c:	3301      	adds	r3, #1
 8004f4e:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8004f50:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004f52:	3b01      	subs	r3, #1
 8004f54:	b29b      	uxth	r3, r3
 8004f56:	8563      	strh	r3, [r4, #42]	; 0x2a
 8004f58:	e4d3      	b.n	8004902 <HAL_I2C_EV_IRQHandler+0x62>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004f5a:	685a      	ldr	r2, [r3, #4]
 8004f5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f60:	605a      	str	r2, [r3, #4]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f62:	6823      	ldr	r3, [r4, #0]
 8004f64:	691a      	ldr	r2, [r3, #16]
 8004f66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f68:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004f6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f6c:	3301      	adds	r3, #1
 8004f6e:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8004f70:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004f72:	3b01      	subs	r3, #1
 8004f74:	b29b      	uxth	r3, r3
 8004f76:	8563      	strh	r3, [r4, #42]	; 0x2a
 8004f78:	e4c3      	b.n	8004902 <HAL_I2C_EV_IRQHandler+0x62>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004f7a:	685a      	ldr	r2, [r3, #4]
 8004f7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f80:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004f82:	2904      	cmp	r1, #4
 8004f84:	d006      	beq.n	8004f94 <HAL_I2C_EV_IRQHandler+0x6f4>
 8004f86:	2902      	cmp	r1, #2
 8004f88:	d004      	beq.n	8004f94 <HAL_I2C_EV_IRQHandler+0x6f4>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f8a:	6822      	ldr	r2, [r4, #0]
 8004f8c:	6813      	ldr	r3, [r2, #0]
 8004f8e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f92:	6013      	str	r3, [r2, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f94:	6823      	ldr	r3, [r4, #0]
 8004f96:	691a      	ldr	r2, [r3, #16]
 8004f98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f9a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004f9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f9e:	3301      	adds	r3, #1
 8004fa0:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8004fa2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004fa4:	3b01      	subs	r3, #1
 8004fa6:	b29b      	uxth	r3, r3
 8004fa8:	8563      	strh	r3, [r4, #42]	; 0x2a
 8004faa:	e4aa      	b.n	8004902 <HAL_I2C_EV_IRQHandler+0x62>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004fac:	2901      	cmp	r1, #1
 8004fae:	d00a      	beq.n	8004fc6 <HAL_I2C_EV_IRQHandler+0x726>
 8004fb0:	2910      	cmp	r1, #16
 8004fb2:	d008      	beq.n	8004fc6 <HAL_I2C_EV_IRQHandler+0x726>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004fb4:	2904      	cmp	r1, #4
 8004fb6:	d035      	beq.n	8005024 <HAL_I2C_EV_IRQHandler+0x784>
 8004fb8:	2902      	cmp	r1, #2
 8004fba:	d033      	beq.n	8005024 <HAL_I2C_EV_IRQHandler+0x784>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fbc:	681a      	ldr	r2, [r3, #0]
 8004fbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fc2:	601a      	str	r2, [r3, #0]
 8004fc4:	e003      	b.n	8004fce <HAL_I2C_EV_IRQHandler+0x72e>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fcc:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fce:	6823      	ldr	r3, [r4, #0]
 8004fd0:	691a      	ldr	r2, [r3, #16]
 8004fd2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004fd4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004fd6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004fd8:	1c53      	adds	r3, r2, #1
 8004fda:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8004fdc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004fde:	3b01      	subs	r3, #1
 8004fe0:	b29b      	uxth	r3, r3
 8004fe2:	8563      	strh	r3, [r4, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fe4:	6823      	ldr	r3, [r4, #0]
 8004fe6:	691b      	ldr	r3, [r3, #16]
 8004fe8:	7053      	strb	r3, [r2, #1]
    hi2c->pBuffPtr++;
 8004fea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004fec:	3301      	adds	r3, #1
 8004fee:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8004ff0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004ff2:	3b01      	subs	r3, #1
 8004ff4:	b29b      	uxth	r3, r3
 8004ff6:	8563      	strh	r3, [r4, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004ff8:	6822      	ldr	r2, [r4, #0]
 8004ffa:	6853      	ldr	r3, [r2, #4]
 8004ffc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005000:	6053      	str	r3, [r2, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005002:	2320      	movs	r3, #32
 8005004:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005008:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 800500c:	b2db      	uxtb	r3, r3
 800500e:	2b40      	cmp	r3, #64	; 0x40
 8005010:	d00d      	beq.n	800502e <HAL_I2C_EV_IRQHandler+0x78e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005012:	2300      	movs	r3, #0
 8005014:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005018:	2312      	movs	r3, #18
 800501a:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800501c:	4620      	mov	r0, r4
 800501e:	f7ff fa9c 	bl	800455a <HAL_I2C_MasterRxCpltCallback>
 8005022:	e46e      	b.n	8004902 <HAL_I2C_EV_IRQHandler+0x62>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800502a:	601a      	str	r2, [r3, #0]
 800502c:	e7cf      	b.n	8004fce <HAL_I2C_EV_IRQHandler+0x72e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800502e:	2300      	movs	r3, #0
 8005030:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8005034:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005036:	4620      	mov	r0, r4
 8005038:	f7ff fafd 	bl	8004636 <HAL_I2C_MemRxCpltCallback>
 800503c:	e461      	b.n	8004902 <HAL_I2C_EV_IRQHandler+0x62>
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800503e:	699d      	ldr	r5, [r3, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005040:	695a      	ldr	r2, [r3, #20]
 8005042:	e443      	b.n	80048cc <HAL_I2C_EV_IRQHandler+0x2c>
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005044:	685a      	ldr	r2, [r3, #4]
 8005046:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800504a:	605a      	str	r2, [r3, #4]
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800504c:	f085 0104 	eor.w	r1, r5, #4
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005050:	f3c1 0180 	ubfx	r1, r1, #2, #1
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005054:	f015 0f80 	tst.w	r5, #128	; 0x80
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005058:	bf0c      	ite	eq
 800505a:	89a2      	ldrheq	r2, [r4, #12]
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800505c:	8b22      	ldrhne	r2, [r4, #24]
    __HAL_UNLOCK(hi2c);
 800505e:	2300      	movs	r3, #0
 8005060:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005064:	4620      	mov	r0, r4
 8005066:	f7ff fa7b 	bl	8004560 <HAL_I2C_AddrCallback>
 800506a:	e44a      	b.n	8004902 <HAL_I2C_EV_IRQHandler+0x62>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800506c:	f012 0f10 	tst.w	r2, #16
 8005070:	d002      	beq.n	8005078 <HAL_I2C_EV_IRQHandler+0x7d8>
 8005072:	f410 7f00 	tst.w	r0, #512	; 0x200
 8005076:	d13b      	bne.n	80050f0 <HAL_I2C_EV_IRQHandler+0x850>
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005078:	f001 01f7 	and.w	r1, r1, #247	; 0xf7
 800507c:	2921      	cmp	r1, #33	; 0x21
 800507e:	f000 80f6 	beq.w	800526e <HAL_I2C_EV_IRQHandler+0x9ce>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005082:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005086:	f000 813d 	beq.w	8005304 <HAL_I2C_EV_IRQHandler+0xa64>
 800508a:	f410 6f80 	tst.w	r0, #1024	; 0x400
 800508e:	f000 8139 	beq.w	8005304 <HAL_I2C_EV_IRQHandler+0xa64>
 8005092:	f012 0f04 	tst.w	r2, #4
 8005096:	f040 8139 	bne.w	800530c <HAL_I2C_EV_IRQHandler+0xa6c>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800509a:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 800509e:	b2d1      	uxtb	r1, r2
  if (hi2c->XferCount != 0U)
 80050a0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80050a2:	b292      	uxth	r2, r2
 80050a4:	2a00      	cmp	r2, #0
 80050a6:	f43f ac2c 	beq.w	8004902 <HAL_I2C_EV_IRQHandler+0x62>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050aa:	691a      	ldr	r2, [r3, #16]
 80050ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80050ae:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80050b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80050b2:	3301      	adds	r3, #1
 80050b4:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 80050b6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80050b8:	3b01      	subs	r3, #1
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80050be:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80050c0:	b29b      	uxth	r3, r3
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	f47f ac1d 	bne.w	8004902 <HAL_I2C_EV_IRQHandler+0x62>
 80050c8:	292a      	cmp	r1, #42	; 0x2a
 80050ca:	f47f ac1a 	bne.w	8004902 <HAL_I2C_EV_IRQHandler+0x62>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80050ce:	6822      	ldr	r2, [r4, #0]
 80050d0:	6853      	ldr	r3, [r2, #4]
 80050d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80050d6:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80050d8:	2322      	movs	r3, #34	; 0x22
 80050da:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80050dc:	2328      	movs	r3, #40	; 0x28
 80050de:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80050e2:	4620      	mov	r0, r4
 80050e4:	f7ff fa3b 	bl	800455e <HAL_I2C_SlaveRxCpltCallback>
 80050e8:	e40b      	b.n	8004902 <HAL_I2C_EV_IRQHandler+0x62>
 80050ea:	bf00      	nop
 80050ec:	20000000 	.word	0x20000000
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80050f0:	f894 503d 	ldrb.w	r5, [r4, #61]	; 0x3d
 80050f4:	b2ed      	uxtb	r5, r5
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80050f6:	685a      	ldr	r2, [r3, #4]
 80050f8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80050fc:	605a      	str	r2, [r3, #4]
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80050fe:	2300      	movs	r3, #0
 8005100:	930d      	str	r3, [sp, #52]	; 0x34
 8005102:	6823      	ldr	r3, [r4, #0]
 8005104:	695a      	ldr	r2, [r3, #20]
 8005106:	920d      	str	r2, [sp, #52]	; 0x34
 8005108:	681a      	ldr	r2, [r3, #0]
 800510a:	f042 0201 	orr.w	r2, r2, #1
 800510e:	601a      	str	r2, [r3, #0]
 8005110:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005112:	6822      	ldr	r2, [r4, #0]
 8005114:	6813      	ldr	r3, [r2, #0]
 8005116:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800511a:	6013      	str	r3, [r2, #0]
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800511c:	6823      	ldr	r3, [r4, #0]
 800511e:	685a      	ldr	r2, [r3, #4]
 8005120:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8005124:	d038      	beq.n	8005198 <HAL_I2C_EV_IRQHandler+0x8f8>
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005126:	f005 02f7 	and.w	r2, r5, #247	; 0xf7
 800512a:	2a22      	cmp	r2, #34	; 0x22
 800512c:	d01f      	beq.n	800516e <HAL_I2C_EV_IRQHandler+0x8ce>
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 800512e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8005130:	6812      	ldr	r2, [r2, #0]
 8005132:	6852      	ldr	r2, [r2, #4]
 8005134:	b292      	uxth	r2, r2
 8005136:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 8005138:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800513a:	b292      	uxth	r2, r2
 800513c:	b11a      	cbz	r2, 8005146 <HAL_I2C_EV_IRQHandler+0x8a6>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800513e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005140:	f042 0204 	orr.w	r2, r2, #4
 8005144:	6422      	str	r2, [r4, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005146:	685a      	ldr	r2, [r3, #4]
 8005148:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800514c:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800514e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8005150:	f7fe f802 	bl	8003158 <HAL_DMA_GetState>
 8005154:	2801      	cmp	r0, #1
 8005156:	d01f      	beq.n	8005198 <HAL_I2C_EV_IRQHandler+0x8f8>
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005158:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800515a:	4a77      	ldr	r2, [pc, #476]	; (8005338 <HAL_I2C_EV_IRQHandler+0xa98>)
 800515c:	635a      	str	r2, [r3, #52]	; 0x34
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800515e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8005160:	f7fd ffae 	bl	80030c0 <HAL_DMA_Abort_IT>
 8005164:	b1c0      	cbz	r0, 8005198 <HAL_I2C_EV_IRQHandler+0x8f8>
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005166:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8005168:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800516a:	4798      	blx	r3
 800516c:	e014      	b.n	8005198 <HAL_I2C_EV_IRQHandler+0x8f8>
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 800516e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005170:	6812      	ldr	r2, [r2, #0]
 8005172:	6852      	ldr	r2, [r2, #4]
 8005174:	b292      	uxth	r2, r2
 8005176:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 8005178:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800517a:	b292      	uxth	r2, r2
 800517c:	b11a      	cbz	r2, 8005186 <HAL_I2C_EV_IRQHandler+0x8e6>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800517e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005180:	f042 0204 	orr.w	r2, r2, #4
 8005184:	6422      	str	r2, [r4, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005186:	685a      	ldr	r2, [r3, #4]
 8005188:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800518c:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800518e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8005190:	f7fd ffe2 	bl	8003158 <HAL_DMA_GetState>
 8005194:	2801      	cmp	r0, #1
 8005196:	d142      	bne.n	800521e <HAL_I2C_EV_IRQHandler+0x97e>
  if (hi2c->XferCount != 0U)
 8005198:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800519a:	b29b      	uxth	r3, r3
 800519c:	b323      	cbz	r3, 80051e8 <HAL_I2C_EV_IRQHandler+0x948>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800519e:	6823      	ldr	r3, [r4, #0]
 80051a0:	695a      	ldr	r2, [r3, #20]
 80051a2:	f012 0f04 	tst.w	r2, #4
 80051a6:	d009      	beq.n	80051bc <HAL_I2C_EV_IRQHandler+0x91c>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051a8:	691a      	ldr	r2, [r3, #16]
 80051aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80051ac:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80051ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80051b0:	3301      	adds	r3, #1
 80051b2:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80051b4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80051b6:	3b01      	subs	r3, #1
 80051b8:	b29b      	uxth	r3, r3
 80051ba:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80051bc:	6823      	ldr	r3, [r4, #0]
 80051be:	695a      	ldr	r2, [r3, #20]
 80051c0:	f012 0f40 	tst.w	r2, #64	; 0x40
 80051c4:	d009      	beq.n	80051da <HAL_I2C_EV_IRQHandler+0x93a>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051c6:	691a      	ldr	r2, [r3, #16]
 80051c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80051ca:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80051cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80051ce:	3301      	adds	r3, #1
 80051d0:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80051d2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80051d4:	3b01      	subs	r3, #1
 80051d6:	b29b      	uxth	r3, r3
 80051d8:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->XferCount != 0U)
 80051da:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80051dc:	b29b      	uxth	r3, r3
 80051de:	b11b      	cbz	r3, 80051e8 <HAL_I2C_EV_IRQHandler+0x948>
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80051e0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80051e2:	f043 0304 	orr.w	r3, r3, #4
 80051e6:	6423      	str	r3, [r4, #64]	; 0x40
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80051e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80051ea:	bb23      	cbnz	r3, 8005236 <HAL_I2C_EV_IRQHandler+0x996>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80051ec:	2d2a      	cmp	r5, #42	; 0x2a
 80051ee:	d027      	beq.n	8005240 <HAL_I2C_EV_IRQHandler+0x9a0>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80051f0:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80051f4:	b2db      	uxtb	r3, r3
 80051f6:	2b28      	cmp	r3, #40	; 0x28
 80051f8:	d02b      	beq.n	8005252 <HAL_I2C_EV_IRQHandler+0x9b2>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80051fa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80051fc:	2b22      	cmp	r3, #34	; 0x22
 80051fe:	d002      	beq.n	8005206 <HAL_I2C_EV_IRQHandler+0x966>
 8005200:	2d22      	cmp	r5, #34	; 0x22
 8005202:	f47f ab7e 	bne.w	8004902 <HAL_I2C_EV_IRQHandler+0x62>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005206:	2300      	movs	r3, #0
 8005208:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800520a:	2220      	movs	r2, #32
 800520c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005210:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005214:	4620      	mov	r0, r4
 8005216:	f7ff f9a2 	bl	800455e <HAL_I2C_SlaveRxCpltCallback>
 800521a:	f7ff bb72 	b.w	8004902 <HAL_I2C_EV_IRQHandler+0x62>
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800521e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005220:	4a45      	ldr	r2, [pc, #276]	; (8005338 <HAL_I2C_EV_IRQHandler+0xa98>)
 8005222:	635a      	str	r2, [r3, #52]	; 0x34
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005224:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8005226:	f7fd ff4b 	bl	80030c0 <HAL_DMA_Abort_IT>
 800522a:	2800      	cmp	r0, #0
 800522c:	d0b4      	beq.n	8005198 <HAL_I2C_EV_IRQHandler+0x8f8>
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800522e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8005230:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005232:	4798      	blx	r3
 8005234:	e7b0      	b.n	8005198 <HAL_I2C_EV_IRQHandler+0x8f8>
    I2C_ITError(hi2c);
 8005236:	4620      	mov	r0, r4
 8005238:	f7ff fa72 	bl	8004720 <I2C_ITError>
 800523c:	f7ff bb61 	b.w	8004902 <HAL_I2C_EV_IRQHandler+0x62>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005240:	2300      	movs	r3, #0
 8005242:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005244:	2328      	movs	r3, #40	; 0x28
 8005246:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800524a:	4620      	mov	r0, r4
 800524c:	f7ff f987 	bl	800455e <HAL_I2C_SlaveRxCpltCallback>
 8005250:	e7ce      	b.n	80051f0 <HAL_I2C_EV_IRQHandler+0x950>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005252:	4b3a      	ldr	r3, [pc, #232]	; (800533c <HAL_I2C_EV_IRQHandler+0xa9c>)
 8005254:	62e3      	str	r3, [r4, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005256:	2300      	movs	r3, #0
 8005258:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800525a:	2220      	movs	r2, #32
 800525c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005260:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005264:	4620      	mov	r0, r4
 8005266:	f7ff f97c 	bl	8004562 <HAL_I2C_ListenCpltCallback>
 800526a:	f7ff bb4a 	b.w	8004902 <HAL_I2C_EV_IRQHandler+0x62>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800526e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005272:	d02e      	beq.n	80052d2 <HAL_I2C_EV_IRQHandler+0xa32>
 8005274:	f410 6f80 	tst.w	r0, #1024	; 0x400
 8005278:	d02b      	beq.n	80052d2 <HAL_I2C_EV_IRQHandler+0xa32>
 800527a:	f012 0f04 	tst.w	r2, #4
 800527e:	d12c      	bne.n	80052da <HAL_I2C_EV_IRQHandler+0xa3a>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005280:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8005284:	b2d1      	uxtb	r1, r2
  if (hi2c->XferCount != 0U)
 8005286:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005288:	b292      	uxth	r2, r2
 800528a:	2a00      	cmp	r2, #0
 800528c:	f43f ab39 	beq.w	8004902 <HAL_I2C_EV_IRQHandler+0x62>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005290:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005292:	7812      	ldrb	r2, [r2, #0]
 8005294:	611a      	str	r2, [r3, #16]
    hi2c->pBuffPtr++;
 8005296:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005298:	3301      	adds	r3, #1
 800529a:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 800529c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800529e:	3b01      	subs	r3, #1
 80052a0:	b29b      	uxth	r3, r3
 80052a2:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80052a4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80052a6:	b29b      	uxth	r3, r3
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	f47f ab2a 	bne.w	8004902 <HAL_I2C_EV_IRQHandler+0x62>
 80052ae:	2929      	cmp	r1, #41	; 0x29
 80052b0:	f47f ab27 	bne.w	8004902 <HAL_I2C_EV_IRQHandler+0x62>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80052b4:	6822      	ldr	r2, [r4, #0]
 80052b6:	6853      	ldr	r3, [r2, #4]
 80052b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80052bc:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80052be:	2321      	movs	r3, #33	; 0x21
 80052c0:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80052c2:	2328      	movs	r3, #40	; 0x28
 80052c4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80052c8:	4620      	mov	r0, r4
 80052ca:	f7ff f947 	bl	800455c <HAL_I2C_SlaveTxCpltCallback>
 80052ce:	f7ff bb18 	b.w	8004902 <HAL_I2C_EV_IRQHandler+0x62>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80052d2:	f012 0f04 	tst.w	r2, #4
 80052d6:	f43f ab14 	beq.w	8004902 <HAL_I2C_EV_IRQHandler+0x62>
 80052da:	f410 7f00 	tst.w	r0, #512	; 0x200
 80052de:	f43f ab10 	beq.w	8004902 <HAL_I2C_EV_IRQHandler+0x62>
  if (hi2c->XferCount != 0U)
 80052e2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80052e4:	b292      	uxth	r2, r2
 80052e6:	2a00      	cmp	r2, #0
 80052e8:	f43f ab0b 	beq.w	8004902 <HAL_I2C_EV_IRQHandler+0x62>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80052ec:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80052ee:	7812      	ldrb	r2, [r2, #0]
 80052f0:	611a      	str	r2, [r3, #16]
    hi2c->pBuffPtr++;
 80052f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80052f4:	3301      	adds	r3, #1
 80052f6:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 80052f8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80052fa:	3b01      	subs	r3, #1
 80052fc:	b29b      	uxth	r3, r3
 80052fe:	8563      	strh	r3, [r4, #42]	; 0x2a
 8005300:	f7ff baff 	b.w	8004902 <HAL_I2C_EV_IRQHandler+0x62>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005304:	f012 0f04 	tst.w	r2, #4
 8005308:	f43f aafb 	beq.w	8004902 <HAL_I2C_EV_IRQHandler+0x62>
 800530c:	f410 7f00 	tst.w	r0, #512	; 0x200
 8005310:	f43f aaf7 	beq.w	8004902 <HAL_I2C_EV_IRQHandler+0x62>
  if (hi2c->XferCount != 0U)
 8005314:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005316:	b292      	uxth	r2, r2
 8005318:	2a00      	cmp	r2, #0
 800531a:	f43f aaf2 	beq.w	8004902 <HAL_I2C_EV_IRQHandler+0x62>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800531e:	691a      	ldr	r2, [r3, #16]
 8005320:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005322:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005324:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005326:	3301      	adds	r3, #1
 8005328:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 800532a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800532c:	3b01      	subs	r3, #1
 800532e:	b29b      	uxth	r3, r3
 8005330:	8563      	strh	r3, [r4, #42]	; 0x2a
      }
 8005332:	f7ff bae6 	b.w	8004902 <HAL_I2C_EV_IRQHandler+0x62>
 8005336:	bf00      	nop
 8005338:	0800463d 	.word	0x0800463d
 800533c:	ffff0000 	.word	0xffff0000

08005340 <HAL_I2C_ER_IRQHandler>:
{
 8005340:	b570      	push	{r4, r5, r6, lr}
 8005342:	4604      	mov	r4, r0
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8005344:	6803      	ldr	r3, [r0, #0]
 8005346:	695d      	ldr	r5, [r3, #20]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8005348:	685a      	ldr	r2, [r3, #4]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800534a:	f890 103e 	ldrb.w	r1, [r0, #62]	; 0x3e
 800534e:	b2c9      	uxtb	r1, r1
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005350:	f415 7f80 	tst.w	r5, #256	; 0x100
 8005354:	d012      	beq.n	800537c <HAL_I2C_ER_IRQHandler+0x3c>
 8005356:	f412 7f80 	tst.w	r2, #256	; 0x100
 800535a:	d00f      	beq.n	800537c <HAL_I2C_ER_IRQHandler+0x3c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800535c:	f46f 7080 	mvn.w	r0, #256	; 0x100
 8005360:	6158      	str	r0, [r3, #20]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8005362:	6820      	ldr	r0, [r4, #0]
 8005364:	6803      	ldr	r3, [r0, #0]
 8005366:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800536a:	6003      	str	r3, [r0, #0]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800536c:	f415 7f00 	tst.w	r5, #512	; 0x200
 8005370:	d122      	bne.n	80053b8 <HAL_I2C_ER_IRQHandler+0x78>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005372:	f415 6f80 	tst.w	r5, #1024	; 0x400
 8005376:	d152      	bne.n	800541e <HAL_I2C_ER_IRQHandler+0xde>
    error |= HAL_I2C_ERROR_BERR;
 8005378:	2601      	movs	r6, #1
 800537a:	e0b5      	b.n	80054e8 <HAL_I2C_ER_IRQHandler+0x1a8>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800537c:	f415 7f00 	tst.w	r5, #512	; 0x200
 8005380:	d01c      	beq.n	80053bc <HAL_I2C_ER_IRQHandler+0x7c>
 8005382:	f412 7f80 	tst.w	r2, #256	; 0x100
 8005386:	d105      	bne.n	8005394 <HAL_I2C_ER_IRQHandler+0x54>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005388:	f415 6f80 	tst.w	r5, #1024	; 0x400
 800538c:	f040 80b3 	bne.w	80054f6 <HAL_I2C_ER_IRQHandler+0x1b6>
 8005390:	2600      	movs	r6, #0
 8005392:	e0a9      	b.n	80054e8 <HAL_I2C_ER_IRQHandler+0x1a8>
 8005394:	2600      	movs	r6, #0
    error |= HAL_I2C_ERROR_ARLO;
 8005396:	f046 0602 	orr.w	r6, r6, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800539a:	6823      	ldr	r3, [r4, #0]
 800539c:	f46f 7000 	mvn.w	r0, #512	; 0x200
 80053a0:	6158      	str	r0, [r3, #20]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80053a2:	f415 6f80 	tst.w	r5, #1024	; 0x400
 80053a6:	d113      	bne.n	80053d0 <HAL_I2C_ER_IRQHandler+0x90>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80053a8:	f415 6f00 	tst.w	r5, #2048	; 0x800
 80053ac:	d030      	beq.n	8005410 <HAL_I2C_ER_IRQHandler+0xd0>
 80053ae:	f412 7f80 	tst.w	r2, #256	; 0x100
 80053b2:	f000 809d 	beq.w	80054f0 <HAL_I2C_ER_IRQHandler+0x1b0>
 80053b6:	e025      	b.n	8005404 <HAL_I2C_ER_IRQHandler+0xc4>
    error |= HAL_I2C_ERROR_BERR;
 80053b8:	2601      	movs	r6, #1
 80053ba:	e7ec      	b.n	8005396 <HAL_I2C_ER_IRQHandler+0x56>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80053bc:	f415 6f80 	tst.w	r5, #1024	; 0x400
 80053c0:	f000 8091 	beq.w	80054e6 <HAL_I2C_ER_IRQHandler+0x1a6>
 80053c4:	f412 7f80 	tst.w	r2, #256	; 0x100
 80053c8:	d101      	bne.n	80053ce <HAL_I2C_ER_IRQHandler+0x8e>
 80053ca:	2600      	movs	r6, #0
 80053cc:	e090      	b.n	80054f0 <HAL_I2C_ER_IRQHandler+0x1b0>
 80053ce:	2600      	movs	r6, #0
    tmp2 = hi2c->XferCount;
 80053d0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80053d2:	b29b      	uxth	r3, r3
    tmp3 = hi2c->State;
 80053d4:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 80053d8:	b2d2      	uxtb	r2, r2
    tmp4 = hi2c->PreviousState;
 80053da:	6b20      	ldr	r0, [r4, #48]	; 0x30
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80053dc:	2920      	cmp	r1, #32
 80053de:	d020      	beq.n	8005422 <HAL_I2C_ER_IRQHandler+0xe2>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053e0:	6823      	ldr	r3, [r4, #0]
 80053e2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80053e6:	615a      	str	r2, [r3, #20]
      error |= HAL_I2C_ERROR_AF;
 80053e8:	f046 0604 	orr.w	r6, r6, #4
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80053ec:	2910      	cmp	r1, #16
 80053ee:	d001      	beq.n	80053f4 <HAL_I2C_ER_IRQHandler+0xb4>
 80053f0:	2940      	cmp	r1, #64	; 0x40
 80053f2:	d104      	bne.n	80053fe <HAL_I2C_ER_IRQHandler+0xbe>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053f4:	6822      	ldr	r2, [r4, #0]
 80053f6:	6813      	ldr	r3, [r2, #0]
 80053f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80053fc:	6013      	str	r3, [r2, #0]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80053fe:	f415 6f00 	tst.w	r5, #2048	; 0x800
 8005402:	d005      	beq.n	8005410 <HAL_I2C_ER_IRQHandler+0xd0>
    error |= HAL_I2C_ERROR_OVR;
 8005404:	f046 0608 	orr.w	r6, r6, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005408:	6823      	ldr	r3, [r4, #0]
 800540a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800540e:	615a      	str	r2, [r3, #20]
    hi2c->ErrorCode |= error;
 8005410:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005412:	431e      	orrs	r6, r3
 8005414:	6426      	str	r6, [r4, #64]	; 0x40
    I2C_ITError(hi2c);
 8005416:	4620      	mov	r0, r4
 8005418:	f7ff f982 	bl	8004720 <I2C_ITError>
}
 800541c:	e06a      	b.n	80054f4 <HAL_I2C_ER_IRQHandler+0x1b4>
    error |= HAL_I2C_ERROR_BERR;
 800541e:	2601      	movs	r6, #1
 8005420:	e7d6      	b.n	80053d0 <HAL_I2C_ER_IRQHandler+0x90>
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8005422:	b92b      	cbnz	r3, 8005430 <HAL_I2C_ER_IRQHandler+0xf0>
 8005424:	f002 03f7 	and.w	r3, r2, #247	; 0xf7
 8005428:	2b21      	cmp	r3, #33	; 0x21
 800542a:	d00a      	beq.n	8005442 <HAL_I2C_ER_IRQHandler+0x102>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800542c:	2a28      	cmp	r2, #40	; 0x28
 800542e:	d006      	beq.n	800543e <HAL_I2C_ER_IRQHandler+0xfe>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005430:	6823      	ldr	r3, [r4, #0]
 8005432:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005436:	615a      	str	r2, [r3, #20]
      error |= HAL_I2C_ERROR_AF;
 8005438:	f046 0604 	orr.w	r6, r6, #4
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800543c:	e7df      	b.n	80053fe <HAL_I2C_ER_IRQHandler+0xbe>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800543e:	2821      	cmp	r0, #33	; 0x21
 8005440:	d1f6      	bne.n	8005430 <HAL_I2C_ER_IRQHandler+0xf0>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005442:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8005446:	b2db      	uxtb	r3, r3
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005448:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800544a:	2a08      	cmp	r2, #8
 800544c:	d001      	beq.n	8005452 <HAL_I2C_ER_IRQHandler+0x112>
 800544e:	2a20      	cmp	r2, #32
 8005450:	d101      	bne.n	8005456 <HAL_I2C_ER_IRQHandler+0x116>
 8005452:	2b28      	cmp	r3, #40	; 0x28
 8005454:	d009      	beq.n	800546a <HAL_I2C_ER_IRQHandler+0x12a>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005456:	2b21      	cmp	r3, #33	; 0x21
 8005458:	d022      	beq.n	80054a0 <HAL_I2C_ER_IRQHandler+0x160>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800545a:	6823      	ldr	r3, [r4, #0]
 800545c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005460:	615a      	str	r2, [r3, #20]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005462:	f415 6f00 	tst.w	r5, #2048	; 0x800
 8005466:	d043      	beq.n	80054f0 <HAL_I2C_ER_IRQHandler+0x1b0>
 8005468:	e7cc      	b.n	8005404 <HAL_I2C_ER_IRQHandler+0xc4>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800546a:	4b24      	ldr	r3, [pc, #144]	; (80054fc <HAL_I2C_ER_IRQHandler+0x1bc>)
 800546c:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800546e:	6822      	ldr	r2, [r4, #0]
 8005470:	6853      	ldr	r3, [r2, #4]
 8005472:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005476:	6053      	str	r3, [r2, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005478:	6823      	ldr	r3, [r4, #0]
 800547a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800547e:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005480:	6822      	ldr	r2, [r4, #0]
 8005482:	6813      	ldr	r3, [r2, #0]
 8005484:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005488:	6013      	str	r3, [r2, #0]
    hi2c->PreviousState = I2C_STATE_NONE;
 800548a:	2300      	movs	r3, #0
 800548c:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800548e:	2220      	movs	r2, #32
 8005490:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005494:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 8005498:	4620      	mov	r0, r4
 800549a:	f7ff f862 	bl	8004562 <HAL_I2C_ListenCpltCallback>
 800549e:	e7e0      	b.n	8005462 <HAL_I2C_ER_IRQHandler+0x122>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80054a0:	4b16      	ldr	r3, [pc, #88]	; (80054fc <HAL_I2C_ER_IRQHandler+0x1bc>)
 80054a2:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80054a4:	2321      	movs	r3, #33	; 0x21
 80054a6:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80054a8:	2320      	movs	r3, #32
 80054aa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80054ae:	2300      	movs	r3, #0
 80054b0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80054b4:	6822      	ldr	r2, [r4, #0]
 80054b6:	6853      	ldr	r3, [r2, #4]
 80054b8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80054bc:	6053      	str	r3, [r2, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054be:	6823      	ldr	r3, [r4, #0]
 80054c0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80054c4:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054c6:	6822      	ldr	r2, [r4, #0]
 80054c8:	6813      	ldr	r3, [r2, #0]
 80054ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80054ce:	6013      	str	r3, [r2, #0]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80054d0:	6823      	ldr	r3, [r4, #0]
 80054d2:	695a      	ldr	r2, [r3, #20]
 80054d4:	f012 0f80 	tst.w	r2, #128	; 0x80
    hi2c->Instance->DR = 0x00U;
 80054d8:	bf1c      	itt	ne
 80054da:	2200      	movne	r2, #0
 80054dc:	611a      	strne	r2, [r3, #16]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80054de:	4620      	mov	r0, r4
 80054e0:	f7ff f83c 	bl	800455c <HAL_I2C_SlaveTxCpltCallback>
 80054e4:	e7bd      	b.n	8005462 <HAL_I2C_ER_IRQHandler+0x122>
 80054e6:	2600      	movs	r6, #0
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80054e8:	f415 6f00 	tst.w	r5, #2048	; 0x800
 80054ec:	f47f af5f 	bne.w	80053ae <HAL_I2C_ER_IRQHandler+0x6e>
  if (error != HAL_I2C_ERROR_NONE)
 80054f0:	2e00      	cmp	r6, #0
 80054f2:	d18d      	bne.n	8005410 <HAL_I2C_ER_IRQHandler+0xd0>
}
 80054f4:	bd70      	pop	{r4, r5, r6, pc}
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80054f6:	2600      	movs	r6, #0
 80054f8:	e7fa      	b.n	80054f0 <HAL_I2C_ER_IRQHandler+0x1b0>
 80054fa:	bf00      	nop
 80054fc:	ffff0000 	.word	0xffff0000

08005500 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005500:	2800      	cmp	r0, #0
 8005502:	f000 8201 	beq.w	8005908 <HAL_RCC_OscConfig+0x408>
{
 8005506:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800550a:	b082      	sub	sp, #8
 800550c:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800550e:	6803      	ldr	r3, [r0, #0]
 8005510:	f013 0f01 	tst.w	r3, #1
 8005514:	d02c      	beq.n	8005570 <HAL_RCC_OscConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005516:	4b9f      	ldr	r3, [pc, #636]	; (8005794 <HAL_RCC_OscConfig+0x294>)
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	f003 030c 	and.w	r3, r3, #12
 800551e:	2b04      	cmp	r3, #4
 8005520:	d01d      	beq.n	800555e <HAL_RCC_OscConfig+0x5e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005522:	4b9c      	ldr	r3, [pc, #624]	; (8005794 <HAL_RCC_OscConfig+0x294>)
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	f003 030c 	and.w	r3, r3, #12
 800552a:	2b08      	cmp	r3, #8
 800552c:	d012      	beq.n	8005554 <HAL_RCC_OscConfig+0x54>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800552e:	6863      	ldr	r3, [r4, #4]
 8005530:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005534:	d041      	beq.n	80055ba <HAL_RCC_OscConfig+0xba>
 8005536:	2b00      	cmp	r3, #0
 8005538:	d155      	bne.n	80055e6 <HAL_RCC_OscConfig+0xe6>
 800553a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800553e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8005542:	681a      	ldr	r2, [r3, #0]
 8005544:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005548:	601a      	str	r2, [r3, #0]
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005550:	601a      	str	r2, [r3, #0]
 8005552:	e037      	b.n	80055c4 <HAL_RCC_OscConfig+0xc4>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005554:	4b8f      	ldr	r3, [pc, #572]	; (8005794 <HAL_RCC_OscConfig+0x294>)
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800555c:	d0e7      	beq.n	800552e <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800555e:	4b8d      	ldr	r3, [pc, #564]	; (8005794 <HAL_RCC_OscConfig+0x294>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8005566:	d003      	beq.n	8005570 <HAL_RCC_OscConfig+0x70>
 8005568:	6863      	ldr	r3, [r4, #4]
 800556a:	2b00      	cmp	r3, #0
 800556c:	f000 81ce 	beq.w	800590c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005570:	6823      	ldr	r3, [r4, #0]
 8005572:	f013 0f02 	tst.w	r3, #2
 8005576:	d075      	beq.n	8005664 <HAL_RCC_OscConfig+0x164>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005578:	4b86      	ldr	r3, [pc, #536]	; (8005794 <HAL_RCC_OscConfig+0x294>)
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	f013 0f0c 	tst.w	r3, #12
 8005580:	d05f      	beq.n	8005642 <HAL_RCC_OscConfig+0x142>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005582:	4b84      	ldr	r3, [pc, #528]	; (8005794 <HAL_RCC_OscConfig+0x294>)
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	f003 030c 	and.w	r3, r3, #12
 800558a:	2b08      	cmp	r3, #8
 800558c:	d054      	beq.n	8005638 <HAL_RCC_OscConfig+0x138>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800558e:	6923      	ldr	r3, [r4, #16]
 8005590:	2b00      	cmp	r3, #0
 8005592:	f000 808a 	beq.w	80056aa <HAL_RCC_OscConfig+0x1aa>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005596:	4b80      	ldr	r3, [pc, #512]	; (8005798 <HAL_RCC_OscConfig+0x298>)
 8005598:	2201      	movs	r2, #1
 800559a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800559c:	f7fd fcfc 	bl	8002f98 <HAL_GetTick>
 80055a0:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055a2:	4e7c      	ldr	r6, [pc, #496]	; (8005794 <HAL_RCC_OscConfig+0x294>)
 80055a4:	6833      	ldr	r3, [r6, #0]
 80055a6:	f013 0f02 	tst.w	r3, #2
 80055aa:	d175      	bne.n	8005698 <HAL_RCC_OscConfig+0x198>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80055ac:	f7fd fcf4 	bl	8002f98 <HAL_GetTick>
 80055b0:	1b40      	subs	r0, r0, r5
 80055b2:	2802      	cmp	r0, #2
 80055b4:	d9f6      	bls.n	80055a4 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_TIMEOUT;
 80055b6:	2003      	movs	r0, #3
 80055b8:	e1ad      	b.n	8005916 <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80055ba:	4a76      	ldr	r2, [pc, #472]	; (8005794 <HAL_RCC_OscConfig+0x294>)
 80055bc:	6813      	ldr	r3, [r2, #0]
 80055be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055c2:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80055c4:	6863      	ldr	r3, [r4, #4]
 80055c6:	b343      	cbz	r3, 800561a <HAL_RCC_OscConfig+0x11a>
        tickstart = HAL_GetTick();
 80055c8:	f7fd fce6 	bl	8002f98 <HAL_GetTick>
 80055cc:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055ce:	4e71      	ldr	r6, [pc, #452]	; (8005794 <HAL_RCC_OscConfig+0x294>)
 80055d0:	6833      	ldr	r3, [r6, #0]
 80055d2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80055d6:	d1cb      	bne.n	8005570 <HAL_RCC_OscConfig+0x70>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80055d8:	f7fd fcde 	bl	8002f98 <HAL_GetTick>
 80055dc:	1b40      	subs	r0, r0, r5
 80055de:	2864      	cmp	r0, #100	; 0x64
 80055e0:	d9f6      	bls.n	80055d0 <HAL_RCC_OscConfig+0xd0>
            return HAL_TIMEOUT;
 80055e2:	2003      	movs	r0, #3
 80055e4:	e197      	b.n	8005916 <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80055e6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80055ea:	d009      	beq.n	8005600 <HAL_RCC_OscConfig+0x100>
 80055ec:	4b69      	ldr	r3, [pc, #420]	; (8005794 <HAL_RCC_OscConfig+0x294>)
 80055ee:	681a      	ldr	r2, [r3, #0]
 80055f0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80055f4:	601a      	str	r2, [r3, #0]
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80055fc:	601a      	str	r2, [r3, #0]
 80055fe:	e7e1      	b.n	80055c4 <HAL_RCC_OscConfig+0xc4>
 8005600:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005604:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8005608:	681a      	ldr	r2, [r3, #0]
 800560a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800560e:	601a      	str	r2, [r3, #0]
 8005610:	681a      	ldr	r2, [r3, #0]
 8005612:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005616:	601a      	str	r2, [r3, #0]
 8005618:	e7d4      	b.n	80055c4 <HAL_RCC_OscConfig+0xc4>
        tickstart = HAL_GetTick();
 800561a:	f7fd fcbd 	bl	8002f98 <HAL_GetTick>
 800561e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005620:	4e5c      	ldr	r6, [pc, #368]	; (8005794 <HAL_RCC_OscConfig+0x294>)
 8005622:	6833      	ldr	r3, [r6, #0]
 8005624:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8005628:	d0a2      	beq.n	8005570 <HAL_RCC_OscConfig+0x70>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800562a:	f7fd fcb5 	bl	8002f98 <HAL_GetTick>
 800562e:	1b40      	subs	r0, r0, r5
 8005630:	2864      	cmp	r0, #100	; 0x64
 8005632:	d9f6      	bls.n	8005622 <HAL_RCC_OscConfig+0x122>
            return HAL_TIMEOUT;
 8005634:	2003      	movs	r0, #3
 8005636:	e16e      	b.n	8005916 <HAL_RCC_OscConfig+0x416>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005638:	4b56      	ldr	r3, [pc, #344]	; (8005794 <HAL_RCC_OscConfig+0x294>)
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8005640:	d1a5      	bne.n	800558e <HAL_RCC_OscConfig+0x8e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005642:	4b54      	ldr	r3, [pc, #336]	; (8005794 <HAL_RCC_OscConfig+0x294>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f013 0f02 	tst.w	r3, #2
 800564a:	d003      	beq.n	8005654 <HAL_RCC_OscConfig+0x154>
 800564c:	6923      	ldr	r3, [r4, #16]
 800564e:	2b01      	cmp	r3, #1
 8005650:	f040 815e 	bne.w	8005910 <HAL_RCC_OscConfig+0x410>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005654:	4a4f      	ldr	r2, [pc, #316]	; (8005794 <HAL_RCC_OscConfig+0x294>)
 8005656:	6813      	ldr	r3, [r2, #0]
 8005658:	6961      	ldr	r1, [r4, #20]
 800565a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800565e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005662:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005664:	6823      	ldr	r3, [r4, #0]
 8005666:	f013 0f08 	tst.w	r3, #8
 800566a:	d03d      	beq.n	80056e8 <HAL_RCC_OscConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800566c:	69a3      	ldr	r3, [r4, #24]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d066      	beq.n	8005740 <HAL_RCC_OscConfig+0x240>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005672:	4b49      	ldr	r3, [pc, #292]	; (8005798 <HAL_RCC_OscConfig+0x298>)
 8005674:	2201      	movs	r2, #1
 8005676:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800567a:	f7fd fc8d 	bl	8002f98 <HAL_GetTick>
 800567e:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005680:	4e44      	ldr	r6, [pc, #272]	; (8005794 <HAL_RCC_OscConfig+0x294>)
 8005682:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005684:	f013 0f02 	tst.w	r3, #2
 8005688:	d121      	bne.n	80056ce <HAL_RCC_OscConfig+0x1ce>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800568a:	f7fd fc85 	bl	8002f98 <HAL_GetTick>
 800568e:	1b40      	subs	r0, r0, r5
 8005690:	2802      	cmp	r0, #2
 8005692:	d9f6      	bls.n	8005682 <HAL_RCC_OscConfig+0x182>
        {
          return HAL_TIMEOUT;
 8005694:	2003      	movs	r0, #3
 8005696:	e13e      	b.n	8005916 <HAL_RCC_OscConfig+0x416>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005698:	4a3e      	ldr	r2, [pc, #248]	; (8005794 <HAL_RCC_OscConfig+0x294>)
 800569a:	6813      	ldr	r3, [r2, #0]
 800569c:	6961      	ldr	r1, [r4, #20]
 800569e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80056a2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80056a6:	6013      	str	r3, [r2, #0]
 80056a8:	e7dc      	b.n	8005664 <HAL_RCC_OscConfig+0x164>
        __HAL_RCC_HSI_DISABLE();
 80056aa:	4b3b      	ldr	r3, [pc, #236]	; (8005798 <HAL_RCC_OscConfig+0x298>)
 80056ac:	2200      	movs	r2, #0
 80056ae:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80056b0:	f7fd fc72 	bl	8002f98 <HAL_GetTick>
 80056b4:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056b6:	4e37      	ldr	r6, [pc, #220]	; (8005794 <HAL_RCC_OscConfig+0x294>)
 80056b8:	6833      	ldr	r3, [r6, #0]
 80056ba:	f013 0f02 	tst.w	r3, #2
 80056be:	d0d1      	beq.n	8005664 <HAL_RCC_OscConfig+0x164>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056c0:	f7fd fc6a 	bl	8002f98 <HAL_GetTick>
 80056c4:	1b40      	subs	r0, r0, r5
 80056c6:	2802      	cmp	r0, #2
 80056c8:	d9f6      	bls.n	80056b8 <HAL_RCC_OscConfig+0x1b8>
            return HAL_TIMEOUT;
 80056ca:	2003      	movs	r0, #3
 80056cc:	e123      	b.n	8005916 <HAL_RCC_OscConfig+0x416>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80056ce:	4b33      	ldr	r3, [pc, #204]	; (800579c <HAL_RCC_OscConfig+0x29c>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a33      	ldr	r2, [pc, #204]	; (80057a0 <HAL_RCC_OscConfig+0x2a0>)
 80056d4:	fba2 2303 	umull	r2, r3, r2, r3
 80056d8:	0a5b      	lsrs	r3, r3, #9
 80056da:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 80056dc:	bf00      	nop
  }
  while (Delay --);
 80056de:	9b01      	ldr	r3, [sp, #4]
 80056e0:	1e5a      	subs	r2, r3, #1
 80056e2:	9201      	str	r2, [sp, #4]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d1f9      	bne.n	80056dc <HAL_RCC_OscConfig+0x1dc>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80056e8:	6823      	ldr	r3, [r4, #0]
 80056ea:	f013 0f04 	tst.w	r3, #4
 80056ee:	f000 809b 	beq.w	8005828 <HAL_RCC_OscConfig+0x328>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80056f2:	4b28      	ldr	r3, [pc, #160]	; (8005794 <HAL_RCC_OscConfig+0x294>)
 80056f4:	69db      	ldr	r3, [r3, #28]
 80056f6:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80056fa:	d134      	bne.n	8005766 <HAL_RCC_OscConfig+0x266>
      __HAL_RCC_PWR_CLK_ENABLE();
 80056fc:	4b25      	ldr	r3, [pc, #148]	; (8005794 <HAL_RCC_OscConfig+0x294>)
 80056fe:	69da      	ldr	r2, [r3, #28]
 8005700:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005704:	61da      	str	r2, [r3, #28]
 8005706:	69db      	ldr	r3, [r3, #28]
 8005708:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800570c:	9300      	str	r3, [sp, #0]
 800570e:	9b00      	ldr	r3, [sp, #0]
      pwrclkchanged = SET;
 8005710:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005712:	4b24      	ldr	r3, [pc, #144]	; (80057a4 <HAL_RCC_OscConfig+0x2a4>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f413 7f80 	tst.w	r3, #256	; 0x100
 800571a:	d026      	beq.n	800576a <HAL_RCC_OscConfig+0x26a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800571c:	68e3      	ldr	r3, [r4, #12]
 800571e:	2b01      	cmp	r3, #1
 8005720:	d042      	beq.n	80057a8 <HAL_RCC_OscConfig+0x2a8>
 8005722:	2b00      	cmp	r3, #0
 8005724:	d158      	bne.n	80057d8 <HAL_RCC_OscConfig+0x2d8>
 8005726:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800572a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800572e:	6a1a      	ldr	r2, [r3, #32]
 8005730:	f022 0201 	bic.w	r2, r2, #1
 8005734:	621a      	str	r2, [r3, #32]
 8005736:	6a1a      	ldr	r2, [r3, #32]
 8005738:	f022 0204 	bic.w	r2, r2, #4
 800573c:	621a      	str	r2, [r3, #32]
 800573e:	e038      	b.n	80057b2 <HAL_RCC_OscConfig+0x2b2>
      __HAL_RCC_LSI_DISABLE();
 8005740:	4b15      	ldr	r3, [pc, #84]	; (8005798 <HAL_RCC_OscConfig+0x298>)
 8005742:	2200      	movs	r2, #0
 8005744:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8005748:	f7fd fc26 	bl	8002f98 <HAL_GetTick>
 800574c:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800574e:	4e11      	ldr	r6, [pc, #68]	; (8005794 <HAL_RCC_OscConfig+0x294>)
 8005750:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005752:	f013 0f02 	tst.w	r3, #2
 8005756:	d0c7      	beq.n	80056e8 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005758:	f7fd fc1e 	bl	8002f98 <HAL_GetTick>
 800575c:	1b40      	subs	r0, r0, r5
 800575e:	2802      	cmp	r0, #2
 8005760:	d9f6      	bls.n	8005750 <HAL_RCC_OscConfig+0x250>
          return HAL_TIMEOUT;
 8005762:	2003      	movs	r0, #3
 8005764:	e0d7      	b.n	8005916 <HAL_RCC_OscConfig+0x416>
    FlagStatus       pwrclkchanged = RESET;
 8005766:	2500      	movs	r5, #0
 8005768:	e7d3      	b.n	8005712 <HAL_RCC_OscConfig+0x212>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800576a:	4a0e      	ldr	r2, [pc, #56]	; (80057a4 <HAL_RCC_OscConfig+0x2a4>)
 800576c:	6813      	ldr	r3, [r2, #0]
 800576e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005772:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8005774:	f7fd fc10 	bl	8002f98 <HAL_GetTick>
 8005778:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800577a:	4f0a      	ldr	r7, [pc, #40]	; (80057a4 <HAL_RCC_OscConfig+0x2a4>)
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005782:	d1cb      	bne.n	800571c <HAL_RCC_OscConfig+0x21c>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005784:	f7fd fc08 	bl	8002f98 <HAL_GetTick>
 8005788:	1b80      	subs	r0, r0, r6
 800578a:	2864      	cmp	r0, #100	; 0x64
 800578c:	d9f6      	bls.n	800577c <HAL_RCC_OscConfig+0x27c>
          return HAL_TIMEOUT;
 800578e:	2003      	movs	r0, #3
 8005790:	e0c1      	b.n	8005916 <HAL_RCC_OscConfig+0x416>
 8005792:	bf00      	nop
 8005794:	40021000 	.word	0x40021000
 8005798:	42420000 	.word	0x42420000
 800579c:	20000000 	.word	0x20000000
 80057a0:	10624dd3 	.word	0x10624dd3
 80057a4:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80057a8:	4a5e      	ldr	r2, [pc, #376]	; (8005924 <HAL_RCC_OscConfig+0x424>)
 80057aa:	6a13      	ldr	r3, [r2, #32]
 80057ac:	f043 0301 	orr.w	r3, r3, #1
 80057b0:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80057b2:	68e3      	ldr	r3, [r4, #12]
 80057b4:	b333      	cbz	r3, 8005804 <HAL_RCC_OscConfig+0x304>
      tickstart = HAL_GetTick();
 80057b6:	f7fd fbef 	bl	8002f98 <HAL_GetTick>
 80057ba:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057bc:	4f59      	ldr	r7, [pc, #356]	; (8005924 <HAL_RCC_OscConfig+0x424>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057be:	f241 3888 	movw	r8, #5000	; 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057c2:	6a3b      	ldr	r3, [r7, #32]
 80057c4:	f013 0f02 	tst.w	r3, #2
 80057c8:	d12d      	bne.n	8005826 <HAL_RCC_OscConfig+0x326>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057ca:	f7fd fbe5 	bl	8002f98 <HAL_GetTick>
 80057ce:	1b80      	subs	r0, r0, r6
 80057d0:	4540      	cmp	r0, r8
 80057d2:	d9f6      	bls.n	80057c2 <HAL_RCC_OscConfig+0x2c2>
          return HAL_TIMEOUT;
 80057d4:	2003      	movs	r0, #3
 80057d6:	e09e      	b.n	8005916 <HAL_RCC_OscConfig+0x416>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80057d8:	2b05      	cmp	r3, #5
 80057da:	d009      	beq.n	80057f0 <HAL_RCC_OscConfig+0x2f0>
 80057dc:	4b51      	ldr	r3, [pc, #324]	; (8005924 <HAL_RCC_OscConfig+0x424>)
 80057de:	6a1a      	ldr	r2, [r3, #32]
 80057e0:	f022 0201 	bic.w	r2, r2, #1
 80057e4:	621a      	str	r2, [r3, #32]
 80057e6:	6a1a      	ldr	r2, [r3, #32]
 80057e8:	f022 0204 	bic.w	r2, r2, #4
 80057ec:	621a      	str	r2, [r3, #32]
 80057ee:	e7e0      	b.n	80057b2 <HAL_RCC_OscConfig+0x2b2>
 80057f0:	4b4c      	ldr	r3, [pc, #304]	; (8005924 <HAL_RCC_OscConfig+0x424>)
 80057f2:	6a1a      	ldr	r2, [r3, #32]
 80057f4:	f042 0204 	orr.w	r2, r2, #4
 80057f8:	621a      	str	r2, [r3, #32]
 80057fa:	6a1a      	ldr	r2, [r3, #32]
 80057fc:	f042 0201 	orr.w	r2, r2, #1
 8005800:	621a      	str	r2, [r3, #32]
 8005802:	e7d6      	b.n	80057b2 <HAL_RCC_OscConfig+0x2b2>
      tickstart = HAL_GetTick();
 8005804:	f7fd fbc8 	bl	8002f98 <HAL_GetTick>
 8005808:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800580a:	4f46      	ldr	r7, [pc, #280]	; (8005924 <HAL_RCC_OscConfig+0x424>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800580c:	f241 3888 	movw	r8, #5000	; 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005810:	6a3b      	ldr	r3, [r7, #32]
 8005812:	f013 0f02 	tst.w	r3, #2
 8005816:	d006      	beq.n	8005826 <HAL_RCC_OscConfig+0x326>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005818:	f7fd fbbe 	bl	8002f98 <HAL_GetTick>
 800581c:	1b80      	subs	r0, r0, r6
 800581e:	4540      	cmp	r0, r8
 8005820:	d9f6      	bls.n	8005810 <HAL_RCC_OscConfig+0x310>
          return HAL_TIMEOUT;
 8005822:	2003      	movs	r0, #3
 8005824:	e077      	b.n	8005916 <HAL_RCC_OscConfig+0x416>
    if (pwrclkchanged == SET)
 8005826:	b9e5      	cbnz	r5, 8005862 <HAL_RCC_OscConfig+0x362>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005828:	69e3      	ldr	r3, [r4, #28]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d072      	beq.n	8005914 <HAL_RCC_OscConfig+0x414>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800582e:	4a3d      	ldr	r2, [pc, #244]	; (8005924 <HAL_RCC_OscConfig+0x424>)
 8005830:	6852      	ldr	r2, [r2, #4]
 8005832:	f002 020c 	and.w	r2, r2, #12
 8005836:	2a08      	cmp	r2, #8
 8005838:	d056      	beq.n	80058e8 <HAL_RCC_OscConfig+0x3e8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800583a:	2b02      	cmp	r3, #2
 800583c:	d017      	beq.n	800586e <HAL_RCC_OscConfig+0x36e>
        __HAL_RCC_PLL_DISABLE();
 800583e:	4b3a      	ldr	r3, [pc, #232]	; (8005928 <HAL_RCC_OscConfig+0x428>)
 8005840:	2200      	movs	r2, #0
 8005842:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8005844:	f7fd fba8 	bl	8002f98 <HAL_GetTick>
 8005848:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800584a:	4d36      	ldr	r5, [pc, #216]	; (8005924 <HAL_RCC_OscConfig+0x424>)
 800584c:	682b      	ldr	r3, [r5, #0]
 800584e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8005852:	d047      	beq.n	80058e4 <HAL_RCC_OscConfig+0x3e4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005854:	f7fd fba0 	bl	8002f98 <HAL_GetTick>
 8005858:	1b00      	subs	r0, r0, r4
 800585a:	2802      	cmp	r0, #2
 800585c:	d9f6      	bls.n	800584c <HAL_RCC_OscConfig+0x34c>
            return HAL_TIMEOUT;
 800585e:	2003      	movs	r0, #3
 8005860:	e059      	b.n	8005916 <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_PWR_CLK_DISABLE();
 8005862:	4a30      	ldr	r2, [pc, #192]	; (8005924 <HAL_RCC_OscConfig+0x424>)
 8005864:	69d3      	ldr	r3, [r2, #28]
 8005866:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800586a:	61d3      	str	r3, [r2, #28]
 800586c:	e7dc      	b.n	8005828 <HAL_RCC_OscConfig+0x328>
        __HAL_RCC_PLL_DISABLE();
 800586e:	4b2e      	ldr	r3, [pc, #184]	; (8005928 <HAL_RCC_OscConfig+0x428>)
 8005870:	2200      	movs	r2, #0
 8005872:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8005874:	f7fd fb90 	bl	8002f98 <HAL_GetTick>
 8005878:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800587a:	4e2a      	ldr	r6, [pc, #168]	; (8005924 <HAL_RCC_OscConfig+0x424>)
 800587c:	6833      	ldr	r3, [r6, #0]
 800587e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8005882:	d006      	beq.n	8005892 <HAL_RCC_OscConfig+0x392>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005884:	f7fd fb88 	bl	8002f98 <HAL_GetTick>
 8005888:	1b40      	subs	r0, r0, r5
 800588a:	2802      	cmp	r0, #2
 800588c:	d9f6      	bls.n	800587c <HAL_RCC_OscConfig+0x37c>
            return HAL_TIMEOUT;
 800588e:	2003      	movs	r0, #3
 8005890:	e041      	b.n	8005916 <HAL_RCC_OscConfig+0x416>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005892:	6a23      	ldr	r3, [r4, #32]
 8005894:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005898:	d01a      	beq.n	80058d0 <HAL_RCC_OscConfig+0x3d0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800589a:	4922      	ldr	r1, [pc, #136]	; (8005924 <HAL_RCC_OscConfig+0x424>)
 800589c:	684a      	ldr	r2, [r1, #4]
 800589e:	6a23      	ldr	r3, [r4, #32]
 80058a0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80058a2:	4303      	orrs	r3, r0
 80058a4:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80058a8:	4313      	orrs	r3, r2
 80058aa:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 80058ac:	4b1e      	ldr	r3, [pc, #120]	; (8005928 <HAL_RCC_OscConfig+0x428>)
 80058ae:	2201      	movs	r2, #1
 80058b0:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 80058b2:	f7fd fb71 	bl	8002f98 <HAL_GetTick>
 80058b6:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80058b8:	4d1a      	ldr	r5, [pc, #104]	; (8005924 <HAL_RCC_OscConfig+0x424>)
 80058ba:	682b      	ldr	r3, [r5, #0]
 80058bc:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80058c0:	d10e      	bne.n	80058e0 <HAL_RCC_OscConfig+0x3e0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058c2:	f7fd fb69 	bl	8002f98 <HAL_GetTick>
 80058c6:	1b00      	subs	r0, r0, r4
 80058c8:	2802      	cmp	r0, #2
 80058ca:	d9f6      	bls.n	80058ba <HAL_RCC_OscConfig+0x3ba>
            return HAL_TIMEOUT;
 80058cc:	2003      	movs	r0, #3
 80058ce:	e022      	b.n	8005916 <HAL_RCC_OscConfig+0x416>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80058d0:	4a14      	ldr	r2, [pc, #80]	; (8005924 <HAL_RCC_OscConfig+0x424>)
 80058d2:	6853      	ldr	r3, [r2, #4]
 80058d4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80058d8:	68a1      	ldr	r1, [r4, #8]
 80058da:	430b      	orrs	r3, r1
 80058dc:	6053      	str	r3, [r2, #4]
 80058de:	e7dc      	b.n	800589a <HAL_RCC_OscConfig+0x39a>
  return HAL_OK;
 80058e0:	2000      	movs	r0, #0
 80058e2:	e018      	b.n	8005916 <HAL_RCC_OscConfig+0x416>
 80058e4:	2000      	movs	r0, #0
 80058e6:	e016      	b.n	8005916 <HAL_RCC_OscConfig+0x416>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	d017      	beq.n	800591c <HAL_RCC_OscConfig+0x41c>
        pll_config = RCC->CFGR;
 80058ec:	4b0d      	ldr	r3, [pc, #52]	; (8005924 <HAL_RCC_OscConfig+0x424>)
 80058ee:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058f0:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 80058f4:	6a22      	ldr	r2, [r4, #32]
 80058f6:	4291      	cmp	r1, r2
 80058f8:	d112      	bne.n	8005920 <HAL_RCC_OscConfig+0x420>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80058fa:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058fe:	6a60      	ldr	r0, [r4, #36]	; 0x24
        return HAL_ERROR;
 8005900:	1a18      	subs	r0, r3, r0
 8005902:	bf18      	it	ne
 8005904:	2001      	movne	r0, #1
 8005906:	e006      	b.n	8005916 <HAL_RCC_OscConfig+0x416>
    return HAL_ERROR;
 8005908:	2001      	movs	r0, #1
}
 800590a:	4770      	bx	lr
        return HAL_ERROR;
 800590c:	2001      	movs	r0, #1
 800590e:	e002      	b.n	8005916 <HAL_RCC_OscConfig+0x416>
        return HAL_ERROR;
 8005910:	2001      	movs	r0, #1
 8005912:	e000      	b.n	8005916 <HAL_RCC_OscConfig+0x416>
  return HAL_OK;
 8005914:	2000      	movs	r0, #0
}
 8005916:	b002      	add	sp, #8
 8005918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_ERROR;
 800591c:	2001      	movs	r0, #1
 800591e:	e7fa      	b.n	8005916 <HAL_RCC_OscConfig+0x416>
          return HAL_ERROR;
 8005920:	2001      	movs	r0, #1
 8005922:	e7f8      	b.n	8005916 <HAL_RCC_OscConfig+0x416>
 8005924:	40021000 	.word	0x40021000
 8005928:	42420000 	.word	0x42420000

0800592c <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 800592c:	4b0f      	ldr	r3, [pc, #60]	; (800596c <HAL_RCC_GetSysClockFreq+0x40>)
 800592e:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8005930:	f003 020c 	and.w	r2, r3, #12
 8005934:	2a08      	cmp	r2, #8
 8005936:	d001      	beq.n	800593c <HAL_RCC_GetSysClockFreq+0x10>
      sysclockfreq = HSE_VALUE;
 8005938:	480d      	ldr	r0, [pc, #52]	; (8005970 <HAL_RCC_GetSysClockFreq+0x44>)
}
 800593a:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800593c:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8005940:	490c      	ldr	r1, [pc, #48]	; (8005974 <HAL_RCC_GetSysClockFreq+0x48>)
 8005942:	5c88      	ldrb	r0, [r1, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005944:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8005948:	d00b      	beq.n	8005962 <HAL_RCC_GetSysClockFreq+0x36>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800594a:	4b08      	ldr	r3, [pc, #32]	; (800596c <HAL_RCC_GetSysClockFreq+0x40>)
 800594c:	685b      	ldr	r3, [r3, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800594e:	4a08      	ldr	r2, [pc, #32]	; (8005970 <HAL_RCC_GetSysClockFreq+0x44>)
 8005950:	fb02 f000 	mul.w	r0, r2, r0
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005954:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8005958:	4a07      	ldr	r2, [pc, #28]	; (8005978 <HAL_RCC_GetSysClockFreq+0x4c>)
 800595a:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800595c:	fbb0 f0f3 	udiv	r0, r0, r3
 8005960:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005962:	4b06      	ldr	r3, [pc, #24]	; (800597c <HAL_RCC_GetSysClockFreq+0x50>)
 8005964:	fb03 f000 	mul.w	r0, r3, r0
 8005968:	4770      	bx	lr
 800596a:	bf00      	nop
 800596c:	40021000 	.word	0x40021000
 8005970:	007a1200 	.word	0x007a1200
 8005974:	0800c63c 	.word	0x0800c63c
 8005978:	0800c64c 	.word	0x0800c64c
 800597c:	003d0900 	.word	0x003d0900

08005980 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8005980:	2800      	cmp	r0, #0
 8005982:	f000 80a2 	beq.w	8005aca <HAL_RCC_ClockConfig+0x14a>
{
 8005986:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800598a:	460d      	mov	r5, r1
 800598c:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800598e:	4b53      	ldr	r3, [pc, #332]	; (8005adc <HAL_RCC_ClockConfig+0x15c>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f003 0307 	and.w	r3, r3, #7
 8005996:	428b      	cmp	r3, r1
 8005998:	d20b      	bcs.n	80059b2 <HAL_RCC_ClockConfig+0x32>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800599a:	4a50      	ldr	r2, [pc, #320]	; (8005adc <HAL_RCC_ClockConfig+0x15c>)
 800599c:	6813      	ldr	r3, [r2, #0]
 800599e:	f023 0307 	bic.w	r3, r3, #7
 80059a2:	430b      	orrs	r3, r1
 80059a4:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059a6:	6813      	ldr	r3, [r2, #0]
 80059a8:	f003 0307 	and.w	r3, r3, #7
 80059ac:	428b      	cmp	r3, r1
 80059ae:	f040 808e 	bne.w	8005ace <HAL_RCC_ClockConfig+0x14e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059b2:	6823      	ldr	r3, [r4, #0]
 80059b4:	f013 0f02 	tst.w	r3, #2
 80059b8:	d017      	beq.n	80059ea <HAL_RCC_ClockConfig+0x6a>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059ba:	f013 0f04 	tst.w	r3, #4
 80059be:	d004      	beq.n	80059ca <HAL_RCC_ClockConfig+0x4a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80059c0:	4a47      	ldr	r2, [pc, #284]	; (8005ae0 <HAL_RCC_ClockConfig+0x160>)
 80059c2:	6853      	ldr	r3, [r2, #4]
 80059c4:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80059c8:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059ca:	6823      	ldr	r3, [r4, #0]
 80059cc:	f013 0f08 	tst.w	r3, #8
 80059d0:	d004      	beq.n	80059dc <HAL_RCC_ClockConfig+0x5c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80059d2:	4a43      	ldr	r2, [pc, #268]	; (8005ae0 <HAL_RCC_ClockConfig+0x160>)
 80059d4:	6853      	ldr	r3, [r2, #4]
 80059d6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80059da:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80059dc:	4a40      	ldr	r2, [pc, #256]	; (8005ae0 <HAL_RCC_ClockConfig+0x160>)
 80059de:	6853      	ldr	r3, [r2, #4]
 80059e0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80059e4:	68a1      	ldr	r1, [r4, #8]
 80059e6:	430b      	orrs	r3, r1
 80059e8:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80059ea:	6823      	ldr	r3, [r4, #0]
 80059ec:	f013 0f01 	tst.w	r3, #1
 80059f0:	d031      	beq.n	8005a56 <HAL_RCC_ClockConfig+0xd6>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80059f2:	6862      	ldr	r2, [r4, #4]
 80059f4:	2a01      	cmp	r2, #1
 80059f6:	d020      	beq.n	8005a3a <HAL_RCC_ClockConfig+0xba>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80059f8:	2a02      	cmp	r2, #2
 80059fa:	d025      	beq.n	8005a48 <HAL_RCC_ClockConfig+0xc8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059fc:	4b38      	ldr	r3, [pc, #224]	; (8005ae0 <HAL_RCC_ClockConfig+0x160>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f013 0f02 	tst.w	r3, #2
 8005a04:	d065      	beq.n	8005ad2 <HAL_RCC_ClockConfig+0x152>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005a06:	4936      	ldr	r1, [pc, #216]	; (8005ae0 <HAL_RCC_ClockConfig+0x160>)
 8005a08:	684b      	ldr	r3, [r1, #4]
 8005a0a:	f023 0303 	bic.w	r3, r3, #3
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8005a12:	f7fd fac1 	bl	8002f98 <HAL_GetTick>
 8005a16:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a18:	4f31      	ldr	r7, [pc, #196]	; (8005ae0 <HAL_RCC_ClockConfig+0x160>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a1a:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	f003 030c 	and.w	r3, r3, #12
 8005a24:	6862      	ldr	r2, [r4, #4]
 8005a26:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8005a2a:	d014      	beq.n	8005a56 <HAL_RCC_ClockConfig+0xd6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a2c:	f7fd fab4 	bl	8002f98 <HAL_GetTick>
 8005a30:	1b80      	subs	r0, r0, r6
 8005a32:	4540      	cmp	r0, r8
 8005a34:	d9f3      	bls.n	8005a1e <HAL_RCC_ClockConfig+0x9e>
        return HAL_TIMEOUT;
 8005a36:	2003      	movs	r0, #3
 8005a38:	e045      	b.n	8005ac6 <HAL_RCC_ClockConfig+0x146>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a3a:	4b29      	ldr	r3, [pc, #164]	; (8005ae0 <HAL_RCC_ClockConfig+0x160>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8005a42:	d1e0      	bne.n	8005a06 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 8005a44:	2001      	movs	r0, #1
 8005a46:	e03e      	b.n	8005ac6 <HAL_RCC_ClockConfig+0x146>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a48:	4b25      	ldr	r3, [pc, #148]	; (8005ae0 <HAL_RCC_ClockConfig+0x160>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8005a50:	d1d9      	bne.n	8005a06 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 8005a52:	2001      	movs	r0, #1
 8005a54:	e037      	b.n	8005ac6 <HAL_RCC_ClockConfig+0x146>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005a56:	4b21      	ldr	r3, [pc, #132]	; (8005adc <HAL_RCC_ClockConfig+0x15c>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f003 0307 	and.w	r3, r3, #7
 8005a5e:	42ab      	cmp	r3, r5
 8005a60:	d90a      	bls.n	8005a78 <HAL_RCC_ClockConfig+0xf8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a62:	4a1e      	ldr	r2, [pc, #120]	; (8005adc <HAL_RCC_ClockConfig+0x15c>)
 8005a64:	6813      	ldr	r3, [r2, #0]
 8005a66:	f023 0307 	bic.w	r3, r3, #7
 8005a6a:	432b      	orrs	r3, r5
 8005a6c:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a6e:	6813      	ldr	r3, [r2, #0]
 8005a70:	f003 0307 	and.w	r3, r3, #7
 8005a74:	42ab      	cmp	r3, r5
 8005a76:	d12e      	bne.n	8005ad6 <HAL_RCC_ClockConfig+0x156>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a78:	6823      	ldr	r3, [r4, #0]
 8005a7a:	f013 0f04 	tst.w	r3, #4
 8005a7e:	d006      	beq.n	8005a8e <HAL_RCC_ClockConfig+0x10e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a80:	4a17      	ldr	r2, [pc, #92]	; (8005ae0 <HAL_RCC_ClockConfig+0x160>)
 8005a82:	6853      	ldr	r3, [r2, #4]
 8005a84:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005a88:	68e1      	ldr	r1, [r4, #12]
 8005a8a:	430b      	orrs	r3, r1
 8005a8c:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a8e:	6823      	ldr	r3, [r4, #0]
 8005a90:	f013 0f08 	tst.w	r3, #8
 8005a94:	d007      	beq.n	8005aa6 <HAL_RCC_ClockConfig+0x126>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005a96:	4a12      	ldr	r2, [pc, #72]	; (8005ae0 <HAL_RCC_ClockConfig+0x160>)
 8005a98:	6853      	ldr	r3, [r2, #4]
 8005a9a:	6921      	ldr	r1, [r4, #16]
 8005a9c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8005aa0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005aa4:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005aa6:	f7ff ff41 	bl	800592c <HAL_RCC_GetSysClockFreq>
 8005aaa:	4b0d      	ldr	r3, [pc, #52]	; (8005ae0 <HAL_RCC_ClockConfig+0x160>)
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005ab2:	4a0c      	ldr	r2, [pc, #48]	; (8005ae4 <HAL_RCC_ClockConfig+0x164>)
 8005ab4:	5cd3      	ldrb	r3, [r2, r3]
 8005ab6:	40d8      	lsrs	r0, r3
 8005ab8:	4b0b      	ldr	r3, [pc, #44]	; (8005ae8 <HAL_RCC_ClockConfig+0x168>)
 8005aba:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8005abc:	4b0b      	ldr	r3, [pc, #44]	; (8005aec <HAL_RCC_ClockConfig+0x16c>)
 8005abe:	6818      	ldr	r0, [r3, #0]
 8005ac0:	f7fc fc8a 	bl	80023d8 <HAL_InitTick>
  return HAL_OK;
 8005ac4:	2000      	movs	r0, #0
}
 8005ac6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8005aca:	2001      	movs	r0, #1
}
 8005acc:	4770      	bx	lr
    return HAL_ERROR;
 8005ace:	2001      	movs	r0, #1
 8005ad0:	e7f9      	b.n	8005ac6 <HAL_RCC_ClockConfig+0x146>
        return HAL_ERROR;
 8005ad2:	2001      	movs	r0, #1
 8005ad4:	e7f7      	b.n	8005ac6 <HAL_RCC_ClockConfig+0x146>
    return HAL_ERROR;
 8005ad6:	2001      	movs	r0, #1
 8005ad8:	e7f5      	b.n	8005ac6 <HAL_RCC_ClockConfig+0x146>
 8005ada:	bf00      	nop
 8005adc:	40022000 	.word	0x40022000
 8005ae0:	40021000 	.word	0x40021000
 8005ae4:	0800be94 	.word	0x0800be94
 8005ae8:	20000000 	.word	0x20000000
 8005aec:	20000010 	.word	0x20000010

08005af0 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005af0:	4b04      	ldr	r3, [pc, #16]	; (8005b04 <HAL_RCC_GetPCLK1Freq+0x14>)
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8005af8:	4a03      	ldr	r2, [pc, #12]	; (8005b08 <HAL_RCC_GetPCLK1Freq+0x18>)
 8005afa:	5cd3      	ldrb	r3, [r2, r3]
 8005afc:	4a03      	ldr	r2, [pc, #12]	; (8005b0c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8005afe:	6810      	ldr	r0, [r2, #0]
}
 8005b00:	40d8      	lsrs	r0, r3
 8005b02:	4770      	bx	lr
 8005b04:	40021000 	.word	0x40021000
 8005b08:	0800bea4 	.word	0x0800bea4
 8005b0c:	20000000 	.word	0x20000000

08005b10 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005b10:	4b04      	ldr	r3, [pc, #16]	; (8005b24 <HAL_RCC_GetPCLK2Freq+0x14>)
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8005b18:	4a03      	ldr	r2, [pc, #12]	; (8005b28 <HAL_RCC_GetPCLK2Freq+0x18>)
 8005b1a:	5cd3      	ldrb	r3, [r2, r3]
 8005b1c:	4a03      	ldr	r2, [pc, #12]	; (8005b2c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8005b1e:	6810      	ldr	r0, [r2, #0]
}
 8005b20:	40d8      	lsrs	r0, r3
 8005b22:	4770      	bx	lr
 8005b24:	40021000 	.word	0x40021000
 8005b28:	0800bea4 	.word	0x0800bea4
 8005b2c:	20000000 	.word	0x20000000

08005b30 <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005b30:	230f      	movs	r3, #15
 8005b32:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005b34:	4b0b      	ldr	r3, [pc, #44]	; (8005b64 <HAL_RCC_GetClockConfig+0x34>)
 8005b36:	685a      	ldr	r2, [r3, #4]
 8005b38:	f002 0203 	and.w	r2, r2, #3
 8005b3c:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005b3e:	685a      	ldr	r2, [r3, #4]
 8005b40:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8005b44:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005b46:	685a      	ldr	r2, [r3, #4]
 8005b48:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8005b4c:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	08db      	lsrs	r3, r3, #3
 8005b52:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005b56:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005b58:	4b03      	ldr	r3, [pc, #12]	; (8005b68 <HAL_RCC_GetClockConfig+0x38>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f003 0307 	and.w	r3, r3, #7
 8005b60:	600b      	str	r3, [r1, #0]
}
 8005b62:	4770      	bx	lr
 8005b64:	40021000 	.word	0x40021000
 8005b68:	40022000 	.word	0x40022000

08005b6c <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005b6c:	4770      	bx	lr
	...

08005b70 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005b70:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005b74:	b2db      	uxtb	r3, r3
 8005b76:	2b01      	cmp	r3, #1
 8005b78:	d127      	bne.n	8005bca <HAL_TIM_Base_Start_IT+0x5a>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b7a:	2302      	movs	r3, #2
 8005b7c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005b80:	6802      	ldr	r2, [r0, #0]
 8005b82:	68d3      	ldr	r3, [r2, #12]
 8005b84:	f043 0301 	orr.w	r3, r3, #1
 8005b88:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b8a:	6803      	ldr	r3, [r0, #0]
 8005b8c:	4a11      	ldr	r2, [pc, #68]	; (8005bd4 <HAL_TIM_Base_Start_IT+0x64>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d010      	beq.n	8005bb4 <HAL_TIM_Base_Start_IT+0x44>
 8005b92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b96:	d00d      	beq.n	8005bb4 <HAL_TIM_Base_Start_IT+0x44>
 8005b98:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d009      	beq.n	8005bb4 <HAL_TIM_Base_Start_IT+0x44>
 8005ba0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d005      	beq.n	8005bb4 <HAL_TIM_Base_Start_IT+0x44>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ba8:	681a      	ldr	r2, [r3, #0]
 8005baa:	f042 0201 	orr.w	r2, r2, #1
 8005bae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005bb0:	2000      	movs	r0, #0
 8005bb2:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005bb4:	689a      	ldr	r2, [r3, #8]
 8005bb6:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bba:	2a06      	cmp	r2, #6
 8005bbc:	d007      	beq.n	8005bce <HAL_TIM_Base_Start_IT+0x5e>
      __HAL_TIM_ENABLE(htim);
 8005bbe:	681a      	ldr	r2, [r3, #0]
 8005bc0:	f042 0201 	orr.w	r2, r2, #1
 8005bc4:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8005bc6:	2000      	movs	r0, #0
 8005bc8:	4770      	bx	lr
    return HAL_ERROR;
 8005bca:	2001      	movs	r0, #1
 8005bcc:	4770      	bx	lr
  return HAL_OK;
 8005bce:	2000      	movs	r0, #0
}
 8005bd0:	4770      	bx	lr
 8005bd2:	bf00      	nop
 8005bd4:	40012c00 	.word	0x40012c00

08005bd8 <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005bd8:	4770      	bx	lr

08005bda <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005bda:	4770      	bx	lr

08005bdc <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005bdc:	4770      	bx	lr

08005bde <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005bde:	4770      	bx	lr

08005be0 <HAL_TIM_IRQHandler>:
{
 8005be0:	b510      	push	{r4, lr}
 8005be2:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005be4:	6803      	ldr	r3, [r0, #0]
 8005be6:	691a      	ldr	r2, [r3, #16]
 8005be8:	f012 0f02 	tst.w	r2, #2
 8005bec:	d011      	beq.n	8005c12 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005bee:	68da      	ldr	r2, [r3, #12]
 8005bf0:	f012 0f02 	tst.w	r2, #2
 8005bf4:	d00d      	beq.n	8005c12 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005bf6:	f06f 0202 	mvn.w	r2, #2
 8005bfa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005c00:	6803      	ldr	r3, [r0, #0]
 8005c02:	699b      	ldr	r3, [r3, #24]
 8005c04:	f013 0f03 	tst.w	r3, #3
 8005c08:	d070      	beq.n	8005cec <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 8005c0a:	f7ff ffe6 	bl	8005bda <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005c12:	6823      	ldr	r3, [r4, #0]
 8005c14:	691a      	ldr	r2, [r3, #16]
 8005c16:	f012 0f04 	tst.w	r2, #4
 8005c1a:	d012      	beq.n	8005c42 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005c1c:	68da      	ldr	r2, [r3, #12]
 8005c1e:	f012 0f04 	tst.w	r2, #4
 8005c22:	d00e      	beq.n	8005c42 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005c24:	f06f 0204 	mvn.w	r2, #4
 8005c28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c2a:	2302      	movs	r3, #2
 8005c2c:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005c2e:	6823      	ldr	r3, [r4, #0]
 8005c30:	699b      	ldr	r3, [r3, #24]
 8005c32:	f413 7f40 	tst.w	r3, #768	; 0x300
 8005c36:	d05f      	beq.n	8005cf8 <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 8005c38:	4620      	mov	r0, r4
 8005c3a:	f7ff ffce 	bl	8005bda <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005c42:	6823      	ldr	r3, [r4, #0]
 8005c44:	691a      	ldr	r2, [r3, #16]
 8005c46:	f012 0f08 	tst.w	r2, #8
 8005c4a:	d012      	beq.n	8005c72 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005c4c:	68da      	ldr	r2, [r3, #12]
 8005c4e:	f012 0f08 	tst.w	r2, #8
 8005c52:	d00e      	beq.n	8005c72 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005c54:	f06f 0208 	mvn.w	r2, #8
 8005c58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005c5a:	2304      	movs	r3, #4
 8005c5c:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005c5e:	6823      	ldr	r3, [r4, #0]
 8005c60:	69db      	ldr	r3, [r3, #28]
 8005c62:	f013 0f03 	tst.w	r3, #3
 8005c66:	d04e      	beq.n	8005d06 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 8005c68:	4620      	mov	r0, r4
 8005c6a:	f7ff ffb6 	bl	8005bda <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005c72:	6823      	ldr	r3, [r4, #0]
 8005c74:	691a      	ldr	r2, [r3, #16]
 8005c76:	f012 0f10 	tst.w	r2, #16
 8005c7a:	d012      	beq.n	8005ca2 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005c7c:	68da      	ldr	r2, [r3, #12]
 8005c7e:	f012 0f10 	tst.w	r2, #16
 8005c82:	d00e      	beq.n	8005ca2 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005c84:	f06f 0210 	mvn.w	r2, #16
 8005c88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c8a:	2308      	movs	r3, #8
 8005c8c:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c8e:	6823      	ldr	r3, [r4, #0]
 8005c90:	69db      	ldr	r3, [r3, #28]
 8005c92:	f413 7f40 	tst.w	r3, #768	; 0x300
 8005c96:	d03d      	beq.n	8005d14 <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 8005c98:	4620      	mov	r0, r4
 8005c9a:	f7ff ff9e 	bl	8005bda <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005ca2:	6823      	ldr	r3, [r4, #0]
 8005ca4:	691a      	ldr	r2, [r3, #16]
 8005ca6:	f012 0f01 	tst.w	r2, #1
 8005caa:	d003      	beq.n	8005cb4 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005cac:	68da      	ldr	r2, [r3, #12]
 8005cae:	f012 0f01 	tst.w	r2, #1
 8005cb2:	d136      	bne.n	8005d22 <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005cb4:	6823      	ldr	r3, [r4, #0]
 8005cb6:	691a      	ldr	r2, [r3, #16]
 8005cb8:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005cbc:	d003      	beq.n	8005cc6 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005cbe:	68da      	ldr	r2, [r3, #12]
 8005cc0:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005cc4:	d134      	bne.n	8005d30 <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005cc6:	6823      	ldr	r3, [r4, #0]
 8005cc8:	691a      	ldr	r2, [r3, #16]
 8005cca:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005cce:	d003      	beq.n	8005cd8 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005cd0:	68da      	ldr	r2, [r3, #12]
 8005cd2:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005cd6:	d132      	bne.n	8005d3e <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005cd8:	6823      	ldr	r3, [r4, #0]
 8005cda:	691a      	ldr	r2, [r3, #16]
 8005cdc:	f012 0f20 	tst.w	r2, #32
 8005ce0:	d003      	beq.n	8005cea <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005ce2:	68da      	ldr	r2, [r3, #12]
 8005ce4:	f012 0f20 	tst.w	r2, #32
 8005ce8:	d130      	bne.n	8005d4c <HAL_TIM_IRQHandler+0x16c>
}
 8005cea:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cec:	f7ff ff74 	bl	8005bd8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cf0:	4620      	mov	r0, r4
 8005cf2:	f7ff ff73 	bl	8005bdc <HAL_TIM_PWM_PulseFinishedCallback>
 8005cf6:	e78a      	b.n	8005c0e <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cf8:	4620      	mov	r0, r4
 8005cfa:	f7ff ff6d 	bl	8005bd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cfe:	4620      	mov	r0, r4
 8005d00:	f7ff ff6c 	bl	8005bdc <HAL_TIM_PWM_PulseFinishedCallback>
 8005d04:	e79b      	b.n	8005c3e <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d06:	4620      	mov	r0, r4
 8005d08:	f7ff ff66 	bl	8005bd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d0c:	4620      	mov	r0, r4
 8005d0e:	f7ff ff65 	bl	8005bdc <HAL_TIM_PWM_PulseFinishedCallback>
 8005d12:	e7ac      	b.n	8005c6e <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d14:	4620      	mov	r0, r4
 8005d16:	f7ff ff5f 	bl	8005bd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d1a:	4620      	mov	r0, r4
 8005d1c:	f7ff ff5e 	bl	8005bdc <HAL_TIM_PWM_PulseFinishedCallback>
 8005d20:	e7bd      	b.n	8005c9e <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005d22:	f06f 0201 	mvn.w	r2, #1
 8005d26:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8005d28:	4620      	mov	r0, r4
 8005d2a:	f7fc fad5 	bl	80022d8 <HAL_TIM_PeriodElapsedCallback>
 8005d2e:	e7c1      	b.n	8005cb4 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005d30:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005d34:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8005d36:	4620      	mov	r0, r4
 8005d38:	f000 f9f7 	bl	800612a <HAL_TIMEx_BreakCallback>
 8005d3c:	e7c3      	b.n	8005cc6 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005d3e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005d42:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8005d44:	4620      	mov	r0, r4
 8005d46:	f7ff ff4a 	bl	8005bde <HAL_TIM_TriggerCallback>
 8005d4a:	e7c5      	b.n	8005cd8 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005d4c:	f06f 0220 	mvn.w	r2, #32
 8005d50:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8005d52:	4620      	mov	r0, r4
 8005d54:	f000 f9e8 	bl	8006128 <HAL_TIMEx_CommutCallback>
}
 8005d58:	e7c7      	b.n	8005cea <HAL_TIM_IRQHandler+0x10a>
	...

08005d5c <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d5c:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d5e:	4a25      	ldr	r2, [pc, #148]	; (8005df4 <TIM_Base_SetConfig+0x98>)
 8005d60:	4290      	cmp	r0, r2
 8005d62:	d014      	beq.n	8005d8e <TIM_Base_SetConfig+0x32>
 8005d64:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005d68:	d02b      	beq.n	8005dc2 <TIM_Base_SetConfig+0x66>
 8005d6a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8005d6e:	4290      	cmp	r0, r2
 8005d70:	d022      	beq.n	8005db8 <TIM_Base_SetConfig+0x5c>
 8005d72:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005d76:	4290      	cmp	r0, r2
 8005d78:	d037      	beq.n	8005dea <TIM_Base_SetConfig+0x8e>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d7e:	694a      	ldr	r2, [r1, #20]
 8005d80:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8005d82:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d84:	688b      	ldr	r3, [r1, #8]
 8005d86:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d88:	680b      	ldr	r3, [r1, #0]
 8005d8a:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d8c:	e02a      	b.n	8005de4 <TIM_Base_SetConfig+0x88>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005d92:	684a      	ldr	r2, [r1, #4]
 8005d94:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d9a:	68ca      	ldr	r2, [r1, #12]
 8005d9c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005da2:	694a      	ldr	r2, [r1, #20]
 8005da4:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8005da6:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005da8:	688b      	ldr	r3, [r1, #8]
 8005daa:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005dac:	680b      	ldr	r3, [r1, #0]
 8005dae:	6283      	str	r3, [r0, #40]	; 0x28
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005db0:	690a      	ldr	r2, [r1, #16]
 8005db2:	4b10      	ldr	r3, [pc, #64]	; (8005df4 <TIM_Base_SetConfig+0x98>)
 8005db4:	631a      	str	r2, [r3, #48]	; 0x30
 8005db6:	e015      	b.n	8005de4 <TIM_Base_SetConfig+0x88>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005db8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005dbc:	684a      	ldr	r2, [r1, #4]
 8005dbe:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005dc0:	e003      	b.n	8005dca <TIM_Base_SetConfig+0x6e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005dc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005dc6:	684a      	ldr	r2, [r1, #4]
 8005dc8:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8005dca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005dce:	68ca      	ldr	r2, [r1, #12]
 8005dd0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005dd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005dd6:	694a      	ldr	r2, [r1, #20]
 8005dd8:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8005dda:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ddc:	688b      	ldr	r3, [r1, #8]
 8005dde:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005de0:	680b      	ldr	r3, [r1, #0]
 8005de2:	6283      	str	r3, [r0, #40]	; 0x28
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005de4:	2301      	movs	r3, #1
 8005de6:	6143      	str	r3, [r0, #20]
}
 8005de8:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005dea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005dee:	684a      	ldr	r2, [r1, #4]
 8005df0:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005df2:	e7ea      	b.n	8005dca <TIM_Base_SetConfig+0x6e>
 8005df4:	40012c00 	.word	0x40012c00

08005df8 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8005df8:	b340      	cbz	r0, 8005e4c <HAL_TIM_Base_Init+0x54>
{
 8005dfa:	b510      	push	{r4, lr}
 8005dfc:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8005dfe:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005e02:	b1f3      	cbz	r3, 8005e42 <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8005e04:	2302      	movs	r3, #2
 8005e06:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e0a:	4621      	mov	r1, r4
 8005e0c:	f851 0b04 	ldr.w	r0, [r1], #4
 8005e10:	f7ff ffa4 	bl	8005d5c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e14:	2301      	movs	r3, #1
 8005e16:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e1a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8005e1e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8005e22:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8005e26:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e2a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005e2e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e32:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8005e36:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8005e3a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8005e3e:	2000      	movs	r0, #0
}
 8005e40:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8005e42:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8005e46:	f7ff fe91 	bl	8005b6c <HAL_TIM_Base_MspInit>
 8005e4a:	e7db      	b.n	8005e04 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8005e4c:	2001      	movs	r0, #1
}
 8005e4e:	4770      	bx	lr

08005e50 <HAL_TIM_Encoder_Init>:
  if (htim == NULL)
 8005e50:	2800      	cmp	r0, #0
 8005e52:	d053      	beq.n	8005efc <HAL_TIM_Encoder_Init+0xac>
{
 8005e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e56:	460d      	mov	r5, r1
 8005e58:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8005e5a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d047      	beq.n	8005ef2 <HAL_TIM_Encoder_Init+0xa2>
  htim->State = HAL_TIM_STATE_BUSY;
 8005e62:	2302      	movs	r3, #2
 8005e64:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005e68:	6822      	ldr	r2, [r4, #0]
 8005e6a:	6893      	ldr	r3, [r2, #8]
 8005e6c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e70:	f023 0307 	bic.w	r3, r3, #7
 8005e74:	6093      	str	r3, [r2, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e76:	4621      	mov	r1, r4
 8005e78:	f851 0b04 	ldr.w	r0, [r1], #4
 8005e7c:	f7ff ff6e 	bl	8005d5c <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 8005e80:	6820      	ldr	r0, [r4, #0]
 8005e82:	6886      	ldr	r6, [r0, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 8005e84:	6983      	ldr	r3, [r0, #24]
  tmpccer = htim->Instance->CCER;
 8005e86:	6a07      	ldr	r7, [r0, #32]
  tmpsmcr |= sConfig->EncoderMode;
 8005e88:	682a      	ldr	r2, [r5, #0]
 8005e8a:	4316      	orrs	r6, r2
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005e8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e90:	f023 0303 	bic.w	r3, r3, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005e94:	69aa      	ldr	r2, [r5, #24]
 8005e96:	68a9      	ldr	r1, [r5, #8]
 8005e98:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 8005e9c:	430b      	orrs	r3, r1
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005e9e:	f423 427c 	bic.w	r2, r3, #64512	; 0xfc00
 8005ea2:	f022 02fc 	bic.w	r2, r2, #252	; 0xfc
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005ea6:	69e9      	ldr	r1, [r5, #28]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005ea8:	692b      	ldr	r3, [r5, #16]
 8005eaa:	011b      	lsls	r3, r3, #4
 8005eac:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005eb0:	68e9      	ldr	r1, [r5, #12]
 8005eb2:	430b      	orrs	r3, r1
 8005eb4:	6a29      	ldr	r1, [r5, #32]
 8005eb6:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 8005eba:	4313      	orrs	r3, r2
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005ebc:	f027 0222 	bic.w	r2, r7, #34	; 0x22
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005ec0:	6969      	ldr	r1, [r5, #20]
 8005ec2:	686f      	ldr	r7, [r5, #4]
 8005ec4:	ea47 1701 	orr.w	r7, r7, r1, lsl #4
 8005ec8:	4317      	orrs	r7, r2
  htim->Instance->SMCR = tmpsmcr;
 8005eca:	6086      	str	r6, [r0, #8]
  htim->Instance->CCMR1 = tmpccmr1;
 8005ecc:	6822      	ldr	r2, [r4, #0]
 8005ece:	6193      	str	r3, [r2, #24]
  htim->Instance->CCER = tmpccer;
 8005ed0:	6823      	ldr	r3, [r4, #0]
 8005ed2:	621f      	str	r7, [r3, #32]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005eda:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005ede:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005ee2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005ee6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  htim->State = HAL_TIM_STATE_READY;
 8005eea:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8005eee:	2000      	movs	r0, #0
}
 8005ef0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    htim->Lock = HAL_UNLOCKED;
 8005ef2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 8005ef6:	f7fc fb63 	bl	80025c0 <HAL_TIM_Encoder_MspInit>
 8005efa:	e7b2      	b.n	8005e62 <HAL_TIM_Encoder_Init+0x12>
    return HAL_ERROR;
 8005efc:	2001      	movs	r0, #1
}
 8005efe:	4770      	bx	lr

08005f00 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005f00:	f001 011f 	and.w	r1, r1, #31

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005f04:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005f06:	f04f 0c01 	mov.w	ip, #1
 8005f0a:	fa0c fc01 	lsl.w	ip, ip, r1
  TIMx->CCER &= ~tmp;
 8005f0e:	ea23 030c 	bic.w	r3, r3, ip
 8005f12:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005f14:	6a03      	ldr	r3, [r0, #32]
 8005f16:	408a      	lsls	r2, r1
 8005f18:	431a      	orrs	r2, r3
 8005f1a:	6202      	str	r2, [r0, #32]
}
 8005f1c:	4770      	bx	lr

08005f1e <HAL_TIM_Encoder_Start>:
{
 8005f1e:	b510      	push	{r4, lr}
 8005f20:	4604      	mov	r4, r0
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005f22:	f890 003e 	ldrb.w	r0, [r0, #62]	; 0x3e
 8005f26:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005f28:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005f2c:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 8005f30:	b2d2      	uxtb	r2, r2
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005f32:	f894 c043 	ldrb.w	ip, [r4, #67]	; 0x43
  if (Channel == TIM_CHANNEL_1)
 8005f36:	b991      	cbnz	r1, 8005f5e <HAL_TIM_Encoder_Start+0x40>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005f38:	2801      	cmp	r0, #1
 8005f3a:	d142      	bne.n	8005fc2 <HAL_TIM_Encoder_Start+0xa4>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005f3c:	2a01      	cmp	r2, #1
 8005f3e:	d141      	bne.n	8005fc4 <HAL_TIM_Encoder_Start+0xa6>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f40:	2302      	movs	r3, #2
 8005f42:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f46:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005f4a:	6820      	ldr	r0, [r4, #0]
 8005f4c:	f7ff ffd8 	bl	8005f00 <TIM_CCxChannelCmd>
  __HAL_TIM_ENABLE(htim);
 8005f50:	6822      	ldr	r2, [r4, #0]
 8005f52:	6813      	ldr	r3, [r2, #0]
 8005f54:	f043 0301 	orr.w	r3, r3, #1
 8005f58:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8005f5a:	2000      	movs	r0, #0
 8005f5c:	e032      	b.n	8005fc4 <HAL_TIM_Encoder_Start+0xa6>
 8005f5e:	b2db      	uxtb	r3, r3
 8005f60:	fa5f fc8c 	uxtb.w	ip, ip
 8005f64:	468e      	mov	lr, r1
  else if (Channel == TIM_CHANNEL_2)
 8005f66:	2904      	cmp	r1, #4
 8005f68:	d01b      	beq.n	8005fa2 <HAL_TIM_Encoder_Start+0x84>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005f6a:	2801      	cmp	r0, #1
 8005f6c:	d12f      	bne.n	8005fce <HAL_TIM_Encoder_Start+0xb0>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005f6e:	2b01      	cmp	r3, #1
 8005f70:	d128      	bne.n	8005fc4 <HAL_TIM_Encoder_Start+0xa6>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005f72:	2a01      	cmp	r2, #1
 8005f74:	d12d      	bne.n	8005fd2 <HAL_TIM_Encoder_Start+0xb4>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005f76:	f1bc 0f01 	cmp.w	ip, #1
 8005f7a:	d12c      	bne.n	8005fd6 <HAL_TIM_Encoder_Start+0xb8>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f7c:	2302      	movs	r3, #2
 8005f7e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f82:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f86:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005f8e:	2100      	movs	r1, #0
 8005f90:	6820      	ldr	r0, [r4, #0]
 8005f92:	f7ff ffb5 	bl	8005f00 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005f96:	2201      	movs	r2, #1
 8005f98:	2104      	movs	r1, #4
 8005f9a:	6820      	ldr	r0, [r4, #0]
 8005f9c:	f7ff ffb0 	bl	8005f00 <TIM_CCxChannelCmd>
      break;
 8005fa0:	e7d6      	b.n	8005f50 <HAL_TIM_Encoder_Start+0x32>
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005fa2:	2b01      	cmp	r3, #1
 8005fa4:	d10f      	bne.n	8005fc6 <HAL_TIM_Encoder_Start+0xa8>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005fa6:	f1bc 0f01 	cmp.w	ip, #1
 8005faa:	d10e      	bne.n	8005fca <HAL_TIM_Encoder_Start+0xac>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005fac:	2302      	movs	r3, #2
 8005fae:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005fb2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	2104      	movs	r1, #4
 8005fba:	6820      	ldr	r0, [r4, #0]
 8005fbc:	f7ff ffa0 	bl	8005f00 <TIM_CCxChannelCmd>
      break;
 8005fc0:	e7c6      	b.n	8005f50 <HAL_TIM_Encoder_Start+0x32>
      return HAL_ERROR;
 8005fc2:	2001      	movs	r0, #1
}
 8005fc4:	bd10      	pop	{r4, pc}
      return HAL_ERROR;
 8005fc6:	2001      	movs	r0, #1
 8005fc8:	e7fc      	b.n	8005fc4 <HAL_TIM_Encoder_Start+0xa6>
 8005fca:	4618      	mov	r0, r3
 8005fcc:	e7fa      	b.n	8005fc4 <HAL_TIM_Encoder_Start+0xa6>
      return HAL_ERROR;
 8005fce:	2001      	movs	r0, #1
 8005fd0:	e7f8      	b.n	8005fc4 <HAL_TIM_Encoder_Start+0xa6>
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	e7f6      	b.n	8005fc4 <HAL_TIM_Encoder_Start+0xa6>
 8005fd6:	4610      	mov	r0, r2
 8005fd8:	e7f4      	b.n	8005fc4 <HAL_TIM_Encoder_Start+0xa6>

08005fda <HAL_TIM_Encoder_Start_IT>:
{
 8005fda:	b510      	push	{r4, lr}
 8005fdc:	4604      	mov	r4, r0
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005fde:	f890 003e 	ldrb.w	r0, [r0, #62]	; 0x3e
 8005fe2:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005fe4:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005fe8:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 8005fec:	b2d2      	uxtb	r2, r2
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005fee:	f894 c043 	ldrb.w	ip, [r4, #67]	; 0x43
  if (Channel == TIM_CHANNEL_1)
 8005ff2:	b9b9      	cbnz	r1, 8006024 <HAL_TIM_Encoder_Start_IT+0x4a>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005ff4:	2801      	cmp	r0, #1
 8005ff6:	d156      	bne.n	80060a6 <HAL_TIM_Encoder_Start_IT+0xcc>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005ff8:	2a01      	cmp	r2, #1
 8005ffa:	d155      	bne.n	80060a8 <HAL_TIM_Encoder_Start_IT+0xce>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ffc:	2302      	movs	r3, #2
 8005ffe:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006002:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006006:	6820      	ldr	r0, [r4, #0]
 8006008:	f7ff ff7a 	bl	8005f00 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800600c:	6822      	ldr	r2, [r4, #0]
 800600e:	68d3      	ldr	r3, [r2, #12]
 8006010:	f043 0302 	orr.w	r3, r3, #2
 8006014:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_ENABLE(htim);
 8006016:	6822      	ldr	r2, [r4, #0]
 8006018:	6813      	ldr	r3, [r2, #0]
 800601a:	f043 0301 	orr.w	r3, r3, #1
 800601e:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8006020:	2000      	movs	r0, #0
 8006022:	e041      	b.n	80060a8 <HAL_TIM_Encoder_Start_IT+0xce>
 8006024:	b2db      	uxtb	r3, r3
 8006026:	fa5f fc8c 	uxtb.w	ip, ip
 800602a:	468e      	mov	lr, r1
  else if (Channel == TIM_CHANNEL_2)
 800602c:	2904      	cmp	r1, #4
 800602e:	d025      	beq.n	800607c <HAL_TIM_Encoder_Start_IT+0xa2>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006030:	2801      	cmp	r0, #1
 8006032:	d13e      	bne.n	80060b2 <HAL_TIM_Encoder_Start_IT+0xd8>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006034:	2b01      	cmp	r3, #1
 8006036:	d137      	bne.n	80060a8 <HAL_TIM_Encoder_Start_IT+0xce>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006038:	2a01      	cmp	r2, #1
 800603a:	d13c      	bne.n	80060b6 <HAL_TIM_Encoder_Start_IT+0xdc>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800603c:	f1bc 0f01 	cmp.w	ip, #1
 8006040:	d13b      	bne.n	80060ba <HAL_TIM_Encoder_Start_IT+0xe0>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006042:	2302      	movs	r3, #2
 8006044:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006048:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800604c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006050:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006054:	2100      	movs	r1, #0
 8006056:	6820      	ldr	r0, [r4, #0]
 8006058:	f7ff ff52 	bl	8005f00 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800605c:	2201      	movs	r2, #1
 800605e:	2104      	movs	r1, #4
 8006060:	6820      	ldr	r0, [r4, #0]
 8006062:	f7ff ff4d 	bl	8005f00 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006066:	6822      	ldr	r2, [r4, #0]
 8006068:	68d3      	ldr	r3, [r2, #12]
 800606a:	f043 0302 	orr.w	r3, r3, #2
 800606e:	60d3      	str	r3, [r2, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006070:	6822      	ldr	r2, [r4, #0]
 8006072:	68d3      	ldr	r3, [r2, #12]
 8006074:	f043 0304 	orr.w	r3, r3, #4
 8006078:	60d3      	str	r3, [r2, #12]
      break;
 800607a:	e7cc      	b.n	8006016 <HAL_TIM_Encoder_Start_IT+0x3c>
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800607c:	2b01      	cmp	r3, #1
 800607e:	d114      	bne.n	80060aa <HAL_TIM_Encoder_Start_IT+0xd0>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006080:	f1bc 0f01 	cmp.w	ip, #1
 8006084:	d113      	bne.n	80060ae <HAL_TIM_Encoder_Start_IT+0xd4>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006086:	2302      	movs	r3, #2
 8006088:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800608c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006090:	2201      	movs	r2, #1
 8006092:	2104      	movs	r1, #4
 8006094:	6820      	ldr	r0, [r4, #0]
 8006096:	f7ff ff33 	bl	8005f00 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800609a:	6822      	ldr	r2, [r4, #0]
 800609c:	68d3      	ldr	r3, [r2, #12]
 800609e:	f043 0304 	orr.w	r3, r3, #4
 80060a2:	60d3      	str	r3, [r2, #12]
      break;
 80060a4:	e7b7      	b.n	8006016 <HAL_TIM_Encoder_Start_IT+0x3c>
      return HAL_ERROR;
 80060a6:	2001      	movs	r0, #1
}
 80060a8:	bd10      	pop	{r4, pc}
      return HAL_ERROR;
 80060aa:	2001      	movs	r0, #1
 80060ac:	e7fc      	b.n	80060a8 <HAL_TIM_Encoder_Start_IT+0xce>
 80060ae:	4618      	mov	r0, r3
 80060b0:	e7fa      	b.n	80060a8 <HAL_TIM_Encoder_Start_IT+0xce>
      return HAL_ERROR;
 80060b2:	2001      	movs	r0, #1
 80060b4:	e7f8      	b.n	80060a8 <HAL_TIM_Encoder_Start_IT+0xce>
 80060b6:	4618      	mov	r0, r3
 80060b8:	e7f6      	b.n	80060a8 <HAL_TIM_Encoder_Start_IT+0xce>
 80060ba:	4610      	mov	r0, r2
 80060bc:	e7f4      	b.n	80060a8 <HAL_TIM_Encoder_Start_IT+0xce>
	...

080060c0 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80060c0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80060c4:	2b01      	cmp	r3, #1
 80060c6:	d02b      	beq.n	8006120 <HAL_TIMEx_MasterConfigSynchronization+0x60>
{
 80060c8:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 80060ca:	2301      	movs	r3, #1
 80060cc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060d0:	2302      	movs	r3, #2
 80060d2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80060d6:	6804      	ldr	r4, [r0, #0]
 80060d8:	6863      	ldr	r3, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80060da:	68a2      	ldr	r2, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80060dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80060e0:	680d      	ldr	r5, [r1, #0]
 80060e2:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80060e4:	6063      	str	r3, [r4, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060e6:	6803      	ldr	r3, [r0, #0]
 80060e8:	4c0e      	ldr	r4, [pc, #56]	; (8006124 <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 80060ea:	42a3      	cmp	r3, r4
 80060ec:	d00a      	beq.n	8006104 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 80060ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060f2:	d007      	beq.n	8006104 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 80060f4:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 80060f8:	42a3      	cmp	r3, r4
 80060fa:	d003      	beq.n	8006104 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 80060fc:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8006100:	42a3      	cmp	r3, r4
 8006102:	d104      	bne.n	800610e <HAL_TIMEx_MasterConfigSynchronization+0x4e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006104:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006108:	6849      	ldr	r1, [r1, #4]
 800610a:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800610c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800610e:	2301      	movs	r3, #1
 8006110:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006114:	2300      	movs	r3, #0
 8006116:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 800611a:	4618      	mov	r0, r3
}
 800611c:	bc30      	pop	{r4, r5}
 800611e:	4770      	bx	lr
  __HAL_LOCK(htim);
 8006120:	2002      	movs	r0, #2
}
 8006122:	4770      	bx	lr
 8006124:	40012c00 	.word	0x40012c00

08006128 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006128:	4770      	bx	lr

0800612a <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800612a:	4770      	bx	lr

0800612c <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800612c:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800612e:	f102 030c 	add.w	r3, r2, #12
 8006132:	e853 3f00 	ldrex	r3, [r3]
 8006136:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800613a:	320c      	adds	r2, #12
 800613c:	e842 3100 	strex	r1, r3, [r2]
 8006140:	2900      	cmp	r1, #0
 8006142:	d1f3      	bne.n	800612c <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006144:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006146:	f102 0314 	add.w	r3, r2, #20
 800614a:	e853 3f00 	ldrex	r3, [r3]
 800614e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006152:	3214      	adds	r2, #20
 8006154:	e842 3100 	strex	r1, r3, [r2]
 8006158:	2900      	cmp	r1, #0
 800615a:	d1f3      	bne.n	8006144 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800615c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800615e:	2b01      	cmp	r3, #1
 8006160:	d005      	beq.n	800616e <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006162:	2320      	movs	r3, #32
 8006164:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006168:	2300      	movs	r3, #0
 800616a:	6303      	str	r3, [r0, #48]	; 0x30
}
 800616c:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800616e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006170:	f102 030c 	add.w	r3, r2, #12
 8006174:	e853 3f00 	ldrex	r3, [r3]
 8006178:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800617c:	320c      	adds	r2, #12
 800617e:	e842 3100 	strex	r1, r3, [r2]
 8006182:	2900      	cmp	r1, #0
 8006184:	d1f3      	bne.n	800616e <UART_EndRxTransfer+0x42>
 8006186:	e7ec      	b.n	8006162 <UART_EndRxTransfer+0x36>

08006188 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006188:	b510      	push	{r4, lr}
 800618a:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800618c:	6802      	ldr	r2, [r0, #0]
 800618e:	6913      	ldr	r3, [r2, #16]
 8006190:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006194:	68c1      	ldr	r1, [r0, #12]
 8006196:	430b      	orrs	r3, r1
 8006198:	6113      	str	r3, [r2, #16]
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
  MODIFY_REG(huart->Instance->CR1,
 800619a:	6801      	ldr	r1, [r0, #0]
 800619c:	68ca      	ldr	r2, [r1, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800619e:	6883      	ldr	r3, [r0, #8]
 80061a0:	6900      	ldr	r0, [r0, #16]
 80061a2:	4303      	orrs	r3, r0
 80061a4:	6960      	ldr	r0, [r4, #20]
 80061a6:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 80061a8:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 80061ac:	f022 020c 	bic.w	r2, r2, #12
 80061b0:	4313      	orrs	r3, r2
 80061b2:	60cb      	str	r3, [r1, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80061b4:	6822      	ldr	r2, [r4, #0]
 80061b6:	6953      	ldr	r3, [r2, #20]
 80061b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061bc:	69a1      	ldr	r1, [r4, #24]
 80061be:	430b      	orrs	r3, r1
 80061c0:	6153      	str	r3, [r2, #20]


  if(huart->Instance == USART1)
 80061c2:	6822      	ldr	r2, [r4, #0]
 80061c4:	4b11      	ldr	r3, [pc, #68]	; (800620c <UART_SetConfig+0x84>)
 80061c6:	429a      	cmp	r2, r3
 80061c8:	d01b      	beq.n	8006202 <UART_SetConfig+0x7a>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80061ca:	f7ff fc91 	bl	8005af0 <HAL_RCC_GetPCLK1Freq>
 80061ce:	4603      	mov	r3, r0
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80061d0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80061d4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80061d8:	6862      	ldr	r2, [r4, #4]
 80061da:	0092      	lsls	r2, r2, #2
 80061dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80061e0:	6820      	ldr	r0, [r4, #0]
 80061e2:	490b      	ldr	r1, [pc, #44]	; (8006210 <UART_SetConfig+0x88>)
 80061e4:	fba1 4203 	umull	r4, r2, r1, r3
 80061e8:	0952      	lsrs	r2, r2, #5
 80061ea:	2464      	movs	r4, #100	; 0x64
 80061ec:	fb04 3312 	mls	r3, r4, r2, r3
 80061f0:	011b      	lsls	r3, r3, #4
 80061f2:	3332      	adds	r3, #50	; 0x32
 80061f4:	fba1 1303 	umull	r1, r3, r1, r3
 80061f8:	0112      	lsls	r2, r2, #4
 80061fa:	eb02 1353 	add.w	r3, r2, r3, lsr #5
 80061fe:	6083      	str	r3, [r0, #8]
#endif /* USART_CR1_OVER8 */
}
 8006200:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK2Freq();
 8006202:	f7ff fc85 	bl	8005b10 <HAL_RCC_GetPCLK2Freq>
 8006206:	4603      	mov	r3, r0
 8006208:	e7e2      	b.n	80061d0 <UART_SetConfig+0x48>
 800620a:	bf00      	nop
 800620c:	40013800 	.word	0x40013800
 8006210:	51eb851f 	.word	0x51eb851f

08006214 <HAL_UART_Init>:
  if (huart == NULL)
 8006214:	b360      	cbz	r0, 8006270 <HAL_UART_Init+0x5c>
{
 8006216:	b510      	push	{r4, lr}
 8006218:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800621a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800621e:	b313      	cbz	r3, 8006266 <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 8006220:	2324      	movs	r3, #36	; 0x24
 8006222:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UART_DISABLE(huart);
 8006226:	6822      	ldr	r2, [r4, #0]
 8006228:	68d3      	ldr	r3, [r2, #12]
 800622a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800622e:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8006230:	4620      	mov	r0, r4
 8006232:	f7ff ffa9 	bl	8006188 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006236:	6822      	ldr	r2, [r4, #0]
 8006238:	6913      	ldr	r3, [r2, #16]
 800623a:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800623e:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006240:	6822      	ldr	r2, [r4, #0]
 8006242:	6953      	ldr	r3, [r2, #20]
 8006244:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8006248:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 800624a:	6822      	ldr	r2, [r4, #0]
 800624c:	68d3      	ldr	r3, [r2, #12]
 800624e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006252:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006254:	2000      	movs	r0, #0
 8006256:	6460      	str	r0, [r4, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006258:	2320      	movs	r3, #32
 800625a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800625e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006262:	6360      	str	r0, [r4, #52]	; 0x34
}
 8006264:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8006266:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_UART_MspInit(huart);
 800626a:	f7fc fa13 	bl	8002694 <HAL_UART_MspInit>
 800626e:	e7d7      	b.n	8006220 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8006270:	2001      	movs	r0, #1
}
 8006272:	4770      	bx	lr

08006274 <HAL_UART_TxCpltCallback>:
}
 8006274:	4770      	bx	lr

08006276 <HAL_UART_RxCpltCallback>:
}
 8006276:	4770      	bx	lr

08006278 <HAL_UART_ErrorCallback>:
}
 8006278:	4770      	bx	lr

0800627a <UART_DMAAbortOnError>:
{
 800627a:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800627c:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 800627e:	2300      	movs	r3, #0
 8006280:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006282:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8006284:	f7ff fff8 	bl	8006278 <HAL_UART_ErrorCallback>
}
 8006288:	bd08      	pop	{r3, pc}

0800628a <HAL_UARTEx_RxEventCallback>:
}
 800628a:	4770      	bx	lr

0800628c <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800628c:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 8006290:	b2db      	uxtb	r3, r3
 8006292:	2b22      	cmp	r3, #34	; 0x22
 8006294:	d11e      	bne.n	80062d4 <UART_Receive_IT+0x48>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006296:	6883      	ldr	r3, [r0, #8]
 8006298:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800629c:	d006      	beq.n	80062ac <UART_Receive_IT+0x20>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800629e:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80062a0:	b183      	cbz	r3, 80062c4 <UART_Receive_IT+0x38>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80062a2:	6803      	ldr	r3, [r0, #0]
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062aa:	e01b      	b.n	80062e4 <UART_Receive_IT+0x58>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062ac:	6903      	ldr	r3, [r0, #16]
 80062ae:	b9ab      	cbnz	r3, 80062dc <UART_Receive_IT+0x50>
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80062b0:	6a82      	ldr	r2, [r0, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80062b2:	6803      	ldr	r3, [r0, #0]
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062ba:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 80062bc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80062be:	3302      	adds	r3, #2
 80062c0:	6283      	str	r3, [r0, #40]	; 0x28
 80062c2:	e013      	b.n	80062ec <UART_Receive_IT+0x60>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80062c4:	6903      	ldr	r3, [r0, #16]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d1eb      	bne.n	80062a2 <UART_Receive_IT+0x16>
 80062ca:	e008      	b.n	80062de <UART_Receive_IT+0x52>
        HAL_UART_RxCpltCallback(huart);
 80062cc:	f7ff ffd3 	bl	8006276 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 80062d0:	2000      	movs	r0, #0
 80062d2:	e048      	b.n	8006366 <UART_Receive_IT+0xda>
    return HAL_BUSY;
 80062d4:	2002      	movs	r0, #2
 80062d6:	4770      	bx	lr
    return HAL_OK;
 80062d8:	2000      	movs	r0, #0
}
 80062da:	4770      	bx	lr
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80062dc:	6a82      	ldr	r2, [r0, #40]	; 0x28
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80062de:	6803      	ldr	r3, [r0, #0]
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	b2db      	uxtb	r3, r3
 80062e4:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 80062e6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80062e8:	3301      	adds	r3, #1
 80062ea:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 80062ec:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 80062ee:	3b01      	subs	r3, #1
 80062f0:	b29b      	uxth	r3, r3
 80062f2:	85c3      	strh	r3, [r0, #46]	; 0x2e
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d1ef      	bne.n	80062d8 <UART_Receive_IT+0x4c>
{
 80062f8:	b500      	push	{lr}
 80062fa:	b083      	sub	sp, #12
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80062fc:	6802      	ldr	r2, [r0, #0]
 80062fe:	68d3      	ldr	r3, [r2, #12]
 8006300:	f023 0320 	bic.w	r3, r3, #32
 8006304:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006306:	6802      	ldr	r2, [r0, #0]
 8006308:	68d3      	ldr	r3, [r2, #12]
 800630a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800630e:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006310:	6802      	ldr	r2, [r0, #0]
 8006312:	6953      	ldr	r3, [r2, #20]
 8006314:	f023 0301 	bic.w	r3, r3, #1
 8006318:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 800631a:	2320      	movs	r3, #32
 800631c:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006320:	2300      	movs	r3, #0
 8006322:	6343      	str	r3, [r0, #52]	; 0x34
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006324:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8006326:	2b01      	cmp	r3, #1
 8006328:	d1d0      	bne.n	80062cc <UART_Receive_IT+0x40>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800632a:	2300      	movs	r3, #0
 800632c:	6303      	str	r3, [r0, #48]	; 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800632e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006330:	f102 030c 	add.w	r3, r2, #12
 8006334:	e853 3f00 	ldrex	r3, [r3]
 8006338:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800633c:	320c      	adds	r2, #12
 800633e:	e842 3100 	strex	r1, r3, [r2]
 8006342:	2900      	cmp	r1, #0
 8006344:	d1f3      	bne.n	800632e <UART_Receive_IT+0xa2>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006346:	6803      	ldr	r3, [r0, #0]
 8006348:	681a      	ldr	r2, [r3, #0]
 800634a:	f012 0f10 	tst.w	r2, #16
 800634e:	d006      	beq.n	800635e <UART_Receive_IT+0xd2>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006350:	2200      	movs	r2, #0
 8006352:	9201      	str	r2, [sp, #4]
 8006354:	681a      	ldr	r2, [r3, #0]
 8006356:	9201      	str	r2, [sp, #4]
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	9301      	str	r3, [sp, #4]
 800635c:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800635e:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8006360:	f7ff ff93 	bl	800628a <HAL_UARTEx_RxEventCallback>
      return HAL_OK;
 8006364:	2000      	movs	r0, #0
}
 8006366:	b003      	add	sp, #12
 8006368:	f85d fb04 	ldr.w	pc, [sp], #4

0800636c <HAL_UART_IRQHandler>:
{
 800636c:	b510      	push	{r4, lr}
 800636e:	b082      	sub	sp, #8
 8006370:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006372:	6802      	ldr	r2, [r0, #0]
 8006374:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006376:	68d1      	ldr	r1, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006378:	6950      	ldr	r0, [r2, #20]
  if (errorflags == RESET)
 800637a:	f013 0f0f 	tst.w	r3, #15
 800637e:	d109      	bne.n	8006394 <HAL_UART_IRQHandler+0x28>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006380:	f013 0f20 	tst.w	r3, #32
 8006384:	d00d      	beq.n	80063a2 <HAL_UART_IRQHandler+0x36>
 8006386:	f011 0f20 	tst.w	r1, #32
 800638a:	d00a      	beq.n	80063a2 <HAL_UART_IRQHandler+0x36>
      UART_Receive_IT(huart);
 800638c:	4620      	mov	r0, r4
 800638e:	f7ff ff7d 	bl	800628c <UART_Receive_IT>
      return;
 8006392:	e017      	b.n	80063c4 <HAL_UART_IRQHandler+0x58>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006394:	f000 0001 	and.w	r0, r0, #1
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006398:	f401 7c90 	and.w	ip, r1, #288	; 0x120
 800639c:	ea5c 0c00 	orrs.w	ip, ip, r0
 80063a0:	d112      	bne.n	80063c8 <HAL_UART_IRQHandler+0x5c>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063a2:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80063a4:	2801      	cmp	r0, #1
 80063a6:	d07f      	beq.n	80064a8 <HAL_UART_IRQHandler+0x13c>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80063a8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80063ac:	d003      	beq.n	80063b6 <HAL_UART_IRQHandler+0x4a>
 80063ae:	f011 0f80 	tst.w	r1, #128	; 0x80
 80063b2:	f040 8119 	bne.w	80065e8 <HAL_UART_IRQHandler+0x27c>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80063b6:	f013 0f40 	tst.w	r3, #64	; 0x40
 80063ba:	d003      	beq.n	80063c4 <HAL_UART_IRQHandler+0x58>
 80063bc:	f011 0f40 	tst.w	r1, #64	; 0x40
 80063c0:	f040 813f 	bne.w	8006642 <HAL_UART_IRQHandler+0x2d6>
}
 80063c4:	b002      	add	sp, #8
 80063c6:	bd10      	pop	{r4, pc}
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80063c8:	f013 0f01 	tst.w	r3, #1
 80063cc:	d006      	beq.n	80063dc <HAL_UART_IRQHandler+0x70>
 80063ce:	f411 7f80 	tst.w	r1, #256	; 0x100
 80063d2:	d003      	beq.n	80063dc <HAL_UART_IRQHandler+0x70>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80063d4:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80063d6:	f042 0201 	orr.w	r2, r2, #1
 80063da:	6462      	str	r2, [r4, #68]	; 0x44
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80063dc:	f013 0f04 	tst.w	r3, #4
 80063e0:	d02f      	beq.n	8006442 <HAL_UART_IRQHandler+0xd6>
 80063e2:	b158      	cbz	r0, 80063fc <HAL_UART_IRQHandler+0x90>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80063e4:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80063e6:	f042 0202 	orr.w	r2, r2, #2
 80063ea:	6462      	str	r2, [r4, #68]	; 0x44
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80063ec:	f013 0f02 	tst.w	r3, #2
 80063f0:	f000 8132 	beq.w	8006658 <HAL_UART_IRQHandler+0x2ec>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80063f4:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80063f6:	f042 0204 	orr.w	r2, r2, #4
 80063fa:	6462      	str	r2, [r4, #68]	; 0x44
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80063fc:	f013 0f08 	tst.w	r3, #8
 8006400:	d007      	beq.n	8006412 <HAL_UART_IRQHandler+0xa6>
 8006402:	f001 0220 	and.w	r2, r1, #32
 8006406:	4302      	orrs	r2, r0
 8006408:	d003      	beq.n	8006412 <HAL_UART_IRQHandler+0xa6>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800640a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800640c:	f042 0208 	orr.w	r2, r2, #8
 8006410:	6462      	str	r2, [r4, #68]	; 0x44
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006412:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8006414:	2a00      	cmp	r2, #0
 8006416:	d0d5      	beq.n	80063c4 <HAL_UART_IRQHandler+0x58>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006418:	f013 0f20 	tst.w	r3, #32
 800641c:	d002      	beq.n	8006424 <HAL_UART_IRQHandler+0xb8>
 800641e:	f011 0f20 	tst.w	r1, #32
 8006422:	d114      	bne.n	800644e <HAL_UART_IRQHandler+0xe2>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006424:	6823      	ldr	r3, [r4, #0]
 8006426:	695a      	ldr	r2, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006428:	6c63      	ldr	r3, [r4, #68]	; 0x44
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800642a:	f002 0240 	and.w	r2, r2, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800642e:	f003 0308 	and.w	r3, r3, #8
 8006432:	4313      	orrs	r3, r2
 8006434:	d10f      	bne.n	8006456 <HAL_UART_IRQHandler+0xea>
        HAL_UART_ErrorCallback(huart);
 8006436:	4620      	mov	r0, r4
 8006438:	f7ff ff1e 	bl	8006278 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800643c:	2300      	movs	r3, #0
 800643e:	6463      	str	r3, [r4, #68]	; 0x44
 8006440:	e7c0      	b.n	80063c4 <HAL_UART_IRQHandler+0x58>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006442:	f013 0f02 	tst.w	r3, #2
 8006446:	d0d9      	beq.n	80063fc <HAL_UART_IRQHandler+0x90>
 8006448:	2800      	cmp	r0, #0
 800644a:	d0d7      	beq.n	80063fc <HAL_UART_IRQHandler+0x90>
 800644c:	e7d2      	b.n	80063f4 <HAL_UART_IRQHandler+0x88>
        UART_Receive_IT(huart);
 800644e:	4620      	mov	r0, r4
 8006450:	f7ff ff1c 	bl	800628c <UART_Receive_IT>
 8006454:	e7e6      	b.n	8006424 <HAL_UART_IRQHandler+0xb8>
        UART_EndRxTransfer(huart);
 8006456:	4620      	mov	r0, r4
 8006458:	f7ff fe68 	bl	800612c <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800645c:	6823      	ldr	r3, [r4, #0]
 800645e:	695b      	ldr	r3, [r3, #20]
 8006460:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006464:	d01c      	beq.n	80064a0 <HAL_UART_IRQHandler+0x134>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006466:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006468:	f102 0314 	add.w	r3, r2, #20
 800646c:	e853 3f00 	ldrex	r3, [r3]
 8006470:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006474:	3214      	adds	r2, #20
 8006476:	e842 3100 	strex	r1, r3, [r2]
 800647a:	2900      	cmp	r1, #0
 800647c:	d1f3      	bne.n	8006466 <HAL_UART_IRQHandler+0xfa>
          if (huart->hdmarx != NULL)
 800647e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006480:	b153      	cbz	r3, 8006498 <HAL_UART_IRQHandler+0x12c>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006482:	4a78      	ldr	r2, [pc, #480]	; (8006664 <HAL_UART_IRQHandler+0x2f8>)
 8006484:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006486:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8006488:	f7fc fe1a 	bl	80030c0 <HAL_DMA_Abort_IT>
 800648c:	2800      	cmp	r0, #0
 800648e:	d099      	beq.n	80063c4 <HAL_UART_IRQHandler+0x58>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006490:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8006492:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006494:	4798      	blx	r3
 8006496:	e795      	b.n	80063c4 <HAL_UART_IRQHandler+0x58>
            HAL_UART_ErrorCallback(huart);
 8006498:	4620      	mov	r0, r4
 800649a:	f7ff feed 	bl	8006278 <HAL_UART_ErrorCallback>
 800649e:	e791      	b.n	80063c4 <HAL_UART_IRQHandler+0x58>
          HAL_UART_ErrorCallback(huart);
 80064a0:	4620      	mov	r0, r4
 80064a2:	f7ff fee9 	bl	8006278 <HAL_UART_ErrorCallback>
 80064a6:	e78d      	b.n	80063c4 <HAL_UART_IRQHandler+0x58>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80064a8:	f013 0f10 	tst.w	r3, #16
 80064ac:	f43f af7c 	beq.w	80063a8 <HAL_UART_IRQHandler+0x3c>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80064b0:	f011 0f10 	tst.w	r1, #16
 80064b4:	f43f af78 	beq.w	80063a8 <HAL_UART_IRQHandler+0x3c>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80064b8:	2300      	movs	r3, #0
 80064ba:	9301      	str	r3, [sp, #4]
 80064bc:	6813      	ldr	r3, [r2, #0]
 80064be:	9301      	str	r3, [sp, #4]
 80064c0:	6853      	ldr	r3, [r2, #4]
 80064c2:	9301      	str	r3, [sp, #4]
 80064c4:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064c6:	6953      	ldr	r3, [r2, #20]
 80064c8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80064cc:	d050      	beq.n	8006570 <HAL_UART_IRQHandler+0x204>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80064ce:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80064d0:	6813      	ldr	r3, [r2, #0]
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	f43f af74 	beq.w	80063c4 <HAL_UART_IRQHandler+0x58>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80064dc:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80064de:	4299      	cmp	r1, r3
 80064e0:	f67f af70 	bls.w	80063c4 <HAL_UART_IRQHandler+0x58>
        huart->RxXferCount = nb_remaining_rx_data;
 80064e4:	85e3      	strh	r3, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80064e6:	6993      	ldr	r3, [r2, #24]
 80064e8:	2b20      	cmp	r3, #32
 80064ea:	d037      	beq.n	800655c <HAL_UART_IRQHandler+0x1f0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80064ec:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ee:	f102 030c 	add.w	r3, r2, #12
 80064f2:	e853 3f00 	ldrex	r3, [r3]
 80064f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064fa:	320c      	adds	r2, #12
 80064fc:	e842 3100 	strex	r1, r3, [r2]
 8006500:	2900      	cmp	r1, #0
 8006502:	d1f3      	bne.n	80064ec <HAL_UART_IRQHandler+0x180>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006504:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006506:	f102 0314 	add.w	r3, r2, #20
 800650a:	e853 3f00 	ldrex	r3, [r3]
 800650e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006512:	3214      	adds	r2, #20
 8006514:	e842 3100 	strex	r1, r3, [r2]
 8006518:	2900      	cmp	r1, #0
 800651a:	d1f3      	bne.n	8006504 <HAL_UART_IRQHandler+0x198>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800651c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800651e:	f102 0314 	add.w	r3, r2, #20
 8006522:	e853 3f00 	ldrex	r3, [r3]
 8006526:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800652a:	3214      	adds	r2, #20
 800652c:	e842 3100 	strex	r1, r3, [r2]
 8006530:	2900      	cmp	r1, #0
 8006532:	d1f3      	bne.n	800651c <HAL_UART_IRQHandler+0x1b0>
          huart->RxState = HAL_UART_STATE_READY;
 8006534:	2320      	movs	r3, #32
 8006536:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800653a:	2300      	movs	r3, #0
 800653c:	6323      	str	r3, [r4, #48]	; 0x30
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800653e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006540:	f102 030c 	add.w	r3, r2, #12
 8006544:	e853 3f00 	ldrex	r3, [r3]
 8006548:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800654c:	320c      	adds	r2, #12
 800654e:	e842 3100 	strex	r1, r3, [r2]
 8006552:	2900      	cmp	r1, #0
 8006554:	d1f3      	bne.n	800653e <HAL_UART_IRQHandler+0x1d2>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006556:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8006558:	f7fc fd8e 	bl	8003078 <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800655c:	2302      	movs	r3, #2
 800655e:	6363      	str	r3, [r4, #52]	; 0x34
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006560:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8006562:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8006564:	1ac9      	subs	r1, r1, r3
 8006566:	b289      	uxth	r1, r1
 8006568:	4620      	mov	r0, r4
 800656a:	f7ff fe8e 	bl	800628a <HAL_UARTEx_RxEventCallback>
 800656e:	e729      	b.n	80063c4 <HAL_UART_IRQHandler+0x58>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006570:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8006572:	b29a      	uxth	r2, r3
      if ((huart->RxXferCount > 0U)
 8006574:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8006576:	b29b      	uxth	r3, r3
 8006578:	2b00      	cmp	r3, #0
 800657a:	f43f af23 	beq.w	80063c4 <HAL_UART_IRQHandler+0x58>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800657e:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 8006580:	1a9b      	subs	r3, r3, r2
 8006582:	b299      	uxth	r1, r3
          && (nb_rx_data > 0U))
 8006584:	2900      	cmp	r1, #0
 8006586:	f43f af1d 	beq.w	80063c4 <HAL_UART_IRQHandler+0x58>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800658a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800658c:	f102 030c 	add.w	r3, r2, #12
 8006590:	e853 3f00 	ldrex	r3, [r3]
 8006594:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006598:	320c      	adds	r2, #12
 800659a:	e842 3000 	strex	r0, r3, [r2]
 800659e:	2800      	cmp	r0, #0
 80065a0:	d1f3      	bne.n	800658a <HAL_UART_IRQHandler+0x21e>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065a2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065a4:	f102 0314 	add.w	r3, r2, #20
 80065a8:	e853 3f00 	ldrex	r3, [r3]
 80065ac:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065b0:	3214      	adds	r2, #20
 80065b2:	e842 3000 	strex	r0, r3, [r2]
 80065b6:	2800      	cmp	r0, #0
 80065b8:	d1f3      	bne.n	80065a2 <HAL_UART_IRQHandler+0x236>
        huart->RxState = HAL_UART_STATE_READY;
 80065ba:	2320      	movs	r3, #32
 80065bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065c0:	2300      	movs	r3, #0
 80065c2:	6323      	str	r3, [r4, #48]	; 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065c4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065c6:	f102 030c 	add.w	r3, r2, #12
 80065ca:	e853 3f00 	ldrex	r3, [r3]
 80065ce:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065d2:	320c      	adds	r2, #12
 80065d4:	e842 3000 	strex	r0, r3, [r2]
 80065d8:	2800      	cmp	r0, #0
 80065da:	d1f3      	bne.n	80065c4 <HAL_UART_IRQHandler+0x258>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80065dc:	2302      	movs	r3, #2
 80065de:	6363      	str	r3, [r4, #52]	; 0x34
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80065e0:	4620      	mov	r0, r4
 80065e2:	f7ff fe52 	bl	800628a <HAL_UARTEx_RxEventCallback>
 80065e6:	e6ed      	b.n	80063c4 <HAL_UART_IRQHandler+0x58>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80065e8:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80065ec:	b2db      	uxtb	r3, r3
 80065ee:	2b21      	cmp	r3, #33	; 0x21
 80065f0:	f47f aee8 	bne.w	80063c4 <HAL_UART_IRQHandler+0x58>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065f4:	68a3      	ldr	r3, [r4, #8]
 80065f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065fa:	d016      	beq.n	800662a <HAL_UART_IRQHandler+0x2be>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80065fc:	6a23      	ldr	r3, [r4, #32]
 80065fe:	1c59      	adds	r1, r3, #1
 8006600:	6221      	str	r1, [r4, #32]
 8006602:	781b      	ldrb	r3, [r3, #0]
 8006604:	6053      	str	r3, [r2, #4]
    if (--huart->TxXferCount == 0U)
 8006606:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8006608:	3b01      	subs	r3, #1
 800660a:	b29b      	uxth	r3, r3
 800660c:	84e3      	strh	r3, [r4, #38]	; 0x26
 800660e:	2b00      	cmp	r3, #0
 8006610:	f47f aed8 	bne.w	80063c4 <HAL_UART_IRQHandler+0x58>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006614:	6822      	ldr	r2, [r4, #0]
 8006616:	68d3      	ldr	r3, [r2, #12]
 8006618:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800661c:	60d3      	str	r3, [r2, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800661e:	6822      	ldr	r2, [r4, #0]
 8006620:	68d3      	ldr	r3, [r2, #12]
 8006622:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006626:	60d3      	str	r3, [r2, #12]
 8006628:	e6cc      	b.n	80063c4 <HAL_UART_IRQHandler+0x58>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800662a:	6923      	ldr	r3, [r4, #16]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d1e5      	bne.n	80065fc <HAL_UART_IRQHandler+0x290>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006630:	6a23      	ldr	r3, [r4, #32]
 8006632:	881b      	ldrh	r3, [r3, #0]
 8006634:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006638:	6053      	str	r3, [r2, #4]
      huart->pTxBuffPtr += 2U;
 800663a:	6a23      	ldr	r3, [r4, #32]
 800663c:	3302      	adds	r3, #2
 800663e:	6223      	str	r3, [r4, #32]
 8006640:	e7e1      	b.n	8006606 <HAL_UART_IRQHandler+0x29a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006642:	68d3      	ldr	r3, [r2, #12]
 8006644:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006648:	60d3      	str	r3, [r2, #12]
  huart->gState = HAL_UART_STATE_READY;
 800664a:	2320      	movs	r3, #32
 800664c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  HAL_UART_TxCpltCallback(huart);
 8006650:	4620      	mov	r0, r4
 8006652:	f7ff fe0f 	bl	8006274 <HAL_UART_TxCpltCallback>
  return HAL_OK;
 8006656:	e6b5      	b.n	80063c4 <HAL_UART_IRQHandler+0x58>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006658:	f013 0f08 	tst.w	r3, #8
 800665c:	f47f aed5 	bne.w	800640a <HAL_UART_IRQHandler+0x9e>
 8006660:	e6d7      	b.n	8006412 <HAL_UART_IRQHandler+0xa6>
 8006662:	bf00      	nop
 8006664:	0800627b 	.word	0x0800627b

08006668 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006668:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 800666a:	f000 fa65 	bl	8006b38 <vTaskStartScheduler>
  
  return osOK;
}
 800666e:	2000      	movs	r0, #0
 8006670:	bd08      	pop	{r3, pc}

08006672 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006672:	b570      	push	{r4, r5, r6, lr}
 8006674:	b086      	sub	sp, #24
 8006676:	4684      	mov	ip, r0
 8006678:	460b      	mov	r3, r1
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800667a:	6944      	ldr	r4, [r0, #20]
 800667c:	b1bc      	cbz	r4, 80066ae <osThreadCreate+0x3c>
 800667e:	6985      	ldr	r5, [r0, #24]
 8006680:	b1ad      	cbz	r5, 80066ae <osThreadCreate+0x3c>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006682:	6840      	ldr	r0, [r0, #4]
 8006684:	f8dc 1000 	ldr.w	r1, [ip]
 8006688:	f8dc 2010 	ldr.w	r2, [ip, #16]
 800668c:	f9bc c008 	ldrsh.w	ip, [ip, #8]
  if (priority != osPriorityError) {
 8006690:	f1bc 0f84 	cmp.w	ip, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 8006694:	bf14      	ite	ne
 8006696:	f10c 0603 	addne.w	r6, ip, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800669a:	2600      	moveq	r6, #0
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800669c:	9502      	str	r5, [sp, #8]
 800669e:	9401      	str	r4, [sp, #4]
 80066a0:	9600      	str	r6, [sp, #0]
 80066a2:	f000 f9dd 	bl	8006a60 <xTaskCreateStatic>
 80066a6:	9005      	str	r0, [sp, #20]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80066a8:	9805      	ldr	r0, [sp, #20]
}
 80066aa:	b006      	add	sp, #24
 80066ac:	bd70      	pop	{r4, r5, r6, pc}
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80066ae:	f8dc 0004 	ldr.w	r0, [ip, #4]
 80066b2:	f8dc 1000 	ldr.w	r1, [ip]
 80066b6:	f8bc 2010 	ldrh.w	r2, [ip, #16]
 80066ba:	f9bc c008 	ldrsh.w	ip, [ip, #8]
  if (priority != osPriorityError) {
 80066be:	f1bc 0f84 	cmp.w	ip, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 80066c2:	bf14      	ite	ne
 80066c4:	f10c 0403 	addne.w	r4, ip, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80066c8:	2400      	moveq	r4, #0
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80066ca:	ad05      	add	r5, sp, #20
 80066cc:	9501      	str	r5, [sp, #4]
 80066ce:	9400      	str	r4, [sp, #0]
 80066d0:	f000 fa00 	bl	8006ad4 <xTaskCreate>
 80066d4:	2801      	cmp	r0, #1
 80066d6:	d0e7      	beq.n	80066a8 <osThreadCreate+0x36>
      return NULL;
 80066d8:	2000      	movs	r0, #0
 80066da:	e7e6      	b.n	80066aa <osThreadCreate+0x38>

080066dc <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80066dc:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80066de:	2801      	cmp	r0, #1
 80066e0:	bf38      	it	cc
 80066e2:	2001      	movcc	r0, #1
 80066e4:	f000 fb86 	bl	8006df4 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80066e8:	2000      	movs	r0, #0
 80066ea:	bd08      	pop	{r3, pc}

080066ec <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80066ec:	f100 0308 	add.w	r3, r0, #8
 80066f0:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80066f2:	f04f 32ff 	mov.w	r2, #4294967295
 80066f6:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80066f8:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80066fa:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80066fc:	2300      	movs	r3, #0
 80066fe:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006700:	4770      	bx	lr

08006702 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8006702:	2300      	movs	r3, #0
 8006704:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006706:	4770      	bx	lr

08006708 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8006708:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800670a:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800670c:	689a      	ldr	r2, [r3, #8]
 800670e:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006710:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006712:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006714:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8006716:	6803      	ldr	r3, [r0, #0]
 8006718:	3301      	adds	r3, #1
 800671a:	6003      	str	r3, [r0, #0]
}
 800671c:	4770      	bx	lr

0800671e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800671e:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006720:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006722:	f1b5 3fff 	cmp.w	r5, #4294967295
 8006726:	d011      	beq.n	800674c <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006728:	f100 0308 	add.w	r3, r0, #8
 800672c:	461c      	mov	r4, r3
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	681a      	ldr	r2, [r3, #0]
 8006732:	42aa      	cmp	r2, r5
 8006734:	d9fa      	bls.n	800672c <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006736:	6863      	ldr	r3, [r4, #4]
 8006738:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800673a:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800673c:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800673e:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006740:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8006742:	6803      	ldr	r3, [r0, #0]
 8006744:	3301      	adds	r3, #1
 8006746:	6003      	str	r3, [r0, #0]
}
 8006748:	bc30      	pop	{r4, r5}
 800674a:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 800674c:	6904      	ldr	r4, [r0, #16]
 800674e:	e7f2      	b.n	8006736 <vListInsert+0x18>

08006750 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8006750:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006752:	6841      	ldr	r1, [r0, #4]
 8006754:	6882      	ldr	r2, [r0, #8]
 8006756:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006758:	6841      	ldr	r1, [r0, #4]
 800675a:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800675c:	685a      	ldr	r2, [r3, #4]
 800675e:	4282      	cmp	r2, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006760:	bf04      	itt	eq
 8006762:	6882      	ldreq	r2, [r0, #8]
 8006764:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8006766:	2200      	movs	r2, #0
 8006768:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800676a:	681a      	ldr	r2, [r3, #0]
 800676c:	3a01      	subs	r2, #1
 800676e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006770:	6818      	ldr	r0, [r3, #0]
}
 8006772:	4770      	bx	lr

08006774 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006774:	4b08      	ldr	r3, [pc, #32]	; (8006798 <prvResetNextTaskUnblockTime+0x24>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	b923      	cbnz	r3, 8006786 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800677c:	4b07      	ldr	r3, [pc, #28]	; (800679c <prvResetNextTaskUnblockTime+0x28>)
 800677e:	f04f 32ff 	mov.w	r2, #4294967295
 8006782:	601a      	str	r2, [r3, #0]
 8006784:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006786:	4b04      	ldr	r3, [pc, #16]	; (8006798 <prvResetNextTaskUnblockTime+0x24>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800678c:	68db      	ldr	r3, [r3, #12]
 800678e:	685a      	ldr	r2, [r3, #4]
 8006790:	4b02      	ldr	r3, [pc, #8]	; (800679c <prvResetNextTaskUnblockTime+0x28>)
 8006792:	601a      	str	r2, [r3, #0]
	}
}
 8006794:	4770      	bx	lr
 8006796:	bf00      	nop
 8006798:	20000ce4 	.word	0x20000ce4
 800679c:	20000db8 	.word	0x20000db8

080067a0 <prvInitialiseNewTask>:
{
 80067a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067a4:	4606      	mov	r6, r0
 80067a6:	461f      	mov	r7, r3
 80067a8:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 80067ac:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80067ae:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80067b2:	3a01      	subs	r2, #1
 80067b4:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80067b6:	eb05 0582 	add.w	r5, r5, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80067ba:	f025 0507 	bic.w	r5, r5, #7
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80067be:	f101 3cff 	add.w	ip, r1, #4294967295
 80067c2:	f104 0e33 	add.w	lr, r4, #51	; 0x33
 80067c6:	310f      	adds	r1, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80067c8:	f81c 2f01 	ldrb.w	r2, [ip, #1]!
 80067cc:	f80e 2f01 	strb.w	r2, [lr, #1]!
		if( pcName[ x ] == 0x00 )
 80067d0:	b10a      	cbz	r2, 80067d6 <prvInitialiseNewTask+0x36>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80067d2:	458c      	cmp	ip, r1
 80067d4:	d1f8      	bne.n	80067c8 <prvInitialiseNewTask+0x28>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80067d6:	f04f 0a00 	mov.w	sl, #0
 80067da:	f884 a043 	strb.w	sl, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80067de:	9b08      	ldr	r3, [sp, #32]
 80067e0:	2b06      	cmp	r3, #6
 80067e2:	bf28      	it	cs
 80067e4:	2306      	movcs	r3, #6
 80067e6:	4699      	mov	r9, r3
	pxNewTCB->uxPriority = uxPriority;
 80067e8:	62e3      	str	r3, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 80067ea:	6463      	str	r3, [r4, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80067ec:	f8c4 a048 	str.w	sl, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80067f0:	1d20      	adds	r0, r4, #4
 80067f2:	f7ff ff86 	bl	8006702 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80067f6:	f104 0018 	add.w	r0, r4, #24
 80067fa:	f7ff ff82 	bl	8006702 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80067fe:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006800:	f1c9 0307 	rsb	r3, r9, #7
 8006804:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006806:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 8006808:	f8c4 a04c 	str.w	sl, [r4, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800680c:	f884 a050 	strb.w	sl, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006810:	463a      	mov	r2, r7
 8006812:	4631      	mov	r1, r6
 8006814:	4628      	mov	r0, r5
 8006816:	f000 fb8d 	bl	8006f34 <pxPortInitialiseStack>
 800681a:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 800681c:	f1b8 0f00 	cmp.w	r8, #0
 8006820:	d001      	beq.n	8006826 <prvInitialiseNewTask+0x86>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006822:	f8c8 4000 	str.w	r4, [r8]
}
 8006826:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0800682c <prvAddNewTaskToReadyList>:
{
 800682c:	b570      	push	{r4, r5, r6, lr}
 800682e:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8006830:	f000 fba8 	bl	8006f84 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8006834:	4a2f      	ldr	r2, [pc, #188]	; (80068f4 <prvAddNewTaskToReadyList+0xc8>)
 8006836:	6813      	ldr	r3, [r2, #0]
 8006838:	3301      	adds	r3, #1
 800683a:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800683c:	4b2e      	ldr	r3, [pc, #184]	; (80068f8 <prvAddNewTaskToReadyList+0xcc>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d033      	beq.n	80068ac <prvAddNewTaskToReadyList+0x80>
			if( xSchedulerRunning == pdFALSE )
 8006844:	4b2d      	ldr	r3, [pc, #180]	; (80068fc <prvAddNewTaskToReadyList+0xd0>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	b93b      	cbnz	r3, 800685a <prvAddNewTaskToReadyList+0x2e>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800684a:	4b2b      	ldr	r3, [pc, #172]	; (80068f8 <prvAddNewTaskToReadyList+0xcc>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006850:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006852:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8006854:	bf9c      	itt	ls
 8006856:	4b28      	ldrls	r3, [pc, #160]	; (80068f8 <prvAddNewTaskToReadyList+0xcc>)
 8006858:	601c      	strls	r4, [r3, #0]
		uxTaskNumber++;
 800685a:	4a29      	ldr	r2, [pc, #164]	; (8006900 <prvAddNewTaskToReadyList+0xd4>)
 800685c:	6813      	ldr	r3, [r2, #0]
 800685e:	3301      	adds	r3, #1
 8006860:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8006862:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8006864:	4a27      	ldr	r2, [pc, #156]	; (8006904 <prvAddNewTaskToReadyList+0xd8>)
 8006866:	6811      	ldr	r1, [r2, #0]
 8006868:	2301      	movs	r3, #1
 800686a:	4083      	lsls	r3, r0
 800686c:	430b      	orrs	r3, r1
 800686e:	6013      	str	r3, [r2, #0]
 8006870:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006874:	1d21      	adds	r1, r4, #4
 8006876:	4b24      	ldr	r3, [pc, #144]	; (8006908 <prvAddNewTaskToReadyList+0xdc>)
 8006878:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800687c:	f7ff ff44 	bl	8006708 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8006880:	f000 fba2 	bl	8006fc8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8006884:	4b1d      	ldr	r3, [pc, #116]	; (80068fc <prvAddNewTaskToReadyList+0xd0>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	b17b      	cbz	r3, 80068aa <prvAddNewTaskToReadyList+0x7e>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800688a:	4b1b      	ldr	r3, [pc, #108]	; (80068f8 <prvAddNewTaskToReadyList+0xcc>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006890:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006892:	429a      	cmp	r2, r3
 8006894:	d209      	bcs.n	80068aa <prvAddNewTaskToReadyList+0x7e>
			taskYIELD_IF_USING_PREEMPTION();
 8006896:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800689a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800689e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80068a2:	f3bf 8f4f 	dsb	sy
 80068a6:	f3bf 8f6f 	isb	sy
}
 80068aa:	bd70      	pop	{r4, r5, r6, pc}
			pxCurrentTCB = pxNewTCB;
 80068ac:	4b12      	ldr	r3, [pc, #72]	; (80068f8 <prvAddNewTaskToReadyList+0xcc>)
 80068ae:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80068b0:	6813      	ldr	r3, [r2, #0]
 80068b2:	2b01      	cmp	r3, #1
 80068b4:	d1d1      	bne.n	800685a <prvAddNewTaskToReadyList+0x2e>
 80068b6:	4d14      	ldr	r5, [pc, #80]	; (8006908 <prvAddNewTaskToReadyList+0xdc>)
 80068b8:	f105 068c 	add.w	r6, r5, #140	; 0x8c
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80068bc:	4628      	mov	r0, r5
 80068be:	f7ff ff15 	bl	80066ec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80068c2:	3514      	adds	r5, #20
 80068c4:	42b5      	cmp	r5, r6
 80068c6:	d1f9      	bne.n	80068bc <prvAddNewTaskToReadyList+0x90>
	vListInitialise( &xDelayedTaskList1 );
 80068c8:	4e10      	ldr	r6, [pc, #64]	; (800690c <prvAddNewTaskToReadyList+0xe0>)
 80068ca:	4630      	mov	r0, r6
 80068cc:	f7ff ff0e 	bl	80066ec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80068d0:	4d0f      	ldr	r5, [pc, #60]	; (8006910 <prvAddNewTaskToReadyList+0xe4>)
 80068d2:	4628      	mov	r0, r5
 80068d4:	f7ff ff0a 	bl	80066ec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80068d8:	480e      	ldr	r0, [pc, #56]	; (8006914 <prvAddNewTaskToReadyList+0xe8>)
 80068da:	f7ff ff07 	bl	80066ec <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 80068de:	480e      	ldr	r0, [pc, #56]	; (8006918 <prvAddNewTaskToReadyList+0xec>)
 80068e0:	f7ff ff04 	bl	80066ec <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 80068e4:	480d      	ldr	r0, [pc, #52]	; (800691c <prvAddNewTaskToReadyList+0xf0>)
 80068e6:	f7ff ff01 	bl	80066ec <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 80068ea:	4b0d      	ldr	r3, [pc, #52]	; (8006920 <prvAddNewTaskToReadyList+0xf4>)
 80068ec:	601e      	str	r6, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80068ee:	4b0d      	ldr	r3, [pc, #52]	; (8006924 <prvAddNewTaskToReadyList+0xf8>)
 80068f0:	601d      	str	r5, [r3, #0]
}
 80068f2:	e7b2      	b.n	800685a <prvAddNewTaskToReadyList+0x2e>
 80068f4:	20000d78 	.word	0x20000d78
 80068f8:	20000ce0 	.word	0x20000ce0
 80068fc:	20000dd4 	.word	0x20000dd4
 8006900:	20000d88 	.word	0x20000d88
 8006904:	20000d8c 	.word	0x20000d8c
 8006908:	20000cec 	.word	0x20000cec
 800690c:	20000d90 	.word	0x20000d90
 8006910:	20000da4 	.word	0x20000da4
 8006914:	20000dc0 	.word	0x20000dc0
 8006918:	20000dec 	.word	0x20000dec
 800691c:	20000dd8 	.word	0x20000dd8
 8006920:	20000ce4 	.word	0x20000ce4
 8006924:	20000ce8 	.word	0x20000ce8

08006928 <prvDeleteTCB>:
	{
 8006928:	b510      	push	{r4, lr}
 800692a:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800692c:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8006930:	b163      	cbz	r3, 800694c <prvDeleteTCB+0x24>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006932:	2b01      	cmp	r3, #1
 8006934:	d011      	beq.n	800695a <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006936:	2b02      	cmp	r3, #2
 8006938:	d00e      	beq.n	8006958 <prvDeleteTCB+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800693a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800693e:	f383 8811 	msr	BASEPRI, r3
 8006942:	f3bf 8f6f 	isb	sy
 8006946:	f3bf 8f4f 	dsb	sy
 800694a:	e7fe      	b.n	800694a <prvDeleteTCB+0x22>
				vPortFree( pxTCB->pxStack );
 800694c:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800694e:	f000 fccb 	bl	80072e8 <vPortFree>
				vPortFree( pxTCB );
 8006952:	4620      	mov	r0, r4
 8006954:	f000 fcc8 	bl	80072e8 <vPortFree>
	}
 8006958:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 800695a:	f000 fcc5 	bl	80072e8 <vPortFree>
 800695e:	e7fb      	b.n	8006958 <prvDeleteTCB+0x30>

08006960 <prvIdleTask>:
{
 8006960:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006962:	4c15      	ldr	r4, [pc, #84]	; (80069b8 <prvIdleTask+0x58>)
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006964:	4f15      	ldr	r7, [pc, #84]	; (80069bc <prvIdleTask+0x5c>)
				--uxCurrentNumberOfTasks;
 8006966:	4e16      	ldr	r6, [pc, #88]	; (80069c0 <prvIdleTask+0x60>)
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006968:	f8df 8058 	ldr.w	r8, [pc, #88]	; 80069c4 <prvIdleTask+0x64>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800696c:	6823      	ldr	r3, [r4, #0]
 800696e:	b1a3      	cbz	r3, 800699a <prvIdleTask+0x3a>
			taskENTER_CRITICAL();
 8006970:	f000 fb08 	bl	8006f84 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006978:	1d28      	adds	r0, r5, #4
 800697a:	f7ff fee9 	bl	8006750 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800697e:	6833      	ldr	r3, [r6, #0]
 8006980:	3b01      	subs	r3, #1
 8006982:	6033      	str	r3, [r6, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006984:	6823      	ldr	r3, [r4, #0]
 8006986:	3b01      	subs	r3, #1
 8006988:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 800698a:	f000 fb1d 	bl	8006fc8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 800698e:	4628      	mov	r0, r5
 8006990:	f7ff ffca 	bl	8006928 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006994:	6823      	ldr	r3, [r4, #0]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d1ea      	bne.n	8006970 <prvIdleTask+0x10>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800699a:	f8d8 3000 	ldr.w	r3, [r8]
 800699e:	2b01      	cmp	r3, #1
 80069a0:	d9e4      	bls.n	800696c <prvIdleTask+0xc>
				taskYIELD();
 80069a2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80069a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069aa:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80069ae:	f3bf 8f4f 	dsb	sy
 80069b2:	f3bf 8f6f 	isb	sy
 80069b6:	e7d9      	b.n	800696c <prvIdleTask+0xc>
 80069b8:	20000d7c 	.word	0x20000d7c
 80069bc:	20000dec 	.word	0x20000dec
 80069c0:	20000d78 	.word	0x20000d78
 80069c4:	20000cec 	.word	0x20000cec

080069c8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80069c8:	b570      	push	{r4, r5, r6, lr}
 80069ca:	4604      	mov	r4, r0
 80069cc:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80069ce:	4b1d      	ldr	r3, [pc, #116]	; (8006a44 <prvAddCurrentTaskToDelayedList+0x7c>)
 80069d0:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80069d2:	4b1d      	ldr	r3, [pc, #116]	; (8006a48 <prvAddCurrentTaskToDelayedList+0x80>)
 80069d4:	6818      	ldr	r0, [r3, #0]
 80069d6:	3004      	adds	r0, #4
 80069d8:	f7ff feba 	bl	8006750 <uxListRemove>
 80069dc:	b948      	cbnz	r0, 80069f2 <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80069de:	4b1a      	ldr	r3, [pc, #104]	; (8006a48 <prvAddCurrentTaskToDelayedList+0x80>)
 80069e0:	681a      	ldr	r2, [r3, #0]
 80069e2:	491a      	ldr	r1, [pc, #104]	; (8006a4c <prvAddCurrentTaskToDelayedList+0x84>)
 80069e4:	680b      	ldr	r3, [r1, #0]
 80069e6:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 80069e8:	2201      	movs	r2, #1
 80069ea:	4082      	lsls	r2, r0
 80069ec:	ea23 0302 	bic.w	r3, r3, r2
 80069f0:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80069f2:	f1b4 3fff 	cmp.w	r4, #4294967295
 80069f6:	d00d      	beq.n	8006a14 <prvAddCurrentTaskToDelayedList+0x4c>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 80069f8:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80069fa:	4b13      	ldr	r3, [pc, #76]	; (8006a48 <prvAddCurrentTaskToDelayedList+0x80>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8006a00:	42a6      	cmp	r6, r4
 8006a02:	d910      	bls.n	8006a26 <prvAddCurrentTaskToDelayedList+0x5e>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a04:	4b12      	ldr	r3, [pc, #72]	; (8006a50 <prvAddCurrentTaskToDelayedList+0x88>)
 8006a06:	6818      	ldr	r0, [r3, #0]
 8006a08:	4b0f      	ldr	r3, [pc, #60]	; (8006a48 <prvAddCurrentTaskToDelayedList+0x80>)
 8006a0a:	6819      	ldr	r1, [r3, #0]
 8006a0c:	3104      	adds	r1, #4
 8006a0e:	f7ff fe86 	bl	800671e <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006a12:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006a14:	2d00      	cmp	r5, #0
 8006a16:	d0ef      	beq.n	80069f8 <prvAddCurrentTaskToDelayedList+0x30>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a18:	4b0b      	ldr	r3, [pc, #44]	; (8006a48 <prvAddCurrentTaskToDelayedList+0x80>)
 8006a1a:	6819      	ldr	r1, [r3, #0]
 8006a1c:	3104      	adds	r1, #4
 8006a1e:	480d      	ldr	r0, [pc, #52]	; (8006a54 <prvAddCurrentTaskToDelayedList+0x8c>)
 8006a20:	f7ff fe72 	bl	8006708 <vListInsertEnd>
 8006a24:	e7f5      	b.n	8006a12 <prvAddCurrentTaskToDelayedList+0x4a>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a26:	4b0c      	ldr	r3, [pc, #48]	; (8006a58 <prvAddCurrentTaskToDelayedList+0x90>)
 8006a28:	6818      	ldr	r0, [r3, #0]
 8006a2a:	4b07      	ldr	r3, [pc, #28]	; (8006a48 <prvAddCurrentTaskToDelayedList+0x80>)
 8006a2c:	6819      	ldr	r1, [r3, #0]
 8006a2e:	3104      	adds	r1, #4
 8006a30:	f7ff fe75 	bl	800671e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006a34:	4b09      	ldr	r3, [pc, #36]	; (8006a5c <prvAddCurrentTaskToDelayedList+0x94>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	42a3      	cmp	r3, r4
					xNextTaskUnblockTime = xTimeToWake;
 8006a3a:	bf84      	itt	hi
 8006a3c:	4b07      	ldrhi	r3, [pc, #28]	; (8006a5c <prvAddCurrentTaskToDelayedList+0x94>)
 8006a3e:	601c      	strhi	r4, [r3, #0]
}
 8006a40:	e7e7      	b.n	8006a12 <prvAddCurrentTaskToDelayedList+0x4a>
 8006a42:	bf00      	nop
 8006a44:	20000e00 	.word	0x20000e00
 8006a48:	20000ce0 	.word	0x20000ce0
 8006a4c:	20000d8c 	.word	0x20000d8c
 8006a50:	20000ce8 	.word	0x20000ce8
 8006a54:	20000dd8 	.word	0x20000dd8
 8006a58:	20000ce4 	.word	0x20000ce4
 8006a5c:	20000db8 	.word	0x20000db8

08006a60 <xTaskCreateStatic>:
	{
 8006a60:	b530      	push	{r4, r5, lr}
 8006a62:	b087      	sub	sp, #28
 8006a64:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 8006a66:	b17c      	cbz	r4, 8006a88 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006a68:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006a6a:	b1b5      	cbz	r5, 8006a9a <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 8006a6c:	2554      	movs	r5, #84	; 0x54
 8006a6e:	9504      	str	r5, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006a70:	9d04      	ldr	r5, [sp, #16]
 8006a72:	2d54      	cmp	r5, #84	; 0x54
 8006a74:	d01a      	beq.n	8006aac <xTaskCreateStatic+0x4c>
 8006a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a7a:	f383 8811 	msr	BASEPRI, r3
 8006a7e:	f3bf 8f6f 	isb	sy
 8006a82:	f3bf 8f4f 	dsb	sy
 8006a86:	e7fe      	b.n	8006a86 <xTaskCreateStatic+0x26>
 8006a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a8c:	f383 8811 	msr	BASEPRI, r3
 8006a90:	f3bf 8f6f 	isb	sy
 8006a94:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 8006a98:	e7fe      	b.n	8006a98 <xTaskCreateStatic+0x38>
 8006a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a9e:	f383 8811 	msr	BASEPRI, r3
 8006aa2:	f3bf 8f6f 	isb	sy
 8006aa6:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 8006aaa:	e7fe      	b.n	8006aaa <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006aac:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006aae:	632c      	str	r4, [r5, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006ab0:	2402      	movs	r4, #2
 8006ab2:	f885 4051 	strb.w	r4, [r5, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006ab6:	2400      	movs	r4, #0
 8006ab8:	9403      	str	r4, [sp, #12]
 8006aba:	9502      	str	r5, [sp, #8]
 8006abc:	ac05      	add	r4, sp, #20
 8006abe:	9401      	str	r4, [sp, #4]
 8006ac0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006ac2:	9400      	str	r4, [sp, #0]
 8006ac4:	f7ff fe6c 	bl	80067a0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006ac8:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006aca:	f7ff feaf 	bl	800682c <prvAddNewTaskToReadyList>
	}
 8006ace:	9805      	ldr	r0, [sp, #20]
 8006ad0:	b007      	add	sp, #28
 8006ad2:	bd30      	pop	{r4, r5, pc}

08006ad4 <xTaskCreate>:
	{
 8006ad4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006ad8:	b085      	sub	sp, #20
 8006ada:	4607      	mov	r7, r0
 8006adc:	4688      	mov	r8, r1
 8006ade:	4614      	mov	r4, r2
 8006ae0:	461e      	mov	r6, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ae2:	0090      	lsls	r0, r2, #2
 8006ae4:	f000 fb6a 	bl	80071bc <pvPortMalloc>
			if( pxStack != NULL )
 8006ae8:	b308      	cbz	r0, 8006b2e <xTaskCreate+0x5a>
 8006aea:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8006aec:	2054      	movs	r0, #84	; 0x54
 8006aee:	f000 fb65 	bl	80071bc <pvPortMalloc>
				if( pxNewTCB != NULL )
 8006af2:	4605      	mov	r5, r0
 8006af4:	b1a8      	cbz	r0, 8006b22 <xTaskCreate+0x4e>
					pxNewTCB->pxStack = pxStack;
 8006af6:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006afa:	2300      	movs	r3, #0
 8006afc:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006b00:	9303      	str	r3, [sp, #12]
 8006b02:	9002      	str	r0, [sp, #8]
 8006b04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006b06:	9301      	str	r3, [sp, #4]
 8006b08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006b0a:	9300      	str	r3, [sp, #0]
 8006b0c:	4633      	mov	r3, r6
 8006b0e:	4622      	mov	r2, r4
 8006b10:	4641      	mov	r1, r8
 8006b12:	4638      	mov	r0, r7
 8006b14:	f7ff fe44 	bl	80067a0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006b18:	4628      	mov	r0, r5
 8006b1a:	f7ff fe87 	bl	800682c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006b1e:	2001      	movs	r0, #1
 8006b20:	e007      	b.n	8006b32 <xTaskCreate+0x5e>
					vPortFree( pxStack );
 8006b22:	4648      	mov	r0, r9
 8006b24:	f000 fbe0 	bl	80072e8 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006b28:	f04f 30ff 	mov.w	r0, #4294967295
 8006b2c:	e001      	b.n	8006b32 <xTaskCreate+0x5e>
 8006b2e:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8006b32:	b005      	add	sp, #20
 8006b34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08006b38 <vTaskStartScheduler>:
{
 8006b38:	b510      	push	{r4, lr}
 8006b3a:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006b3c:	2400      	movs	r4, #0
 8006b3e:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006b40:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006b42:	aa07      	add	r2, sp, #28
 8006b44:	a906      	add	r1, sp, #24
 8006b46:	a805      	add	r0, sp, #20
 8006b48:	f7fb f9f0 	bl	8001f2c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006b4c:	9b05      	ldr	r3, [sp, #20]
 8006b4e:	9302      	str	r3, [sp, #8]
 8006b50:	9b06      	ldr	r3, [sp, #24]
 8006b52:	9301      	str	r3, [sp, #4]
 8006b54:	9400      	str	r4, [sp, #0]
 8006b56:	4623      	mov	r3, r4
 8006b58:	9a07      	ldr	r2, [sp, #28]
 8006b5a:	490d      	ldr	r1, [pc, #52]	; (8006b90 <vTaskStartScheduler+0x58>)
 8006b5c:	480d      	ldr	r0, [pc, #52]	; (8006b94 <vTaskStartScheduler+0x5c>)
 8006b5e:	f7ff ff7f 	bl	8006a60 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8006b62:	b190      	cbz	r0, 8006b8a <vTaskStartScheduler+0x52>
 8006b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b68:	f383 8811 	msr	BASEPRI, r3
 8006b6c:	f3bf 8f6f 	isb	sy
 8006b70:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8006b74:	4b08      	ldr	r3, [pc, #32]	; (8006b98 <vTaskStartScheduler+0x60>)
 8006b76:	f04f 32ff 	mov.w	r2, #4294967295
 8006b7a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006b7c:	4b07      	ldr	r3, [pc, #28]	; (8006b9c <vTaskStartScheduler+0x64>)
 8006b7e:	2201      	movs	r2, #1
 8006b80:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006b82:	4b07      	ldr	r3, [pc, #28]	; (8006ba0 <vTaskStartScheduler+0x68>)
 8006b84:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8006b86:	f000 fa87 	bl	8007098 <xPortStartScheduler>
}
 8006b8a:	b008      	add	sp, #32
 8006b8c:	bd10      	pop	{r4, pc}
 8006b8e:	bf00      	nop
 8006b90:	0800c650 	.word	0x0800c650
 8006b94:	08006961 	.word	0x08006961
 8006b98:	20000db8 	.word	0x20000db8
 8006b9c:	20000dd4 	.word	0x20000dd4
 8006ba0:	20000e00 	.word	0x20000e00

08006ba4 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8006ba4:	4a02      	ldr	r2, [pc, #8]	; (8006bb0 <vTaskSuspendAll+0xc>)
 8006ba6:	6813      	ldr	r3, [r2, #0]
 8006ba8:	3301      	adds	r3, #1
 8006baa:	6013      	str	r3, [r2, #0]
}
 8006bac:	4770      	bx	lr
 8006bae:	bf00      	nop
 8006bb0:	20000d84 	.word	0x20000d84

08006bb4 <xTaskIncrementTick>:
{
 8006bb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006bb8:	4b41      	ldr	r3, [pc, #260]	; (8006cc0 <xTaskIncrementTick+0x10c>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d171      	bne.n	8006ca4 <xTaskIncrementTick+0xf0>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006bc0:	4b40      	ldr	r3, [pc, #256]	; (8006cc4 <xTaskIncrementTick+0x110>)
 8006bc2:	681e      	ldr	r6, [r3, #0]
 8006bc4:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
 8006bc6:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006bc8:	b9c6      	cbnz	r6, 8006bfc <xTaskIncrementTick+0x48>
			taskSWITCH_DELAYED_LISTS();
 8006bca:	4b3f      	ldr	r3, [pc, #252]	; (8006cc8 <xTaskIncrementTick+0x114>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	b143      	cbz	r3, 8006be4 <xTaskIncrementTick+0x30>
 8006bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bd6:	f383 8811 	msr	BASEPRI, r3
 8006bda:	f3bf 8f6f 	isb	sy
 8006bde:	f3bf 8f4f 	dsb	sy
 8006be2:	e7fe      	b.n	8006be2 <xTaskIncrementTick+0x2e>
 8006be4:	4a38      	ldr	r2, [pc, #224]	; (8006cc8 <xTaskIncrementTick+0x114>)
 8006be6:	6811      	ldr	r1, [r2, #0]
 8006be8:	4b38      	ldr	r3, [pc, #224]	; (8006ccc <xTaskIncrementTick+0x118>)
 8006bea:	6818      	ldr	r0, [r3, #0]
 8006bec:	6010      	str	r0, [r2, #0]
 8006bee:	6019      	str	r1, [r3, #0]
 8006bf0:	4a37      	ldr	r2, [pc, #220]	; (8006cd0 <xTaskIncrementTick+0x11c>)
 8006bf2:	6813      	ldr	r3, [r2, #0]
 8006bf4:	3301      	adds	r3, #1
 8006bf6:	6013      	str	r3, [r2, #0]
 8006bf8:	f7ff fdbc 	bl	8006774 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006bfc:	4b35      	ldr	r3, [pc, #212]	; (8006cd4 <xTaskIncrementTick+0x120>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	42b3      	cmp	r3, r6
 8006c02:	d842      	bhi.n	8006c8a <xTaskIncrementTick+0xd6>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006c04:	4b30      	ldr	r3, [pc, #192]	; (8006cc8 <xTaskIncrementTick+0x114>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	b13b      	cbz	r3, 8006c1c <xTaskIncrementTick+0x68>
BaseType_t xSwitchRequired = pdFALSE;
 8006c0c:	2500      	movs	r5, #0
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006c0e:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8006cc8 <xTaskIncrementTick+0x114>
					prvAddTaskToReadyList( pxTCB );
 8006c12:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8006cd8 <xTaskIncrementTick+0x124>
 8006c16:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8006cdc <xTaskIncrementTick+0x128>
 8006c1a:	e023      	b.n	8006c64 <xTaskIncrementTick+0xb0>
BaseType_t xSwitchRequired = pdFALSE;
 8006c1c:	2500      	movs	r5, #0
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c1e:	4b2d      	ldr	r3, [pc, #180]	; (8006cd4 <xTaskIncrementTick+0x120>)
 8006c20:	f04f 32ff 	mov.w	r2, #4294967295
 8006c24:	601a      	str	r2, [r3, #0]
					break;
 8006c26:	e031      	b.n	8006c8c <xTaskIncrementTick+0xd8>
						xNextTaskUnblockTime = xItemValue;
 8006c28:	4a2a      	ldr	r2, [pc, #168]	; (8006cd4 <xTaskIncrementTick+0x120>)
 8006c2a:	6013      	str	r3, [r2, #0]
						break;
 8006c2c:	e02e      	b.n	8006c8c <xTaskIncrementTick+0xd8>
					prvAddTaskToReadyList( pxTCB );
 8006c2e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8006c30:	f8d9 2000 	ldr.w	r2, [r9]
 8006c34:	2301      	movs	r3, #1
 8006c36:	4083      	lsls	r3, r0
 8006c38:	4313      	orrs	r3, r2
 8006c3a:	f8c9 3000 	str.w	r3, [r9]
 8006c3e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006c42:	4639      	mov	r1, r7
 8006c44:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
 8006c48:	f7ff fd5e 	bl	8006708 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006c4c:	4b24      	ldr	r3, [pc, #144]	; (8006ce0 <xTaskIncrementTick+0x12c>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8006c54:	429a      	cmp	r2, r3
 8006c56:	bf28      	it	cs
 8006c58:	2501      	movcs	r5, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006c5a:	f8d8 3000 	ldr.w	r3, [r8]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d0dc      	beq.n	8006c1e <xTaskIncrementTick+0x6a>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006c64:	f8d8 3000 	ldr.w	r3, [r8]
 8006c68:	68db      	ldr	r3, [r3, #12]
 8006c6a:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006c6c:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 8006c6e:	429e      	cmp	r6, r3
 8006c70:	d3da      	bcc.n	8006c28 <xTaskIncrementTick+0x74>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c72:	1d27      	adds	r7, r4, #4
 8006c74:	4638      	mov	r0, r7
 8006c76:	f7ff fd6b 	bl	8006750 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006c7a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d0d6      	beq.n	8006c2e <xTaskIncrementTick+0x7a>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006c80:	f104 0018 	add.w	r0, r4, #24
 8006c84:	f7ff fd64 	bl	8006750 <uxListRemove>
 8006c88:	e7d1      	b.n	8006c2e <xTaskIncrementTick+0x7a>
BaseType_t xSwitchRequired = pdFALSE;
 8006c8a:	2500      	movs	r5, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006c8c:	4b14      	ldr	r3, [pc, #80]	; (8006ce0 <xTaskIncrementTick+0x12c>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c92:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006c96:	009b      	lsls	r3, r3, #2
 8006c98:	4a10      	ldr	r2, [pc, #64]	; (8006cdc <xTaskIncrementTick+0x128>)
 8006c9a:	58d3      	ldr	r3, [r2, r3]
				xSwitchRequired = pdTRUE;
 8006c9c:	2b02      	cmp	r3, #2
 8006c9e:	bf28      	it	cs
 8006ca0:	2501      	movcs	r5, #1
 8006ca2:	e004      	b.n	8006cae <xTaskIncrementTick+0xfa>
		++uxPendedTicks;
 8006ca4:	4a0f      	ldr	r2, [pc, #60]	; (8006ce4 <xTaskIncrementTick+0x130>)
 8006ca6:	6813      	ldr	r3, [r2, #0]
 8006ca8:	3301      	adds	r3, #1
 8006caa:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8006cac:	2500      	movs	r5, #0
		if( xYieldPending != pdFALSE )
 8006cae:	4b0e      	ldr	r3, [pc, #56]	; (8006ce8 <xTaskIncrementTick+0x134>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
 8006cb2:	2b00      	cmp	r3, #0
}
 8006cb4:	bf0c      	ite	eq
 8006cb6:	4628      	moveq	r0, r5
 8006cb8:	2001      	movne	r0, #1
 8006cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cbe:	bf00      	nop
 8006cc0:	20000d84 	.word	0x20000d84
 8006cc4:	20000e00 	.word	0x20000e00
 8006cc8:	20000ce4 	.word	0x20000ce4
 8006ccc:	20000ce8 	.word	0x20000ce8
 8006cd0:	20000dbc 	.word	0x20000dbc
 8006cd4:	20000db8 	.word	0x20000db8
 8006cd8:	20000d8c 	.word	0x20000d8c
 8006cdc:	20000cec 	.word	0x20000cec
 8006ce0:	20000ce0 	.word	0x20000ce0
 8006ce4:	20000d80 	.word	0x20000d80
 8006ce8:	20000e04 	.word	0x20000e04

08006cec <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
 8006cec:	4b39      	ldr	r3, [pc, #228]	; (8006dd4 <xTaskResumeAll+0xe8>)
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	b943      	cbnz	r3, 8006d04 <xTaskResumeAll+0x18>
 8006cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cf6:	f383 8811 	msr	BASEPRI, r3
 8006cfa:	f3bf 8f6f 	isb	sy
 8006cfe:	f3bf 8f4f 	dsb	sy
 8006d02:	e7fe      	b.n	8006d02 <xTaskResumeAll+0x16>
{
 8006d04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	taskENTER_CRITICAL();
 8006d08:	f000 f93c 	bl	8006f84 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8006d0c:	4b31      	ldr	r3, [pc, #196]	; (8006dd4 <xTaskResumeAll+0xe8>)
 8006d0e:	681a      	ldr	r2, [r3, #0]
 8006d10:	3a01      	subs	r2, #1
 8006d12:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d14a      	bne.n	8006db0 <xTaskResumeAll+0xc4>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006d1a:	4b2f      	ldr	r3, [pc, #188]	; (8006dd8 <xTaskResumeAll+0xec>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d04c      	beq.n	8006dbc <xTaskResumeAll+0xd0>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006d22:	4b2e      	ldr	r3, [pc, #184]	; (8006ddc <xTaskResumeAll+0xf0>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d04c      	beq.n	8006dc4 <xTaskResumeAll+0xd8>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006d2a:	4f2c      	ldr	r7, [pc, #176]	; (8006ddc <xTaskResumeAll+0xf0>)
					prvAddTaskToReadyList( pxTCB );
 8006d2c:	4e2c      	ldr	r6, [pc, #176]	; (8006de0 <xTaskResumeAll+0xf4>)
 8006d2e:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 8006de4 <xTaskResumeAll+0xf8>
 8006d32:	e002      	b.n	8006d3a <xTaskResumeAll+0x4e>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d042      	beq.n	8006dc0 <xTaskResumeAll+0xd4>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006d3e:	f104 0018 	add.w	r0, r4, #24
 8006d42:	f7ff fd05 	bl	8006750 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d46:	1d25      	adds	r5, r4, #4
 8006d48:	4628      	mov	r0, r5
 8006d4a:	f7ff fd01 	bl	8006750 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006d4e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8006d50:	6832      	ldr	r2, [r6, #0]
 8006d52:	2301      	movs	r3, #1
 8006d54:	4083      	lsls	r3, r0
 8006d56:	4313      	orrs	r3, r2
 8006d58:	6033      	str	r3, [r6, #0]
 8006d5a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006d5e:	4629      	mov	r1, r5
 8006d60:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 8006d64:	f7ff fcd0 	bl	8006708 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006d68:	4b1f      	ldr	r3, [pc, #124]	; (8006de8 <xTaskResumeAll+0xfc>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d70:	429a      	cmp	r2, r3
 8006d72:	d3df      	bcc.n	8006d34 <xTaskResumeAll+0x48>
						xYieldPending = pdTRUE;
 8006d74:	4b1d      	ldr	r3, [pc, #116]	; (8006dec <xTaskResumeAll+0x100>)
 8006d76:	2201      	movs	r2, #1
 8006d78:	601a      	str	r2, [r3, #0]
 8006d7a:	e7db      	b.n	8006d34 <xTaskResumeAll+0x48>
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006d7c:	3c01      	subs	r4, #1
 8006d7e:	d005      	beq.n	8006d8c <xTaskResumeAll+0xa0>
							if( xTaskIncrementTick() != pdFALSE )
 8006d80:	f7ff ff18 	bl	8006bb4 <xTaskIncrementTick>
 8006d84:	2800      	cmp	r0, #0
 8006d86:	d0f9      	beq.n	8006d7c <xTaskResumeAll+0x90>
								xYieldPending = pdTRUE;
 8006d88:	6035      	str	r5, [r6, #0]
 8006d8a:	e7f7      	b.n	8006d7c <xTaskResumeAll+0x90>
						uxPendedTicks = 0;
 8006d8c:	4b18      	ldr	r3, [pc, #96]	; (8006df0 <xTaskResumeAll+0x104>)
 8006d8e:	2200      	movs	r2, #0
 8006d90:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
 8006d92:	4b16      	ldr	r3, [pc, #88]	; (8006dec <xTaskResumeAll+0x100>)
 8006d94:	681c      	ldr	r4, [r3, #0]
 8006d96:	b164      	cbz	r4, 8006db2 <xTaskResumeAll+0xc6>
					taskYIELD_IF_USING_PREEMPTION();
 8006d98:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006d9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006da0:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006da4:	f3bf 8f4f 	dsb	sy
 8006da8:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8006dac:	2401      	movs	r4, #1
 8006dae:	e000      	b.n	8006db2 <xTaskResumeAll+0xc6>
BaseType_t xAlreadyYielded = pdFALSE;
 8006db0:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8006db2:	f000 f909 	bl	8006fc8 <vPortExitCritical>
}
 8006db6:	4620      	mov	r0, r4
 8006db8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
BaseType_t xAlreadyYielded = pdFALSE;
 8006dbc:	2400      	movs	r4, #0
 8006dbe:	e7f8      	b.n	8006db2 <xTaskResumeAll+0xc6>
					prvResetNextTaskUnblockTime();
 8006dc0:	f7ff fcd8 	bl	8006774 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006dc4:	4b0a      	ldr	r3, [pc, #40]	; (8006df0 <xTaskResumeAll+0x104>)
 8006dc6:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006dc8:	2c00      	cmp	r4, #0
 8006dca:	d0e2      	beq.n	8006d92 <xTaskResumeAll+0xa6>
								xYieldPending = pdTRUE;
 8006dcc:	4e07      	ldr	r6, [pc, #28]	; (8006dec <xTaskResumeAll+0x100>)
 8006dce:	2501      	movs	r5, #1
 8006dd0:	e7d6      	b.n	8006d80 <xTaskResumeAll+0x94>
 8006dd2:	bf00      	nop
 8006dd4:	20000d84 	.word	0x20000d84
 8006dd8:	20000d78 	.word	0x20000d78
 8006ddc:	20000dc0 	.word	0x20000dc0
 8006de0:	20000d8c 	.word	0x20000d8c
 8006de4:	20000cec 	.word	0x20000cec
 8006de8:	20000ce0 	.word	0x20000ce0
 8006dec:	20000e04 	.word	0x20000e04
 8006df0:	20000d80 	.word	0x20000d80

08006df4 <vTaskDelay>:
	{
 8006df4:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006df6:	b1a8      	cbz	r0, 8006e24 <vTaskDelay+0x30>
 8006df8:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 8006dfa:	4b10      	ldr	r3, [pc, #64]	; (8006e3c <vTaskDelay+0x48>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	b143      	cbz	r3, 8006e12 <vTaskDelay+0x1e>
 8006e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e04:	f383 8811 	msr	BASEPRI, r3
 8006e08:	f3bf 8f6f 	isb	sy
 8006e0c:	f3bf 8f4f 	dsb	sy
 8006e10:	e7fe      	b.n	8006e10 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8006e12:	f7ff fec7 	bl	8006ba4 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006e16:	2100      	movs	r1, #0
 8006e18:	4620      	mov	r0, r4
 8006e1a:	f7ff fdd5 	bl	80069c8 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8006e1e:	f7ff ff65 	bl	8006cec <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8006e22:	b948      	cbnz	r0, 8006e38 <vTaskDelay+0x44>
			portYIELD_WITHIN_API();
 8006e24:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006e28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e2c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006e30:	f3bf 8f4f 	dsb	sy
 8006e34:	f3bf 8f6f 	isb	sy
	}
 8006e38:	bd10      	pop	{r4, pc}
 8006e3a:	bf00      	nop
 8006e3c:	20000d84 	.word	0x20000d84

08006e40 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006e40:	4b1f      	ldr	r3, [pc, #124]	; (8006ec0 <vTaskSwitchContext+0x80>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	b11b      	cbz	r3, 8006e4e <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 8006e46:	4b1f      	ldr	r3, [pc, #124]	; (8006ec4 <vTaskSwitchContext+0x84>)
 8006e48:	2201      	movs	r2, #1
 8006e4a:	601a      	str	r2, [r3, #0]
 8006e4c:	4770      	bx	lr
		xYieldPending = pdFALSE;
 8006e4e:	4b1d      	ldr	r3, [pc, #116]	; (8006ec4 <vTaskSwitchContext+0x84>)
 8006e50:	2200      	movs	r2, #0
 8006e52:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006e54:	4b1c      	ldr	r3, [pc, #112]	; (8006ec8 <vTaskSwitchContext+0x88>)
 8006e56:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006e58:	fab3 f383 	clz	r3, r3
 8006e5c:	b2db      	uxtb	r3, r3
 8006e5e:	f1c3 031f 	rsb	r3, r3, #31
 8006e62:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8006e66:	0092      	lsls	r2, r2, #2
 8006e68:	4918      	ldr	r1, [pc, #96]	; (8006ecc <vTaskSwitchContext+0x8c>)
 8006e6a:	588a      	ldr	r2, [r1, r2]
 8006e6c:	b942      	cbnz	r2, 8006e80 <vTaskSwitchContext+0x40>
	__asm volatile
 8006e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e72:	f383 8811 	msr	BASEPRI, r3
 8006e76:	f3bf 8f6f 	isb	sy
 8006e7a:	f3bf 8f4f 	dsb	sy
 8006e7e:	e7fe      	b.n	8006e7e <vTaskSwitchContext+0x3e>
 8006e80:	4a12      	ldr	r2, [pc, #72]	; (8006ecc <vTaskSwitchContext+0x8c>)
 8006e82:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8006e86:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8006e8a:	6848      	ldr	r0, [r1, #4]
 8006e8c:	6840      	ldr	r0, [r0, #4]
 8006e8e:	6048      	str	r0, [r1, #4]
 8006e90:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8006e94:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8006e98:	3208      	adds	r2, #8
 8006e9a:	4290      	cmp	r0, r2
 8006e9c:	d009      	beq.n	8006eb2 <vTaskSwitchContext+0x72>
 8006e9e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006ea2:	4a0a      	ldr	r2, [pc, #40]	; (8006ecc <vTaskSwitchContext+0x8c>)
 8006ea4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006ea8:	685b      	ldr	r3, [r3, #4]
 8006eaa:	68da      	ldr	r2, [r3, #12]
 8006eac:	4b08      	ldr	r3, [pc, #32]	; (8006ed0 <vTaskSwitchContext+0x90>)
 8006eae:	601a      	str	r2, [r3, #0]
}
 8006eb0:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006eb2:	6840      	ldr	r0, [r0, #4]
 8006eb4:	4a05      	ldr	r2, [pc, #20]	; (8006ecc <vTaskSwitchContext+0x8c>)
 8006eb6:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8006eba:	6050      	str	r0, [r2, #4]
 8006ebc:	e7ef      	b.n	8006e9e <vTaskSwitchContext+0x5e>
 8006ebe:	bf00      	nop
 8006ec0:	20000d84 	.word	0x20000d84
 8006ec4:	20000e04 	.word	0x20000e04
 8006ec8:	20000d8c 	.word	0x20000d8c
 8006ecc:	20000cec 	.word	0x20000cec
 8006ed0:	20000ce0 	.word	0x20000ce0

08006ed4 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006ed4:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006eda:	4b0d      	ldr	r3, [pc, #52]	; (8006f10 <prvTaskExitError+0x3c>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ee2:	d008      	beq.n	8006ef6 <prvTaskExitError+0x22>
 8006ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ee8:	f383 8811 	msr	BASEPRI, r3
 8006eec:	f3bf 8f6f 	isb	sy
 8006ef0:	f3bf 8f4f 	dsb	sy
 8006ef4:	e7fe      	b.n	8006ef4 <prvTaskExitError+0x20>
 8006ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006efa:	f383 8811 	msr	BASEPRI, r3
 8006efe:	f3bf 8f6f 	isb	sy
 8006f02:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006f06:	9b01      	ldr	r3, [sp, #4]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d0fc      	beq.n	8006f06 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006f0c:	b002      	add	sp, #8
 8006f0e:	4770      	bx	lr
 8006f10:	20000014 	.word	0x20000014

08006f14 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006f14:	4806      	ldr	r0, [pc, #24]	; (8006f30 <prvPortStartFirstTask+0x1c>)
 8006f16:	6800      	ldr	r0, [r0, #0]
 8006f18:	6800      	ldr	r0, [r0, #0]
 8006f1a:	f380 8808 	msr	MSP, r0
 8006f1e:	b662      	cpsie	i
 8006f20:	b661      	cpsie	f
 8006f22:	f3bf 8f4f 	dsb	sy
 8006f26:	f3bf 8f6f 	isb	sy
 8006f2a:	df00      	svc	0
 8006f2c:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006f2e:	0000      	.short	0x0000
 8006f30:	e000ed08 	.word	0xe000ed08

08006f34 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006f34:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006f38:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006f3c:	f021 0101 	bic.w	r1, r1, #1
 8006f40:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006f44:	4b03      	ldr	r3, [pc, #12]	; (8006f54 <pxPortInitialiseStack+0x20>)
 8006f46:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006f4a:	f840 2c20 	str.w	r2, [r0, #-32]
}
 8006f4e:	3840      	subs	r0, #64	; 0x40
 8006f50:	4770      	bx	lr
 8006f52:	bf00      	nop
 8006f54:	08006ed5 	.word	0x08006ed5
	...

08006f60 <SVC_Handler>:
	__asm volatile (
 8006f60:	4b07      	ldr	r3, [pc, #28]	; (8006f80 <pxCurrentTCBConst2>)
 8006f62:	6819      	ldr	r1, [r3, #0]
 8006f64:	6808      	ldr	r0, [r1, #0]
 8006f66:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006f6a:	f380 8809 	msr	PSP, r0
 8006f6e:	f3bf 8f6f 	isb	sy
 8006f72:	f04f 0000 	mov.w	r0, #0
 8006f76:	f380 8811 	msr	BASEPRI, r0
 8006f7a:	f04e 0e0d 	orr.w	lr, lr, #13
 8006f7e:	4770      	bx	lr

08006f80 <pxCurrentTCBConst2>:
 8006f80:	20000ce0 	.word	0x20000ce0

08006f84 <vPortEnterCritical>:
 8006f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f88:	f383 8811 	msr	BASEPRI, r3
 8006f8c:	f3bf 8f6f 	isb	sy
 8006f90:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006f94:	4a0b      	ldr	r2, [pc, #44]	; (8006fc4 <vPortEnterCritical+0x40>)
 8006f96:	6813      	ldr	r3, [r2, #0]
 8006f98:	3301      	adds	r3, #1
 8006f9a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006f9c:	2b01      	cmp	r3, #1
 8006f9e:	d000      	beq.n	8006fa2 <vPortEnterCritical+0x1e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
	}
}
 8006fa0:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006fa2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006fa6:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 8006faa:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006fae:	d0f7      	beq.n	8006fa0 <vPortEnterCritical+0x1c>
 8006fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fb4:	f383 8811 	msr	BASEPRI, r3
 8006fb8:	f3bf 8f6f 	isb	sy
 8006fbc:	f3bf 8f4f 	dsb	sy
 8006fc0:	e7fe      	b.n	8006fc0 <vPortEnterCritical+0x3c>
 8006fc2:	bf00      	nop
 8006fc4:	20000014 	.word	0x20000014

08006fc8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 8006fc8:	4b09      	ldr	r3, [pc, #36]	; (8006ff0 <vPortExitCritical+0x28>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	b943      	cbnz	r3, 8006fe0 <vPortExitCritical+0x18>
 8006fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fd2:	f383 8811 	msr	BASEPRI, r3
 8006fd6:	f3bf 8f6f 	isb	sy
 8006fda:	f3bf 8f4f 	dsb	sy
 8006fde:	e7fe      	b.n	8006fde <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8006fe0:	3b01      	subs	r3, #1
 8006fe2:	4a03      	ldr	r2, [pc, #12]	; (8006ff0 <vPortExitCritical+0x28>)
 8006fe4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006fe6:	b90b      	cbnz	r3, 8006fec <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006fe8:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8006fec:	4770      	bx	lr
 8006fee:	bf00      	nop
 8006ff0:	20000014 	.word	0x20000014
	...

08007000 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007000:	f3ef 8009 	mrs	r0, PSP
 8007004:	f3bf 8f6f 	isb	sy
 8007008:	4b0d      	ldr	r3, [pc, #52]	; (8007040 <pxCurrentTCBConst>)
 800700a:	681a      	ldr	r2, [r3, #0]
 800700c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007010:	6010      	str	r0, [r2, #0]
 8007012:	e92d 4008 	stmdb	sp!, {r3, lr}
 8007016:	f04f 0050 	mov.w	r0, #80	; 0x50
 800701a:	f380 8811 	msr	BASEPRI, r0
 800701e:	f7ff ff0f 	bl	8006e40 <vTaskSwitchContext>
 8007022:	f04f 0000 	mov.w	r0, #0
 8007026:	f380 8811 	msr	BASEPRI, r0
 800702a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800702e:	6819      	ldr	r1, [r3, #0]
 8007030:	6808      	ldr	r0, [r1, #0]
 8007032:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007036:	f380 8809 	msr	PSP, r0
 800703a:	f3bf 8f6f 	isb	sy
 800703e:	4770      	bx	lr

08007040 <pxCurrentTCBConst>:
 8007040:	20000ce0 	.word	0x20000ce0

08007044 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007044:	b508      	push	{r3, lr}
	__asm volatile
 8007046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800704a:	f383 8811 	msr	BASEPRI, r3
 800704e:	f3bf 8f6f 	isb	sy
 8007052:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007056:	f7ff fdad 	bl	8006bb4 <xTaskIncrementTick>
 800705a:	b128      	cbz	r0, 8007068 <SysTick_Handler+0x24>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800705c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007060:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007064:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 8007068:	2300      	movs	r3, #0
 800706a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800706e:	bd08      	pop	{r3, pc}

08007070 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007070:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8007074:	2300      	movs	r3, #0
 8007076:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007078:	6193      	str	r3, [r2, #24]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800707a:	4b05      	ldr	r3, [pc, #20]	; (8007090 <vPortSetupTimerInterrupt+0x20>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	4905      	ldr	r1, [pc, #20]	; (8007094 <vPortSetupTimerInterrupt+0x24>)
 8007080:	fba1 1303 	umull	r1, r3, r1, r3
 8007084:	099b      	lsrs	r3, r3, #6
 8007086:	3b01      	subs	r3, #1
 8007088:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800708a:	2307      	movs	r3, #7
 800708c:	6113      	str	r3, [r2, #16]
}
 800708e:	4770      	bx	lr
 8007090:	20000000 	.word	0x20000000
 8007094:	10624dd3 	.word	0x10624dd3

08007098 <xPortStartScheduler>:
{
 8007098:	b510      	push	{r4, lr}
 800709a:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800709c:	4b2b      	ldr	r3, [pc, #172]	; (800714c <xPortStartScheduler+0xb4>)
 800709e:	781a      	ldrb	r2, [r3, #0]
 80070a0:	b2d2      	uxtb	r2, r2
 80070a2:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80070a4:	22ff      	movs	r2, #255	; 0xff
 80070a6:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80070a8:	781b      	ldrb	r3, [r3, #0]
 80070aa:	b2db      	uxtb	r3, r3
 80070ac:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80070b0:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80070b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80070b8:	4a25      	ldr	r2, [pc, #148]	; (8007150 <xPortStartScheduler+0xb8>)
 80070ba:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80070bc:	4b25      	ldr	r3, [pc, #148]	; (8007154 <xPortStartScheduler+0xbc>)
 80070be:	2207      	movs	r2, #7
 80070c0:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80070c2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80070c6:	f013 0f80 	tst.w	r3, #128	; 0x80
 80070ca:	d011      	beq.n	80070f0 <xPortStartScheduler+0x58>
 80070cc:	2206      	movs	r2, #6
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80070ce:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80070d2:	005b      	lsls	r3, r3, #1
 80070d4:	b2db      	uxtb	r3, r3
 80070d6:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80070da:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80070de:	4611      	mov	r1, r2
 80070e0:	3a01      	subs	r2, #1
 80070e2:	f013 0f80 	tst.w	r3, #128	; 0x80
 80070e6:	d1f2      	bne.n	80070ce <xPortStartScheduler+0x36>
 80070e8:	4b1a      	ldr	r3, [pc, #104]	; (8007154 <xPortStartScheduler+0xbc>)
 80070ea:	6019      	str	r1, [r3, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80070ec:	2903      	cmp	r1, #3
 80070ee:	d008      	beq.n	8007102 <xPortStartScheduler+0x6a>
	__asm volatile
 80070f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070f4:	f383 8811 	msr	BASEPRI, r3
 80070f8:	f3bf 8f6f 	isb	sy
 80070fc:	f3bf 8f4f 	dsb	sy
 8007100:	e7fe      	b.n	8007100 <xPortStartScheduler+0x68>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007102:	4b14      	ldr	r3, [pc, #80]	; (8007154 <xPortStartScheduler+0xbc>)
 8007104:	f44f 7240 	mov.w	r2, #768	; 0x300
 8007108:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800710a:	9b01      	ldr	r3, [sp, #4]
 800710c:	b2db      	uxtb	r3, r3
 800710e:	4a0f      	ldr	r2, [pc, #60]	; (800714c <xPortStartScheduler+0xb4>)
 8007110:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007112:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007116:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 800711a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800711e:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007122:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 8007126:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 800712a:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 800712e:	f7ff ff9f 	bl	8007070 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8007132:	2400      	movs	r4, #0
 8007134:	4b08      	ldr	r3, [pc, #32]	; (8007158 <xPortStartScheduler+0xc0>)
 8007136:	601c      	str	r4, [r3, #0]
	prvPortStartFirstTask();
 8007138:	f7ff feec 	bl	8006f14 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800713c:	f7ff fe80 	bl	8006e40 <vTaskSwitchContext>
	prvTaskExitError();
 8007140:	f7ff fec8 	bl	8006ed4 <prvTaskExitError>
}
 8007144:	4620      	mov	r0, r4
 8007146:	b002      	add	sp, #8
 8007148:	bd10      	pop	{r4, pc}
 800714a:	bf00      	nop
 800714c:	e000e400 	.word	0xe000e400
 8007150:	20000e08 	.word	0x20000e08
 8007154:	20000e0c 	.word	0x20000e0c
 8007158:	20000014 	.word	0x20000014

0800715c <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800715c:	4b15      	ldr	r3, [pc, #84]	; (80071b4 <prvInsertBlockIntoFreeList+0x58>)
 800715e:	461a      	mov	r2, r3
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	4283      	cmp	r3, r0
 8007164:	d3fb      	bcc.n	800715e <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007166:	6851      	ldr	r1, [r2, #4]
 8007168:	eb02 0c01 	add.w	ip, r2, r1
 800716c:	4560      	cmp	r0, ip
 800716e:	d009      	beq.n	8007184 <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007170:	6841      	ldr	r1, [r0, #4]
 8007172:	eb00 0c01 	add.w	ip, r0, r1
 8007176:	4563      	cmp	r3, ip
 8007178:	d009      	beq.n	800718e <prvInsertBlockIntoFreeList+0x32>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800717a:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800717c:	4290      	cmp	r0, r2
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800717e:	bf18      	it	ne
 8007180:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
 8007182:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007184:	6840      	ldr	r0, [r0, #4]
 8007186:	4401      	add	r1, r0
 8007188:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 800718a:	4610      	mov	r0, r2
 800718c:	e7f0      	b.n	8007170 <prvInsertBlockIntoFreeList+0x14>
{
 800718e:	b410      	push	{r4}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007190:	4c09      	ldr	r4, [pc, #36]	; (80071b8 <prvInsertBlockIntoFreeList+0x5c>)
 8007192:	6824      	ldr	r4, [r4, #0]
 8007194:	42a3      	cmp	r3, r4
 8007196:	d00a      	beq.n	80071ae <prvInsertBlockIntoFreeList+0x52>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007198:	685b      	ldr	r3, [r3, #4]
 800719a:	4419      	add	r1, r3
 800719c:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800719e:	6813      	ldr	r3, [r2, #0]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 80071a4:	4290      	cmp	r0, r2
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80071a6:	bf18      	it	ne
 80071a8:	6010      	strne	r0, [r2, #0]
	}
}
 80071aa:	bc10      	pop	{r4}
 80071ac:	4770      	bx	lr
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80071ae:	6004      	str	r4, [r0, #0]
 80071b0:	e7f8      	b.n	80071a4 <prvInsertBlockIntoFreeList+0x48>
 80071b2:	bf00      	nop
 80071b4:	200027a0 	.word	0x200027a0
 80071b8:	20000e10 	.word	0x20000e10

080071bc <pvPortMalloc>:
{
 80071bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071be:	4604      	mov	r4, r0
	vTaskSuspendAll();
 80071c0:	f7ff fcf0 	bl	8006ba4 <vTaskSuspendAll>
		if( pxEnd == NULL )
 80071c4:	4b42      	ldr	r3, [pc, #264]	; (80072d0 <pvPortMalloc+0x114>)
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	b1b3      	cbz	r3, 80071f8 <pvPortMalloc+0x3c>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80071ca:	4b42      	ldr	r3, [pc, #264]	; (80072d4 <pvPortMalloc+0x118>)
 80071cc:	681d      	ldr	r5, [r3, #0]
 80071ce:	4225      	tst	r5, r4
 80071d0:	d179      	bne.n	80072c6 <pvPortMalloc+0x10a>
			if( xWantedSize > 0 )
 80071d2:	2c00      	cmp	r4, #0
 80071d4:	d077      	beq.n	80072c6 <pvPortMalloc+0x10a>
				xWantedSize += xHeapStructSize;
 80071d6:	f104 0208 	add.w	r2, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80071da:	f014 0f07 	tst.w	r4, #7
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80071de:	bf1c      	itt	ne
 80071e0:	f022 0207 	bicne.w	r2, r2, #7
 80071e4:	3208      	addne	r2, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80071e6:	2a00      	cmp	r2, #0
 80071e8:	d06d      	beq.n	80072c6 <pvPortMalloc+0x10a>
 80071ea:	4b3b      	ldr	r3, [pc, #236]	; (80072d8 <pvPortMalloc+0x11c>)
 80071ec:	681e      	ldr	r6, [r3, #0]
 80071ee:	4296      	cmp	r6, r2
 80071f0:	d369      	bcc.n	80072c6 <pvPortMalloc+0x10a>
				pxBlock = xStart.pxNextFreeBlock;
 80071f2:	493a      	ldr	r1, [pc, #232]	; (80072dc <pvPortMalloc+0x120>)
 80071f4:	680c      	ldr	r4, [r1, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80071f6:	e027      	b.n	8007248 <pvPortMalloc+0x8c>
	uxAddress = ( size_t ) ucHeap;
 80071f8:	4a39      	ldr	r2, [pc, #228]	; (80072e0 <pvPortMalloc+0x124>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80071fa:	f012 0f07 	tst.w	r2, #7
 80071fe:	d007      	beq.n	8007210 <pvPortMalloc+0x54>
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007200:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007202:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007206:	f502 53cc 	add.w	r3, r2, #6528	; 0x1980
 800720a:	1a5b      	subs	r3, r3, r1
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800720c:	460a      	mov	r2, r1
 800720e:	e001      	b.n	8007214 <pvPortMalloc+0x58>
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007210:	f44f 53cc 	mov.w	r3, #6528	; 0x1980
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007214:	4831      	ldr	r0, [pc, #196]	; (80072dc <pvPortMalloc+0x120>)
 8007216:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007218:	2100      	movs	r1, #0
 800721a:	6041      	str	r1, [r0, #4]
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800721c:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 800721e:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007220:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 8007224:	482a      	ldr	r0, [pc, #168]	; (80072d0 <pvPortMalloc+0x114>)
 8007226:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 8007228:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800722a:	6019      	str	r1, [r3, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800722c:	1a99      	subs	r1, r3, r2
 800722e:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007230:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007232:	4b2c      	ldr	r3, [pc, #176]	; (80072e4 <pvPortMalloc+0x128>)
 8007234:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007236:	4b28      	ldr	r3, [pc, #160]	; (80072d8 <pvPortMalloc+0x11c>)
 8007238:	6019      	str	r1, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800723a:	4b26      	ldr	r3, [pc, #152]	; (80072d4 <pvPortMalloc+0x118>)
 800723c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007240:	601a      	str	r2, [r3, #0]
}
 8007242:	e7c2      	b.n	80071ca <pvPortMalloc+0xe>
 8007244:	4621      	mov	r1, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 8007246:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007248:	6863      	ldr	r3, [r4, #4]
 800724a:	4293      	cmp	r3, r2
 800724c:	d202      	bcs.n	8007254 <pvPortMalloc+0x98>
 800724e:	6823      	ldr	r3, [r4, #0]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d1f7      	bne.n	8007244 <pvPortMalloc+0x88>
				if( pxBlock != pxEnd )
 8007254:	4b1e      	ldr	r3, [pc, #120]	; (80072d0 <pvPortMalloc+0x114>)
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	42a3      	cmp	r3, r4
 800725a:	d034      	beq.n	80072c6 <pvPortMalloc+0x10a>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800725c:	680f      	ldr	r7, [r1, #0]
 800725e:	3708      	adds	r7, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007260:	6823      	ldr	r3, [r4, #0]
 8007262:	600b      	str	r3, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007264:	6863      	ldr	r3, [r4, #4]
 8007266:	1a9b      	subs	r3, r3, r2
 8007268:	2b10      	cmp	r3, #16
 800726a:	d910      	bls.n	800728e <pvPortMalloc+0xd2>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800726c:	18a0      	adds	r0, r4, r2
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800726e:	f010 0f07 	tst.w	r0, #7
 8007272:	d008      	beq.n	8007286 <pvPortMalloc+0xca>
 8007274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007278:	f383 8811 	msr	BASEPRI, r3
 800727c:	f3bf 8f6f 	isb	sy
 8007280:	f3bf 8f4f 	dsb	sy
 8007284:	e7fe      	b.n	8007284 <pvPortMalloc+0xc8>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007286:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007288:	6062      	str	r2, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800728a:	f7ff ff67 	bl	800715c <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800728e:	6863      	ldr	r3, [r4, #4]
 8007290:	1af6      	subs	r6, r6, r3
 8007292:	4a11      	ldr	r2, [pc, #68]	; (80072d8 <pvPortMalloc+0x11c>)
 8007294:	6016      	str	r6, [r2, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007296:	4a13      	ldr	r2, [pc, #76]	; (80072e4 <pvPortMalloc+0x128>)
 8007298:	6812      	ldr	r2, [r2, #0]
 800729a:	4296      	cmp	r6, r2
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800729c:	bf3c      	itt	cc
 800729e:	4a11      	ldrcc	r2, [pc, #68]	; (80072e4 <pvPortMalloc+0x128>)
 80072a0:	6016      	strcc	r6, [r2, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80072a2:	431d      	orrs	r5, r3
 80072a4:	6065      	str	r5, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80072a6:	2300      	movs	r3, #0
 80072a8:	6023      	str	r3, [r4, #0]
	( void ) xTaskResumeAll();
 80072aa:	f7ff fd1f 	bl	8006cec <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80072ae:	f017 0f07 	tst.w	r7, #7
 80072b2:	d00b      	beq.n	80072cc <pvPortMalloc+0x110>
 80072b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072b8:	f383 8811 	msr	BASEPRI, r3
 80072bc:	f3bf 8f6f 	isb	sy
 80072c0:	f3bf 8f4f 	dsb	sy
 80072c4:	e7fe      	b.n	80072c4 <pvPortMalloc+0x108>
	( void ) xTaskResumeAll();
 80072c6:	f7ff fd11 	bl	8006cec <xTaskResumeAll>
 80072ca:	2700      	movs	r7, #0
}
 80072cc:	4638      	mov	r0, r7
 80072ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072d0:	20000e10 	.word	0x20000e10
 80072d4:	20002794 	.word	0x20002794
 80072d8:	20002798 	.word	0x20002798
 80072dc:	200027a0 	.word	0x200027a0
 80072e0:	20000e14 	.word	0x20000e14
 80072e4:	2000279c 	.word	0x2000279c

080072e8 <vPortFree>:
	if( pv != NULL )
 80072e8:	b378      	cbz	r0, 800734a <vPortFree+0x62>
{
 80072ea:	b510      	push	{r4, lr}
 80072ec:	4604      	mov	r4, r0
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80072ee:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80072f2:	4a16      	ldr	r2, [pc, #88]	; (800734c <vPortFree+0x64>)
 80072f4:	6812      	ldr	r2, [r2, #0]
 80072f6:	4213      	tst	r3, r2
 80072f8:	d108      	bne.n	800730c <vPortFree+0x24>
 80072fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072fe:	f383 8811 	msr	BASEPRI, r3
 8007302:	f3bf 8f6f 	isb	sy
 8007306:	f3bf 8f4f 	dsb	sy
 800730a:	e7fe      	b.n	800730a <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800730c:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8007310:	b141      	cbz	r1, 8007324 <vPortFree+0x3c>
 8007312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007316:	f383 8811 	msr	BASEPRI, r3
 800731a:	f3bf 8f6f 	isb	sy
 800731e:	f3bf 8f4f 	dsb	sy
 8007322:	e7fe      	b.n	8007322 <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007324:	ea23 0302 	bic.w	r3, r3, r2
 8007328:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800732c:	f7ff fc3a 	bl	8006ba4 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007330:	4a07      	ldr	r2, [pc, #28]	; (8007350 <vPortFree+0x68>)
 8007332:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8007336:	6811      	ldr	r1, [r2, #0]
 8007338:	440b      	add	r3, r1
 800733a:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800733c:	f1a4 0008 	sub.w	r0, r4, #8
 8007340:	f7ff ff0c 	bl	800715c <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 8007344:	f7ff fcd2 	bl	8006cec <xTaskResumeAll>
}
 8007348:	bd10      	pop	{r4, pc}
 800734a:	4770      	bx	lr
 800734c:	20002794 	.word	0x20002794
 8007350:	20002798 	.word	0x20002798

08007354 <atof>:
 8007354:	2100      	movs	r1, #0
 8007356:	f001 bd19 	b.w	8008d8c <strtod>

0800735a <atoi>:
 800735a:	220a      	movs	r2, #10
 800735c:	2100      	movs	r1, #0
 800735e:	f001 bd9f 	b.w	8008ea0 <strtol>
	...

08007364 <__errno>:
 8007364:	4b01      	ldr	r3, [pc, #4]	; (800736c <__errno+0x8>)
 8007366:	6818      	ldr	r0, [r3, #0]
 8007368:	4770      	bx	lr
 800736a:	bf00      	nop
 800736c:	20000018 	.word	0x20000018

08007370 <__libc_init_array>:
 8007370:	b570      	push	{r4, r5, r6, lr}
 8007372:	2600      	movs	r6, #0
 8007374:	4d0c      	ldr	r5, [pc, #48]	; (80073a8 <__libc_init_array+0x38>)
 8007376:	4c0d      	ldr	r4, [pc, #52]	; (80073ac <__libc_init_array+0x3c>)
 8007378:	1b64      	subs	r4, r4, r5
 800737a:	10a4      	asrs	r4, r4, #2
 800737c:	42a6      	cmp	r6, r4
 800737e:	d109      	bne.n	8007394 <__libc_init_array+0x24>
 8007380:	f004 fc80 	bl	800bc84 <_init>
 8007384:	2600      	movs	r6, #0
 8007386:	4d0a      	ldr	r5, [pc, #40]	; (80073b0 <__libc_init_array+0x40>)
 8007388:	4c0a      	ldr	r4, [pc, #40]	; (80073b4 <__libc_init_array+0x44>)
 800738a:	1b64      	subs	r4, r4, r5
 800738c:	10a4      	asrs	r4, r4, #2
 800738e:	42a6      	cmp	r6, r4
 8007390:	d105      	bne.n	800739e <__libc_init_array+0x2e>
 8007392:	bd70      	pop	{r4, r5, r6, pc}
 8007394:	f855 3b04 	ldr.w	r3, [r5], #4
 8007398:	4798      	blx	r3
 800739a:	3601      	adds	r6, #1
 800739c:	e7ee      	b.n	800737c <__libc_init_array+0xc>
 800739e:	f855 3b04 	ldr.w	r3, [r5], #4
 80073a2:	4798      	blx	r3
 80073a4:	3601      	adds	r6, #1
 80073a6:	e7f2      	b.n	800738e <__libc_init_array+0x1e>
 80073a8:	0800cafc 	.word	0x0800cafc
 80073ac:	0800cafc 	.word	0x0800cafc
 80073b0:	0800cafc 	.word	0x0800cafc
 80073b4:	0800cb00 	.word	0x0800cb00

080073b8 <memcpy>:
 80073b8:	440a      	add	r2, r1
 80073ba:	4291      	cmp	r1, r2
 80073bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80073c0:	d100      	bne.n	80073c4 <memcpy+0xc>
 80073c2:	4770      	bx	lr
 80073c4:	b510      	push	{r4, lr}
 80073c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80073ca:	4291      	cmp	r1, r2
 80073cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80073d0:	d1f9      	bne.n	80073c6 <memcpy+0xe>
 80073d2:	bd10      	pop	{r4, pc}

080073d4 <memmove>:
 80073d4:	4288      	cmp	r0, r1
 80073d6:	b510      	push	{r4, lr}
 80073d8:	eb01 0402 	add.w	r4, r1, r2
 80073dc:	d902      	bls.n	80073e4 <memmove+0x10>
 80073de:	4284      	cmp	r4, r0
 80073e0:	4623      	mov	r3, r4
 80073e2:	d807      	bhi.n	80073f4 <memmove+0x20>
 80073e4:	1e43      	subs	r3, r0, #1
 80073e6:	42a1      	cmp	r1, r4
 80073e8:	d008      	beq.n	80073fc <memmove+0x28>
 80073ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80073ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80073f2:	e7f8      	b.n	80073e6 <memmove+0x12>
 80073f4:	4601      	mov	r1, r0
 80073f6:	4402      	add	r2, r0
 80073f8:	428a      	cmp	r2, r1
 80073fa:	d100      	bne.n	80073fe <memmove+0x2a>
 80073fc:	bd10      	pop	{r4, pc}
 80073fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007402:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007406:	e7f7      	b.n	80073f8 <memmove+0x24>

08007408 <memset>:
 8007408:	4603      	mov	r3, r0
 800740a:	4402      	add	r2, r0
 800740c:	4293      	cmp	r3, r2
 800740e:	d100      	bne.n	8007412 <memset+0xa>
 8007410:	4770      	bx	lr
 8007412:	f803 1b01 	strb.w	r1, [r3], #1
 8007416:	e7f9      	b.n	800740c <memset+0x4>

08007418 <__cvt>:
 8007418:	2b00      	cmp	r3, #0
 800741a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800741e:	461f      	mov	r7, r3
 8007420:	bfbb      	ittet	lt
 8007422:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8007426:	461f      	movlt	r7, r3
 8007428:	2300      	movge	r3, #0
 800742a:	232d      	movlt	r3, #45	; 0x2d
 800742c:	b088      	sub	sp, #32
 800742e:	4614      	mov	r4, r2
 8007430:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007432:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8007434:	7013      	strb	r3, [r2, #0]
 8007436:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007438:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800743c:	f023 0820 	bic.w	r8, r3, #32
 8007440:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007444:	d005      	beq.n	8007452 <__cvt+0x3a>
 8007446:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800744a:	d100      	bne.n	800744e <__cvt+0x36>
 800744c:	3501      	adds	r5, #1
 800744e:	2302      	movs	r3, #2
 8007450:	e000      	b.n	8007454 <__cvt+0x3c>
 8007452:	2303      	movs	r3, #3
 8007454:	aa07      	add	r2, sp, #28
 8007456:	9204      	str	r2, [sp, #16]
 8007458:	aa06      	add	r2, sp, #24
 800745a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800745e:	e9cd 3500 	strd	r3, r5, [sp]
 8007462:	4622      	mov	r2, r4
 8007464:	463b      	mov	r3, r7
 8007466:	f001 fdb3 	bl	8008fd0 <_dtoa_r>
 800746a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800746e:	4606      	mov	r6, r0
 8007470:	d102      	bne.n	8007478 <__cvt+0x60>
 8007472:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007474:	07db      	lsls	r3, r3, #31
 8007476:	d522      	bpl.n	80074be <__cvt+0xa6>
 8007478:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800747c:	eb06 0905 	add.w	r9, r6, r5
 8007480:	d110      	bne.n	80074a4 <__cvt+0x8c>
 8007482:	7833      	ldrb	r3, [r6, #0]
 8007484:	2b30      	cmp	r3, #48	; 0x30
 8007486:	d10a      	bne.n	800749e <__cvt+0x86>
 8007488:	2200      	movs	r2, #0
 800748a:	2300      	movs	r3, #0
 800748c:	4620      	mov	r0, r4
 800748e:	4639      	mov	r1, r7
 8007490:	f7f9 fa94 	bl	80009bc <__aeabi_dcmpeq>
 8007494:	b918      	cbnz	r0, 800749e <__cvt+0x86>
 8007496:	f1c5 0501 	rsb	r5, r5, #1
 800749a:	f8ca 5000 	str.w	r5, [sl]
 800749e:	f8da 3000 	ldr.w	r3, [sl]
 80074a2:	4499      	add	r9, r3
 80074a4:	2200      	movs	r2, #0
 80074a6:	2300      	movs	r3, #0
 80074a8:	4620      	mov	r0, r4
 80074aa:	4639      	mov	r1, r7
 80074ac:	f7f9 fa86 	bl	80009bc <__aeabi_dcmpeq>
 80074b0:	b108      	cbz	r0, 80074b6 <__cvt+0x9e>
 80074b2:	f8cd 901c 	str.w	r9, [sp, #28]
 80074b6:	2230      	movs	r2, #48	; 0x30
 80074b8:	9b07      	ldr	r3, [sp, #28]
 80074ba:	454b      	cmp	r3, r9
 80074bc:	d307      	bcc.n	80074ce <__cvt+0xb6>
 80074be:	4630      	mov	r0, r6
 80074c0:	9b07      	ldr	r3, [sp, #28]
 80074c2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80074c4:	1b9b      	subs	r3, r3, r6
 80074c6:	6013      	str	r3, [r2, #0]
 80074c8:	b008      	add	sp, #32
 80074ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074ce:	1c59      	adds	r1, r3, #1
 80074d0:	9107      	str	r1, [sp, #28]
 80074d2:	701a      	strb	r2, [r3, #0]
 80074d4:	e7f0      	b.n	80074b8 <__cvt+0xa0>

080074d6 <__exponent>:
 80074d6:	4603      	mov	r3, r0
 80074d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80074da:	2900      	cmp	r1, #0
 80074dc:	f803 2b02 	strb.w	r2, [r3], #2
 80074e0:	bfb6      	itet	lt
 80074e2:	222d      	movlt	r2, #45	; 0x2d
 80074e4:	222b      	movge	r2, #43	; 0x2b
 80074e6:	4249      	neglt	r1, r1
 80074e8:	2909      	cmp	r1, #9
 80074ea:	7042      	strb	r2, [r0, #1]
 80074ec:	dd2b      	ble.n	8007546 <__exponent+0x70>
 80074ee:	f10d 0407 	add.w	r4, sp, #7
 80074f2:	46a4      	mov	ip, r4
 80074f4:	270a      	movs	r7, #10
 80074f6:	fb91 f6f7 	sdiv	r6, r1, r7
 80074fa:	460a      	mov	r2, r1
 80074fc:	46a6      	mov	lr, r4
 80074fe:	fb07 1516 	mls	r5, r7, r6, r1
 8007502:	2a63      	cmp	r2, #99	; 0x63
 8007504:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8007508:	4631      	mov	r1, r6
 800750a:	f104 34ff 	add.w	r4, r4, #4294967295
 800750e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007512:	dcf0      	bgt.n	80074f6 <__exponent+0x20>
 8007514:	3130      	adds	r1, #48	; 0x30
 8007516:	f1ae 0502 	sub.w	r5, lr, #2
 800751a:	f804 1c01 	strb.w	r1, [r4, #-1]
 800751e:	4629      	mov	r1, r5
 8007520:	1c44      	adds	r4, r0, #1
 8007522:	4561      	cmp	r1, ip
 8007524:	d30a      	bcc.n	800753c <__exponent+0x66>
 8007526:	f10d 0209 	add.w	r2, sp, #9
 800752a:	eba2 020e 	sub.w	r2, r2, lr
 800752e:	4565      	cmp	r5, ip
 8007530:	bf88      	it	hi
 8007532:	2200      	movhi	r2, #0
 8007534:	4413      	add	r3, r2
 8007536:	1a18      	subs	r0, r3, r0
 8007538:	b003      	add	sp, #12
 800753a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800753c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007540:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007544:	e7ed      	b.n	8007522 <__exponent+0x4c>
 8007546:	2330      	movs	r3, #48	; 0x30
 8007548:	3130      	adds	r1, #48	; 0x30
 800754a:	7083      	strb	r3, [r0, #2]
 800754c:	70c1      	strb	r1, [r0, #3]
 800754e:	1d03      	adds	r3, r0, #4
 8007550:	e7f1      	b.n	8007536 <__exponent+0x60>
	...

08007554 <_printf_float>:
 8007554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007558:	b091      	sub	sp, #68	; 0x44
 800755a:	460c      	mov	r4, r1
 800755c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8007560:	4616      	mov	r6, r2
 8007562:	461f      	mov	r7, r3
 8007564:	4605      	mov	r5, r0
 8007566:	f002 fe87 	bl	800a278 <_localeconv_r>
 800756a:	6803      	ldr	r3, [r0, #0]
 800756c:	4618      	mov	r0, r3
 800756e:	9309      	str	r3, [sp, #36]	; 0x24
 8007570:	f7f8 fdf8 	bl	8000164 <strlen>
 8007574:	2300      	movs	r3, #0
 8007576:	930e      	str	r3, [sp, #56]	; 0x38
 8007578:	f8d8 3000 	ldr.w	r3, [r8]
 800757c:	900a      	str	r0, [sp, #40]	; 0x28
 800757e:	3307      	adds	r3, #7
 8007580:	f023 0307 	bic.w	r3, r3, #7
 8007584:	f103 0208 	add.w	r2, r3, #8
 8007588:	f894 9018 	ldrb.w	r9, [r4, #24]
 800758c:	f8d4 b000 	ldr.w	fp, [r4]
 8007590:	f8c8 2000 	str.w	r2, [r8]
 8007594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007598:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800759c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80075a0:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80075a4:	930b      	str	r3, [sp, #44]	; 0x2c
 80075a6:	f04f 32ff 	mov.w	r2, #4294967295
 80075aa:	4640      	mov	r0, r8
 80075ac:	4b9c      	ldr	r3, [pc, #624]	; (8007820 <_printf_float+0x2cc>)
 80075ae:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80075b0:	f7f9 fa36 	bl	8000a20 <__aeabi_dcmpun>
 80075b4:	bb70      	cbnz	r0, 8007614 <_printf_float+0xc0>
 80075b6:	f04f 32ff 	mov.w	r2, #4294967295
 80075ba:	4640      	mov	r0, r8
 80075bc:	4b98      	ldr	r3, [pc, #608]	; (8007820 <_printf_float+0x2cc>)
 80075be:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80075c0:	f7f9 fa10 	bl	80009e4 <__aeabi_dcmple>
 80075c4:	bb30      	cbnz	r0, 8007614 <_printf_float+0xc0>
 80075c6:	2200      	movs	r2, #0
 80075c8:	2300      	movs	r3, #0
 80075ca:	4640      	mov	r0, r8
 80075cc:	4651      	mov	r1, sl
 80075ce:	f7f9 f9ff 	bl	80009d0 <__aeabi_dcmplt>
 80075d2:	b110      	cbz	r0, 80075da <_printf_float+0x86>
 80075d4:	232d      	movs	r3, #45	; 0x2d
 80075d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075da:	4b92      	ldr	r3, [pc, #584]	; (8007824 <_printf_float+0x2d0>)
 80075dc:	4892      	ldr	r0, [pc, #584]	; (8007828 <_printf_float+0x2d4>)
 80075de:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80075e2:	bf94      	ite	ls
 80075e4:	4698      	movls	r8, r3
 80075e6:	4680      	movhi	r8, r0
 80075e8:	2303      	movs	r3, #3
 80075ea:	f04f 0a00 	mov.w	sl, #0
 80075ee:	6123      	str	r3, [r4, #16]
 80075f0:	f02b 0304 	bic.w	r3, fp, #4
 80075f4:	6023      	str	r3, [r4, #0]
 80075f6:	4633      	mov	r3, r6
 80075f8:	4621      	mov	r1, r4
 80075fa:	4628      	mov	r0, r5
 80075fc:	9700      	str	r7, [sp, #0]
 80075fe:	aa0f      	add	r2, sp, #60	; 0x3c
 8007600:	f000 f9d4 	bl	80079ac <_printf_common>
 8007604:	3001      	adds	r0, #1
 8007606:	f040 8090 	bne.w	800772a <_printf_float+0x1d6>
 800760a:	f04f 30ff 	mov.w	r0, #4294967295
 800760e:	b011      	add	sp, #68	; 0x44
 8007610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007614:	4642      	mov	r2, r8
 8007616:	4653      	mov	r3, sl
 8007618:	4640      	mov	r0, r8
 800761a:	4651      	mov	r1, sl
 800761c:	f7f9 fa00 	bl	8000a20 <__aeabi_dcmpun>
 8007620:	b148      	cbz	r0, 8007636 <_printf_float+0xe2>
 8007622:	f1ba 0f00 	cmp.w	sl, #0
 8007626:	bfb8      	it	lt
 8007628:	232d      	movlt	r3, #45	; 0x2d
 800762a:	4880      	ldr	r0, [pc, #512]	; (800782c <_printf_float+0x2d8>)
 800762c:	bfb8      	it	lt
 800762e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007632:	4b7f      	ldr	r3, [pc, #508]	; (8007830 <_printf_float+0x2dc>)
 8007634:	e7d3      	b.n	80075de <_printf_float+0x8a>
 8007636:	6863      	ldr	r3, [r4, #4]
 8007638:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800763c:	1c5a      	adds	r2, r3, #1
 800763e:	d142      	bne.n	80076c6 <_printf_float+0x172>
 8007640:	2306      	movs	r3, #6
 8007642:	6063      	str	r3, [r4, #4]
 8007644:	2200      	movs	r2, #0
 8007646:	9206      	str	r2, [sp, #24]
 8007648:	aa0e      	add	r2, sp, #56	; 0x38
 800764a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800764e:	aa0d      	add	r2, sp, #52	; 0x34
 8007650:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8007654:	9203      	str	r2, [sp, #12]
 8007656:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800765a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800765e:	6023      	str	r3, [r4, #0]
 8007660:	6863      	ldr	r3, [r4, #4]
 8007662:	4642      	mov	r2, r8
 8007664:	9300      	str	r3, [sp, #0]
 8007666:	4628      	mov	r0, r5
 8007668:	4653      	mov	r3, sl
 800766a:	910b      	str	r1, [sp, #44]	; 0x2c
 800766c:	f7ff fed4 	bl	8007418 <__cvt>
 8007670:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007672:	4680      	mov	r8, r0
 8007674:	2947      	cmp	r1, #71	; 0x47
 8007676:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007678:	d108      	bne.n	800768c <_printf_float+0x138>
 800767a:	1cc8      	adds	r0, r1, #3
 800767c:	db02      	blt.n	8007684 <_printf_float+0x130>
 800767e:	6863      	ldr	r3, [r4, #4]
 8007680:	4299      	cmp	r1, r3
 8007682:	dd40      	ble.n	8007706 <_printf_float+0x1b2>
 8007684:	f1a9 0902 	sub.w	r9, r9, #2
 8007688:	fa5f f989 	uxtb.w	r9, r9
 800768c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007690:	d81f      	bhi.n	80076d2 <_printf_float+0x17e>
 8007692:	464a      	mov	r2, r9
 8007694:	3901      	subs	r1, #1
 8007696:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800769a:	910d      	str	r1, [sp, #52]	; 0x34
 800769c:	f7ff ff1b 	bl	80074d6 <__exponent>
 80076a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80076a2:	4682      	mov	sl, r0
 80076a4:	1813      	adds	r3, r2, r0
 80076a6:	2a01      	cmp	r2, #1
 80076a8:	6123      	str	r3, [r4, #16]
 80076aa:	dc02      	bgt.n	80076b2 <_printf_float+0x15e>
 80076ac:	6822      	ldr	r2, [r4, #0]
 80076ae:	07d2      	lsls	r2, r2, #31
 80076b0:	d501      	bpl.n	80076b6 <_printf_float+0x162>
 80076b2:	3301      	adds	r3, #1
 80076b4:	6123      	str	r3, [r4, #16]
 80076b6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d09b      	beq.n	80075f6 <_printf_float+0xa2>
 80076be:	232d      	movs	r3, #45	; 0x2d
 80076c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076c4:	e797      	b.n	80075f6 <_printf_float+0xa2>
 80076c6:	2947      	cmp	r1, #71	; 0x47
 80076c8:	d1bc      	bne.n	8007644 <_printf_float+0xf0>
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d1ba      	bne.n	8007644 <_printf_float+0xf0>
 80076ce:	2301      	movs	r3, #1
 80076d0:	e7b7      	b.n	8007642 <_printf_float+0xee>
 80076d2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80076d6:	d118      	bne.n	800770a <_printf_float+0x1b6>
 80076d8:	2900      	cmp	r1, #0
 80076da:	6863      	ldr	r3, [r4, #4]
 80076dc:	dd0b      	ble.n	80076f6 <_printf_float+0x1a2>
 80076de:	6121      	str	r1, [r4, #16]
 80076e0:	b913      	cbnz	r3, 80076e8 <_printf_float+0x194>
 80076e2:	6822      	ldr	r2, [r4, #0]
 80076e4:	07d0      	lsls	r0, r2, #31
 80076e6:	d502      	bpl.n	80076ee <_printf_float+0x19a>
 80076e8:	3301      	adds	r3, #1
 80076ea:	440b      	add	r3, r1
 80076ec:	6123      	str	r3, [r4, #16]
 80076ee:	f04f 0a00 	mov.w	sl, #0
 80076f2:	65a1      	str	r1, [r4, #88]	; 0x58
 80076f4:	e7df      	b.n	80076b6 <_printf_float+0x162>
 80076f6:	b913      	cbnz	r3, 80076fe <_printf_float+0x1aa>
 80076f8:	6822      	ldr	r2, [r4, #0]
 80076fa:	07d2      	lsls	r2, r2, #31
 80076fc:	d501      	bpl.n	8007702 <_printf_float+0x1ae>
 80076fe:	3302      	adds	r3, #2
 8007700:	e7f4      	b.n	80076ec <_printf_float+0x198>
 8007702:	2301      	movs	r3, #1
 8007704:	e7f2      	b.n	80076ec <_printf_float+0x198>
 8007706:	f04f 0967 	mov.w	r9, #103	; 0x67
 800770a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800770c:	4299      	cmp	r1, r3
 800770e:	db05      	blt.n	800771c <_printf_float+0x1c8>
 8007710:	6823      	ldr	r3, [r4, #0]
 8007712:	6121      	str	r1, [r4, #16]
 8007714:	07d8      	lsls	r0, r3, #31
 8007716:	d5ea      	bpl.n	80076ee <_printf_float+0x19a>
 8007718:	1c4b      	adds	r3, r1, #1
 800771a:	e7e7      	b.n	80076ec <_printf_float+0x198>
 800771c:	2900      	cmp	r1, #0
 800771e:	bfcc      	ite	gt
 8007720:	2201      	movgt	r2, #1
 8007722:	f1c1 0202 	rsble	r2, r1, #2
 8007726:	4413      	add	r3, r2
 8007728:	e7e0      	b.n	80076ec <_printf_float+0x198>
 800772a:	6823      	ldr	r3, [r4, #0]
 800772c:	055a      	lsls	r2, r3, #21
 800772e:	d407      	bmi.n	8007740 <_printf_float+0x1ec>
 8007730:	6923      	ldr	r3, [r4, #16]
 8007732:	4642      	mov	r2, r8
 8007734:	4631      	mov	r1, r6
 8007736:	4628      	mov	r0, r5
 8007738:	47b8      	blx	r7
 800773a:	3001      	adds	r0, #1
 800773c:	d12b      	bne.n	8007796 <_printf_float+0x242>
 800773e:	e764      	b.n	800760a <_printf_float+0xb6>
 8007740:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007744:	f240 80dd 	bls.w	8007902 <_printf_float+0x3ae>
 8007748:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800774c:	2200      	movs	r2, #0
 800774e:	2300      	movs	r3, #0
 8007750:	f7f9 f934 	bl	80009bc <__aeabi_dcmpeq>
 8007754:	2800      	cmp	r0, #0
 8007756:	d033      	beq.n	80077c0 <_printf_float+0x26c>
 8007758:	2301      	movs	r3, #1
 800775a:	4631      	mov	r1, r6
 800775c:	4628      	mov	r0, r5
 800775e:	4a35      	ldr	r2, [pc, #212]	; (8007834 <_printf_float+0x2e0>)
 8007760:	47b8      	blx	r7
 8007762:	3001      	adds	r0, #1
 8007764:	f43f af51 	beq.w	800760a <_printf_float+0xb6>
 8007768:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800776c:	429a      	cmp	r2, r3
 800776e:	db02      	blt.n	8007776 <_printf_float+0x222>
 8007770:	6823      	ldr	r3, [r4, #0]
 8007772:	07d8      	lsls	r0, r3, #31
 8007774:	d50f      	bpl.n	8007796 <_printf_float+0x242>
 8007776:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800777a:	4631      	mov	r1, r6
 800777c:	4628      	mov	r0, r5
 800777e:	47b8      	blx	r7
 8007780:	3001      	adds	r0, #1
 8007782:	f43f af42 	beq.w	800760a <_printf_float+0xb6>
 8007786:	f04f 0800 	mov.w	r8, #0
 800778a:	f104 091a 	add.w	r9, r4, #26
 800778e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007790:	3b01      	subs	r3, #1
 8007792:	4543      	cmp	r3, r8
 8007794:	dc09      	bgt.n	80077aa <_printf_float+0x256>
 8007796:	6823      	ldr	r3, [r4, #0]
 8007798:	079b      	lsls	r3, r3, #30
 800779a:	f100 8102 	bmi.w	80079a2 <_printf_float+0x44e>
 800779e:	68e0      	ldr	r0, [r4, #12]
 80077a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80077a2:	4298      	cmp	r0, r3
 80077a4:	bfb8      	it	lt
 80077a6:	4618      	movlt	r0, r3
 80077a8:	e731      	b.n	800760e <_printf_float+0xba>
 80077aa:	2301      	movs	r3, #1
 80077ac:	464a      	mov	r2, r9
 80077ae:	4631      	mov	r1, r6
 80077b0:	4628      	mov	r0, r5
 80077b2:	47b8      	blx	r7
 80077b4:	3001      	adds	r0, #1
 80077b6:	f43f af28 	beq.w	800760a <_printf_float+0xb6>
 80077ba:	f108 0801 	add.w	r8, r8, #1
 80077be:	e7e6      	b.n	800778e <_printf_float+0x23a>
 80077c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	dc38      	bgt.n	8007838 <_printf_float+0x2e4>
 80077c6:	2301      	movs	r3, #1
 80077c8:	4631      	mov	r1, r6
 80077ca:	4628      	mov	r0, r5
 80077cc:	4a19      	ldr	r2, [pc, #100]	; (8007834 <_printf_float+0x2e0>)
 80077ce:	47b8      	blx	r7
 80077d0:	3001      	adds	r0, #1
 80077d2:	f43f af1a 	beq.w	800760a <_printf_float+0xb6>
 80077d6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80077da:	4313      	orrs	r3, r2
 80077dc:	d102      	bne.n	80077e4 <_printf_float+0x290>
 80077de:	6823      	ldr	r3, [r4, #0]
 80077e0:	07d9      	lsls	r1, r3, #31
 80077e2:	d5d8      	bpl.n	8007796 <_printf_float+0x242>
 80077e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80077e8:	4631      	mov	r1, r6
 80077ea:	4628      	mov	r0, r5
 80077ec:	47b8      	blx	r7
 80077ee:	3001      	adds	r0, #1
 80077f0:	f43f af0b 	beq.w	800760a <_printf_float+0xb6>
 80077f4:	f04f 0900 	mov.w	r9, #0
 80077f8:	f104 0a1a 	add.w	sl, r4, #26
 80077fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80077fe:	425b      	negs	r3, r3
 8007800:	454b      	cmp	r3, r9
 8007802:	dc01      	bgt.n	8007808 <_printf_float+0x2b4>
 8007804:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007806:	e794      	b.n	8007732 <_printf_float+0x1de>
 8007808:	2301      	movs	r3, #1
 800780a:	4652      	mov	r2, sl
 800780c:	4631      	mov	r1, r6
 800780e:	4628      	mov	r0, r5
 8007810:	47b8      	blx	r7
 8007812:	3001      	adds	r0, #1
 8007814:	f43f aef9 	beq.w	800760a <_printf_float+0xb6>
 8007818:	f109 0901 	add.w	r9, r9, #1
 800781c:	e7ee      	b.n	80077fc <_printf_float+0x2a8>
 800781e:	bf00      	nop
 8007820:	7fefffff 	.word	0x7fefffff
 8007824:	0800c65c 	.word	0x0800c65c
 8007828:	0800c660 	.word	0x0800c660
 800782c:	0800c668 	.word	0x0800c668
 8007830:	0800c664 	.word	0x0800c664
 8007834:	0800c66c 	.word	0x0800c66c
 8007838:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800783a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800783c:	429a      	cmp	r2, r3
 800783e:	bfa8      	it	ge
 8007840:	461a      	movge	r2, r3
 8007842:	2a00      	cmp	r2, #0
 8007844:	4691      	mov	r9, r2
 8007846:	dc37      	bgt.n	80078b8 <_printf_float+0x364>
 8007848:	f04f 0b00 	mov.w	fp, #0
 800784c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007850:	f104 021a 	add.w	r2, r4, #26
 8007854:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8007858:	ebaa 0309 	sub.w	r3, sl, r9
 800785c:	455b      	cmp	r3, fp
 800785e:	dc33      	bgt.n	80078c8 <_printf_float+0x374>
 8007860:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007864:	429a      	cmp	r2, r3
 8007866:	db3b      	blt.n	80078e0 <_printf_float+0x38c>
 8007868:	6823      	ldr	r3, [r4, #0]
 800786a:	07da      	lsls	r2, r3, #31
 800786c:	d438      	bmi.n	80078e0 <_printf_float+0x38c>
 800786e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007870:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007872:	eba3 020a 	sub.w	r2, r3, sl
 8007876:	eba3 0901 	sub.w	r9, r3, r1
 800787a:	4591      	cmp	r9, r2
 800787c:	bfa8      	it	ge
 800787e:	4691      	movge	r9, r2
 8007880:	f1b9 0f00 	cmp.w	r9, #0
 8007884:	dc34      	bgt.n	80078f0 <_printf_float+0x39c>
 8007886:	f04f 0800 	mov.w	r8, #0
 800788a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800788e:	f104 0a1a 	add.w	sl, r4, #26
 8007892:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007896:	1a9b      	subs	r3, r3, r2
 8007898:	eba3 0309 	sub.w	r3, r3, r9
 800789c:	4543      	cmp	r3, r8
 800789e:	f77f af7a 	ble.w	8007796 <_printf_float+0x242>
 80078a2:	2301      	movs	r3, #1
 80078a4:	4652      	mov	r2, sl
 80078a6:	4631      	mov	r1, r6
 80078a8:	4628      	mov	r0, r5
 80078aa:	47b8      	blx	r7
 80078ac:	3001      	adds	r0, #1
 80078ae:	f43f aeac 	beq.w	800760a <_printf_float+0xb6>
 80078b2:	f108 0801 	add.w	r8, r8, #1
 80078b6:	e7ec      	b.n	8007892 <_printf_float+0x33e>
 80078b8:	4613      	mov	r3, r2
 80078ba:	4631      	mov	r1, r6
 80078bc:	4642      	mov	r2, r8
 80078be:	4628      	mov	r0, r5
 80078c0:	47b8      	blx	r7
 80078c2:	3001      	adds	r0, #1
 80078c4:	d1c0      	bne.n	8007848 <_printf_float+0x2f4>
 80078c6:	e6a0      	b.n	800760a <_printf_float+0xb6>
 80078c8:	2301      	movs	r3, #1
 80078ca:	4631      	mov	r1, r6
 80078cc:	4628      	mov	r0, r5
 80078ce:	920b      	str	r2, [sp, #44]	; 0x2c
 80078d0:	47b8      	blx	r7
 80078d2:	3001      	adds	r0, #1
 80078d4:	f43f ae99 	beq.w	800760a <_printf_float+0xb6>
 80078d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80078da:	f10b 0b01 	add.w	fp, fp, #1
 80078de:	e7b9      	b.n	8007854 <_printf_float+0x300>
 80078e0:	4631      	mov	r1, r6
 80078e2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80078e6:	4628      	mov	r0, r5
 80078e8:	47b8      	blx	r7
 80078ea:	3001      	adds	r0, #1
 80078ec:	d1bf      	bne.n	800786e <_printf_float+0x31a>
 80078ee:	e68c      	b.n	800760a <_printf_float+0xb6>
 80078f0:	464b      	mov	r3, r9
 80078f2:	4631      	mov	r1, r6
 80078f4:	4628      	mov	r0, r5
 80078f6:	eb08 020a 	add.w	r2, r8, sl
 80078fa:	47b8      	blx	r7
 80078fc:	3001      	adds	r0, #1
 80078fe:	d1c2      	bne.n	8007886 <_printf_float+0x332>
 8007900:	e683      	b.n	800760a <_printf_float+0xb6>
 8007902:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007904:	2a01      	cmp	r2, #1
 8007906:	dc01      	bgt.n	800790c <_printf_float+0x3b8>
 8007908:	07db      	lsls	r3, r3, #31
 800790a:	d537      	bpl.n	800797c <_printf_float+0x428>
 800790c:	2301      	movs	r3, #1
 800790e:	4642      	mov	r2, r8
 8007910:	4631      	mov	r1, r6
 8007912:	4628      	mov	r0, r5
 8007914:	47b8      	blx	r7
 8007916:	3001      	adds	r0, #1
 8007918:	f43f ae77 	beq.w	800760a <_printf_float+0xb6>
 800791c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007920:	4631      	mov	r1, r6
 8007922:	4628      	mov	r0, r5
 8007924:	47b8      	blx	r7
 8007926:	3001      	adds	r0, #1
 8007928:	f43f ae6f 	beq.w	800760a <_printf_float+0xb6>
 800792c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007930:	2200      	movs	r2, #0
 8007932:	2300      	movs	r3, #0
 8007934:	f7f9 f842 	bl	80009bc <__aeabi_dcmpeq>
 8007938:	b9d8      	cbnz	r0, 8007972 <_printf_float+0x41e>
 800793a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800793c:	f108 0201 	add.w	r2, r8, #1
 8007940:	3b01      	subs	r3, #1
 8007942:	4631      	mov	r1, r6
 8007944:	4628      	mov	r0, r5
 8007946:	47b8      	blx	r7
 8007948:	3001      	adds	r0, #1
 800794a:	d10e      	bne.n	800796a <_printf_float+0x416>
 800794c:	e65d      	b.n	800760a <_printf_float+0xb6>
 800794e:	2301      	movs	r3, #1
 8007950:	464a      	mov	r2, r9
 8007952:	4631      	mov	r1, r6
 8007954:	4628      	mov	r0, r5
 8007956:	47b8      	blx	r7
 8007958:	3001      	adds	r0, #1
 800795a:	f43f ae56 	beq.w	800760a <_printf_float+0xb6>
 800795e:	f108 0801 	add.w	r8, r8, #1
 8007962:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007964:	3b01      	subs	r3, #1
 8007966:	4543      	cmp	r3, r8
 8007968:	dcf1      	bgt.n	800794e <_printf_float+0x3fa>
 800796a:	4653      	mov	r3, sl
 800796c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007970:	e6e0      	b.n	8007734 <_printf_float+0x1e0>
 8007972:	f04f 0800 	mov.w	r8, #0
 8007976:	f104 091a 	add.w	r9, r4, #26
 800797a:	e7f2      	b.n	8007962 <_printf_float+0x40e>
 800797c:	2301      	movs	r3, #1
 800797e:	4642      	mov	r2, r8
 8007980:	e7df      	b.n	8007942 <_printf_float+0x3ee>
 8007982:	2301      	movs	r3, #1
 8007984:	464a      	mov	r2, r9
 8007986:	4631      	mov	r1, r6
 8007988:	4628      	mov	r0, r5
 800798a:	47b8      	blx	r7
 800798c:	3001      	adds	r0, #1
 800798e:	f43f ae3c 	beq.w	800760a <_printf_float+0xb6>
 8007992:	f108 0801 	add.w	r8, r8, #1
 8007996:	68e3      	ldr	r3, [r4, #12]
 8007998:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800799a:	1a5b      	subs	r3, r3, r1
 800799c:	4543      	cmp	r3, r8
 800799e:	dcf0      	bgt.n	8007982 <_printf_float+0x42e>
 80079a0:	e6fd      	b.n	800779e <_printf_float+0x24a>
 80079a2:	f04f 0800 	mov.w	r8, #0
 80079a6:	f104 0919 	add.w	r9, r4, #25
 80079aa:	e7f4      	b.n	8007996 <_printf_float+0x442>

080079ac <_printf_common>:
 80079ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079b0:	4616      	mov	r6, r2
 80079b2:	4699      	mov	r9, r3
 80079b4:	688a      	ldr	r2, [r1, #8]
 80079b6:	690b      	ldr	r3, [r1, #16]
 80079b8:	4607      	mov	r7, r0
 80079ba:	4293      	cmp	r3, r2
 80079bc:	bfb8      	it	lt
 80079be:	4613      	movlt	r3, r2
 80079c0:	6033      	str	r3, [r6, #0]
 80079c2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80079c6:	460c      	mov	r4, r1
 80079c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80079cc:	b10a      	cbz	r2, 80079d2 <_printf_common+0x26>
 80079ce:	3301      	adds	r3, #1
 80079d0:	6033      	str	r3, [r6, #0]
 80079d2:	6823      	ldr	r3, [r4, #0]
 80079d4:	0699      	lsls	r1, r3, #26
 80079d6:	bf42      	ittt	mi
 80079d8:	6833      	ldrmi	r3, [r6, #0]
 80079da:	3302      	addmi	r3, #2
 80079dc:	6033      	strmi	r3, [r6, #0]
 80079de:	6825      	ldr	r5, [r4, #0]
 80079e0:	f015 0506 	ands.w	r5, r5, #6
 80079e4:	d106      	bne.n	80079f4 <_printf_common+0x48>
 80079e6:	f104 0a19 	add.w	sl, r4, #25
 80079ea:	68e3      	ldr	r3, [r4, #12]
 80079ec:	6832      	ldr	r2, [r6, #0]
 80079ee:	1a9b      	subs	r3, r3, r2
 80079f0:	42ab      	cmp	r3, r5
 80079f2:	dc28      	bgt.n	8007a46 <_printf_common+0x9a>
 80079f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80079f8:	1e13      	subs	r3, r2, #0
 80079fa:	6822      	ldr	r2, [r4, #0]
 80079fc:	bf18      	it	ne
 80079fe:	2301      	movne	r3, #1
 8007a00:	0692      	lsls	r2, r2, #26
 8007a02:	d42d      	bmi.n	8007a60 <_printf_common+0xb4>
 8007a04:	4649      	mov	r1, r9
 8007a06:	4638      	mov	r0, r7
 8007a08:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007a0c:	47c0      	blx	r8
 8007a0e:	3001      	adds	r0, #1
 8007a10:	d020      	beq.n	8007a54 <_printf_common+0xa8>
 8007a12:	6823      	ldr	r3, [r4, #0]
 8007a14:	68e5      	ldr	r5, [r4, #12]
 8007a16:	f003 0306 	and.w	r3, r3, #6
 8007a1a:	2b04      	cmp	r3, #4
 8007a1c:	bf18      	it	ne
 8007a1e:	2500      	movne	r5, #0
 8007a20:	6832      	ldr	r2, [r6, #0]
 8007a22:	f04f 0600 	mov.w	r6, #0
 8007a26:	68a3      	ldr	r3, [r4, #8]
 8007a28:	bf08      	it	eq
 8007a2a:	1aad      	subeq	r5, r5, r2
 8007a2c:	6922      	ldr	r2, [r4, #16]
 8007a2e:	bf08      	it	eq
 8007a30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007a34:	4293      	cmp	r3, r2
 8007a36:	bfc4      	itt	gt
 8007a38:	1a9b      	subgt	r3, r3, r2
 8007a3a:	18ed      	addgt	r5, r5, r3
 8007a3c:	341a      	adds	r4, #26
 8007a3e:	42b5      	cmp	r5, r6
 8007a40:	d11a      	bne.n	8007a78 <_printf_common+0xcc>
 8007a42:	2000      	movs	r0, #0
 8007a44:	e008      	b.n	8007a58 <_printf_common+0xac>
 8007a46:	2301      	movs	r3, #1
 8007a48:	4652      	mov	r2, sl
 8007a4a:	4649      	mov	r1, r9
 8007a4c:	4638      	mov	r0, r7
 8007a4e:	47c0      	blx	r8
 8007a50:	3001      	adds	r0, #1
 8007a52:	d103      	bne.n	8007a5c <_printf_common+0xb0>
 8007a54:	f04f 30ff 	mov.w	r0, #4294967295
 8007a58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a5c:	3501      	adds	r5, #1
 8007a5e:	e7c4      	b.n	80079ea <_printf_common+0x3e>
 8007a60:	2030      	movs	r0, #48	; 0x30
 8007a62:	18e1      	adds	r1, r4, r3
 8007a64:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007a68:	1c5a      	adds	r2, r3, #1
 8007a6a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007a6e:	4422      	add	r2, r4
 8007a70:	3302      	adds	r3, #2
 8007a72:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007a76:	e7c5      	b.n	8007a04 <_printf_common+0x58>
 8007a78:	2301      	movs	r3, #1
 8007a7a:	4622      	mov	r2, r4
 8007a7c:	4649      	mov	r1, r9
 8007a7e:	4638      	mov	r0, r7
 8007a80:	47c0      	blx	r8
 8007a82:	3001      	adds	r0, #1
 8007a84:	d0e6      	beq.n	8007a54 <_printf_common+0xa8>
 8007a86:	3601      	adds	r6, #1
 8007a88:	e7d9      	b.n	8007a3e <_printf_common+0x92>
	...

08007a8c <_printf_i>:
 8007a8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007a90:	7e0f      	ldrb	r7, [r1, #24]
 8007a92:	4691      	mov	r9, r2
 8007a94:	2f78      	cmp	r7, #120	; 0x78
 8007a96:	4680      	mov	r8, r0
 8007a98:	460c      	mov	r4, r1
 8007a9a:	469a      	mov	sl, r3
 8007a9c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007a9e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007aa2:	d807      	bhi.n	8007ab4 <_printf_i+0x28>
 8007aa4:	2f62      	cmp	r7, #98	; 0x62
 8007aa6:	d80a      	bhi.n	8007abe <_printf_i+0x32>
 8007aa8:	2f00      	cmp	r7, #0
 8007aaa:	f000 80d9 	beq.w	8007c60 <_printf_i+0x1d4>
 8007aae:	2f58      	cmp	r7, #88	; 0x58
 8007ab0:	f000 80a4 	beq.w	8007bfc <_printf_i+0x170>
 8007ab4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ab8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007abc:	e03a      	b.n	8007b34 <_printf_i+0xa8>
 8007abe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007ac2:	2b15      	cmp	r3, #21
 8007ac4:	d8f6      	bhi.n	8007ab4 <_printf_i+0x28>
 8007ac6:	a101      	add	r1, pc, #4	; (adr r1, 8007acc <_printf_i+0x40>)
 8007ac8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007acc:	08007b25 	.word	0x08007b25
 8007ad0:	08007b39 	.word	0x08007b39
 8007ad4:	08007ab5 	.word	0x08007ab5
 8007ad8:	08007ab5 	.word	0x08007ab5
 8007adc:	08007ab5 	.word	0x08007ab5
 8007ae0:	08007ab5 	.word	0x08007ab5
 8007ae4:	08007b39 	.word	0x08007b39
 8007ae8:	08007ab5 	.word	0x08007ab5
 8007aec:	08007ab5 	.word	0x08007ab5
 8007af0:	08007ab5 	.word	0x08007ab5
 8007af4:	08007ab5 	.word	0x08007ab5
 8007af8:	08007c47 	.word	0x08007c47
 8007afc:	08007b69 	.word	0x08007b69
 8007b00:	08007c29 	.word	0x08007c29
 8007b04:	08007ab5 	.word	0x08007ab5
 8007b08:	08007ab5 	.word	0x08007ab5
 8007b0c:	08007c69 	.word	0x08007c69
 8007b10:	08007ab5 	.word	0x08007ab5
 8007b14:	08007b69 	.word	0x08007b69
 8007b18:	08007ab5 	.word	0x08007ab5
 8007b1c:	08007ab5 	.word	0x08007ab5
 8007b20:	08007c31 	.word	0x08007c31
 8007b24:	682b      	ldr	r3, [r5, #0]
 8007b26:	1d1a      	adds	r2, r3, #4
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	602a      	str	r2, [r5, #0]
 8007b2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007b30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007b34:	2301      	movs	r3, #1
 8007b36:	e0a4      	b.n	8007c82 <_printf_i+0x1f6>
 8007b38:	6820      	ldr	r0, [r4, #0]
 8007b3a:	6829      	ldr	r1, [r5, #0]
 8007b3c:	0606      	lsls	r6, r0, #24
 8007b3e:	f101 0304 	add.w	r3, r1, #4
 8007b42:	d50a      	bpl.n	8007b5a <_printf_i+0xce>
 8007b44:	680e      	ldr	r6, [r1, #0]
 8007b46:	602b      	str	r3, [r5, #0]
 8007b48:	2e00      	cmp	r6, #0
 8007b4a:	da03      	bge.n	8007b54 <_printf_i+0xc8>
 8007b4c:	232d      	movs	r3, #45	; 0x2d
 8007b4e:	4276      	negs	r6, r6
 8007b50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b54:	230a      	movs	r3, #10
 8007b56:	485e      	ldr	r0, [pc, #376]	; (8007cd0 <_printf_i+0x244>)
 8007b58:	e019      	b.n	8007b8e <_printf_i+0x102>
 8007b5a:	680e      	ldr	r6, [r1, #0]
 8007b5c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007b60:	602b      	str	r3, [r5, #0]
 8007b62:	bf18      	it	ne
 8007b64:	b236      	sxthne	r6, r6
 8007b66:	e7ef      	b.n	8007b48 <_printf_i+0xbc>
 8007b68:	682b      	ldr	r3, [r5, #0]
 8007b6a:	6820      	ldr	r0, [r4, #0]
 8007b6c:	1d19      	adds	r1, r3, #4
 8007b6e:	6029      	str	r1, [r5, #0]
 8007b70:	0601      	lsls	r1, r0, #24
 8007b72:	d501      	bpl.n	8007b78 <_printf_i+0xec>
 8007b74:	681e      	ldr	r6, [r3, #0]
 8007b76:	e002      	b.n	8007b7e <_printf_i+0xf2>
 8007b78:	0646      	lsls	r6, r0, #25
 8007b7a:	d5fb      	bpl.n	8007b74 <_printf_i+0xe8>
 8007b7c:	881e      	ldrh	r6, [r3, #0]
 8007b7e:	2f6f      	cmp	r7, #111	; 0x6f
 8007b80:	bf0c      	ite	eq
 8007b82:	2308      	moveq	r3, #8
 8007b84:	230a      	movne	r3, #10
 8007b86:	4852      	ldr	r0, [pc, #328]	; (8007cd0 <_printf_i+0x244>)
 8007b88:	2100      	movs	r1, #0
 8007b8a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007b8e:	6865      	ldr	r5, [r4, #4]
 8007b90:	2d00      	cmp	r5, #0
 8007b92:	bfa8      	it	ge
 8007b94:	6821      	ldrge	r1, [r4, #0]
 8007b96:	60a5      	str	r5, [r4, #8]
 8007b98:	bfa4      	itt	ge
 8007b9a:	f021 0104 	bicge.w	r1, r1, #4
 8007b9e:	6021      	strge	r1, [r4, #0]
 8007ba0:	b90e      	cbnz	r6, 8007ba6 <_printf_i+0x11a>
 8007ba2:	2d00      	cmp	r5, #0
 8007ba4:	d04d      	beq.n	8007c42 <_printf_i+0x1b6>
 8007ba6:	4615      	mov	r5, r2
 8007ba8:	fbb6 f1f3 	udiv	r1, r6, r3
 8007bac:	fb03 6711 	mls	r7, r3, r1, r6
 8007bb0:	5dc7      	ldrb	r7, [r0, r7]
 8007bb2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007bb6:	4637      	mov	r7, r6
 8007bb8:	42bb      	cmp	r3, r7
 8007bba:	460e      	mov	r6, r1
 8007bbc:	d9f4      	bls.n	8007ba8 <_printf_i+0x11c>
 8007bbe:	2b08      	cmp	r3, #8
 8007bc0:	d10b      	bne.n	8007bda <_printf_i+0x14e>
 8007bc2:	6823      	ldr	r3, [r4, #0]
 8007bc4:	07de      	lsls	r6, r3, #31
 8007bc6:	d508      	bpl.n	8007bda <_printf_i+0x14e>
 8007bc8:	6923      	ldr	r3, [r4, #16]
 8007bca:	6861      	ldr	r1, [r4, #4]
 8007bcc:	4299      	cmp	r1, r3
 8007bce:	bfde      	ittt	le
 8007bd0:	2330      	movle	r3, #48	; 0x30
 8007bd2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007bd6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007bda:	1b52      	subs	r2, r2, r5
 8007bdc:	6122      	str	r2, [r4, #16]
 8007bde:	464b      	mov	r3, r9
 8007be0:	4621      	mov	r1, r4
 8007be2:	4640      	mov	r0, r8
 8007be4:	f8cd a000 	str.w	sl, [sp]
 8007be8:	aa03      	add	r2, sp, #12
 8007bea:	f7ff fedf 	bl	80079ac <_printf_common>
 8007bee:	3001      	adds	r0, #1
 8007bf0:	d14c      	bne.n	8007c8c <_printf_i+0x200>
 8007bf2:	f04f 30ff 	mov.w	r0, #4294967295
 8007bf6:	b004      	add	sp, #16
 8007bf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bfc:	4834      	ldr	r0, [pc, #208]	; (8007cd0 <_printf_i+0x244>)
 8007bfe:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007c02:	6829      	ldr	r1, [r5, #0]
 8007c04:	6823      	ldr	r3, [r4, #0]
 8007c06:	f851 6b04 	ldr.w	r6, [r1], #4
 8007c0a:	6029      	str	r1, [r5, #0]
 8007c0c:	061d      	lsls	r5, r3, #24
 8007c0e:	d514      	bpl.n	8007c3a <_printf_i+0x1ae>
 8007c10:	07df      	lsls	r7, r3, #31
 8007c12:	bf44      	itt	mi
 8007c14:	f043 0320 	orrmi.w	r3, r3, #32
 8007c18:	6023      	strmi	r3, [r4, #0]
 8007c1a:	b91e      	cbnz	r6, 8007c24 <_printf_i+0x198>
 8007c1c:	6823      	ldr	r3, [r4, #0]
 8007c1e:	f023 0320 	bic.w	r3, r3, #32
 8007c22:	6023      	str	r3, [r4, #0]
 8007c24:	2310      	movs	r3, #16
 8007c26:	e7af      	b.n	8007b88 <_printf_i+0xfc>
 8007c28:	6823      	ldr	r3, [r4, #0]
 8007c2a:	f043 0320 	orr.w	r3, r3, #32
 8007c2e:	6023      	str	r3, [r4, #0]
 8007c30:	2378      	movs	r3, #120	; 0x78
 8007c32:	4828      	ldr	r0, [pc, #160]	; (8007cd4 <_printf_i+0x248>)
 8007c34:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007c38:	e7e3      	b.n	8007c02 <_printf_i+0x176>
 8007c3a:	0659      	lsls	r1, r3, #25
 8007c3c:	bf48      	it	mi
 8007c3e:	b2b6      	uxthmi	r6, r6
 8007c40:	e7e6      	b.n	8007c10 <_printf_i+0x184>
 8007c42:	4615      	mov	r5, r2
 8007c44:	e7bb      	b.n	8007bbe <_printf_i+0x132>
 8007c46:	682b      	ldr	r3, [r5, #0]
 8007c48:	6826      	ldr	r6, [r4, #0]
 8007c4a:	1d18      	adds	r0, r3, #4
 8007c4c:	6961      	ldr	r1, [r4, #20]
 8007c4e:	6028      	str	r0, [r5, #0]
 8007c50:	0635      	lsls	r5, r6, #24
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	d501      	bpl.n	8007c5a <_printf_i+0x1ce>
 8007c56:	6019      	str	r1, [r3, #0]
 8007c58:	e002      	b.n	8007c60 <_printf_i+0x1d4>
 8007c5a:	0670      	lsls	r0, r6, #25
 8007c5c:	d5fb      	bpl.n	8007c56 <_printf_i+0x1ca>
 8007c5e:	8019      	strh	r1, [r3, #0]
 8007c60:	2300      	movs	r3, #0
 8007c62:	4615      	mov	r5, r2
 8007c64:	6123      	str	r3, [r4, #16]
 8007c66:	e7ba      	b.n	8007bde <_printf_i+0x152>
 8007c68:	682b      	ldr	r3, [r5, #0]
 8007c6a:	2100      	movs	r1, #0
 8007c6c:	1d1a      	adds	r2, r3, #4
 8007c6e:	602a      	str	r2, [r5, #0]
 8007c70:	681d      	ldr	r5, [r3, #0]
 8007c72:	6862      	ldr	r2, [r4, #4]
 8007c74:	4628      	mov	r0, r5
 8007c76:	f002 fb1d 	bl	800a2b4 <memchr>
 8007c7a:	b108      	cbz	r0, 8007c80 <_printf_i+0x1f4>
 8007c7c:	1b40      	subs	r0, r0, r5
 8007c7e:	6060      	str	r0, [r4, #4]
 8007c80:	6863      	ldr	r3, [r4, #4]
 8007c82:	6123      	str	r3, [r4, #16]
 8007c84:	2300      	movs	r3, #0
 8007c86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c8a:	e7a8      	b.n	8007bde <_printf_i+0x152>
 8007c8c:	462a      	mov	r2, r5
 8007c8e:	4649      	mov	r1, r9
 8007c90:	4640      	mov	r0, r8
 8007c92:	6923      	ldr	r3, [r4, #16]
 8007c94:	47d0      	blx	sl
 8007c96:	3001      	adds	r0, #1
 8007c98:	d0ab      	beq.n	8007bf2 <_printf_i+0x166>
 8007c9a:	6823      	ldr	r3, [r4, #0]
 8007c9c:	079b      	lsls	r3, r3, #30
 8007c9e:	d413      	bmi.n	8007cc8 <_printf_i+0x23c>
 8007ca0:	68e0      	ldr	r0, [r4, #12]
 8007ca2:	9b03      	ldr	r3, [sp, #12]
 8007ca4:	4298      	cmp	r0, r3
 8007ca6:	bfb8      	it	lt
 8007ca8:	4618      	movlt	r0, r3
 8007caa:	e7a4      	b.n	8007bf6 <_printf_i+0x16a>
 8007cac:	2301      	movs	r3, #1
 8007cae:	4632      	mov	r2, r6
 8007cb0:	4649      	mov	r1, r9
 8007cb2:	4640      	mov	r0, r8
 8007cb4:	47d0      	blx	sl
 8007cb6:	3001      	adds	r0, #1
 8007cb8:	d09b      	beq.n	8007bf2 <_printf_i+0x166>
 8007cba:	3501      	adds	r5, #1
 8007cbc:	68e3      	ldr	r3, [r4, #12]
 8007cbe:	9903      	ldr	r1, [sp, #12]
 8007cc0:	1a5b      	subs	r3, r3, r1
 8007cc2:	42ab      	cmp	r3, r5
 8007cc4:	dcf2      	bgt.n	8007cac <_printf_i+0x220>
 8007cc6:	e7eb      	b.n	8007ca0 <_printf_i+0x214>
 8007cc8:	2500      	movs	r5, #0
 8007cca:	f104 0619 	add.w	r6, r4, #25
 8007cce:	e7f5      	b.n	8007cbc <_printf_i+0x230>
 8007cd0:	0800c66e 	.word	0x0800c66e
 8007cd4:	0800c67f 	.word	0x0800c67f

08007cd8 <_scanf_float>:
 8007cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cdc:	b087      	sub	sp, #28
 8007cde:	9303      	str	r3, [sp, #12]
 8007ce0:	688b      	ldr	r3, [r1, #8]
 8007ce2:	4617      	mov	r7, r2
 8007ce4:	1e5a      	subs	r2, r3, #1
 8007ce6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007cea:	bf85      	ittet	hi
 8007cec:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007cf0:	195b      	addhi	r3, r3, r5
 8007cf2:	2300      	movls	r3, #0
 8007cf4:	9302      	strhi	r3, [sp, #8]
 8007cf6:	bf88      	it	hi
 8007cf8:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007cfc:	468b      	mov	fp, r1
 8007cfe:	f04f 0500 	mov.w	r5, #0
 8007d02:	bf8c      	ite	hi
 8007d04:	608b      	strhi	r3, [r1, #8]
 8007d06:	9302      	strls	r3, [sp, #8]
 8007d08:	680b      	ldr	r3, [r1, #0]
 8007d0a:	4680      	mov	r8, r0
 8007d0c:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8007d10:	f84b 3b1c 	str.w	r3, [fp], #28
 8007d14:	460c      	mov	r4, r1
 8007d16:	465e      	mov	r6, fp
 8007d18:	46aa      	mov	sl, r5
 8007d1a:	46a9      	mov	r9, r5
 8007d1c:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007d20:	9501      	str	r5, [sp, #4]
 8007d22:	68a2      	ldr	r2, [r4, #8]
 8007d24:	b152      	cbz	r2, 8007d3c <_scanf_float+0x64>
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	781b      	ldrb	r3, [r3, #0]
 8007d2a:	2b4e      	cmp	r3, #78	; 0x4e
 8007d2c:	d864      	bhi.n	8007df8 <_scanf_float+0x120>
 8007d2e:	2b40      	cmp	r3, #64	; 0x40
 8007d30:	d83c      	bhi.n	8007dac <_scanf_float+0xd4>
 8007d32:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8007d36:	b2c8      	uxtb	r0, r1
 8007d38:	280e      	cmp	r0, #14
 8007d3a:	d93a      	bls.n	8007db2 <_scanf_float+0xda>
 8007d3c:	f1b9 0f00 	cmp.w	r9, #0
 8007d40:	d003      	beq.n	8007d4a <_scanf_float+0x72>
 8007d42:	6823      	ldr	r3, [r4, #0]
 8007d44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d48:	6023      	str	r3, [r4, #0]
 8007d4a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007d4e:	f1ba 0f01 	cmp.w	sl, #1
 8007d52:	f200 8113 	bhi.w	8007f7c <_scanf_float+0x2a4>
 8007d56:	455e      	cmp	r6, fp
 8007d58:	f200 8105 	bhi.w	8007f66 <_scanf_float+0x28e>
 8007d5c:	2501      	movs	r5, #1
 8007d5e:	4628      	mov	r0, r5
 8007d60:	b007      	add	sp, #28
 8007d62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d66:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8007d6a:	2a0d      	cmp	r2, #13
 8007d6c:	d8e6      	bhi.n	8007d3c <_scanf_float+0x64>
 8007d6e:	a101      	add	r1, pc, #4	; (adr r1, 8007d74 <_scanf_float+0x9c>)
 8007d70:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007d74:	08007eb3 	.word	0x08007eb3
 8007d78:	08007d3d 	.word	0x08007d3d
 8007d7c:	08007d3d 	.word	0x08007d3d
 8007d80:	08007d3d 	.word	0x08007d3d
 8007d84:	08007f13 	.word	0x08007f13
 8007d88:	08007eeb 	.word	0x08007eeb
 8007d8c:	08007d3d 	.word	0x08007d3d
 8007d90:	08007d3d 	.word	0x08007d3d
 8007d94:	08007ec1 	.word	0x08007ec1
 8007d98:	08007d3d 	.word	0x08007d3d
 8007d9c:	08007d3d 	.word	0x08007d3d
 8007da0:	08007d3d 	.word	0x08007d3d
 8007da4:	08007d3d 	.word	0x08007d3d
 8007da8:	08007e79 	.word	0x08007e79
 8007dac:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8007db0:	e7db      	b.n	8007d6a <_scanf_float+0x92>
 8007db2:	290e      	cmp	r1, #14
 8007db4:	d8c2      	bhi.n	8007d3c <_scanf_float+0x64>
 8007db6:	a001      	add	r0, pc, #4	; (adr r0, 8007dbc <_scanf_float+0xe4>)
 8007db8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007dbc:	08007e6b 	.word	0x08007e6b
 8007dc0:	08007d3d 	.word	0x08007d3d
 8007dc4:	08007e6b 	.word	0x08007e6b
 8007dc8:	08007eff 	.word	0x08007eff
 8007dcc:	08007d3d 	.word	0x08007d3d
 8007dd0:	08007e19 	.word	0x08007e19
 8007dd4:	08007e55 	.word	0x08007e55
 8007dd8:	08007e55 	.word	0x08007e55
 8007ddc:	08007e55 	.word	0x08007e55
 8007de0:	08007e55 	.word	0x08007e55
 8007de4:	08007e55 	.word	0x08007e55
 8007de8:	08007e55 	.word	0x08007e55
 8007dec:	08007e55 	.word	0x08007e55
 8007df0:	08007e55 	.word	0x08007e55
 8007df4:	08007e55 	.word	0x08007e55
 8007df8:	2b6e      	cmp	r3, #110	; 0x6e
 8007dfa:	d809      	bhi.n	8007e10 <_scanf_float+0x138>
 8007dfc:	2b60      	cmp	r3, #96	; 0x60
 8007dfe:	d8b2      	bhi.n	8007d66 <_scanf_float+0x8e>
 8007e00:	2b54      	cmp	r3, #84	; 0x54
 8007e02:	d077      	beq.n	8007ef4 <_scanf_float+0x21c>
 8007e04:	2b59      	cmp	r3, #89	; 0x59
 8007e06:	d199      	bne.n	8007d3c <_scanf_float+0x64>
 8007e08:	2d07      	cmp	r5, #7
 8007e0a:	d197      	bne.n	8007d3c <_scanf_float+0x64>
 8007e0c:	2508      	movs	r5, #8
 8007e0e:	e029      	b.n	8007e64 <_scanf_float+0x18c>
 8007e10:	2b74      	cmp	r3, #116	; 0x74
 8007e12:	d06f      	beq.n	8007ef4 <_scanf_float+0x21c>
 8007e14:	2b79      	cmp	r3, #121	; 0x79
 8007e16:	e7f6      	b.n	8007e06 <_scanf_float+0x12e>
 8007e18:	6821      	ldr	r1, [r4, #0]
 8007e1a:	05c8      	lsls	r0, r1, #23
 8007e1c:	d51a      	bpl.n	8007e54 <_scanf_float+0x17c>
 8007e1e:	9b02      	ldr	r3, [sp, #8]
 8007e20:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007e24:	6021      	str	r1, [r4, #0]
 8007e26:	f109 0901 	add.w	r9, r9, #1
 8007e2a:	b11b      	cbz	r3, 8007e34 <_scanf_float+0x15c>
 8007e2c:	3b01      	subs	r3, #1
 8007e2e:	3201      	adds	r2, #1
 8007e30:	9302      	str	r3, [sp, #8]
 8007e32:	60a2      	str	r2, [r4, #8]
 8007e34:	68a3      	ldr	r3, [r4, #8]
 8007e36:	3b01      	subs	r3, #1
 8007e38:	60a3      	str	r3, [r4, #8]
 8007e3a:	6923      	ldr	r3, [r4, #16]
 8007e3c:	3301      	adds	r3, #1
 8007e3e:	6123      	str	r3, [r4, #16]
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	3b01      	subs	r3, #1
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	607b      	str	r3, [r7, #4]
 8007e48:	f340 8084 	ble.w	8007f54 <_scanf_float+0x27c>
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	3301      	adds	r3, #1
 8007e50:	603b      	str	r3, [r7, #0]
 8007e52:	e766      	b.n	8007d22 <_scanf_float+0x4a>
 8007e54:	eb1a 0f05 	cmn.w	sl, r5
 8007e58:	f47f af70 	bne.w	8007d3c <_scanf_float+0x64>
 8007e5c:	6822      	ldr	r2, [r4, #0]
 8007e5e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8007e62:	6022      	str	r2, [r4, #0]
 8007e64:	f806 3b01 	strb.w	r3, [r6], #1
 8007e68:	e7e4      	b.n	8007e34 <_scanf_float+0x15c>
 8007e6a:	6822      	ldr	r2, [r4, #0]
 8007e6c:	0610      	lsls	r0, r2, #24
 8007e6e:	f57f af65 	bpl.w	8007d3c <_scanf_float+0x64>
 8007e72:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007e76:	e7f4      	b.n	8007e62 <_scanf_float+0x18a>
 8007e78:	f1ba 0f00 	cmp.w	sl, #0
 8007e7c:	d10e      	bne.n	8007e9c <_scanf_float+0x1c4>
 8007e7e:	f1b9 0f00 	cmp.w	r9, #0
 8007e82:	d10e      	bne.n	8007ea2 <_scanf_float+0x1ca>
 8007e84:	6822      	ldr	r2, [r4, #0]
 8007e86:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007e8a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007e8e:	d108      	bne.n	8007ea2 <_scanf_float+0x1ca>
 8007e90:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007e94:	f04f 0a01 	mov.w	sl, #1
 8007e98:	6022      	str	r2, [r4, #0]
 8007e9a:	e7e3      	b.n	8007e64 <_scanf_float+0x18c>
 8007e9c:	f1ba 0f02 	cmp.w	sl, #2
 8007ea0:	d055      	beq.n	8007f4e <_scanf_float+0x276>
 8007ea2:	2d01      	cmp	r5, #1
 8007ea4:	d002      	beq.n	8007eac <_scanf_float+0x1d4>
 8007ea6:	2d04      	cmp	r5, #4
 8007ea8:	f47f af48 	bne.w	8007d3c <_scanf_float+0x64>
 8007eac:	3501      	adds	r5, #1
 8007eae:	b2ed      	uxtb	r5, r5
 8007eb0:	e7d8      	b.n	8007e64 <_scanf_float+0x18c>
 8007eb2:	f1ba 0f01 	cmp.w	sl, #1
 8007eb6:	f47f af41 	bne.w	8007d3c <_scanf_float+0x64>
 8007eba:	f04f 0a02 	mov.w	sl, #2
 8007ebe:	e7d1      	b.n	8007e64 <_scanf_float+0x18c>
 8007ec0:	b97d      	cbnz	r5, 8007ee2 <_scanf_float+0x20a>
 8007ec2:	f1b9 0f00 	cmp.w	r9, #0
 8007ec6:	f47f af3c 	bne.w	8007d42 <_scanf_float+0x6a>
 8007eca:	6822      	ldr	r2, [r4, #0]
 8007ecc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007ed0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007ed4:	f47f af39 	bne.w	8007d4a <_scanf_float+0x72>
 8007ed8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007edc:	2501      	movs	r5, #1
 8007ede:	6022      	str	r2, [r4, #0]
 8007ee0:	e7c0      	b.n	8007e64 <_scanf_float+0x18c>
 8007ee2:	2d03      	cmp	r5, #3
 8007ee4:	d0e2      	beq.n	8007eac <_scanf_float+0x1d4>
 8007ee6:	2d05      	cmp	r5, #5
 8007ee8:	e7de      	b.n	8007ea8 <_scanf_float+0x1d0>
 8007eea:	2d02      	cmp	r5, #2
 8007eec:	f47f af26 	bne.w	8007d3c <_scanf_float+0x64>
 8007ef0:	2503      	movs	r5, #3
 8007ef2:	e7b7      	b.n	8007e64 <_scanf_float+0x18c>
 8007ef4:	2d06      	cmp	r5, #6
 8007ef6:	f47f af21 	bne.w	8007d3c <_scanf_float+0x64>
 8007efa:	2507      	movs	r5, #7
 8007efc:	e7b2      	b.n	8007e64 <_scanf_float+0x18c>
 8007efe:	6822      	ldr	r2, [r4, #0]
 8007f00:	0591      	lsls	r1, r2, #22
 8007f02:	f57f af1b 	bpl.w	8007d3c <_scanf_float+0x64>
 8007f06:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8007f0a:	6022      	str	r2, [r4, #0]
 8007f0c:	f8cd 9004 	str.w	r9, [sp, #4]
 8007f10:	e7a8      	b.n	8007e64 <_scanf_float+0x18c>
 8007f12:	6822      	ldr	r2, [r4, #0]
 8007f14:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8007f18:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007f1c:	d006      	beq.n	8007f2c <_scanf_float+0x254>
 8007f1e:	0550      	lsls	r0, r2, #21
 8007f20:	f57f af0c 	bpl.w	8007d3c <_scanf_float+0x64>
 8007f24:	f1b9 0f00 	cmp.w	r9, #0
 8007f28:	f43f af0f 	beq.w	8007d4a <_scanf_float+0x72>
 8007f2c:	0591      	lsls	r1, r2, #22
 8007f2e:	bf58      	it	pl
 8007f30:	9901      	ldrpl	r1, [sp, #4]
 8007f32:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007f36:	bf58      	it	pl
 8007f38:	eba9 0101 	subpl.w	r1, r9, r1
 8007f3c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8007f40:	f04f 0900 	mov.w	r9, #0
 8007f44:	bf58      	it	pl
 8007f46:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007f4a:	6022      	str	r2, [r4, #0]
 8007f4c:	e78a      	b.n	8007e64 <_scanf_float+0x18c>
 8007f4e:	f04f 0a03 	mov.w	sl, #3
 8007f52:	e787      	b.n	8007e64 <_scanf_float+0x18c>
 8007f54:	4639      	mov	r1, r7
 8007f56:	4640      	mov	r0, r8
 8007f58:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007f5c:	4798      	blx	r3
 8007f5e:	2800      	cmp	r0, #0
 8007f60:	f43f aedf 	beq.w	8007d22 <_scanf_float+0x4a>
 8007f64:	e6ea      	b.n	8007d3c <_scanf_float+0x64>
 8007f66:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007f6a:	463a      	mov	r2, r7
 8007f6c:	4640      	mov	r0, r8
 8007f6e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007f72:	4798      	blx	r3
 8007f74:	6923      	ldr	r3, [r4, #16]
 8007f76:	3b01      	subs	r3, #1
 8007f78:	6123      	str	r3, [r4, #16]
 8007f7a:	e6ec      	b.n	8007d56 <_scanf_float+0x7e>
 8007f7c:	1e6b      	subs	r3, r5, #1
 8007f7e:	2b06      	cmp	r3, #6
 8007f80:	d825      	bhi.n	8007fce <_scanf_float+0x2f6>
 8007f82:	2d02      	cmp	r5, #2
 8007f84:	d836      	bhi.n	8007ff4 <_scanf_float+0x31c>
 8007f86:	455e      	cmp	r6, fp
 8007f88:	f67f aee8 	bls.w	8007d5c <_scanf_float+0x84>
 8007f8c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007f90:	463a      	mov	r2, r7
 8007f92:	4640      	mov	r0, r8
 8007f94:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007f98:	4798      	blx	r3
 8007f9a:	6923      	ldr	r3, [r4, #16]
 8007f9c:	3b01      	subs	r3, #1
 8007f9e:	6123      	str	r3, [r4, #16]
 8007fa0:	e7f1      	b.n	8007f86 <_scanf_float+0x2ae>
 8007fa2:	9802      	ldr	r0, [sp, #8]
 8007fa4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007fa8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8007fac:	463a      	mov	r2, r7
 8007fae:	9002      	str	r0, [sp, #8]
 8007fb0:	4640      	mov	r0, r8
 8007fb2:	4798      	blx	r3
 8007fb4:	6923      	ldr	r3, [r4, #16]
 8007fb6:	3b01      	subs	r3, #1
 8007fb8:	6123      	str	r3, [r4, #16]
 8007fba:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007fbe:	fa5f fa8a 	uxtb.w	sl, sl
 8007fc2:	f1ba 0f02 	cmp.w	sl, #2
 8007fc6:	d1ec      	bne.n	8007fa2 <_scanf_float+0x2ca>
 8007fc8:	3d03      	subs	r5, #3
 8007fca:	b2ed      	uxtb	r5, r5
 8007fcc:	1b76      	subs	r6, r6, r5
 8007fce:	6823      	ldr	r3, [r4, #0]
 8007fd0:	05da      	lsls	r2, r3, #23
 8007fd2:	d52f      	bpl.n	8008034 <_scanf_float+0x35c>
 8007fd4:	055b      	lsls	r3, r3, #21
 8007fd6:	d510      	bpl.n	8007ffa <_scanf_float+0x322>
 8007fd8:	455e      	cmp	r6, fp
 8007fda:	f67f aebf 	bls.w	8007d5c <_scanf_float+0x84>
 8007fde:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007fe2:	463a      	mov	r2, r7
 8007fe4:	4640      	mov	r0, r8
 8007fe6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007fea:	4798      	blx	r3
 8007fec:	6923      	ldr	r3, [r4, #16]
 8007fee:	3b01      	subs	r3, #1
 8007ff0:	6123      	str	r3, [r4, #16]
 8007ff2:	e7f1      	b.n	8007fd8 <_scanf_float+0x300>
 8007ff4:	46aa      	mov	sl, r5
 8007ff6:	9602      	str	r6, [sp, #8]
 8007ff8:	e7df      	b.n	8007fba <_scanf_float+0x2e2>
 8007ffa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007ffe:	6923      	ldr	r3, [r4, #16]
 8008000:	2965      	cmp	r1, #101	; 0x65
 8008002:	f103 33ff 	add.w	r3, r3, #4294967295
 8008006:	f106 35ff 	add.w	r5, r6, #4294967295
 800800a:	6123      	str	r3, [r4, #16]
 800800c:	d00c      	beq.n	8008028 <_scanf_float+0x350>
 800800e:	2945      	cmp	r1, #69	; 0x45
 8008010:	d00a      	beq.n	8008028 <_scanf_float+0x350>
 8008012:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008016:	463a      	mov	r2, r7
 8008018:	4640      	mov	r0, r8
 800801a:	4798      	blx	r3
 800801c:	6923      	ldr	r3, [r4, #16]
 800801e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008022:	3b01      	subs	r3, #1
 8008024:	1eb5      	subs	r5, r6, #2
 8008026:	6123      	str	r3, [r4, #16]
 8008028:	463a      	mov	r2, r7
 800802a:	4640      	mov	r0, r8
 800802c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008030:	4798      	blx	r3
 8008032:	462e      	mov	r6, r5
 8008034:	6825      	ldr	r5, [r4, #0]
 8008036:	f015 0510 	ands.w	r5, r5, #16
 800803a:	d155      	bne.n	80080e8 <_scanf_float+0x410>
 800803c:	7035      	strb	r5, [r6, #0]
 800803e:	6823      	ldr	r3, [r4, #0]
 8008040:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008044:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008048:	d11b      	bne.n	8008082 <_scanf_float+0x3aa>
 800804a:	9b01      	ldr	r3, [sp, #4]
 800804c:	454b      	cmp	r3, r9
 800804e:	eba3 0209 	sub.w	r2, r3, r9
 8008052:	d123      	bne.n	800809c <_scanf_float+0x3c4>
 8008054:	2200      	movs	r2, #0
 8008056:	4659      	mov	r1, fp
 8008058:	4640      	mov	r0, r8
 800805a:	f000 fe91 	bl	8008d80 <_strtod_r>
 800805e:	6822      	ldr	r2, [r4, #0]
 8008060:	9b03      	ldr	r3, [sp, #12]
 8008062:	f012 0f02 	tst.w	r2, #2
 8008066:	4606      	mov	r6, r0
 8008068:	460f      	mov	r7, r1
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	d021      	beq.n	80080b2 <_scanf_float+0x3da>
 800806e:	1d1a      	adds	r2, r3, #4
 8008070:	9903      	ldr	r1, [sp, #12]
 8008072:	600a      	str	r2, [r1, #0]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	e9c3 6700 	strd	r6, r7, [r3]
 800807a:	68e3      	ldr	r3, [r4, #12]
 800807c:	3301      	adds	r3, #1
 800807e:	60e3      	str	r3, [r4, #12]
 8008080:	e66d      	b.n	8007d5e <_scanf_float+0x86>
 8008082:	9b04      	ldr	r3, [sp, #16]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d0e5      	beq.n	8008054 <_scanf_float+0x37c>
 8008088:	9905      	ldr	r1, [sp, #20]
 800808a:	230a      	movs	r3, #10
 800808c:	462a      	mov	r2, r5
 800808e:	4640      	mov	r0, r8
 8008090:	3101      	adds	r1, #1
 8008092:	f000 ff03 	bl	8008e9c <_strtol_r>
 8008096:	9b04      	ldr	r3, [sp, #16]
 8008098:	9e05      	ldr	r6, [sp, #20]
 800809a:	1ac2      	subs	r2, r0, r3
 800809c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80080a0:	429e      	cmp	r6, r3
 80080a2:	bf28      	it	cs
 80080a4:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80080a8:	4630      	mov	r0, r6
 80080aa:	4910      	ldr	r1, [pc, #64]	; (80080ec <_scanf_float+0x414>)
 80080ac:	f000 f826 	bl	80080fc <siprintf>
 80080b0:	e7d0      	b.n	8008054 <_scanf_float+0x37c>
 80080b2:	f012 0f04 	tst.w	r2, #4
 80080b6:	f103 0204 	add.w	r2, r3, #4
 80080ba:	d1d9      	bne.n	8008070 <_scanf_float+0x398>
 80080bc:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80080c0:	f8cc 2000 	str.w	r2, [ip]
 80080c4:	f8d3 8000 	ldr.w	r8, [r3]
 80080c8:	4602      	mov	r2, r0
 80080ca:	460b      	mov	r3, r1
 80080cc:	f7f8 fca8 	bl	8000a20 <__aeabi_dcmpun>
 80080d0:	b128      	cbz	r0, 80080de <_scanf_float+0x406>
 80080d2:	4807      	ldr	r0, [pc, #28]	; (80080f0 <_scanf_float+0x418>)
 80080d4:	f000 f80e 	bl	80080f4 <nanf>
 80080d8:	f8c8 0000 	str.w	r0, [r8]
 80080dc:	e7cd      	b.n	800807a <_scanf_float+0x3a2>
 80080de:	4630      	mov	r0, r6
 80080e0:	4639      	mov	r1, r7
 80080e2:	f7f8 fcfb 	bl	8000adc <__aeabi_d2f>
 80080e6:	e7f7      	b.n	80080d8 <_scanf_float+0x400>
 80080e8:	2500      	movs	r5, #0
 80080ea:	e638      	b.n	8007d5e <_scanf_float+0x86>
 80080ec:	0800c690 	.word	0x0800c690
 80080f0:	0800ca98 	.word	0x0800ca98

080080f4 <nanf>:
 80080f4:	4800      	ldr	r0, [pc, #0]	; (80080f8 <nanf+0x4>)
 80080f6:	4770      	bx	lr
 80080f8:	7fc00000 	.word	0x7fc00000

080080fc <siprintf>:
 80080fc:	b40e      	push	{r1, r2, r3}
 80080fe:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008102:	b500      	push	{lr}
 8008104:	b09c      	sub	sp, #112	; 0x70
 8008106:	ab1d      	add	r3, sp, #116	; 0x74
 8008108:	9002      	str	r0, [sp, #8]
 800810a:	9006      	str	r0, [sp, #24]
 800810c:	9107      	str	r1, [sp, #28]
 800810e:	9104      	str	r1, [sp, #16]
 8008110:	4808      	ldr	r0, [pc, #32]	; (8008134 <siprintf+0x38>)
 8008112:	4909      	ldr	r1, [pc, #36]	; (8008138 <siprintf+0x3c>)
 8008114:	f853 2b04 	ldr.w	r2, [r3], #4
 8008118:	9105      	str	r1, [sp, #20]
 800811a:	6800      	ldr	r0, [r0, #0]
 800811c:	a902      	add	r1, sp, #8
 800811e:	9301      	str	r3, [sp, #4]
 8008120:	f002 feda 	bl	800aed8 <_svfiprintf_r>
 8008124:	2200      	movs	r2, #0
 8008126:	9b02      	ldr	r3, [sp, #8]
 8008128:	701a      	strb	r2, [r3, #0]
 800812a:	b01c      	add	sp, #112	; 0x70
 800812c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008130:	b003      	add	sp, #12
 8008132:	4770      	bx	lr
 8008134:	20000018 	.word	0x20000018
 8008138:	ffff0208 	.word	0xffff0208

0800813c <strpbrk>:
 800813c:	b570      	push	{r4, r5, r6, lr}
 800813e:	4603      	mov	r3, r0
 8008140:	7800      	ldrb	r0, [r0, #0]
 8008142:	b190      	cbz	r0, 800816a <strpbrk+0x2e>
 8008144:	460c      	mov	r4, r1
 8008146:	4618      	mov	r0, r3
 8008148:	f813 5b01 	ldrb.w	r5, [r3], #1
 800814c:	b14d      	cbz	r5, 8008162 <strpbrk+0x26>
 800814e:	460a      	mov	r2, r1
 8008150:	e001      	b.n	8008156 <strpbrk+0x1a>
 8008152:	42ae      	cmp	r6, r5
 8008154:	d009      	beq.n	800816a <strpbrk+0x2e>
 8008156:	4614      	mov	r4, r2
 8008158:	f812 6b01 	ldrb.w	r6, [r2], #1
 800815c:	2e00      	cmp	r6, #0
 800815e:	d1f8      	bne.n	8008152 <strpbrk+0x16>
 8008160:	e7f1      	b.n	8008146 <strpbrk+0xa>
 8008162:	7823      	ldrb	r3, [r4, #0]
 8008164:	2b00      	cmp	r3, #0
 8008166:	bf08      	it	eq
 8008168:	2000      	moveq	r0, #0
 800816a:	bd70      	pop	{r4, r5, r6, pc}

0800816c <sulp>:
 800816c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008170:	460f      	mov	r7, r1
 8008172:	4690      	mov	r8, r2
 8008174:	f002 fc1c 	bl	800a9b0 <__ulp>
 8008178:	4604      	mov	r4, r0
 800817a:	460d      	mov	r5, r1
 800817c:	f1b8 0f00 	cmp.w	r8, #0
 8008180:	d011      	beq.n	80081a6 <sulp+0x3a>
 8008182:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8008186:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800818a:	2b00      	cmp	r3, #0
 800818c:	dd0b      	ble.n	80081a6 <sulp+0x3a>
 800818e:	2400      	movs	r4, #0
 8008190:	051b      	lsls	r3, r3, #20
 8008192:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008196:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800819a:	4622      	mov	r2, r4
 800819c:	462b      	mov	r3, r5
 800819e:	f7f8 f9a5 	bl	80004ec <__aeabi_dmul>
 80081a2:	4604      	mov	r4, r0
 80081a4:	460d      	mov	r5, r1
 80081a6:	4620      	mov	r0, r4
 80081a8:	4629      	mov	r1, r5
 80081aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080081b0 <_strtod_l>:
 80081b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081b4:	469b      	mov	fp, r3
 80081b6:	2300      	movs	r3, #0
 80081b8:	b09f      	sub	sp, #124	; 0x7c
 80081ba:	931a      	str	r3, [sp, #104]	; 0x68
 80081bc:	4b9e      	ldr	r3, [pc, #632]	; (8008438 <_strtod_l+0x288>)
 80081be:	4682      	mov	sl, r0
 80081c0:	681f      	ldr	r7, [r3, #0]
 80081c2:	460e      	mov	r6, r1
 80081c4:	4638      	mov	r0, r7
 80081c6:	9215      	str	r2, [sp, #84]	; 0x54
 80081c8:	f7f7 ffcc 	bl	8000164 <strlen>
 80081cc:	f04f 0800 	mov.w	r8, #0
 80081d0:	4604      	mov	r4, r0
 80081d2:	f04f 0900 	mov.w	r9, #0
 80081d6:	9619      	str	r6, [sp, #100]	; 0x64
 80081d8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80081da:	781a      	ldrb	r2, [r3, #0]
 80081dc:	2a2b      	cmp	r2, #43	; 0x2b
 80081de:	d04c      	beq.n	800827a <_strtod_l+0xca>
 80081e0:	d83a      	bhi.n	8008258 <_strtod_l+0xa8>
 80081e2:	2a0d      	cmp	r2, #13
 80081e4:	d833      	bhi.n	800824e <_strtod_l+0x9e>
 80081e6:	2a08      	cmp	r2, #8
 80081e8:	d833      	bhi.n	8008252 <_strtod_l+0xa2>
 80081ea:	2a00      	cmp	r2, #0
 80081ec:	d03d      	beq.n	800826a <_strtod_l+0xba>
 80081ee:	2300      	movs	r3, #0
 80081f0:	930a      	str	r3, [sp, #40]	; 0x28
 80081f2:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80081f4:	782b      	ldrb	r3, [r5, #0]
 80081f6:	2b30      	cmp	r3, #48	; 0x30
 80081f8:	f040 80aa 	bne.w	8008350 <_strtod_l+0x1a0>
 80081fc:	786b      	ldrb	r3, [r5, #1]
 80081fe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008202:	2b58      	cmp	r3, #88	; 0x58
 8008204:	d166      	bne.n	80082d4 <_strtod_l+0x124>
 8008206:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008208:	4650      	mov	r0, sl
 800820a:	9301      	str	r3, [sp, #4]
 800820c:	ab1a      	add	r3, sp, #104	; 0x68
 800820e:	9300      	str	r3, [sp, #0]
 8008210:	4a8a      	ldr	r2, [pc, #552]	; (800843c <_strtod_l+0x28c>)
 8008212:	f8cd b008 	str.w	fp, [sp, #8]
 8008216:	ab1b      	add	r3, sp, #108	; 0x6c
 8008218:	a919      	add	r1, sp, #100	; 0x64
 800821a:	f001 fd2f 	bl	8009c7c <__gethex>
 800821e:	f010 0607 	ands.w	r6, r0, #7
 8008222:	4604      	mov	r4, r0
 8008224:	d005      	beq.n	8008232 <_strtod_l+0x82>
 8008226:	2e06      	cmp	r6, #6
 8008228:	d129      	bne.n	800827e <_strtod_l+0xce>
 800822a:	2300      	movs	r3, #0
 800822c:	3501      	adds	r5, #1
 800822e:	9519      	str	r5, [sp, #100]	; 0x64
 8008230:	930a      	str	r3, [sp, #40]	; 0x28
 8008232:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008234:	2b00      	cmp	r3, #0
 8008236:	f040 858a 	bne.w	8008d4e <_strtod_l+0xb9e>
 800823a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800823c:	b1d3      	cbz	r3, 8008274 <_strtod_l+0xc4>
 800823e:	4642      	mov	r2, r8
 8008240:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008244:	4610      	mov	r0, r2
 8008246:	4619      	mov	r1, r3
 8008248:	b01f      	add	sp, #124	; 0x7c
 800824a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800824e:	2a20      	cmp	r2, #32
 8008250:	d1cd      	bne.n	80081ee <_strtod_l+0x3e>
 8008252:	3301      	adds	r3, #1
 8008254:	9319      	str	r3, [sp, #100]	; 0x64
 8008256:	e7bf      	b.n	80081d8 <_strtod_l+0x28>
 8008258:	2a2d      	cmp	r2, #45	; 0x2d
 800825a:	d1c8      	bne.n	80081ee <_strtod_l+0x3e>
 800825c:	2201      	movs	r2, #1
 800825e:	920a      	str	r2, [sp, #40]	; 0x28
 8008260:	1c5a      	adds	r2, r3, #1
 8008262:	9219      	str	r2, [sp, #100]	; 0x64
 8008264:	785b      	ldrb	r3, [r3, #1]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d1c3      	bne.n	80081f2 <_strtod_l+0x42>
 800826a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800826c:	9619      	str	r6, [sp, #100]	; 0x64
 800826e:	2b00      	cmp	r3, #0
 8008270:	f040 856b 	bne.w	8008d4a <_strtod_l+0xb9a>
 8008274:	4642      	mov	r2, r8
 8008276:	464b      	mov	r3, r9
 8008278:	e7e4      	b.n	8008244 <_strtod_l+0x94>
 800827a:	2200      	movs	r2, #0
 800827c:	e7ef      	b.n	800825e <_strtod_l+0xae>
 800827e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008280:	b13a      	cbz	r2, 8008292 <_strtod_l+0xe2>
 8008282:	2135      	movs	r1, #53	; 0x35
 8008284:	a81c      	add	r0, sp, #112	; 0x70
 8008286:	f002 fc97 	bl	800abb8 <__copybits>
 800828a:	4650      	mov	r0, sl
 800828c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800828e:	f002 f85f 	bl	800a350 <_Bfree>
 8008292:	3e01      	subs	r6, #1
 8008294:	2e04      	cmp	r6, #4
 8008296:	d806      	bhi.n	80082a6 <_strtod_l+0xf6>
 8008298:	e8df f006 	tbb	[pc, r6]
 800829c:	1714030a 	.word	0x1714030a
 80082a0:	0a          	.byte	0x0a
 80082a1:	00          	.byte	0x00
 80082a2:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 80082a6:	0721      	lsls	r1, r4, #28
 80082a8:	d5c3      	bpl.n	8008232 <_strtod_l+0x82>
 80082aa:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 80082ae:	e7c0      	b.n	8008232 <_strtod_l+0x82>
 80082b0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80082b2:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 80082b6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80082ba:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80082be:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80082c2:	e7f0      	b.n	80082a6 <_strtod_l+0xf6>
 80082c4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8008440 <_strtod_l+0x290>
 80082c8:	e7ed      	b.n	80082a6 <_strtod_l+0xf6>
 80082ca:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80082ce:	f04f 38ff 	mov.w	r8, #4294967295
 80082d2:	e7e8      	b.n	80082a6 <_strtod_l+0xf6>
 80082d4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80082d6:	1c5a      	adds	r2, r3, #1
 80082d8:	9219      	str	r2, [sp, #100]	; 0x64
 80082da:	785b      	ldrb	r3, [r3, #1]
 80082dc:	2b30      	cmp	r3, #48	; 0x30
 80082de:	d0f9      	beq.n	80082d4 <_strtod_l+0x124>
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d0a6      	beq.n	8008232 <_strtod_l+0x82>
 80082e4:	2301      	movs	r3, #1
 80082e6:	9307      	str	r3, [sp, #28]
 80082e8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80082ea:	220a      	movs	r2, #10
 80082ec:	9308      	str	r3, [sp, #32]
 80082ee:	2300      	movs	r3, #0
 80082f0:	469b      	mov	fp, r3
 80082f2:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80082f6:	9819      	ldr	r0, [sp, #100]	; 0x64
 80082f8:	7805      	ldrb	r5, [r0, #0]
 80082fa:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 80082fe:	b2d9      	uxtb	r1, r3
 8008300:	2909      	cmp	r1, #9
 8008302:	d927      	bls.n	8008354 <_strtod_l+0x1a4>
 8008304:	4622      	mov	r2, r4
 8008306:	4639      	mov	r1, r7
 8008308:	f002 fefc 	bl	800b104 <strncmp>
 800830c:	2800      	cmp	r0, #0
 800830e:	d033      	beq.n	8008378 <_strtod_l+0x1c8>
 8008310:	2000      	movs	r0, #0
 8008312:	462a      	mov	r2, r5
 8008314:	465c      	mov	r4, fp
 8008316:	4603      	mov	r3, r0
 8008318:	9004      	str	r0, [sp, #16]
 800831a:	2a65      	cmp	r2, #101	; 0x65
 800831c:	d001      	beq.n	8008322 <_strtod_l+0x172>
 800831e:	2a45      	cmp	r2, #69	; 0x45
 8008320:	d114      	bne.n	800834c <_strtod_l+0x19c>
 8008322:	b91c      	cbnz	r4, 800832c <_strtod_l+0x17c>
 8008324:	9a07      	ldr	r2, [sp, #28]
 8008326:	4302      	orrs	r2, r0
 8008328:	d09f      	beq.n	800826a <_strtod_l+0xba>
 800832a:	2400      	movs	r4, #0
 800832c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800832e:	1c72      	adds	r2, r6, #1
 8008330:	9219      	str	r2, [sp, #100]	; 0x64
 8008332:	7872      	ldrb	r2, [r6, #1]
 8008334:	2a2b      	cmp	r2, #43	; 0x2b
 8008336:	d079      	beq.n	800842c <_strtod_l+0x27c>
 8008338:	2a2d      	cmp	r2, #45	; 0x2d
 800833a:	f000 8083 	beq.w	8008444 <_strtod_l+0x294>
 800833e:	2700      	movs	r7, #0
 8008340:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008344:	2909      	cmp	r1, #9
 8008346:	f240 8083 	bls.w	8008450 <_strtod_l+0x2a0>
 800834a:	9619      	str	r6, [sp, #100]	; 0x64
 800834c:	2500      	movs	r5, #0
 800834e:	e09f      	b.n	8008490 <_strtod_l+0x2e0>
 8008350:	2300      	movs	r3, #0
 8008352:	e7c8      	b.n	80082e6 <_strtod_l+0x136>
 8008354:	f1bb 0f08 	cmp.w	fp, #8
 8008358:	bfd5      	itete	le
 800835a:	9906      	ldrle	r1, [sp, #24]
 800835c:	9905      	ldrgt	r1, [sp, #20]
 800835e:	fb02 3301 	mlale	r3, r2, r1, r3
 8008362:	fb02 3301 	mlagt	r3, r2, r1, r3
 8008366:	f100 0001 	add.w	r0, r0, #1
 800836a:	bfd4      	ite	le
 800836c:	9306      	strle	r3, [sp, #24]
 800836e:	9305      	strgt	r3, [sp, #20]
 8008370:	f10b 0b01 	add.w	fp, fp, #1
 8008374:	9019      	str	r0, [sp, #100]	; 0x64
 8008376:	e7be      	b.n	80082f6 <_strtod_l+0x146>
 8008378:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800837a:	191a      	adds	r2, r3, r4
 800837c:	9219      	str	r2, [sp, #100]	; 0x64
 800837e:	5d1a      	ldrb	r2, [r3, r4]
 8008380:	f1bb 0f00 	cmp.w	fp, #0
 8008384:	d036      	beq.n	80083f4 <_strtod_l+0x244>
 8008386:	465c      	mov	r4, fp
 8008388:	9004      	str	r0, [sp, #16]
 800838a:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800838e:	2b09      	cmp	r3, #9
 8008390:	d912      	bls.n	80083b8 <_strtod_l+0x208>
 8008392:	2301      	movs	r3, #1
 8008394:	e7c1      	b.n	800831a <_strtod_l+0x16a>
 8008396:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008398:	3001      	adds	r0, #1
 800839a:	1c5a      	adds	r2, r3, #1
 800839c:	9219      	str	r2, [sp, #100]	; 0x64
 800839e:	785a      	ldrb	r2, [r3, #1]
 80083a0:	2a30      	cmp	r2, #48	; 0x30
 80083a2:	d0f8      	beq.n	8008396 <_strtod_l+0x1e6>
 80083a4:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80083a8:	2b08      	cmp	r3, #8
 80083aa:	f200 84d5 	bhi.w	8008d58 <_strtod_l+0xba8>
 80083ae:	9004      	str	r0, [sp, #16]
 80083b0:	2000      	movs	r0, #0
 80083b2:	4604      	mov	r4, r0
 80083b4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80083b6:	9308      	str	r3, [sp, #32]
 80083b8:	3a30      	subs	r2, #48	; 0x30
 80083ba:	f100 0301 	add.w	r3, r0, #1
 80083be:	d013      	beq.n	80083e8 <_strtod_l+0x238>
 80083c0:	9904      	ldr	r1, [sp, #16]
 80083c2:	1905      	adds	r5, r0, r4
 80083c4:	4419      	add	r1, r3
 80083c6:	9104      	str	r1, [sp, #16]
 80083c8:	4623      	mov	r3, r4
 80083ca:	210a      	movs	r1, #10
 80083cc:	42ab      	cmp	r3, r5
 80083ce:	d113      	bne.n	80083f8 <_strtod_l+0x248>
 80083d0:	1823      	adds	r3, r4, r0
 80083d2:	2b08      	cmp	r3, #8
 80083d4:	f104 0401 	add.w	r4, r4, #1
 80083d8:	4404      	add	r4, r0
 80083da:	dc1b      	bgt.n	8008414 <_strtod_l+0x264>
 80083dc:	230a      	movs	r3, #10
 80083de:	9906      	ldr	r1, [sp, #24]
 80083e0:	fb03 2301 	mla	r3, r3, r1, r2
 80083e4:	9306      	str	r3, [sp, #24]
 80083e6:	2300      	movs	r3, #0
 80083e8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80083ea:	4618      	mov	r0, r3
 80083ec:	1c51      	adds	r1, r2, #1
 80083ee:	9119      	str	r1, [sp, #100]	; 0x64
 80083f0:	7852      	ldrb	r2, [r2, #1]
 80083f2:	e7ca      	b.n	800838a <_strtod_l+0x1da>
 80083f4:	4658      	mov	r0, fp
 80083f6:	e7d3      	b.n	80083a0 <_strtod_l+0x1f0>
 80083f8:	2b08      	cmp	r3, #8
 80083fa:	dc04      	bgt.n	8008406 <_strtod_l+0x256>
 80083fc:	9f06      	ldr	r7, [sp, #24]
 80083fe:	434f      	muls	r7, r1
 8008400:	9706      	str	r7, [sp, #24]
 8008402:	3301      	adds	r3, #1
 8008404:	e7e2      	b.n	80083cc <_strtod_l+0x21c>
 8008406:	1c5f      	adds	r7, r3, #1
 8008408:	2f10      	cmp	r7, #16
 800840a:	bfde      	ittt	le
 800840c:	9f05      	ldrle	r7, [sp, #20]
 800840e:	434f      	mulle	r7, r1
 8008410:	9705      	strle	r7, [sp, #20]
 8008412:	e7f6      	b.n	8008402 <_strtod_l+0x252>
 8008414:	2c10      	cmp	r4, #16
 8008416:	bfdf      	itttt	le
 8008418:	230a      	movle	r3, #10
 800841a:	9905      	ldrle	r1, [sp, #20]
 800841c:	fb03 2301 	mlale	r3, r3, r1, r2
 8008420:	9305      	strle	r3, [sp, #20]
 8008422:	e7e0      	b.n	80083e6 <_strtod_l+0x236>
 8008424:	2300      	movs	r3, #0
 8008426:	9304      	str	r3, [sp, #16]
 8008428:	2301      	movs	r3, #1
 800842a:	e77b      	b.n	8008324 <_strtod_l+0x174>
 800842c:	2700      	movs	r7, #0
 800842e:	1cb2      	adds	r2, r6, #2
 8008430:	9219      	str	r2, [sp, #100]	; 0x64
 8008432:	78b2      	ldrb	r2, [r6, #2]
 8008434:	e784      	b.n	8008340 <_strtod_l+0x190>
 8008436:	bf00      	nop
 8008438:	0800c8e0 	.word	0x0800c8e0
 800843c:	0800c698 	.word	0x0800c698
 8008440:	7ff00000 	.word	0x7ff00000
 8008444:	2701      	movs	r7, #1
 8008446:	e7f2      	b.n	800842e <_strtod_l+0x27e>
 8008448:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800844a:	1c51      	adds	r1, r2, #1
 800844c:	9119      	str	r1, [sp, #100]	; 0x64
 800844e:	7852      	ldrb	r2, [r2, #1]
 8008450:	2a30      	cmp	r2, #48	; 0x30
 8008452:	d0f9      	beq.n	8008448 <_strtod_l+0x298>
 8008454:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008458:	2908      	cmp	r1, #8
 800845a:	f63f af77 	bhi.w	800834c <_strtod_l+0x19c>
 800845e:	f04f 0e0a 	mov.w	lr, #10
 8008462:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8008466:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008468:	9209      	str	r2, [sp, #36]	; 0x24
 800846a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800846c:	1c51      	adds	r1, r2, #1
 800846e:	9119      	str	r1, [sp, #100]	; 0x64
 8008470:	7852      	ldrb	r2, [r2, #1]
 8008472:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8008476:	2d09      	cmp	r5, #9
 8008478:	d935      	bls.n	80084e6 <_strtod_l+0x336>
 800847a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800847c:	1b49      	subs	r1, r1, r5
 800847e:	2908      	cmp	r1, #8
 8008480:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8008484:	dc02      	bgt.n	800848c <_strtod_l+0x2dc>
 8008486:	4565      	cmp	r5, ip
 8008488:	bfa8      	it	ge
 800848a:	4665      	movge	r5, ip
 800848c:	b107      	cbz	r7, 8008490 <_strtod_l+0x2e0>
 800848e:	426d      	negs	r5, r5
 8008490:	2c00      	cmp	r4, #0
 8008492:	d14c      	bne.n	800852e <_strtod_l+0x37e>
 8008494:	9907      	ldr	r1, [sp, #28]
 8008496:	4301      	orrs	r1, r0
 8008498:	f47f aecb 	bne.w	8008232 <_strtod_l+0x82>
 800849c:	2b00      	cmp	r3, #0
 800849e:	f47f aee4 	bne.w	800826a <_strtod_l+0xba>
 80084a2:	2a69      	cmp	r2, #105	; 0x69
 80084a4:	d026      	beq.n	80084f4 <_strtod_l+0x344>
 80084a6:	dc23      	bgt.n	80084f0 <_strtod_l+0x340>
 80084a8:	2a49      	cmp	r2, #73	; 0x49
 80084aa:	d023      	beq.n	80084f4 <_strtod_l+0x344>
 80084ac:	2a4e      	cmp	r2, #78	; 0x4e
 80084ae:	f47f aedc 	bne.w	800826a <_strtod_l+0xba>
 80084b2:	499d      	ldr	r1, [pc, #628]	; (8008728 <_strtod_l+0x578>)
 80084b4:	a819      	add	r0, sp, #100	; 0x64
 80084b6:	f001 fe2f 	bl	800a118 <__match>
 80084ba:	2800      	cmp	r0, #0
 80084bc:	f43f aed5 	beq.w	800826a <_strtod_l+0xba>
 80084c0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80084c2:	781b      	ldrb	r3, [r3, #0]
 80084c4:	2b28      	cmp	r3, #40	; 0x28
 80084c6:	d12c      	bne.n	8008522 <_strtod_l+0x372>
 80084c8:	4998      	ldr	r1, [pc, #608]	; (800872c <_strtod_l+0x57c>)
 80084ca:	aa1c      	add	r2, sp, #112	; 0x70
 80084cc:	a819      	add	r0, sp, #100	; 0x64
 80084ce:	f001 fe37 	bl	800a140 <__hexnan>
 80084d2:	2805      	cmp	r0, #5
 80084d4:	d125      	bne.n	8008522 <_strtod_l+0x372>
 80084d6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80084d8:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 80084dc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80084e0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80084e4:	e6a5      	b.n	8008232 <_strtod_l+0x82>
 80084e6:	fb0e 2c0c 	mla	ip, lr, ip, r2
 80084ea:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 80084ee:	e7bc      	b.n	800846a <_strtod_l+0x2ba>
 80084f0:	2a6e      	cmp	r2, #110	; 0x6e
 80084f2:	e7dc      	b.n	80084ae <_strtod_l+0x2fe>
 80084f4:	498e      	ldr	r1, [pc, #568]	; (8008730 <_strtod_l+0x580>)
 80084f6:	a819      	add	r0, sp, #100	; 0x64
 80084f8:	f001 fe0e 	bl	800a118 <__match>
 80084fc:	2800      	cmp	r0, #0
 80084fe:	f43f aeb4 	beq.w	800826a <_strtod_l+0xba>
 8008502:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008504:	498b      	ldr	r1, [pc, #556]	; (8008734 <_strtod_l+0x584>)
 8008506:	3b01      	subs	r3, #1
 8008508:	a819      	add	r0, sp, #100	; 0x64
 800850a:	9319      	str	r3, [sp, #100]	; 0x64
 800850c:	f001 fe04 	bl	800a118 <__match>
 8008510:	b910      	cbnz	r0, 8008518 <_strtod_l+0x368>
 8008512:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008514:	3301      	adds	r3, #1
 8008516:	9319      	str	r3, [sp, #100]	; 0x64
 8008518:	f04f 0800 	mov.w	r8, #0
 800851c:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8008738 <_strtod_l+0x588>
 8008520:	e687      	b.n	8008232 <_strtod_l+0x82>
 8008522:	4886      	ldr	r0, [pc, #536]	; (800873c <_strtod_l+0x58c>)
 8008524:	f002 fdd8 	bl	800b0d8 <nan>
 8008528:	4680      	mov	r8, r0
 800852a:	4689      	mov	r9, r1
 800852c:	e681      	b.n	8008232 <_strtod_l+0x82>
 800852e:	9b04      	ldr	r3, [sp, #16]
 8008530:	f1bb 0f00 	cmp.w	fp, #0
 8008534:	bf08      	it	eq
 8008536:	46a3      	moveq	fp, r4
 8008538:	1aeb      	subs	r3, r5, r3
 800853a:	2c10      	cmp	r4, #16
 800853c:	9806      	ldr	r0, [sp, #24]
 800853e:	4626      	mov	r6, r4
 8008540:	9307      	str	r3, [sp, #28]
 8008542:	bfa8      	it	ge
 8008544:	2610      	movge	r6, #16
 8008546:	f7f7 ff57 	bl	80003f8 <__aeabi_ui2d>
 800854a:	2c09      	cmp	r4, #9
 800854c:	4680      	mov	r8, r0
 800854e:	4689      	mov	r9, r1
 8008550:	dd13      	ble.n	800857a <_strtod_l+0x3ca>
 8008552:	4b7b      	ldr	r3, [pc, #492]	; (8008740 <_strtod_l+0x590>)
 8008554:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008558:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800855c:	f7f7 ffc6 	bl	80004ec <__aeabi_dmul>
 8008560:	4680      	mov	r8, r0
 8008562:	9805      	ldr	r0, [sp, #20]
 8008564:	4689      	mov	r9, r1
 8008566:	f7f7 ff47 	bl	80003f8 <__aeabi_ui2d>
 800856a:	4602      	mov	r2, r0
 800856c:	460b      	mov	r3, r1
 800856e:	4640      	mov	r0, r8
 8008570:	4649      	mov	r1, r9
 8008572:	f7f7 fe05 	bl	8000180 <__adddf3>
 8008576:	4680      	mov	r8, r0
 8008578:	4689      	mov	r9, r1
 800857a:	2c0f      	cmp	r4, #15
 800857c:	dc36      	bgt.n	80085ec <_strtod_l+0x43c>
 800857e:	9b07      	ldr	r3, [sp, #28]
 8008580:	2b00      	cmp	r3, #0
 8008582:	f43f ae56 	beq.w	8008232 <_strtod_l+0x82>
 8008586:	dd22      	ble.n	80085ce <_strtod_l+0x41e>
 8008588:	2b16      	cmp	r3, #22
 800858a:	dc09      	bgt.n	80085a0 <_strtod_l+0x3f0>
 800858c:	496c      	ldr	r1, [pc, #432]	; (8008740 <_strtod_l+0x590>)
 800858e:	4642      	mov	r2, r8
 8008590:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008594:	464b      	mov	r3, r9
 8008596:	e9d1 0100 	ldrd	r0, r1, [r1]
 800859a:	f7f7 ffa7 	bl	80004ec <__aeabi_dmul>
 800859e:	e7c3      	b.n	8008528 <_strtod_l+0x378>
 80085a0:	9a07      	ldr	r2, [sp, #28]
 80085a2:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80085a6:	4293      	cmp	r3, r2
 80085a8:	db20      	blt.n	80085ec <_strtod_l+0x43c>
 80085aa:	4d65      	ldr	r5, [pc, #404]	; (8008740 <_strtod_l+0x590>)
 80085ac:	f1c4 040f 	rsb	r4, r4, #15
 80085b0:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80085b4:	4642      	mov	r2, r8
 80085b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80085ba:	464b      	mov	r3, r9
 80085bc:	f7f7 ff96 	bl	80004ec <__aeabi_dmul>
 80085c0:	9b07      	ldr	r3, [sp, #28]
 80085c2:	1b1c      	subs	r4, r3, r4
 80085c4:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80085c8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80085cc:	e7e5      	b.n	800859a <_strtod_l+0x3ea>
 80085ce:	9b07      	ldr	r3, [sp, #28]
 80085d0:	3316      	adds	r3, #22
 80085d2:	db0b      	blt.n	80085ec <_strtod_l+0x43c>
 80085d4:	9b04      	ldr	r3, [sp, #16]
 80085d6:	4640      	mov	r0, r8
 80085d8:	1b5d      	subs	r5, r3, r5
 80085da:	4b59      	ldr	r3, [pc, #356]	; (8008740 <_strtod_l+0x590>)
 80085dc:	4649      	mov	r1, r9
 80085de:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80085e2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80085e6:	f7f8 f8ab 	bl	8000740 <__aeabi_ddiv>
 80085ea:	e79d      	b.n	8008528 <_strtod_l+0x378>
 80085ec:	9b07      	ldr	r3, [sp, #28]
 80085ee:	1ba6      	subs	r6, r4, r6
 80085f0:	441e      	add	r6, r3
 80085f2:	2e00      	cmp	r6, #0
 80085f4:	dd74      	ble.n	80086e0 <_strtod_l+0x530>
 80085f6:	f016 030f 	ands.w	r3, r6, #15
 80085fa:	d00a      	beq.n	8008612 <_strtod_l+0x462>
 80085fc:	4950      	ldr	r1, [pc, #320]	; (8008740 <_strtod_l+0x590>)
 80085fe:	4642      	mov	r2, r8
 8008600:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008604:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008608:	464b      	mov	r3, r9
 800860a:	f7f7 ff6f 	bl	80004ec <__aeabi_dmul>
 800860e:	4680      	mov	r8, r0
 8008610:	4689      	mov	r9, r1
 8008612:	f036 060f 	bics.w	r6, r6, #15
 8008616:	d052      	beq.n	80086be <_strtod_l+0x50e>
 8008618:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 800861c:	dd27      	ble.n	800866e <_strtod_l+0x4be>
 800861e:	f04f 0b00 	mov.w	fp, #0
 8008622:	f8cd b010 	str.w	fp, [sp, #16]
 8008626:	f8cd b020 	str.w	fp, [sp, #32]
 800862a:	f8cd b018 	str.w	fp, [sp, #24]
 800862e:	2322      	movs	r3, #34	; 0x22
 8008630:	f04f 0800 	mov.w	r8, #0
 8008634:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8008738 <_strtod_l+0x588>
 8008638:	f8ca 3000 	str.w	r3, [sl]
 800863c:	9b08      	ldr	r3, [sp, #32]
 800863e:	2b00      	cmp	r3, #0
 8008640:	f43f adf7 	beq.w	8008232 <_strtod_l+0x82>
 8008644:	4650      	mov	r0, sl
 8008646:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008648:	f001 fe82 	bl	800a350 <_Bfree>
 800864c:	4650      	mov	r0, sl
 800864e:	9906      	ldr	r1, [sp, #24]
 8008650:	f001 fe7e 	bl	800a350 <_Bfree>
 8008654:	4650      	mov	r0, sl
 8008656:	9904      	ldr	r1, [sp, #16]
 8008658:	f001 fe7a 	bl	800a350 <_Bfree>
 800865c:	4650      	mov	r0, sl
 800865e:	9908      	ldr	r1, [sp, #32]
 8008660:	f001 fe76 	bl	800a350 <_Bfree>
 8008664:	4659      	mov	r1, fp
 8008666:	4650      	mov	r0, sl
 8008668:	f001 fe72 	bl	800a350 <_Bfree>
 800866c:	e5e1      	b.n	8008232 <_strtod_l+0x82>
 800866e:	4b35      	ldr	r3, [pc, #212]	; (8008744 <_strtod_l+0x594>)
 8008670:	4640      	mov	r0, r8
 8008672:	9305      	str	r3, [sp, #20]
 8008674:	2300      	movs	r3, #0
 8008676:	4649      	mov	r1, r9
 8008678:	461f      	mov	r7, r3
 800867a:	1136      	asrs	r6, r6, #4
 800867c:	2e01      	cmp	r6, #1
 800867e:	dc21      	bgt.n	80086c4 <_strtod_l+0x514>
 8008680:	b10b      	cbz	r3, 8008686 <_strtod_l+0x4d6>
 8008682:	4680      	mov	r8, r0
 8008684:	4689      	mov	r9, r1
 8008686:	4b2f      	ldr	r3, [pc, #188]	; (8008744 <_strtod_l+0x594>)
 8008688:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800868c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8008690:	4642      	mov	r2, r8
 8008692:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008696:	464b      	mov	r3, r9
 8008698:	f7f7 ff28 	bl	80004ec <__aeabi_dmul>
 800869c:	4b26      	ldr	r3, [pc, #152]	; (8008738 <_strtod_l+0x588>)
 800869e:	460a      	mov	r2, r1
 80086a0:	400b      	ands	r3, r1
 80086a2:	4929      	ldr	r1, [pc, #164]	; (8008748 <_strtod_l+0x598>)
 80086a4:	4680      	mov	r8, r0
 80086a6:	428b      	cmp	r3, r1
 80086a8:	d8b9      	bhi.n	800861e <_strtod_l+0x46e>
 80086aa:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80086ae:	428b      	cmp	r3, r1
 80086b0:	bf86      	itte	hi
 80086b2:	f04f 38ff 	movhi.w	r8, #4294967295
 80086b6:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 800874c <_strtod_l+0x59c>
 80086ba:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80086be:	2300      	movs	r3, #0
 80086c0:	9305      	str	r3, [sp, #20]
 80086c2:	e07f      	b.n	80087c4 <_strtod_l+0x614>
 80086c4:	07f2      	lsls	r2, r6, #31
 80086c6:	d505      	bpl.n	80086d4 <_strtod_l+0x524>
 80086c8:	9b05      	ldr	r3, [sp, #20]
 80086ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ce:	f7f7 ff0d 	bl	80004ec <__aeabi_dmul>
 80086d2:	2301      	movs	r3, #1
 80086d4:	9a05      	ldr	r2, [sp, #20]
 80086d6:	3701      	adds	r7, #1
 80086d8:	3208      	adds	r2, #8
 80086da:	1076      	asrs	r6, r6, #1
 80086dc:	9205      	str	r2, [sp, #20]
 80086de:	e7cd      	b.n	800867c <_strtod_l+0x4cc>
 80086e0:	d0ed      	beq.n	80086be <_strtod_l+0x50e>
 80086e2:	4276      	negs	r6, r6
 80086e4:	f016 020f 	ands.w	r2, r6, #15
 80086e8:	d00a      	beq.n	8008700 <_strtod_l+0x550>
 80086ea:	4b15      	ldr	r3, [pc, #84]	; (8008740 <_strtod_l+0x590>)
 80086ec:	4640      	mov	r0, r8
 80086ee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80086f2:	4649      	mov	r1, r9
 80086f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086f8:	f7f8 f822 	bl	8000740 <__aeabi_ddiv>
 80086fc:	4680      	mov	r8, r0
 80086fe:	4689      	mov	r9, r1
 8008700:	1136      	asrs	r6, r6, #4
 8008702:	d0dc      	beq.n	80086be <_strtod_l+0x50e>
 8008704:	2e1f      	cmp	r6, #31
 8008706:	dd23      	ble.n	8008750 <_strtod_l+0x5a0>
 8008708:	f04f 0b00 	mov.w	fp, #0
 800870c:	f8cd b010 	str.w	fp, [sp, #16]
 8008710:	f8cd b020 	str.w	fp, [sp, #32]
 8008714:	f8cd b018 	str.w	fp, [sp, #24]
 8008718:	2322      	movs	r3, #34	; 0x22
 800871a:	f04f 0800 	mov.w	r8, #0
 800871e:	f04f 0900 	mov.w	r9, #0
 8008722:	f8ca 3000 	str.w	r3, [sl]
 8008726:	e789      	b.n	800863c <_strtod_l+0x48c>
 8008728:	0800c669 	.word	0x0800c669
 800872c:	0800c6ac 	.word	0x0800c6ac
 8008730:	0800c661 	.word	0x0800c661
 8008734:	0800c7ec 	.word	0x0800c7ec
 8008738:	7ff00000 	.word	0x7ff00000
 800873c:	0800ca98 	.word	0x0800ca98
 8008740:	0800c978 	.word	0x0800c978
 8008744:	0800c950 	.word	0x0800c950
 8008748:	7ca00000 	.word	0x7ca00000
 800874c:	7fefffff 	.word	0x7fefffff
 8008750:	f016 0310 	ands.w	r3, r6, #16
 8008754:	bf18      	it	ne
 8008756:	236a      	movne	r3, #106	; 0x6a
 8008758:	4640      	mov	r0, r8
 800875a:	9305      	str	r3, [sp, #20]
 800875c:	4649      	mov	r1, r9
 800875e:	2300      	movs	r3, #0
 8008760:	4fb0      	ldr	r7, [pc, #704]	; (8008a24 <_strtod_l+0x874>)
 8008762:	07f2      	lsls	r2, r6, #31
 8008764:	d504      	bpl.n	8008770 <_strtod_l+0x5c0>
 8008766:	e9d7 2300 	ldrd	r2, r3, [r7]
 800876a:	f7f7 febf 	bl	80004ec <__aeabi_dmul>
 800876e:	2301      	movs	r3, #1
 8008770:	1076      	asrs	r6, r6, #1
 8008772:	f107 0708 	add.w	r7, r7, #8
 8008776:	d1f4      	bne.n	8008762 <_strtod_l+0x5b2>
 8008778:	b10b      	cbz	r3, 800877e <_strtod_l+0x5ce>
 800877a:	4680      	mov	r8, r0
 800877c:	4689      	mov	r9, r1
 800877e:	9b05      	ldr	r3, [sp, #20]
 8008780:	b1c3      	cbz	r3, 80087b4 <_strtod_l+0x604>
 8008782:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8008786:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800878a:	2b00      	cmp	r3, #0
 800878c:	4649      	mov	r1, r9
 800878e:	dd11      	ble.n	80087b4 <_strtod_l+0x604>
 8008790:	2b1f      	cmp	r3, #31
 8008792:	f340 8127 	ble.w	80089e4 <_strtod_l+0x834>
 8008796:	2b34      	cmp	r3, #52	; 0x34
 8008798:	bfd8      	it	le
 800879a:	f04f 33ff 	movle.w	r3, #4294967295
 800879e:	f04f 0800 	mov.w	r8, #0
 80087a2:	bfcf      	iteee	gt
 80087a4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80087a8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80087ac:	fa03 f202 	lslle.w	r2, r3, r2
 80087b0:	ea02 0901 	andle.w	r9, r2, r1
 80087b4:	2200      	movs	r2, #0
 80087b6:	2300      	movs	r3, #0
 80087b8:	4640      	mov	r0, r8
 80087ba:	4649      	mov	r1, r9
 80087bc:	f7f8 f8fe 	bl	80009bc <__aeabi_dcmpeq>
 80087c0:	2800      	cmp	r0, #0
 80087c2:	d1a1      	bne.n	8008708 <_strtod_l+0x558>
 80087c4:	9b06      	ldr	r3, [sp, #24]
 80087c6:	465a      	mov	r2, fp
 80087c8:	9300      	str	r3, [sp, #0]
 80087ca:	4650      	mov	r0, sl
 80087cc:	4623      	mov	r3, r4
 80087ce:	9908      	ldr	r1, [sp, #32]
 80087d0:	f001 fe26 	bl	800a420 <__s2b>
 80087d4:	9008      	str	r0, [sp, #32]
 80087d6:	2800      	cmp	r0, #0
 80087d8:	f43f af21 	beq.w	800861e <_strtod_l+0x46e>
 80087dc:	9b04      	ldr	r3, [sp, #16]
 80087de:	f04f 0b00 	mov.w	fp, #0
 80087e2:	1b5d      	subs	r5, r3, r5
 80087e4:	9b07      	ldr	r3, [sp, #28]
 80087e6:	f8cd b010 	str.w	fp, [sp, #16]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	bfb4      	ite	lt
 80087ee:	462b      	movlt	r3, r5
 80087f0:	2300      	movge	r3, #0
 80087f2:	930e      	str	r3, [sp, #56]	; 0x38
 80087f4:	9b07      	ldr	r3, [sp, #28]
 80087f6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80087fa:	9314      	str	r3, [sp, #80]	; 0x50
 80087fc:	9b08      	ldr	r3, [sp, #32]
 80087fe:	4650      	mov	r0, sl
 8008800:	6859      	ldr	r1, [r3, #4]
 8008802:	f001 fd65 	bl	800a2d0 <_Balloc>
 8008806:	9006      	str	r0, [sp, #24]
 8008808:	2800      	cmp	r0, #0
 800880a:	f43f af10 	beq.w	800862e <_strtod_l+0x47e>
 800880e:	9b08      	ldr	r3, [sp, #32]
 8008810:	300c      	adds	r0, #12
 8008812:	691a      	ldr	r2, [r3, #16]
 8008814:	f103 010c 	add.w	r1, r3, #12
 8008818:	3202      	adds	r2, #2
 800881a:	0092      	lsls	r2, r2, #2
 800881c:	f7fe fdcc 	bl	80073b8 <memcpy>
 8008820:	ab1c      	add	r3, sp, #112	; 0x70
 8008822:	9301      	str	r3, [sp, #4]
 8008824:	ab1b      	add	r3, sp, #108	; 0x6c
 8008826:	9300      	str	r3, [sp, #0]
 8008828:	4642      	mov	r2, r8
 800882a:	464b      	mov	r3, r9
 800882c:	4650      	mov	r0, sl
 800882e:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8008832:	f002 f937 	bl	800aaa4 <__d2b>
 8008836:	901a      	str	r0, [sp, #104]	; 0x68
 8008838:	2800      	cmp	r0, #0
 800883a:	f43f aef8 	beq.w	800862e <_strtod_l+0x47e>
 800883e:	2101      	movs	r1, #1
 8008840:	4650      	mov	r0, sl
 8008842:	f001 fe85 	bl	800a550 <__i2b>
 8008846:	4603      	mov	r3, r0
 8008848:	9004      	str	r0, [sp, #16]
 800884a:	2800      	cmp	r0, #0
 800884c:	f43f aeef 	beq.w	800862e <_strtod_l+0x47e>
 8008850:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8008852:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008854:	2d00      	cmp	r5, #0
 8008856:	bfab      	itete	ge
 8008858:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800885a:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 800885c:	18ee      	addge	r6, r5, r3
 800885e:	1b5c      	sublt	r4, r3, r5
 8008860:	9b05      	ldr	r3, [sp, #20]
 8008862:	bfa8      	it	ge
 8008864:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 8008866:	eba5 0503 	sub.w	r5, r5, r3
 800886a:	4415      	add	r5, r2
 800886c:	4b6e      	ldr	r3, [pc, #440]	; (8008a28 <_strtod_l+0x878>)
 800886e:	f105 35ff 	add.w	r5, r5, #4294967295
 8008872:	bfb8      	it	lt
 8008874:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8008876:	429d      	cmp	r5, r3
 8008878:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800887c:	f280 80c4 	bge.w	8008a08 <_strtod_l+0x858>
 8008880:	1b5b      	subs	r3, r3, r5
 8008882:	2b1f      	cmp	r3, #31
 8008884:	f04f 0701 	mov.w	r7, #1
 8008888:	eba2 0203 	sub.w	r2, r2, r3
 800888c:	f300 80b1 	bgt.w	80089f2 <_strtod_l+0x842>
 8008890:	2500      	movs	r5, #0
 8008892:	fa07 f303 	lsl.w	r3, r7, r3
 8008896:	930f      	str	r3, [sp, #60]	; 0x3c
 8008898:	18b7      	adds	r7, r6, r2
 800889a:	9b05      	ldr	r3, [sp, #20]
 800889c:	42be      	cmp	r6, r7
 800889e:	4414      	add	r4, r2
 80088a0:	441c      	add	r4, r3
 80088a2:	4633      	mov	r3, r6
 80088a4:	bfa8      	it	ge
 80088a6:	463b      	movge	r3, r7
 80088a8:	42a3      	cmp	r3, r4
 80088aa:	bfa8      	it	ge
 80088ac:	4623      	movge	r3, r4
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	bfc2      	ittt	gt
 80088b2:	1aff      	subgt	r7, r7, r3
 80088b4:	1ae4      	subgt	r4, r4, r3
 80088b6:	1af6      	subgt	r6, r6, r3
 80088b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	dd17      	ble.n	80088ee <_strtod_l+0x73e>
 80088be:	461a      	mov	r2, r3
 80088c0:	4650      	mov	r0, sl
 80088c2:	9904      	ldr	r1, [sp, #16]
 80088c4:	f001 ff02 	bl	800a6cc <__pow5mult>
 80088c8:	9004      	str	r0, [sp, #16]
 80088ca:	2800      	cmp	r0, #0
 80088cc:	f43f aeaf 	beq.w	800862e <_strtod_l+0x47e>
 80088d0:	4601      	mov	r1, r0
 80088d2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80088d4:	4650      	mov	r0, sl
 80088d6:	f001 fe51 	bl	800a57c <__multiply>
 80088da:	9009      	str	r0, [sp, #36]	; 0x24
 80088dc:	2800      	cmp	r0, #0
 80088de:	f43f aea6 	beq.w	800862e <_strtod_l+0x47e>
 80088e2:	4650      	mov	r0, sl
 80088e4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80088e6:	f001 fd33 	bl	800a350 <_Bfree>
 80088ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088ec:	931a      	str	r3, [sp, #104]	; 0x68
 80088ee:	2f00      	cmp	r7, #0
 80088f0:	f300 808e 	bgt.w	8008a10 <_strtod_l+0x860>
 80088f4:	9b07      	ldr	r3, [sp, #28]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	dd08      	ble.n	800890c <_strtod_l+0x75c>
 80088fa:	4650      	mov	r0, sl
 80088fc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80088fe:	9906      	ldr	r1, [sp, #24]
 8008900:	f001 fee4 	bl	800a6cc <__pow5mult>
 8008904:	9006      	str	r0, [sp, #24]
 8008906:	2800      	cmp	r0, #0
 8008908:	f43f ae91 	beq.w	800862e <_strtod_l+0x47e>
 800890c:	2c00      	cmp	r4, #0
 800890e:	dd08      	ble.n	8008922 <_strtod_l+0x772>
 8008910:	4622      	mov	r2, r4
 8008912:	4650      	mov	r0, sl
 8008914:	9906      	ldr	r1, [sp, #24]
 8008916:	f001 ff33 	bl	800a780 <__lshift>
 800891a:	9006      	str	r0, [sp, #24]
 800891c:	2800      	cmp	r0, #0
 800891e:	f43f ae86 	beq.w	800862e <_strtod_l+0x47e>
 8008922:	2e00      	cmp	r6, #0
 8008924:	dd08      	ble.n	8008938 <_strtod_l+0x788>
 8008926:	4632      	mov	r2, r6
 8008928:	4650      	mov	r0, sl
 800892a:	9904      	ldr	r1, [sp, #16]
 800892c:	f001 ff28 	bl	800a780 <__lshift>
 8008930:	9004      	str	r0, [sp, #16]
 8008932:	2800      	cmp	r0, #0
 8008934:	f43f ae7b 	beq.w	800862e <_strtod_l+0x47e>
 8008938:	4650      	mov	r0, sl
 800893a:	9a06      	ldr	r2, [sp, #24]
 800893c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800893e:	f001 ffab 	bl	800a898 <__mdiff>
 8008942:	4683      	mov	fp, r0
 8008944:	2800      	cmp	r0, #0
 8008946:	f43f ae72 	beq.w	800862e <_strtod_l+0x47e>
 800894a:	2400      	movs	r4, #0
 800894c:	68c3      	ldr	r3, [r0, #12]
 800894e:	9904      	ldr	r1, [sp, #16]
 8008950:	60c4      	str	r4, [r0, #12]
 8008952:	930b      	str	r3, [sp, #44]	; 0x2c
 8008954:	f001 ff84 	bl	800a860 <__mcmp>
 8008958:	42a0      	cmp	r0, r4
 800895a:	da6b      	bge.n	8008a34 <_strtod_l+0x884>
 800895c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800895e:	ea53 0308 	orrs.w	r3, r3, r8
 8008962:	f040 8091 	bne.w	8008a88 <_strtod_l+0x8d8>
 8008966:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800896a:	2b00      	cmp	r3, #0
 800896c:	f040 808c 	bne.w	8008a88 <_strtod_l+0x8d8>
 8008970:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008974:	0d1b      	lsrs	r3, r3, #20
 8008976:	051b      	lsls	r3, r3, #20
 8008978:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800897c:	f240 8084 	bls.w	8008a88 <_strtod_l+0x8d8>
 8008980:	f8db 3014 	ldr.w	r3, [fp, #20]
 8008984:	b91b      	cbnz	r3, 800898e <_strtod_l+0x7de>
 8008986:	f8db 3010 	ldr.w	r3, [fp, #16]
 800898a:	2b01      	cmp	r3, #1
 800898c:	dd7c      	ble.n	8008a88 <_strtod_l+0x8d8>
 800898e:	4659      	mov	r1, fp
 8008990:	2201      	movs	r2, #1
 8008992:	4650      	mov	r0, sl
 8008994:	f001 fef4 	bl	800a780 <__lshift>
 8008998:	9904      	ldr	r1, [sp, #16]
 800899a:	4683      	mov	fp, r0
 800899c:	f001 ff60 	bl	800a860 <__mcmp>
 80089a0:	2800      	cmp	r0, #0
 80089a2:	dd71      	ble.n	8008a88 <_strtod_l+0x8d8>
 80089a4:	9905      	ldr	r1, [sp, #20]
 80089a6:	464b      	mov	r3, r9
 80089a8:	4a20      	ldr	r2, [pc, #128]	; (8008a2c <_strtod_l+0x87c>)
 80089aa:	2900      	cmp	r1, #0
 80089ac:	f000 808c 	beq.w	8008ac8 <_strtod_l+0x918>
 80089b0:	ea02 0109 	and.w	r1, r2, r9
 80089b4:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80089b8:	f300 8086 	bgt.w	8008ac8 <_strtod_l+0x918>
 80089bc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80089c0:	f77f aeaa 	ble.w	8008718 <_strtod_l+0x568>
 80089c4:	4640      	mov	r0, r8
 80089c6:	4649      	mov	r1, r9
 80089c8:	4b19      	ldr	r3, [pc, #100]	; (8008a30 <_strtod_l+0x880>)
 80089ca:	2200      	movs	r2, #0
 80089cc:	f7f7 fd8e 	bl	80004ec <__aeabi_dmul>
 80089d0:	460b      	mov	r3, r1
 80089d2:	4303      	orrs	r3, r0
 80089d4:	bf08      	it	eq
 80089d6:	2322      	moveq	r3, #34	; 0x22
 80089d8:	4680      	mov	r8, r0
 80089da:	4689      	mov	r9, r1
 80089dc:	bf08      	it	eq
 80089de:	f8ca 3000 	streq.w	r3, [sl]
 80089e2:	e62f      	b.n	8008644 <_strtod_l+0x494>
 80089e4:	f04f 32ff 	mov.w	r2, #4294967295
 80089e8:	fa02 f303 	lsl.w	r3, r2, r3
 80089ec:	ea03 0808 	and.w	r8, r3, r8
 80089f0:	e6e0      	b.n	80087b4 <_strtod_l+0x604>
 80089f2:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 80089f6:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 80089fa:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 80089fe:	35e2      	adds	r5, #226	; 0xe2
 8008a00:	fa07 f505 	lsl.w	r5, r7, r5
 8008a04:	970f      	str	r7, [sp, #60]	; 0x3c
 8008a06:	e747      	b.n	8008898 <_strtod_l+0x6e8>
 8008a08:	2301      	movs	r3, #1
 8008a0a:	2500      	movs	r5, #0
 8008a0c:	930f      	str	r3, [sp, #60]	; 0x3c
 8008a0e:	e743      	b.n	8008898 <_strtod_l+0x6e8>
 8008a10:	463a      	mov	r2, r7
 8008a12:	4650      	mov	r0, sl
 8008a14:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008a16:	f001 feb3 	bl	800a780 <__lshift>
 8008a1a:	901a      	str	r0, [sp, #104]	; 0x68
 8008a1c:	2800      	cmp	r0, #0
 8008a1e:	f47f af69 	bne.w	80088f4 <_strtod_l+0x744>
 8008a22:	e604      	b.n	800862e <_strtod_l+0x47e>
 8008a24:	0800c6c0 	.word	0x0800c6c0
 8008a28:	fffffc02 	.word	0xfffffc02
 8008a2c:	7ff00000 	.word	0x7ff00000
 8008a30:	39500000 	.word	0x39500000
 8008a34:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8008a38:	d165      	bne.n	8008b06 <_strtod_l+0x956>
 8008a3a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008a3c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008a40:	b35a      	cbz	r2, 8008a9a <_strtod_l+0x8ea>
 8008a42:	4a99      	ldr	r2, [pc, #612]	; (8008ca8 <_strtod_l+0xaf8>)
 8008a44:	4293      	cmp	r3, r2
 8008a46:	d12b      	bne.n	8008aa0 <_strtod_l+0x8f0>
 8008a48:	9b05      	ldr	r3, [sp, #20]
 8008a4a:	4641      	mov	r1, r8
 8008a4c:	b303      	cbz	r3, 8008a90 <_strtod_l+0x8e0>
 8008a4e:	464a      	mov	r2, r9
 8008a50:	4b96      	ldr	r3, [pc, #600]	; (8008cac <_strtod_l+0xafc>)
 8008a52:	4013      	ands	r3, r2
 8008a54:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008a58:	f04f 32ff 	mov.w	r2, #4294967295
 8008a5c:	d81b      	bhi.n	8008a96 <_strtod_l+0x8e6>
 8008a5e:	0d1b      	lsrs	r3, r3, #20
 8008a60:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008a64:	fa02 f303 	lsl.w	r3, r2, r3
 8008a68:	4299      	cmp	r1, r3
 8008a6a:	d119      	bne.n	8008aa0 <_strtod_l+0x8f0>
 8008a6c:	4b90      	ldr	r3, [pc, #576]	; (8008cb0 <_strtod_l+0xb00>)
 8008a6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008a70:	429a      	cmp	r2, r3
 8008a72:	d102      	bne.n	8008a7a <_strtod_l+0x8ca>
 8008a74:	3101      	adds	r1, #1
 8008a76:	f43f adda 	beq.w	800862e <_strtod_l+0x47e>
 8008a7a:	f04f 0800 	mov.w	r8, #0
 8008a7e:	4b8b      	ldr	r3, [pc, #556]	; (8008cac <_strtod_l+0xafc>)
 8008a80:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008a82:	401a      	ands	r2, r3
 8008a84:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8008a88:	9b05      	ldr	r3, [sp, #20]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d19a      	bne.n	80089c4 <_strtod_l+0x814>
 8008a8e:	e5d9      	b.n	8008644 <_strtod_l+0x494>
 8008a90:	f04f 33ff 	mov.w	r3, #4294967295
 8008a94:	e7e8      	b.n	8008a68 <_strtod_l+0x8b8>
 8008a96:	4613      	mov	r3, r2
 8008a98:	e7e6      	b.n	8008a68 <_strtod_l+0x8b8>
 8008a9a:	ea53 0308 	orrs.w	r3, r3, r8
 8008a9e:	d081      	beq.n	80089a4 <_strtod_l+0x7f4>
 8008aa0:	b1e5      	cbz	r5, 8008adc <_strtod_l+0x92c>
 8008aa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008aa4:	421d      	tst	r5, r3
 8008aa6:	d0ef      	beq.n	8008a88 <_strtod_l+0x8d8>
 8008aa8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008aaa:	4640      	mov	r0, r8
 8008aac:	4649      	mov	r1, r9
 8008aae:	9a05      	ldr	r2, [sp, #20]
 8008ab0:	b1c3      	cbz	r3, 8008ae4 <_strtod_l+0x934>
 8008ab2:	f7ff fb5b 	bl	800816c <sulp>
 8008ab6:	4602      	mov	r2, r0
 8008ab8:	460b      	mov	r3, r1
 8008aba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008abe:	f7f7 fb5f 	bl	8000180 <__adddf3>
 8008ac2:	4680      	mov	r8, r0
 8008ac4:	4689      	mov	r9, r1
 8008ac6:	e7df      	b.n	8008a88 <_strtod_l+0x8d8>
 8008ac8:	4013      	ands	r3, r2
 8008aca:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008ace:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8008ad2:	f04f 38ff 	mov.w	r8, #4294967295
 8008ad6:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8008ada:	e7d5      	b.n	8008a88 <_strtod_l+0x8d8>
 8008adc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008ade:	ea13 0f08 	tst.w	r3, r8
 8008ae2:	e7e0      	b.n	8008aa6 <_strtod_l+0x8f6>
 8008ae4:	f7ff fb42 	bl	800816c <sulp>
 8008ae8:	4602      	mov	r2, r0
 8008aea:	460b      	mov	r3, r1
 8008aec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008af0:	f7f7 fb44 	bl	800017c <__aeabi_dsub>
 8008af4:	2200      	movs	r2, #0
 8008af6:	2300      	movs	r3, #0
 8008af8:	4680      	mov	r8, r0
 8008afa:	4689      	mov	r9, r1
 8008afc:	f7f7 ff5e 	bl	80009bc <__aeabi_dcmpeq>
 8008b00:	2800      	cmp	r0, #0
 8008b02:	d0c1      	beq.n	8008a88 <_strtod_l+0x8d8>
 8008b04:	e608      	b.n	8008718 <_strtod_l+0x568>
 8008b06:	4658      	mov	r0, fp
 8008b08:	9904      	ldr	r1, [sp, #16]
 8008b0a:	f002 f827 	bl	800ab5c <__ratio>
 8008b0e:	2200      	movs	r2, #0
 8008b10:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008b14:	4606      	mov	r6, r0
 8008b16:	460f      	mov	r7, r1
 8008b18:	f7f7 ff64 	bl	80009e4 <__aeabi_dcmple>
 8008b1c:	2800      	cmp	r0, #0
 8008b1e:	d070      	beq.n	8008c02 <_strtod_l+0xa52>
 8008b20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d042      	beq.n	8008bac <_strtod_l+0x9fc>
 8008b26:	2600      	movs	r6, #0
 8008b28:	4f62      	ldr	r7, [pc, #392]	; (8008cb4 <_strtod_l+0xb04>)
 8008b2a:	4d62      	ldr	r5, [pc, #392]	; (8008cb4 <_strtod_l+0xb04>)
 8008b2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b2e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008b32:	0d1b      	lsrs	r3, r3, #20
 8008b34:	051b      	lsls	r3, r3, #20
 8008b36:	930f      	str	r3, [sp, #60]	; 0x3c
 8008b38:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008b3a:	4b5f      	ldr	r3, [pc, #380]	; (8008cb8 <_strtod_l+0xb08>)
 8008b3c:	429a      	cmp	r2, r3
 8008b3e:	f040 80c3 	bne.w	8008cc8 <_strtod_l+0xb18>
 8008b42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b44:	4640      	mov	r0, r8
 8008b46:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8008b4a:	4649      	mov	r1, r9
 8008b4c:	f001 ff30 	bl	800a9b0 <__ulp>
 8008b50:	4602      	mov	r2, r0
 8008b52:	460b      	mov	r3, r1
 8008b54:	4630      	mov	r0, r6
 8008b56:	4639      	mov	r1, r7
 8008b58:	f7f7 fcc8 	bl	80004ec <__aeabi_dmul>
 8008b5c:	4642      	mov	r2, r8
 8008b5e:	464b      	mov	r3, r9
 8008b60:	f7f7 fb0e 	bl	8000180 <__adddf3>
 8008b64:	460b      	mov	r3, r1
 8008b66:	4951      	ldr	r1, [pc, #324]	; (8008cac <_strtod_l+0xafc>)
 8008b68:	4a54      	ldr	r2, [pc, #336]	; (8008cbc <_strtod_l+0xb0c>)
 8008b6a:	4019      	ands	r1, r3
 8008b6c:	4291      	cmp	r1, r2
 8008b6e:	4680      	mov	r8, r0
 8008b70:	d95d      	bls.n	8008c2e <_strtod_l+0xa7e>
 8008b72:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008b74:	4b4e      	ldr	r3, [pc, #312]	; (8008cb0 <_strtod_l+0xb00>)
 8008b76:	429a      	cmp	r2, r3
 8008b78:	d103      	bne.n	8008b82 <_strtod_l+0x9d2>
 8008b7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008b7c:	3301      	adds	r3, #1
 8008b7e:	f43f ad56 	beq.w	800862e <_strtod_l+0x47e>
 8008b82:	f04f 38ff 	mov.w	r8, #4294967295
 8008b86:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8008cb0 <_strtod_l+0xb00>
 8008b8a:	4650      	mov	r0, sl
 8008b8c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008b8e:	f001 fbdf 	bl	800a350 <_Bfree>
 8008b92:	4650      	mov	r0, sl
 8008b94:	9906      	ldr	r1, [sp, #24]
 8008b96:	f001 fbdb 	bl	800a350 <_Bfree>
 8008b9a:	4650      	mov	r0, sl
 8008b9c:	9904      	ldr	r1, [sp, #16]
 8008b9e:	f001 fbd7 	bl	800a350 <_Bfree>
 8008ba2:	4659      	mov	r1, fp
 8008ba4:	4650      	mov	r0, sl
 8008ba6:	f001 fbd3 	bl	800a350 <_Bfree>
 8008baa:	e627      	b.n	80087fc <_strtod_l+0x64c>
 8008bac:	f1b8 0f00 	cmp.w	r8, #0
 8008bb0:	d119      	bne.n	8008be6 <_strtod_l+0xa36>
 8008bb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bb4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008bb8:	b9e3      	cbnz	r3, 8008bf4 <_strtod_l+0xa44>
 8008bba:	2200      	movs	r2, #0
 8008bbc:	4630      	mov	r0, r6
 8008bbe:	4639      	mov	r1, r7
 8008bc0:	4b3c      	ldr	r3, [pc, #240]	; (8008cb4 <_strtod_l+0xb04>)
 8008bc2:	f7f7 ff05 	bl	80009d0 <__aeabi_dcmplt>
 8008bc6:	b9c8      	cbnz	r0, 8008bfc <_strtod_l+0xa4c>
 8008bc8:	2200      	movs	r2, #0
 8008bca:	4630      	mov	r0, r6
 8008bcc:	4639      	mov	r1, r7
 8008bce:	4b3c      	ldr	r3, [pc, #240]	; (8008cc0 <_strtod_l+0xb10>)
 8008bd0:	f7f7 fc8c 	bl	80004ec <__aeabi_dmul>
 8008bd4:	4604      	mov	r4, r0
 8008bd6:	460d      	mov	r5, r1
 8008bd8:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8008bdc:	9416      	str	r4, [sp, #88]	; 0x58
 8008bde:	9317      	str	r3, [sp, #92]	; 0x5c
 8008be0:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 8008be4:	e7a2      	b.n	8008b2c <_strtod_l+0x97c>
 8008be6:	f1b8 0f01 	cmp.w	r8, #1
 8008bea:	d103      	bne.n	8008bf4 <_strtod_l+0xa44>
 8008bec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	f43f ad92 	beq.w	8008718 <_strtod_l+0x568>
 8008bf4:	2600      	movs	r6, #0
 8008bf6:	2400      	movs	r4, #0
 8008bf8:	4f32      	ldr	r7, [pc, #200]	; (8008cc4 <_strtod_l+0xb14>)
 8008bfa:	e796      	b.n	8008b2a <_strtod_l+0x97a>
 8008bfc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8008bfe:	4d30      	ldr	r5, [pc, #192]	; (8008cc0 <_strtod_l+0xb10>)
 8008c00:	e7ea      	b.n	8008bd8 <_strtod_l+0xa28>
 8008c02:	4b2f      	ldr	r3, [pc, #188]	; (8008cc0 <_strtod_l+0xb10>)
 8008c04:	2200      	movs	r2, #0
 8008c06:	4630      	mov	r0, r6
 8008c08:	4639      	mov	r1, r7
 8008c0a:	f7f7 fc6f 	bl	80004ec <__aeabi_dmul>
 8008c0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c10:	4604      	mov	r4, r0
 8008c12:	460d      	mov	r5, r1
 8008c14:	b933      	cbnz	r3, 8008c24 <_strtod_l+0xa74>
 8008c16:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008c1a:	9010      	str	r0, [sp, #64]	; 0x40
 8008c1c:	9311      	str	r3, [sp, #68]	; 0x44
 8008c1e:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8008c22:	e783      	b.n	8008b2c <_strtod_l+0x97c>
 8008c24:	4602      	mov	r2, r0
 8008c26:	460b      	mov	r3, r1
 8008c28:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8008c2c:	e7f7      	b.n	8008c1e <_strtod_l+0xa6e>
 8008c2e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8008c32:	9b05      	ldr	r3, [sp, #20]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d1a8      	bne.n	8008b8a <_strtod_l+0x9da>
 8008c38:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008c3c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008c3e:	0d1b      	lsrs	r3, r3, #20
 8008c40:	051b      	lsls	r3, r3, #20
 8008c42:	429a      	cmp	r2, r3
 8008c44:	d1a1      	bne.n	8008b8a <_strtod_l+0x9da>
 8008c46:	4620      	mov	r0, r4
 8008c48:	4629      	mov	r1, r5
 8008c4a:	f7f8 fa6b 	bl	8001124 <__aeabi_d2lz>
 8008c4e:	f7f7 fc1f 	bl	8000490 <__aeabi_l2d>
 8008c52:	4602      	mov	r2, r0
 8008c54:	460b      	mov	r3, r1
 8008c56:	4620      	mov	r0, r4
 8008c58:	4629      	mov	r1, r5
 8008c5a:	f7f7 fa8f 	bl	800017c <__aeabi_dsub>
 8008c5e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008c60:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008c64:	ea43 0308 	orr.w	r3, r3, r8
 8008c68:	4313      	orrs	r3, r2
 8008c6a:	4604      	mov	r4, r0
 8008c6c:	460d      	mov	r5, r1
 8008c6e:	d066      	beq.n	8008d3e <_strtod_l+0xb8e>
 8008c70:	a309      	add	r3, pc, #36	; (adr r3, 8008c98 <_strtod_l+0xae8>)
 8008c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c76:	f7f7 feab 	bl	80009d0 <__aeabi_dcmplt>
 8008c7a:	2800      	cmp	r0, #0
 8008c7c:	f47f ace2 	bne.w	8008644 <_strtod_l+0x494>
 8008c80:	a307      	add	r3, pc, #28	; (adr r3, 8008ca0 <_strtod_l+0xaf0>)
 8008c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c86:	4620      	mov	r0, r4
 8008c88:	4629      	mov	r1, r5
 8008c8a:	f7f7 febf 	bl	8000a0c <__aeabi_dcmpgt>
 8008c8e:	2800      	cmp	r0, #0
 8008c90:	f43f af7b 	beq.w	8008b8a <_strtod_l+0x9da>
 8008c94:	e4d6      	b.n	8008644 <_strtod_l+0x494>
 8008c96:	bf00      	nop
 8008c98:	94a03595 	.word	0x94a03595
 8008c9c:	3fdfffff 	.word	0x3fdfffff
 8008ca0:	35afe535 	.word	0x35afe535
 8008ca4:	3fe00000 	.word	0x3fe00000
 8008ca8:	000fffff 	.word	0x000fffff
 8008cac:	7ff00000 	.word	0x7ff00000
 8008cb0:	7fefffff 	.word	0x7fefffff
 8008cb4:	3ff00000 	.word	0x3ff00000
 8008cb8:	7fe00000 	.word	0x7fe00000
 8008cbc:	7c9fffff 	.word	0x7c9fffff
 8008cc0:	3fe00000 	.word	0x3fe00000
 8008cc4:	bff00000 	.word	0xbff00000
 8008cc8:	9b05      	ldr	r3, [sp, #20]
 8008cca:	b313      	cbz	r3, 8008d12 <_strtod_l+0xb62>
 8008ccc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008cce:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008cd2:	d81e      	bhi.n	8008d12 <_strtod_l+0xb62>
 8008cd4:	a326      	add	r3, pc, #152	; (adr r3, 8008d70 <_strtod_l+0xbc0>)
 8008cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cda:	4620      	mov	r0, r4
 8008cdc:	4629      	mov	r1, r5
 8008cde:	f7f7 fe81 	bl	80009e4 <__aeabi_dcmple>
 8008ce2:	b190      	cbz	r0, 8008d0a <_strtod_l+0xb5a>
 8008ce4:	4629      	mov	r1, r5
 8008ce6:	4620      	mov	r0, r4
 8008ce8:	f7f7 fed8 	bl	8000a9c <__aeabi_d2uiz>
 8008cec:	2801      	cmp	r0, #1
 8008cee:	bf38      	it	cc
 8008cf0:	2001      	movcc	r0, #1
 8008cf2:	f7f7 fb81 	bl	80003f8 <__aeabi_ui2d>
 8008cf6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008cf8:	4604      	mov	r4, r0
 8008cfa:	460d      	mov	r5, r1
 8008cfc:	b9d3      	cbnz	r3, 8008d34 <_strtod_l+0xb84>
 8008cfe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008d02:	9012      	str	r0, [sp, #72]	; 0x48
 8008d04:	9313      	str	r3, [sp, #76]	; 0x4c
 8008d06:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8008d0a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008d0c:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8008d10:	1a9f      	subs	r7, r3, r2
 8008d12:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008d16:	f001 fe4b 	bl	800a9b0 <__ulp>
 8008d1a:	4602      	mov	r2, r0
 8008d1c:	460b      	mov	r3, r1
 8008d1e:	4630      	mov	r0, r6
 8008d20:	4639      	mov	r1, r7
 8008d22:	f7f7 fbe3 	bl	80004ec <__aeabi_dmul>
 8008d26:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008d2a:	f7f7 fa29 	bl	8000180 <__adddf3>
 8008d2e:	4680      	mov	r8, r0
 8008d30:	4689      	mov	r9, r1
 8008d32:	e77e      	b.n	8008c32 <_strtod_l+0xa82>
 8008d34:	4602      	mov	r2, r0
 8008d36:	460b      	mov	r3, r1
 8008d38:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8008d3c:	e7e3      	b.n	8008d06 <_strtod_l+0xb56>
 8008d3e:	a30e      	add	r3, pc, #56	; (adr r3, 8008d78 <_strtod_l+0xbc8>)
 8008d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d44:	f7f7 fe44 	bl	80009d0 <__aeabi_dcmplt>
 8008d48:	e7a1      	b.n	8008c8e <_strtod_l+0xade>
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	930a      	str	r3, [sp, #40]	; 0x28
 8008d4e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008d50:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008d52:	6013      	str	r3, [r2, #0]
 8008d54:	f7ff ba71 	b.w	800823a <_strtod_l+0x8a>
 8008d58:	2a65      	cmp	r2, #101	; 0x65
 8008d5a:	f43f ab63 	beq.w	8008424 <_strtod_l+0x274>
 8008d5e:	2a45      	cmp	r2, #69	; 0x45
 8008d60:	f43f ab60 	beq.w	8008424 <_strtod_l+0x274>
 8008d64:	2301      	movs	r3, #1
 8008d66:	f7ff bb95 	b.w	8008494 <_strtod_l+0x2e4>
 8008d6a:	bf00      	nop
 8008d6c:	f3af 8000 	nop.w
 8008d70:	ffc00000 	.word	0xffc00000
 8008d74:	41dfffff 	.word	0x41dfffff
 8008d78:	94a03595 	.word	0x94a03595
 8008d7c:	3fcfffff 	.word	0x3fcfffff

08008d80 <_strtod_r>:
 8008d80:	4b01      	ldr	r3, [pc, #4]	; (8008d88 <_strtod_r+0x8>)
 8008d82:	f7ff ba15 	b.w	80081b0 <_strtod_l>
 8008d86:	bf00      	nop
 8008d88:	20000080 	.word	0x20000080

08008d8c <strtod>:
 8008d8c:	460a      	mov	r2, r1
 8008d8e:	4601      	mov	r1, r0
 8008d90:	4802      	ldr	r0, [pc, #8]	; (8008d9c <strtod+0x10>)
 8008d92:	4b03      	ldr	r3, [pc, #12]	; (8008da0 <strtod+0x14>)
 8008d94:	6800      	ldr	r0, [r0, #0]
 8008d96:	f7ff ba0b 	b.w	80081b0 <_strtod_l>
 8008d9a:	bf00      	nop
 8008d9c:	20000018 	.word	0x20000018
 8008da0:	20000080 	.word	0x20000080

08008da4 <_strtol_l.constprop.0>:
 8008da4:	2b01      	cmp	r3, #1
 8008da6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008daa:	4680      	mov	r8, r0
 8008dac:	d001      	beq.n	8008db2 <_strtol_l.constprop.0+0xe>
 8008dae:	2b24      	cmp	r3, #36	; 0x24
 8008db0:	d906      	bls.n	8008dc0 <_strtol_l.constprop.0+0x1c>
 8008db2:	f7fe fad7 	bl	8007364 <__errno>
 8008db6:	2316      	movs	r3, #22
 8008db8:	6003      	str	r3, [r0, #0]
 8008dba:	2000      	movs	r0, #0
 8008dbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008dc0:	460d      	mov	r5, r1
 8008dc2:	4f35      	ldr	r7, [pc, #212]	; (8008e98 <_strtol_l.constprop.0+0xf4>)
 8008dc4:	4628      	mov	r0, r5
 8008dc6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008dca:	5de6      	ldrb	r6, [r4, r7]
 8008dcc:	f016 0608 	ands.w	r6, r6, #8
 8008dd0:	d1f8      	bne.n	8008dc4 <_strtol_l.constprop.0+0x20>
 8008dd2:	2c2d      	cmp	r4, #45	; 0x2d
 8008dd4:	d12f      	bne.n	8008e36 <_strtol_l.constprop.0+0x92>
 8008dd6:	2601      	movs	r6, #1
 8008dd8:	782c      	ldrb	r4, [r5, #0]
 8008dda:	1c85      	adds	r5, r0, #2
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d057      	beq.n	8008e90 <_strtol_l.constprop.0+0xec>
 8008de0:	2b10      	cmp	r3, #16
 8008de2:	d109      	bne.n	8008df8 <_strtol_l.constprop.0+0x54>
 8008de4:	2c30      	cmp	r4, #48	; 0x30
 8008de6:	d107      	bne.n	8008df8 <_strtol_l.constprop.0+0x54>
 8008de8:	7828      	ldrb	r0, [r5, #0]
 8008dea:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8008dee:	2858      	cmp	r0, #88	; 0x58
 8008df0:	d149      	bne.n	8008e86 <_strtol_l.constprop.0+0xe2>
 8008df2:	2310      	movs	r3, #16
 8008df4:	786c      	ldrb	r4, [r5, #1]
 8008df6:	3502      	adds	r5, #2
 8008df8:	2700      	movs	r7, #0
 8008dfa:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8008dfe:	f10e 3eff 	add.w	lr, lr, #4294967295
 8008e02:	fbbe f9f3 	udiv	r9, lr, r3
 8008e06:	4638      	mov	r0, r7
 8008e08:	fb03 ea19 	mls	sl, r3, r9, lr
 8008e0c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8008e10:	f1bc 0f09 	cmp.w	ip, #9
 8008e14:	d814      	bhi.n	8008e40 <_strtol_l.constprop.0+0x9c>
 8008e16:	4664      	mov	r4, ip
 8008e18:	42a3      	cmp	r3, r4
 8008e1a:	dd22      	ble.n	8008e62 <_strtol_l.constprop.0+0xbe>
 8008e1c:	2f00      	cmp	r7, #0
 8008e1e:	db1d      	blt.n	8008e5c <_strtol_l.constprop.0+0xb8>
 8008e20:	4581      	cmp	r9, r0
 8008e22:	d31b      	bcc.n	8008e5c <_strtol_l.constprop.0+0xb8>
 8008e24:	d101      	bne.n	8008e2a <_strtol_l.constprop.0+0x86>
 8008e26:	45a2      	cmp	sl, r4
 8008e28:	db18      	blt.n	8008e5c <_strtol_l.constprop.0+0xb8>
 8008e2a:	2701      	movs	r7, #1
 8008e2c:	fb00 4003 	mla	r0, r0, r3, r4
 8008e30:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008e34:	e7ea      	b.n	8008e0c <_strtol_l.constprop.0+0x68>
 8008e36:	2c2b      	cmp	r4, #43	; 0x2b
 8008e38:	bf04      	itt	eq
 8008e3a:	782c      	ldrbeq	r4, [r5, #0]
 8008e3c:	1c85      	addeq	r5, r0, #2
 8008e3e:	e7cd      	b.n	8008ddc <_strtol_l.constprop.0+0x38>
 8008e40:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8008e44:	f1bc 0f19 	cmp.w	ip, #25
 8008e48:	d801      	bhi.n	8008e4e <_strtol_l.constprop.0+0xaa>
 8008e4a:	3c37      	subs	r4, #55	; 0x37
 8008e4c:	e7e4      	b.n	8008e18 <_strtol_l.constprop.0+0x74>
 8008e4e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8008e52:	f1bc 0f19 	cmp.w	ip, #25
 8008e56:	d804      	bhi.n	8008e62 <_strtol_l.constprop.0+0xbe>
 8008e58:	3c57      	subs	r4, #87	; 0x57
 8008e5a:	e7dd      	b.n	8008e18 <_strtol_l.constprop.0+0x74>
 8008e5c:	f04f 37ff 	mov.w	r7, #4294967295
 8008e60:	e7e6      	b.n	8008e30 <_strtol_l.constprop.0+0x8c>
 8008e62:	2f00      	cmp	r7, #0
 8008e64:	da07      	bge.n	8008e76 <_strtol_l.constprop.0+0xd2>
 8008e66:	2322      	movs	r3, #34	; 0x22
 8008e68:	4670      	mov	r0, lr
 8008e6a:	f8c8 3000 	str.w	r3, [r8]
 8008e6e:	2a00      	cmp	r2, #0
 8008e70:	d0a4      	beq.n	8008dbc <_strtol_l.constprop.0+0x18>
 8008e72:	1e69      	subs	r1, r5, #1
 8008e74:	e005      	b.n	8008e82 <_strtol_l.constprop.0+0xde>
 8008e76:	b106      	cbz	r6, 8008e7a <_strtol_l.constprop.0+0xd6>
 8008e78:	4240      	negs	r0, r0
 8008e7a:	2a00      	cmp	r2, #0
 8008e7c:	d09e      	beq.n	8008dbc <_strtol_l.constprop.0+0x18>
 8008e7e:	2f00      	cmp	r7, #0
 8008e80:	d1f7      	bne.n	8008e72 <_strtol_l.constprop.0+0xce>
 8008e82:	6011      	str	r1, [r2, #0]
 8008e84:	e79a      	b.n	8008dbc <_strtol_l.constprop.0+0x18>
 8008e86:	2430      	movs	r4, #48	; 0x30
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d1b5      	bne.n	8008df8 <_strtol_l.constprop.0+0x54>
 8008e8c:	2308      	movs	r3, #8
 8008e8e:	e7b3      	b.n	8008df8 <_strtol_l.constprop.0+0x54>
 8008e90:	2c30      	cmp	r4, #48	; 0x30
 8008e92:	d0a9      	beq.n	8008de8 <_strtol_l.constprop.0+0x44>
 8008e94:	230a      	movs	r3, #10
 8008e96:	e7af      	b.n	8008df8 <_strtol_l.constprop.0+0x54>
 8008e98:	0800c6e9 	.word	0x0800c6e9

08008e9c <_strtol_r>:
 8008e9c:	f7ff bf82 	b.w	8008da4 <_strtol_l.constprop.0>

08008ea0 <strtol>:
 8008ea0:	4613      	mov	r3, r2
 8008ea2:	460a      	mov	r2, r1
 8008ea4:	4601      	mov	r1, r0
 8008ea6:	4802      	ldr	r0, [pc, #8]	; (8008eb0 <strtol+0x10>)
 8008ea8:	6800      	ldr	r0, [r0, #0]
 8008eaa:	f7ff bf7b 	b.w	8008da4 <_strtol_l.constprop.0>
 8008eae:	bf00      	nop
 8008eb0:	20000018 	.word	0x20000018

08008eb4 <quorem>:
 8008eb4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008eb8:	6903      	ldr	r3, [r0, #16]
 8008eba:	690c      	ldr	r4, [r1, #16]
 8008ebc:	4607      	mov	r7, r0
 8008ebe:	42a3      	cmp	r3, r4
 8008ec0:	f2c0 8082 	blt.w	8008fc8 <quorem+0x114>
 8008ec4:	3c01      	subs	r4, #1
 8008ec6:	f100 0514 	add.w	r5, r0, #20
 8008eca:	f101 0814 	add.w	r8, r1, #20
 8008ece:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008ed2:	9301      	str	r3, [sp, #4]
 8008ed4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008ed8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008edc:	3301      	adds	r3, #1
 8008ede:	429a      	cmp	r2, r3
 8008ee0:	fbb2 f6f3 	udiv	r6, r2, r3
 8008ee4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008ee8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008eec:	d331      	bcc.n	8008f52 <quorem+0x9e>
 8008eee:	f04f 0e00 	mov.w	lr, #0
 8008ef2:	4640      	mov	r0, r8
 8008ef4:	46ac      	mov	ip, r5
 8008ef6:	46f2      	mov	sl, lr
 8008ef8:	f850 2b04 	ldr.w	r2, [r0], #4
 8008efc:	b293      	uxth	r3, r2
 8008efe:	fb06 e303 	mla	r3, r6, r3, lr
 8008f02:	0c12      	lsrs	r2, r2, #16
 8008f04:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008f08:	b29b      	uxth	r3, r3
 8008f0a:	fb06 e202 	mla	r2, r6, r2, lr
 8008f0e:	ebaa 0303 	sub.w	r3, sl, r3
 8008f12:	f8dc a000 	ldr.w	sl, [ip]
 8008f16:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008f1a:	fa1f fa8a 	uxth.w	sl, sl
 8008f1e:	4453      	add	r3, sl
 8008f20:	f8dc a000 	ldr.w	sl, [ip]
 8008f24:	b292      	uxth	r2, r2
 8008f26:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008f2a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008f2e:	b29b      	uxth	r3, r3
 8008f30:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008f34:	4581      	cmp	r9, r0
 8008f36:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008f3a:	f84c 3b04 	str.w	r3, [ip], #4
 8008f3e:	d2db      	bcs.n	8008ef8 <quorem+0x44>
 8008f40:	f855 300b 	ldr.w	r3, [r5, fp]
 8008f44:	b92b      	cbnz	r3, 8008f52 <quorem+0x9e>
 8008f46:	9b01      	ldr	r3, [sp, #4]
 8008f48:	3b04      	subs	r3, #4
 8008f4a:	429d      	cmp	r5, r3
 8008f4c:	461a      	mov	r2, r3
 8008f4e:	d32f      	bcc.n	8008fb0 <quorem+0xfc>
 8008f50:	613c      	str	r4, [r7, #16]
 8008f52:	4638      	mov	r0, r7
 8008f54:	f001 fc84 	bl	800a860 <__mcmp>
 8008f58:	2800      	cmp	r0, #0
 8008f5a:	db25      	blt.n	8008fa8 <quorem+0xf4>
 8008f5c:	4628      	mov	r0, r5
 8008f5e:	f04f 0c00 	mov.w	ip, #0
 8008f62:	3601      	adds	r6, #1
 8008f64:	f858 1b04 	ldr.w	r1, [r8], #4
 8008f68:	f8d0 e000 	ldr.w	lr, [r0]
 8008f6c:	b28b      	uxth	r3, r1
 8008f6e:	ebac 0303 	sub.w	r3, ip, r3
 8008f72:	fa1f f28e 	uxth.w	r2, lr
 8008f76:	4413      	add	r3, r2
 8008f78:	0c0a      	lsrs	r2, r1, #16
 8008f7a:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008f7e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008f82:	b29b      	uxth	r3, r3
 8008f84:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008f88:	45c1      	cmp	r9, r8
 8008f8a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008f8e:	f840 3b04 	str.w	r3, [r0], #4
 8008f92:	d2e7      	bcs.n	8008f64 <quorem+0xb0>
 8008f94:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008f98:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008f9c:	b922      	cbnz	r2, 8008fa8 <quorem+0xf4>
 8008f9e:	3b04      	subs	r3, #4
 8008fa0:	429d      	cmp	r5, r3
 8008fa2:	461a      	mov	r2, r3
 8008fa4:	d30a      	bcc.n	8008fbc <quorem+0x108>
 8008fa6:	613c      	str	r4, [r7, #16]
 8008fa8:	4630      	mov	r0, r6
 8008faa:	b003      	add	sp, #12
 8008fac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fb0:	6812      	ldr	r2, [r2, #0]
 8008fb2:	3b04      	subs	r3, #4
 8008fb4:	2a00      	cmp	r2, #0
 8008fb6:	d1cb      	bne.n	8008f50 <quorem+0x9c>
 8008fb8:	3c01      	subs	r4, #1
 8008fba:	e7c6      	b.n	8008f4a <quorem+0x96>
 8008fbc:	6812      	ldr	r2, [r2, #0]
 8008fbe:	3b04      	subs	r3, #4
 8008fc0:	2a00      	cmp	r2, #0
 8008fc2:	d1f0      	bne.n	8008fa6 <quorem+0xf2>
 8008fc4:	3c01      	subs	r4, #1
 8008fc6:	e7eb      	b.n	8008fa0 <quorem+0xec>
 8008fc8:	2000      	movs	r0, #0
 8008fca:	e7ee      	b.n	8008faa <quorem+0xf6>
 8008fcc:	0000      	movs	r0, r0
	...

08008fd0 <_dtoa_r>:
 8008fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fd4:	4616      	mov	r6, r2
 8008fd6:	461f      	mov	r7, r3
 8008fd8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008fda:	b099      	sub	sp, #100	; 0x64
 8008fdc:	4605      	mov	r5, r0
 8008fde:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008fe2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8008fe6:	b974      	cbnz	r4, 8009006 <_dtoa_r+0x36>
 8008fe8:	2010      	movs	r0, #16
 8008fea:	f001 f949 	bl	800a280 <malloc>
 8008fee:	4602      	mov	r2, r0
 8008ff0:	6268      	str	r0, [r5, #36]	; 0x24
 8008ff2:	b920      	cbnz	r0, 8008ffe <_dtoa_r+0x2e>
 8008ff4:	21ea      	movs	r1, #234	; 0xea
 8008ff6:	4ba8      	ldr	r3, [pc, #672]	; (8009298 <_dtoa_r+0x2c8>)
 8008ff8:	48a8      	ldr	r0, [pc, #672]	; (800929c <_dtoa_r+0x2cc>)
 8008ffa:	f002 f8a5 	bl	800b148 <__assert_func>
 8008ffe:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009002:	6004      	str	r4, [r0, #0]
 8009004:	60c4      	str	r4, [r0, #12]
 8009006:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009008:	6819      	ldr	r1, [r3, #0]
 800900a:	b151      	cbz	r1, 8009022 <_dtoa_r+0x52>
 800900c:	685a      	ldr	r2, [r3, #4]
 800900e:	2301      	movs	r3, #1
 8009010:	4093      	lsls	r3, r2
 8009012:	604a      	str	r2, [r1, #4]
 8009014:	608b      	str	r3, [r1, #8]
 8009016:	4628      	mov	r0, r5
 8009018:	f001 f99a 	bl	800a350 <_Bfree>
 800901c:	2200      	movs	r2, #0
 800901e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009020:	601a      	str	r2, [r3, #0]
 8009022:	1e3b      	subs	r3, r7, #0
 8009024:	bfaf      	iteee	ge
 8009026:	2300      	movge	r3, #0
 8009028:	2201      	movlt	r2, #1
 800902a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800902e:	9305      	strlt	r3, [sp, #20]
 8009030:	bfa8      	it	ge
 8009032:	f8c8 3000 	strge.w	r3, [r8]
 8009036:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800903a:	4b99      	ldr	r3, [pc, #612]	; (80092a0 <_dtoa_r+0x2d0>)
 800903c:	bfb8      	it	lt
 800903e:	f8c8 2000 	strlt.w	r2, [r8]
 8009042:	ea33 0309 	bics.w	r3, r3, r9
 8009046:	d119      	bne.n	800907c <_dtoa_r+0xac>
 8009048:	f242 730f 	movw	r3, #9999	; 0x270f
 800904c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800904e:	6013      	str	r3, [r2, #0]
 8009050:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009054:	4333      	orrs	r3, r6
 8009056:	f000 857f 	beq.w	8009b58 <_dtoa_r+0xb88>
 800905a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800905c:	b953      	cbnz	r3, 8009074 <_dtoa_r+0xa4>
 800905e:	4b91      	ldr	r3, [pc, #580]	; (80092a4 <_dtoa_r+0x2d4>)
 8009060:	e022      	b.n	80090a8 <_dtoa_r+0xd8>
 8009062:	4b91      	ldr	r3, [pc, #580]	; (80092a8 <_dtoa_r+0x2d8>)
 8009064:	9303      	str	r3, [sp, #12]
 8009066:	3308      	adds	r3, #8
 8009068:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800906a:	6013      	str	r3, [r2, #0]
 800906c:	9803      	ldr	r0, [sp, #12]
 800906e:	b019      	add	sp, #100	; 0x64
 8009070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009074:	4b8b      	ldr	r3, [pc, #556]	; (80092a4 <_dtoa_r+0x2d4>)
 8009076:	9303      	str	r3, [sp, #12]
 8009078:	3303      	adds	r3, #3
 800907a:	e7f5      	b.n	8009068 <_dtoa_r+0x98>
 800907c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8009080:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8009084:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009088:	2200      	movs	r2, #0
 800908a:	2300      	movs	r3, #0
 800908c:	f7f7 fc96 	bl	80009bc <__aeabi_dcmpeq>
 8009090:	4680      	mov	r8, r0
 8009092:	b158      	cbz	r0, 80090ac <_dtoa_r+0xdc>
 8009094:	2301      	movs	r3, #1
 8009096:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009098:	6013      	str	r3, [r2, #0]
 800909a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800909c:	2b00      	cmp	r3, #0
 800909e:	f000 8558 	beq.w	8009b52 <_dtoa_r+0xb82>
 80090a2:	4882      	ldr	r0, [pc, #520]	; (80092ac <_dtoa_r+0x2dc>)
 80090a4:	6018      	str	r0, [r3, #0]
 80090a6:	1e43      	subs	r3, r0, #1
 80090a8:	9303      	str	r3, [sp, #12]
 80090aa:	e7df      	b.n	800906c <_dtoa_r+0x9c>
 80090ac:	ab16      	add	r3, sp, #88	; 0x58
 80090ae:	9301      	str	r3, [sp, #4]
 80090b0:	ab17      	add	r3, sp, #92	; 0x5c
 80090b2:	9300      	str	r3, [sp, #0]
 80090b4:	4628      	mov	r0, r5
 80090b6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80090ba:	f001 fcf3 	bl	800aaa4 <__d2b>
 80090be:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80090c2:	4683      	mov	fp, r0
 80090c4:	2c00      	cmp	r4, #0
 80090c6:	d07f      	beq.n	80091c8 <_dtoa_r+0x1f8>
 80090c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80090cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80090ce:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80090d2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80090d6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80090da:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80090de:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80090e2:	2200      	movs	r2, #0
 80090e4:	4b72      	ldr	r3, [pc, #456]	; (80092b0 <_dtoa_r+0x2e0>)
 80090e6:	f7f7 f849 	bl	800017c <__aeabi_dsub>
 80090ea:	a365      	add	r3, pc, #404	; (adr r3, 8009280 <_dtoa_r+0x2b0>)
 80090ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090f0:	f7f7 f9fc 	bl	80004ec <__aeabi_dmul>
 80090f4:	a364      	add	r3, pc, #400	; (adr r3, 8009288 <_dtoa_r+0x2b8>)
 80090f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090fa:	f7f7 f841 	bl	8000180 <__adddf3>
 80090fe:	4606      	mov	r6, r0
 8009100:	4620      	mov	r0, r4
 8009102:	460f      	mov	r7, r1
 8009104:	f7f7 f988 	bl	8000418 <__aeabi_i2d>
 8009108:	a361      	add	r3, pc, #388	; (adr r3, 8009290 <_dtoa_r+0x2c0>)
 800910a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800910e:	f7f7 f9ed 	bl	80004ec <__aeabi_dmul>
 8009112:	4602      	mov	r2, r0
 8009114:	460b      	mov	r3, r1
 8009116:	4630      	mov	r0, r6
 8009118:	4639      	mov	r1, r7
 800911a:	f7f7 f831 	bl	8000180 <__adddf3>
 800911e:	4606      	mov	r6, r0
 8009120:	460f      	mov	r7, r1
 8009122:	f7f7 fc93 	bl	8000a4c <__aeabi_d2iz>
 8009126:	2200      	movs	r2, #0
 8009128:	4682      	mov	sl, r0
 800912a:	2300      	movs	r3, #0
 800912c:	4630      	mov	r0, r6
 800912e:	4639      	mov	r1, r7
 8009130:	f7f7 fc4e 	bl	80009d0 <__aeabi_dcmplt>
 8009134:	b148      	cbz	r0, 800914a <_dtoa_r+0x17a>
 8009136:	4650      	mov	r0, sl
 8009138:	f7f7 f96e 	bl	8000418 <__aeabi_i2d>
 800913c:	4632      	mov	r2, r6
 800913e:	463b      	mov	r3, r7
 8009140:	f7f7 fc3c 	bl	80009bc <__aeabi_dcmpeq>
 8009144:	b908      	cbnz	r0, 800914a <_dtoa_r+0x17a>
 8009146:	f10a 3aff 	add.w	sl, sl, #4294967295
 800914a:	f1ba 0f16 	cmp.w	sl, #22
 800914e:	d858      	bhi.n	8009202 <_dtoa_r+0x232>
 8009150:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009154:	4b57      	ldr	r3, [pc, #348]	; (80092b4 <_dtoa_r+0x2e4>)
 8009156:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800915a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800915e:	f7f7 fc37 	bl	80009d0 <__aeabi_dcmplt>
 8009162:	2800      	cmp	r0, #0
 8009164:	d04f      	beq.n	8009206 <_dtoa_r+0x236>
 8009166:	2300      	movs	r3, #0
 8009168:	f10a 3aff 	add.w	sl, sl, #4294967295
 800916c:	930f      	str	r3, [sp, #60]	; 0x3c
 800916e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009170:	1b1c      	subs	r4, r3, r4
 8009172:	1e63      	subs	r3, r4, #1
 8009174:	9309      	str	r3, [sp, #36]	; 0x24
 8009176:	bf49      	itett	mi
 8009178:	f1c4 0301 	rsbmi	r3, r4, #1
 800917c:	2300      	movpl	r3, #0
 800917e:	9306      	strmi	r3, [sp, #24]
 8009180:	2300      	movmi	r3, #0
 8009182:	bf54      	ite	pl
 8009184:	9306      	strpl	r3, [sp, #24]
 8009186:	9309      	strmi	r3, [sp, #36]	; 0x24
 8009188:	f1ba 0f00 	cmp.w	sl, #0
 800918c:	db3d      	blt.n	800920a <_dtoa_r+0x23a>
 800918e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009190:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8009194:	4453      	add	r3, sl
 8009196:	9309      	str	r3, [sp, #36]	; 0x24
 8009198:	2300      	movs	r3, #0
 800919a:	930a      	str	r3, [sp, #40]	; 0x28
 800919c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800919e:	2b09      	cmp	r3, #9
 80091a0:	f200 808c 	bhi.w	80092bc <_dtoa_r+0x2ec>
 80091a4:	2b05      	cmp	r3, #5
 80091a6:	bfc4      	itt	gt
 80091a8:	3b04      	subgt	r3, #4
 80091aa:	9322      	strgt	r3, [sp, #136]	; 0x88
 80091ac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80091ae:	bfc8      	it	gt
 80091b0:	2400      	movgt	r4, #0
 80091b2:	f1a3 0302 	sub.w	r3, r3, #2
 80091b6:	bfd8      	it	le
 80091b8:	2401      	movle	r4, #1
 80091ba:	2b03      	cmp	r3, #3
 80091bc:	f200 808a 	bhi.w	80092d4 <_dtoa_r+0x304>
 80091c0:	e8df f003 	tbb	[pc, r3]
 80091c4:	5b4d4f2d 	.word	0x5b4d4f2d
 80091c8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80091cc:	441c      	add	r4, r3
 80091ce:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80091d2:	2b20      	cmp	r3, #32
 80091d4:	bfc3      	ittte	gt
 80091d6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80091da:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80091de:	fa09 f303 	lslgt.w	r3, r9, r3
 80091e2:	f1c3 0320 	rsble	r3, r3, #32
 80091e6:	bfc6      	itte	gt
 80091e8:	fa26 f000 	lsrgt.w	r0, r6, r0
 80091ec:	4318      	orrgt	r0, r3
 80091ee:	fa06 f003 	lslle.w	r0, r6, r3
 80091f2:	f7f7 f901 	bl	80003f8 <__aeabi_ui2d>
 80091f6:	2301      	movs	r3, #1
 80091f8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80091fc:	3c01      	subs	r4, #1
 80091fe:	9313      	str	r3, [sp, #76]	; 0x4c
 8009200:	e76f      	b.n	80090e2 <_dtoa_r+0x112>
 8009202:	2301      	movs	r3, #1
 8009204:	e7b2      	b.n	800916c <_dtoa_r+0x19c>
 8009206:	900f      	str	r0, [sp, #60]	; 0x3c
 8009208:	e7b1      	b.n	800916e <_dtoa_r+0x19e>
 800920a:	9b06      	ldr	r3, [sp, #24]
 800920c:	eba3 030a 	sub.w	r3, r3, sl
 8009210:	9306      	str	r3, [sp, #24]
 8009212:	f1ca 0300 	rsb	r3, sl, #0
 8009216:	930a      	str	r3, [sp, #40]	; 0x28
 8009218:	2300      	movs	r3, #0
 800921a:	930e      	str	r3, [sp, #56]	; 0x38
 800921c:	e7be      	b.n	800919c <_dtoa_r+0x1cc>
 800921e:	2300      	movs	r3, #0
 8009220:	930b      	str	r3, [sp, #44]	; 0x2c
 8009222:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009224:	2b00      	cmp	r3, #0
 8009226:	dc58      	bgt.n	80092da <_dtoa_r+0x30a>
 8009228:	f04f 0901 	mov.w	r9, #1
 800922c:	464b      	mov	r3, r9
 800922e:	f8cd 9020 	str.w	r9, [sp, #32]
 8009232:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8009236:	2200      	movs	r2, #0
 8009238:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800923a:	6042      	str	r2, [r0, #4]
 800923c:	2204      	movs	r2, #4
 800923e:	f102 0614 	add.w	r6, r2, #20
 8009242:	429e      	cmp	r6, r3
 8009244:	6841      	ldr	r1, [r0, #4]
 8009246:	d94e      	bls.n	80092e6 <_dtoa_r+0x316>
 8009248:	4628      	mov	r0, r5
 800924a:	f001 f841 	bl	800a2d0 <_Balloc>
 800924e:	9003      	str	r0, [sp, #12]
 8009250:	2800      	cmp	r0, #0
 8009252:	d14c      	bne.n	80092ee <_dtoa_r+0x31e>
 8009254:	4602      	mov	r2, r0
 8009256:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800925a:	4b17      	ldr	r3, [pc, #92]	; (80092b8 <_dtoa_r+0x2e8>)
 800925c:	e6cc      	b.n	8008ff8 <_dtoa_r+0x28>
 800925e:	2301      	movs	r3, #1
 8009260:	e7de      	b.n	8009220 <_dtoa_r+0x250>
 8009262:	2300      	movs	r3, #0
 8009264:	930b      	str	r3, [sp, #44]	; 0x2c
 8009266:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009268:	eb0a 0903 	add.w	r9, sl, r3
 800926c:	f109 0301 	add.w	r3, r9, #1
 8009270:	2b01      	cmp	r3, #1
 8009272:	9308      	str	r3, [sp, #32]
 8009274:	bfb8      	it	lt
 8009276:	2301      	movlt	r3, #1
 8009278:	e7dd      	b.n	8009236 <_dtoa_r+0x266>
 800927a:	2301      	movs	r3, #1
 800927c:	e7f2      	b.n	8009264 <_dtoa_r+0x294>
 800927e:	bf00      	nop
 8009280:	636f4361 	.word	0x636f4361
 8009284:	3fd287a7 	.word	0x3fd287a7
 8009288:	8b60c8b3 	.word	0x8b60c8b3
 800928c:	3fc68a28 	.word	0x3fc68a28
 8009290:	509f79fb 	.word	0x509f79fb
 8009294:	3fd34413 	.word	0x3fd34413
 8009298:	0800c7f6 	.word	0x0800c7f6
 800929c:	0800c80d 	.word	0x0800c80d
 80092a0:	7ff00000 	.word	0x7ff00000
 80092a4:	0800c7f2 	.word	0x0800c7f2
 80092a8:	0800c7e9 	.word	0x0800c7e9
 80092ac:	0800c66d 	.word	0x0800c66d
 80092b0:	3ff80000 	.word	0x3ff80000
 80092b4:	0800c978 	.word	0x0800c978
 80092b8:	0800c868 	.word	0x0800c868
 80092bc:	2401      	movs	r4, #1
 80092be:	2300      	movs	r3, #0
 80092c0:	940b      	str	r4, [sp, #44]	; 0x2c
 80092c2:	9322      	str	r3, [sp, #136]	; 0x88
 80092c4:	f04f 39ff 	mov.w	r9, #4294967295
 80092c8:	2200      	movs	r2, #0
 80092ca:	2312      	movs	r3, #18
 80092cc:	f8cd 9020 	str.w	r9, [sp, #32]
 80092d0:	9223      	str	r2, [sp, #140]	; 0x8c
 80092d2:	e7b0      	b.n	8009236 <_dtoa_r+0x266>
 80092d4:	2301      	movs	r3, #1
 80092d6:	930b      	str	r3, [sp, #44]	; 0x2c
 80092d8:	e7f4      	b.n	80092c4 <_dtoa_r+0x2f4>
 80092da:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 80092de:	464b      	mov	r3, r9
 80092e0:	f8cd 9020 	str.w	r9, [sp, #32]
 80092e4:	e7a7      	b.n	8009236 <_dtoa_r+0x266>
 80092e6:	3101      	adds	r1, #1
 80092e8:	6041      	str	r1, [r0, #4]
 80092ea:	0052      	lsls	r2, r2, #1
 80092ec:	e7a7      	b.n	800923e <_dtoa_r+0x26e>
 80092ee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80092f0:	9a03      	ldr	r2, [sp, #12]
 80092f2:	601a      	str	r2, [r3, #0]
 80092f4:	9b08      	ldr	r3, [sp, #32]
 80092f6:	2b0e      	cmp	r3, #14
 80092f8:	f200 80a8 	bhi.w	800944c <_dtoa_r+0x47c>
 80092fc:	2c00      	cmp	r4, #0
 80092fe:	f000 80a5 	beq.w	800944c <_dtoa_r+0x47c>
 8009302:	f1ba 0f00 	cmp.w	sl, #0
 8009306:	dd34      	ble.n	8009372 <_dtoa_r+0x3a2>
 8009308:	4a9a      	ldr	r2, [pc, #616]	; (8009574 <_dtoa_r+0x5a4>)
 800930a:	f00a 030f 	and.w	r3, sl, #15
 800930e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009312:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8009316:	e9d3 3400 	ldrd	r3, r4, [r3]
 800931a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800931e:	ea4f 142a 	mov.w	r4, sl, asr #4
 8009322:	d016      	beq.n	8009352 <_dtoa_r+0x382>
 8009324:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009328:	4b93      	ldr	r3, [pc, #588]	; (8009578 <_dtoa_r+0x5a8>)
 800932a:	2703      	movs	r7, #3
 800932c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009330:	f7f7 fa06 	bl	8000740 <__aeabi_ddiv>
 8009334:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009338:	f004 040f 	and.w	r4, r4, #15
 800933c:	4e8e      	ldr	r6, [pc, #568]	; (8009578 <_dtoa_r+0x5a8>)
 800933e:	b954      	cbnz	r4, 8009356 <_dtoa_r+0x386>
 8009340:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009344:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009348:	f7f7 f9fa 	bl	8000740 <__aeabi_ddiv>
 800934c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009350:	e029      	b.n	80093a6 <_dtoa_r+0x3d6>
 8009352:	2702      	movs	r7, #2
 8009354:	e7f2      	b.n	800933c <_dtoa_r+0x36c>
 8009356:	07e1      	lsls	r1, r4, #31
 8009358:	d508      	bpl.n	800936c <_dtoa_r+0x39c>
 800935a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800935e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009362:	f7f7 f8c3 	bl	80004ec <__aeabi_dmul>
 8009366:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800936a:	3701      	adds	r7, #1
 800936c:	1064      	asrs	r4, r4, #1
 800936e:	3608      	adds	r6, #8
 8009370:	e7e5      	b.n	800933e <_dtoa_r+0x36e>
 8009372:	f000 80a5 	beq.w	80094c0 <_dtoa_r+0x4f0>
 8009376:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800937a:	f1ca 0400 	rsb	r4, sl, #0
 800937e:	4b7d      	ldr	r3, [pc, #500]	; (8009574 <_dtoa_r+0x5a4>)
 8009380:	f004 020f 	and.w	r2, r4, #15
 8009384:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800938c:	f7f7 f8ae 	bl	80004ec <__aeabi_dmul>
 8009390:	2702      	movs	r7, #2
 8009392:	2300      	movs	r3, #0
 8009394:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009398:	4e77      	ldr	r6, [pc, #476]	; (8009578 <_dtoa_r+0x5a8>)
 800939a:	1124      	asrs	r4, r4, #4
 800939c:	2c00      	cmp	r4, #0
 800939e:	f040 8084 	bne.w	80094aa <_dtoa_r+0x4da>
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d1d2      	bne.n	800934c <_dtoa_r+0x37c>
 80093a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	f000 808b 	beq.w	80094c4 <_dtoa_r+0x4f4>
 80093ae:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80093b2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80093b6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80093ba:	2200      	movs	r2, #0
 80093bc:	4b6f      	ldr	r3, [pc, #444]	; (800957c <_dtoa_r+0x5ac>)
 80093be:	f7f7 fb07 	bl	80009d0 <__aeabi_dcmplt>
 80093c2:	2800      	cmp	r0, #0
 80093c4:	d07e      	beq.n	80094c4 <_dtoa_r+0x4f4>
 80093c6:	9b08      	ldr	r3, [sp, #32]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d07b      	beq.n	80094c4 <_dtoa_r+0x4f4>
 80093cc:	f1b9 0f00 	cmp.w	r9, #0
 80093d0:	dd38      	ble.n	8009444 <_dtoa_r+0x474>
 80093d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80093d6:	2200      	movs	r2, #0
 80093d8:	4b69      	ldr	r3, [pc, #420]	; (8009580 <_dtoa_r+0x5b0>)
 80093da:	f7f7 f887 	bl	80004ec <__aeabi_dmul>
 80093de:	464c      	mov	r4, r9
 80093e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80093e4:	f10a 38ff 	add.w	r8, sl, #4294967295
 80093e8:	3701      	adds	r7, #1
 80093ea:	4638      	mov	r0, r7
 80093ec:	f7f7 f814 	bl	8000418 <__aeabi_i2d>
 80093f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80093f4:	f7f7 f87a 	bl	80004ec <__aeabi_dmul>
 80093f8:	2200      	movs	r2, #0
 80093fa:	4b62      	ldr	r3, [pc, #392]	; (8009584 <_dtoa_r+0x5b4>)
 80093fc:	f7f6 fec0 	bl	8000180 <__adddf3>
 8009400:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8009404:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009408:	9611      	str	r6, [sp, #68]	; 0x44
 800940a:	2c00      	cmp	r4, #0
 800940c:	d15d      	bne.n	80094ca <_dtoa_r+0x4fa>
 800940e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009412:	2200      	movs	r2, #0
 8009414:	4b5c      	ldr	r3, [pc, #368]	; (8009588 <_dtoa_r+0x5b8>)
 8009416:	f7f6 feb1 	bl	800017c <__aeabi_dsub>
 800941a:	4602      	mov	r2, r0
 800941c:	460b      	mov	r3, r1
 800941e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009422:	4633      	mov	r3, r6
 8009424:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009426:	f7f7 faf1 	bl	8000a0c <__aeabi_dcmpgt>
 800942a:	2800      	cmp	r0, #0
 800942c:	f040 829c 	bne.w	8009968 <_dtoa_r+0x998>
 8009430:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009434:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009436:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800943a:	f7f7 fac9 	bl	80009d0 <__aeabi_dcmplt>
 800943e:	2800      	cmp	r0, #0
 8009440:	f040 8290 	bne.w	8009964 <_dtoa_r+0x994>
 8009444:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8009448:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800944c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800944e:	2b00      	cmp	r3, #0
 8009450:	f2c0 8152 	blt.w	80096f8 <_dtoa_r+0x728>
 8009454:	f1ba 0f0e 	cmp.w	sl, #14
 8009458:	f300 814e 	bgt.w	80096f8 <_dtoa_r+0x728>
 800945c:	4b45      	ldr	r3, [pc, #276]	; (8009574 <_dtoa_r+0x5a4>)
 800945e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009462:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009466:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800946a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800946c:	2b00      	cmp	r3, #0
 800946e:	f280 80db 	bge.w	8009628 <_dtoa_r+0x658>
 8009472:	9b08      	ldr	r3, [sp, #32]
 8009474:	2b00      	cmp	r3, #0
 8009476:	f300 80d7 	bgt.w	8009628 <_dtoa_r+0x658>
 800947a:	f040 8272 	bne.w	8009962 <_dtoa_r+0x992>
 800947e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009482:	2200      	movs	r2, #0
 8009484:	4b40      	ldr	r3, [pc, #256]	; (8009588 <_dtoa_r+0x5b8>)
 8009486:	f7f7 f831 	bl	80004ec <__aeabi_dmul>
 800948a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800948e:	f7f7 fab3 	bl	80009f8 <__aeabi_dcmpge>
 8009492:	9c08      	ldr	r4, [sp, #32]
 8009494:	4626      	mov	r6, r4
 8009496:	2800      	cmp	r0, #0
 8009498:	f040 8248 	bne.w	800992c <_dtoa_r+0x95c>
 800949c:	2331      	movs	r3, #49	; 0x31
 800949e:	9f03      	ldr	r7, [sp, #12]
 80094a0:	f10a 0a01 	add.w	sl, sl, #1
 80094a4:	f807 3b01 	strb.w	r3, [r7], #1
 80094a8:	e244      	b.n	8009934 <_dtoa_r+0x964>
 80094aa:	07e2      	lsls	r2, r4, #31
 80094ac:	d505      	bpl.n	80094ba <_dtoa_r+0x4ea>
 80094ae:	e9d6 2300 	ldrd	r2, r3, [r6]
 80094b2:	f7f7 f81b 	bl	80004ec <__aeabi_dmul>
 80094b6:	2301      	movs	r3, #1
 80094b8:	3701      	adds	r7, #1
 80094ba:	1064      	asrs	r4, r4, #1
 80094bc:	3608      	adds	r6, #8
 80094be:	e76d      	b.n	800939c <_dtoa_r+0x3cc>
 80094c0:	2702      	movs	r7, #2
 80094c2:	e770      	b.n	80093a6 <_dtoa_r+0x3d6>
 80094c4:	46d0      	mov	r8, sl
 80094c6:	9c08      	ldr	r4, [sp, #32]
 80094c8:	e78f      	b.n	80093ea <_dtoa_r+0x41a>
 80094ca:	9903      	ldr	r1, [sp, #12]
 80094cc:	4b29      	ldr	r3, [pc, #164]	; (8009574 <_dtoa_r+0x5a4>)
 80094ce:	4421      	add	r1, r4
 80094d0:	9112      	str	r1, [sp, #72]	; 0x48
 80094d2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80094d4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80094d8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80094dc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80094e0:	2900      	cmp	r1, #0
 80094e2:	d055      	beq.n	8009590 <_dtoa_r+0x5c0>
 80094e4:	2000      	movs	r0, #0
 80094e6:	4929      	ldr	r1, [pc, #164]	; (800958c <_dtoa_r+0x5bc>)
 80094e8:	f7f7 f92a 	bl	8000740 <__aeabi_ddiv>
 80094ec:	463b      	mov	r3, r7
 80094ee:	4632      	mov	r2, r6
 80094f0:	f7f6 fe44 	bl	800017c <__aeabi_dsub>
 80094f4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80094f8:	9f03      	ldr	r7, [sp, #12]
 80094fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80094fe:	f7f7 faa5 	bl	8000a4c <__aeabi_d2iz>
 8009502:	4604      	mov	r4, r0
 8009504:	f7f6 ff88 	bl	8000418 <__aeabi_i2d>
 8009508:	4602      	mov	r2, r0
 800950a:	460b      	mov	r3, r1
 800950c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009510:	f7f6 fe34 	bl	800017c <__aeabi_dsub>
 8009514:	4602      	mov	r2, r0
 8009516:	460b      	mov	r3, r1
 8009518:	3430      	adds	r4, #48	; 0x30
 800951a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800951e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009522:	f807 4b01 	strb.w	r4, [r7], #1
 8009526:	f7f7 fa53 	bl	80009d0 <__aeabi_dcmplt>
 800952a:	2800      	cmp	r0, #0
 800952c:	d174      	bne.n	8009618 <_dtoa_r+0x648>
 800952e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009532:	2000      	movs	r0, #0
 8009534:	4911      	ldr	r1, [pc, #68]	; (800957c <_dtoa_r+0x5ac>)
 8009536:	f7f6 fe21 	bl	800017c <__aeabi_dsub>
 800953a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800953e:	f7f7 fa47 	bl	80009d0 <__aeabi_dcmplt>
 8009542:	2800      	cmp	r0, #0
 8009544:	f040 80b7 	bne.w	80096b6 <_dtoa_r+0x6e6>
 8009548:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800954a:	429f      	cmp	r7, r3
 800954c:	f43f af7a 	beq.w	8009444 <_dtoa_r+0x474>
 8009550:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009554:	2200      	movs	r2, #0
 8009556:	4b0a      	ldr	r3, [pc, #40]	; (8009580 <_dtoa_r+0x5b0>)
 8009558:	f7f6 ffc8 	bl	80004ec <__aeabi_dmul>
 800955c:	2200      	movs	r2, #0
 800955e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009562:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009566:	4b06      	ldr	r3, [pc, #24]	; (8009580 <_dtoa_r+0x5b0>)
 8009568:	f7f6 ffc0 	bl	80004ec <__aeabi_dmul>
 800956c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009570:	e7c3      	b.n	80094fa <_dtoa_r+0x52a>
 8009572:	bf00      	nop
 8009574:	0800c978 	.word	0x0800c978
 8009578:	0800c950 	.word	0x0800c950
 800957c:	3ff00000 	.word	0x3ff00000
 8009580:	40240000 	.word	0x40240000
 8009584:	401c0000 	.word	0x401c0000
 8009588:	40140000 	.word	0x40140000
 800958c:	3fe00000 	.word	0x3fe00000
 8009590:	4630      	mov	r0, r6
 8009592:	4639      	mov	r1, r7
 8009594:	f7f6 ffaa 	bl	80004ec <__aeabi_dmul>
 8009598:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800959a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800959e:	9c03      	ldr	r4, [sp, #12]
 80095a0:	9314      	str	r3, [sp, #80]	; 0x50
 80095a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80095a6:	f7f7 fa51 	bl	8000a4c <__aeabi_d2iz>
 80095aa:	9015      	str	r0, [sp, #84]	; 0x54
 80095ac:	f7f6 ff34 	bl	8000418 <__aeabi_i2d>
 80095b0:	4602      	mov	r2, r0
 80095b2:	460b      	mov	r3, r1
 80095b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80095b8:	f7f6 fde0 	bl	800017c <__aeabi_dsub>
 80095bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80095be:	4606      	mov	r6, r0
 80095c0:	3330      	adds	r3, #48	; 0x30
 80095c2:	f804 3b01 	strb.w	r3, [r4], #1
 80095c6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80095c8:	460f      	mov	r7, r1
 80095ca:	429c      	cmp	r4, r3
 80095cc:	f04f 0200 	mov.w	r2, #0
 80095d0:	d124      	bne.n	800961c <_dtoa_r+0x64c>
 80095d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80095d6:	4bb0      	ldr	r3, [pc, #704]	; (8009898 <_dtoa_r+0x8c8>)
 80095d8:	f7f6 fdd2 	bl	8000180 <__adddf3>
 80095dc:	4602      	mov	r2, r0
 80095de:	460b      	mov	r3, r1
 80095e0:	4630      	mov	r0, r6
 80095e2:	4639      	mov	r1, r7
 80095e4:	f7f7 fa12 	bl	8000a0c <__aeabi_dcmpgt>
 80095e8:	2800      	cmp	r0, #0
 80095ea:	d163      	bne.n	80096b4 <_dtoa_r+0x6e4>
 80095ec:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80095f0:	2000      	movs	r0, #0
 80095f2:	49a9      	ldr	r1, [pc, #676]	; (8009898 <_dtoa_r+0x8c8>)
 80095f4:	f7f6 fdc2 	bl	800017c <__aeabi_dsub>
 80095f8:	4602      	mov	r2, r0
 80095fa:	460b      	mov	r3, r1
 80095fc:	4630      	mov	r0, r6
 80095fe:	4639      	mov	r1, r7
 8009600:	f7f7 f9e6 	bl	80009d0 <__aeabi_dcmplt>
 8009604:	2800      	cmp	r0, #0
 8009606:	f43f af1d 	beq.w	8009444 <_dtoa_r+0x474>
 800960a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800960c:	1e7b      	subs	r3, r7, #1
 800960e:	9314      	str	r3, [sp, #80]	; 0x50
 8009610:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8009614:	2b30      	cmp	r3, #48	; 0x30
 8009616:	d0f8      	beq.n	800960a <_dtoa_r+0x63a>
 8009618:	46c2      	mov	sl, r8
 800961a:	e03b      	b.n	8009694 <_dtoa_r+0x6c4>
 800961c:	4b9f      	ldr	r3, [pc, #636]	; (800989c <_dtoa_r+0x8cc>)
 800961e:	f7f6 ff65 	bl	80004ec <__aeabi_dmul>
 8009622:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009626:	e7bc      	b.n	80095a2 <_dtoa_r+0x5d2>
 8009628:	9f03      	ldr	r7, [sp, #12]
 800962a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800962e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009632:	4640      	mov	r0, r8
 8009634:	4649      	mov	r1, r9
 8009636:	f7f7 f883 	bl	8000740 <__aeabi_ddiv>
 800963a:	f7f7 fa07 	bl	8000a4c <__aeabi_d2iz>
 800963e:	4604      	mov	r4, r0
 8009640:	f7f6 feea 	bl	8000418 <__aeabi_i2d>
 8009644:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009648:	f7f6 ff50 	bl	80004ec <__aeabi_dmul>
 800964c:	4602      	mov	r2, r0
 800964e:	460b      	mov	r3, r1
 8009650:	4640      	mov	r0, r8
 8009652:	4649      	mov	r1, r9
 8009654:	f7f6 fd92 	bl	800017c <__aeabi_dsub>
 8009658:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800965c:	f807 6b01 	strb.w	r6, [r7], #1
 8009660:	9e03      	ldr	r6, [sp, #12]
 8009662:	f8dd c020 	ldr.w	ip, [sp, #32]
 8009666:	1bbe      	subs	r6, r7, r6
 8009668:	45b4      	cmp	ip, r6
 800966a:	4602      	mov	r2, r0
 800966c:	460b      	mov	r3, r1
 800966e:	d136      	bne.n	80096de <_dtoa_r+0x70e>
 8009670:	f7f6 fd86 	bl	8000180 <__adddf3>
 8009674:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009678:	4680      	mov	r8, r0
 800967a:	4689      	mov	r9, r1
 800967c:	f7f7 f9c6 	bl	8000a0c <__aeabi_dcmpgt>
 8009680:	bb58      	cbnz	r0, 80096da <_dtoa_r+0x70a>
 8009682:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009686:	4640      	mov	r0, r8
 8009688:	4649      	mov	r1, r9
 800968a:	f7f7 f997 	bl	80009bc <__aeabi_dcmpeq>
 800968e:	b108      	cbz	r0, 8009694 <_dtoa_r+0x6c4>
 8009690:	07e1      	lsls	r1, r4, #31
 8009692:	d422      	bmi.n	80096da <_dtoa_r+0x70a>
 8009694:	4628      	mov	r0, r5
 8009696:	4659      	mov	r1, fp
 8009698:	f000 fe5a 	bl	800a350 <_Bfree>
 800969c:	2300      	movs	r3, #0
 800969e:	703b      	strb	r3, [r7, #0]
 80096a0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80096a2:	f10a 0001 	add.w	r0, sl, #1
 80096a6:	6018      	str	r0, [r3, #0]
 80096a8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	f43f acde 	beq.w	800906c <_dtoa_r+0x9c>
 80096b0:	601f      	str	r7, [r3, #0]
 80096b2:	e4db      	b.n	800906c <_dtoa_r+0x9c>
 80096b4:	4627      	mov	r7, r4
 80096b6:	463b      	mov	r3, r7
 80096b8:	461f      	mov	r7, r3
 80096ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80096be:	2a39      	cmp	r2, #57	; 0x39
 80096c0:	d107      	bne.n	80096d2 <_dtoa_r+0x702>
 80096c2:	9a03      	ldr	r2, [sp, #12]
 80096c4:	429a      	cmp	r2, r3
 80096c6:	d1f7      	bne.n	80096b8 <_dtoa_r+0x6e8>
 80096c8:	2230      	movs	r2, #48	; 0x30
 80096ca:	9903      	ldr	r1, [sp, #12]
 80096cc:	f108 0801 	add.w	r8, r8, #1
 80096d0:	700a      	strb	r2, [r1, #0]
 80096d2:	781a      	ldrb	r2, [r3, #0]
 80096d4:	3201      	adds	r2, #1
 80096d6:	701a      	strb	r2, [r3, #0]
 80096d8:	e79e      	b.n	8009618 <_dtoa_r+0x648>
 80096da:	46d0      	mov	r8, sl
 80096dc:	e7eb      	b.n	80096b6 <_dtoa_r+0x6e6>
 80096de:	2200      	movs	r2, #0
 80096e0:	4b6e      	ldr	r3, [pc, #440]	; (800989c <_dtoa_r+0x8cc>)
 80096e2:	f7f6 ff03 	bl	80004ec <__aeabi_dmul>
 80096e6:	2200      	movs	r2, #0
 80096e8:	2300      	movs	r3, #0
 80096ea:	4680      	mov	r8, r0
 80096ec:	4689      	mov	r9, r1
 80096ee:	f7f7 f965 	bl	80009bc <__aeabi_dcmpeq>
 80096f2:	2800      	cmp	r0, #0
 80096f4:	d09b      	beq.n	800962e <_dtoa_r+0x65e>
 80096f6:	e7cd      	b.n	8009694 <_dtoa_r+0x6c4>
 80096f8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80096fa:	2a00      	cmp	r2, #0
 80096fc:	f000 80d0 	beq.w	80098a0 <_dtoa_r+0x8d0>
 8009700:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009702:	2a01      	cmp	r2, #1
 8009704:	f300 80ae 	bgt.w	8009864 <_dtoa_r+0x894>
 8009708:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800970a:	2a00      	cmp	r2, #0
 800970c:	f000 80a6 	beq.w	800985c <_dtoa_r+0x88c>
 8009710:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009714:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009716:	9f06      	ldr	r7, [sp, #24]
 8009718:	9a06      	ldr	r2, [sp, #24]
 800971a:	2101      	movs	r1, #1
 800971c:	441a      	add	r2, r3
 800971e:	9206      	str	r2, [sp, #24]
 8009720:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009722:	4628      	mov	r0, r5
 8009724:	441a      	add	r2, r3
 8009726:	9209      	str	r2, [sp, #36]	; 0x24
 8009728:	f000 ff12 	bl	800a550 <__i2b>
 800972c:	4606      	mov	r6, r0
 800972e:	2f00      	cmp	r7, #0
 8009730:	dd0c      	ble.n	800974c <_dtoa_r+0x77c>
 8009732:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009734:	2b00      	cmp	r3, #0
 8009736:	dd09      	ble.n	800974c <_dtoa_r+0x77c>
 8009738:	42bb      	cmp	r3, r7
 800973a:	bfa8      	it	ge
 800973c:	463b      	movge	r3, r7
 800973e:	9a06      	ldr	r2, [sp, #24]
 8009740:	1aff      	subs	r7, r7, r3
 8009742:	1ad2      	subs	r2, r2, r3
 8009744:	9206      	str	r2, [sp, #24]
 8009746:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009748:	1ad3      	subs	r3, r2, r3
 800974a:	9309      	str	r3, [sp, #36]	; 0x24
 800974c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800974e:	b1f3      	cbz	r3, 800978e <_dtoa_r+0x7be>
 8009750:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009752:	2b00      	cmp	r3, #0
 8009754:	f000 80a8 	beq.w	80098a8 <_dtoa_r+0x8d8>
 8009758:	2c00      	cmp	r4, #0
 800975a:	dd10      	ble.n	800977e <_dtoa_r+0x7ae>
 800975c:	4631      	mov	r1, r6
 800975e:	4622      	mov	r2, r4
 8009760:	4628      	mov	r0, r5
 8009762:	f000 ffb3 	bl	800a6cc <__pow5mult>
 8009766:	465a      	mov	r2, fp
 8009768:	4601      	mov	r1, r0
 800976a:	4606      	mov	r6, r0
 800976c:	4628      	mov	r0, r5
 800976e:	f000 ff05 	bl	800a57c <__multiply>
 8009772:	4680      	mov	r8, r0
 8009774:	4659      	mov	r1, fp
 8009776:	4628      	mov	r0, r5
 8009778:	f000 fdea 	bl	800a350 <_Bfree>
 800977c:	46c3      	mov	fp, r8
 800977e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009780:	1b1a      	subs	r2, r3, r4
 8009782:	d004      	beq.n	800978e <_dtoa_r+0x7be>
 8009784:	4659      	mov	r1, fp
 8009786:	4628      	mov	r0, r5
 8009788:	f000 ffa0 	bl	800a6cc <__pow5mult>
 800978c:	4683      	mov	fp, r0
 800978e:	2101      	movs	r1, #1
 8009790:	4628      	mov	r0, r5
 8009792:	f000 fedd 	bl	800a550 <__i2b>
 8009796:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009798:	4604      	mov	r4, r0
 800979a:	2b00      	cmp	r3, #0
 800979c:	f340 8086 	ble.w	80098ac <_dtoa_r+0x8dc>
 80097a0:	461a      	mov	r2, r3
 80097a2:	4601      	mov	r1, r0
 80097a4:	4628      	mov	r0, r5
 80097a6:	f000 ff91 	bl	800a6cc <__pow5mult>
 80097aa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80097ac:	4604      	mov	r4, r0
 80097ae:	2b01      	cmp	r3, #1
 80097b0:	dd7f      	ble.n	80098b2 <_dtoa_r+0x8e2>
 80097b2:	f04f 0800 	mov.w	r8, #0
 80097b6:	6923      	ldr	r3, [r4, #16]
 80097b8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80097bc:	6918      	ldr	r0, [r3, #16]
 80097be:	f000 fe79 	bl	800a4b4 <__hi0bits>
 80097c2:	f1c0 0020 	rsb	r0, r0, #32
 80097c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097c8:	4418      	add	r0, r3
 80097ca:	f010 001f 	ands.w	r0, r0, #31
 80097ce:	f000 8092 	beq.w	80098f6 <_dtoa_r+0x926>
 80097d2:	f1c0 0320 	rsb	r3, r0, #32
 80097d6:	2b04      	cmp	r3, #4
 80097d8:	f340 808a 	ble.w	80098f0 <_dtoa_r+0x920>
 80097dc:	f1c0 001c 	rsb	r0, r0, #28
 80097e0:	9b06      	ldr	r3, [sp, #24]
 80097e2:	4407      	add	r7, r0
 80097e4:	4403      	add	r3, r0
 80097e6:	9306      	str	r3, [sp, #24]
 80097e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097ea:	4403      	add	r3, r0
 80097ec:	9309      	str	r3, [sp, #36]	; 0x24
 80097ee:	9b06      	ldr	r3, [sp, #24]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	dd05      	ble.n	8009800 <_dtoa_r+0x830>
 80097f4:	4659      	mov	r1, fp
 80097f6:	461a      	mov	r2, r3
 80097f8:	4628      	mov	r0, r5
 80097fa:	f000 ffc1 	bl	800a780 <__lshift>
 80097fe:	4683      	mov	fp, r0
 8009800:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009802:	2b00      	cmp	r3, #0
 8009804:	dd05      	ble.n	8009812 <_dtoa_r+0x842>
 8009806:	4621      	mov	r1, r4
 8009808:	461a      	mov	r2, r3
 800980a:	4628      	mov	r0, r5
 800980c:	f000 ffb8 	bl	800a780 <__lshift>
 8009810:	4604      	mov	r4, r0
 8009812:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009814:	2b00      	cmp	r3, #0
 8009816:	d070      	beq.n	80098fa <_dtoa_r+0x92a>
 8009818:	4621      	mov	r1, r4
 800981a:	4658      	mov	r0, fp
 800981c:	f001 f820 	bl	800a860 <__mcmp>
 8009820:	2800      	cmp	r0, #0
 8009822:	da6a      	bge.n	80098fa <_dtoa_r+0x92a>
 8009824:	2300      	movs	r3, #0
 8009826:	4659      	mov	r1, fp
 8009828:	220a      	movs	r2, #10
 800982a:	4628      	mov	r0, r5
 800982c:	f000 fdb2 	bl	800a394 <__multadd>
 8009830:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009832:	4683      	mov	fp, r0
 8009834:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009838:	2b00      	cmp	r3, #0
 800983a:	f000 8194 	beq.w	8009b66 <_dtoa_r+0xb96>
 800983e:	4631      	mov	r1, r6
 8009840:	2300      	movs	r3, #0
 8009842:	220a      	movs	r2, #10
 8009844:	4628      	mov	r0, r5
 8009846:	f000 fda5 	bl	800a394 <__multadd>
 800984a:	f1b9 0f00 	cmp.w	r9, #0
 800984e:	4606      	mov	r6, r0
 8009850:	f300 8093 	bgt.w	800997a <_dtoa_r+0x9aa>
 8009854:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009856:	2b02      	cmp	r3, #2
 8009858:	dc57      	bgt.n	800990a <_dtoa_r+0x93a>
 800985a:	e08e      	b.n	800997a <_dtoa_r+0x9aa>
 800985c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800985e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009862:	e757      	b.n	8009714 <_dtoa_r+0x744>
 8009864:	9b08      	ldr	r3, [sp, #32]
 8009866:	1e5c      	subs	r4, r3, #1
 8009868:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800986a:	42a3      	cmp	r3, r4
 800986c:	bfb7      	itett	lt
 800986e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009870:	1b1c      	subge	r4, r3, r4
 8009872:	1ae2      	sublt	r2, r4, r3
 8009874:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8009876:	bfbe      	ittt	lt
 8009878:	940a      	strlt	r4, [sp, #40]	; 0x28
 800987a:	189b      	addlt	r3, r3, r2
 800987c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800987e:	9b08      	ldr	r3, [sp, #32]
 8009880:	bfb8      	it	lt
 8009882:	2400      	movlt	r4, #0
 8009884:	2b00      	cmp	r3, #0
 8009886:	bfbb      	ittet	lt
 8009888:	9b06      	ldrlt	r3, [sp, #24]
 800988a:	9a08      	ldrlt	r2, [sp, #32]
 800988c:	9f06      	ldrge	r7, [sp, #24]
 800988e:	1a9f      	sublt	r7, r3, r2
 8009890:	bfac      	ite	ge
 8009892:	9b08      	ldrge	r3, [sp, #32]
 8009894:	2300      	movlt	r3, #0
 8009896:	e73f      	b.n	8009718 <_dtoa_r+0x748>
 8009898:	3fe00000 	.word	0x3fe00000
 800989c:	40240000 	.word	0x40240000
 80098a0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80098a2:	9f06      	ldr	r7, [sp, #24]
 80098a4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80098a6:	e742      	b.n	800972e <_dtoa_r+0x75e>
 80098a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80098aa:	e76b      	b.n	8009784 <_dtoa_r+0x7b4>
 80098ac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80098ae:	2b01      	cmp	r3, #1
 80098b0:	dc19      	bgt.n	80098e6 <_dtoa_r+0x916>
 80098b2:	9b04      	ldr	r3, [sp, #16]
 80098b4:	b9bb      	cbnz	r3, 80098e6 <_dtoa_r+0x916>
 80098b6:	9b05      	ldr	r3, [sp, #20]
 80098b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80098bc:	b99b      	cbnz	r3, 80098e6 <_dtoa_r+0x916>
 80098be:	9b05      	ldr	r3, [sp, #20]
 80098c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80098c4:	0d1b      	lsrs	r3, r3, #20
 80098c6:	051b      	lsls	r3, r3, #20
 80098c8:	b183      	cbz	r3, 80098ec <_dtoa_r+0x91c>
 80098ca:	f04f 0801 	mov.w	r8, #1
 80098ce:	9b06      	ldr	r3, [sp, #24]
 80098d0:	3301      	adds	r3, #1
 80098d2:	9306      	str	r3, [sp, #24]
 80098d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098d6:	3301      	adds	r3, #1
 80098d8:	9309      	str	r3, [sp, #36]	; 0x24
 80098da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80098dc:	2b00      	cmp	r3, #0
 80098de:	f47f af6a 	bne.w	80097b6 <_dtoa_r+0x7e6>
 80098e2:	2001      	movs	r0, #1
 80098e4:	e76f      	b.n	80097c6 <_dtoa_r+0x7f6>
 80098e6:	f04f 0800 	mov.w	r8, #0
 80098ea:	e7f6      	b.n	80098da <_dtoa_r+0x90a>
 80098ec:	4698      	mov	r8, r3
 80098ee:	e7f4      	b.n	80098da <_dtoa_r+0x90a>
 80098f0:	f43f af7d 	beq.w	80097ee <_dtoa_r+0x81e>
 80098f4:	4618      	mov	r0, r3
 80098f6:	301c      	adds	r0, #28
 80098f8:	e772      	b.n	80097e0 <_dtoa_r+0x810>
 80098fa:	9b08      	ldr	r3, [sp, #32]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	dc36      	bgt.n	800996e <_dtoa_r+0x99e>
 8009900:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009902:	2b02      	cmp	r3, #2
 8009904:	dd33      	ble.n	800996e <_dtoa_r+0x99e>
 8009906:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800990a:	f1b9 0f00 	cmp.w	r9, #0
 800990e:	d10d      	bne.n	800992c <_dtoa_r+0x95c>
 8009910:	4621      	mov	r1, r4
 8009912:	464b      	mov	r3, r9
 8009914:	2205      	movs	r2, #5
 8009916:	4628      	mov	r0, r5
 8009918:	f000 fd3c 	bl	800a394 <__multadd>
 800991c:	4601      	mov	r1, r0
 800991e:	4604      	mov	r4, r0
 8009920:	4658      	mov	r0, fp
 8009922:	f000 ff9d 	bl	800a860 <__mcmp>
 8009926:	2800      	cmp	r0, #0
 8009928:	f73f adb8 	bgt.w	800949c <_dtoa_r+0x4cc>
 800992c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800992e:	9f03      	ldr	r7, [sp, #12]
 8009930:	ea6f 0a03 	mvn.w	sl, r3
 8009934:	f04f 0800 	mov.w	r8, #0
 8009938:	4621      	mov	r1, r4
 800993a:	4628      	mov	r0, r5
 800993c:	f000 fd08 	bl	800a350 <_Bfree>
 8009940:	2e00      	cmp	r6, #0
 8009942:	f43f aea7 	beq.w	8009694 <_dtoa_r+0x6c4>
 8009946:	f1b8 0f00 	cmp.w	r8, #0
 800994a:	d005      	beq.n	8009958 <_dtoa_r+0x988>
 800994c:	45b0      	cmp	r8, r6
 800994e:	d003      	beq.n	8009958 <_dtoa_r+0x988>
 8009950:	4641      	mov	r1, r8
 8009952:	4628      	mov	r0, r5
 8009954:	f000 fcfc 	bl	800a350 <_Bfree>
 8009958:	4631      	mov	r1, r6
 800995a:	4628      	mov	r0, r5
 800995c:	f000 fcf8 	bl	800a350 <_Bfree>
 8009960:	e698      	b.n	8009694 <_dtoa_r+0x6c4>
 8009962:	2400      	movs	r4, #0
 8009964:	4626      	mov	r6, r4
 8009966:	e7e1      	b.n	800992c <_dtoa_r+0x95c>
 8009968:	46c2      	mov	sl, r8
 800996a:	4626      	mov	r6, r4
 800996c:	e596      	b.n	800949c <_dtoa_r+0x4cc>
 800996e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009970:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009974:	2b00      	cmp	r3, #0
 8009976:	f000 80fd 	beq.w	8009b74 <_dtoa_r+0xba4>
 800997a:	2f00      	cmp	r7, #0
 800997c:	dd05      	ble.n	800998a <_dtoa_r+0x9ba>
 800997e:	4631      	mov	r1, r6
 8009980:	463a      	mov	r2, r7
 8009982:	4628      	mov	r0, r5
 8009984:	f000 fefc 	bl	800a780 <__lshift>
 8009988:	4606      	mov	r6, r0
 800998a:	f1b8 0f00 	cmp.w	r8, #0
 800998e:	d05c      	beq.n	8009a4a <_dtoa_r+0xa7a>
 8009990:	4628      	mov	r0, r5
 8009992:	6871      	ldr	r1, [r6, #4]
 8009994:	f000 fc9c 	bl	800a2d0 <_Balloc>
 8009998:	4607      	mov	r7, r0
 800999a:	b928      	cbnz	r0, 80099a8 <_dtoa_r+0x9d8>
 800999c:	4602      	mov	r2, r0
 800999e:	f240 21ea 	movw	r1, #746	; 0x2ea
 80099a2:	4b7f      	ldr	r3, [pc, #508]	; (8009ba0 <_dtoa_r+0xbd0>)
 80099a4:	f7ff bb28 	b.w	8008ff8 <_dtoa_r+0x28>
 80099a8:	6932      	ldr	r2, [r6, #16]
 80099aa:	f106 010c 	add.w	r1, r6, #12
 80099ae:	3202      	adds	r2, #2
 80099b0:	0092      	lsls	r2, r2, #2
 80099b2:	300c      	adds	r0, #12
 80099b4:	f7fd fd00 	bl	80073b8 <memcpy>
 80099b8:	2201      	movs	r2, #1
 80099ba:	4639      	mov	r1, r7
 80099bc:	4628      	mov	r0, r5
 80099be:	f000 fedf 	bl	800a780 <__lshift>
 80099c2:	46b0      	mov	r8, r6
 80099c4:	4606      	mov	r6, r0
 80099c6:	9b03      	ldr	r3, [sp, #12]
 80099c8:	3301      	adds	r3, #1
 80099ca:	9308      	str	r3, [sp, #32]
 80099cc:	9b03      	ldr	r3, [sp, #12]
 80099ce:	444b      	add	r3, r9
 80099d0:	930a      	str	r3, [sp, #40]	; 0x28
 80099d2:	9b04      	ldr	r3, [sp, #16]
 80099d4:	f003 0301 	and.w	r3, r3, #1
 80099d8:	9309      	str	r3, [sp, #36]	; 0x24
 80099da:	9b08      	ldr	r3, [sp, #32]
 80099dc:	4621      	mov	r1, r4
 80099de:	3b01      	subs	r3, #1
 80099e0:	4658      	mov	r0, fp
 80099e2:	9304      	str	r3, [sp, #16]
 80099e4:	f7ff fa66 	bl	8008eb4 <quorem>
 80099e8:	4603      	mov	r3, r0
 80099ea:	4641      	mov	r1, r8
 80099ec:	3330      	adds	r3, #48	; 0x30
 80099ee:	9006      	str	r0, [sp, #24]
 80099f0:	4658      	mov	r0, fp
 80099f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80099f4:	f000 ff34 	bl	800a860 <__mcmp>
 80099f8:	4632      	mov	r2, r6
 80099fa:	4681      	mov	r9, r0
 80099fc:	4621      	mov	r1, r4
 80099fe:	4628      	mov	r0, r5
 8009a00:	f000 ff4a 	bl	800a898 <__mdiff>
 8009a04:	68c2      	ldr	r2, [r0, #12]
 8009a06:	4607      	mov	r7, r0
 8009a08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a0a:	bb02      	cbnz	r2, 8009a4e <_dtoa_r+0xa7e>
 8009a0c:	4601      	mov	r1, r0
 8009a0e:	4658      	mov	r0, fp
 8009a10:	f000 ff26 	bl	800a860 <__mcmp>
 8009a14:	4602      	mov	r2, r0
 8009a16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a18:	4639      	mov	r1, r7
 8009a1a:	4628      	mov	r0, r5
 8009a1c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8009a20:	f000 fc96 	bl	800a350 <_Bfree>
 8009a24:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009a26:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009a28:	9f08      	ldr	r7, [sp, #32]
 8009a2a:	ea43 0102 	orr.w	r1, r3, r2
 8009a2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a30:	430b      	orrs	r3, r1
 8009a32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a34:	d10d      	bne.n	8009a52 <_dtoa_r+0xa82>
 8009a36:	2b39      	cmp	r3, #57	; 0x39
 8009a38:	d029      	beq.n	8009a8e <_dtoa_r+0xabe>
 8009a3a:	f1b9 0f00 	cmp.w	r9, #0
 8009a3e:	dd01      	ble.n	8009a44 <_dtoa_r+0xa74>
 8009a40:	9b06      	ldr	r3, [sp, #24]
 8009a42:	3331      	adds	r3, #49	; 0x31
 8009a44:	9a04      	ldr	r2, [sp, #16]
 8009a46:	7013      	strb	r3, [r2, #0]
 8009a48:	e776      	b.n	8009938 <_dtoa_r+0x968>
 8009a4a:	4630      	mov	r0, r6
 8009a4c:	e7b9      	b.n	80099c2 <_dtoa_r+0x9f2>
 8009a4e:	2201      	movs	r2, #1
 8009a50:	e7e2      	b.n	8009a18 <_dtoa_r+0xa48>
 8009a52:	f1b9 0f00 	cmp.w	r9, #0
 8009a56:	db06      	blt.n	8009a66 <_dtoa_r+0xa96>
 8009a58:	9922      	ldr	r1, [sp, #136]	; 0x88
 8009a5a:	ea41 0909 	orr.w	r9, r1, r9
 8009a5e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009a60:	ea59 0101 	orrs.w	r1, r9, r1
 8009a64:	d120      	bne.n	8009aa8 <_dtoa_r+0xad8>
 8009a66:	2a00      	cmp	r2, #0
 8009a68:	ddec      	ble.n	8009a44 <_dtoa_r+0xa74>
 8009a6a:	4659      	mov	r1, fp
 8009a6c:	2201      	movs	r2, #1
 8009a6e:	4628      	mov	r0, r5
 8009a70:	9308      	str	r3, [sp, #32]
 8009a72:	f000 fe85 	bl	800a780 <__lshift>
 8009a76:	4621      	mov	r1, r4
 8009a78:	4683      	mov	fp, r0
 8009a7a:	f000 fef1 	bl	800a860 <__mcmp>
 8009a7e:	2800      	cmp	r0, #0
 8009a80:	9b08      	ldr	r3, [sp, #32]
 8009a82:	dc02      	bgt.n	8009a8a <_dtoa_r+0xaba>
 8009a84:	d1de      	bne.n	8009a44 <_dtoa_r+0xa74>
 8009a86:	07da      	lsls	r2, r3, #31
 8009a88:	d5dc      	bpl.n	8009a44 <_dtoa_r+0xa74>
 8009a8a:	2b39      	cmp	r3, #57	; 0x39
 8009a8c:	d1d8      	bne.n	8009a40 <_dtoa_r+0xa70>
 8009a8e:	2339      	movs	r3, #57	; 0x39
 8009a90:	9a04      	ldr	r2, [sp, #16]
 8009a92:	7013      	strb	r3, [r2, #0]
 8009a94:	463b      	mov	r3, r7
 8009a96:	461f      	mov	r7, r3
 8009a98:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8009a9c:	3b01      	subs	r3, #1
 8009a9e:	2a39      	cmp	r2, #57	; 0x39
 8009aa0:	d050      	beq.n	8009b44 <_dtoa_r+0xb74>
 8009aa2:	3201      	adds	r2, #1
 8009aa4:	701a      	strb	r2, [r3, #0]
 8009aa6:	e747      	b.n	8009938 <_dtoa_r+0x968>
 8009aa8:	2a00      	cmp	r2, #0
 8009aaa:	dd03      	ble.n	8009ab4 <_dtoa_r+0xae4>
 8009aac:	2b39      	cmp	r3, #57	; 0x39
 8009aae:	d0ee      	beq.n	8009a8e <_dtoa_r+0xabe>
 8009ab0:	3301      	adds	r3, #1
 8009ab2:	e7c7      	b.n	8009a44 <_dtoa_r+0xa74>
 8009ab4:	9a08      	ldr	r2, [sp, #32]
 8009ab6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009ab8:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009abc:	428a      	cmp	r2, r1
 8009abe:	d02a      	beq.n	8009b16 <_dtoa_r+0xb46>
 8009ac0:	4659      	mov	r1, fp
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	220a      	movs	r2, #10
 8009ac6:	4628      	mov	r0, r5
 8009ac8:	f000 fc64 	bl	800a394 <__multadd>
 8009acc:	45b0      	cmp	r8, r6
 8009ace:	4683      	mov	fp, r0
 8009ad0:	f04f 0300 	mov.w	r3, #0
 8009ad4:	f04f 020a 	mov.w	r2, #10
 8009ad8:	4641      	mov	r1, r8
 8009ada:	4628      	mov	r0, r5
 8009adc:	d107      	bne.n	8009aee <_dtoa_r+0xb1e>
 8009ade:	f000 fc59 	bl	800a394 <__multadd>
 8009ae2:	4680      	mov	r8, r0
 8009ae4:	4606      	mov	r6, r0
 8009ae6:	9b08      	ldr	r3, [sp, #32]
 8009ae8:	3301      	adds	r3, #1
 8009aea:	9308      	str	r3, [sp, #32]
 8009aec:	e775      	b.n	80099da <_dtoa_r+0xa0a>
 8009aee:	f000 fc51 	bl	800a394 <__multadd>
 8009af2:	4631      	mov	r1, r6
 8009af4:	4680      	mov	r8, r0
 8009af6:	2300      	movs	r3, #0
 8009af8:	220a      	movs	r2, #10
 8009afa:	4628      	mov	r0, r5
 8009afc:	f000 fc4a 	bl	800a394 <__multadd>
 8009b00:	4606      	mov	r6, r0
 8009b02:	e7f0      	b.n	8009ae6 <_dtoa_r+0xb16>
 8009b04:	f1b9 0f00 	cmp.w	r9, #0
 8009b08:	bfcc      	ite	gt
 8009b0a:	464f      	movgt	r7, r9
 8009b0c:	2701      	movle	r7, #1
 8009b0e:	f04f 0800 	mov.w	r8, #0
 8009b12:	9a03      	ldr	r2, [sp, #12]
 8009b14:	4417      	add	r7, r2
 8009b16:	4659      	mov	r1, fp
 8009b18:	2201      	movs	r2, #1
 8009b1a:	4628      	mov	r0, r5
 8009b1c:	9308      	str	r3, [sp, #32]
 8009b1e:	f000 fe2f 	bl	800a780 <__lshift>
 8009b22:	4621      	mov	r1, r4
 8009b24:	4683      	mov	fp, r0
 8009b26:	f000 fe9b 	bl	800a860 <__mcmp>
 8009b2a:	2800      	cmp	r0, #0
 8009b2c:	dcb2      	bgt.n	8009a94 <_dtoa_r+0xac4>
 8009b2e:	d102      	bne.n	8009b36 <_dtoa_r+0xb66>
 8009b30:	9b08      	ldr	r3, [sp, #32]
 8009b32:	07db      	lsls	r3, r3, #31
 8009b34:	d4ae      	bmi.n	8009a94 <_dtoa_r+0xac4>
 8009b36:	463b      	mov	r3, r7
 8009b38:	461f      	mov	r7, r3
 8009b3a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009b3e:	2a30      	cmp	r2, #48	; 0x30
 8009b40:	d0fa      	beq.n	8009b38 <_dtoa_r+0xb68>
 8009b42:	e6f9      	b.n	8009938 <_dtoa_r+0x968>
 8009b44:	9a03      	ldr	r2, [sp, #12]
 8009b46:	429a      	cmp	r2, r3
 8009b48:	d1a5      	bne.n	8009a96 <_dtoa_r+0xac6>
 8009b4a:	2331      	movs	r3, #49	; 0x31
 8009b4c:	f10a 0a01 	add.w	sl, sl, #1
 8009b50:	e779      	b.n	8009a46 <_dtoa_r+0xa76>
 8009b52:	4b14      	ldr	r3, [pc, #80]	; (8009ba4 <_dtoa_r+0xbd4>)
 8009b54:	f7ff baa8 	b.w	80090a8 <_dtoa_r+0xd8>
 8009b58:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	f47f aa81 	bne.w	8009062 <_dtoa_r+0x92>
 8009b60:	4b11      	ldr	r3, [pc, #68]	; (8009ba8 <_dtoa_r+0xbd8>)
 8009b62:	f7ff baa1 	b.w	80090a8 <_dtoa_r+0xd8>
 8009b66:	f1b9 0f00 	cmp.w	r9, #0
 8009b6a:	dc03      	bgt.n	8009b74 <_dtoa_r+0xba4>
 8009b6c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009b6e:	2b02      	cmp	r3, #2
 8009b70:	f73f aecb 	bgt.w	800990a <_dtoa_r+0x93a>
 8009b74:	9f03      	ldr	r7, [sp, #12]
 8009b76:	4621      	mov	r1, r4
 8009b78:	4658      	mov	r0, fp
 8009b7a:	f7ff f99b 	bl	8008eb4 <quorem>
 8009b7e:	9a03      	ldr	r2, [sp, #12]
 8009b80:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009b84:	f807 3b01 	strb.w	r3, [r7], #1
 8009b88:	1aba      	subs	r2, r7, r2
 8009b8a:	4591      	cmp	r9, r2
 8009b8c:	ddba      	ble.n	8009b04 <_dtoa_r+0xb34>
 8009b8e:	4659      	mov	r1, fp
 8009b90:	2300      	movs	r3, #0
 8009b92:	220a      	movs	r2, #10
 8009b94:	4628      	mov	r0, r5
 8009b96:	f000 fbfd 	bl	800a394 <__multadd>
 8009b9a:	4683      	mov	fp, r0
 8009b9c:	e7eb      	b.n	8009b76 <_dtoa_r+0xba6>
 8009b9e:	bf00      	nop
 8009ba0:	0800c868 	.word	0x0800c868
 8009ba4:	0800c66c 	.word	0x0800c66c
 8009ba8:	0800c7e9 	.word	0x0800c7e9

08009bac <rshift>:
 8009bac:	6903      	ldr	r3, [r0, #16]
 8009bae:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009bb2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009bb6:	f100 0414 	add.w	r4, r0, #20
 8009bba:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009bbe:	dd46      	ble.n	8009c4e <rshift+0xa2>
 8009bc0:	f011 011f 	ands.w	r1, r1, #31
 8009bc4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009bc8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009bcc:	d10c      	bne.n	8009be8 <rshift+0x3c>
 8009bce:	4629      	mov	r1, r5
 8009bd0:	f100 0710 	add.w	r7, r0, #16
 8009bd4:	42b1      	cmp	r1, r6
 8009bd6:	d335      	bcc.n	8009c44 <rshift+0x98>
 8009bd8:	1a9b      	subs	r3, r3, r2
 8009bda:	009b      	lsls	r3, r3, #2
 8009bdc:	1eea      	subs	r2, r5, #3
 8009bde:	4296      	cmp	r6, r2
 8009be0:	bf38      	it	cc
 8009be2:	2300      	movcc	r3, #0
 8009be4:	4423      	add	r3, r4
 8009be6:	e015      	b.n	8009c14 <rshift+0x68>
 8009be8:	46a1      	mov	r9, r4
 8009bea:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009bee:	f1c1 0820 	rsb	r8, r1, #32
 8009bf2:	40cf      	lsrs	r7, r1
 8009bf4:	f105 0e04 	add.w	lr, r5, #4
 8009bf8:	4576      	cmp	r6, lr
 8009bfa:	46f4      	mov	ip, lr
 8009bfc:	d816      	bhi.n	8009c2c <rshift+0x80>
 8009bfe:	1a9a      	subs	r2, r3, r2
 8009c00:	0092      	lsls	r2, r2, #2
 8009c02:	3a04      	subs	r2, #4
 8009c04:	3501      	adds	r5, #1
 8009c06:	42ae      	cmp	r6, r5
 8009c08:	bf38      	it	cc
 8009c0a:	2200      	movcc	r2, #0
 8009c0c:	18a3      	adds	r3, r4, r2
 8009c0e:	50a7      	str	r7, [r4, r2]
 8009c10:	b107      	cbz	r7, 8009c14 <rshift+0x68>
 8009c12:	3304      	adds	r3, #4
 8009c14:	42a3      	cmp	r3, r4
 8009c16:	eba3 0204 	sub.w	r2, r3, r4
 8009c1a:	bf08      	it	eq
 8009c1c:	2300      	moveq	r3, #0
 8009c1e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009c22:	6102      	str	r2, [r0, #16]
 8009c24:	bf08      	it	eq
 8009c26:	6143      	streq	r3, [r0, #20]
 8009c28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009c2c:	f8dc c000 	ldr.w	ip, [ip]
 8009c30:	fa0c fc08 	lsl.w	ip, ip, r8
 8009c34:	ea4c 0707 	orr.w	r7, ip, r7
 8009c38:	f849 7b04 	str.w	r7, [r9], #4
 8009c3c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009c40:	40cf      	lsrs	r7, r1
 8009c42:	e7d9      	b.n	8009bf8 <rshift+0x4c>
 8009c44:	f851 cb04 	ldr.w	ip, [r1], #4
 8009c48:	f847 cf04 	str.w	ip, [r7, #4]!
 8009c4c:	e7c2      	b.n	8009bd4 <rshift+0x28>
 8009c4e:	4623      	mov	r3, r4
 8009c50:	e7e0      	b.n	8009c14 <rshift+0x68>

08009c52 <__hexdig_fun>:
 8009c52:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009c56:	2b09      	cmp	r3, #9
 8009c58:	d802      	bhi.n	8009c60 <__hexdig_fun+0xe>
 8009c5a:	3820      	subs	r0, #32
 8009c5c:	b2c0      	uxtb	r0, r0
 8009c5e:	4770      	bx	lr
 8009c60:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009c64:	2b05      	cmp	r3, #5
 8009c66:	d801      	bhi.n	8009c6c <__hexdig_fun+0x1a>
 8009c68:	3847      	subs	r0, #71	; 0x47
 8009c6a:	e7f7      	b.n	8009c5c <__hexdig_fun+0xa>
 8009c6c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009c70:	2b05      	cmp	r3, #5
 8009c72:	d801      	bhi.n	8009c78 <__hexdig_fun+0x26>
 8009c74:	3827      	subs	r0, #39	; 0x27
 8009c76:	e7f1      	b.n	8009c5c <__hexdig_fun+0xa>
 8009c78:	2000      	movs	r0, #0
 8009c7a:	4770      	bx	lr

08009c7c <__gethex>:
 8009c7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c80:	b08b      	sub	sp, #44	; 0x2c
 8009c82:	9305      	str	r3, [sp, #20]
 8009c84:	4bb2      	ldr	r3, [pc, #712]	; (8009f50 <__gethex+0x2d4>)
 8009c86:	9002      	str	r0, [sp, #8]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	468b      	mov	fp, r1
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	4690      	mov	r8, r2
 8009c90:	9303      	str	r3, [sp, #12]
 8009c92:	f7f6 fa67 	bl	8000164 <strlen>
 8009c96:	4682      	mov	sl, r0
 8009c98:	9b03      	ldr	r3, [sp, #12]
 8009c9a:	f8db 2000 	ldr.w	r2, [fp]
 8009c9e:	4403      	add	r3, r0
 8009ca0:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009ca4:	9306      	str	r3, [sp, #24]
 8009ca6:	1c93      	adds	r3, r2, #2
 8009ca8:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009cac:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009cb0:	32fe      	adds	r2, #254	; 0xfe
 8009cb2:	18d1      	adds	r1, r2, r3
 8009cb4:	461f      	mov	r7, r3
 8009cb6:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009cba:	9101      	str	r1, [sp, #4]
 8009cbc:	2830      	cmp	r0, #48	; 0x30
 8009cbe:	d0f8      	beq.n	8009cb2 <__gethex+0x36>
 8009cc0:	f7ff ffc7 	bl	8009c52 <__hexdig_fun>
 8009cc4:	4604      	mov	r4, r0
 8009cc6:	2800      	cmp	r0, #0
 8009cc8:	d13a      	bne.n	8009d40 <__gethex+0xc4>
 8009cca:	4652      	mov	r2, sl
 8009ccc:	4638      	mov	r0, r7
 8009cce:	9903      	ldr	r1, [sp, #12]
 8009cd0:	f001 fa18 	bl	800b104 <strncmp>
 8009cd4:	4605      	mov	r5, r0
 8009cd6:	2800      	cmp	r0, #0
 8009cd8:	d166      	bne.n	8009da8 <__gethex+0x12c>
 8009cda:	f817 000a 	ldrb.w	r0, [r7, sl]
 8009cde:	eb07 060a 	add.w	r6, r7, sl
 8009ce2:	f7ff ffb6 	bl	8009c52 <__hexdig_fun>
 8009ce6:	2800      	cmp	r0, #0
 8009ce8:	d060      	beq.n	8009dac <__gethex+0x130>
 8009cea:	4633      	mov	r3, r6
 8009cec:	7818      	ldrb	r0, [r3, #0]
 8009cee:	461f      	mov	r7, r3
 8009cf0:	2830      	cmp	r0, #48	; 0x30
 8009cf2:	f103 0301 	add.w	r3, r3, #1
 8009cf6:	d0f9      	beq.n	8009cec <__gethex+0x70>
 8009cf8:	f7ff ffab 	bl	8009c52 <__hexdig_fun>
 8009cfc:	2301      	movs	r3, #1
 8009cfe:	fab0 f480 	clz	r4, r0
 8009d02:	4635      	mov	r5, r6
 8009d04:	0964      	lsrs	r4, r4, #5
 8009d06:	9301      	str	r3, [sp, #4]
 8009d08:	463a      	mov	r2, r7
 8009d0a:	4616      	mov	r6, r2
 8009d0c:	7830      	ldrb	r0, [r6, #0]
 8009d0e:	3201      	adds	r2, #1
 8009d10:	f7ff ff9f 	bl	8009c52 <__hexdig_fun>
 8009d14:	2800      	cmp	r0, #0
 8009d16:	d1f8      	bne.n	8009d0a <__gethex+0x8e>
 8009d18:	4652      	mov	r2, sl
 8009d1a:	4630      	mov	r0, r6
 8009d1c:	9903      	ldr	r1, [sp, #12]
 8009d1e:	f001 f9f1 	bl	800b104 <strncmp>
 8009d22:	b980      	cbnz	r0, 8009d46 <__gethex+0xca>
 8009d24:	b94d      	cbnz	r5, 8009d3a <__gethex+0xbe>
 8009d26:	eb06 050a 	add.w	r5, r6, sl
 8009d2a:	462a      	mov	r2, r5
 8009d2c:	4616      	mov	r6, r2
 8009d2e:	7830      	ldrb	r0, [r6, #0]
 8009d30:	3201      	adds	r2, #1
 8009d32:	f7ff ff8e 	bl	8009c52 <__hexdig_fun>
 8009d36:	2800      	cmp	r0, #0
 8009d38:	d1f8      	bne.n	8009d2c <__gethex+0xb0>
 8009d3a:	1bad      	subs	r5, r5, r6
 8009d3c:	00ad      	lsls	r5, r5, #2
 8009d3e:	e004      	b.n	8009d4a <__gethex+0xce>
 8009d40:	2400      	movs	r4, #0
 8009d42:	4625      	mov	r5, r4
 8009d44:	e7e0      	b.n	8009d08 <__gethex+0x8c>
 8009d46:	2d00      	cmp	r5, #0
 8009d48:	d1f7      	bne.n	8009d3a <__gethex+0xbe>
 8009d4a:	7833      	ldrb	r3, [r6, #0]
 8009d4c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009d50:	2b50      	cmp	r3, #80	; 0x50
 8009d52:	d139      	bne.n	8009dc8 <__gethex+0x14c>
 8009d54:	7873      	ldrb	r3, [r6, #1]
 8009d56:	2b2b      	cmp	r3, #43	; 0x2b
 8009d58:	d02a      	beq.n	8009db0 <__gethex+0x134>
 8009d5a:	2b2d      	cmp	r3, #45	; 0x2d
 8009d5c:	d02c      	beq.n	8009db8 <__gethex+0x13c>
 8009d5e:	f04f 0900 	mov.w	r9, #0
 8009d62:	1c71      	adds	r1, r6, #1
 8009d64:	7808      	ldrb	r0, [r1, #0]
 8009d66:	f7ff ff74 	bl	8009c52 <__hexdig_fun>
 8009d6a:	1e43      	subs	r3, r0, #1
 8009d6c:	b2db      	uxtb	r3, r3
 8009d6e:	2b18      	cmp	r3, #24
 8009d70:	d82a      	bhi.n	8009dc8 <__gethex+0x14c>
 8009d72:	f1a0 0210 	sub.w	r2, r0, #16
 8009d76:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009d7a:	f7ff ff6a 	bl	8009c52 <__hexdig_fun>
 8009d7e:	1e43      	subs	r3, r0, #1
 8009d80:	b2db      	uxtb	r3, r3
 8009d82:	2b18      	cmp	r3, #24
 8009d84:	d91b      	bls.n	8009dbe <__gethex+0x142>
 8009d86:	f1b9 0f00 	cmp.w	r9, #0
 8009d8a:	d000      	beq.n	8009d8e <__gethex+0x112>
 8009d8c:	4252      	negs	r2, r2
 8009d8e:	4415      	add	r5, r2
 8009d90:	f8cb 1000 	str.w	r1, [fp]
 8009d94:	b1d4      	cbz	r4, 8009dcc <__gethex+0x150>
 8009d96:	9b01      	ldr	r3, [sp, #4]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	bf14      	ite	ne
 8009d9c:	2700      	movne	r7, #0
 8009d9e:	2706      	moveq	r7, #6
 8009da0:	4638      	mov	r0, r7
 8009da2:	b00b      	add	sp, #44	; 0x2c
 8009da4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009da8:	463e      	mov	r6, r7
 8009daa:	4625      	mov	r5, r4
 8009dac:	2401      	movs	r4, #1
 8009dae:	e7cc      	b.n	8009d4a <__gethex+0xce>
 8009db0:	f04f 0900 	mov.w	r9, #0
 8009db4:	1cb1      	adds	r1, r6, #2
 8009db6:	e7d5      	b.n	8009d64 <__gethex+0xe8>
 8009db8:	f04f 0901 	mov.w	r9, #1
 8009dbc:	e7fa      	b.n	8009db4 <__gethex+0x138>
 8009dbe:	230a      	movs	r3, #10
 8009dc0:	fb03 0202 	mla	r2, r3, r2, r0
 8009dc4:	3a10      	subs	r2, #16
 8009dc6:	e7d6      	b.n	8009d76 <__gethex+0xfa>
 8009dc8:	4631      	mov	r1, r6
 8009dca:	e7e1      	b.n	8009d90 <__gethex+0x114>
 8009dcc:	4621      	mov	r1, r4
 8009dce:	1bf3      	subs	r3, r6, r7
 8009dd0:	3b01      	subs	r3, #1
 8009dd2:	2b07      	cmp	r3, #7
 8009dd4:	dc0a      	bgt.n	8009dec <__gethex+0x170>
 8009dd6:	9802      	ldr	r0, [sp, #8]
 8009dd8:	f000 fa7a 	bl	800a2d0 <_Balloc>
 8009ddc:	4604      	mov	r4, r0
 8009dde:	b940      	cbnz	r0, 8009df2 <__gethex+0x176>
 8009de0:	4602      	mov	r2, r0
 8009de2:	21de      	movs	r1, #222	; 0xde
 8009de4:	4b5b      	ldr	r3, [pc, #364]	; (8009f54 <__gethex+0x2d8>)
 8009de6:	485c      	ldr	r0, [pc, #368]	; (8009f58 <__gethex+0x2dc>)
 8009de8:	f001 f9ae 	bl	800b148 <__assert_func>
 8009dec:	3101      	adds	r1, #1
 8009dee:	105b      	asrs	r3, r3, #1
 8009df0:	e7ef      	b.n	8009dd2 <__gethex+0x156>
 8009df2:	f04f 0b00 	mov.w	fp, #0
 8009df6:	f100 0914 	add.w	r9, r0, #20
 8009dfa:	f1ca 0301 	rsb	r3, sl, #1
 8009dfe:	f8cd 9010 	str.w	r9, [sp, #16]
 8009e02:	f8cd b004 	str.w	fp, [sp, #4]
 8009e06:	9308      	str	r3, [sp, #32]
 8009e08:	42b7      	cmp	r7, r6
 8009e0a:	d33f      	bcc.n	8009e8c <__gethex+0x210>
 8009e0c:	9f04      	ldr	r7, [sp, #16]
 8009e0e:	9b01      	ldr	r3, [sp, #4]
 8009e10:	f847 3b04 	str.w	r3, [r7], #4
 8009e14:	eba7 0709 	sub.w	r7, r7, r9
 8009e18:	10bf      	asrs	r7, r7, #2
 8009e1a:	6127      	str	r7, [r4, #16]
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	f000 fb49 	bl	800a4b4 <__hi0bits>
 8009e22:	017f      	lsls	r7, r7, #5
 8009e24:	f8d8 6000 	ldr.w	r6, [r8]
 8009e28:	1a3f      	subs	r7, r7, r0
 8009e2a:	42b7      	cmp	r7, r6
 8009e2c:	dd62      	ble.n	8009ef4 <__gethex+0x278>
 8009e2e:	1bbf      	subs	r7, r7, r6
 8009e30:	4639      	mov	r1, r7
 8009e32:	4620      	mov	r0, r4
 8009e34:	f000 fee3 	bl	800abfe <__any_on>
 8009e38:	4682      	mov	sl, r0
 8009e3a:	b1a8      	cbz	r0, 8009e68 <__gethex+0x1ec>
 8009e3c:	f04f 0a01 	mov.w	sl, #1
 8009e40:	1e7b      	subs	r3, r7, #1
 8009e42:	1159      	asrs	r1, r3, #5
 8009e44:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009e48:	f003 021f 	and.w	r2, r3, #31
 8009e4c:	fa0a f202 	lsl.w	r2, sl, r2
 8009e50:	420a      	tst	r2, r1
 8009e52:	d009      	beq.n	8009e68 <__gethex+0x1ec>
 8009e54:	4553      	cmp	r3, sl
 8009e56:	dd05      	ble.n	8009e64 <__gethex+0x1e8>
 8009e58:	4620      	mov	r0, r4
 8009e5a:	1eb9      	subs	r1, r7, #2
 8009e5c:	f000 fecf 	bl	800abfe <__any_on>
 8009e60:	2800      	cmp	r0, #0
 8009e62:	d144      	bne.n	8009eee <__gethex+0x272>
 8009e64:	f04f 0a02 	mov.w	sl, #2
 8009e68:	4639      	mov	r1, r7
 8009e6a:	4620      	mov	r0, r4
 8009e6c:	f7ff fe9e 	bl	8009bac <rshift>
 8009e70:	443d      	add	r5, r7
 8009e72:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009e76:	42ab      	cmp	r3, r5
 8009e78:	da4a      	bge.n	8009f10 <__gethex+0x294>
 8009e7a:	4621      	mov	r1, r4
 8009e7c:	9802      	ldr	r0, [sp, #8]
 8009e7e:	f000 fa67 	bl	800a350 <_Bfree>
 8009e82:	2300      	movs	r3, #0
 8009e84:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009e86:	27a3      	movs	r7, #163	; 0xa3
 8009e88:	6013      	str	r3, [r2, #0]
 8009e8a:	e789      	b.n	8009da0 <__gethex+0x124>
 8009e8c:	1e73      	subs	r3, r6, #1
 8009e8e:	9a06      	ldr	r2, [sp, #24]
 8009e90:	9307      	str	r3, [sp, #28]
 8009e92:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009e96:	4293      	cmp	r3, r2
 8009e98:	d019      	beq.n	8009ece <__gethex+0x252>
 8009e9a:	f1bb 0f20 	cmp.w	fp, #32
 8009e9e:	d107      	bne.n	8009eb0 <__gethex+0x234>
 8009ea0:	9b04      	ldr	r3, [sp, #16]
 8009ea2:	9a01      	ldr	r2, [sp, #4]
 8009ea4:	f843 2b04 	str.w	r2, [r3], #4
 8009ea8:	9304      	str	r3, [sp, #16]
 8009eaa:	2300      	movs	r3, #0
 8009eac:	469b      	mov	fp, r3
 8009eae:	9301      	str	r3, [sp, #4]
 8009eb0:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009eb4:	f7ff fecd 	bl	8009c52 <__hexdig_fun>
 8009eb8:	9b01      	ldr	r3, [sp, #4]
 8009eba:	f000 000f 	and.w	r0, r0, #15
 8009ebe:	fa00 f00b 	lsl.w	r0, r0, fp
 8009ec2:	4303      	orrs	r3, r0
 8009ec4:	9301      	str	r3, [sp, #4]
 8009ec6:	f10b 0b04 	add.w	fp, fp, #4
 8009eca:	9b07      	ldr	r3, [sp, #28]
 8009ecc:	e00d      	b.n	8009eea <__gethex+0x26e>
 8009ece:	9a08      	ldr	r2, [sp, #32]
 8009ed0:	1e73      	subs	r3, r6, #1
 8009ed2:	4413      	add	r3, r2
 8009ed4:	42bb      	cmp	r3, r7
 8009ed6:	d3e0      	bcc.n	8009e9a <__gethex+0x21e>
 8009ed8:	4618      	mov	r0, r3
 8009eda:	4652      	mov	r2, sl
 8009edc:	9903      	ldr	r1, [sp, #12]
 8009ede:	9309      	str	r3, [sp, #36]	; 0x24
 8009ee0:	f001 f910 	bl	800b104 <strncmp>
 8009ee4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ee6:	2800      	cmp	r0, #0
 8009ee8:	d1d7      	bne.n	8009e9a <__gethex+0x21e>
 8009eea:	461e      	mov	r6, r3
 8009eec:	e78c      	b.n	8009e08 <__gethex+0x18c>
 8009eee:	f04f 0a03 	mov.w	sl, #3
 8009ef2:	e7b9      	b.n	8009e68 <__gethex+0x1ec>
 8009ef4:	da09      	bge.n	8009f0a <__gethex+0x28e>
 8009ef6:	1bf7      	subs	r7, r6, r7
 8009ef8:	4621      	mov	r1, r4
 8009efa:	463a      	mov	r2, r7
 8009efc:	9802      	ldr	r0, [sp, #8]
 8009efe:	f000 fc3f 	bl	800a780 <__lshift>
 8009f02:	4604      	mov	r4, r0
 8009f04:	1bed      	subs	r5, r5, r7
 8009f06:	f100 0914 	add.w	r9, r0, #20
 8009f0a:	f04f 0a00 	mov.w	sl, #0
 8009f0e:	e7b0      	b.n	8009e72 <__gethex+0x1f6>
 8009f10:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009f14:	42a8      	cmp	r0, r5
 8009f16:	dd72      	ble.n	8009ffe <__gethex+0x382>
 8009f18:	1b45      	subs	r5, r0, r5
 8009f1a:	42ae      	cmp	r6, r5
 8009f1c:	dc35      	bgt.n	8009f8a <__gethex+0x30e>
 8009f1e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009f22:	2b02      	cmp	r3, #2
 8009f24:	d029      	beq.n	8009f7a <__gethex+0x2fe>
 8009f26:	2b03      	cmp	r3, #3
 8009f28:	d02b      	beq.n	8009f82 <__gethex+0x306>
 8009f2a:	2b01      	cmp	r3, #1
 8009f2c:	d11c      	bne.n	8009f68 <__gethex+0x2ec>
 8009f2e:	42ae      	cmp	r6, r5
 8009f30:	d11a      	bne.n	8009f68 <__gethex+0x2ec>
 8009f32:	2e01      	cmp	r6, #1
 8009f34:	d112      	bne.n	8009f5c <__gethex+0x2e0>
 8009f36:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009f3a:	9a05      	ldr	r2, [sp, #20]
 8009f3c:	2762      	movs	r7, #98	; 0x62
 8009f3e:	6013      	str	r3, [r2, #0]
 8009f40:	2301      	movs	r3, #1
 8009f42:	6123      	str	r3, [r4, #16]
 8009f44:	f8c9 3000 	str.w	r3, [r9]
 8009f48:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009f4a:	601c      	str	r4, [r3, #0]
 8009f4c:	e728      	b.n	8009da0 <__gethex+0x124>
 8009f4e:	bf00      	nop
 8009f50:	0800c8e0 	.word	0x0800c8e0
 8009f54:	0800c868 	.word	0x0800c868
 8009f58:	0800c879 	.word	0x0800c879
 8009f5c:	4620      	mov	r0, r4
 8009f5e:	1e71      	subs	r1, r6, #1
 8009f60:	f000 fe4d 	bl	800abfe <__any_on>
 8009f64:	2800      	cmp	r0, #0
 8009f66:	d1e6      	bne.n	8009f36 <__gethex+0x2ba>
 8009f68:	4621      	mov	r1, r4
 8009f6a:	9802      	ldr	r0, [sp, #8]
 8009f6c:	f000 f9f0 	bl	800a350 <_Bfree>
 8009f70:	2300      	movs	r3, #0
 8009f72:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009f74:	2750      	movs	r7, #80	; 0x50
 8009f76:	6013      	str	r3, [r2, #0]
 8009f78:	e712      	b.n	8009da0 <__gethex+0x124>
 8009f7a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d1f3      	bne.n	8009f68 <__gethex+0x2ec>
 8009f80:	e7d9      	b.n	8009f36 <__gethex+0x2ba>
 8009f82:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d1d6      	bne.n	8009f36 <__gethex+0x2ba>
 8009f88:	e7ee      	b.n	8009f68 <__gethex+0x2ec>
 8009f8a:	1e6f      	subs	r7, r5, #1
 8009f8c:	f1ba 0f00 	cmp.w	sl, #0
 8009f90:	d132      	bne.n	8009ff8 <__gethex+0x37c>
 8009f92:	b127      	cbz	r7, 8009f9e <__gethex+0x322>
 8009f94:	4639      	mov	r1, r7
 8009f96:	4620      	mov	r0, r4
 8009f98:	f000 fe31 	bl	800abfe <__any_on>
 8009f9c:	4682      	mov	sl, r0
 8009f9e:	2101      	movs	r1, #1
 8009fa0:	117b      	asrs	r3, r7, #5
 8009fa2:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009fa6:	f007 071f 	and.w	r7, r7, #31
 8009faa:	fa01 f707 	lsl.w	r7, r1, r7
 8009fae:	421f      	tst	r7, r3
 8009fb0:	f04f 0702 	mov.w	r7, #2
 8009fb4:	4629      	mov	r1, r5
 8009fb6:	4620      	mov	r0, r4
 8009fb8:	bf18      	it	ne
 8009fba:	f04a 0a02 	orrne.w	sl, sl, #2
 8009fbe:	1b76      	subs	r6, r6, r5
 8009fc0:	f7ff fdf4 	bl	8009bac <rshift>
 8009fc4:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009fc8:	f1ba 0f00 	cmp.w	sl, #0
 8009fcc:	d048      	beq.n	800a060 <__gethex+0x3e4>
 8009fce:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009fd2:	2b02      	cmp	r3, #2
 8009fd4:	d015      	beq.n	800a002 <__gethex+0x386>
 8009fd6:	2b03      	cmp	r3, #3
 8009fd8:	d017      	beq.n	800a00a <__gethex+0x38e>
 8009fda:	2b01      	cmp	r3, #1
 8009fdc:	d109      	bne.n	8009ff2 <__gethex+0x376>
 8009fde:	f01a 0f02 	tst.w	sl, #2
 8009fe2:	d006      	beq.n	8009ff2 <__gethex+0x376>
 8009fe4:	f8d9 0000 	ldr.w	r0, [r9]
 8009fe8:	ea4a 0a00 	orr.w	sl, sl, r0
 8009fec:	f01a 0f01 	tst.w	sl, #1
 8009ff0:	d10e      	bne.n	800a010 <__gethex+0x394>
 8009ff2:	f047 0710 	orr.w	r7, r7, #16
 8009ff6:	e033      	b.n	800a060 <__gethex+0x3e4>
 8009ff8:	f04f 0a01 	mov.w	sl, #1
 8009ffc:	e7cf      	b.n	8009f9e <__gethex+0x322>
 8009ffe:	2701      	movs	r7, #1
 800a000:	e7e2      	b.n	8009fc8 <__gethex+0x34c>
 800a002:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a004:	f1c3 0301 	rsb	r3, r3, #1
 800a008:	9315      	str	r3, [sp, #84]	; 0x54
 800a00a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d0f0      	beq.n	8009ff2 <__gethex+0x376>
 800a010:	f04f 0c00 	mov.w	ip, #0
 800a014:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a018:	f104 0314 	add.w	r3, r4, #20
 800a01c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a020:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a024:	4618      	mov	r0, r3
 800a026:	f853 2b04 	ldr.w	r2, [r3], #4
 800a02a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a02e:	d01c      	beq.n	800a06a <__gethex+0x3ee>
 800a030:	3201      	adds	r2, #1
 800a032:	6002      	str	r2, [r0, #0]
 800a034:	2f02      	cmp	r7, #2
 800a036:	f104 0314 	add.w	r3, r4, #20
 800a03a:	d13d      	bne.n	800a0b8 <__gethex+0x43c>
 800a03c:	f8d8 2000 	ldr.w	r2, [r8]
 800a040:	3a01      	subs	r2, #1
 800a042:	42b2      	cmp	r2, r6
 800a044:	d10a      	bne.n	800a05c <__gethex+0x3e0>
 800a046:	2201      	movs	r2, #1
 800a048:	1171      	asrs	r1, r6, #5
 800a04a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a04e:	f006 061f 	and.w	r6, r6, #31
 800a052:	fa02 f606 	lsl.w	r6, r2, r6
 800a056:	421e      	tst	r6, r3
 800a058:	bf18      	it	ne
 800a05a:	4617      	movne	r7, r2
 800a05c:	f047 0720 	orr.w	r7, r7, #32
 800a060:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a062:	601c      	str	r4, [r3, #0]
 800a064:	9b05      	ldr	r3, [sp, #20]
 800a066:	601d      	str	r5, [r3, #0]
 800a068:	e69a      	b.n	8009da0 <__gethex+0x124>
 800a06a:	4299      	cmp	r1, r3
 800a06c:	f843 cc04 	str.w	ip, [r3, #-4]
 800a070:	d8d8      	bhi.n	800a024 <__gethex+0x3a8>
 800a072:	68a3      	ldr	r3, [r4, #8]
 800a074:	459b      	cmp	fp, r3
 800a076:	db17      	blt.n	800a0a8 <__gethex+0x42c>
 800a078:	6861      	ldr	r1, [r4, #4]
 800a07a:	9802      	ldr	r0, [sp, #8]
 800a07c:	3101      	adds	r1, #1
 800a07e:	f000 f927 	bl	800a2d0 <_Balloc>
 800a082:	4681      	mov	r9, r0
 800a084:	b918      	cbnz	r0, 800a08e <__gethex+0x412>
 800a086:	4602      	mov	r2, r0
 800a088:	2184      	movs	r1, #132	; 0x84
 800a08a:	4b19      	ldr	r3, [pc, #100]	; (800a0f0 <__gethex+0x474>)
 800a08c:	e6ab      	b.n	8009de6 <__gethex+0x16a>
 800a08e:	6922      	ldr	r2, [r4, #16]
 800a090:	f104 010c 	add.w	r1, r4, #12
 800a094:	3202      	adds	r2, #2
 800a096:	0092      	lsls	r2, r2, #2
 800a098:	300c      	adds	r0, #12
 800a09a:	f7fd f98d 	bl	80073b8 <memcpy>
 800a09e:	4621      	mov	r1, r4
 800a0a0:	9802      	ldr	r0, [sp, #8]
 800a0a2:	f000 f955 	bl	800a350 <_Bfree>
 800a0a6:	464c      	mov	r4, r9
 800a0a8:	6923      	ldr	r3, [r4, #16]
 800a0aa:	1c5a      	adds	r2, r3, #1
 800a0ac:	6122      	str	r2, [r4, #16]
 800a0ae:	2201      	movs	r2, #1
 800a0b0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a0b4:	615a      	str	r2, [r3, #20]
 800a0b6:	e7bd      	b.n	800a034 <__gethex+0x3b8>
 800a0b8:	6922      	ldr	r2, [r4, #16]
 800a0ba:	455a      	cmp	r2, fp
 800a0bc:	dd0b      	ble.n	800a0d6 <__gethex+0x45a>
 800a0be:	2101      	movs	r1, #1
 800a0c0:	4620      	mov	r0, r4
 800a0c2:	f7ff fd73 	bl	8009bac <rshift>
 800a0c6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a0ca:	3501      	adds	r5, #1
 800a0cc:	42ab      	cmp	r3, r5
 800a0ce:	f6ff aed4 	blt.w	8009e7a <__gethex+0x1fe>
 800a0d2:	2701      	movs	r7, #1
 800a0d4:	e7c2      	b.n	800a05c <__gethex+0x3e0>
 800a0d6:	f016 061f 	ands.w	r6, r6, #31
 800a0da:	d0fa      	beq.n	800a0d2 <__gethex+0x456>
 800a0dc:	4453      	add	r3, sl
 800a0de:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a0e2:	f000 f9e7 	bl	800a4b4 <__hi0bits>
 800a0e6:	f1c6 0620 	rsb	r6, r6, #32
 800a0ea:	42b0      	cmp	r0, r6
 800a0ec:	dbe7      	blt.n	800a0be <__gethex+0x442>
 800a0ee:	e7f0      	b.n	800a0d2 <__gethex+0x456>
 800a0f0:	0800c868 	.word	0x0800c868

0800a0f4 <L_shift>:
 800a0f4:	f1c2 0208 	rsb	r2, r2, #8
 800a0f8:	0092      	lsls	r2, r2, #2
 800a0fa:	b570      	push	{r4, r5, r6, lr}
 800a0fc:	f1c2 0620 	rsb	r6, r2, #32
 800a100:	6843      	ldr	r3, [r0, #4]
 800a102:	6804      	ldr	r4, [r0, #0]
 800a104:	fa03 f506 	lsl.w	r5, r3, r6
 800a108:	432c      	orrs	r4, r5
 800a10a:	40d3      	lsrs	r3, r2
 800a10c:	6004      	str	r4, [r0, #0]
 800a10e:	f840 3f04 	str.w	r3, [r0, #4]!
 800a112:	4288      	cmp	r0, r1
 800a114:	d3f4      	bcc.n	800a100 <L_shift+0xc>
 800a116:	bd70      	pop	{r4, r5, r6, pc}

0800a118 <__match>:
 800a118:	b530      	push	{r4, r5, lr}
 800a11a:	6803      	ldr	r3, [r0, #0]
 800a11c:	3301      	adds	r3, #1
 800a11e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a122:	b914      	cbnz	r4, 800a12a <__match+0x12>
 800a124:	6003      	str	r3, [r0, #0]
 800a126:	2001      	movs	r0, #1
 800a128:	bd30      	pop	{r4, r5, pc}
 800a12a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a12e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a132:	2d19      	cmp	r5, #25
 800a134:	bf98      	it	ls
 800a136:	3220      	addls	r2, #32
 800a138:	42a2      	cmp	r2, r4
 800a13a:	d0f0      	beq.n	800a11e <__match+0x6>
 800a13c:	2000      	movs	r0, #0
 800a13e:	e7f3      	b.n	800a128 <__match+0x10>

0800a140 <__hexnan>:
 800a140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a144:	2500      	movs	r5, #0
 800a146:	680b      	ldr	r3, [r1, #0]
 800a148:	4682      	mov	sl, r0
 800a14a:	115e      	asrs	r6, r3, #5
 800a14c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a150:	f013 031f 	ands.w	r3, r3, #31
 800a154:	bf18      	it	ne
 800a156:	3604      	addne	r6, #4
 800a158:	1f37      	subs	r7, r6, #4
 800a15a:	46b9      	mov	r9, r7
 800a15c:	463c      	mov	r4, r7
 800a15e:	46ab      	mov	fp, r5
 800a160:	b087      	sub	sp, #28
 800a162:	4690      	mov	r8, r2
 800a164:	6802      	ldr	r2, [r0, #0]
 800a166:	9301      	str	r3, [sp, #4]
 800a168:	f846 5c04 	str.w	r5, [r6, #-4]
 800a16c:	9502      	str	r5, [sp, #8]
 800a16e:	7851      	ldrb	r1, [r2, #1]
 800a170:	1c53      	adds	r3, r2, #1
 800a172:	9303      	str	r3, [sp, #12]
 800a174:	b341      	cbz	r1, 800a1c8 <__hexnan+0x88>
 800a176:	4608      	mov	r0, r1
 800a178:	9205      	str	r2, [sp, #20]
 800a17a:	9104      	str	r1, [sp, #16]
 800a17c:	f7ff fd69 	bl	8009c52 <__hexdig_fun>
 800a180:	2800      	cmp	r0, #0
 800a182:	d14f      	bne.n	800a224 <__hexnan+0xe4>
 800a184:	9904      	ldr	r1, [sp, #16]
 800a186:	9a05      	ldr	r2, [sp, #20]
 800a188:	2920      	cmp	r1, #32
 800a18a:	d818      	bhi.n	800a1be <__hexnan+0x7e>
 800a18c:	9b02      	ldr	r3, [sp, #8]
 800a18e:	459b      	cmp	fp, r3
 800a190:	dd13      	ble.n	800a1ba <__hexnan+0x7a>
 800a192:	454c      	cmp	r4, r9
 800a194:	d206      	bcs.n	800a1a4 <__hexnan+0x64>
 800a196:	2d07      	cmp	r5, #7
 800a198:	dc04      	bgt.n	800a1a4 <__hexnan+0x64>
 800a19a:	462a      	mov	r2, r5
 800a19c:	4649      	mov	r1, r9
 800a19e:	4620      	mov	r0, r4
 800a1a0:	f7ff ffa8 	bl	800a0f4 <L_shift>
 800a1a4:	4544      	cmp	r4, r8
 800a1a6:	d950      	bls.n	800a24a <__hexnan+0x10a>
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	f1a4 0904 	sub.w	r9, r4, #4
 800a1ae:	f844 3c04 	str.w	r3, [r4, #-4]
 800a1b2:	461d      	mov	r5, r3
 800a1b4:	464c      	mov	r4, r9
 800a1b6:	f8cd b008 	str.w	fp, [sp, #8]
 800a1ba:	9a03      	ldr	r2, [sp, #12]
 800a1bc:	e7d7      	b.n	800a16e <__hexnan+0x2e>
 800a1be:	2929      	cmp	r1, #41	; 0x29
 800a1c0:	d156      	bne.n	800a270 <__hexnan+0x130>
 800a1c2:	3202      	adds	r2, #2
 800a1c4:	f8ca 2000 	str.w	r2, [sl]
 800a1c8:	f1bb 0f00 	cmp.w	fp, #0
 800a1cc:	d050      	beq.n	800a270 <__hexnan+0x130>
 800a1ce:	454c      	cmp	r4, r9
 800a1d0:	d206      	bcs.n	800a1e0 <__hexnan+0xa0>
 800a1d2:	2d07      	cmp	r5, #7
 800a1d4:	dc04      	bgt.n	800a1e0 <__hexnan+0xa0>
 800a1d6:	462a      	mov	r2, r5
 800a1d8:	4649      	mov	r1, r9
 800a1da:	4620      	mov	r0, r4
 800a1dc:	f7ff ff8a 	bl	800a0f4 <L_shift>
 800a1e0:	4544      	cmp	r4, r8
 800a1e2:	d934      	bls.n	800a24e <__hexnan+0x10e>
 800a1e4:	4623      	mov	r3, r4
 800a1e6:	f1a8 0204 	sub.w	r2, r8, #4
 800a1ea:	f853 1b04 	ldr.w	r1, [r3], #4
 800a1ee:	429f      	cmp	r7, r3
 800a1f0:	f842 1f04 	str.w	r1, [r2, #4]!
 800a1f4:	d2f9      	bcs.n	800a1ea <__hexnan+0xaa>
 800a1f6:	1b3b      	subs	r3, r7, r4
 800a1f8:	f023 0303 	bic.w	r3, r3, #3
 800a1fc:	3304      	adds	r3, #4
 800a1fe:	3401      	adds	r4, #1
 800a200:	3e03      	subs	r6, #3
 800a202:	42b4      	cmp	r4, r6
 800a204:	bf88      	it	hi
 800a206:	2304      	movhi	r3, #4
 800a208:	2200      	movs	r2, #0
 800a20a:	4443      	add	r3, r8
 800a20c:	f843 2b04 	str.w	r2, [r3], #4
 800a210:	429f      	cmp	r7, r3
 800a212:	d2fb      	bcs.n	800a20c <__hexnan+0xcc>
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	b91b      	cbnz	r3, 800a220 <__hexnan+0xe0>
 800a218:	4547      	cmp	r7, r8
 800a21a:	d127      	bne.n	800a26c <__hexnan+0x12c>
 800a21c:	2301      	movs	r3, #1
 800a21e:	603b      	str	r3, [r7, #0]
 800a220:	2005      	movs	r0, #5
 800a222:	e026      	b.n	800a272 <__hexnan+0x132>
 800a224:	3501      	adds	r5, #1
 800a226:	2d08      	cmp	r5, #8
 800a228:	f10b 0b01 	add.w	fp, fp, #1
 800a22c:	dd06      	ble.n	800a23c <__hexnan+0xfc>
 800a22e:	4544      	cmp	r4, r8
 800a230:	d9c3      	bls.n	800a1ba <__hexnan+0x7a>
 800a232:	2300      	movs	r3, #0
 800a234:	2501      	movs	r5, #1
 800a236:	f844 3c04 	str.w	r3, [r4, #-4]
 800a23a:	3c04      	subs	r4, #4
 800a23c:	6822      	ldr	r2, [r4, #0]
 800a23e:	f000 000f 	and.w	r0, r0, #15
 800a242:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800a246:	6022      	str	r2, [r4, #0]
 800a248:	e7b7      	b.n	800a1ba <__hexnan+0x7a>
 800a24a:	2508      	movs	r5, #8
 800a24c:	e7b5      	b.n	800a1ba <__hexnan+0x7a>
 800a24e:	9b01      	ldr	r3, [sp, #4]
 800a250:	2b00      	cmp	r3, #0
 800a252:	d0df      	beq.n	800a214 <__hexnan+0xd4>
 800a254:	f04f 32ff 	mov.w	r2, #4294967295
 800a258:	f1c3 0320 	rsb	r3, r3, #32
 800a25c:	fa22 f303 	lsr.w	r3, r2, r3
 800a260:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a264:	401a      	ands	r2, r3
 800a266:	f846 2c04 	str.w	r2, [r6, #-4]
 800a26a:	e7d3      	b.n	800a214 <__hexnan+0xd4>
 800a26c:	3f04      	subs	r7, #4
 800a26e:	e7d1      	b.n	800a214 <__hexnan+0xd4>
 800a270:	2004      	movs	r0, #4
 800a272:	b007      	add	sp, #28
 800a274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a278 <_localeconv_r>:
 800a278:	4800      	ldr	r0, [pc, #0]	; (800a27c <_localeconv_r+0x4>)
 800a27a:	4770      	bx	lr
 800a27c:	20000170 	.word	0x20000170

0800a280 <malloc>:
 800a280:	4b02      	ldr	r3, [pc, #8]	; (800a28c <malloc+0xc>)
 800a282:	4601      	mov	r1, r0
 800a284:	6818      	ldr	r0, [r3, #0]
 800a286:	f000 bd57 	b.w	800ad38 <_malloc_r>
 800a28a:	bf00      	nop
 800a28c:	20000018 	.word	0x20000018

0800a290 <__ascii_mbtowc>:
 800a290:	b082      	sub	sp, #8
 800a292:	b901      	cbnz	r1, 800a296 <__ascii_mbtowc+0x6>
 800a294:	a901      	add	r1, sp, #4
 800a296:	b142      	cbz	r2, 800a2aa <__ascii_mbtowc+0x1a>
 800a298:	b14b      	cbz	r3, 800a2ae <__ascii_mbtowc+0x1e>
 800a29a:	7813      	ldrb	r3, [r2, #0]
 800a29c:	600b      	str	r3, [r1, #0]
 800a29e:	7812      	ldrb	r2, [r2, #0]
 800a2a0:	1e10      	subs	r0, r2, #0
 800a2a2:	bf18      	it	ne
 800a2a4:	2001      	movne	r0, #1
 800a2a6:	b002      	add	sp, #8
 800a2a8:	4770      	bx	lr
 800a2aa:	4610      	mov	r0, r2
 800a2ac:	e7fb      	b.n	800a2a6 <__ascii_mbtowc+0x16>
 800a2ae:	f06f 0001 	mvn.w	r0, #1
 800a2b2:	e7f8      	b.n	800a2a6 <__ascii_mbtowc+0x16>

0800a2b4 <memchr>:
 800a2b4:	4603      	mov	r3, r0
 800a2b6:	b510      	push	{r4, lr}
 800a2b8:	b2c9      	uxtb	r1, r1
 800a2ba:	4402      	add	r2, r0
 800a2bc:	4293      	cmp	r3, r2
 800a2be:	4618      	mov	r0, r3
 800a2c0:	d101      	bne.n	800a2c6 <memchr+0x12>
 800a2c2:	2000      	movs	r0, #0
 800a2c4:	e003      	b.n	800a2ce <memchr+0x1a>
 800a2c6:	7804      	ldrb	r4, [r0, #0]
 800a2c8:	3301      	adds	r3, #1
 800a2ca:	428c      	cmp	r4, r1
 800a2cc:	d1f6      	bne.n	800a2bc <memchr+0x8>
 800a2ce:	bd10      	pop	{r4, pc}

0800a2d0 <_Balloc>:
 800a2d0:	b570      	push	{r4, r5, r6, lr}
 800a2d2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a2d4:	4604      	mov	r4, r0
 800a2d6:	460d      	mov	r5, r1
 800a2d8:	b976      	cbnz	r6, 800a2f8 <_Balloc+0x28>
 800a2da:	2010      	movs	r0, #16
 800a2dc:	f7ff ffd0 	bl	800a280 <malloc>
 800a2e0:	4602      	mov	r2, r0
 800a2e2:	6260      	str	r0, [r4, #36]	; 0x24
 800a2e4:	b920      	cbnz	r0, 800a2f0 <_Balloc+0x20>
 800a2e6:	2166      	movs	r1, #102	; 0x66
 800a2e8:	4b17      	ldr	r3, [pc, #92]	; (800a348 <_Balloc+0x78>)
 800a2ea:	4818      	ldr	r0, [pc, #96]	; (800a34c <_Balloc+0x7c>)
 800a2ec:	f000 ff2c 	bl	800b148 <__assert_func>
 800a2f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a2f4:	6006      	str	r6, [r0, #0]
 800a2f6:	60c6      	str	r6, [r0, #12]
 800a2f8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a2fa:	68f3      	ldr	r3, [r6, #12]
 800a2fc:	b183      	cbz	r3, 800a320 <_Balloc+0x50>
 800a2fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a300:	68db      	ldr	r3, [r3, #12]
 800a302:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a306:	b9b8      	cbnz	r0, 800a338 <_Balloc+0x68>
 800a308:	2101      	movs	r1, #1
 800a30a:	fa01 f605 	lsl.w	r6, r1, r5
 800a30e:	1d72      	adds	r2, r6, #5
 800a310:	4620      	mov	r0, r4
 800a312:	0092      	lsls	r2, r2, #2
 800a314:	f000 fc94 	bl	800ac40 <_calloc_r>
 800a318:	b160      	cbz	r0, 800a334 <_Balloc+0x64>
 800a31a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a31e:	e00e      	b.n	800a33e <_Balloc+0x6e>
 800a320:	2221      	movs	r2, #33	; 0x21
 800a322:	2104      	movs	r1, #4
 800a324:	4620      	mov	r0, r4
 800a326:	f000 fc8b 	bl	800ac40 <_calloc_r>
 800a32a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a32c:	60f0      	str	r0, [r6, #12]
 800a32e:	68db      	ldr	r3, [r3, #12]
 800a330:	2b00      	cmp	r3, #0
 800a332:	d1e4      	bne.n	800a2fe <_Balloc+0x2e>
 800a334:	2000      	movs	r0, #0
 800a336:	bd70      	pop	{r4, r5, r6, pc}
 800a338:	6802      	ldr	r2, [r0, #0]
 800a33a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a33e:	2300      	movs	r3, #0
 800a340:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a344:	e7f7      	b.n	800a336 <_Balloc+0x66>
 800a346:	bf00      	nop
 800a348:	0800c7f6 	.word	0x0800c7f6
 800a34c:	0800c8f4 	.word	0x0800c8f4

0800a350 <_Bfree>:
 800a350:	b570      	push	{r4, r5, r6, lr}
 800a352:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a354:	4605      	mov	r5, r0
 800a356:	460c      	mov	r4, r1
 800a358:	b976      	cbnz	r6, 800a378 <_Bfree+0x28>
 800a35a:	2010      	movs	r0, #16
 800a35c:	f7ff ff90 	bl	800a280 <malloc>
 800a360:	4602      	mov	r2, r0
 800a362:	6268      	str	r0, [r5, #36]	; 0x24
 800a364:	b920      	cbnz	r0, 800a370 <_Bfree+0x20>
 800a366:	218a      	movs	r1, #138	; 0x8a
 800a368:	4b08      	ldr	r3, [pc, #32]	; (800a38c <_Bfree+0x3c>)
 800a36a:	4809      	ldr	r0, [pc, #36]	; (800a390 <_Bfree+0x40>)
 800a36c:	f000 feec 	bl	800b148 <__assert_func>
 800a370:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a374:	6006      	str	r6, [r0, #0]
 800a376:	60c6      	str	r6, [r0, #12]
 800a378:	b13c      	cbz	r4, 800a38a <_Bfree+0x3a>
 800a37a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a37c:	6862      	ldr	r2, [r4, #4]
 800a37e:	68db      	ldr	r3, [r3, #12]
 800a380:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a384:	6021      	str	r1, [r4, #0]
 800a386:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a38a:	bd70      	pop	{r4, r5, r6, pc}
 800a38c:	0800c7f6 	.word	0x0800c7f6
 800a390:	0800c8f4 	.word	0x0800c8f4

0800a394 <__multadd>:
 800a394:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a398:	4607      	mov	r7, r0
 800a39a:	460c      	mov	r4, r1
 800a39c:	461e      	mov	r6, r3
 800a39e:	2000      	movs	r0, #0
 800a3a0:	690d      	ldr	r5, [r1, #16]
 800a3a2:	f101 0c14 	add.w	ip, r1, #20
 800a3a6:	f8dc 3000 	ldr.w	r3, [ip]
 800a3aa:	3001      	adds	r0, #1
 800a3ac:	b299      	uxth	r1, r3
 800a3ae:	fb02 6101 	mla	r1, r2, r1, r6
 800a3b2:	0c1e      	lsrs	r6, r3, #16
 800a3b4:	0c0b      	lsrs	r3, r1, #16
 800a3b6:	fb02 3306 	mla	r3, r2, r6, r3
 800a3ba:	b289      	uxth	r1, r1
 800a3bc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a3c0:	4285      	cmp	r5, r0
 800a3c2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a3c6:	f84c 1b04 	str.w	r1, [ip], #4
 800a3ca:	dcec      	bgt.n	800a3a6 <__multadd+0x12>
 800a3cc:	b30e      	cbz	r6, 800a412 <__multadd+0x7e>
 800a3ce:	68a3      	ldr	r3, [r4, #8]
 800a3d0:	42ab      	cmp	r3, r5
 800a3d2:	dc19      	bgt.n	800a408 <__multadd+0x74>
 800a3d4:	6861      	ldr	r1, [r4, #4]
 800a3d6:	4638      	mov	r0, r7
 800a3d8:	3101      	adds	r1, #1
 800a3da:	f7ff ff79 	bl	800a2d0 <_Balloc>
 800a3de:	4680      	mov	r8, r0
 800a3e0:	b928      	cbnz	r0, 800a3ee <__multadd+0x5a>
 800a3e2:	4602      	mov	r2, r0
 800a3e4:	21b5      	movs	r1, #181	; 0xb5
 800a3e6:	4b0c      	ldr	r3, [pc, #48]	; (800a418 <__multadd+0x84>)
 800a3e8:	480c      	ldr	r0, [pc, #48]	; (800a41c <__multadd+0x88>)
 800a3ea:	f000 fead 	bl	800b148 <__assert_func>
 800a3ee:	6922      	ldr	r2, [r4, #16]
 800a3f0:	f104 010c 	add.w	r1, r4, #12
 800a3f4:	3202      	adds	r2, #2
 800a3f6:	0092      	lsls	r2, r2, #2
 800a3f8:	300c      	adds	r0, #12
 800a3fa:	f7fc ffdd 	bl	80073b8 <memcpy>
 800a3fe:	4621      	mov	r1, r4
 800a400:	4638      	mov	r0, r7
 800a402:	f7ff ffa5 	bl	800a350 <_Bfree>
 800a406:	4644      	mov	r4, r8
 800a408:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a40c:	3501      	adds	r5, #1
 800a40e:	615e      	str	r6, [r3, #20]
 800a410:	6125      	str	r5, [r4, #16]
 800a412:	4620      	mov	r0, r4
 800a414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a418:	0800c868 	.word	0x0800c868
 800a41c:	0800c8f4 	.word	0x0800c8f4

0800a420 <__s2b>:
 800a420:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a424:	4615      	mov	r5, r2
 800a426:	2209      	movs	r2, #9
 800a428:	461f      	mov	r7, r3
 800a42a:	3308      	adds	r3, #8
 800a42c:	460c      	mov	r4, r1
 800a42e:	fb93 f3f2 	sdiv	r3, r3, r2
 800a432:	4606      	mov	r6, r0
 800a434:	2201      	movs	r2, #1
 800a436:	2100      	movs	r1, #0
 800a438:	429a      	cmp	r2, r3
 800a43a:	db09      	blt.n	800a450 <__s2b+0x30>
 800a43c:	4630      	mov	r0, r6
 800a43e:	f7ff ff47 	bl	800a2d0 <_Balloc>
 800a442:	b940      	cbnz	r0, 800a456 <__s2b+0x36>
 800a444:	4602      	mov	r2, r0
 800a446:	21ce      	movs	r1, #206	; 0xce
 800a448:	4b18      	ldr	r3, [pc, #96]	; (800a4ac <__s2b+0x8c>)
 800a44a:	4819      	ldr	r0, [pc, #100]	; (800a4b0 <__s2b+0x90>)
 800a44c:	f000 fe7c 	bl	800b148 <__assert_func>
 800a450:	0052      	lsls	r2, r2, #1
 800a452:	3101      	adds	r1, #1
 800a454:	e7f0      	b.n	800a438 <__s2b+0x18>
 800a456:	9b08      	ldr	r3, [sp, #32]
 800a458:	2d09      	cmp	r5, #9
 800a45a:	6143      	str	r3, [r0, #20]
 800a45c:	f04f 0301 	mov.w	r3, #1
 800a460:	6103      	str	r3, [r0, #16]
 800a462:	dd16      	ble.n	800a492 <__s2b+0x72>
 800a464:	f104 0909 	add.w	r9, r4, #9
 800a468:	46c8      	mov	r8, r9
 800a46a:	442c      	add	r4, r5
 800a46c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a470:	4601      	mov	r1, r0
 800a472:	220a      	movs	r2, #10
 800a474:	4630      	mov	r0, r6
 800a476:	3b30      	subs	r3, #48	; 0x30
 800a478:	f7ff ff8c 	bl	800a394 <__multadd>
 800a47c:	45a0      	cmp	r8, r4
 800a47e:	d1f5      	bne.n	800a46c <__s2b+0x4c>
 800a480:	f1a5 0408 	sub.w	r4, r5, #8
 800a484:	444c      	add	r4, r9
 800a486:	1b2d      	subs	r5, r5, r4
 800a488:	1963      	adds	r3, r4, r5
 800a48a:	42bb      	cmp	r3, r7
 800a48c:	db04      	blt.n	800a498 <__s2b+0x78>
 800a48e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a492:	2509      	movs	r5, #9
 800a494:	340a      	adds	r4, #10
 800a496:	e7f6      	b.n	800a486 <__s2b+0x66>
 800a498:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a49c:	4601      	mov	r1, r0
 800a49e:	220a      	movs	r2, #10
 800a4a0:	4630      	mov	r0, r6
 800a4a2:	3b30      	subs	r3, #48	; 0x30
 800a4a4:	f7ff ff76 	bl	800a394 <__multadd>
 800a4a8:	e7ee      	b.n	800a488 <__s2b+0x68>
 800a4aa:	bf00      	nop
 800a4ac:	0800c868 	.word	0x0800c868
 800a4b0:	0800c8f4 	.word	0x0800c8f4

0800a4b4 <__hi0bits>:
 800a4b4:	0c02      	lsrs	r2, r0, #16
 800a4b6:	0412      	lsls	r2, r2, #16
 800a4b8:	4603      	mov	r3, r0
 800a4ba:	b9ca      	cbnz	r2, 800a4f0 <__hi0bits+0x3c>
 800a4bc:	0403      	lsls	r3, r0, #16
 800a4be:	2010      	movs	r0, #16
 800a4c0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800a4c4:	bf04      	itt	eq
 800a4c6:	021b      	lsleq	r3, r3, #8
 800a4c8:	3008      	addeq	r0, #8
 800a4ca:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800a4ce:	bf04      	itt	eq
 800a4d0:	011b      	lsleq	r3, r3, #4
 800a4d2:	3004      	addeq	r0, #4
 800a4d4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800a4d8:	bf04      	itt	eq
 800a4da:	009b      	lsleq	r3, r3, #2
 800a4dc:	3002      	addeq	r0, #2
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	db05      	blt.n	800a4ee <__hi0bits+0x3a>
 800a4e2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800a4e6:	f100 0001 	add.w	r0, r0, #1
 800a4ea:	bf08      	it	eq
 800a4ec:	2020      	moveq	r0, #32
 800a4ee:	4770      	bx	lr
 800a4f0:	2000      	movs	r0, #0
 800a4f2:	e7e5      	b.n	800a4c0 <__hi0bits+0xc>

0800a4f4 <__lo0bits>:
 800a4f4:	6803      	ldr	r3, [r0, #0]
 800a4f6:	4602      	mov	r2, r0
 800a4f8:	f013 0007 	ands.w	r0, r3, #7
 800a4fc:	d00b      	beq.n	800a516 <__lo0bits+0x22>
 800a4fe:	07d9      	lsls	r1, r3, #31
 800a500:	d421      	bmi.n	800a546 <__lo0bits+0x52>
 800a502:	0798      	lsls	r0, r3, #30
 800a504:	bf49      	itett	mi
 800a506:	085b      	lsrmi	r3, r3, #1
 800a508:	089b      	lsrpl	r3, r3, #2
 800a50a:	2001      	movmi	r0, #1
 800a50c:	6013      	strmi	r3, [r2, #0]
 800a50e:	bf5c      	itt	pl
 800a510:	2002      	movpl	r0, #2
 800a512:	6013      	strpl	r3, [r2, #0]
 800a514:	4770      	bx	lr
 800a516:	b299      	uxth	r1, r3
 800a518:	b909      	cbnz	r1, 800a51e <__lo0bits+0x2a>
 800a51a:	2010      	movs	r0, #16
 800a51c:	0c1b      	lsrs	r3, r3, #16
 800a51e:	b2d9      	uxtb	r1, r3
 800a520:	b909      	cbnz	r1, 800a526 <__lo0bits+0x32>
 800a522:	3008      	adds	r0, #8
 800a524:	0a1b      	lsrs	r3, r3, #8
 800a526:	0719      	lsls	r1, r3, #28
 800a528:	bf04      	itt	eq
 800a52a:	091b      	lsreq	r3, r3, #4
 800a52c:	3004      	addeq	r0, #4
 800a52e:	0799      	lsls	r1, r3, #30
 800a530:	bf04      	itt	eq
 800a532:	089b      	lsreq	r3, r3, #2
 800a534:	3002      	addeq	r0, #2
 800a536:	07d9      	lsls	r1, r3, #31
 800a538:	d403      	bmi.n	800a542 <__lo0bits+0x4e>
 800a53a:	085b      	lsrs	r3, r3, #1
 800a53c:	f100 0001 	add.w	r0, r0, #1
 800a540:	d003      	beq.n	800a54a <__lo0bits+0x56>
 800a542:	6013      	str	r3, [r2, #0]
 800a544:	4770      	bx	lr
 800a546:	2000      	movs	r0, #0
 800a548:	4770      	bx	lr
 800a54a:	2020      	movs	r0, #32
 800a54c:	4770      	bx	lr
	...

0800a550 <__i2b>:
 800a550:	b510      	push	{r4, lr}
 800a552:	460c      	mov	r4, r1
 800a554:	2101      	movs	r1, #1
 800a556:	f7ff febb 	bl	800a2d0 <_Balloc>
 800a55a:	4602      	mov	r2, r0
 800a55c:	b928      	cbnz	r0, 800a56a <__i2b+0x1a>
 800a55e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a562:	4b04      	ldr	r3, [pc, #16]	; (800a574 <__i2b+0x24>)
 800a564:	4804      	ldr	r0, [pc, #16]	; (800a578 <__i2b+0x28>)
 800a566:	f000 fdef 	bl	800b148 <__assert_func>
 800a56a:	2301      	movs	r3, #1
 800a56c:	6144      	str	r4, [r0, #20]
 800a56e:	6103      	str	r3, [r0, #16]
 800a570:	bd10      	pop	{r4, pc}
 800a572:	bf00      	nop
 800a574:	0800c868 	.word	0x0800c868
 800a578:	0800c8f4 	.word	0x0800c8f4

0800a57c <__multiply>:
 800a57c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a580:	4691      	mov	r9, r2
 800a582:	690a      	ldr	r2, [r1, #16]
 800a584:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a588:	460c      	mov	r4, r1
 800a58a:	429a      	cmp	r2, r3
 800a58c:	bfbe      	ittt	lt
 800a58e:	460b      	movlt	r3, r1
 800a590:	464c      	movlt	r4, r9
 800a592:	4699      	movlt	r9, r3
 800a594:	6927      	ldr	r7, [r4, #16]
 800a596:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a59a:	68a3      	ldr	r3, [r4, #8]
 800a59c:	6861      	ldr	r1, [r4, #4]
 800a59e:	eb07 060a 	add.w	r6, r7, sl
 800a5a2:	42b3      	cmp	r3, r6
 800a5a4:	b085      	sub	sp, #20
 800a5a6:	bfb8      	it	lt
 800a5a8:	3101      	addlt	r1, #1
 800a5aa:	f7ff fe91 	bl	800a2d0 <_Balloc>
 800a5ae:	b930      	cbnz	r0, 800a5be <__multiply+0x42>
 800a5b0:	4602      	mov	r2, r0
 800a5b2:	f240 115d 	movw	r1, #349	; 0x15d
 800a5b6:	4b43      	ldr	r3, [pc, #268]	; (800a6c4 <__multiply+0x148>)
 800a5b8:	4843      	ldr	r0, [pc, #268]	; (800a6c8 <__multiply+0x14c>)
 800a5ba:	f000 fdc5 	bl	800b148 <__assert_func>
 800a5be:	f100 0514 	add.w	r5, r0, #20
 800a5c2:	462b      	mov	r3, r5
 800a5c4:	2200      	movs	r2, #0
 800a5c6:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a5ca:	4543      	cmp	r3, r8
 800a5cc:	d321      	bcc.n	800a612 <__multiply+0x96>
 800a5ce:	f104 0314 	add.w	r3, r4, #20
 800a5d2:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a5d6:	f109 0314 	add.w	r3, r9, #20
 800a5da:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a5de:	9202      	str	r2, [sp, #8]
 800a5e0:	1b3a      	subs	r2, r7, r4
 800a5e2:	3a15      	subs	r2, #21
 800a5e4:	f022 0203 	bic.w	r2, r2, #3
 800a5e8:	3204      	adds	r2, #4
 800a5ea:	f104 0115 	add.w	r1, r4, #21
 800a5ee:	428f      	cmp	r7, r1
 800a5f0:	bf38      	it	cc
 800a5f2:	2204      	movcc	r2, #4
 800a5f4:	9201      	str	r2, [sp, #4]
 800a5f6:	9a02      	ldr	r2, [sp, #8]
 800a5f8:	9303      	str	r3, [sp, #12]
 800a5fa:	429a      	cmp	r2, r3
 800a5fc:	d80c      	bhi.n	800a618 <__multiply+0x9c>
 800a5fe:	2e00      	cmp	r6, #0
 800a600:	dd03      	ble.n	800a60a <__multiply+0x8e>
 800a602:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a606:	2b00      	cmp	r3, #0
 800a608:	d059      	beq.n	800a6be <__multiply+0x142>
 800a60a:	6106      	str	r6, [r0, #16]
 800a60c:	b005      	add	sp, #20
 800a60e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a612:	f843 2b04 	str.w	r2, [r3], #4
 800a616:	e7d8      	b.n	800a5ca <__multiply+0x4e>
 800a618:	f8b3 a000 	ldrh.w	sl, [r3]
 800a61c:	f1ba 0f00 	cmp.w	sl, #0
 800a620:	d023      	beq.n	800a66a <__multiply+0xee>
 800a622:	46a9      	mov	r9, r5
 800a624:	f04f 0c00 	mov.w	ip, #0
 800a628:	f104 0e14 	add.w	lr, r4, #20
 800a62c:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a630:	f8d9 1000 	ldr.w	r1, [r9]
 800a634:	fa1f fb82 	uxth.w	fp, r2
 800a638:	b289      	uxth	r1, r1
 800a63a:	fb0a 110b 	mla	r1, sl, fp, r1
 800a63e:	4461      	add	r1, ip
 800a640:	f8d9 c000 	ldr.w	ip, [r9]
 800a644:	0c12      	lsrs	r2, r2, #16
 800a646:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800a64a:	fb0a c202 	mla	r2, sl, r2, ip
 800a64e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a652:	b289      	uxth	r1, r1
 800a654:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a658:	4577      	cmp	r7, lr
 800a65a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a65e:	f849 1b04 	str.w	r1, [r9], #4
 800a662:	d8e3      	bhi.n	800a62c <__multiply+0xb0>
 800a664:	9a01      	ldr	r2, [sp, #4]
 800a666:	f845 c002 	str.w	ip, [r5, r2]
 800a66a:	9a03      	ldr	r2, [sp, #12]
 800a66c:	3304      	adds	r3, #4
 800a66e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a672:	f1b9 0f00 	cmp.w	r9, #0
 800a676:	d020      	beq.n	800a6ba <__multiply+0x13e>
 800a678:	46ae      	mov	lr, r5
 800a67a:	f04f 0a00 	mov.w	sl, #0
 800a67e:	6829      	ldr	r1, [r5, #0]
 800a680:	f104 0c14 	add.w	ip, r4, #20
 800a684:	f8bc b000 	ldrh.w	fp, [ip]
 800a688:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a68c:	b289      	uxth	r1, r1
 800a68e:	fb09 220b 	mla	r2, r9, fp, r2
 800a692:	4492      	add	sl, r2
 800a694:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a698:	f84e 1b04 	str.w	r1, [lr], #4
 800a69c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a6a0:	f8be 1000 	ldrh.w	r1, [lr]
 800a6a4:	0c12      	lsrs	r2, r2, #16
 800a6a6:	fb09 1102 	mla	r1, r9, r2, r1
 800a6aa:	4567      	cmp	r7, ip
 800a6ac:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a6b0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a6b4:	d8e6      	bhi.n	800a684 <__multiply+0x108>
 800a6b6:	9a01      	ldr	r2, [sp, #4]
 800a6b8:	50a9      	str	r1, [r5, r2]
 800a6ba:	3504      	adds	r5, #4
 800a6bc:	e79b      	b.n	800a5f6 <__multiply+0x7a>
 800a6be:	3e01      	subs	r6, #1
 800a6c0:	e79d      	b.n	800a5fe <__multiply+0x82>
 800a6c2:	bf00      	nop
 800a6c4:	0800c868 	.word	0x0800c868
 800a6c8:	0800c8f4 	.word	0x0800c8f4

0800a6cc <__pow5mult>:
 800a6cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a6d0:	4615      	mov	r5, r2
 800a6d2:	f012 0203 	ands.w	r2, r2, #3
 800a6d6:	4606      	mov	r6, r0
 800a6d8:	460f      	mov	r7, r1
 800a6da:	d007      	beq.n	800a6ec <__pow5mult+0x20>
 800a6dc:	4c25      	ldr	r4, [pc, #148]	; (800a774 <__pow5mult+0xa8>)
 800a6de:	3a01      	subs	r2, #1
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a6e6:	f7ff fe55 	bl	800a394 <__multadd>
 800a6ea:	4607      	mov	r7, r0
 800a6ec:	10ad      	asrs	r5, r5, #2
 800a6ee:	d03d      	beq.n	800a76c <__pow5mult+0xa0>
 800a6f0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a6f2:	b97c      	cbnz	r4, 800a714 <__pow5mult+0x48>
 800a6f4:	2010      	movs	r0, #16
 800a6f6:	f7ff fdc3 	bl	800a280 <malloc>
 800a6fa:	4602      	mov	r2, r0
 800a6fc:	6270      	str	r0, [r6, #36]	; 0x24
 800a6fe:	b928      	cbnz	r0, 800a70c <__pow5mult+0x40>
 800a700:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a704:	4b1c      	ldr	r3, [pc, #112]	; (800a778 <__pow5mult+0xac>)
 800a706:	481d      	ldr	r0, [pc, #116]	; (800a77c <__pow5mult+0xb0>)
 800a708:	f000 fd1e 	bl	800b148 <__assert_func>
 800a70c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a710:	6004      	str	r4, [r0, #0]
 800a712:	60c4      	str	r4, [r0, #12]
 800a714:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a718:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a71c:	b94c      	cbnz	r4, 800a732 <__pow5mult+0x66>
 800a71e:	f240 2171 	movw	r1, #625	; 0x271
 800a722:	4630      	mov	r0, r6
 800a724:	f7ff ff14 	bl	800a550 <__i2b>
 800a728:	2300      	movs	r3, #0
 800a72a:	4604      	mov	r4, r0
 800a72c:	f8c8 0008 	str.w	r0, [r8, #8]
 800a730:	6003      	str	r3, [r0, #0]
 800a732:	f04f 0900 	mov.w	r9, #0
 800a736:	07eb      	lsls	r3, r5, #31
 800a738:	d50a      	bpl.n	800a750 <__pow5mult+0x84>
 800a73a:	4639      	mov	r1, r7
 800a73c:	4622      	mov	r2, r4
 800a73e:	4630      	mov	r0, r6
 800a740:	f7ff ff1c 	bl	800a57c <__multiply>
 800a744:	4680      	mov	r8, r0
 800a746:	4639      	mov	r1, r7
 800a748:	4630      	mov	r0, r6
 800a74a:	f7ff fe01 	bl	800a350 <_Bfree>
 800a74e:	4647      	mov	r7, r8
 800a750:	106d      	asrs	r5, r5, #1
 800a752:	d00b      	beq.n	800a76c <__pow5mult+0xa0>
 800a754:	6820      	ldr	r0, [r4, #0]
 800a756:	b938      	cbnz	r0, 800a768 <__pow5mult+0x9c>
 800a758:	4622      	mov	r2, r4
 800a75a:	4621      	mov	r1, r4
 800a75c:	4630      	mov	r0, r6
 800a75e:	f7ff ff0d 	bl	800a57c <__multiply>
 800a762:	6020      	str	r0, [r4, #0]
 800a764:	f8c0 9000 	str.w	r9, [r0]
 800a768:	4604      	mov	r4, r0
 800a76a:	e7e4      	b.n	800a736 <__pow5mult+0x6a>
 800a76c:	4638      	mov	r0, r7
 800a76e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a772:	bf00      	nop
 800a774:	0800ca40 	.word	0x0800ca40
 800a778:	0800c7f6 	.word	0x0800c7f6
 800a77c:	0800c8f4 	.word	0x0800c8f4

0800a780 <__lshift>:
 800a780:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a784:	460c      	mov	r4, r1
 800a786:	4607      	mov	r7, r0
 800a788:	4691      	mov	r9, r2
 800a78a:	6923      	ldr	r3, [r4, #16]
 800a78c:	6849      	ldr	r1, [r1, #4]
 800a78e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a792:	68a3      	ldr	r3, [r4, #8]
 800a794:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a798:	f108 0601 	add.w	r6, r8, #1
 800a79c:	42b3      	cmp	r3, r6
 800a79e:	db0b      	blt.n	800a7b8 <__lshift+0x38>
 800a7a0:	4638      	mov	r0, r7
 800a7a2:	f7ff fd95 	bl	800a2d0 <_Balloc>
 800a7a6:	4605      	mov	r5, r0
 800a7a8:	b948      	cbnz	r0, 800a7be <__lshift+0x3e>
 800a7aa:	4602      	mov	r2, r0
 800a7ac:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a7b0:	4b29      	ldr	r3, [pc, #164]	; (800a858 <__lshift+0xd8>)
 800a7b2:	482a      	ldr	r0, [pc, #168]	; (800a85c <__lshift+0xdc>)
 800a7b4:	f000 fcc8 	bl	800b148 <__assert_func>
 800a7b8:	3101      	adds	r1, #1
 800a7ba:	005b      	lsls	r3, r3, #1
 800a7bc:	e7ee      	b.n	800a79c <__lshift+0x1c>
 800a7be:	2300      	movs	r3, #0
 800a7c0:	f100 0114 	add.w	r1, r0, #20
 800a7c4:	f100 0210 	add.w	r2, r0, #16
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	4553      	cmp	r3, sl
 800a7cc:	db37      	blt.n	800a83e <__lshift+0xbe>
 800a7ce:	6920      	ldr	r0, [r4, #16]
 800a7d0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a7d4:	f104 0314 	add.w	r3, r4, #20
 800a7d8:	f019 091f 	ands.w	r9, r9, #31
 800a7dc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a7e0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a7e4:	d02f      	beq.n	800a846 <__lshift+0xc6>
 800a7e6:	468a      	mov	sl, r1
 800a7e8:	f04f 0c00 	mov.w	ip, #0
 800a7ec:	f1c9 0e20 	rsb	lr, r9, #32
 800a7f0:	681a      	ldr	r2, [r3, #0]
 800a7f2:	fa02 f209 	lsl.w	r2, r2, r9
 800a7f6:	ea42 020c 	orr.w	r2, r2, ip
 800a7fa:	f84a 2b04 	str.w	r2, [sl], #4
 800a7fe:	f853 2b04 	ldr.w	r2, [r3], #4
 800a802:	4298      	cmp	r0, r3
 800a804:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a808:	d8f2      	bhi.n	800a7f0 <__lshift+0x70>
 800a80a:	1b03      	subs	r3, r0, r4
 800a80c:	3b15      	subs	r3, #21
 800a80e:	f023 0303 	bic.w	r3, r3, #3
 800a812:	3304      	adds	r3, #4
 800a814:	f104 0215 	add.w	r2, r4, #21
 800a818:	4290      	cmp	r0, r2
 800a81a:	bf38      	it	cc
 800a81c:	2304      	movcc	r3, #4
 800a81e:	f841 c003 	str.w	ip, [r1, r3]
 800a822:	f1bc 0f00 	cmp.w	ip, #0
 800a826:	d001      	beq.n	800a82c <__lshift+0xac>
 800a828:	f108 0602 	add.w	r6, r8, #2
 800a82c:	3e01      	subs	r6, #1
 800a82e:	4638      	mov	r0, r7
 800a830:	4621      	mov	r1, r4
 800a832:	612e      	str	r6, [r5, #16]
 800a834:	f7ff fd8c 	bl	800a350 <_Bfree>
 800a838:	4628      	mov	r0, r5
 800a83a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a83e:	f842 0f04 	str.w	r0, [r2, #4]!
 800a842:	3301      	adds	r3, #1
 800a844:	e7c1      	b.n	800a7ca <__lshift+0x4a>
 800a846:	3904      	subs	r1, #4
 800a848:	f853 2b04 	ldr.w	r2, [r3], #4
 800a84c:	4298      	cmp	r0, r3
 800a84e:	f841 2f04 	str.w	r2, [r1, #4]!
 800a852:	d8f9      	bhi.n	800a848 <__lshift+0xc8>
 800a854:	e7ea      	b.n	800a82c <__lshift+0xac>
 800a856:	bf00      	nop
 800a858:	0800c868 	.word	0x0800c868
 800a85c:	0800c8f4 	.word	0x0800c8f4

0800a860 <__mcmp>:
 800a860:	4603      	mov	r3, r0
 800a862:	690a      	ldr	r2, [r1, #16]
 800a864:	6900      	ldr	r0, [r0, #16]
 800a866:	b530      	push	{r4, r5, lr}
 800a868:	1a80      	subs	r0, r0, r2
 800a86a:	d10d      	bne.n	800a888 <__mcmp+0x28>
 800a86c:	3314      	adds	r3, #20
 800a86e:	3114      	adds	r1, #20
 800a870:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a874:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a878:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a87c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a880:	4295      	cmp	r5, r2
 800a882:	d002      	beq.n	800a88a <__mcmp+0x2a>
 800a884:	d304      	bcc.n	800a890 <__mcmp+0x30>
 800a886:	2001      	movs	r0, #1
 800a888:	bd30      	pop	{r4, r5, pc}
 800a88a:	42a3      	cmp	r3, r4
 800a88c:	d3f4      	bcc.n	800a878 <__mcmp+0x18>
 800a88e:	e7fb      	b.n	800a888 <__mcmp+0x28>
 800a890:	f04f 30ff 	mov.w	r0, #4294967295
 800a894:	e7f8      	b.n	800a888 <__mcmp+0x28>
	...

0800a898 <__mdiff>:
 800a898:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a89c:	460d      	mov	r5, r1
 800a89e:	4607      	mov	r7, r0
 800a8a0:	4611      	mov	r1, r2
 800a8a2:	4628      	mov	r0, r5
 800a8a4:	4614      	mov	r4, r2
 800a8a6:	f7ff ffdb 	bl	800a860 <__mcmp>
 800a8aa:	1e06      	subs	r6, r0, #0
 800a8ac:	d111      	bne.n	800a8d2 <__mdiff+0x3a>
 800a8ae:	4631      	mov	r1, r6
 800a8b0:	4638      	mov	r0, r7
 800a8b2:	f7ff fd0d 	bl	800a2d0 <_Balloc>
 800a8b6:	4602      	mov	r2, r0
 800a8b8:	b928      	cbnz	r0, 800a8c6 <__mdiff+0x2e>
 800a8ba:	f240 2132 	movw	r1, #562	; 0x232
 800a8be:	4b3a      	ldr	r3, [pc, #232]	; (800a9a8 <__mdiff+0x110>)
 800a8c0:	483a      	ldr	r0, [pc, #232]	; (800a9ac <__mdiff+0x114>)
 800a8c2:	f000 fc41 	bl	800b148 <__assert_func>
 800a8c6:	2301      	movs	r3, #1
 800a8c8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800a8cc:	4610      	mov	r0, r2
 800a8ce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8d2:	bfa4      	itt	ge
 800a8d4:	4623      	movge	r3, r4
 800a8d6:	462c      	movge	r4, r5
 800a8d8:	4638      	mov	r0, r7
 800a8da:	6861      	ldr	r1, [r4, #4]
 800a8dc:	bfa6      	itte	ge
 800a8de:	461d      	movge	r5, r3
 800a8e0:	2600      	movge	r6, #0
 800a8e2:	2601      	movlt	r6, #1
 800a8e4:	f7ff fcf4 	bl	800a2d0 <_Balloc>
 800a8e8:	4602      	mov	r2, r0
 800a8ea:	b918      	cbnz	r0, 800a8f4 <__mdiff+0x5c>
 800a8ec:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a8f0:	4b2d      	ldr	r3, [pc, #180]	; (800a9a8 <__mdiff+0x110>)
 800a8f2:	e7e5      	b.n	800a8c0 <__mdiff+0x28>
 800a8f4:	f102 0814 	add.w	r8, r2, #20
 800a8f8:	46c2      	mov	sl, r8
 800a8fa:	f04f 0c00 	mov.w	ip, #0
 800a8fe:	6927      	ldr	r7, [r4, #16]
 800a900:	60c6      	str	r6, [r0, #12]
 800a902:	692e      	ldr	r6, [r5, #16]
 800a904:	f104 0014 	add.w	r0, r4, #20
 800a908:	f105 0914 	add.w	r9, r5, #20
 800a90c:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800a910:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a914:	3410      	adds	r4, #16
 800a916:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800a91a:	f859 3b04 	ldr.w	r3, [r9], #4
 800a91e:	fa1f f18b 	uxth.w	r1, fp
 800a922:	448c      	add	ip, r1
 800a924:	b299      	uxth	r1, r3
 800a926:	0c1b      	lsrs	r3, r3, #16
 800a928:	ebac 0101 	sub.w	r1, ip, r1
 800a92c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a930:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800a934:	b289      	uxth	r1, r1
 800a936:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800a93a:	454e      	cmp	r6, r9
 800a93c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800a940:	f84a 3b04 	str.w	r3, [sl], #4
 800a944:	d8e7      	bhi.n	800a916 <__mdiff+0x7e>
 800a946:	1b73      	subs	r3, r6, r5
 800a948:	3b15      	subs	r3, #21
 800a94a:	f023 0303 	bic.w	r3, r3, #3
 800a94e:	3515      	adds	r5, #21
 800a950:	3304      	adds	r3, #4
 800a952:	42ae      	cmp	r6, r5
 800a954:	bf38      	it	cc
 800a956:	2304      	movcc	r3, #4
 800a958:	4418      	add	r0, r3
 800a95a:	4443      	add	r3, r8
 800a95c:	461e      	mov	r6, r3
 800a95e:	4605      	mov	r5, r0
 800a960:	4575      	cmp	r5, lr
 800a962:	d30e      	bcc.n	800a982 <__mdiff+0xea>
 800a964:	f10e 0103 	add.w	r1, lr, #3
 800a968:	1a09      	subs	r1, r1, r0
 800a96a:	f021 0103 	bic.w	r1, r1, #3
 800a96e:	3803      	subs	r0, #3
 800a970:	4586      	cmp	lr, r0
 800a972:	bf38      	it	cc
 800a974:	2100      	movcc	r1, #0
 800a976:	4419      	add	r1, r3
 800a978:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800a97c:	b18b      	cbz	r3, 800a9a2 <__mdiff+0x10a>
 800a97e:	6117      	str	r7, [r2, #16]
 800a980:	e7a4      	b.n	800a8cc <__mdiff+0x34>
 800a982:	f855 8b04 	ldr.w	r8, [r5], #4
 800a986:	fa1f f188 	uxth.w	r1, r8
 800a98a:	4461      	add	r1, ip
 800a98c:	140c      	asrs	r4, r1, #16
 800a98e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a992:	b289      	uxth	r1, r1
 800a994:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800a998:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800a99c:	f846 1b04 	str.w	r1, [r6], #4
 800a9a0:	e7de      	b.n	800a960 <__mdiff+0xc8>
 800a9a2:	3f01      	subs	r7, #1
 800a9a4:	e7e8      	b.n	800a978 <__mdiff+0xe0>
 800a9a6:	bf00      	nop
 800a9a8:	0800c868 	.word	0x0800c868
 800a9ac:	0800c8f4 	.word	0x0800c8f4

0800a9b0 <__ulp>:
 800a9b0:	4b11      	ldr	r3, [pc, #68]	; (800a9f8 <__ulp+0x48>)
 800a9b2:	400b      	ands	r3, r1
 800a9b4:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	dd02      	ble.n	800a9c2 <__ulp+0x12>
 800a9bc:	2000      	movs	r0, #0
 800a9be:	4619      	mov	r1, r3
 800a9c0:	4770      	bx	lr
 800a9c2:	425b      	negs	r3, r3
 800a9c4:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800a9c8:	f04f 0000 	mov.w	r0, #0
 800a9cc:	f04f 0100 	mov.w	r1, #0
 800a9d0:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a9d4:	da04      	bge.n	800a9e0 <__ulp+0x30>
 800a9d6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a9da:	fa43 f102 	asr.w	r1, r3, r2
 800a9de:	4770      	bx	lr
 800a9e0:	f1a2 0314 	sub.w	r3, r2, #20
 800a9e4:	2b1e      	cmp	r3, #30
 800a9e6:	bfd6      	itet	le
 800a9e8:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800a9ec:	2301      	movgt	r3, #1
 800a9ee:	fa22 f303 	lsrle.w	r3, r2, r3
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	4770      	bx	lr
 800a9f6:	bf00      	nop
 800a9f8:	7ff00000 	.word	0x7ff00000

0800a9fc <__b2d>:
 800a9fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa00:	6907      	ldr	r7, [r0, #16]
 800aa02:	f100 0914 	add.w	r9, r0, #20
 800aa06:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800aa0a:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800aa0e:	f1a7 0804 	sub.w	r8, r7, #4
 800aa12:	4630      	mov	r0, r6
 800aa14:	f7ff fd4e 	bl	800a4b4 <__hi0bits>
 800aa18:	f1c0 0320 	rsb	r3, r0, #32
 800aa1c:	280a      	cmp	r0, #10
 800aa1e:	600b      	str	r3, [r1, #0]
 800aa20:	491f      	ldr	r1, [pc, #124]	; (800aaa0 <__b2d+0xa4>)
 800aa22:	dc17      	bgt.n	800aa54 <__b2d+0x58>
 800aa24:	45c1      	cmp	r9, r8
 800aa26:	bf28      	it	cs
 800aa28:	2200      	movcs	r2, #0
 800aa2a:	f1c0 0c0b 	rsb	ip, r0, #11
 800aa2e:	fa26 f30c 	lsr.w	r3, r6, ip
 800aa32:	bf38      	it	cc
 800aa34:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800aa38:	ea43 0501 	orr.w	r5, r3, r1
 800aa3c:	f100 0315 	add.w	r3, r0, #21
 800aa40:	fa06 f303 	lsl.w	r3, r6, r3
 800aa44:	fa22 f20c 	lsr.w	r2, r2, ip
 800aa48:	ea43 0402 	orr.w	r4, r3, r2
 800aa4c:	4620      	mov	r0, r4
 800aa4e:	4629      	mov	r1, r5
 800aa50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa54:	45c1      	cmp	r9, r8
 800aa56:	bf2e      	itee	cs
 800aa58:	2200      	movcs	r2, #0
 800aa5a:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800aa5e:	f1a7 0808 	subcc.w	r8, r7, #8
 800aa62:	f1b0 030b 	subs.w	r3, r0, #11
 800aa66:	d016      	beq.n	800aa96 <__b2d+0x9a>
 800aa68:	f1c3 0720 	rsb	r7, r3, #32
 800aa6c:	fa22 f107 	lsr.w	r1, r2, r7
 800aa70:	45c8      	cmp	r8, r9
 800aa72:	fa06 f603 	lsl.w	r6, r6, r3
 800aa76:	ea46 0601 	orr.w	r6, r6, r1
 800aa7a:	bf94      	ite	ls
 800aa7c:	2100      	movls	r1, #0
 800aa7e:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800aa82:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800aa86:	fa02 f003 	lsl.w	r0, r2, r3
 800aa8a:	40f9      	lsrs	r1, r7
 800aa8c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800aa90:	ea40 0401 	orr.w	r4, r0, r1
 800aa94:	e7da      	b.n	800aa4c <__b2d+0x50>
 800aa96:	4614      	mov	r4, r2
 800aa98:	ea46 0501 	orr.w	r5, r6, r1
 800aa9c:	e7d6      	b.n	800aa4c <__b2d+0x50>
 800aa9e:	bf00      	nop
 800aaa0:	3ff00000 	.word	0x3ff00000

0800aaa4 <__d2b>:
 800aaa4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800aaa8:	2101      	movs	r1, #1
 800aaaa:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800aaae:	4690      	mov	r8, r2
 800aab0:	461d      	mov	r5, r3
 800aab2:	f7ff fc0d 	bl	800a2d0 <_Balloc>
 800aab6:	4604      	mov	r4, r0
 800aab8:	b930      	cbnz	r0, 800aac8 <__d2b+0x24>
 800aaba:	4602      	mov	r2, r0
 800aabc:	f240 310a 	movw	r1, #778	; 0x30a
 800aac0:	4b24      	ldr	r3, [pc, #144]	; (800ab54 <__d2b+0xb0>)
 800aac2:	4825      	ldr	r0, [pc, #148]	; (800ab58 <__d2b+0xb4>)
 800aac4:	f000 fb40 	bl	800b148 <__assert_func>
 800aac8:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800aacc:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800aad0:	bb2d      	cbnz	r5, 800ab1e <__d2b+0x7a>
 800aad2:	9301      	str	r3, [sp, #4]
 800aad4:	f1b8 0300 	subs.w	r3, r8, #0
 800aad8:	d026      	beq.n	800ab28 <__d2b+0x84>
 800aada:	4668      	mov	r0, sp
 800aadc:	9300      	str	r3, [sp, #0]
 800aade:	f7ff fd09 	bl	800a4f4 <__lo0bits>
 800aae2:	9900      	ldr	r1, [sp, #0]
 800aae4:	b1f0      	cbz	r0, 800ab24 <__d2b+0x80>
 800aae6:	9a01      	ldr	r2, [sp, #4]
 800aae8:	f1c0 0320 	rsb	r3, r0, #32
 800aaec:	fa02 f303 	lsl.w	r3, r2, r3
 800aaf0:	430b      	orrs	r3, r1
 800aaf2:	40c2      	lsrs	r2, r0
 800aaf4:	6163      	str	r3, [r4, #20]
 800aaf6:	9201      	str	r2, [sp, #4]
 800aaf8:	9b01      	ldr	r3, [sp, #4]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	bf14      	ite	ne
 800aafe:	2102      	movne	r1, #2
 800ab00:	2101      	moveq	r1, #1
 800ab02:	61a3      	str	r3, [r4, #24]
 800ab04:	6121      	str	r1, [r4, #16]
 800ab06:	b1c5      	cbz	r5, 800ab3a <__d2b+0x96>
 800ab08:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ab0c:	4405      	add	r5, r0
 800ab0e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ab12:	603d      	str	r5, [r7, #0]
 800ab14:	6030      	str	r0, [r6, #0]
 800ab16:	4620      	mov	r0, r4
 800ab18:	b002      	add	sp, #8
 800ab1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ab22:	e7d6      	b.n	800aad2 <__d2b+0x2e>
 800ab24:	6161      	str	r1, [r4, #20]
 800ab26:	e7e7      	b.n	800aaf8 <__d2b+0x54>
 800ab28:	a801      	add	r0, sp, #4
 800ab2a:	f7ff fce3 	bl	800a4f4 <__lo0bits>
 800ab2e:	2101      	movs	r1, #1
 800ab30:	9b01      	ldr	r3, [sp, #4]
 800ab32:	6121      	str	r1, [r4, #16]
 800ab34:	6163      	str	r3, [r4, #20]
 800ab36:	3020      	adds	r0, #32
 800ab38:	e7e5      	b.n	800ab06 <__d2b+0x62>
 800ab3a:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800ab3e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ab42:	6038      	str	r0, [r7, #0]
 800ab44:	6918      	ldr	r0, [r3, #16]
 800ab46:	f7ff fcb5 	bl	800a4b4 <__hi0bits>
 800ab4a:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800ab4e:	6031      	str	r1, [r6, #0]
 800ab50:	e7e1      	b.n	800ab16 <__d2b+0x72>
 800ab52:	bf00      	nop
 800ab54:	0800c868 	.word	0x0800c868
 800ab58:	0800c8f4 	.word	0x0800c8f4

0800ab5c <__ratio>:
 800ab5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab60:	4688      	mov	r8, r1
 800ab62:	4669      	mov	r1, sp
 800ab64:	4681      	mov	r9, r0
 800ab66:	f7ff ff49 	bl	800a9fc <__b2d>
 800ab6a:	460f      	mov	r7, r1
 800ab6c:	4604      	mov	r4, r0
 800ab6e:	460d      	mov	r5, r1
 800ab70:	4640      	mov	r0, r8
 800ab72:	a901      	add	r1, sp, #4
 800ab74:	f7ff ff42 	bl	800a9fc <__b2d>
 800ab78:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ab7c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800ab80:	468b      	mov	fp, r1
 800ab82:	eba3 0c02 	sub.w	ip, r3, r2
 800ab86:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ab8a:	1a9b      	subs	r3, r3, r2
 800ab8c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	bfd5      	itete	le
 800ab94:	460a      	movle	r2, r1
 800ab96:	462a      	movgt	r2, r5
 800ab98:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ab9c:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800aba0:	bfd8      	it	le
 800aba2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800aba6:	465b      	mov	r3, fp
 800aba8:	4602      	mov	r2, r0
 800abaa:	4639      	mov	r1, r7
 800abac:	4620      	mov	r0, r4
 800abae:	f7f5 fdc7 	bl	8000740 <__aeabi_ddiv>
 800abb2:	b003      	add	sp, #12
 800abb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800abb8 <__copybits>:
 800abb8:	3901      	subs	r1, #1
 800abba:	b570      	push	{r4, r5, r6, lr}
 800abbc:	1149      	asrs	r1, r1, #5
 800abbe:	6914      	ldr	r4, [r2, #16]
 800abc0:	3101      	adds	r1, #1
 800abc2:	f102 0314 	add.w	r3, r2, #20
 800abc6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800abca:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800abce:	1f05      	subs	r5, r0, #4
 800abd0:	42a3      	cmp	r3, r4
 800abd2:	d30c      	bcc.n	800abee <__copybits+0x36>
 800abd4:	1aa3      	subs	r3, r4, r2
 800abd6:	3b11      	subs	r3, #17
 800abd8:	f023 0303 	bic.w	r3, r3, #3
 800abdc:	3211      	adds	r2, #17
 800abde:	42a2      	cmp	r2, r4
 800abe0:	bf88      	it	hi
 800abe2:	2300      	movhi	r3, #0
 800abe4:	4418      	add	r0, r3
 800abe6:	2300      	movs	r3, #0
 800abe8:	4288      	cmp	r0, r1
 800abea:	d305      	bcc.n	800abf8 <__copybits+0x40>
 800abec:	bd70      	pop	{r4, r5, r6, pc}
 800abee:	f853 6b04 	ldr.w	r6, [r3], #4
 800abf2:	f845 6f04 	str.w	r6, [r5, #4]!
 800abf6:	e7eb      	b.n	800abd0 <__copybits+0x18>
 800abf8:	f840 3b04 	str.w	r3, [r0], #4
 800abfc:	e7f4      	b.n	800abe8 <__copybits+0x30>

0800abfe <__any_on>:
 800abfe:	f100 0214 	add.w	r2, r0, #20
 800ac02:	6900      	ldr	r0, [r0, #16]
 800ac04:	114b      	asrs	r3, r1, #5
 800ac06:	4298      	cmp	r0, r3
 800ac08:	b510      	push	{r4, lr}
 800ac0a:	db11      	blt.n	800ac30 <__any_on+0x32>
 800ac0c:	dd0a      	ble.n	800ac24 <__any_on+0x26>
 800ac0e:	f011 011f 	ands.w	r1, r1, #31
 800ac12:	d007      	beq.n	800ac24 <__any_on+0x26>
 800ac14:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ac18:	fa24 f001 	lsr.w	r0, r4, r1
 800ac1c:	fa00 f101 	lsl.w	r1, r0, r1
 800ac20:	428c      	cmp	r4, r1
 800ac22:	d10b      	bne.n	800ac3c <__any_on+0x3e>
 800ac24:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ac28:	4293      	cmp	r3, r2
 800ac2a:	d803      	bhi.n	800ac34 <__any_on+0x36>
 800ac2c:	2000      	movs	r0, #0
 800ac2e:	bd10      	pop	{r4, pc}
 800ac30:	4603      	mov	r3, r0
 800ac32:	e7f7      	b.n	800ac24 <__any_on+0x26>
 800ac34:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ac38:	2900      	cmp	r1, #0
 800ac3a:	d0f5      	beq.n	800ac28 <__any_on+0x2a>
 800ac3c:	2001      	movs	r0, #1
 800ac3e:	e7f6      	b.n	800ac2e <__any_on+0x30>

0800ac40 <_calloc_r>:
 800ac40:	b570      	push	{r4, r5, r6, lr}
 800ac42:	fba1 5402 	umull	r5, r4, r1, r2
 800ac46:	b934      	cbnz	r4, 800ac56 <_calloc_r+0x16>
 800ac48:	4629      	mov	r1, r5
 800ac4a:	f000 f875 	bl	800ad38 <_malloc_r>
 800ac4e:	4606      	mov	r6, r0
 800ac50:	b928      	cbnz	r0, 800ac5e <_calloc_r+0x1e>
 800ac52:	4630      	mov	r0, r6
 800ac54:	bd70      	pop	{r4, r5, r6, pc}
 800ac56:	220c      	movs	r2, #12
 800ac58:	2600      	movs	r6, #0
 800ac5a:	6002      	str	r2, [r0, #0]
 800ac5c:	e7f9      	b.n	800ac52 <_calloc_r+0x12>
 800ac5e:	462a      	mov	r2, r5
 800ac60:	4621      	mov	r1, r4
 800ac62:	f7fc fbd1 	bl	8007408 <memset>
 800ac66:	e7f4      	b.n	800ac52 <_calloc_r+0x12>

0800ac68 <_free_r>:
 800ac68:	b538      	push	{r3, r4, r5, lr}
 800ac6a:	4605      	mov	r5, r0
 800ac6c:	2900      	cmp	r1, #0
 800ac6e:	d040      	beq.n	800acf2 <_free_r+0x8a>
 800ac70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac74:	1f0c      	subs	r4, r1, #4
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	bfb8      	it	lt
 800ac7a:	18e4      	addlt	r4, r4, r3
 800ac7c:	f000 fa94 	bl	800b1a8 <__malloc_lock>
 800ac80:	4a1c      	ldr	r2, [pc, #112]	; (800acf4 <_free_r+0x8c>)
 800ac82:	6813      	ldr	r3, [r2, #0]
 800ac84:	b933      	cbnz	r3, 800ac94 <_free_r+0x2c>
 800ac86:	6063      	str	r3, [r4, #4]
 800ac88:	6014      	str	r4, [r2, #0]
 800ac8a:	4628      	mov	r0, r5
 800ac8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ac90:	f000 ba90 	b.w	800b1b4 <__malloc_unlock>
 800ac94:	42a3      	cmp	r3, r4
 800ac96:	d908      	bls.n	800acaa <_free_r+0x42>
 800ac98:	6820      	ldr	r0, [r4, #0]
 800ac9a:	1821      	adds	r1, r4, r0
 800ac9c:	428b      	cmp	r3, r1
 800ac9e:	bf01      	itttt	eq
 800aca0:	6819      	ldreq	r1, [r3, #0]
 800aca2:	685b      	ldreq	r3, [r3, #4]
 800aca4:	1809      	addeq	r1, r1, r0
 800aca6:	6021      	streq	r1, [r4, #0]
 800aca8:	e7ed      	b.n	800ac86 <_free_r+0x1e>
 800acaa:	461a      	mov	r2, r3
 800acac:	685b      	ldr	r3, [r3, #4]
 800acae:	b10b      	cbz	r3, 800acb4 <_free_r+0x4c>
 800acb0:	42a3      	cmp	r3, r4
 800acb2:	d9fa      	bls.n	800acaa <_free_r+0x42>
 800acb4:	6811      	ldr	r1, [r2, #0]
 800acb6:	1850      	adds	r0, r2, r1
 800acb8:	42a0      	cmp	r0, r4
 800acba:	d10b      	bne.n	800acd4 <_free_r+0x6c>
 800acbc:	6820      	ldr	r0, [r4, #0]
 800acbe:	4401      	add	r1, r0
 800acc0:	1850      	adds	r0, r2, r1
 800acc2:	4283      	cmp	r3, r0
 800acc4:	6011      	str	r1, [r2, #0]
 800acc6:	d1e0      	bne.n	800ac8a <_free_r+0x22>
 800acc8:	6818      	ldr	r0, [r3, #0]
 800acca:	685b      	ldr	r3, [r3, #4]
 800accc:	4401      	add	r1, r0
 800acce:	6011      	str	r1, [r2, #0]
 800acd0:	6053      	str	r3, [r2, #4]
 800acd2:	e7da      	b.n	800ac8a <_free_r+0x22>
 800acd4:	d902      	bls.n	800acdc <_free_r+0x74>
 800acd6:	230c      	movs	r3, #12
 800acd8:	602b      	str	r3, [r5, #0]
 800acda:	e7d6      	b.n	800ac8a <_free_r+0x22>
 800acdc:	6820      	ldr	r0, [r4, #0]
 800acde:	1821      	adds	r1, r4, r0
 800ace0:	428b      	cmp	r3, r1
 800ace2:	bf01      	itttt	eq
 800ace4:	6819      	ldreq	r1, [r3, #0]
 800ace6:	685b      	ldreq	r3, [r3, #4]
 800ace8:	1809      	addeq	r1, r1, r0
 800acea:	6021      	streq	r1, [r4, #0]
 800acec:	6063      	str	r3, [r4, #4]
 800acee:	6054      	str	r4, [r2, #4]
 800acf0:	e7cb      	b.n	800ac8a <_free_r+0x22>
 800acf2:	bd38      	pop	{r3, r4, r5, pc}
 800acf4:	200027a8 	.word	0x200027a8

0800acf8 <sbrk_aligned>:
 800acf8:	b570      	push	{r4, r5, r6, lr}
 800acfa:	4e0e      	ldr	r6, [pc, #56]	; (800ad34 <sbrk_aligned+0x3c>)
 800acfc:	460c      	mov	r4, r1
 800acfe:	6831      	ldr	r1, [r6, #0]
 800ad00:	4605      	mov	r5, r0
 800ad02:	b911      	cbnz	r1, 800ad0a <sbrk_aligned+0x12>
 800ad04:	f000 f9ee 	bl	800b0e4 <_sbrk_r>
 800ad08:	6030      	str	r0, [r6, #0]
 800ad0a:	4621      	mov	r1, r4
 800ad0c:	4628      	mov	r0, r5
 800ad0e:	f000 f9e9 	bl	800b0e4 <_sbrk_r>
 800ad12:	1c43      	adds	r3, r0, #1
 800ad14:	d00a      	beq.n	800ad2c <sbrk_aligned+0x34>
 800ad16:	1cc4      	adds	r4, r0, #3
 800ad18:	f024 0403 	bic.w	r4, r4, #3
 800ad1c:	42a0      	cmp	r0, r4
 800ad1e:	d007      	beq.n	800ad30 <sbrk_aligned+0x38>
 800ad20:	1a21      	subs	r1, r4, r0
 800ad22:	4628      	mov	r0, r5
 800ad24:	f000 f9de 	bl	800b0e4 <_sbrk_r>
 800ad28:	3001      	adds	r0, #1
 800ad2a:	d101      	bne.n	800ad30 <sbrk_aligned+0x38>
 800ad2c:	f04f 34ff 	mov.w	r4, #4294967295
 800ad30:	4620      	mov	r0, r4
 800ad32:	bd70      	pop	{r4, r5, r6, pc}
 800ad34:	200027ac 	.word	0x200027ac

0800ad38 <_malloc_r>:
 800ad38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad3c:	1ccd      	adds	r5, r1, #3
 800ad3e:	f025 0503 	bic.w	r5, r5, #3
 800ad42:	3508      	adds	r5, #8
 800ad44:	2d0c      	cmp	r5, #12
 800ad46:	bf38      	it	cc
 800ad48:	250c      	movcc	r5, #12
 800ad4a:	2d00      	cmp	r5, #0
 800ad4c:	4607      	mov	r7, r0
 800ad4e:	db01      	blt.n	800ad54 <_malloc_r+0x1c>
 800ad50:	42a9      	cmp	r1, r5
 800ad52:	d905      	bls.n	800ad60 <_malloc_r+0x28>
 800ad54:	230c      	movs	r3, #12
 800ad56:	2600      	movs	r6, #0
 800ad58:	603b      	str	r3, [r7, #0]
 800ad5a:	4630      	mov	r0, r6
 800ad5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad60:	4e2e      	ldr	r6, [pc, #184]	; (800ae1c <_malloc_r+0xe4>)
 800ad62:	f000 fa21 	bl	800b1a8 <__malloc_lock>
 800ad66:	6833      	ldr	r3, [r6, #0]
 800ad68:	461c      	mov	r4, r3
 800ad6a:	bb34      	cbnz	r4, 800adba <_malloc_r+0x82>
 800ad6c:	4629      	mov	r1, r5
 800ad6e:	4638      	mov	r0, r7
 800ad70:	f7ff ffc2 	bl	800acf8 <sbrk_aligned>
 800ad74:	1c43      	adds	r3, r0, #1
 800ad76:	4604      	mov	r4, r0
 800ad78:	d14d      	bne.n	800ae16 <_malloc_r+0xde>
 800ad7a:	6834      	ldr	r4, [r6, #0]
 800ad7c:	4626      	mov	r6, r4
 800ad7e:	2e00      	cmp	r6, #0
 800ad80:	d140      	bne.n	800ae04 <_malloc_r+0xcc>
 800ad82:	6823      	ldr	r3, [r4, #0]
 800ad84:	4631      	mov	r1, r6
 800ad86:	4638      	mov	r0, r7
 800ad88:	eb04 0803 	add.w	r8, r4, r3
 800ad8c:	f000 f9aa 	bl	800b0e4 <_sbrk_r>
 800ad90:	4580      	cmp	r8, r0
 800ad92:	d13a      	bne.n	800ae0a <_malloc_r+0xd2>
 800ad94:	6821      	ldr	r1, [r4, #0]
 800ad96:	3503      	adds	r5, #3
 800ad98:	1a6d      	subs	r5, r5, r1
 800ad9a:	f025 0503 	bic.w	r5, r5, #3
 800ad9e:	3508      	adds	r5, #8
 800ada0:	2d0c      	cmp	r5, #12
 800ada2:	bf38      	it	cc
 800ada4:	250c      	movcc	r5, #12
 800ada6:	4638      	mov	r0, r7
 800ada8:	4629      	mov	r1, r5
 800adaa:	f7ff ffa5 	bl	800acf8 <sbrk_aligned>
 800adae:	3001      	adds	r0, #1
 800adb0:	d02b      	beq.n	800ae0a <_malloc_r+0xd2>
 800adb2:	6823      	ldr	r3, [r4, #0]
 800adb4:	442b      	add	r3, r5
 800adb6:	6023      	str	r3, [r4, #0]
 800adb8:	e00e      	b.n	800add8 <_malloc_r+0xa0>
 800adba:	6822      	ldr	r2, [r4, #0]
 800adbc:	1b52      	subs	r2, r2, r5
 800adbe:	d41e      	bmi.n	800adfe <_malloc_r+0xc6>
 800adc0:	2a0b      	cmp	r2, #11
 800adc2:	d916      	bls.n	800adf2 <_malloc_r+0xba>
 800adc4:	1961      	adds	r1, r4, r5
 800adc6:	42a3      	cmp	r3, r4
 800adc8:	6025      	str	r5, [r4, #0]
 800adca:	bf18      	it	ne
 800adcc:	6059      	strne	r1, [r3, #4]
 800adce:	6863      	ldr	r3, [r4, #4]
 800add0:	bf08      	it	eq
 800add2:	6031      	streq	r1, [r6, #0]
 800add4:	5162      	str	r2, [r4, r5]
 800add6:	604b      	str	r3, [r1, #4]
 800add8:	4638      	mov	r0, r7
 800adda:	f104 060b 	add.w	r6, r4, #11
 800adde:	f000 f9e9 	bl	800b1b4 <__malloc_unlock>
 800ade2:	f026 0607 	bic.w	r6, r6, #7
 800ade6:	1d23      	adds	r3, r4, #4
 800ade8:	1af2      	subs	r2, r6, r3
 800adea:	d0b6      	beq.n	800ad5a <_malloc_r+0x22>
 800adec:	1b9b      	subs	r3, r3, r6
 800adee:	50a3      	str	r3, [r4, r2]
 800adf0:	e7b3      	b.n	800ad5a <_malloc_r+0x22>
 800adf2:	6862      	ldr	r2, [r4, #4]
 800adf4:	42a3      	cmp	r3, r4
 800adf6:	bf0c      	ite	eq
 800adf8:	6032      	streq	r2, [r6, #0]
 800adfa:	605a      	strne	r2, [r3, #4]
 800adfc:	e7ec      	b.n	800add8 <_malloc_r+0xa0>
 800adfe:	4623      	mov	r3, r4
 800ae00:	6864      	ldr	r4, [r4, #4]
 800ae02:	e7b2      	b.n	800ad6a <_malloc_r+0x32>
 800ae04:	4634      	mov	r4, r6
 800ae06:	6876      	ldr	r6, [r6, #4]
 800ae08:	e7b9      	b.n	800ad7e <_malloc_r+0x46>
 800ae0a:	230c      	movs	r3, #12
 800ae0c:	4638      	mov	r0, r7
 800ae0e:	603b      	str	r3, [r7, #0]
 800ae10:	f000 f9d0 	bl	800b1b4 <__malloc_unlock>
 800ae14:	e7a1      	b.n	800ad5a <_malloc_r+0x22>
 800ae16:	6025      	str	r5, [r4, #0]
 800ae18:	e7de      	b.n	800add8 <_malloc_r+0xa0>
 800ae1a:	bf00      	nop
 800ae1c:	200027a8 	.word	0x200027a8

0800ae20 <__ssputs_r>:
 800ae20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae24:	688e      	ldr	r6, [r1, #8]
 800ae26:	4682      	mov	sl, r0
 800ae28:	429e      	cmp	r6, r3
 800ae2a:	460c      	mov	r4, r1
 800ae2c:	4690      	mov	r8, r2
 800ae2e:	461f      	mov	r7, r3
 800ae30:	d838      	bhi.n	800aea4 <__ssputs_r+0x84>
 800ae32:	898a      	ldrh	r2, [r1, #12]
 800ae34:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ae38:	d032      	beq.n	800aea0 <__ssputs_r+0x80>
 800ae3a:	6825      	ldr	r5, [r4, #0]
 800ae3c:	6909      	ldr	r1, [r1, #16]
 800ae3e:	3301      	adds	r3, #1
 800ae40:	eba5 0901 	sub.w	r9, r5, r1
 800ae44:	6965      	ldr	r5, [r4, #20]
 800ae46:	444b      	add	r3, r9
 800ae48:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ae4c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ae50:	106d      	asrs	r5, r5, #1
 800ae52:	429d      	cmp	r5, r3
 800ae54:	bf38      	it	cc
 800ae56:	461d      	movcc	r5, r3
 800ae58:	0553      	lsls	r3, r2, #21
 800ae5a:	d531      	bpl.n	800aec0 <__ssputs_r+0xa0>
 800ae5c:	4629      	mov	r1, r5
 800ae5e:	f7ff ff6b 	bl	800ad38 <_malloc_r>
 800ae62:	4606      	mov	r6, r0
 800ae64:	b950      	cbnz	r0, 800ae7c <__ssputs_r+0x5c>
 800ae66:	230c      	movs	r3, #12
 800ae68:	f04f 30ff 	mov.w	r0, #4294967295
 800ae6c:	f8ca 3000 	str.w	r3, [sl]
 800ae70:	89a3      	ldrh	r3, [r4, #12]
 800ae72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae76:	81a3      	strh	r3, [r4, #12]
 800ae78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae7c:	464a      	mov	r2, r9
 800ae7e:	6921      	ldr	r1, [r4, #16]
 800ae80:	f7fc fa9a 	bl	80073b8 <memcpy>
 800ae84:	89a3      	ldrh	r3, [r4, #12]
 800ae86:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ae8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae8e:	81a3      	strh	r3, [r4, #12]
 800ae90:	6126      	str	r6, [r4, #16]
 800ae92:	444e      	add	r6, r9
 800ae94:	6026      	str	r6, [r4, #0]
 800ae96:	463e      	mov	r6, r7
 800ae98:	6165      	str	r5, [r4, #20]
 800ae9a:	eba5 0509 	sub.w	r5, r5, r9
 800ae9e:	60a5      	str	r5, [r4, #8]
 800aea0:	42be      	cmp	r6, r7
 800aea2:	d900      	bls.n	800aea6 <__ssputs_r+0x86>
 800aea4:	463e      	mov	r6, r7
 800aea6:	4632      	mov	r2, r6
 800aea8:	4641      	mov	r1, r8
 800aeaa:	6820      	ldr	r0, [r4, #0]
 800aeac:	f7fc fa92 	bl	80073d4 <memmove>
 800aeb0:	68a3      	ldr	r3, [r4, #8]
 800aeb2:	2000      	movs	r0, #0
 800aeb4:	1b9b      	subs	r3, r3, r6
 800aeb6:	60a3      	str	r3, [r4, #8]
 800aeb8:	6823      	ldr	r3, [r4, #0]
 800aeba:	4433      	add	r3, r6
 800aebc:	6023      	str	r3, [r4, #0]
 800aebe:	e7db      	b.n	800ae78 <__ssputs_r+0x58>
 800aec0:	462a      	mov	r2, r5
 800aec2:	f000 f97d 	bl	800b1c0 <_realloc_r>
 800aec6:	4606      	mov	r6, r0
 800aec8:	2800      	cmp	r0, #0
 800aeca:	d1e1      	bne.n	800ae90 <__ssputs_r+0x70>
 800aecc:	4650      	mov	r0, sl
 800aece:	6921      	ldr	r1, [r4, #16]
 800aed0:	f7ff feca 	bl	800ac68 <_free_r>
 800aed4:	e7c7      	b.n	800ae66 <__ssputs_r+0x46>
	...

0800aed8 <_svfiprintf_r>:
 800aed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aedc:	4698      	mov	r8, r3
 800aede:	898b      	ldrh	r3, [r1, #12]
 800aee0:	4607      	mov	r7, r0
 800aee2:	061b      	lsls	r3, r3, #24
 800aee4:	460d      	mov	r5, r1
 800aee6:	4614      	mov	r4, r2
 800aee8:	b09d      	sub	sp, #116	; 0x74
 800aeea:	d50e      	bpl.n	800af0a <_svfiprintf_r+0x32>
 800aeec:	690b      	ldr	r3, [r1, #16]
 800aeee:	b963      	cbnz	r3, 800af0a <_svfiprintf_r+0x32>
 800aef0:	2140      	movs	r1, #64	; 0x40
 800aef2:	f7ff ff21 	bl	800ad38 <_malloc_r>
 800aef6:	6028      	str	r0, [r5, #0]
 800aef8:	6128      	str	r0, [r5, #16]
 800aefa:	b920      	cbnz	r0, 800af06 <_svfiprintf_r+0x2e>
 800aefc:	230c      	movs	r3, #12
 800aefe:	603b      	str	r3, [r7, #0]
 800af00:	f04f 30ff 	mov.w	r0, #4294967295
 800af04:	e0d1      	b.n	800b0aa <_svfiprintf_r+0x1d2>
 800af06:	2340      	movs	r3, #64	; 0x40
 800af08:	616b      	str	r3, [r5, #20]
 800af0a:	2300      	movs	r3, #0
 800af0c:	9309      	str	r3, [sp, #36]	; 0x24
 800af0e:	2320      	movs	r3, #32
 800af10:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800af14:	2330      	movs	r3, #48	; 0x30
 800af16:	f04f 0901 	mov.w	r9, #1
 800af1a:	f8cd 800c 	str.w	r8, [sp, #12]
 800af1e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b0c4 <_svfiprintf_r+0x1ec>
 800af22:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800af26:	4623      	mov	r3, r4
 800af28:	469a      	mov	sl, r3
 800af2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800af2e:	b10a      	cbz	r2, 800af34 <_svfiprintf_r+0x5c>
 800af30:	2a25      	cmp	r2, #37	; 0x25
 800af32:	d1f9      	bne.n	800af28 <_svfiprintf_r+0x50>
 800af34:	ebba 0b04 	subs.w	fp, sl, r4
 800af38:	d00b      	beq.n	800af52 <_svfiprintf_r+0x7a>
 800af3a:	465b      	mov	r3, fp
 800af3c:	4622      	mov	r2, r4
 800af3e:	4629      	mov	r1, r5
 800af40:	4638      	mov	r0, r7
 800af42:	f7ff ff6d 	bl	800ae20 <__ssputs_r>
 800af46:	3001      	adds	r0, #1
 800af48:	f000 80aa 	beq.w	800b0a0 <_svfiprintf_r+0x1c8>
 800af4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800af4e:	445a      	add	r2, fp
 800af50:	9209      	str	r2, [sp, #36]	; 0x24
 800af52:	f89a 3000 	ldrb.w	r3, [sl]
 800af56:	2b00      	cmp	r3, #0
 800af58:	f000 80a2 	beq.w	800b0a0 <_svfiprintf_r+0x1c8>
 800af5c:	2300      	movs	r3, #0
 800af5e:	f04f 32ff 	mov.w	r2, #4294967295
 800af62:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800af66:	f10a 0a01 	add.w	sl, sl, #1
 800af6a:	9304      	str	r3, [sp, #16]
 800af6c:	9307      	str	r3, [sp, #28]
 800af6e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800af72:	931a      	str	r3, [sp, #104]	; 0x68
 800af74:	4654      	mov	r4, sl
 800af76:	2205      	movs	r2, #5
 800af78:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af7c:	4851      	ldr	r0, [pc, #324]	; (800b0c4 <_svfiprintf_r+0x1ec>)
 800af7e:	f7ff f999 	bl	800a2b4 <memchr>
 800af82:	9a04      	ldr	r2, [sp, #16]
 800af84:	b9d8      	cbnz	r0, 800afbe <_svfiprintf_r+0xe6>
 800af86:	06d0      	lsls	r0, r2, #27
 800af88:	bf44      	itt	mi
 800af8a:	2320      	movmi	r3, #32
 800af8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800af90:	0711      	lsls	r1, r2, #28
 800af92:	bf44      	itt	mi
 800af94:	232b      	movmi	r3, #43	; 0x2b
 800af96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800af9a:	f89a 3000 	ldrb.w	r3, [sl]
 800af9e:	2b2a      	cmp	r3, #42	; 0x2a
 800afa0:	d015      	beq.n	800afce <_svfiprintf_r+0xf6>
 800afa2:	4654      	mov	r4, sl
 800afa4:	2000      	movs	r0, #0
 800afa6:	f04f 0c0a 	mov.w	ip, #10
 800afaa:	9a07      	ldr	r2, [sp, #28]
 800afac:	4621      	mov	r1, r4
 800afae:	f811 3b01 	ldrb.w	r3, [r1], #1
 800afb2:	3b30      	subs	r3, #48	; 0x30
 800afb4:	2b09      	cmp	r3, #9
 800afb6:	d94e      	bls.n	800b056 <_svfiprintf_r+0x17e>
 800afb8:	b1b0      	cbz	r0, 800afe8 <_svfiprintf_r+0x110>
 800afba:	9207      	str	r2, [sp, #28]
 800afbc:	e014      	b.n	800afe8 <_svfiprintf_r+0x110>
 800afbe:	eba0 0308 	sub.w	r3, r0, r8
 800afc2:	fa09 f303 	lsl.w	r3, r9, r3
 800afc6:	4313      	orrs	r3, r2
 800afc8:	46a2      	mov	sl, r4
 800afca:	9304      	str	r3, [sp, #16]
 800afcc:	e7d2      	b.n	800af74 <_svfiprintf_r+0x9c>
 800afce:	9b03      	ldr	r3, [sp, #12]
 800afd0:	1d19      	adds	r1, r3, #4
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	9103      	str	r1, [sp, #12]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	bfbb      	ittet	lt
 800afda:	425b      	neglt	r3, r3
 800afdc:	f042 0202 	orrlt.w	r2, r2, #2
 800afe0:	9307      	strge	r3, [sp, #28]
 800afe2:	9307      	strlt	r3, [sp, #28]
 800afe4:	bfb8      	it	lt
 800afe6:	9204      	strlt	r2, [sp, #16]
 800afe8:	7823      	ldrb	r3, [r4, #0]
 800afea:	2b2e      	cmp	r3, #46	; 0x2e
 800afec:	d10c      	bne.n	800b008 <_svfiprintf_r+0x130>
 800afee:	7863      	ldrb	r3, [r4, #1]
 800aff0:	2b2a      	cmp	r3, #42	; 0x2a
 800aff2:	d135      	bne.n	800b060 <_svfiprintf_r+0x188>
 800aff4:	9b03      	ldr	r3, [sp, #12]
 800aff6:	3402      	adds	r4, #2
 800aff8:	1d1a      	adds	r2, r3, #4
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	9203      	str	r2, [sp, #12]
 800affe:	2b00      	cmp	r3, #0
 800b000:	bfb8      	it	lt
 800b002:	f04f 33ff 	movlt.w	r3, #4294967295
 800b006:	9305      	str	r3, [sp, #20]
 800b008:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800b0c8 <_svfiprintf_r+0x1f0>
 800b00c:	2203      	movs	r2, #3
 800b00e:	4650      	mov	r0, sl
 800b010:	7821      	ldrb	r1, [r4, #0]
 800b012:	f7ff f94f 	bl	800a2b4 <memchr>
 800b016:	b140      	cbz	r0, 800b02a <_svfiprintf_r+0x152>
 800b018:	2340      	movs	r3, #64	; 0x40
 800b01a:	eba0 000a 	sub.w	r0, r0, sl
 800b01e:	fa03 f000 	lsl.w	r0, r3, r0
 800b022:	9b04      	ldr	r3, [sp, #16]
 800b024:	3401      	adds	r4, #1
 800b026:	4303      	orrs	r3, r0
 800b028:	9304      	str	r3, [sp, #16]
 800b02a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b02e:	2206      	movs	r2, #6
 800b030:	4826      	ldr	r0, [pc, #152]	; (800b0cc <_svfiprintf_r+0x1f4>)
 800b032:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b036:	f7ff f93d 	bl	800a2b4 <memchr>
 800b03a:	2800      	cmp	r0, #0
 800b03c:	d038      	beq.n	800b0b0 <_svfiprintf_r+0x1d8>
 800b03e:	4b24      	ldr	r3, [pc, #144]	; (800b0d0 <_svfiprintf_r+0x1f8>)
 800b040:	bb1b      	cbnz	r3, 800b08a <_svfiprintf_r+0x1b2>
 800b042:	9b03      	ldr	r3, [sp, #12]
 800b044:	3307      	adds	r3, #7
 800b046:	f023 0307 	bic.w	r3, r3, #7
 800b04a:	3308      	adds	r3, #8
 800b04c:	9303      	str	r3, [sp, #12]
 800b04e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b050:	4433      	add	r3, r6
 800b052:	9309      	str	r3, [sp, #36]	; 0x24
 800b054:	e767      	b.n	800af26 <_svfiprintf_r+0x4e>
 800b056:	460c      	mov	r4, r1
 800b058:	2001      	movs	r0, #1
 800b05a:	fb0c 3202 	mla	r2, ip, r2, r3
 800b05e:	e7a5      	b.n	800afac <_svfiprintf_r+0xd4>
 800b060:	2300      	movs	r3, #0
 800b062:	f04f 0c0a 	mov.w	ip, #10
 800b066:	4619      	mov	r1, r3
 800b068:	3401      	adds	r4, #1
 800b06a:	9305      	str	r3, [sp, #20]
 800b06c:	4620      	mov	r0, r4
 800b06e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b072:	3a30      	subs	r2, #48	; 0x30
 800b074:	2a09      	cmp	r2, #9
 800b076:	d903      	bls.n	800b080 <_svfiprintf_r+0x1a8>
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d0c5      	beq.n	800b008 <_svfiprintf_r+0x130>
 800b07c:	9105      	str	r1, [sp, #20]
 800b07e:	e7c3      	b.n	800b008 <_svfiprintf_r+0x130>
 800b080:	4604      	mov	r4, r0
 800b082:	2301      	movs	r3, #1
 800b084:	fb0c 2101 	mla	r1, ip, r1, r2
 800b088:	e7f0      	b.n	800b06c <_svfiprintf_r+0x194>
 800b08a:	ab03      	add	r3, sp, #12
 800b08c:	9300      	str	r3, [sp, #0]
 800b08e:	462a      	mov	r2, r5
 800b090:	4638      	mov	r0, r7
 800b092:	4b10      	ldr	r3, [pc, #64]	; (800b0d4 <_svfiprintf_r+0x1fc>)
 800b094:	a904      	add	r1, sp, #16
 800b096:	f7fc fa5d 	bl	8007554 <_printf_float>
 800b09a:	1c42      	adds	r2, r0, #1
 800b09c:	4606      	mov	r6, r0
 800b09e:	d1d6      	bne.n	800b04e <_svfiprintf_r+0x176>
 800b0a0:	89ab      	ldrh	r3, [r5, #12]
 800b0a2:	065b      	lsls	r3, r3, #25
 800b0a4:	f53f af2c 	bmi.w	800af00 <_svfiprintf_r+0x28>
 800b0a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b0aa:	b01d      	add	sp, #116	; 0x74
 800b0ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0b0:	ab03      	add	r3, sp, #12
 800b0b2:	9300      	str	r3, [sp, #0]
 800b0b4:	462a      	mov	r2, r5
 800b0b6:	4638      	mov	r0, r7
 800b0b8:	4b06      	ldr	r3, [pc, #24]	; (800b0d4 <_svfiprintf_r+0x1fc>)
 800b0ba:	a904      	add	r1, sp, #16
 800b0bc:	f7fc fce6 	bl	8007a8c <_printf_i>
 800b0c0:	e7eb      	b.n	800b09a <_svfiprintf_r+0x1c2>
 800b0c2:	bf00      	nop
 800b0c4:	0800ca4c 	.word	0x0800ca4c
 800b0c8:	0800ca52 	.word	0x0800ca52
 800b0cc:	0800ca56 	.word	0x0800ca56
 800b0d0:	08007555 	.word	0x08007555
 800b0d4:	0800ae21 	.word	0x0800ae21

0800b0d8 <nan>:
 800b0d8:	2000      	movs	r0, #0
 800b0da:	4901      	ldr	r1, [pc, #4]	; (800b0e0 <nan+0x8>)
 800b0dc:	4770      	bx	lr
 800b0de:	bf00      	nop
 800b0e0:	7ff80000 	.word	0x7ff80000

0800b0e4 <_sbrk_r>:
 800b0e4:	b538      	push	{r3, r4, r5, lr}
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	4d05      	ldr	r5, [pc, #20]	; (800b100 <_sbrk_r+0x1c>)
 800b0ea:	4604      	mov	r4, r0
 800b0ec:	4608      	mov	r0, r1
 800b0ee:	602b      	str	r3, [r5, #0]
 800b0f0:	f7f7 fa0c 	bl	800250c <_sbrk>
 800b0f4:	1c43      	adds	r3, r0, #1
 800b0f6:	d102      	bne.n	800b0fe <_sbrk_r+0x1a>
 800b0f8:	682b      	ldr	r3, [r5, #0]
 800b0fa:	b103      	cbz	r3, 800b0fe <_sbrk_r+0x1a>
 800b0fc:	6023      	str	r3, [r4, #0]
 800b0fe:	bd38      	pop	{r3, r4, r5, pc}
 800b100:	200027b0 	.word	0x200027b0

0800b104 <strncmp>:
 800b104:	4603      	mov	r3, r0
 800b106:	b510      	push	{r4, lr}
 800b108:	b172      	cbz	r2, 800b128 <strncmp+0x24>
 800b10a:	3901      	subs	r1, #1
 800b10c:	1884      	adds	r4, r0, r2
 800b10e:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b112:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b116:	4290      	cmp	r0, r2
 800b118:	d101      	bne.n	800b11e <strncmp+0x1a>
 800b11a:	42a3      	cmp	r3, r4
 800b11c:	d101      	bne.n	800b122 <strncmp+0x1e>
 800b11e:	1a80      	subs	r0, r0, r2
 800b120:	bd10      	pop	{r4, pc}
 800b122:	2800      	cmp	r0, #0
 800b124:	d1f3      	bne.n	800b10e <strncmp+0xa>
 800b126:	e7fa      	b.n	800b11e <strncmp+0x1a>
 800b128:	4610      	mov	r0, r2
 800b12a:	e7f9      	b.n	800b120 <strncmp+0x1c>

0800b12c <__ascii_wctomb>:
 800b12c:	4603      	mov	r3, r0
 800b12e:	4608      	mov	r0, r1
 800b130:	b141      	cbz	r1, 800b144 <__ascii_wctomb+0x18>
 800b132:	2aff      	cmp	r2, #255	; 0xff
 800b134:	d904      	bls.n	800b140 <__ascii_wctomb+0x14>
 800b136:	228a      	movs	r2, #138	; 0x8a
 800b138:	f04f 30ff 	mov.w	r0, #4294967295
 800b13c:	601a      	str	r2, [r3, #0]
 800b13e:	4770      	bx	lr
 800b140:	2001      	movs	r0, #1
 800b142:	700a      	strb	r2, [r1, #0]
 800b144:	4770      	bx	lr
	...

0800b148 <__assert_func>:
 800b148:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b14a:	4614      	mov	r4, r2
 800b14c:	461a      	mov	r2, r3
 800b14e:	4b09      	ldr	r3, [pc, #36]	; (800b174 <__assert_func+0x2c>)
 800b150:	4605      	mov	r5, r0
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	68d8      	ldr	r0, [r3, #12]
 800b156:	b14c      	cbz	r4, 800b16c <__assert_func+0x24>
 800b158:	4b07      	ldr	r3, [pc, #28]	; (800b178 <__assert_func+0x30>)
 800b15a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b15e:	9100      	str	r1, [sp, #0]
 800b160:	462b      	mov	r3, r5
 800b162:	4906      	ldr	r1, [pc, #24]	; (800b17c <__assert_func+0x34>)
 800b164:	f000 f80e 	bl	800b184 <fiprintf>
 800b168:	f000 fa70 	bl	800b64c <abort>
 800b16c:	4b04      	ldr	r3, [pc, #16]	; (800b180 <__assert_func+0x38>)
 800b16e:	461c      	mov	r4, r3
 800b170:	e7f3      	b.n	800b15a <__assert_func+0x12>
 800b172:	bf00      	nop
 800b174:	20000018 	.word	0x20000018
 800b178:	0800ca5d 	.word	0x0800ca5d
 800b17c:	0800ca6a 	.word	0x0800ca6a
 800b180:	0800ca98 	.word	0x0800ca98

0800b184 <fiprintf>:
 800b184:	b40e      	push	{r1, r2, r3}
 800b186:	b503      	push	{r0, r1, lr}
 800b188:	4601      	mov	r1, r0
 800b18a:	ab03      	add	r3, sp, #12
 800b18c:	4805      	ldr	r0, [pc, #20]	; (800b1a4 <fiprintf+0x20>)
 800b18e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b192:	6800      	ldr	r0, [r0, #0]
 800b194:	9301      	str	r3, [sp, #4]
 800b196:	f000 f869 	bl	800b26c <_vfiprintf_r>
 800b19a:	b002      	add	sp, #8
 800b19c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b1a0:	b003      	add	sp, #12
 800b1a2:	4770      	bx	lr
 800b1a4:	20000018 	.word	0x20000018

0800b1a8 <__malloc_lock>:
 800b1a8:	4801      	ldr	r0, [pc, #4]	; (800b1b0 <__malloc_lock+0x8>)
 800b1aa:	f000 bc0b 	b.w	800b9c4 <__retarget_lock_acquire_recursive>
 800b1ae:	bf00      	nop
 800b1b0:	200027b4 	.word	0x200027b4

0800b1b4 <__malloc_unlock>:
 800b1b4:	4801      	ldr	r0, [pc, #4]	; (800b1bc <__malloc_unlock+0x8>)
 800b1b6:	f000 bc06 	b.w	800b9c6 <__retarget_lock_release_recursive>
 800b1ba:	bf00      	nop
 800b1bc:	200027b4 	.word	0x200027b4

0800b1c0 <_realloc_r>:
 800b1c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1c4:	4680      	mov	r8, r0
 800b1c6:	4614      	mov	r4, r2
 800b1c8:	460e      	mov	r6, r1
 800b1ca:	b921      	cbnz	r1, 800b1d6 <_realloc_r+0x16>
 800b1cc:	4611      	mov	r1, r2
 800b1ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b1d2:	f7ff bdb1 	b.w	800ad38 <_malloc_r>
 800b1d6:	b92a      	cbnz	r2, 800b1e4 <_realloc_r+0x24>
 800b1d8:	f7ff fd46 	bl	800ac68 <_free_r>
 800b1dc:	4625      	mov	r5, r4
 800b1de:	4628      	mov	r0, r5
 800b1e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1e4:	f000 fc56 	bl	800ba94 <_malloc_usable_size_r>
 800b1e8:	4284      	cmp	r4, r0
 800b1ea:	4607      	mov	r7, r0
 800b1ec:	d802      	bhi.n	800b1f4 <_realloc_r+0x34>
 800b1ee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b1f2:	d812      	bhi.n	800b21a <_realloc_r+0x5a>
 800b1f4:	4621      	mov	r1, r4
 800b1f6:	4640      	mov	r0, r8
 800b1f8:	f7ff fd9e 	bl	800ad38 <_malloc_r>
 800b1fc:	4605      	mov	r5, r0
 800b1fe:	2800      	cmp	r0, #0
 800b200:	d0ed      	beq.n	800b1de <_realloc_r+0x1e>
 800b202:	42bc      	cmp	r4, r7
 800b204:	4622      	mov	r2, r4
 800b206:	4631      	mov	r1, r6
 800b208:	bf28      	it	cs
 800b20a:	463a      	movcs	r2, r7
 800b20c:	f7fc f8d4 	bl	80073b8 <memcpy>
 800b210:	4631      	mov	r1, r6
 800b212:	4640      	mov	r0, r8
 800b214:	f7ff fd28 	bl	800ac68 <_free_r>
 800b218:	e7e1      	b.n	800b1de <_realloc_r+0x1e>
 800b21a:	4635      	mov	r5, r6
 800b21c:	e7df      	b.n	800b1de <_realloc_r+0x1e>

0800b21e <__sfputc_r>:
 800b21e:	6893      	ldr	r3, [r2, #8]
 800b220:	b410      	push	{r4}
 800b222:	3b01      	subs	r3, #1
 800b224:	2b00      	cmp	r3, #0
 800b226:	6093      	str	r3, [r2, #8]
 800b228:	da07      	bge.n	800b23a <__sfputc_r+0x1c>
 800b22a:	6994      	ldr	r4, [r2, #24]
 800b22c:	42a3      	cmp	r3, r4
 800b22e:	db01      	blt.n	800b234 <__sfputc_r+0x16>
 800b230:	290a      	cmp	r1, #10
 800b232:	d102      	bne.n	800b23a <__sfputc_r+0x1c>
 800b234:	bc10      	pop	{r4}
 800b236:	f000 b949 	b.w	800b4cc <__swbuf_r>
 800b23a:	6813      	ldr	r3, [r2, #0]
 800b23c:	1c58      	adds	r0, r3, #1
 800b23e:	6010      	str	r0, [r2, #0]
 800b240:	7019      	strb	r1, [r3, #0]
 800b242:	4608      	mov	r0, r1
 800b244:	bc10      	pop	{r4}
 800b246:	4770      	bx	lr

0800b248 <__sfputs_r>:
 800b248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b24a:	4606      	mov	r6, r0
 800b24c:	460f      	mov	r7, r1
 800b24e:	4614      	mov	r4, r2
 800b250:	18d5      	adds	r5, r2, r3
 800b252:	42ac      	cmp	r4, r5
 800b254:	d101      	bne.n	800b25a <__sfputs_r+0x12>
 800b256:	2000      	movs	r0, #0
 800b258:	e007      	b.n	800b26a <__sfputs_r+0x22>
 800b25a:	463a      	mov	r2, r7
 800b25c:	4630      	mov	r0, r6
 800b25e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b262:	f7ff ffdc 	bl	800b21e <__sfputc_r>
 800b266:	1c43      	adds	r3, r0, #1
 800b268:	d1f3      	bne.n	800b252 <__sfputs_r+0xa>
 800b26a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b26c <_vfiprintf_r>:
 800b26c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b270:	460d      	mov	r5, r1
 800b272:	4614      	mov	r4, r2
 800b274:	4698      	mov	r8, r3
 800b276:	4606      	mov	r6, r0
 800b278:	b09d      	sub	sp, #116	; 0x74
 800b27a:	b118      	cbz	r0, 800b284 <_vfiprintf_r+0x18>
 800b27c:	6983      	ldr	r3, [r0, #24]
 800b27e:	b90b      	cbnz	r3, 800b284 <_vfiprintf_r+0x18>
 800b280:	f000 fb02 	bl	800b888 <__sinit>
 800b284:	4b89      	ldr	r3, [pc, #548]	; (800b4ac <_vfiprintf_r+0x240>)
 800b286:	429d      	cmp	r5, r3
 800b288:	d11b      	bne.n	800b2c2 <_vfiprintf_r+0x56>
 800b28a:	6875      	ldr	r5, [r6, #4]
 800b28c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b28e:	07d9      	lsls	r1, r3, #31
 800b290:	d405      	bmi.n	800b29e <_vfiprintf_r+0x32>
 800b292:	89ab      	ldrh	r3, [r5, #12]
 800b294:	059a      	lsls	r2, r3, #22
 800b296:	d402      	bmi.n	800b29e <_vfiprintf_r+0x32>
 800b298:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b29a:	f000 fb93 	bl	800b9c4 <__retarget_lock_acquire_recursive>
 800b29e:	89ab      	ldrh	r3, [r5, #12]
 800b2a0:	071b      	lsls	r3, r3, #28
 800b2a2:	d501      	bpl.n	800b2a8 <_vfiprintf_r+0x3c>
 800b2a4:	692b      	ldr	r3, [r5, #16]
 800b2a6:	b9eb      	cbnz	r3, 800b2e4 <_vfiprintf_r+0x78>
 800b2a8:	4629      	mov	r1, r5
 800b2aa:	4630      	mov	r0, r6
 800b2ac:	f000 f960 	bl	800b570 <__swsetup_r>
 800b2b0:	b1c0      	cbz	r0, 800b2e4 <_vfiprintf_r+0x78>
 800b2b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b2b4:	07dc      	lsls	r4, r3, #31
 800b2b6:	d50e      	bpl.n	800b2d6 <_vfiprintf_r+0x6a>
 800b2b8:	f04f 30ff 	mov.w	r0, #4294967295
 800b2bc:	b01d      	add	sp, #116	; 0x74
 800b2be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2c2:	4b7b      	ldr	r3, [pc, #492]	; (800b4b0 <_vfiprintf_r+0x244>)
 800b2c4:	429d      	cmp	r5, r3
 800b2c6:	d101      	bne.n	800b2cc <_vfiprintf_r+0x60>
 800b2c8:	68b5      	ldr	r5, [r6, #8]
 800b2ca:	e7df      	b.n	800b28c <_vfiprintf_r+0x20>
 800b2cc:	4b79      	ldr	r3, [pc, #484]	; (800b4b4 <_vfiprintf_r+0x248>)
 800b2ce:	429d      	cmp	r5, r3
 800b2d0:	bf08      	it	eq
 800b2d2:	68f5      	ldreq	r5, [r6, #12]
 800b2d4:	e7da      	b.n	800b28c <_vfiprintf_r+0x20>
 800b2d6:	89ab      	ldrh	r3, [r5, #12]
 800b2d8:	0598      	lsls	r0, r3, #22
 800b2da:	d4ed      	bmi.n	800b2b8 <_vfiprintf_r+0x4c>
 800b2dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b2de:	f000 fb72 	bl	800b9c6 <__retarget_lock_release_recursive>
 800b2e2:	e7e9      	b.n	800b2b8 <_vfiprintf_r+0x4c>
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	9309      	str	r3, [sp, #36]	; 0x24
 800b2e8:	2320      	movs	r3, #32
 800b2ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b2ee:	2330      	movs	r3, #48	; 0x30
 800b2f0:	f04f 0901 	mov.w	r9, #1
 800b2f4:	f8cd 800c 	str.w	r8, [sp, #12]
 800b2f8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800b4b8 <_vfiprintf_r+0x24c>
 800b2fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b300:	4623      	mov	r3, r4
 800b302:	469a      	mov	sl, r3
 800b304:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b308:	b10a      	cbz	r2, 800b30e <_vfiprintf_r+0xa2>
 800b30a:	2a25      	cmp	r2, #37	; 0x25
 800b30c:	d1f9      	bne.n	800b302 <_vfiprintf_r+0x96>
 800b30e:	ebba 0b04 	subs.w	fp, sl, r4
 800b312:	d00b      	beq.n	800b32c <_vfiprintf_r+0xc0>
 800b314:	465b      	mov	r3, fp
 800b316:	4622      	mov	r2, r4
 800b318:	4629      	mov	r1, r5
 800b31a:	4630      	mov	r0, r6
 800b31c:	f7ff ff94 	bl	800b248 <__sfputs_r>
 800b320:	3001      	adds	r0, #1
 800b322:	f000 80aa 	beq.w	800b47a <_vfiprintf_r+0x20e>
 800b326:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b328:	445a      	add	r2, fp
 800b32a:	9209      	str	r2, [sp, #36]	; 0x24
 800b32c:	f89a 3000 	ldrb.w	r3, [sl]
 800b330:	2b00      	cmp	r3, #0
 800b332:	f000 80a2 	beq.w	800b47a <_vfiprintf_r+0x20e>
 800b336:	2300      	movs	r3, #0
 800b338:	f04f 32ff 	mov.w	r2, #4294967295
 800b33c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b340:	f10a 0a01 	add.w	sl, sl, #1
 800b344:	9304      	str	r3, [sp, #16]
 800b346:	9307      	str	r3, [sp, #28]
 800b348:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b34c:	931a      	str	r3, [sp, #104]	; 0x68
 800b34e:	4654      	mov	r4, sl
 800b350:	2205      	movs	r2, #5
 800b352:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b356:	4858      	ldr	r0, [pc, #352]	; (800b4b8 <_vfiprintf_r+0x24c>)
 800b358:	f7fe ffac 	bl	800a2b4 <memchr>
 800b35c:	9a04      	ldr	r2, [sp, #16]
 800b35e:	b9d8      	cbnz	r0, 800b398 <_vfiprintf_r+0x12c>
 800b360:	06d1      	lsls	r1, r2, #27
 800b362:	bf44      	itt	mi
 800b364:	2320      	movmi	r3, #32
 800b366:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b36a:	0713      	lsls	r3, r2, #28
 800b36c:	bf44      	itt	mi
 800b36e:	232b      	movmi	r3, #43	; 0x2b
 800b370:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b374:	f89a 3000 	ldrb.w	r3, [sl]
 800b378:	2b2a      	cmp	r3, #42	; 0x2a
 800b37a:	d015      	beq.n	800b3a8 <_vfiprintf_r+0x13c>
 800b37c:	4654      	mov	r4, sl
 800b37e:	2000      	movs	r0, #0
 800b380:	f04f 0c0a 	mov.w	ip, #10
 800b384:	9a07      	ldr	r2, [sp, #28]
 800b386:	4621      	mov	r1, r4
 800b388:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b38c:	3b30      	subs	r3, #48	; 0x30
 800b38e:	2b09      	cmp	r3, #9
 800b390:	d94e      	bls.n	800b430 <_vfiprintf_r+0x1c4>
 800b392:	b1b0      	cbz	r0, 800b3c2 <_vfiprintf_r+0x156>
 800b394:	9207      	str	r2, [sp, #28]
 800b396:	e014      	b.n	800b3c2 <_vfiprintf_r+0x156>
 800b398:	eba0 0308 	sub.w	r3, r0, r8
 800b39c:	fa09 f303 	lsl.w	r3, r9, r3
 800b3a0:	4313      	orrs	r3, r2
 800b3a2:	46a2      	mov	sl, r4
 800b3a4:	9304      	str	r3, [sp, #16]
 800b3a6:	e7d2      	b.n	800b34e <_vfiprintf_r+0xe2>
 800b3a8:	9b03      	ldr	r3, [sp, #12]
 800b3aa:	1d19      	adds	r1, r3, #4
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	9103      	str	r1, [sp, #12]
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	bfbb      	ittet	lt
 800b3b4:	425b      	neglt	r3, r3
 800b3b6:	f042 0202 	orrlt.w	r2, r2, #2
 800b3ba:	9307      	strge	r3, [sp, #28]
 800b3bc:	9307      	strlt	r3, [sp, #28]
 800b3be:	bfb8      	it	lt
 800b3c0:	9204      	strlt	r2, [sp, #16]
 800b3c2:	7823      	ldrb	r3, [r4, #0]
 800b3c4:	2b2e      	cmp	r3, #46	; 0x2e
 800b3c6:	d10c      	bne.n	800b3e2 <_vfiprintf_r+0x176>
 800b3c8:	7863      	ldrb	r3, [r4, #1]
 800b3ca:	2b2a      	cmp	r3, #42	; 0x2a
 800b3cc:	d135      	bne.n	800b43a <_vfiprintf_r+0x1ce>
 800b3ce:	9b03      	ldr	r3, [sp, #12]
 800b3d0:	3402      	adds	r4, #2
 800b3d2:	1d1a      	adds	r2, r3, #4
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	9203      	str	r2, [sp, #12]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	bfb8      	it	lt
 800b3dc:	f04f 33ff 	movlt.w	r3, #4294967295
 800b3e0:	9305      	str	r3, [sp, #20]
 800b3e2:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800b4bc <_vfiprintf_r+0x250>
 800b3e6:	2203      	movs	r2, #3
 800b3e8:	4650      	mov	r0, sl
 800b3ea:	7821      	ldrb	r1, [r4, #0]
 800b3ec:	f7fe ff62 	bl	800a2b4 <memchr>
 800b3f0:	b140      	cbz	r0, 800b404 <_vfiprintf_r+0x198>
 800b3f2:	2340      	movs	r3, #64	; 0x40
 800b3f4:	eba0 000a 	sub.w	r0, r0, sl
 800b3f8:	fa03 f000 	lsl.w	r0, r3, r0
 800b3fc:	9b04      	ldr	r3, [sp, #16]
 800b3fe:	3401      	adds	r4, #1
 800b400:	4303      	orrs	r3, r0
 800b402:	9304      	str	r3, [sp, #16]
 800b404:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b408:	2206      	movs	r2, #6
 800b40a:	482d      	ldr	r0, [pc, #180]	; (800b4c0 <_vfiprintf_r+0x254>)
 800b40c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b410:	f7fe ff50 	bl	800a2b4 <memchr>
 800b414:	2800      	cmp	r0, #0
 800b416:	d03f      	beq.n	800b498 <_vfiprintf_r+0x22c>
 800b418:	4b2a      	ldr	r3, [pc, #168]	; (800b4c4 <_vfiprintf_r+0x258>)
 800b41a:	bb1b      	cbnz	r3, 800b464 <_vfiprintf_r+0x1f8>
 800b41c:	9b03      	ldr	r3, [sp, #12]
 800b41e:	3307      	adds	r3, #7
 800b420:	f023 0307 	bic.w	r3, r3, #7
 800b424:	3308      	adds	r3, #8
 800b426:	9303      	str	r3, [sp, #12]
 800b428:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b42a:	443b      	add	r3, r7
 800b42c:	9309      	str	r3, [sp, #36]	; 0x24
 800b42e:	e767      	b.n	800b300 <_vfiprintf_r+0x94>
 800b430:	460c      	mov	r4, r1
 800b432:	2001      	movs	r0, #1
 800b434:	fb0c 3202 	mla	r2, ip, r2, r3
 800b438:	e7a5      	b.n	800b386 <_vfiprintf_r+0x11a>
 800b43a:	2300      	movs	r3, #0
 800b43c:	f04f 0c0a 	mov.w	ip, #10
 800b440:	4619      	mov	r1, r3
 800b442:	3401      	adds	r4, #1
 800b444:	9305      	str	r3, [sp, #20]
 800b446:	4620      	mov	r0, r4
 800b448:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b44c:	3a30      	subs	r2, #48	; 0x30
 800b44e:	2a09      	cmp	r2, #9
 800b450:	d903      	bls.n	800b45a <_vfiprintf_r+0x1ee>
 800b452:	2b00      	cmp	r3, #0
 800b454:	d0c5      	beq.n	800b3e2 <_vfiprintf_r+0x176>
 800b456:	9105      	str	r1, [sp, #20]
 800b458:	e7c3      	b.n	800b3e2 <_vfiprintf_r+0x176>
 800b45a:	4604      	mov	r4, r0
 800b45c:	2301      	movs	r3, #1
 800b45e:	fb0c 2101 	mla	r1, ip, r1, r2
 800b462:	e7f0      	b.n	800b446 <_vfiprintf_r+0x1da>
 800b464:	ab03      	add	r3, sp, #12
 800b466:	9300      	str	r3, [sp, #0]
 800b468:	462a      	mov	r2, r5
 800b46a:	4630      	mov	r0, r6
 800b46c:	4b16      	ldr	r3, [pc, #88]	; (800b4c8 <_vfiprintf_r+0x25c>)
 800b46e:	a904      	add	r1, sp, #16
 800b470:	f7fc f870 	bl	8007554 <_printf_float>
 800b474:	4607      	mov	r7, r0
 800b476:	1c78      	adds	r0, r7, #1
 800b478:	d1d6      	bne.n	800b428 <_vfiprintf_r+0x1bc>
 800b47a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b47c:	07d9      	lsls	r1, r3, #31
 800b47e:	d405      	bmi.n	800b48c <_vfiprintf_r+0x220>
 800b480:	89ab      	ldrh	r3, [r5, #12]
 800b482:	059a      	lsls	r2, r3, #22
 800b484:	d402      	bmi.n	800b48c <_vfiprintf_r+0x220>
 800b486:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b488:	f000 fa9d 	bl	800b9c6 <__retarget_lock_release_recursive>
 800b48c:	89ab      	ldrh	r3, [r5, #12]
 800b48e:	065b      	lsls	r3, r3, #25
 800b490:	f53f af12 	bmi.w	800b2b8 <_vfiprintf_r+0x4c>
 800b494:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b496:	e711      	b.n	800b2bc <_vfiprintf_r+0x50>
 800b498:	ab03      	add	r3, sp, #12
 800b49a:	9300      	str	r3, [sp, #0]
 800b49c:	462a      	mov	r2, r5
 800b49e:	4630      	mov	r0, r6
 800b4a0:	4b09      	ldr	r3, [pc, #36]	; (800b4c8 <_vfiprintf_r+0x25c>)
 800b4a2:	a904      	add	r1, sp, #16
 800b4a4:	f7fc faf2 	bl	8007a8c <_printf_i>
 800b4a8:	e7e4      	b.n	800b474 <_vfiprintf_r+0x208>
 800b4aa:	bf00      	nop
 800b4ac:	0800cabc 	.word	0x0800cabc
 800b4b0:	0800cadc 	.word	0x0800cadc
 800b4b4:	0800ca9c 	.word	0x0800ca9c
 800b4b8:	0800ca4c 	.word	0x0800ca4c
 800b4bc:	0800ca52 	.word	0x0800ca52
 800b4c0:	0800ca56 	.word	0x0800ca56
 800b4c4:	08007555 	.word	0x08007555
 800b4c8:	0800b249 	.word	0x0800b249

0800b4cc <__swbuf_r>:
 800b4cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4ce:	460e      	mov	r6, r1
 800b4d0:	4614      	mov	r4, r2
 800b4d2:	4605      	mov	r5, r0
 800b4d4:	b118      	cbz	r0, 800b4de <__swbuf_r+0x12>
 800b4d6:	6983      	ldr	r3, [r0, #24]
 800b4d8:	b90b      	cbnz	r3, 800b4de <__swbuf_r+0x12>
 800b4da:	f000 f9d5 	bl	800b888 <__sinit>
 800b4de:	4b21      	ldr	r3, [pc, #132]	; (800b564 <__swbuf_r+0x98>)
 800b4e0:	429c      	cmp	r4, r3
 800b4e2:	d12b      	bne.n	800b53c <__swbuf_r+0x70>
 800b4e4:	686c      	ldr	r4, [r5, #4]
 800b4e6:	69a3      	ldr	r3, [r4, #24]
 800b4e8:	60a3      	str	r3, [r4, #8]
 800b4ea:	89a3      	ldrh	r3, [r4, #12]
 800b4ec:	071a      	lsls	r2, r3, #28
 800b4ee:	d52f      	bpl.n	800b550 <__swbuf_r+0x84>
 800b4f0:	6923      	ldr	r3, [r4, #16]
 800b4f2:	b36b      	cbz	r3, 800b550 <__swbuf_r+0x84>
 800b4f4:	6923      	ldr	r3, [r4, #16]
 800b4f6:	6820      	ldr	r0, [r4, #0]
 800b4f8:	b2f6      	uxtb	r6, r6
 800b4fa:	1ac0      	subs	r0, r0, r3
 800b4fc:	6963      	ldr	r3, [r4, #20]
 800b4fe:	4637      	mov	r7, r6
 800b500:	4283      	cmp	r3, r0
 800b502:	dc04      	bgt.n	800b50e <__swbuf_r+0x42>
 800b504:	4621      	mov	r1, r4
 800b506:	4628      	mov	r0, r5
 800b508:	f000 f92a 	bl	800b760 <_fflush_r>
 800b50c:	bb30      	cbnz	r0, 800b55c <__swbuf_r+0x90>
 800b50e:	68a3      	ldr	r3, [r4, #8]
 800b510:	3001      	adds	r0, #1
 800b512:	3b01      	subs	r3, #1
 800b514:	60a3      	str	r3, [r4, #8]
 800b516:	6823      	ldr	r3, [r4, #0]
 800b518:	1c5a      	adds	r2, r3, #1
 800b51a:	6022      	str	r2, [r4, #0]
 800b51c:	701e      	strb	r6, [r3, #0]
 800b51e:	6963      	ldr	r3, [r4, #20]
 800b520:	4283      	cmp	r3, r0
 800b522:	d004      	beq.n	800b52e <__swbuf_r+0x62>
 800b524:	89a3      	ldrh	r3, [r4, #12]
 800b526:	07db      	lsls	r3, r3, #31
 800b528:	d506      	bpl.n	800b538 <__swbuf_r+0x6c>
 800b52a:	2e0a      	cmp	r6, #10
 800b52c:	d104      	bne.n	800b538 <__swbuf_r+0x6c>
 800b52e:	4621      	mov	r1, r4
 800b530:	4628      	mov	r0, r5
 800b532:	f000 f915 	bl	800b760 <_fflush_r>
 800b536:	b988      	cbnz	r0, 800b55c <__swbuf_r+0x90>
 800b538:	4638      	mov	r0, r7
 800b53a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b53c:	4b0a      	ldr	r3, [pc, #40]	; (800b568 <__swbuf_r+0x9c>)
 800b53e:	429c      	cmp	r4, r3
 800b540:	d101      	bne.n	800b546 <__swbuf_r+0x7a>
 800b542:	68ac      	ldr	r4, [r5, #8]
 800b544:	e7cf      	b.n	800b4e6 <__swbuf_r+0x1a>
 800b546:	4b09      	ldr	r3, [pc, #36]	; (800b56c <__swbuf_r+0xa0>)
 800b548:	429c      	cmp	r4, r3
 800b54a:	bf08      	it	eq
 800b54c:	68ec      	ldreq	r4, [r5, #12]
 800b54e:	e7ca      	b.n	800b4e6 <__swbuf_r+0x1a>
 800b550:	4621      	mov	r1, r4
 800b552:	4628      	mov	r0, r5
 800b554:	f000 f80c 	bl	800b570 <__swsetup_r>
 800b558:	2800      	cmp	r0, #0
 800b55a:	d0cb      	beq.n	800b4f4 <__swbuf_r+0x28>
 800b55c:	f04f 37ff 	mov.w	r7, #4294967295
 800b560:	e7ea      	b.n	800b538 <__swbuf_r+0x6c>
 800b562:	bf00      	nop
 800b564:	0800cabc 	.word	0x0800cabc
 800b568:	0800cadc 	.word	0x0800cadc
 800b56c:	0800ca9c 	.word	0x0800ca9c

0800b570 <__swsetup_r>:
 800b570:	4b32      	ldr	r3, [pc, #200]	; (800b63c <__swsetup_r+0xcc>)
 800b572:	b570      	push	{r4, r5, r6, lr}
 800b574:	681d      	ldr	r5, [r3, #0]
 800b576:	4606      	mov	r6, r0
 800b578:	460c      	mov	r4, r1
 800b57a:	b125      	cbz	r5, 800b586 <__swsetup_r+0x16>
 800b57c:	69ab      	ldr	r3, [r5, #24]
 800b57e:	b913      	cbnz	r3, 800b586 <__swsetup_r+0x16>
 800b580:	4628      	mov	r0, r5
 800b582:	f000 f981 	bl	800b888 <__sinit>
 800b586:	4b2e      	ldr	r3, [pc, #184]	; (800b640 <__swsetup_r+0xd0>)
 800b588:	429c      	cmp	r4, r3
 800b58a:	d10f      	bne.n	800b5ac <__swsetup_r+0x3c>
 800b58c:	686c      	ldr	r4, [r5, #4]
 800b58e:	89a3      	ldrh	r3, [r4, #12]
 800b590:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b594:	0719      	lsls	r1, r3, #28
 800b596:	d42c      	bmi.n	800b5f2 <__swsetup_r+0x82>
 800b598:	06dd      	lsls	r5, r3, #27
 800b59a:	d411      	bmi.n	800b5c0 <__swsetup_r+0x50>
 800b59c:	2309      	movs	r3, #9
 800b59e:	6033      	str	r3, [r6, #0]
 800b5a0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b5a4:	f04f 30ff 	mov.w	r0, #4294967295
 800b5a8:	81a3      	strh	r3, [r4, #12]
 800b5aa:	e03e      	b.n	800b62a <__swsetup_r+0xba>
 800b5ac:	4b25      	ldr	r3, [pc, #148]	; (800b644 <__swsetup_r+0xd4>)
 800b5ae:	429c      	cmp	r4, r3
 800b5b0:	d101      	bne.n	800b5b6 <__swsetup_r+0x46>
 800b5b2:	68ac      	ldr	r4, [r5, #8]
 800b5b4:	e7eb      	b.n	800b58e <__swsetup_r+0x1e>
 800b5b6:	4b24      	ldr	r3, [pc, #144]	; (800b648 <__swsetup_r+0xd8>)
 800b5b8:	429c      	cmp	r4, r3
 800b5ba:	bf08      	it	eq
 800b5bc:	68ec      	ldreq	r4, [r5, #12]
 800b5be:	e7e6      	b.n	800b58e <__swsetup_r+0x1e>
 800b5c0:	0758      	lsls	r0, r3, #29
 800b5c2:	d512      	bpl.n	800b5ea <__swsetup_r+0x7a>
 800b5c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b5c6:	b141      	cbz	r1, 800b5da <__swsetup_r+0x6a>
 800b5c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b5cc:	4299      	cmp	r1, r3
 800b5ce:	d002      	beq.n	800b5d6 <__swsetup_r+0x66>
 800b5d0:	4630      	mov	r0, r6
 800b5d2:	f7ff fb49 	bl	800ac68 <_free_r>
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	6363      	str	r3, [r4, #52]	; 0x34
 800b5da:	89a3      	ldrh	r3, [r4, #12]
 800b5dc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b5e0:	81a3      	strh	r3, [r4, #12]
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	6063      	str	r3, [r4, #4]
 800b5e6:	6923      	ldr	r3, [r4, #16]
 800b5e8:	6023      	str	r3, [r4, #0]
 800b5ea:	89a3      	ldrh	r3, [r4, #12]
 800b5ec:	f043 0308 	orr.w	r3, r3, #8
 800b5f0:	81a3      	strh	r3, [r4, #12]
 800b5f2:	6923      	ldr	r3, [r4, #16]
 800b5f4:	b94b      	cbnz	r3, 800b60a <__swsetup_r+0x9a>
 800b5f6:	89a3      	ldrh	r3, [r4, #12]
 800b5f8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b5fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b600:	d003      	beq.n	800b60a <__swsetup_r+0x9a>
 800b602:	4621      	mov	r1, r4
 800b604:	4630      	mov	r0, r6
 800b606:	f000 fa05 	bl	800ba14 <__smakebuf_r>
 800b60a:	89a0      	ldrh	r0, [r4, #12]
 800b60c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b610:	f010 0301 	ands.w	r3, r0, #1
 800b614:	d00a      	beq.n	800b62c <__swsetup_r+0xbc>
 800b616:	2300      	movs	r3, #0
 800b618:	60a3      	str	r3, [r4, #8]
 800b61a:	6963      	ldr	r3, [r4, #20]
 800b61c:	425b      	negs	r3, r3
 800b61e:	61a3      	str	r3, [r4, #24]
 800b620:	6923      	ldr	r3, [r4, #16]
 800b622:	b943      	cbnz	r3, 800b636 <__swsetup_r+0xc6>
 800b624:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b628:	d1ba      	bne.n	800b5a0 <__swsetup_r+0x30>
 800b62a:	bd70      	pop	{r4, r5, r6, pc}
 800b62c:	0781      	lsls	r1, r0, #30
 800b62e:	bf58      	it	pl
 800b630:	6963      	ldrpl	r3, [r4, #20]
 800b632:	60a3      	str	r3, [r4, #8]
 800b634:	e7f4      	b.n	800b620 <__swsetup_r+0xb0>
 800b636:	2000      	movs	r0, #0
 800b638:	e7f7      	b.n	800b62a <__swsetup_r+0xba>
 800b63a:	bf00      	nop
 800b63c:	20000018 	.word	0x20000018
 800b640:	0800cabc 	.word	0x0800cabc
 800b644:	0800cadc 	.word	0x0800cadc
 800b648:	0800ca9c 	.word	0x0800ca9c

0800b64c <abort>:
 800b64c:	2006      	movs	r0, #6
 800b64e:	b508      	push	{r3, lr}
 800b650:	f000 fa50 	bl	800baf4 <raise>
 800b654:	2001      	movs	r0, #1
 800b656:	f7f6 ff2d 	bl	80024b4 <_exit>
	...

0800b65c <__sflush_r>:
 800b65c:	898a      	ldrh	r2, [r1, #12]
 800b65e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b660:	4605      	mov	r5, r0
 800b662:	0710      	lsls	r0, r2, #28
 800b664:	460c      	mov	r4, r1
 800b666:	d457      	bmi.n	800b718 <__sflush_r+0xbc>
 800b668:	684b      	ldr	r3, [r1, #4]
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	dc04      	bgt.n	800b678 <__sflush_r+0x1c>
 800b66e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b670:	2b00      	cmp	r3, #0
 800b672:	dc01      	bgt.n	800b678 <__sflush_r+0x1c>
 800b674:	2000      	movs	r0, #0
 800b676:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b678:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b67a:	2e00      	cmp	r6, #0
 800b67c:	d0fa      	beq.n	800b674 <__sflush_r+0x18>
 800b67e:	2300      	movs	r3, #0
 800b680:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b684:	682f      	ldr	r7, [r5, #0]
 800b686:	602b      	str	r3, [r5, #0]
 800b688:	d032      	beq.n	800b6f0 <__sflush_r+0x94>
 800b68a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b68c:	89a3      	ldrh	r3, [r4, #12]
 800b68e:	075a      	lsls	r2, r3, #29
 800b690:	d505      	bpl.n	800b69e <__sflush_r+0x42>
 800b692:	6863      	ldr	r3, [r4, #4]
 800b694:	1ac0      	subs	r0, r0, r3
 800b696:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b698:	b10b      	cbz	r3, 800b69e <__sflush_r+0x42>
 800b69a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b69c:	1ac0      	subs	r0, r0, r3
 800b69e:	2300      	movs	r3, #0
 800b6a0:	4602      	mov	r2, r0
 800b6a2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b6a4:	4628      	mov	r0, r5
 800b6a6:	6a21      	ldr	r1, [r4, #32]
 800b6a8:	47b0      	blx	r6
 800b6aa:	1c43      	adds	r3, r0, #1
 800b6ac:	89a3      	ldrh	r3, [r4, #12]
 800b6ae:	d106      	bne.n	800b6be <__sflush_r+0x62>
 800b6b0:	6829      	ldr	r1, [r5, #0]
 800b6b2:	291d      	cmp	r1, #29
 800b6b4:	d82c      	bhi.n	800b710 <__sflush_r+0xb4>
 800b6b6:	4a29      	ldr	r2, [pc, #164]	; (800b75c <__sflush_r+0x100>)
 800b6b8:	40ca      	lsrs	r2, r1
 800b6ba:	07d6      	lsls	r6, r2, #31
 800b6bc:	d528      	bpl.n	800b710 <__sflush_r+0xb4>
 800b6be:	2200      	movs	r2, #0
 800b6c0:	6062      	str	r2, [r4, #4]
 800b6c2:	6922      	ldr	r2, [r4, #16]
 800b6c4:	04d9      	lsls	r1, r3, #19
 800b6c6:	6022      	str	r2, [r4, #0]
 800b6c8:	d504      	bpl.n	800b6d4 <__sflush_r+0x78>
 800b6ca:	1c42      	adds	r2, r0, #1
 800b6cc:	d101      	bne.n	800b6d2 <__sflush_r+0x76>
 800b6ce:	682b      	ldr	r3, [r5, #0]
 800b6d0:	b903      	cbnz	r3, 800b6d4 <__sflush_r+0x78>
 800b6d2:	6560      	str	r0, [r4, #84]	; 0x54
 800b6d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b6d6:	602f      	str	r7, [r5, #0]
 800b6d8:	2900      	cmp	r1, #0
 800b6da:	d0cb      	beq.n	800b674 <__sflush_r+0x18>
 800b6dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b6e0:	4299      	cmp	r1, r3
 800b6e2:	d002      	beq.n	800b6ea <__sflush_r+0x8e>
 800b6e4:	4628      	mov	r0, r5
 800b6e6:	f7ff fabf 	bl	800ac68 <_free_r>
 800b6ea:	2000      	movs	r0, #0
 800b6ec:	6360      	str	r0, [r4, #52]	; 0x34
 800b6ee:	e7c2      	b.n	800b676 <__sflush_r+0x1a>
 800b6f0:	6a21      	ldr	r1, [r4, #32]
 800b6f2:	2301      	movs	r3, #1
 800b6f4:	4628      	mov	r0, r5
 800b6f6:	47b0      	blx	r6
 800b6f8:	1c41      	adds	r1, r0, #1
 800b6fa:	d1c7      	bne.n	800b68c <__sflush_r+0x30>
 800b6fc:	682b      	ldr	r3, [r5, #0]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d0c4      	beq.n	800b68c <__sflush_r+0x30>
 800b702:	2b1d      	cmp	r3, #29
 800b704:	d001      	beq.n	800b70a <__sflush_r+0xae>
 800b706:	2b16      	cmp	r3, #22
 800b708:	d101      	bne.n	800b70e <__sflush_r+0xb2>
 800b70a:	602f      	str	r7, [r5, #0]
 800b70c:	e7b2      	b.n	800b674 <__sflush_r+0x18>
 800b70e:	89a3      	ldrh	r3, [r4, #12]
 800b710:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b714:	81a3      	strh	r3, [r4, #12]
 800b716:	e7ae      	b.n	800b676 <__sflush_r+0x1a>
 800b718:	690f      	ldr	r7, [r1, #16]
 800b71a:	2f00      	cmp	r7, #0
 800b71c:	d0aa      	beq.n	800b674 <__sflush_r+0x18>
 800b71e:	0793      	lsls	r3, r2, #30
 800b720:	bf18      	it	ne
 800b722:	2300      	movne	r3, #0
 800b724:	680e      	ldr	r6, [r1, #0]
 800b726:	bf08      	it	eq
 800b728:	694b      	ldreq	r3, [r1, #20]
 800b72a:	1bf6      	subs	r6, r6, r7
 800b72c:	600f      	str	r7, [r1, #0]
 800b72e:	608b      	str	r3, [r1, #8]
 800b730:	2e00      	cmp	r6, #0
 800b732:	dd9f      	ble.n	800b674 <__sflush_r+0x18>
 800b734:	4633      	mov	r3, r6
 800b736:	463a      	mov	r2, r7
 800b738:	4628      	mov	r0, r5
 800b73a:	6a21      	ldr	r1, [r4, #32]
 800b73c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800b740:	47e0      	blx	ip
 800b742:	2800      	cmp	r0, #0
 800b744:	dc06      	bgt.n	800b754 <__sflush_r+0xf8>
 800b746:	89a3      	ldrh	r3, [r4, #12]
 800b748:	f04f 30ff 	mov.w	r0, #4294967295
 800b74c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b750:	81a3      	strh	r3, [r4, #12]
 800b752:	e790      	b.n	800b676 <__sflush_r+0x1a>
 800b754:	4407      	add	r7, r0
 800b756:	1a36      	subs	r6, r6, r0
 800b758:	e7ea      	b.n	800b730 <__sflush_r+0xd4>
 800b75a:	bf00      	nop
 800b75c:	20400001 	.word	0x20400001

0800b760 <_fflush_r>:
 800b760:	b538      	push	{r3, r4, r5, lr}
 800b762:	690b      	ldr	r3, [r1, #16]
 800b764:	4605      	mov	r5, r0
 800b766:	460c      	mov	r4, r1
 800b768:	b913      	cbnz	r3, 800b770 <_fflush_r+0x10>
 800b76a:	2500      	movs	r5, #0
 800b76c:	4628      	mov	r0, r5
 800b76e:	bd38      	pop	{r3, r4, r5, pc}
 800b770:	b118      	cbz	r0, 800b77a <_fflush_r+0x1a>
 800b772:	6983      	ldr	r3, [r0, #24]
 800b774:	b90b      	cbnz	r3, 800b77a <_fflush_r+0x1a>
 800b776:	f000 f887 	bl	800b888 <__sinit>
 800b77a:	4b14      	ldr	r3, [pc, #80]	; (800b7cc <_fflush_r+0x6c>)
 800b77c:	429c      	cmp	r4, r3
 800b77e:	d11b      	bne.n	800b7b8 <_fflush_r+0x58>
 800b780:	686c      	ldr	r4, [r5, #4]
 800b782:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b786:	2b00      	cmp	r3, #0
 800b788:	d0ef      	beq.n	800b76a <_fflush_r+0xa>
 800b78a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b78c:	07d0      	lsls	r0, r2, #31
 800b78e:	d404      	bmi.n	800b79a <_fflush_r+0x3a>
 800b790:	0599      	lsls	r1, r3, #22
 800b792:	d402      	bmi.n	800b79a <_fflush_r+0x3a>
 800b794:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b796:	f000 f915 	bl	800b9c4 <__retarget_lock_acquire_recursive>
 800b79a:	4628      	mov	r0, r5
 800b79c:	4621      	mov	r1, r4
 800b79e:	f7ff ff5d 	bl	800b65c <__sflush_r>
 800b7a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b7a4:	4605      	mov	r5, r0
 800b7a6:	07da      	lsls	r2, r3, #31
 800b7a8:	d4e0      	bmi.n	800b76c <_fflush_r+0xc>
 800b7aa:	89a3      	ldrh	r3, [r4, #12]
 800b7ac:	059b      	lsls	r3, r3, #22
 800b7ae:	d4dd      	bmi.n	800b76c <_fflush_r+0xc>
 800b7b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b7b2:	f000 f908 	bl	800b9c6 <__retarget_lock_release_recursive>
 800b7b6:	e7d9      	b.n	800b76c <_fflush_r+0xc>
 800b7b8:	4b05      	ldr	r3, [pc, #20]	; (800b7d0 <_fflush_r+0x70>)
 800b7ba:	429c      	cmp	r4, r3
 800b7bc:	d101      	bne.n	800b7c2 <_fflush_r+0x62>
 800b7be:	68ac      	ldr	r4, [r5, #8]
 800b7c0:	e7df      	b.n	800b782 <_fflush_r+0x22>
 800b7c2:	4b04      	ldr	r3, [pc, #16]	; (800b7d4 <_fflush_r+0x74>)
 800b7c4:	429c      	cmp	r4, r3
 800b7c6:	bf08      	it	eq
 800b7c8:	68ec      	ldreq	r4, [r5, #12]
 800b7ca:	e7da      	b.n	800b782 <_fflush_r+0x22>
 800b7cc:	0800cabc 	.word	0x0800cabc
 800b7d0:	0800cadc 	.word	0x0800cadc
 800b7d4:	0800ca9c 	.word	0x0800ca9c

0800b7d8 <std>:
 800b7d8:	2300      	movs	r3, #0
 800b7da:	b510      	push	{r4, lr}
 800b7dc:	4604      	mov	r4, r0
 800b7de:	e9c0 3300 	strd	r3, r3, [r0]
 800b7e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b7e6:	6083      	str	r3, [r0, #8]
 800b7e8:	8181      	strh	r1, [r0, #12]
 800b7ea:	6643      	str	r3, [r0, #100]	; 0x64
 800b7ec:	81c2      	strh	r2, [r0, #14]
 800b7ee:	6183      	str	r3, [r0, #24]
 800b7f0:	4619      	mov	r1, r3
 800b7f2:	2208      	movs	r2, #8
 800b7f4:	305c      	adds	r0, #92	; 0x5c
 800b7f6:	f7fb fe07 	bl	8007408 <memset>
 800b7fa:	4b05      	ldr	r3, [pc, #20]	; (800b810 <std+0x38>)
 800b7fc:	6224      	str	r4, [r4, #32]
 800b7fe:	6263      	str	r3, [r4, #36]	; 0x24
 800b800:	4b04      	ldr	r3, [pc, #16]	; (800b814 <std+0x3c>)
 800b802:	62a3      	str	r3, [r4, #40]	; 0x28
 800b804:	4b04      	ldr	r3, [pc, #16]	; (800b818 <std+0x40>)
 800b806:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b808:	4b04      	ldr	r3, [pc, #16]	; (800b81c <std+0x44>)
 800b80a:	6323      	str	r3, [r4, #48]	; 0x30
 800b80c:	bd10      	pop	{r4, pc}
 800b80e:	bf00      	nop
 800b810:	0800bb2d 	.word	0x0800bb2d
 800b814:	0800bb4f 	.word	0x0800bb4f
 800b818:	0800bb87 	.word	0x0800bb87
 800b81c:	0800bbab 	.word	0x0800bbab

0800b820 <_cleanup_r>:
 800b820:	4901      	ldr	r1, [pc, #4]	; (800b828 <_cleanup_r+0x8>)
 800b822:	f000 b8af 	b.w	800b984 <_fwalk_reent>
 800b826:	bf00      	nop
 800b828:	0800b761 	.word	0x0800b761

0800b82c <__sfmoreglue>:
 800b82c:	2268      	movs	r2, #104	; 0x68
 800b82e:	b570      	push	{r4, r5, r6, lr}
 800b830:	1e4d      	subs	r5, r1, #1
 800b832:	4355      	muls	r5, r2
 800b834:	460e      	mov	r6, r1
 800b836:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b83a:	f7ff fa7d 	bl	800ad38 <_malloc_r>
 800b83e:	4604      	mov	r4, r0
 800b840:	b140      	cbz	r0, 800b854 <__sfmoreglue+0x28>
 800b842:	2100      	movs	r1, #0
 800b844:	e9c0 1600 	strd	r1, r6, [r0]
 800b848:	300c      	adds	r0, #12
 800b84a:	60a0      	str	r0, [r4, #8]
 800b84c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b850:	f7fb fdda 	bl	8007408 <memset>
 800b854:	4620      	mov	r0, r4
 800b856:	bd70      	pop	{r4, r5, r6, pc}

0800b858 <__sfp_lock_acquire>:
 800b858:	4801      	ldr	r0, [pc, #4]	; (800b860 <__sfp_lock_acquire+0x8>)
 800b85a:	f000 b8b3 	b.w	800b9c4 <__retarget_lock_acquire_recursive>
 800b85e:	bf00      	nop
 800b860:	200027b5 	.word	0x200027b5

0800b864 <__sfp_lock_release>:
 800b864:	4801      	ldr	r0, [pc, #4]	; (800b86c <__sfp_lock_release+0x8>)
 800b866:	f000 b8ae 	b.w	800b9c6 <__retarget_lock_release_recursive>
 800b86a:	bf00      	nop
 800b86c:	200027b5 	.word	0x200027b5

0800b870 <__sinit_lock_acquire>:
 800b870:	4801      	ldr	r0, [pc, #4]	; (800b878 <__sinit_lock_acquire+0x8>)
 800b872:	f000 b8a7 	b.w	800b9c4 <__retarget_lock_acquire_recursive>
 800b876:	bf00      	nop
 800b878:	200027b6 	.word	0x200027b6

0800b87c <__sinit_lock_release>:
 800b87c:	4801      	ldr	r0, [pc, #4]	; (800b884 <__sinit_lock_release+0x8>)
 800b87e:	f000 b8a2 	b.w	800b9c6 <__retarget_lock_release_recursive>
 800b882:	bf00      	nop
 800b884:	200027b6 	.word	0x200027b6

0800b888 <__sinit>:
 800b888:	b510      	push	{r4, lr}
 800b88a:	4604      	mov	r4, r0
 800b88c:	f7ff fff0 	bl	800b870 <__sinit_lock_acquire>
 800b890:	69a3      	ldr	r3, [r4, #24]
 800b892:	b11b      	cbz	r3, 800b89c <__sinit+0x14>
 800b894:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b898:	f7ff bff0 	b.w	800b87c <__sinit_lock_release>
 800b89c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b8a0:	6523      	str	r3, [r4, #80]	; 0x50
 800b8a2:	4b13      	ldr	r3, [pc, #76]	; (800b8f0 <__sinit+0x68>)
 800b8a4:	4a13      	ldr	r2, [pc, #76]	; (800b8f4 <__sinit+0x6c>)
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	62a2      	str	r2, [r4, #40]	; 0x28
 800b8aa:	42a3      	cmp	r3, r4
 800b8ac:	bf08      	it	eq
 800b8ae:	2301      	moveq	r3, #1
 800b8b0:	4620      	mov	r0, r4
 800b8b2:	bf08      	it	eq
 800b8b4:	61a3      	streq	r3, [r4, #24]
 800b8b6:	f000 f81f 	bl	800b8f8 <__sfp>
 800b8ba:	6060      	str	r0, [r4, #4]
 800b8bc:	4620      	mov	r0, r4
 800b8be:	f000 f81b 	bl	800b8f8 <__sfp>
 800b8c2:	60a0      	str	r0, [r4, #8]
 800b8c4:	4620      	mov	r0, r4
 800b8c6:	f000 f817 	bl	800b8f8 <__sfp>
 800b8ca:	2200      	movs	r2, #0
 800b8cc:	2104      	movs	r1, #4
 800b8ce:	60e0      	str	r0, [r4, #12]
 800b8d0:	6860      	ldr	r0, [r4, #4]
 800b8d2:	f7ff ff81 	bl	800b7d8 <std>
 800b8d6:	2201      	movs	r2, #1
 800b8d8:	2109      	movs	r1, #9
 800b8da:	68a0      	ldr	r0, [r4, #8]
 800b8dc:	f7ff ff7c 	bl	800b7d8 <std>
 800b8e0:	2202      	movs	r2, #2
 800b8e2:	2112      	movs	r1, #18
 800b8e4:	68e0      	ldr	r0, [r4, #12]
 800b8e6:	f7ff ff77 	bl	800b7d8 <std>
 800b8ea:	2301      	movs	r3, #1
 800b8ec:	61a3      	str	r3, [r4, #24]
 800b8ee:	e7d1      	b.n	800b894 <__sinit+0xc>
 800b8f0:	0800c658 	.word	0x0800c658
 800b8f4:	0800b821 	.word	0x0800b821

0800b8f8 <__sfp>:
 800b8f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8fa:	4607      	mov	r7, r0
 800b8fc:	f7ff ffac 	bl	800b858 <__sfp_lock_acquire>
 800b900:	4b1e      	ldr	r3, [pc, #120]	; (800b97c <__sfp+0x84>)
 800b902:	681e      	ldr	r6, [r3, #0]
 800b904:	69b3      	ldr	r3, [r6, #24]
 800b906:	b913      	cbnz	r3, 800b90e <__sfp+0x16>
 800b908:	4630      	mov	r0, r6
 800b90a:	f7ff ffbd 	bl	800b888 <__sinit>
 800b90e:	3648      	adds	r6, #72	; 0x48
 800b910:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b914:	3b01      	subs	r3, #1
 800b916:	d503      	bpl.n	800b920 <__sfp+0x28>
 800b918:	6833      	ldr	r3, [r6, #0]
 800b91a:	b30b      	cbz	r3, 800b960 <__sfp+0x68>
 800b91c:	6836      	ldr	r6, [r6, #0]
 800b91e:	e7f7      	b.n	800b910 <__sfp+0x18>
 800b920:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b924:	b9d5      	cbnz	r5, 800b95c <__sfp+0x64>
 800b926:	4b16      	ldr	r3, [pc, #88]	; (800b980 <__sfp+0x88>)
 800b928:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b92c:	60e3      	str	r3, [r4, #12]
 800b92e:	6665      	str	r5, [r4, #100]	; 0x64
 800b930:	f000 f847 	bl	800b9c2 <__retarget_lock_init_recursive>
 800b934:	f7ff ff96 	bl	800b864 <__sfp_lock_release>
 800b938:	2208      	movs	r2, #8
 800b93a:	4629      	mov	r1, r5
 800b93c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b940:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b944:	6025      	str	r5, [r4, #0]
 800b946:	61a5      	str	r5, [r4, #24]
 800b948:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b94c:	f7fb fd5c 	bl	8007408 <memset>
 800b950:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b954:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b958:	4620      	mov	r0, r4
 800b95a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b95c:	3468      	adds	r4, #104	; 0x68
 800b95e:	e7d9      	b.n	800b914 <__sfp+0x1c>
 800b960:	2104      	movs	r1, #4
 800b962:	4638      	mov	r0, r7
 800b964:	f7ff ff62 	bl	800b82c <__sfmoreglue>
 800b968:	4604      	mov	r4, r0
 800b96a:	6030      	str	r0, [r6, #0]
 800b96c:	2800      	cmp	r0, #0
 800b96e:	d1d5      	bne.n	800b91c <__sfp+0x24>
 800b970:	f7ff ff78 	bl	800b864 <__sfp_lock_release>
 800b974:	230c      	movs	r3, #12
 800b976:	603b      	str	r3, [r7, #0]
 800b978:	e7ee      	b.n	800b958 <__sfp+0x60>
 800b97a:	bf00      	nop
 800b97c:	0800c658 	.word	0x0800c658
 800b980:	ffff0001 	.word	0xffff0001

0800b984 <_fwalk_reent>:
 800b984:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b988:	4606      	mov	r6, r0
 800b98a:	4688      	mov	r8, r1
 800b98c:	2700      	movs	r7, #0
 800b98e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b992:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b996:	f1b9 0901 	subs.w	r9, r9, #1
 800b99a:	d505      	bpl.n	800b9a8 <_fwalk_reent+0x24>
 800b99c:	6824      	ldr	r4, [r4, #0]
 800b99e:	2c00      	cmp	r4, #0
 800b9a0:	d1f7      	bne.n	800b992 <_fwalk_reent+0xe>
 800b9a2:	4638      	mov	r0, r7
 800b9a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b9a8:	89ab      	ldrh	r3, [r5, #12]
 800b9aa:	2b01      	cmp	r3, #1
 800b9ac:	d907      	bls.n	800b9be <_fwalk_reent+0x3a>
 800b9ae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b9b2:	3301      	adds	r3, #1
 800b9b4:	d003      	beq.n	800b9be <_fwalk_reent+0x3a>
 800b9b6:	4629      	mov	r1, r5
 800b9b8:	4630      	mov	r0, r6
 800b9ba:	47c0      	blx	r8
 800b9bc:	4307      	orrs	r7, r0
 800b9be:	3568      	adds	r5, #104	; 0x68
 800b9c0:	e7e9      	b.n	800b996 <_fwalk_reent+0x12>

0800b9c2 <__retarget_lock_init_recursive>:
 800b9c2:	4770      	bx	lr

0800b9c4 <__retarget_lock_acquire_recursive>:
 800b9c4:	4770      	bx	lr

0800b9c6 <__retarget_lock_release_recursive>:
 800b9c6:	4770      	bx	lr

0800b9c8 <__swhatbuf_r>:
 800b9c8:	b570      	push	{r4, r5, r6, lr}
 800b9ca:	460e      	mov	r6, r1
 800b9cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9d0:	4614      	mov	r4, r2
 800b9d2:	2900      	cmp	r1, #0
 800b9d4:	461d      	mov	r5, r3
 800b9d6:	b096      	sub	sp, #88	; 0x58
 800b9d8:	da08      	bge.n	800b9ec <__swhatbuf_r+0x24>
 800b9da:	2200      	movs	r2, #0
 800b9dc:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b9e0:	602a      	str	r2, [r5, #0]
 800b9e2:	061a      	lsls	r2, r3, #24
 800b9e4:	d410      	bmi.n	800ba08 <__swhatbuf_r+0x40>
 800b9e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b9ea:	e00e      	b.n	800ba0a <__swhatbuf_r+0x42>
 800b9ec:	466a      	mov	r2, sp
 800b9ee:	f000 f903 	bl	800bbf8 <_fstat_r>
 800b9f2:	2800      	cmp	r0, #0
 800b9f4:	dbf1      	blt.n	800b9da <__swhatbuf_r+0x12>
 800b9f6:	9a01      	ldr	r2, [sp, #4]
 800b9f8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b9fc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ba00:	425a      	negs	r2, r3
 800ba02:	415a      	adcs	r2, r3
 800ba04:	602a      	str	r2, [r5, #0]
 800ba06:	e7ee      	b.n	800b9e6 <__swhatbuf_r+0x1e>
 800ba08:	2340      	movs	r3, #64	; 0x40
 800ba0a:	2000      	movs	r0, #0
 800ba0c:	6023      	str	r3, [r4, #0]
 800ba0e:	b016      	add	sp, #88	; 0x58
 800ba10:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ba14 <__smakebuf_r>:
 800ba14:	898b      	ldrh	r3, [r1, #12]
 800ba16:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ba18:	079d      	lsls	r5, r3, #30
 800ba1a:	4606      	mov	r6, r0
 800ba1c:	460c      	mov	r4, r1
 800ba1e:	d507      	bpl.n	800ba30 <__smakebuf_r+0x1c>
 800ba20:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ba24:	6023      	str	r3, [r4, #0]
 800ba26:	6123      	str	r3, [r4, #16]
 800ba28:	2301      	movs	r3, #1
 800ba2a:	6163      	str	r3, [r4, #20]
 800ba2c:	b002      	add	sp, #8
 800ba2e:	bd70      	pop	{r4, r5, r6, pc}
 800ba30:	466a      	mov	r2, sp
 800ba32:	ab01      	add	r3, sp, #4
 800ba34:	f7ff ffc8 	bl	800b9c8 <__swhatbuf_r>
 800ba38:	9900      	ldr	r1, [sp, #0]
 800ba3a:	4605      	mov	r5, r0
 800ba3c:	4630      	mov	r0, r6
 800ba3e:	f7ff f97b 	bl	800ad38 <_malloc_r>
 800ba42:	b948      	cbnz	r0, 800ba58 <__smakebuf_r+0x44>
 800ba44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba48:	059a      	lsls	r2, r3, #22
 800ba4a:	d4ef      	bmi.n	800ba2c <__smakebuf_r+0x18>
 800ba4c:	f023 0303 	bic.w	r3, r3, #3
 800ba50:	f043 0302 	orr.w	r3, r3, #2
 800ba54:	81a3      	strh	r3, [r4, #12]
 800ba56:	e7e3      	b.n	800ba20 <__smakebuf_r+0xc>
 800ba58:	4b0d      	ldr	r3, [pc, #52]	; (800ba90 <__smakebuf_r+0x7c>)
 800ba5a:	62b3      	str	r3, [r6, #40]	; 0x28
 800ba5c:	89a3      	ldrh	r3, [r4, #12]
 800ba5e:	6020      	str	r0, [r4, #0]
 800ba60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba64:	81a3      	strh	r3, [r4, #12]
 800ba66:	9b00      	ldr	r3, [sp, #0]
 800ba68:	6120      	str	r0, [r4, #16]
 800ba6a:	6163      	str	r3, [r4, #20]
 800ba6c:	9b01      	ldr	r3, [sp, #4]
 800ba6e:	b15b      	cbz	r3, 800ba88 <__smakebuf_r+0x74>
 800ba70:	4630      	mov	r0, r6
 800ba72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ba76:	f000 f8d1 	bl	800bc1c <_isatty_r>
 800ba7a:	b128      	cbz	r0, 800ba88 <__smakebuf_r+0x74>
 800ba7c:	89a3      	ldrh	r3, [r4, #12]
 800ba7e:	f023 0303 	bic.w	r3, r3, #3
 800ba82:	f043 0301 	orr.w	r3, r3, #1
 800ba86:	81a3      	strh	r3, [r4, #12]
 800ba88:	89a0      	ldrh	r0, [r4, #12]
 800ba8a:	4305      	orrs	r5, r0
 800ba8c:	81a5      	strh	r5, [r4, #12]
 800ba8e:	e7cd      	b.n	800ba2c <__smakebuf_r+0x18>
 800ba90:	0800b821 	.word	0x0800b821

0800ba94 <_malloc_usable_size_r>:
 800ba94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba98:	1f18      	subs	r0, r3, #4
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	bfbc      	itt	lt
 800ba9e:	580b      	ldrlt	r3, [r1, r0]
 800baa0:	18c0      	addlt	r0, r0, r3
 800baa2:	4770      	bx	lr

0800baa4 <_raise_r>:
 800baa4:	291f      	cmp	r1, #31
 800baa6:	b538      	push	{r3, r4, r5, lr}
 800baa8:	4604      	mov	r4, r0
 800baaa:	460d      	mov	r5, r1
 800baac:	d904      	bls.n	800bab8 <_raise_r+0x14>
 800baae:	2316      	movs	r3, #22
 800bab0:	6003      	str	r3, [r0, #0]
 800bab2:	f04f 30ff 	mov.w	r0, #4294967295
 800bab6:	bd38      	pop	{r3, r4, r5, pc}
 800bab8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800baba:	b112      	cbz	r2, 800bac2 <_raise_r+0x1e>
 800babc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bac0:	b94b      	cbnz	r3, 800bad6 <_raise_r+0x32>
 800bac2:	4620      	mov	r0, r4
 800bac4:	f000 f830 	bl	800bb28 <_getpid_r>
 800bac8:	462a      	mov	r2, r5
 800baca:	4601      	mov	r1, r0
 800bacc:	4620      	mov	r0, r4
 800bace:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bad2:	f000 b817 	b.w	800bb04 <_kill_r>
 800bad6:	2b01      	cmp	r3, #1
 800bad8:	d00a      	beq.n	800baf0 <_raise_r+0x4c>
 800bada:	1c59      	adds	r1, r3, #1
 800badc:	d103      	bne.n	800bae6 <_raise_r+0x42>
 800bade:	2316      	movs	r3, #22
 800bae0:	6003      	str	r3, [r0, #0]
 800bae2:	2001      	movs	r0, #1
 800bae4:	e7e7      	b.n	800bab6 <_raise_r+0x12>
 800bae6:	2400      	movs	r4, #0
 800bae8:	4628      	mov	r0, r5
 800baea:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800baee:	4798      	blx	r3
 800baf0:	2000      	movs	r0, #0
 800baf2:	e7e0      	b.n	800bab6 <_raise_r+0x12>

0800baf4 <raise>:
 800baf4:	4b02      	ldr	r3, [pc, #8]	; (800bb00 <raise+0xc>)
 800baf6:	4601      	mov	r1, r0
 800baf8:	6818      	ldr	r0, [r3, #0]
 800bafa:	f7ff bfd3 	b.w	800baa4 <_raise_r>
 800bafe:	bf00      	nop
 800bb00:	20000018 	.word	0x20000018

0800bb04 <_kill_r>:
 800bb04:	b538      	push	{r3, r4, r5, lr}
 800bb06:	2300      	movs	r3, #0
 800bb08:	4d06      	ldr	r5, [pc, #24]	; (800bb24 <_kill_r+0x20>)
 800bb0a:	4604      	mov	r4, r0
 800bb0c:	4608      	mov	r0, r1
 800bb0e:	4611      	mov	r1, r2
 800bb10:	602b      	str	r3, [r5, #0]
 800bb12:	f7f6 fcc7 	bl	80024a4 <_kill>
 800bb16:	1c43      	adds	r3, r0, #1
 800bb18:	d102      	bne.n	800bb20 <_kill_r+0x1c>
 800bb1a:	682b      	ldr	r3, [r5, #0]
 800bb1c:	b103      	cbz	r3, 800bb20 <_kill_r+0x1c>
 800bb1e:	6023      	str	r3, [r4, #0]
 800bb20:	bd38      	pop	{r3, r4, r5, pc}
 800bb22:	bf00      	nop
 800bb24:	200027b0 	.word	0x200027b0

0800bb28 <_getpid_r>:
 800bb28:	f7f6 bcba 	b.w	80024a0 <_getpid>

0800bb2c <__sread>:
 800bb2c:	b510      	push	{r4, lr}
 800bb2e:	460c      	mov	r4, r1
 800bb30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb34:	f000 f894 	bl	800bc60 <_read_r>
 800bb38:	2800      	cmp	r0, #0
 800bb3a:	bfab      	itete	ge
 800bb3c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bb3e:	89a3      	ldrhlt	r3, [r4, #12]
 800bb40:	181b      	addge	r3, r3, r0
 800bb42:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bb46:	bfac      	ite	ge
 800bb48:	6563      	strge	r3, [r4, #84]	; 0x54
 800bb4a:	81a3      	strhlt	r3, [r4, #12]
 800bb4c:	bd10      	pop	{r4, pc}

0800bb4e <__swrite>:
 800bb4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb52:	461f      	mov	r7, r3
 800bb54:	898b      	ldrh	r3, [r1, #12]
 800bb56:	4605      	mov	r5, r0
 800bb58:	05db      	lsls	r3, r3, #23
 800bb5a:	460c      	mov	r4, r1
 800bb5c:	4616      	mov	r6, r2
 800bb5e:	d505      	bpl.n	800bb6c <__swrite+0x1e>
 800bb60:	2302      	movs	r3, #2
 800bb62:	2200      	movs	r2, #0
 800bb64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb68:	f000 f868 	bl	800bc3c <_lseek_r>
 800bb6c:	89a3      	ldrh	r3, [r4, #12]
 800bb6e:	4632      	mov	r2, r6
 800bb70:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bb74:	81a3      	strh	r3, [r4, #12]
 800bb76:	4628      	mov	r0, r5
 800bb78:	463b      	mov	r3, r7
 800bb7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bb7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bb82:	f000 b817 	b.w	800bbb4 <_write_r>

0800bb86 <__sseek>:
 800bb86:	b510      	push	{r4, lr}
 800bb88:	460c      	mov	r4, r1
 800bb8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb8e:	f000 f855 	bl	800bc3c <_lseek_r>
 800bb92:	1c43      	adds	r3, r0, #1
 800bb94:	89a3      	ldrh	r3, [r4, #12]
 800bb96:	bf15      	itete	ne
 800bb98:	6560      	strne	r0, [r4, #84]	; 0x54
 800bb9a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bb9e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bba2:	81a3      	strheq	r3, [r4, #12]
 800bba4:	bf18      	it	ne
 800bba6:	81a3      	strhne	r3, [r4, #12]
 800bba8:	bd10      	pop	{r4, pc}

0800bbaa <__sclose>:
 800bbaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bbae:	f000 b813 	b.w	800bbd8 <_close_r>
	...

0800bbb4 <_write_r>:
 800bbb4:	b538      	push	{r3, r4, r5, lr}
 800bbb6:	4604      	mov	r4, r0
 800bbb8:	4608      	mov	r0, r1
 800bbba:	4611      	mov	r1, r2
 800bbbc:	2200      	movs	r2, #0
 800bbbe:	4d05      	ldr	r5, [pc, #20]	; (800bbd4 <_write_r+0x20>)
 800bbc0:	602a      	str	r2, [r5, #0]
 800bbc2:	461a      	mov	r2, r3
 800bbc4:	f7f6 fc89 	bl	80024da <_write>
 800bbc8:	1c43      	adds	r3, r0, #1
 800bbca:	d102      	bne.n	800bbd2 <_write_r+0x1e>
 800bbcc:	682b      	ldr	r3, [r5, #0]
 800bbce:	b103      	cbz	r3, 800bbd2 <_write_r+0x1e>
 800bbd0:	6023      	str	r3, [r4, #0]
 800bbd2:	bd38      	pop	{r3, r4, r5, pc}
 800bbd4:	200027b0 	.word	0x200027b0

0800bbd8 <_close_r>:
 800bbd8:	b538      	push	{r3, r4, r5, lr}
 800bbda:	2300      	movs	r3, #0
 800bbdc:	4d05      	ldr	r5, [pc, #20]	; (800bbf4 <_close_r+0x1c>)
 800bbde:	4604      	mov	r4, r0
 800bbe0:	4608      	mov	r0, r1
 800bbe2:	602b      	str	r3, [r5, #0]
 800bbe4:	f7f6 fc86 	bl	80024f4 <_close>
 800bbe8:	1c43      	adds	r3, r0, #1
 800bbea:	d102      	bne.n	800bbf2 <_close_r+0x1a>
 800bbec:	682b      	ldr	r3, [r5, #0]
 800bbee:	b103      	cbz	r3, 800bbf2 <_close_r+0x1a>
 800bbf0:	6023      	str	r3, [r4, #0]
 800bbf2:	bd38      	pop	{r3, r4, r5, pc}
 800bbf4:	200027b0 	.word	0x200027b0

0800bbf8 <_fstat_r>:
 800bbf8:	b538      	push	{r3, r4, r5, lr}
 800bbfa:	2300      	movs	r3, #0
 800bbfc:	4d06      	ldr	r5, [pc, #24]	; (800bc18 <_fstat_r+0x20>)
 800bbfe:	4604      	mov	r4, r0
 800bc00:	4608      	mov	r0, r1
 800bc02:	4611      	mov	r1, r2
 800bc04:	602b      	str	r3, [r5, #0]
 800bc06:	f7f6 fc78 	bl	80024fa <_fstat>
 800bc0a:	1c43      	adds	r3, r0, #1
 800bc0c:	d102      	bne.n	800bc14 <_fstat_r+0x1c>
 800bc0e:	682b      	ldr	r3, [r5, #0]
 800bc10:	b103      	cbz	r3, 800bc14 <_fstat_r+0x1c>
 800bc12:	6023      	str	r3, [r4, #0]
 800bc14:	bd38      	pop	{r3, r4, r5, pc}
 800bc16:	bf00      	nop
 800bc18:	200027b0 	.word	0x200027b0

0800bc1c <_isatty_r>:
 800bc1c:	b538      	push	{r3, r4, r5, lr}
 800bc1e:	2300      	movs	r3, #0
 800bc20:	4d05      	ldr	r5, [pc, #20]	; (800bc38 <_isatty_r+0x1c>)
 800bc22:	4604      	mov	r4, r0
 800bc24:	4608      	mov	r0, r1
 800bc26:	602b      	str	r3, [r5, #0]
 800bc28:	f7f6 fc6c 	bl	8002504 <_isatty>
 800bc2c:	1c43      	adds	r3, r0, #1
 800bc2e:	d102      	bne.n	800bc36 <_isatty_r+0x1a>
 800bc30:	682b      	ldr	r3, [r5, #0]
 800bc32:	b103      	cbz	r3, 800bc36 <_isatty_r+0x1a>
 800bc34:	6023      	str	r3, [r4, #0]
 800bc36:	bd38      	pop	{r3, r4, r5, pc}
 800bc38:	200027b0 	.word	0x200027b0

0800bc3c <_lseek_r>:
 800bc3c:	b538      	push	{r3, r4, r5, lr}
 800bc3e:	4604      	mov	r4, r0
 800bc40:	4608      	mov	r0, r1
 800bc42:	4611      	mov	r1, r2
 800bc44:	2200      	movs	r2, #0
 800bc46:	4d05      	ldr	r5, [pc, #20]	; (800bc5c <_lseek_r+0x20>)
 800bc48:	602a      	str	r2, [r5, #0]
 800bc4a:	461a      	mov	r2, r3
 800bc4c:	f7f6 fc5c 	bl	8002508 <_lseek>
 800bc50:	1c43      	adds	r3, r0, #1
 800bc52:	d102      	bne.n	800bc5a <_lseek_r+0x1e>
 800bc54:	682b      	ldr	r3, [r5, #0]
 800bc56:	b103      	cbz	r3, 800bc5a <_lseek_r+0x1e>
 800bc58:	6023      	str	r3, [r4, #0]
 800bc5a:	bd38      	pop	{r3, r4, r5, pc}
 800bc5c:	200027b0 	.word	0x200027b0

0800bc60 <_read_r>:
 800bc60:	b538      	push	{r3, r4, r5, lr}
 800bc62:	4604      	mov	r4, r0
 800bc64:	4608      	mov	r0, r1
 800bc66:	4611      	mov	r1, r2
 800bc68:	2200      	movs	r2, #0
 800bc6a:	4d05      	ldr	r5, [pc, #20]	; (800bc80 <_read_r+0x20>)
 800bc6c:	602a      	str	r2, [r5, #0]
 800bc6e:	461a      	mov	r2, r3
 800bc70:	f7f6 fc26 	bl	80024c0 <_read>
 800bc74:	1c43      	adds	r3, r0, #1
 800bc76:	d102      	bne.n	800bc7e <_read_r+0x1e>
 800bc78:	682b      	ldr	r3, [r5, #0]
 800bc7a:	b103      	cbz	r3, 800bc7e <_read_r+0x1e>
 800bc7c:	6023      	str	r3, [r4, #0]
 800bc7e:	bd38      	pop	{r3, r4, r5, pc}
 800bc80:	200027b0 	.word	0x200027b0

0800bc84 <_init>:
 800bc84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc86:	bf00      	nop
 800bc88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc8a:	bc08      	pop	{r3}
 800bc8c:	469e      	mov	lr, r3
 800bc8e:	4770      	bx	lr

0800bc90 <_fini>:
 800bc90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc92:	bf00      	nop
 800bc94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc96:	bc08      	pop	{r3}
 800bc98:	469e      	mov	lr, r3
 800bc9a:	4770      	bx	lr
