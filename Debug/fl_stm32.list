
fl_stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c0c4  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e24  0800c1d8  0800c1d8  0001c1d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cffc  0800cffc  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800cffc  0800cffc  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800cffc  0800cffc  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cffc  0800cffc  0001cffc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d000  0800d000  0001d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800d004  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002798  200001e0  0800d1e4  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20002978  0800d1e4  00022978  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY
 13 .debug_info   00024527  00000000  00000000  0002024c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005477  00000000  00000000  00044773  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 0000f926  00000000  00000000  00049bea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000017a8  00000000  00000000  00059510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000142b  00000000  00000000  0005acb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001cd20  00000000  00000000  0005c0e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000283b1  00000000  00000000  00078e03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0009946e  00000000  00000000  000a11b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000057f4  00000000  00000000  0013a624  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000059  00000000  00000000  0013fe18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c1bc 	.word	0x0800c1bc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	0800c1bc 	.word	0x0800c1bc

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2uiz>:
 8000a9c:	004a      	lsls	r2, r1, #1
 8000a9e:	d211      	bcs.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa4:	d211      	bcs.n	8000aca <__aeabi_d2uiz+0x2e>
 8000aa6:	d50d      	bpl.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d40e      	bmi.n	8000ad0 <__aeabi_d2uiz+0x34>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ace:	d102      	bne.n	8000ad6 <__aeabi_d2uiz+0x3a>
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad4:	4770      	bx	lr
 8000ad6:	f04f 0000 	mov.w	r0, #0
 8000ada:	4770      	bx	lr

08000adc <__aeabi_d2f>:
 8000adc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ae4:	bf24      	itt	cs
 8000ae6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aee:	d90d      	bls.n	8000b0c <__aeabi_d2f+0x30>
 8000af0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000af4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000afc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b04:	bf08      	it	eq
 8000b06:	f020 0001 	biceq.w	r0, r0, #1
 8000b0a:	4770      	bx	lr
 8000b0c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b10:	d121      	bne.n	8000b56 <__aeabi_d2f+0x7a>
 8000b12:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b16:	bfbc      	itt	lt
 8000b18:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	4770      	bxlt	lr
 8000b1e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b26:	f1c2 0218 	rsb	r2, r2, #24
 8000b2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b32:	fa20 f002 	lsr.w	r0, r0, r2
 8000b36:	bf18      	it	ne
 8000b38:	f040 0001 	orrne.w	r0, r0, #1
 8000b3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b48:	ea40 000c 	orr.w	r0, r0, ip
 8000b4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b54:	e7cc      	b.n	8000af0 <__aeabi_d2f+0x14>
 8000b56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5a:	d107      	bne.n	8000b6c <__aeabi_d2f+0x90>
 8000b5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b60:	bf1e      	ittt	ne
 8000b62:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b66:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b6a:	4770      	bxne	lr
 8000b6c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b70:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_frsub>:
 8000b7c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b80:	e002      	b.n	8000b88 <__addsf3>
 8000b82:	bf00      	nop

08000b84 <__aeabi_fsub>:
 8000b84:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b88 <__addsf3>:
 8000b88:	0042      	lsls	r2, r0, #1
 8000b8a:	bf1f      	itttt	ne
 8000b8c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b90:	ea92 0f03 	teqne	r2, r3
 8000b94:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b98:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b9c:	d06a      	beq.n	8000c74 <__addsf3+0xec>
 8000b9e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ba2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ba6:	bfc1      	itttt	gt
 8000ba8:	18d2      	addgt	r2, r2, r3
 8000baa:	4041      	eorgt	r1, r0
 8000bac:	4048      	eorgt	r0, r1
 8000bae:	4041      	eorgt	r1, r0
 8000bb0:	bfb8      	it	lt
 8000bb2:	425b      	neglt	r3, r3
 8000bb4:	2b19      	cmp	r3, #25
 8000bb6:	bf88      	it	hi
 8000bb8:	4770      	bxhi	lr
 8000bba:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bbe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bc2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bc6:	bf18      	it	ne
 8000bc8:	4240      	negne	r0, r0
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bd2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bd6:	bf18      	it	ne
 8000bd8:	4249      	negne	r1, r1
 8000bda:	ea92 0f03 	teq	r2, r3
 8000bde:	d03f      	beq.n	8000c60 <__addsf3+0xd8>
 8000be0:	f1a2 0201 	sub.w	r2, r2, #1
 8000be4:	fa41 fc03 	asr.w	ip, r1, r3
 8000be8:	eb10 000c 	adds.w	r0, r0, ip
 8000bec:	f1c3 0320 	rsb	r3, r3, #32
 8000bf0:	fa01 f103 	lsl.w	r1, r1, r3
 8000bf4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bf8:	d502      	bpl.n	8000c00 <__addsf3+0x78>
 8000bfa:	4249      	negs	r1, r1
 8000bfc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c00:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c04:	d313      	bcc.n	8000c2e <__addsf3+0xa6>
 8000c06:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c0a:	d306      	bcc.n	8000c1a <__addsf3+0x92>
 8000c0c:	0840      	lsrs	r0, r0, #1
 8000c0e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c12:	f102 0201 	add.w	r2, r2, #1
 8000c16:	2afe      	cmp	r2, #254	; 0xfe
 8000c18:	d251      	bcs.n	8000cbe <__addsf3+0x136>
 8000c1a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c1e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c22:	bf08      	it	eq
 8000c24:	f020 0001 	biceq.w	r0, r0, #1
 8000c28:	ea40 0003 	orr.w	r0, r0, r3
 8000c2c:	4770      	bx	lr
 8000c2e:	0049      	lsls	r1, r1, #1
 8000c30:	eb40 0000 	adc.w	r0, r0, r0
 8000c34:	3a01      	subs	r2, #1
 8000c36:	bf28      	it	cs
 8000c38:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c3c:	d2ed      	bcs.n	8000c1a <__addsf3+0x92>
 8000c3e:	fab0 fc80 	clz	ip, r0
 8000c42:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c46:	ebb2 020c 	subs.w	r2, r2, ip
 8000c4a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c4e:	bfaa      	itet	ge
 8000c50:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c54:	4252      	neglt	r2, r2
 8000c56:	4318      	orrge	r0, r3
 8000c58:	bfbc      	itt	lt
 8000c5a:	40d0      	lsrlt	r0, r2
 8000c5c:	4318      	orrlt	r0, r3
 8000c5e:	4770      	bx	lr
 8000c60:	f092 0f00 	teq	r2, #0
 8000c64:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c68:	bf06      	itte	eq
 8000c6a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c6e:	3201      	addeq	r2, #1
 8000c70:	3b01      	subne	r3, #1
 8000c72:	e7b5      	b.n	8000be0 <__addsf3+0x58>
 8000c74:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c7c:	bf18      	it	ne
 8000c7e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c82:	d021      	beq.n	8000cc8 <__addsf3+0x140>
 8000c84:	ea92 0f03 	teq	r2, r3
 8000c88:	d004      	beq.n	8000c94 <__addsf3+0x10c>
 8000c8a:	f092 0f00 	teq	r2, #0
 8000c8e:	bf08      	it	eq
 8000c90:	4608      	moveq	r0, r1
 8000c92:	4770      	bx	lr
 8000c94:	ea90 0f01 	teq	r0, r1
 8000c98:	bf1c      	itt	ne
 8000c9a:	2000      	movne	r0, #0
 8000c9c:	4770      	bxne	lr
 8000c9e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ca2:	d104      	bne.n	8000cae <__addsf3+0x126>
 8000ca4:	0040      	lsls	r0, r0, #1
 8000ca6:	bf28      	it	cs
 8000ca8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cac:	4770      	bx	lr
 8000cae:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cb2:	bf3c      	itt	cc
 8000cb4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cb8:	4770      	bxcc	lr
 8000cba:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cbe:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cc2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc6:	4770      	bx	lr
 8000cc8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ccc:	bf16      	itet	ne
 8000cce:	4608      	movne	r0, r1
 8000cd0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cd4:	4601      	movne	r1, r0
 8000cd6:	0242      	lsls	r2, r0, #9
 8000cd8:	bf06      	itte	eq
 8000cda:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cde:	ea90 0f01 	teqeq	r0, r1
 8000ce2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_ui2f>:
 8000ce8:	f04f 0300 	mov.w	r3, #0
 8000cec:	e004      	b.n	8000cf8 <__aeabi_i2f+0x8>
 8000cee:	bf00      	nop

08000cf0 <__aeabi_i2f>:
 8000cf0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cf4:	bf48      	it	mi
 8000cf6:	4240      	negmi	r0, r0
 8000cf8:	ea5f 0c00 	movs.w	ip, r0
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d04:	4601      	mov	r1, r0
 8000d06:	f04f 0000 	mov.w	r0, #0
 8000d0a:	e01c      	b.n	8000d46 <__aeabi_l2f+0x2a>

08000d0c <__aeabi_ul2f>:
 8000d0c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d10:	bf08      	it	eq
 8000d12:	4770      	bxeq	lr
 8000d14:	f04f 0300 	mov.w	r3, #0
 8000d18:	e00a      	b.n	8000d30 <__aeabi_l2f+0x14>
 8000d1a:	bf00      	nop

08000d1c <__aeabi_l2f>:
 8000d1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d20:	bf08      	it	eq
 8000d22:	4770      	bxeq	lr
 8000d24:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d28:	d502      	bpl.n	8000d30 <__aeabi_l2f+0x14>
 8000d2a:	4240      	negs	r0, r0
 8000d2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d30:	ea5f 0c01 	movs.w	ip, r1
 8000d34:	bf02      	ittt	eq
 8000d36:	4684      	moveq	ip, r0
 8000d38:	4601      	moveq	r1, r0
 8000d3a:	2000      	moveq	r0, #0
 8000d3c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d40:	bf08      	it	eq
 8000d42:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d46:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d4a:	fabc f28c 	clz	r2, ip
 8000d4e:	3a08      	subs	r2, #8
 8000d50:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d54:	db10      	blt.n	8000d78 <__aeabi_l2f+0x5c>
 8000d56:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d60:	f1c2 0220 	rsb	r2, r2, #32
 8000d64:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d68:	fa20 f202 	lsr.w	r2, r0, r2
 8000d6c:	eb43 0002 	adc.w	r0, r3, r2
 8000d70:	bf08      	it	eq
 8000d72:	f020 0001 	biceq.w	r0, r0, #1
 8000d76:	4770      	bx	lr
 8000d78:	f102 0220 	add.w	r2, r2, #32
 8000d7c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d80:	f1c2 0220 	rsb	r2, r2, #32
 8000d84:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d88:	fa21 f202 	lsr.w	r2, r1, r2
 8000d8c:	eb43 0002 	adc.w	r0, r3, r2
 8000d90:	bf08      	it	eq
 8000d92:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d96:	4770      	bx	lr

08000d98 <__aeabi_fmul>:
 8000d98:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d9c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000da0:	bf1e      	ittt	ne
 8000da2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000da6:	ea92 0f0c 	teqne	r2, ip
 8000daa:	ea93 0f0c 	teqne	r3, ip
 8000dae:	d06f      	beq.n	8000e90 <__aeabi_fmul+0xf8>
 8000db0:	441a      	add	r2, r3
 8000db2:	ea80 0c01 	eor.w	ip, r0, r1
 8000db6:	0240      	lsls	r0, r0, #9
 8000db8:	bf18      	it	ne
 8000dba:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dbe:	d01e      	beq.n	8000dfe <__aeabi_fmul+0x66>
 8000dc0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000dc4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dc8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000dcc:	fba0 3101 	umull	r3, r1, r0, r1
 8000dd0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dd4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dd8:	bf3e      	ittt	cc
 8000dda:	0049      	lslcc	r1, r1, #1
 8000ddc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000de0:	005b      	lslcc	r3, r3, #1
 8000de2:	ea40 0001 	orr.w	r0, r0, r1
 8000de6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dea:	2afd      	cmp	r2, #253	; 0xfd
 8000dec:	d81d      	bhi.n	8000e2a <__aeabi_fmul+0x92>
 8000dee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000df2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000df6:	bf08      	it	eq
 8000df8:	f020 0001 	biceq.w	r0, r0, #1
 8000dfc:	4770      	bx	lr
 8000dfe:	f090 0f00 	teq	r0, #0
 8000e02:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e06:	bf08      	it	eq
 8000e08:	0249      	lsleq	r1, r1, #9
 8000e0a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e0e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e12:	3a7f      	subs	r2, #127	; 0x7f
 8000e14:	bfc2      	ittt	gt
 8000e16:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e1a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e1e:	4770      	bxgt	lr
 8000e20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e24:	f04f 0300 	mov.w	r3, #0
 8000e28:	3a01      	subs	r2, #1
 8000e2a:	dc5d      	bgt.n	8000ee8 <__aeabi_fmul+0x150>
 8000e2c:	f112 0f19 	cmn.w	r2, #25
 8000e30:	bfdc      	itt	le
 8000e32:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e36:	4770      	bxle	lr
 8000e38:	f1c2 0200 	rsb	r2, r2, #0
 8000e3c:	0041      	lsls	r1, r0, #1
 8000e3e:	fa21 f102 	lsr.w	r1, r1, r2
 8000e42:	f1c2 0220 	rsb	r2, r2, #32
 8000e46:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e4a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e4e:	f140 0000 	adc.w	r0, r0, #0
 8000e52:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e56:	bf08      	it	eq
 8000e58:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e5c:	4770      	bx	lr
 8000e5e:	f092 0f00 	teq	r2, #0
 8000e62:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e66:	bf02      	ittt	eq
 8000e68:	0040      	lsleq	r0, r0, #1
 8000e6a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e6e:	3a01      	subeq	r2, #1
 8000e70:	d0f9      	beq.n	8000e66 <__aeabi_fmul+0xce>
 8000e72:	ea40 000c 	orr.w	r0, r0, ip
 8000e76:	f093 0f00 	teq	r3, #0
 8000e7a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e7e:	bf02      	ittt	eq
 8000e80:	0049      	lsleq	r1, r1, #1
 8000e82:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e86:	3b01      	subeq	r3, #1
 8000e88:	d0f9      	beq.n	8000e7e <__aeabi_fmul+0xe6>
 8000e8a:	ea41 010c 	orr.w	r1, r1, ip
 8000e8e:	e78f      	b.n	8000db0 <__aeabi_fmul+0x18>
 8000e90:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e94:	ea92 0f0c 	teq	r2, ip
 8000e98:	bf18      	it	ne
 8000e9a:	ea93 0f0c 	teqne	r3, ip
 8000e9e:	d00a      	beq.n	8000eb6 <__aeabi_fmul+0x11e>
 8000ea0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ea4:	bf18      	it	ne
 8000ea6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000eaa:	d1d8      	bne.n	8000e5e <__aeabi_fmul+0xc6>
 8000eac:	ea80 0001 	eor.w	r0, r0, r1
 8000eb0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000eb4:	4770      	bx	lr
 8000eb6:	f090 0f00 	teq	r0, #0
 8000eba:	bf17      	itett	ne
 8000ebc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ec0:	4608      	moveq	r0, r1
 8000ec2:	f091 0f00 	teqne	r1, #0
 8000ec6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eca:	d014      	beq.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ecc:	ea92 0f0c 	teq	r2, ip
 8000ed0:	d101      	bne.n	8000ed6 <__aeabi_fmul+0x13e>
 8000ed2:	0242      	lsls	r2, r0, #9
 8000ed4:	d10f      	bne.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ed6:	ea93 0f0c 	teq	r3, ip
 8000eda:	d103      	bne.n	8000ee4 <__aeabi_fmul+0x14c>
 8000edc:	024b      	lsls	r3, r1, #9
 8000ede:	bf18      	it	ne
 8000ee0:	4608      	movne	r0, r1
 8000ee2:	d108      	bne.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ee4:	ea80 0001 	eor.w	r0, r0, r1
 8000ee8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000eec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ef0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ef4:	4770      	bx	lr
 8000ef6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000efa:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000efe:	4770      	bx	lr

08000f00 <__aeabi_fdiv>:
 8000f00:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f04:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f08:	bf1e      	ittt	ne
 8000f0a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f0e:	ea92 0f0c 	teqne	r2, ip
 8000f12:	ea93 0f0c 	teqne	r3, ip
 8000f16:	d069      	beq.n	8000fec <__aeabi_fdiv+0xec>
 8000f18:	eba2 0203 	sub.w	r2, r2, r3
 8000f1c:	ea80 0c01 	eor.w	ip, r0, r1
 8000f20:	0249      	lsls	r1, r1, #9
 8000f22:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f26:	d037      	beq.n	8000f98 <__aeabi_fdiv+0x98>
 8000f28:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f2c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f30:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f34:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f38:	428b      	cmp	r3, r1
 8000f3a:	bf38      	it	cc
 8000f3c:	005b      	lslcc	r3, r3, #1
 8000f3e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f42:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f46:	428b      	cmp	r3, r1
 8000f48:	bf24      	itt	cs
 8000f4a:	1a5b      	subcs	r3, r3, r1
 8000f4c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f50:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f54:	bf24      	itt	cs
 8000f56:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f5a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f5e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f62:	bf24      	itt	cs
 8000f64:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f68:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f6c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f70:	bf24      	itt	cs
 8000f72:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f76:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f7a:	011b      	lsls	r3, r3, #4
 8000f7c:	bf18      	it	ne
 8000f7e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f82:	d1e0      	bne.n	8000f46 <__aeabi_fdiv+0x46>
 8000f84:	2afd      	cmp	r2, #253	; 0xfd
 8000f86:	f63f af50 	bhi.w	8000e2a <__aeabi_fmul+0x92>
 8000f8a:	428b      	cmp	r3, r1
 8000f8c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f90:	bf08      	it	eq
 8000f92:	f020 0001 	biceq.w	r0, r0, #1
 8000f96:	4770      	bx	lr
 8000f98:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f9c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fa0:	327f      	adds	r2, #127	; 0x7f
 8000fa2:	bfc2      	ittt	gt
 8000fa4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fa8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fac:	4770      	bxgt	lr
 8000fae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fb2:	f04f 0300 	mov.w	r3, #0
 8000fb6:	3a01      	subs	r2, #1
 8000fb8:	e737      	b.n	8000e2a <__aeabi_fmul+0x92>
 8000fba:	f092 0f00 	teq	r2, #0
 8000fbe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fc2:	bf02      	ittt	eq
 8000fc4:	0040      	lsleq	r0, r0, #1
 8000fc6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fca:	3a01      	subeq	r2, #1
 8000fcc:	d0f9      	beq.n	8000fc2 <__aeabi_fdiv+0xc2>
 8000fce:	ea40 000c 	orr.w	r0, r0, ip
 8000fd2:	f093 0f00 	teq	r3, #0
 8000fd6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fda:	bf02      	ittt	eq
 8000fdc:	0049      	lsleq	r1, r1, #1
 8000fde:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fe2:	3b01      	subeq	r3, #1
 8000fe4:	d0f9      	beq.n	8000fda <__aeabi_fdiv+0xda>
 8000fe6:	ea41 010c 	orr.w	r1, r1, ip
 8000fea:	e795      	b.n	8000f18 <__aeabi_fdiv+0x18>
 8000fec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ff0:	ea92 0f0c 	teq	r2, ip
 8000ff4:	d108      	bne.n	8001008 <__aeabi_fdiv+0x108>
 8000ff6:	0242      	lsls	r2, r0, #9
 8000ff8:	f47f af7d 	bne.w	8000ef6 <__aeabi_fmul+0x15e>
 8000ffc:	ea93 0f0c 	teq	r3, ip
 8001000:	f47f af70 	bne.w	8000ee4 <__aeabi_fmul+0x14c>
 8001004:	4608      	mov	r0, r1
 8001006:	e776      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001008:	ea93 0f0c 	teq	r3, ip
 800100c:	d104      	bne.n	8001018 <__aeabi_fdiv+0x118>
 800100e:	024b      	lsls	r3, r1, #9
 8001010:	f43f af4c 	beq.w	8000eac <__aeabi_fmul+0x114>
 8001014:	4608      	mov	r0, r1
 8001016:	e76e      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001018:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800101c:	bf18      	it	ne
 800101e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001022:	d1ca      	bne.n	8000fba <__aeabi_fdiv+0xba>
 8001024:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001028:	f47f af5c 	bne.w	8000ee4 <__aeabi_fmul+0x14c>
 800102c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001030:	f47f af3c 	bne.w	8000eac <__aeabi_fmul+0x114>
 8001034:	e75f      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001036:	bf00      	nop

08001038 <__gesf2>:
 8001038:	f04f 3cff 	mov.w	ip, #4294967295
 800103c:	e006      	b.n	800104c <__cmpsf2+0x4>
 800103e:	bf00      	nop

08001040 <__lesf2>:
 8001040:	f04f 0c01 	mov.w	ip, #1
 8001044:	e002      	b.n	800104c <__cmpsf2+0x4>
 8001046:	bf00      	nop

08001048 <__cmpsf2>:
 8001048:	f04f 0c01 	mov.w	ip, #1
 800104c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001050:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001054:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001058:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800105c:	bf18      	it	ne
 800105e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001062:	d011      	beq.n	8001088 <__cmpsf2+0x40>
 8001064:	b001      	add	sp, #4
 8001066:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800106a:	bf18      	it	ne
 800106c:	ea90 0f01 	teqne	r0, r1
 8001070:	bf58      	it	pl
 8001072:	ebb2 0003 	subspl.w	r0, r2, r3
 8001076:	bf88      	it	hi
 8001078:	17c8      	asrhi	r0, r1, #31
 800107a:	bf38      	it	cc
 800107c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001080:	bf18      	it	ne
 8001082:	f040 0001 	orrne.w	r0, r0, #1
 8001086:	4770      	bx	lr
 8001088:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800108c:	d102      	bne.n	8001094 <__cmpsf2+0x4c>
 800108e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001092:	d105      	bne.n	80010a0 <__cmpsf2+0x58>
 8001094:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001098:	d1e4      	bne.n	8001064 <__cmpsf2+0x1c>
 800109a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800109e:	d0e1      	beq.n	8001064 <__cmpsf2+0x1c>
 80010a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop

080010a8 <__aeabi_cfrcmple>:
 80010a8:	4684      	mov	ip, r0
 80010aa:	4608      	mov	r0, r1
 80010ac:	4661      	mov	r1, ip
 80010ae:	e7ff      	b.n	80010b0 <__aeabi_cfcmpeq>

080010b0 <__aeabi_cfcmpeq>:
 80010b0:	b50f      	push	{r0, r1, r2, r3, lr}
 80010b2:	f7ff ffc9 	bl	8001048 <__cmpsf2>
 80010b6:	2800      	cmp	r0, #0
 80010b8:	bf48      	it	mi
 80010ba:	f110 0f00 	cmnmi.w	r0, #0
 80010be:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010c0 <__aeabi_fcmpeq>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff fff4 	bl	80010b0 <__aeabi_cfcmpeq>
 80010c8:	bf0c      	ite	eq
 80010ca:	2001      	moveq	r0, #1
 80010cc:	2000      	movne	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmplt>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffea 	bl	80010b0 <__aeabi_cfcmpeq>
 80010dc:	bf34      	ite	cc
 80010de:	2001      	movcc	r0, #1
 80010e0:	2000      	movcs	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmple>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffe0 	bl	80010b0 <__aeabi_cfcmpeq>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpge>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffd2 	bl	80010a8 <__aeabi_cfrcmple>
 8001104:	bf94      	ite	ls
 8001106:	2001      	movls	r0, #1
 8001108:	2000      	movhi	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_fcmpgt>:
 8001110:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001114:	f7ff ffc8 	bl	80010a8 <__aeabi_cfrcmple>
 8001118:	bf34      	ite	cc
 800111a:	2001      	movcc	r0, #1
 800111c:	2000      	movcs	r0, #0
 800111e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001122:	bf00      	nop

08001124 <__aeabi_d2lz>:
 8001124:	b538      	push	{r3, r4, r5, lr}
 8001126:	4605      	mov	r5, r0
 8001128:	460c      	mov	r4, r1
 800112a:	2200      	movs	r2, #0
 800112c:	2300      	movs	r3, #0
 800112e:	4628      	mov	r0, r5
 8001130:	4621      	mov	r1, r4
 8001132:	f7ff fc4d 	bl	80009d0 <__aeabi_dcmplt>
 8001136:	b928      	cbnz	r0, 8001144 <__aeabi_d2lz+0x20>
 8001138:	4628      	mov	r0, r5
 800113a:	4621      	mov	r1, r4
 800113c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001140:	f000 b80a 	b.w	8001158 <__aeabi_d2ulz>
 8001144:	4628      	mov	r0, r5
 8001146:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 800114a:	f000 f805 	bl	8001158 <__aeabi_d2ulz>
 800114e:	4240      	negs	r0, r0
 8001150:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001154:	bd38      	pop	{r3, r4, r5, pc}
 8001156:	bf00      	nop

08001158 <__aeabi_d2ulz>:
 8001158:	b5d0      	push	{r4, r6, r7, lr}
 800115a:	2200      	movs	r2, #0
 800115c:	4b0b      	ldr	r3, [pc, #44]	; (800118c <__aeabi_d2ulz+0x34>)
 800115e:	4606      	mov	r6, r0
 8001160:	460f      	mov	r7, r1
 8001162:	f7ff f9c3 	bl	80004ec <__aeabi_dmul>
 8001166:	f7ff fc99 	bl	8000a9c <__aeabi_d2uiz>
 800116a:	4604      	mov	r4, r0
 800116c:	f7ff f944 	bl	80003f8 <__aeabi_ui2d>
 8001170:	2200      	movs	r2, #0
 8001172:	4b07      	ldr	r3, [pc, #28]	; (8001190 <__aeabi_d2ulz+0x38>)
 8001174:	f7ff f9ba 	bl	80004ec <__aeabi_dmul>
 8001178:	4602      	mov	r2, r0
 800117a:	460b      	mov	r3, r1
 800117c:	4630      	mov	r0, r6
 800117e:	4639      	mov	r1, r7
 8001180:	f7fe fffc 	bl	800017c <__aeabi_dsub>
 8001184:	f7ff fc8a 	bl	8000a9c <__aeabi_d2uiz>
 8001188:	4621      	mov	r1, r4
 800118a:	bdd0      	pop	{r4, r6, r7, pc}
 800118c:	3df00000 	.word	0x3df00000
 8001190:	41f00000 	.word	0x41f00000

08001194 <I2Cx_ReadData16>:
  status = HAL_I2C_Mem_Read(&hi2c2, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, 0x10000);
  return value;
}
//------------------------------------------------
static void I2Cx_ReadData16(uint16_t Addr, uint8_t Reg, uint16_t *Value)
{
 8001194:	b500      	push	{lr}
 8001196:	b085      	sub	sp, #20
  HAL_StatusTypeDef status = HAL_OK;
  status = HAL_I2C_Mem_Read(&hi2c2, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)Value, 2, 0x10000);
 8001198:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800119c:	9302      	str	r3, [sp, #8]
 800119e:	2302      	movs	r3, #2
 80011a0:	9301      	str	r3, [sp, #4]
 80011a2:	9200      	str	r2, [sp, #0]
 80011a4:	2301      	movs	r3, #1
 80011a6:	460a      	mov	r2, r1
 80011a8:	4601      	mov	r1, r0
 80011aa:	4803      	ldr	r0, [pc, #12]	; (80011b8 <I2Cx_ReadData16+0x24>)
 80011ac:	f003 fb1a 	bl	80047e4 <HAL_I2C_Mem_Read>
}
 80011b0:	b005      	add	sp, #20
 80011b2:	f85d fb04 	ldr.w	pc, [sp], #4
 80011b6:	bf00      	nop
 80011b8:	20000584 	.word	0x20000584

080011bc <BME280_WriteReg>:
  HAL_StatusTypeDef status = HAL_OK;
  status = HAL_I2C_Mem_Read(&hi2c2, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)Value, 3, 0x10000);
}
//------------------------------------------------
void BME280_WriteReg(uint8_t Reg, uint8_t Value)
{
 80011bc:	b500      	push	{lr}
 80011be:	b087      	sub	sp, #28
 80011c0:	4602      	mov	r2, r0
  I2Cx_WriteData(BME280_ADDRESS, Reg, Value);
 80011c2:	f88d 1017 	strb.w	r1, [sp, #23]
  status = HAL_I2C_Mem_Write(&hi2c2, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, 0x10000);
 80011c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011ca:	9302      	str	r3, [sp, #8]
 80011cc:	2301      	movs	r3, #1
 80011ce:	9301      	str	r3, [sp, #4]
 80011d0:	f10d 0117 	add.w	r1, sp, #23
 80011d4:	9100      	str	r1, [sp, #0]
 80011d6:	21ec      	movs	r1, #236	; 0xec
 80011d8:	4802      	ldr	r0, [pc, #8]	; (80011e4 <BME280_WriteReg+0x28>)
 80011da:	f003 fa4d 	bl	8004678 <HAL_I2C_Mem_Write>
}
 80011de:	b007      	add	sp, #28
 80011e0:	f85d fb04 	ldr.w	pc, [sp], #4
 80011e4:	20000584 	.word	0x20000584

080011e8 <BME280_ReadReg>:
//------------------------------------------------
uint8_t BME280_ReadReg(uint8_t Reg)
{
 80011e8:	b500      	push	{lr}
 80011ea:	b087      	sub	sp, #28
 80011ec:	4602      	mov	r2, r0
  uint8_t value = 0;
 80011ee:	2300      	movs	r3, #0
 80011f0:	f88d 3017 	strb.w	r3, [sp, #23]
  status = HAL_I2C_Mem_Read(&hi2c2, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, 0x10000);
 80011f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011f8:	9302      	str	r3, [sp, #8]
 80011fa:	2301      	movs	r3, #1
 80011fc:	9301      	str	r3, [sp, #4]
 80011fe:	f10d 0117 	add.w	r1, sp, #23
 8001202:	9100      	str	r1, [sp, #0]
 8001204:	21ec      	movs	r1, #236	; 0xec
 8001206:	4804      	ldr	r0, [pc, #16]	; (8001218 <BME280_ReadReg+0x30>)
 8001208:	f003 faec 	bl	80047e4 <HAL_I2C_Mem_Read>
  uint8_t res = I2Cx_ReadData(BME280_ADDRESS,Reg);
  return res;
}
 800120c:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8001210:	b007      	add	sp, #28
 8001212:	f85d fb04 	ldr.w	pc, [sp], #4
 8001216:	bf00      	nop
 8001218:	20000584 	.word	0x20000584

0800121c <BME280_ReadReg_U16>:
//------------------------------------------------
void BME280_ReadReg_U16(uint8_t Reg, uint16_t *Value)
{
 800121c:	b508      	push	{r3, lr}
 800121e:	460a      	mov	r2, r1
  I2Cx_ReadData16(BME280_ADDRESS,Reg,Value);
 8001220:	4601      	mov	r1, r0
 8001222:	20ec      	movs	r0, #236	; 0xec
 8001224:	f7ff ffb6 	bl	8001194 <I2Cx_ReadData16>
}
 8001228:	bd08      	pop	{r3, pc}

0800122a <BME280_ReadReg_S16>:
//------------------------------------------------
void BME280_ReadReg_S16(uint8_t Reg, int16_t *Value)
{
 800122a:	b508      	push	{r3, lr}
 800122c:	460a      	mov	r2, r1
  I2Cx_ReadData16(BME280_ADDRESS,Reg, (uint16_t*) Value);
 800122e:	4601      	mov	r1, r0
 8001230:	20ec      	movs	r0, #236	; 0xec
 8001232:	f7ff ffaf 	bl	8001194 <I2Cx_ReadData16>
}
 8001236:	bd08      	pop	{r3, pc}

08001238 <BME280_ReadReg_BE_U24>:
  I2Cx_ReadData24(BME280_ADDRESS,Reg,Value);
  *(uint32_t *) Value &= 0x00FFFFFF;
}
//------------------------------------------------
void BME280_ReadReg_BE_U24(uint8_t Reg, uint32_t *Value)
{
 8001238:	b510      	push	{r4, lr}
 800123a:	b084      	sub	sp, #16
 800123c:	4602      	mov	r2, r0
 800123e:	460c      	mov	r4, r1
  status = HAL_I2C_Mem_Read(&hi2c2, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)Value, 3, 0x10000);
 8001240:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001244:	9302      	str	r3, [sp, #8]
 8001246:	2303      	movs	r3, #3
 8001248:	9301      	str	r3, [sp, #4]
 800124a:	9100      	str	r1, [sp, #0]
 800124c:	2301      	movs	r3, #1
 800124e:	21ec      	movs	r1, #236	; 0xec
 8001250:	4807      	ldr	r0, [pc, #28]	; (8001270 <BME280_ReadReg_BE_U24+0x38>)
 8001252:	f003 fac7 	bl	80047e4 <HAL_I2C_Mem_Read>
  I2Cx_ReadData24(BME280_ADDRESS,Reg,Value);
  *(uint32_t *) Value = be24toword(*(uint32_t *) Value) & 0x00FFFFFF;
 8001256:	6822      	ldr	r2, [r4, #0]
 8001258:	f3c2 4307 	ubfx	r3, r2, #16, #8
 800125c:	0411      	lsls	r1, r2, #16
 800125e:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
 8001262:	430b      	orrs	r3, r1
 8001264:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8001268:	4313      	orrs	r3, r2
 800126a:	6023      	str	r3, [r4, #0]
}
 800126c:	b004      	add	sp, #16
 800126e:	bd10      	pop	{r4, pc}
 8001270:	20000584 	.word	0x20000584

08001274 <BME280_ReadStatus>:
//------------------------------------------------
uint8_t BME280_ReadStatus(void)
{
 8001274:	b508      	push	{r3, lr}
  //clear unuset bits
  uint8_t res = BME280_ReadReg(BME280_REGISTER_STATUS)&0x09;
 8001276:	20f3      	movs	r0, #243	; 0xf3
 8001278:	f7ff ffb6 	bl	80011e8 <BME280_ReadReg>
  return res;
}
 800127c:	f000 0009 	and.w	r0, r0, #9
 8001280:	bd08      	pop	{r3, pc}
	...

08001284 <BME280_ReadCoefficients>:
//------------------------------------------------
void BME280_ReadCoefficients(void)
{
 8001284:	b538      	push	{r3, r4, r5, lr}
  BME280_ReadReg_U16(BME280_REGISTER_DIG_T1,&CalibData.dig_T1);
 8001286:	4c32      	ldr	r4, [pc, #200]	; (8001350 <BME280_ReadCoefficients+0xcc>)
 8001288:	4621      	mov	r1, r4
 800128a:	2088      	movs	r0, #136	; 0x88
 800128c:	f7ff ffc6 	bl	800121c <BME280_ReadReg_U16>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_T2,&CalibData.dig_T2);
 8001290:	1ca1      	adds	r1, r4, #2
 8001292:	208a      	movs	r0, #138	; 0x8a
 8001294:	f7ff ffc9 	bl	800122a <BME280_ReadReg_S16>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_T3,&CalibData.dig_T3);
 8001298:	1d21      	adds	r1, r4, #4
 800129a:	208c      	movs	r0, #140	; 0x8c
 800129c:	f7ff ffc5 	bl	800122a <BME280_ReadReg_S16>
  BME280_ReadReg_U16(BME280_REGISTER_DIG_P1,&CalibData.dig_P1);
 80012a0:	1da1      	adds	r1, r4, #6
 80012a2:	208e      	movs	r0, #142	; 0x8e
 80012a4:	f7ff ffba 	bl	800121c <BME280_ReadReg_U16>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P2,&CalibData.dig_P2);
 80012a8:	f104 0108 	add.w	r1, r4, #8
 80012ac:	2090      	movs	r0, #144	; 0x90
 80012ae:	f7ff ffbc 	bl	800122a <BME280_ReadReg_S16>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P3,&CalibData.dig_P3);
 80012b2:	f104 010a 	add.w	r1, r4, #10
 80012b6:	2092      	movs	r0, #146	; 0x92
 80012b8:	f7ff ffb7 	bl	800122a <BME280_ReadReg_S16>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P4,&CalibData.dig_P4);
 80012bc:	f104 010c 	add.w	r1, r4, #12
 80012c0:	2094      	movs	r0, #148	; 0x94
 80012c2:	f7ff ffb2 	bl	800122a <BME280_ReadReg_S16>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P5,&CalibData.dig_P5);
 80012c6:	f104 010e 	add.w	r1, r4, #14
 80012ca:	2096      	movs	r0, #150	; 0x96
 80012cc:	f7ff ffad 	bl	800122a <BME280_ReadReg_S16>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P6,&CalibData.dig_P6);
 80012d0:	f104 0110 	add.w	r1, r4, #16
 80012d4:	2098      	movs	r0, #152	; 0x98
 80012d6:	f7ff ffa8 	bl	800122a <BME280_ReadReg_S16>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P7,&CalibData.dig_P7);
 80012da:	f104 0112 	add.w	r1, r4, #18
 80012de:	209a      	movs	r0, #154	; 0x9a
 80012e0:	f7ff ffa3 	bl	800122a <BME280_ReadReg_S16>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P8,&CalibData.dig_P8);
 80012e4:	f104 0114 	add.w	r1, r4, #20
 80012e8:	209c      	movs	r0, #156	; 0x9c
 80012ea:	f7ff ff9e 	bl	800122a <BME280_ReadReg_S16>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P9,&CalibData.dig_P9);
 80012ee:	f104 0116 	add.w	r1, r4, #22
 80012f2:	209e      	movs	r0, #158	; 0x9e
 80012f4:	f7ff ff99 	bl	800122a <BME280_ReadReg_S16>
  CalibData.dig_H1 = BME280_ReadReg(BME280_REGISTER_DIG_H1);
 80012f8:	20a1      	movs	r0, #161	; 0xa1
 80012fa:	f7ff ff75 	bl	80011e8 <BME280_ReadReg>
 80012fe:	7620      	strb	r0, [r4, #24]
  BME280_ReadReg_S16(BME280_REGISTER_DIG_H2,&CalibData.dig_H2);
 8001300:	f104 011a 	add.w	r1, r4, #26
 8001304:	20e1      	movs	r0, #225	; 0xe1
 8001306:	f7ff ff90 	bl	800122a <BME280_ReadReg_S16>
  CalibData.dig_H3 = BME280_ReadReg(BME280_REGISTER_DIG_H3);
 800130a:	20e3      	movs	r0, #227	; 0xe3
 800130c:	f7ff ff6c 	bl	80011e8 <BME280_ReadReg>
 8001310:	7720      	strb	r0, [r4, #28]
  CalibData.dig_H4 = (BME280_ReadReg(BME280_REGISTER_DIG_H4) << 4) | (BME280_ReadReg(BME280_REGISTER_DIG_H4+1) & 0xF);
 8001312:	20e4      	movs	r0, #228	; 0xe4
 8001314:	f7ff ff68 	bl	80011e8 <BME280_ReadReg>
 8001318:	4605      	mov	r5, r0
 800131a:	20e5      	movs	r0, #229	; 0xe5
 800131c:	f7ff ff64 	bl	80011e8 <BME280_ReadReg>
 8001320:	f000 030f 	and.w	r3, r0, #15
 8001324:	ea43 1005 	orr.w	r0, r3, r5, lsl #4
 8001328:	83e0      	strh	r0, [r4, #30]
  CalibData.dig_H5 = (BME280_ReadReg(BME280_REGISTER_DIG_H5+1) << 4) | (BME280_ReadReg(BME280_REGISTER_DIG_H5) >> 4);
 800132a:	20e6      	movs	r0, #230	; 0xe6
 800132c:	f7ff ff5c 	bl	80011e8 <BME280_ReadReg>
 8001330:	4605      	mov	r5, r0
 8001332:	20e5      	movs	r0, #229	; 0xe5
 8001334:	f7ff ff58 	bl	80011e8 <BME280_ReadReg>
 8001338:	f3c0 1307 	ubfx	r3, r0, #4, #8
 800133c:	ea43 1005 	orr.w	r0, r3, r5, lsl #4
 8001340:	8420      	strh	r0, [r4, #32]
  CalibData.dig_H6 = (int8_t)BME280_ReadReg(BME280_REGISTER_DIG_H6);
 8001342:	20e7      	movs	r0, #231	; 0xe7
 8001344:	f7ff ff50 	bl	80011e8 <BME280_ReadReg>
 8001348:	f884 0022 	strb.w	r0, [r4, #34]	; 0x22
}
 800134c:	bd38      	pop	{r3, r4, r5, pc}
 800134e:	bf00      	nop
 8001350:	200001fc 	.word	0x200001fc

08001354 <BME280_SetStandby>:
//------------------------------------------------
void BME280_SetStandby(uint8_t tsb) {
 8001354:	b510      	push	{r4, lr}
 8001356:	4604      	mov	r4, r0
  uint8_t reg;
  reg = BME280_ReadReg(BME280_REG_CONFIG) & ~BME280_STBY_MSK;
 8001358:	20f5      	movs	r0, #245	; 0xf5
 800135a:	f7ff ff45 	bl	80011e8 <BME280_ReadReg>
 800135e:	f000 011f 	and.w	r1, r0, #31
  reg |= tsb & BME280_STBY_MSK;
 8001362:	f024 041f 	bic.w	r4, r4, #31
  BME280_WriteReg(BME280_REG_CONFIG,reg);
 8001366:	4321      	orrs	r1, r4
 8001368:	20f5      	movs	r0, #245	; 0xf5
 800136a:	f7ff ff27 	bl	80011bc <BME280_WriteReg>
}
 800136e:	bd10      	pop	{r4, pc}

08001370 <BME280_SetFilter>:
//------------------------------------------------
  void BME280_SetFilter(uint8_t filter) {
 8001370:	b510      	push	{r4, lr}
 8001372:	4604      	mov	r4, r0
  uint8_t reg;
  reg = BME280_ReadReg(BME280_REG_CONFIG) & ~BME280_FILTER_MSK;
 8001374:	20f5      	movs	r0, #245	; 0xf5
 8001376:	f7ff ff37 	bl	80011e8 <BME280_ReadReg>
 800137a:	f000 01e3 	and.w	r1, r0, #227	; 0xe3
  reg |= filter & BME280_FILTER_MSK;
 800137e:	f004 041c 	and.w	r4, r4, #28
  BME280_WriteReg(BME280_REG_CONFIG,reg);
 8001382:	4321      	orrs	r1, r4
 8001384:	20f5      	movs	r0, #245	; 0xf5
 8001386:	f7ff ff19 	bl	80011bc <BME280_WriteReg>
}
 800138a:	bd10      	pop	{r4, pc}

0800138c <BME280_SetOversamplingTemper>:
//------------------------------------------------
void BME280_SetOversamplingTemper(uint8_t osrs)
{
 800138c:	b510      	push	{r4, lr}
 800138e:	4604      	mov	r4, r0
  uint8_t reg;
  reg = BME280_ReadReg(BME280_REG_CTRL_MEAS) & ~BME280_OSRS_T_MSK;
 8001390:	20f4      	movs	r0, #244	; 0xf4
 8001392:	f7ff ff29 	bl	80011e8 <BME280_ReadReg>
 8001396:	f000 011f 	and.w	r1, r0, #31
  reg |= osrs & BME280_OSRS_T_MSK;
 800139a:	f024 041f 	bic.w	r4, r4, #31
  BME280_WriteReg(BME280_REG_CTRL_MEAS,reg);
 800139e:	4321      	orrs	r1, r4
 80013a0:	20f4      	movs	r0, #244	; 0xf4
 80013a2:	f7ff ff0b 	bl	80011bc <BME280_WriteReg>
}
 80013a6:	bd10      	pop	{r4, pc}

080013a8 <BME280_SetOversamplingPressure>:
//------------------------------------------------
void BME280_SetOversamplingPressure(uint8_t osrs)
{
 80013a8:	b510      	push	{r4, lr}
 80013aa:	4604      	mov	r4, r0
  uint8_t reg;
  reg = BME280_ReadReg(BME280_REG_CTRL_MEAS) & ~BME280_OSRS_P_MSK;
 80013ac:	20f4      	movs	r0, #244	; 0xf4
 80013ae:	f7ff ff1b 	bl	80011e8 <BME280_ReadReg>
 80013b2:	f000 01e3 	and.w	r1, r0, #227	; 0xe3
  reg |= osrs & BME280_OSRS_P_MSK;
 80013b6:	f004 041c 	and.w	r4, r4, #28
  BME280_WriteReg(BME280_REG_CTRL_MEAS,reg);
 80013ba:	4321      	orrs	r1, r4
 80013bc:	20f4      	movs	r0, #244	; 0xf4
 80013be:	f7ff fefd 	bl	80011bc <BME280_WriteReg>
}
 80013c2:	bd10      	pop	{r4, pc}

080013c4 <BME280_SetOversamplingHum>:
//------------------------------------------------
void BME280_SetOversamplingHum(uint8_t osrs)
{
 80013c4:	b510      	push	{r4, lr}
 80013c6:	4604      	mov	r4, r0
  uint8_t reg;
  reg = BME280_ReadReg(BME280_REG_CTRL_HUM) & ~BME280_OSRS_H_MSK;
 80013c8:	20f2      	movs	r0, #242	; 0xf2
 80013ca:	f7ff ff0d 	bl	80011e8 <BME280_ReadReg>
 80013ce:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
  reg |= osrs & BME280_OSRS_H_MSK;
 80013d2:	f004 0407 	and.w	r4, r4, #7
  BME280_WriteReg(BME280_REG_CTRL_HUM,reg);
 80013d6:	4321      	orrs	r1, r4
 80013d8:	20f2      	movs	r0, #242	; 0xf2
 80013da:	f7ff feef 	bl	80011bc <BME280_WriteReg>
  //The 'ctrl_hum' register needs to be written
  //after changing 'ctrl_hum' for the changes to become effwctive.
  reg = BME280_ReadReg(BME280_REG_CTRL_MEAS);
 80013de:	20f4      	movs	r0, #244	; 0xf4
 80013e0:	f7ff ff02 	bl	80011e8 <BME280_ReadReg>
 80013e4:	4601      	mov	r1, r0
  BME280_WriteReg(BME280_REG_CTRL_MEAS,reg);
 80013e6:	20f4      	movs	r0, #244	; 0xf4
 80013e8:	f7ff fee8 	bl	80011bc <BME280_WriteReg>
}
 80013ec:	bd10      	pop	{r4, pc}

080013ee <BME280_SetMode>:
//------------------------------------------------
void BME280_SetMode(uint8_t mode) {
 80013ee:	b510      	push	{r4, lr}
 80013f0:	4604      	mov	r4, r0
  uint8_t reg;
  reg = BME280_ReadReg(BME280_REG_CTRL_MEAS) & ~BME280_MODE_MSK;
 80013f2:	20f4      	movs	r0, #244	; 0xf4
 80013f4:	f7ff fef8 	bl	80011e8 <BME280_ReadReg>
 80013f8:	f000 01fc 	and.w	r1, r0, #252	; 0xfc
  reg |= mode & BME280_MODE_MSK;
 80013fc:	f004 0403 	and.w	r4, r4, #3
  BME280_WriteReg(BME280_REG_CTRL_MEAS,reg);
 8001400:	4321      	orrs	r1, r4
 8001402:	20f4      	movs	r0, #244	; 0xf4
 8001404:	f7ff feda 	bl	80011bc <BME280_WriteReg>
}
 8001408:	bd10      	pop	{r4, pc}
	...

0800140c <BME280_ReadTemperature>:
//------------------------------------------------
float BME280_ReadTemperature(void)
{
 800140c:	b500      	push	{lr}
 800140e:	b083      	sub	sp, #12
  float temper_float = 0.0f;
	uint32_t temper_raw;
	int32_t val1, val2;
	BME280_ReadReg_BE_U24(BME280_REGISTER_TEMPDATA,&temper_raw);
 8001410:	a901      	add	r1, sp, #4
 8001412:	20fa      	movs	r0, #250	; 0xfa
 8001414:	f7ff ff10 	bl	8001238 <BME280_ReadReg_BE_U24>
	temper_raw >>= 4;
 8001418:	9901      	ldr	r1, [sp, #4]
	val1 = ((((temper_raw>>3) - ((int32_t)CalibData.dig_T1 <<1))) *
 800141a:	4a11      	ldr	r2, [pc, #68]	; (8001460 <BME280_ReadTemperature+0x54>)
 800141c:	8813      	ldrh	r3, [r2, #0]
		((int32_t)CalibData.dig_T2)) >> 11;
	val2 = (((((temper_raw>>4) - ((int32_t)CalibData.dig_T1)) *
 800141e:	ebc3 2011 	rsb	r0, r3, r1, lsr #8
	val1 = ((((temper_raw>>3) - ((int32_t)CalibData.dig_T1 <<1))) *
 8001422:	005b      	lsls	r3, r3, #1
 8001424:	ebc3 13d1 	rsb	r3, r3, r1, lsr #7
		((int32_t)CalibData.dig_T2)) >> 11;
 8001428:	f9b2 1002 	ldrsh.w	r1, [r2, #2]
	val1 = ((((temper_raw>>3) - ((int32_t)CalibData.dig_T1 <<1))) *
 800142c:	fb01 f303 	mul.w	r3, r1, r3
	val2 = (((((temper_raw>>4) - ((int32_t)CalibData.dig_T1)) *
 8001430:	fb00 f000 	mul.w	r0, r0, r0
		((temper_raw>>4) - ((int32_t)CalibData.dig_T1))) >> 12) *
 8001434:	0b00      	lsrs	r0, r0, #12
		((int32_t)CalibData.dig_T3)) >> 14;
 8001436:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
		((temper_raw>>4) - ((int32_t)CalibData.dig_T1))) >> 12) *
 800143a:	fb02 f000 	mul.w	r0, r2, r0
		((int32_t)CalibData.dig_T3)) >> 14;
 800143e:	0b80      	lsrs	r0, r0, #14
	temper_int = val1 + val2;
 8001440:	eb00 20d3 	add.w	r0, r0, r3, lsr #11
 8001444:	4b07      	ldr	r3, [pc, #28]	; (8001464 <BME280_ReadTemperature+0x58>)
 8001446:	6018      	str	r0, [r3, #0]
	temper_float = ((temper_int * 5 + 128) >> 8);
 8001448:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800144c:	3080      	adds	r0, #128	; 0x80
 800144e:	1200      	asrs	r0, r0, #8
 8001450:	f7ff fc4e 	bl	8000cf0 <__aeabi_i2f>
	temper_float /= 100.0f;
 8001454:	4904      	ldr	r1, [pc, #16]	; (8001468 <BME280_ReadTemperature+0x5c>)
 8001456:	f7ff fd53 	bl	8000f00 <__aeabi_fdiv>
//	temper_float = temper_int / 5120.0;
  return temper_float;
}
 800145a:	b003      	add	sp, #12
 800145c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001460:	200001fc 	.word	0x200001fc
 8001464:	20000220 	.word	0x20000220
 8001468:	42c80000 	.word	0x42c80000
 800146c:	00000000 	.word	0x00000000

08001470 <BME280_ReadPressure>:
//------------------------------------------------
float BME280_ReadPressure(void)
{
 8001470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001474:	b083      	sub	sp, #12
	float var1;
	float var2;
	float p;
	uint32_t t_fine;
	uint32_t press_raw;
	BME280_ReadTemperature(); // must be done first to get t_fine
 8001476:	f7ff ffc9 	bl	800140c <BME280_ReadTemperature>
	BME280_ReadReg_BE_U24(BME280_REGISTER_PRESSUREDATA,&press_raw);
 800147a:	a901      	add	r1, sp, #4
 800147c:	20f7      	movs	r0, #247	; 0xf7
 800147e:	f7ff fedb 	bl	8001238 <BME280_ReadReg_BE_U24>
	press_raw >>= 4;
 8001482:	f8dd 8004 	ldr.w	r8, [sp, #4]
	var1 = ((((float)t_fine)/2.0)-64000.0);
 8001486:	2000      	movs	r0, #0
 8001488:	f7ff fc2e 	bl	8000ce8 <__aeabi_ui2f>
 800148c:	f7fe ffd6 	bl	800043c <__aeabi_f2d>
 8001490:	2200      	movs	r2, #0
 8001492:	4b8d      	ldr	r3, [pc, #564]	; (80016c8 <BME280_ReadPressure+0x258>)
 8001494:	f7ff f82a 	bl	80004ec <__aeabi_dmul>
 8001498:	2200      	movs	r2, #0
 800149a:	4b8c      	ldr	r3, [pc, #560]	; (80016cc <BME280_ReadPressure+0x25c>)
 800149c:	f7fe fe6e 	bl	800017c <__aeabi_dsub>
 80014a0:	f7ff fb1c 	bl	8000adc <__aeabi_d2f>
 80014a4:	4604      	mov	r4, r0
	var2 = var1 * var1 * ((float)CalibData.dig_P6) / 32768.0;
 80014a6:	4d8a      	ldr	r5, [pc, #552]	; (80016d0 <BME280_ReadPressure+0x260>)
 80014a8:	f9b5 b010 	ldrsh.w	fp, [r5, #16]
	var2 = var2 + var1 * ((float)CalibData.dig_P5) * 2.0;
 80014ac:	f9b5 a00e 	ldrsh.w	sl, [r5, #14]
	var2 = (var2/4.0)+(((float)CalibData.dig_P4) * 65536.0);
 80014b0:	f9b5 900c 	ldrsh.w	r9, [r5, #12]
	var1 = (((float)CalibData.dig_P3) * var1 * var1 / 524288.0 + ((float)CalibData.dig_P2) * var1) / 524288.0;
 80014b4:	f9b5 000a 	ldrsh.w	r0, [r5, #10]
 80014b8:	f7ff fc1a 	bl	8000cf0 <__aeabi_i2f>
 80014bc:	4621      	mov	r1, r4
 80014be:	f7ff fc6b 	bl	8000d98 <__aeabi_fmul>
 80014c2:	4621      	mov	r1, r4
 80014c4:	f7ff fc68 	bl	8000d98 <__aeabi_fmul>
 80014c8:	f7fe ffb8 	bl	800043c <__aeabi_f2d>
 80014cc:	2200      	movs	r2, #0
 80014ce:	f04f 537b 	mov.w	r3, #1052770304	; 0x3ec00000
 80014d2:	f7ff f80b 	bl	80004ec <__aeabi_dmul>
 80014d6:	4606      	mov	r6, r0
 80014d8:	460f      	mov	r7, r1
 80014da:	f9b5 0008 	ldrsh.w	r0, [r5, #8]
 80014de:	f7ff fc07 	bl	8000cf0 <__aeabi_i2f>
 80014e2:	4621      	mov	r1, r4
 80014e4:	f7ff fc58 	bl	8000d98 <__aeabi_fmul>
 80014e8:	f7fe ffa8 	bl	800043c <__aeabi_f2d>
 80014ec:	4602      	mov	r2, r0
 80014ee:	460b      	mov	r3, r1
 80014f0:	4630      	mov	r0, r6
 80014f2:	4639      	mov	r1, r7
 80014f4:	f7fe fe44 	bl	8000180 <__adddf3>
 80014f8:	2200      	movs	r2, #0
 80014fa:	f04f 537b 	mov.w	r3, #1052770304	; 0x3ec00000
 80014fe:	f7fe fff5 	bl	80004ec <__aeabi_dmul>
 8001502:	f7ff faeb 	bl	8000adc <__aeabi_d2f>
	var1 = (1.0 + var1 / 32768.0)*((float)CalibData.dig_P1);
 8001506:	f7fe ff99 	bl	800043c <__aeabi_f2d>
 800150a:	2200      	movs	r2, #0
 800150c:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8001510:	f7fe ffec 	bl	80004ec <__aeabi_dmul>
 8001514:	2200      	movs	r2, #0
 8001516:	4b6f      	ldr	r3, [pc, #444]	; (80016d4 <BME280_ReadPressure+0x264>)
 8001518:	f7fe fe32 	bl	8000180 <__adddf3>
 800151c:	4606      	mov	r6, r0
 800151e:	460f      	mov	r7, r1
 8001520:	88e8      	ldrh	r0, [r5, #6]
 8001522:	f7ff fbe1 	bl	8000ce8 <__aeabi_ui2f>
 8001526:	f7fe ff89 	bl	800043c <__aeabi_f2d>
 800152a:	4602      	mov	r2, r0
 800152c:	460b      	mov	r3, r1
 800152e:	4630      	mov	r0, r6
 8001530:	4639      	mov	r1, r7
 8001532:	f7fe ffdb 	bl	80004ec <__aeabi_dmul>
 8001536:	f7ff fad1 	bl	8000adc <__aeabi_d2f>
 800153a:	4605      	mov	r5, r0
	if (var1 == 0.0)
 800153c:	2100      	movs	r1, #0
 800153e:	f7ff fdbf 	bl	80010c0 <__aeabi_fcmpeq>
 8001542:	2800      	cmp	r0, #0
 8001544:	f040 80b4 	bne.w	80016b0 <BME280_ReadPressure+0x240>
	var2 = var1 * var1 * ((float)CalibData.dig_P6) / 32768.0;
 8001548:	4621      	mov	r1, r4
 800154a:	4620      	mov	r0, r4
 800154c:	f7ff fc24 	bl	8000d98 <__aeabi_fmul>
 8001550:	4606      	mov	r6, r0
 8001552:	4658      	mov	r0, fp
 8001554:	f7ff fbcc 	bl	8000cf0 <__aeabi_i2f>
 8001558:	4601      	mov	r1, r0
 800155a:	4630      	mov	r0, r6
 800155c:	f7ff fc1c 	bl	8000d98 <__aeabi_fmul>
 8001560:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
 8001564:	f7ff fc18 	bl	8000d98 <__aeabi_fmul>
	var2 = var2 + var1 * ((float)CalibData.dig_P5) * 2.0;
 8001568:	f7fe ff68 	bl	800043c <__aeabi_f2d>
 800156c:	4606      	mov	r6, r0
 800156e:	460f      	mov	r7, r1
 8001570:	4650      	mov	r0, sl
 8001572:	f7ff fbbd 	bl	8000cf0 <__aeabi_i2f>
 8001576:	4621      	mov	r1, r4
 8001578:	f7ff fc0e 	bl	8000d98 <__aeabi_fmul>
 800157c:	f7fe ff5e 	bl	800043c <__aeabi_f2d>
 8001580:	4602      	mov	r2, r0
 8001582:	460b      	mov	r3, r1
 8001584:	f7fe fdfc 	bl	8000180 <__adddf3>
 8001588:	4602      	mov	r2, r0
 800158a:	460b      	mov	r3, r1
 800158c:	4630      	mov	r0, r6
 800158e:	4639      	mov	r1, r7
 8001590:	f7fe fdf6 	bl	8000180 <__adddf3>
 8001594:	4606      	mov	r6, r0
 8001596:	460f      	mov	r7, r1
	var2 = (var2/4.0)+(((float)CalibData.dig_P4) * 65536.0);
 8001598:	4648      	mov	r0, r9
 800159a:	f7ff fba9 	bl	8000cf0 <__aeabi_i2f>
 800159e:	f7fe ff4d 	bl	800043c <__aeabi_f2d>
 80015a2:	2200      	movs	r2, #0
 80015a4:	4b4c      	ldr	r3, [pc, #304]	; (80016d8 <BME280_ReadPressure+0x268>)
 80015a6:	f7fe ffa1 	bl	80004ec <__aeabi_dmul>
 80015aa:	4682      	mov	sl, r0
 80015ac:	468b      	mov	fp, r1
	var2 = var2 + var1 * ((float)CalibData.dig_P5) * 2.0;
 80015ae:	4630      	mov	r0, r6
 80015b0:	4639      	mov	r1, r7
 80015b2:	f7ff fa93 	bl	8000adc <__aeabi_d2f>
	var2 = (var2/4.0)+(((float)CalibData.dig_P4) * 65536.0);
 80015b6:	f7fe ff41 	bl	800043c <__aeabi_f2d>
 80015ba:	2200      	movs	r2, #0
 80015bc:	4b47      	ldr	r3, [pc, #284]	; (80016dc <BME280_ReadPressure+0x26c>)
 80015be:	f7fe ff95 	bl	80004ec <__aeabi_dmul>
 80015c2:	4602      	mov	r2, r0
 80015c4:	460b      	mov	r3, r1
 80015c6:	4650      	mov	r0, sl
 80015c8:	4659      	mov	r1, fp
 80015ca:	f7fe fdd9 	bl	8000180 <__adddf3>
 80015ce:	4606      	mov	r6, r0
 80015d0:	460f      	mov	r7, r1
	{
		return 0; // avoid exception caused by division by zero
	}
	p = (1048576.0 - ((float)press_raw));
 80015d2:	ea4f 1018 	mov.w	r0, r8, lsr #4
 80015d6:	f7ff fb87 	bl	8000ce8 <__aeabi_ui2f>
 80015da:	4601      	mov	r1, r0
 80015dc:	f04f 4093 	mov.w	r0, #1233125376	; 0x49800000
 80015e0:	f7ff fad0 	bl	8000b84 <__aeabi_fsub>
	p = ((p - (var2 / 4069.0)) * 6250.0 / var1);
 80015e4:	f7fe ff2a 	bl	800043c <__aeabi_f2d>
 80015e8:	4680      	mov	r8, r0
 80015ea:	4689      	mov	r9, r1
	var2 = (var2/4.0)+(((float)CalibData.dig_P4) * 65536.0);
 80015ec:	4630      	mov	r0, r6
 80015ee:	4639      	mov	r1, r7
 80015f0:	f7ff fa74 	bl	8000adc <__aeabi_d2f>
	p = ((p - (var2 / 4069.0)) * 6250.0 / var1);
 80015f4:	f7fe ff22 	bl	800043c <__aeabi_f2d>
 80015f8:	a32f      	add	r3, pc, #188	; (adr r3, 80016b8 <BME280_ReadPressure+0x248>)
 80015fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015fe:	f7ff f89f 	bl	8000740 <__aeabi_ddiv>
 8001602:	4602      	mov	r2, r0
 8001604:	460b      	mov	r3, r1
 8001606:	4640      	mov	r0, r8
 8001608:	4649      	mov	r1, r9
 800160a:	f7fe fdb7 	bl	800017c <__aeabi_dsub>
 800160e:	a32c      	add	r3, pc, #176	; (adr r3, 80016c0 <BME280_ReadPressure+0x250>)
 8001610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001614:	f7fe ff6a 	bl	80004ec <__aeabi_dmul>
 8001618:	4606      	mov	r6, r0
 800161a:	460f      	mov	r7, r1
 800161c:	4628      	mov	r0, r5
 800161e:	f7fe ff0d 	bl	800043c <__aeabi_f2d>
 8001622:	4602      	mov	r2, r0
 8001624:	460b      	mov	r3, r1
 8001626:	4630      	mov	r0, r6
 8001628:	4639      	mov	r1, r7
 800162a:	f7ff f889 	bl	8000740 <__aeabi_ddiv>
 800162e:	f7ff fa55 	bl	8000adc <__aeabi_d2f>
 8001632:	4604      	mov	r4, r0
	var1 = ((float)CalibData.dig_P9) * p * p / 2147483648.0;
 8001634:	4e26      	ldr	r6, [pc, #152]	; (80016d0 <BME280_ReadPressure+0x260>)
 8001636:	f9b6 0016 	ldrsh.w	r0, [r6, #22]
 800163a:	f7ff fb59 	bl	8000cf0 <__aeabi_i2f>
 800163e:	4621      	mov	r1, r4
 8001640:	f7ff fbaa 	bl	8000d98 <__aeabi_fmul>
 8001644:	4621      	mov	r1, r4
 8001646:	f7ff fba7 	bl	8000d98 <__aeabi_fmul>
 800164a:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
 800164e:	f7ff fba3 	bl	8000d98 <__aeabi_fmul>
 8001652:	4605      	mov	r5, r0
	var2 = p * ((float)CalibData.dig_P8) / 32768.0;
 8001654:	f9b6 0014 	ldrsh.w	r0, [r6, #20]
 8001658:	f7ff fb4a 	bl	8000cf0 <__aeabi_i2f>
 800165c:	4621      	mov	r1, r4
 800165e:	f7ff fb9b 	bl	8000d98 <__aeabi_fmul>
 8001662:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
 8001666:	f7ff fb97 	bl	8000d98 <__aeabi_fmul>
 800166a:	4601      	mov	r1, r0
	p = p + (var1 + var2 + ((float)CalibData.dig_P7)) / 16.0;
 800166c:	4628      	mov	r0, r5
 800166e:	f7ff fa8b 	bl	8000b88 <__addsf3>
 8001672:	4605      	mov	r5, r0
 8001674:	f9b6 0012 	ldrsh.w	r0, [r6, #18]
 8001678:	f7ff fb3a 	bl	8000cf0 <__aeabi_i2f>
 800167c:	4601      	mov	r1, r0
 800167e:	4628      	mov	r0, r5
 8001680:	f7ff fa82 	bl	8000b88 <__addsf3>
 8001684:	f7fe feda 	bl	800043c <__aeabi_f2d>
 8001688:	2200      	movs	r2, #0
 800168a:	4b15      	ldr	r3, [pc, #84]	; (80016e0 <BME280_ReadPressure+0x270>)
 800168c:	f7fe ff2e 	bl	80004ec <__aeabi_dmul>
 8001690:	4606      	mov	r6, r0
 8001692:	460f      	mov	r7, r1
 8001694:	4620      	mov	r0, r4
 8001696:	f7fe fed1 	bl	800043c <__aeabi_f2d>
 800169a:	4602      	mov	r2, r0
 800169c:	460b      	mov	r3, r1
 800169e:	4630      	mov	r0, r6
 80016a0:	4639      	mov	r1, r7
 80016a2:	f7fe fd6d 	bl	8000180 <__adddf3>
 80016a6:	f7ff fa19 	bl	8000adc <__aeabi_d2f>
	return p;

}
 80016aa:	b003      	add	sp, #12
 80016ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return 0; // avoid exception caused by division by zero
 80016b0:	2000      	movs	r0, #0
 80016b2:	e7fa      	b.n	80016aa <BME280_ReadPressure+0x23a>
 80016b4:	f3af 8000 	nop.w
 80016b8:	00000000 	.word	0x00000000
 80016bc:	40afca00 	.word	0x40afca00
 80016c0:	00000000 	.word	0x00000000
 80016c4:	40b86a00 	.word	0x40b86a00
 80016c8:	3fe00000 	.word	0x3fe00000
 80016cc:	40ef4000 	.word	0x40ef4000
 80016d0:	200001fc 	.word	0x200001fc
 80016d4:	3ff00000 	.word	0x3ff00000
 80016d8:	40f00000 	.word	0x40f00000
 80016dc:	3fd00000 	.word	0x3fd00000
 80016e0:	3fb00000 	.word	0x3fb00000

080016e4 <BME280_Init>:
	att = 44330.0 * (1.0 - pow(atm / seaLevel, 0.1903));
  return att;
}
//------------------------------------------------
void BME280_Init(void)
{
 80016e4:	b508      	push	{r3, lr}

	BME280_WriteReg(BME280_REG_SOFTRESET,BME280_SOFTRESET_VALUE);
 80016e6:	21b6      	movs	r1, #182	; 0xb6
 80016e8:	20e0      	movs	r0, #224	; 0xe0
 80016ea:	f7ff fd67 	bl	80011bc <BME280_WriteReg>
	while (BME280_ReadStatus() & BME280_STATUS_IM_UPDATE) ;
 80016ee:	f7ff fdc1 	bl	8001274 <BME280_ReadStatus>
 80016f2:	f010 0f01 	tst.w	r0, #1
 80016f6:	d1fa      	bne.n	80016ee <BME280_Init+0xa>
	BME280_ReadCoefficients();
 80016f8:	f7ff fdc4 	bl	8001284 <BME280_ReadCoefficients>
	BME280_SetStandby(BME280_STBY_1000);
 80016fc:	20a0      	movs	r0, #160	; 0xa0
 80016fe:	f7ff fe29 	bl	8001354 <BME280_SetStandby>
	BME280_SetFilter(BME280_FILTER_4);
 8001702:	2008      	movs	r0, #8
 8001704:	f7ff fe34 	bl	8001370 <BME280_SetFilter>
	BME280_SetOversamplingTemper(BME280_OSRS_T_x4);
 8001708:	2060      	movs	r0, #96	; 0x60
 800170a:	f7ff fe3f 	bl	800138c <BME280_SetOversamplingTemper>
	BME280_SetOversamplingPressure(BME280_OSRS_P_x2);
 800170e:	2008      	movs	r0, #8
 8001710:	f7ff fe4a 	bl	80013a8 <BME280_SetOversamplingPressure>
	BME280_SetOversamplingHum(BME280_OSRS_H_x1);
 8001714:	2001      	movs	r0, #1
 8001716:	f7ff fe55 	bl	80013c4 <BME280_SetOversamplingHum>

	BME280_SetMode(BME280_MODE_NORMAL);
 800171a:	2003      	movs	r0, #3
 800171c:	f7ff fe67 	bl	80013ee <BME280_SetMode>
}
 8001720:	bd08      	pop	{r3, pc}
	...

08001724 <display_Init>:
void display_seting_time_screen (void);
void display_seting_GPS_screen (void);

/* Private user code ---------------------------------------------------------*/
void display_Init(void)
{
 8001724:	b508      	push	{r3, lr}
	ssd1306_Init();
 8001726:	f001 fe9f 	bl	8003468 <ssd1306_Init>
	page_properties.page_list = page_start;
 800172a:	4b04      	ldr	r3, [pc, #16]	; (800173c <display_Init+0x18>)
 800172c:	2200      	movs	r2, #0
 800172e:	701a      	strb	r2, [r3, #0]
	page_properties.line = line_0;
 8001730:	705a      	strb	r2, [r3, #1]
	osDelay(1000);
 8001732:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001736:	f005 fb17 	bl	8006d68 <osDelay>

}
 800173a:	bd08      	pop	{r3, pc}
 800173c:	200002a4 	.word	0x200002a4

08001740 <display_start_screen>:
	ssd1306_UpdateScreen();

}

void display_start_screen (void)
{
 8001740:	b570      	push	{r4, r5, r6, lr}
 8001742:	b084      	sub	sp, #16
	ssd1306_Fill(Black);
 8001744:	2000      	movs	r0, #0
 8001746:	f001 fd67 	bl	8003218 <ssd1306_Fill>
	ssd1306_SetCursor(2,0);
 800174a:	2100      	movs	r1, #0
 800174c:	2002      	movs	r0, #2
 800174e:	f001 fe27 	bl	80033a0 <ssd1306_SetCursor>
	sprintf((char*)Message,	"%02d:%02d:%02d %02d.%02d.%02d   ", timedata.hour,
																timedata.min,
 8001752:	4a35      	ldr	r2, [pc, #212]	; (8001828 <display_start_screen+0xe8>)
	sprintf((char*)Message,	"%02d:%02d:%02d %02d.%02d.%02d   ", timedata.hour,
 8001754:	4d35      	ldr	r5, [pc, #212]	; (800182c <display_start_screen+0xec>)
																timedata.sec,
																timedata.date,
																timedata.month,
																timedata.year - 2000);
 8001756:	88d3      	ldrh	r3, [r2, #6]
	sprintf((char*)Message,	"%02d:%02d:%02d %02d.%02d.%02d   ", timedata.hour,
 8001758:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 800175c:	9303      	str	r3, [sp, #12]
 800175e:	7913      	ldrb	r3, [r2, #4]
 8001760:	9302      	str	r3, [sp, #8]
 8001762:	78d3      	ldrb	r3, [r2, #3]
 8001764:	9301      	str	r3, [sp, #4]
 8001766:	7813      	ldrb	r3, [r2, #0]
 8001768:	9300      	str	r3, [sp, #0]
 800176a:	7853      	ldrb	r3, [r2, #1]
 800176c:	7892      	ldrb	r2, [r2, #2]
 800176e:	4930      	ldr	r1, [pc, #192]	; (8001830 <display_start_screen+0xf0>)
 8001770:	4628      	mov	r0, r5
 8001772:	f007 ff1f 	bl	80095b4 <siprintf>
	ssd1306_WriteString((char*)Message, Font_7x10, White);
 8001776:	4c2f      	ldr	r4, [pc, #188]	; (8001834 <display_start_screen+0xf4>)
 8001778:	2301      	movs	r3, #1
 800177a:	e894 0006 	ldmia.w	r4, {r1, r2}
 800177e:	4628      	mov	r0, r5
 8001780:	f001 fdf4 	bl	800336c <ssd1306_WriteString>
	//ssd1306_Line(2, 17, 24, 17, White);

	ssd1306_SetCursor(2, 12);
 8001784:	210c      	movs	r1, #12
 8001786:	2002      	movs	r0, #2
 8001788:	f001 fe0a 	bl	80033a0 <ssd1306_SetCursor>
	sprintf((char*)Message,	"T= %.2fC      ", BME280_sensor.temperature);
 800178c:	4e2a      	ldr	r6, [pc, #168]	; (8001838 <display_start_screen+0xf8>)
 800178e:	6830      	ldr	r0, [r6, #0]
 8001790:	f7fe fe54 	bl	800043c <__aeabi_f2d>
 8001794:	4602      	mov	r2, r0
 8001796:	460b      	mov	r3, r1
 8001798:	4928      	ldr	r1, [pc, #160]	; (800183c <display_start_screen+0xfc>)
 800179a:	4628      	mov	r0, r5
 800179c:	f007 ff0a 	bl	80095b4 <siprintf>
	ssd1306_WriteString((char*)Message, Font_7x10, White);
 80017a0:	2301      	movs	r3, #1
 80017a2:	e894 0006 	ldmia.w	r4, {r1, r2}
 80017a6:	4628      	mov	r0, r5
 80017a8:	f001 fde0 	bl	800336c <ssd1306_WriteString>
	ssd1306_SetCursor(2, 24);
 80017ac:	2118      	movs	r1, #24
 80017ae:	2002      	movs	r0, #2
 80017b0:	f001 fdf6 	bl	80033a0 <ssd1306_SetCursor>

	sprintf((char*)Message,	"P= %.2fkPa      ", BME280_sensor.pressure/1000);
 80017b4:	4922      	ldr	r1, [pc, #136]	; (8001840 <display_start_screen+0x100>)
 80017b6:	6870      	ldr	r0, [r6, #4]
 80017b8:	f7ff fba2 	bl	8000f00 <__aeabi_fdiv>
 80017bc:	f7fe fe3e 	bl	800043c <__aeabi_f2d>
 80017c0:	4602      	mov	r2, r0
 80017c2:	460b      	mov	r3, r1
 80017c4:	491f      	ldr	r1, [pc, #124]	; (8001844 <display_start_screen+0x104>)
 80017c6:	4628      	mov	r0, r5
 80017c8:	f007 fef4 	bl	80095b4 <siprintf>
	ssd1306_WriteString((char*)Message, Font_7x10, White);
 80017cc:	2301      	movs	r3, #1
 80017ce:	e894 0006 	ldmia.w	r4, {r1, r2}
 80017d2:	4628      	mov	r0, r5
 80017d4:	f001 fdca 	bl	800336c <ssd1306_WriteString>
	ssd1306_SetCursor(2, 36);
 80017d8:	2124      	movs	r1, #36	; 0x24
 80017da:	2002      	movs	r0, #2
 80017dc:	f001 fde0 	bl	80033a0 <ssd1306_SetCursor>
	sprintf((char*)Message,	"K= %02d %02d %02d     ", GpsState.Hour, GpsState.Minute, GpsState.Second);
 80017e0:	4a19      	ldr	r2, [pc, #100]	; (8001848 <display_start_screen+0x108>)
 80017e2:	f892 3189 	ldrb.w	r3, [r2, #393]	; 0x189
 80017e6:	9300      	str	r3, [sp, #0]
 80017e8:	f892 3188 	ldrb.w	r3, [r2, #392]	; 0x188
 80017ec:	f892 2187 	ldrb.w	r2, [r2, #391]	; 0x187
 80017f0:	4916      	ldr	r1, [pc, #88]	; (800184c <display_start_screen+0x10c>)
 80017f2:	4628      	mov	r0, r5
 80017f4:	f007 fede 	bl	80095b4 <siprintf>
	ssd1306_WriteString((char*)Message, Font_7x10, White);
 80017f8:	2301      	movs	r3, #1
 80017fa:	e894 0006 	ldmia.w	r4, {r1, r2}
 80017fe:	4628      	mov	r0, r5
 8001800:	f001 fdb4 	bl	800336c <ssd1306_WriteString>
	ssd1306_SetCursor(2, 48);
 8001804:	2130      	movs	r1, #48	; 0x30
 8001806:	2002      	movs	r0, #2
 8001808:	f001 fdca 	bl	80033a0 <ssd1306_SetCursor>
	sprintf((char*)Message,	"E= %02d    ", bufttttt);
 800180c:	4e10      	ldr	r6, [pc, #64]	; (8001850 <display_start_screen+0x110>)
 800180e:	4632      	mov	r2, r6
 8001810:	4910      	ldr	r1, [pc, #64]	; (8001854 <display_start_screen+0x114>)
 8001812:	4628      	mov	r0, r5
 8001814:	f007 fece 	bl	80095b4 <siprintf>
	ssd1306_WriteString((char*)bufttttt, Font_7x10, White);
 8001818:	2301      	movs	r3, #1
 800181a:	e894 0006 	ldmia.w	r4, {r1, r2}
 800181e:	4630      	mov	r0, r6
 8001820:	f001 fda4 	bl	800336c <ssd1306_WriteString>
	//page_list = page_start;

}
 8001824:	b004      	add	sp, #16
 8001826:	bd70      	pop	{r4, r5, r6, pc}
 8001828:	200005e8 	.word	0x200005e8
 800182c:	20000224 	.word	0x20000224
 8001830:	0800c29c 	.word	0x0800c29c
 8001834:	20000004 	.word	0x20000004
 8001838:	200005f0 	.word	0x200005f0
 800183c:	0800c2c0 	.word	0x0800c2c0
 8001840:	447a0000 	.word	0x447a0000
 8001844:	0800c2d0 	.word	0x0800c2d0
 8001848:	20000768 	.word	0x20000768
 800184c:	0800c2e4 	.word	0x0800c2e4
 8001850:	20000264 	.word	0x20000264
 8001854:	0800c2fc 	.word	0x0800c2fc

08001858 <display_menu_screen>:

void display_menu_screen (void)
{
 8001858:	b538      	push	{r3, r4, r5, lr}
	ssd1306_Fill(Black);
 800185a:	2000      	movs	r0, #0
 800185c:	f001 fcdc 	bl	8003218 <ssd1306_Fill>

	ssd1306_SetCursor(2, 0);
 8001860:	2100      	movs	r1, #0
 8001862:	2002      	movs	r0, #2
 8001864:	f001 fd9c 	bl	80033a0 <ssd1306_SetCursor>
	sprintf((char*)Message,	"Menu");
 8001868:	4c23      	ldr	r4, [pc, #140]	; (80018f8 <display_menu_screen+0xa0>)
 800186a:	4b24      	ldr	r3, [pc, #144]	; (80018fc <display_menu_screen+0xa4>)
 800186c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001870:	6020      	str	r0, [r4, #0]
 8001872:	7121      	strb	r1, [r4, #4]
	ssd1306_WriteString((char*)Message, Font_7x10, White);
 8001874:	4d22      	ldr	r5, [pc, #136]	; (8001900 <display_menu_screen+0xa8>)
 8001876:	2301      	movs	r3, #1
 8001878:	e895 0006 	ldmia.w	r5, {r1, r2}
 800187c:	4620      	mov	r0, r4
 800187e:	f001 fd75 	bl	800336c <ssd1306_WriteString>

//if(Enc_Counter%2 == 0)
	ssd1306_SetCursor(10, 24);
 8001882:	2118      	movs	r1, #24
 8001884:	200a      	movs	r0, #10
 8001886:	f001 fd8b 	bl	80033a0 <ssd1306_SetCursor>
	sprintf((char*)Message,	"Setings");
 800188a:	4b1e      	ldr	r3, [pc, #120]	; (8001904 <display_menu_screen+0xac>)
 800188c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001890:	e884 0003 	stmia.w	r4, {r0, r1}
	ssd1306_WriteString((char*)Message, Font_7x10, White);
 8001894:	2301      	movs	r3, #1
 8001896:	e895 0006 	ldmia.w	r5, {r1, r2}
 800189a:	4620      	mov	r0, r4
 800189c:	f001 fd66 	bl	800336c <ssd1306_WriteString>
	ssd1306_SetCursor(10, 36);
 80018a0:	2124      	movs	r1, #36	; 0x24
 80018a2:	200a      	movs	r0, #10
 80018a4:	f001 fd7c 	bl	80033a0 <ssd1306_SetCursor>
	sprintf((char*)Message,	"Test ");
 80018a8:	4b17      	ldr	r3, [pc, #92]	; (8001908 <display_menu_screen+0xb0>)
 80018aa:	e893 0003 	ldmia.w	r3, {r0, r1}
 80018ae:	6020      	str	r0, [r4, #0]
 80018b0:	80a1      	strh	r1, [r4, #4]
	ssd1306_WriteString((char*)Message, Font_7x10, White);
 80018b2:	2301      	movs	r3, #1
 80018b4:	e895 0006 	ldmia.w	r5, {r1, r2}
 80018b8:	4620      	mov	r0, r4
 80018ba:	f001 fd57 	bl	800336c <ssd1306_WriteString>

	switch(Enc_Counter%2)
 80018be:	4b13      	ldr	r3, [pc, #76]	; (800190c <display_menu_screen+0xb4>)
 80018c0:	881b      	ldrh	r3, [r3, #0]
 80018c2:	f013 0f01 	tst.w	r3, #1
 80018c6:	d007      	beq.n	80018d8 <display_menu_screen+0x80>
	{
		case 0: ssd1306_SetCursor(2, 24); page_properties.line=line_0; break;
		case 1: ssd1306_SetCursor(2, 36); page_properties.line=line_1;break;
 80018c8:	2124      	movs	r1, #36	; 0x24
 80018ca:	2002      	movs	r0, #2
 80018cc:	f001 fd68 	bl	80033a0 <ssd1306_SetCursor>
 80018d0:	4b0f      	ldr	r3, [pc, #60]	; (8001910 <display_menu_screen+0xb8>)
 80018d2:	2201      	movs	r2, #1
 80018d4:	705a      	strb	r2, [r3, #1]
 80018d6:	e006      	b.n	80018e6 <display_menu_screen+0x8e>
		case 0: ssd1306_SetCursor(2, 24); page_properties.line=line_0; break;
 80018d8:	2118      	movs	r1, #24
 80018da:	2002      	movs	r0, #2
 80018dc:	f001 fd60 	bl	80033a0 <ssd1306_SetCursor>
 80018e0:	4b0b      	ldr	r3, [pc, #44]	; (8001910 <display_menu_screen+0xb8>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	705a      	strb	r2, [r3, #1]

		default: break;
	}
	sprintf((char*)Message,	"*");
 80018e6:	4804      	ldr	r0, [pc, #16]	; (80018f8 <display_menu_screen+0xa0>)
 80018e8:	232a      	movs	r3, #42	; 0x2a
 80018ea:	8003      	strh	r3, [r0, #0]
	ssd1306_WriteString((char*)Message, Font_7x10, White);
 80018ec:	4a04      	ldr	r2, [pc, #16]	; (8001900 <display_menu_screen+0xa8>)
 80018ee:	2301      	movs	r3, #1
 80018f0:	ca06      	ldmia	r2, {r1, r2}
 80018f2:	f001 fd3b 	bl	800336c <ssd1306_WriteString>


}
 80018f6:	bd38      	pop	{r3, r4, r5, pc}
 80018f8:	20000224 	.word	0x20000224
 80018fc:	0800c308 	.word	0x0800c308
 8001900:	20000004 	.word	0x20000004
 8001904:	0800c310 	.word	0x0800c310
 8001908:	0800c318 	.word	0x0800c318
 800190c:	200002a6 	.word	0x200002a6
 8001910:	200002a4 	.word	0x200002a4

08001914 <display_setings_screen>:


void display_setings_screen (void)
{
 8001914:	b538      	push	{r3, r4, r5, lr}
	ssd1306_Fill(Black);
 8001916:	2000      	movs	r0, #0
 8001918:	f001 fc7e 	bl	8003218 <ssd1306_Fill>

	ssd1306_SetCursor(2, 0);
 800191c:	2100      	movs	r1, #0
 800191e:	2002      	movs	r0, #2
 8001920:	f001 fd3e 	bl	80033a0 <ssd1306_SetCursor>
	sprintf((char*)Message,	"Setings");
 8001924:	4c34      	ldr	r4, [pc, #208]	; (80019f8 <display_setings_screen+0xe4>)
 8001926:	4b35      	ldr	r3, [pc, #212]	; (80019fc <display_setings_screen+0xe8>)
 8001928:	e893 0003 	ldmia.w	r3, {r0, r1}
 800192c:	e884 0003 	stmia.w	r4, {r0, r1}
	ssd1306_WriteString((char*)Message, Font_7x10, White);
 8001930:	4d33      	ldr	r5, [pc, #204]	; (8001a00 <display_setings_screen+0xec>)
 8001932:	2301      	movs	r3, #1
 8001934:	e895 0006 	ldmia.w	r5, {r1, r2}
 8001938:	4620      	mov	r0, r4
 800193a:	f001 fd17 	bl	800336c <ssd1306_WriteString>

//if(Enc_Counter%2 == 0)
	ssd1306_SetCursor(10, 14);
 800193e:	210e      	movs	r1, #14
 8001940:	200a      	movs	r0, #10
 8001942:	f001 fd2d 	bl	80033a0 <ssd1306_SetCursor>
	sprintf((char*)Message,	"Date");
 8001946:	4b2f      	ldr	r3, [pc, #188]	; (8001a04 <display_setings_screen+0xf0>)
 8001948:	e893 0003 	ldmia.w	r3, {r0, r1}
 800194c:	6020      	str	r0, [r4, #0]
 800194e:	7121      	strb	r1, [r4, #4]
	ssd1306_WriteString((char*)Message, Font_7x10, White);
 8001950:	2301      	movs	r3, #1
 8001952:	e895 0006 	ldmia.w	r5, {r1, r2}
 8001956:	4620      	mov	r0, r4
 8001958:	f001 fd08 	bl	800336c <ssd1306_WriteString>
	ssd1306_SetCursor(10, 26);
 800195c:	211a      	movs	r1, #26
 800195e:	200a      	movs	r0, #10
 8001960:	f001 fd1e 	bl	80033a0 <ssd1306_SetCursor>
	sprintf((char*)Message,	"Time");
 8001964:	4b28      	ldr	r3, [pc, #160]	; (8001a08 <display_setings_screen+0xf4>)
 8001966:	e893 0003 	ldmia.w	r3, {r0, r1}
 800196a:	6020      	str	r0, [r4, #0]
 800196c:	7121      	strb	r1, [r4, #4]
	ssd1306_WriteString((char*)Message, Font_7x10, White);
 800196e:	2301      	movs	r3, #1
 8001970:	e895 0006 	ldmia.w	r5, {r1, r2}
 8001974:	4620      	mov	r0, r4
 8001976:	f001 fcf9 	bl	800336c <ssd1306_WriteString>
	ssd1306_SetCursor(10, 38);
 800197a:	2126      	movs	r1, #38	; 0x26
 800197c:	200a      	movs	r0, #10
 800197e:	f001 fd0f 	bl	80033a0 <ssd1306_SetCursor>
	sprintf((char*)Message,	"Synch GPS");
 8001982:	4a22      	ldr	r2, [pc, #136]	; (8001a0c <display_setings_screen+0xf8>)
 8001984:	4623      	mov	r3, r4
 8001986:	ca07      	ldmia	r2, {r0, r1, r2}
 8001988:	c303      	stmia	r3!, {r0, r1}
 800198a:	801a      	strh	r2, [r3, #0]
	ssd1306_WriteString((char*)Message, Font_7x10, White);
 800198c:	2301      	movs	r3, #1
 800198e:	e895 0006 	ldmia.w	r5, {r1, r2}
 8001992:	4620      	mov	r0, r4
 8001994:	f001 fcea 	bl	800336c <ssd1306_WriteString>

	switch(Enc_Counter%3)
 8001998:	4b1d      	ldr	r3, [pc, #116]	; (8001a10 <display_setings_screen+0xfc>)
 800199a:	881b      	ldrh	r3, [r3, #0]
 800199c:	4a1d      	ldr	r2, [pc, #116]	; (8001a14 <display_setings_screen+0x100>)
 800199e:	fba2 1203 	umull	r1, r2, r2, r3
 80019a2:	0852      	lsrs	r2, r2, #1
 80019a4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80019a8:	1a9b      	subs	r3, r3, r2
 80019aa:	b29b      	uxth	r3, r3
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d013      	beq.n	80019d8 <display_setings_screen+0xc4>
 80019b0:	2b02      	cmp	r3, #2
 80019b2:	d019      	beq.n	80019e8 <display_setings_screen+0xd4>
 80019b4:	b143      	cbz	r3, 80019c8 <display_setings_screen+0xb4>
		case 1: ssd1306_SetCursor(2, 26); page_properties.line=line_1;break;
		case 2: ssd1306_SetCursor(2, 38); page_properties.line=line_2;break;

		default: break;
	}
	sprintf((char*)Message,	"*");
 80019b6:	4810      	ldr	r0, [pc, #64]	; (80019f8 <display_setings_screen+0xe4>)
 80019b8:	232a      	movs	r3, #42	; 0x2a
 80019ba:	8003      	strh	r3, [r0, #0]
	ssd1306_WriteString((char*)Message, Font_7x10, White);
 80019bc:	4a10      	ldr	r2, [pc, #64]	; (8001a00 <display_setings_screen+0xec>)
 80019be:	2301      	movs	r3, #1
 80019c0:	ca06      	ldmia	r2, {r1, r2}
 80019c2:	f001 fcd3 	bl	800336c <ssd1306_WriteString>

}
 80019c6:	bd38      	pop	{r3, r4, r5, pc}
		case 0: ssd1306_SetCursor(2, 14); page_properties.line=line_0; break;
 80019c8:	210e      	movs	r1, #14
 80019ca:	2002      	movs	r0, #2
 80019cc:	f001 fce8 	bl	80033a0 <ssd1306_SetCursor>
 80019d0:	4b11      	ldr	r3, [pc, #68]	; (8001a18 <display_setings_screen+0x104>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	705a      	strb	r2, [r3, #1]
 80019d6:	e7ee      	b.n	80019b6 <display_setings_screen+0xa2>
		case 1: ssd1306_SetCursor(2, 26); page_properties.line=line_1;break;
 80019d8:	211a      	movs	r1, #26
 80019da:	2002      	movs	r0, #2
 80019dc:	f001 fce0 	bl	80033a0 <ssd1306_SetCursor>
 80019e0:	4b0d      	ldr	r3, [pc, #52]	; (8001a18 <display_setings_screen+0x104>)
 80019e2:	2201      	movs	r2, #1
 80019e4:	705a      	strb	r2, [r3, #1]
 80019e6:	e7e6      	b.n	80019b6 <display_setings_screen+0xa2>
		case 2: ssd1306_SetCursor(2, 38); page_properties.line=line_2;break;
 80019e8:	2126      	movs	r1, #38	; 0x26
 80019ea:	2002      	movs	r0, #2
 80019ec:	f001 fcd8 	bl	80033a0 <ssd1306_SetCursor>
 80019f0:	4b09      	ldr	r3, [pc, #36]	; (8001a18 <display_setings_screen+0x104>)
 80019f2:	2202      	movs	r2, #2
 80019f4:	705a      	strb	r2, [r3, #1]
 80019f6:	e7de      	b.n	80019b6 <display_setings_screen+0xa2>
 80019f8:	20000224 	.word	0x20000224
 80019fc:	0800c310 	.word	0x0800c310
 8001a00:	20000004 	.word	0x20000004
 8001a04:	0800c320 	.word	0x0800c320
 8001a08:	0800c328 	.word	0x0800c328
 8001a0c:	0800c330 	.word	0x0800c330
 8001a10:	200002a6 	.word	0x200002a6
 8001a14:	aaaaaaab 	.word	0xaaaaaaab
 8001a18:	200002a4 	.word	0x200002a4

08001a1c <display_seting_data_screen>:

void display_seting_data_screen (void)
{
 8001a1c:	b530      	push	{r4, r5, lr}
 8001a1e:	b083      	sub	sp, #12
	ssd1306_Fill(Black);
 8001a20:	2000      	movs	r0, #0
 8001a22:	f001 fbf9 	bl	8003218 <ssd1306_Fill>

	ssd1306_SetCursor(2, 0);
 8001a26:	2100      	movs	r1, #0
 8001a28:	2002      	movs	r0, #2
 8001a2a:	f001 fcb9 	bl	80033a0 <ssd1306_SetCursor>
	sprintf((char*)Message,	"Seting Date");
 8001a2e:	4c22      	ldr	r4, [pc, #136]	; (8001ab8 <display_seting_data_screen+0x9c>)
 8001a30:	4b22      	ldr	r3, [pc, #136]	; (8001abc <display_seting_data_screen+0xa0>)
 8001a32:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001a36:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	ssd1306_WriteString((char*)Message, Font_7x10, White);
 8001a3a:	4d21      	ldr	r5, [pc, #132]	; (8001ac0 <display_seting_data_screen+0xa4>)
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e895 0006 	ldmia.w	r5, {r1, r2}
 8001a42:	4620      	mov	r0, r4
 8001a44:	f001 fc92 	bl	800336c <ssd1306_WriteString>

	ssd1306_SetCursor(10, 26);
 8001a48:	211a      	movs	r1, #26
 8001a4a:	200a      	movs	r0, #10
 8001a4c:	f001 fca8 	bl	80033a0 <ssd1306_SetCursor>
	sprintf((char*)Message,	"%02d.%02d.%04d", temptimedata.date, temptimedata.month, temptimedata.year);
 8001a50:	4a1c      	ldr	r2, [pc, #112]	; (8001ac4 <display_seting_data_screen+0xa8>)
 8001a52:	88d3      	ldrh	r3, [r2, #6]
 8001a54:	9300      	str	r3, [sp, #0]
 8001a56:	7913      	ldrb	r3, [r2, #4]
 8001a58:	78d2      	ldrb	r2, [r2, #3]
 8001a5a:	491b      	ldr	r1, [pc, #108]	; (8001ac8 <display_seting_data_screen+0xac>)
 8001a5c:	4620      	mov	r0, r4
 8001a5e:	f007 fda9 	bl	80095b4 <siprintf>
	ssd1306_WriteString((char*)Message, Font_7x10, White);
 8001a62:	2301      	movs	r3, #1
 8001a64:	e895 0006 	ldmia.w	r5, {r1, r2}
 8001a68:	4620      	mov	r0, r4
 8001a6a:	f001 fc7f 	bl	800336c <ssd1306_WriteString>

	switch(page_properties.line)
 8001a6e:	4b17      	ldr	r3, [pc, #92]	; (8001acc <display_seting_data_screen+0xb0>)
 8001a70:	785b      	ldrb	r3, [r3, #1]
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d00d      	beq.n	8001a92 <display_seting_data_screen+0x76>
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d014      	beq.n	8001aa4 <display_seting_data_screen+0x88>
 8001a7a:	b10b      	cbz	r3, 8001a80 <display_seting_data_screen+0x64>
		case line_2: ssd1306_Line(52, 36, 80, 36, White); break;
		default: break;
	}


}
 8001a7c:	b003      	add	sp, #12
 8001a7e:	bd30      	pop	{r4, r5, pc}
		case line_0: ssd1306_Line(10, 36, 24, 36, White); break;
 8001a80:	2301      	movs	r3, #1
 8001a82:	9300      	str	r3, [sp, #0]
 8001a84:	2324      	movs	r3, #36	; 0x24
 8001a86:	2218      	movs	r2, #24
 8001a88:	4619      	mov	r1, r3
 8001a8a:	200a      	movs	r0, #10
 8001a8c:	f001 fc8e 	bl	80033ac <ssd1306_Line>
 8001a90:	e7f4      	b.n	8001a7c <display_seting_data_screen+0x60>
		case line_1: ssd1306_Line(31, 36, 45, 36, White); break;
 8001a92:	2301      	movs	r3, #1
 8001a94:	9300      	str	r3, [sp, #0]
 8001a96:	2324      	movs	r3, #36	; 0x24
 8001a98:	222d      	movs	r2, #45	; 0x2d
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	201f      	movs	r0, #31
 8001a9e:	f001 fc85 	bl	80033ac <ssd1306_Line>
 8001aa2:	e7eb      	b.n	8001a7c <display_seting_data_screen+0x60>
		case line_2: ssd1306_Line(52, 36, 80, 36, White); break;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	9300      	str	r3, [sp, #0]
 8001aa8:	2324      	movs	r3, #36	; 0x24
 8001aaa:	2250      	movs	r2, #80	; 0x50
 8001aac:	4619      	mov	r1, r3
 8001aae:	2034      	movs	r0, #52	; 0x34
 8001ab0:	f001 fc7c 	bl	80033ac <ssd1306_Line>
}
 8001ab4:	e7e2      	b.n	8001a7c <display_seting_data_screen+0x60>
 8001ab6:	bf00      	nop
 8001ab8:	20000224 	.word	0x20000224
 8001abc:	0800c33c 	.word	0x0800c33c
 8001ac0:	20000004 	.word	0x20000004
 8001ac4:	200005e0 	.word	0x200005e0
 8001ac8:	0800c348 	.word	0x0800c348
 8001acc:	200002a4 	.word	0x200002a4

08001ad0 <display_seting_time_screen>:
void display_seting_time_screen (void)
{
 8001ad0:	b530      	push	{r4, r5, lr}
 8001ad2:	b083      	sub	sp, #12
	ssd1306_Fill(Black);
 8001ad4:	2000      	movs	r0, #0
 8001ad6:	f001 fb9f 	bl	8003218 <ssd1306_Fill>

	ssd1306_SetCursor(2, 0);
 8001ada:	2100      	movs	r1, #0
 8001adc:	2002      	movs	r0, #2
 8001ade:	f001 fc5f 	bl	80033a0 <ssd1306_SetCursor>
	sprintf((char*)Message,	"Seting Time");
 8001ae2:	4c22      	ldr	r4, [pc, #136]	; (8001b6c <display_seting_time_screen+0x9c>)
 8001ae4:	4b22      	ldr	r3, [pc, #136]	; (8001b70 <display_seting_time_screen+0xa0>)
 8001ae6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001aea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	ssd1306_WriteString((char*)Message, Font_7x10, White);
 8001aee:	4d21      	ldr	r5, [pc, #132]	; (8001b74 <display_seting_time_screen+0xa4>)
 8001af0:	2301      	movs	r3, #1
 8001af2:	e895 0006 	ldmia.w	r5, {r1, r2}
 8001af6:	4620      	mov	r0, r4
 8001af8:	f001 fc38 	bl	800336c <ssd1306_WriteString>

	ssd1306_SetCursor(10, 26);
 8001afc:	211a      	movs	r1, #26
 8001afe:	200a      	movs	r0, #10
 8001b00:	f001 fc4e 	bl	80033a0 <ssd1306_SetCursor>
	sprintf((char*)Message,	"%02d:%02d:%02d", temptimedata.hour, temptimedata.min, temptimedata.sec);
 8001b04:	4a1c      	ldr	r2, [pc, #112]	; (8001b78 <display_seting_time_screen+0xa8>)
 8001b06:	7813      	ldrb	r3, [r2, #0]
 8001b08:	9300      	str	r3, [sp, #0]
 8001b0a:	7853      	ldrb	r3, [r2, #1]
 8001b0c:	7892      	ldrb	r2, [r2, #2]
 8001b0e:	491b      	ldr	r1, [pc, #108]	; (8001b7c <display_seting_time_screen+0xac>)
 8001b10:	4620      	mov	r0, r4
 8001b12:	f007 fd4f 	bl	80095b4 <siprintf>
	ssd1306_WriteString((char*)Message, Font_7x10, White);
 8001b16:	2301      	movs	r3, #1
 8001b18:	e895 0006 	ldmia.w	r5, {r1, r2}
 8001b1c:	4620      	mov	r0, r4
 8001b1e:	f001 fc25 	bl	800336c <ssd1306_WriteString>

	switch(page_properties.line)
 8001b22:	4b17      	ldr	r3, [pc, #92]	; (8001b80 <display_seting_time_screen+0xb0>)
 8001b24:	785b      	ldrb	r3, [r3, #1]
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d00d      	beq.n	8001b46 <display_seting_time_screen+0x76>
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	d014      	beq.n	8001b58 <display_seting_time_screen+0x88>
 8001b2e:	b10b      	cbz	r3, 8001b34 <display_seting_time_screen+0x64>
		case line_1: ssd1306_Line(31, 36, 45, 36, White); break;
		case line_2: ssd1306_Line(52, 36, 66, 36, White); break;
		default: break;
	}

}
 8001b30:	b003      	add	sp, #12
 8001b32:	bd30      	pop	{r4, r5, pc}
		case line_0: ssd1306_Line(10, 36, 24, 36, White); break;
 8001b34:	2301      	movs	r3, #1
 8001b36:	9300      	str	r3, [sp, #0]
 8001b38:	2324      	movs	r3, #36	; 0x24
 8001b3a:	2218      	movs	r2, #24
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	200a      	movs	r0, #10
 8001b40:	f001 fc34 	bl	80033ac <ssd1306_Line>
 8001b44:	e7f4      	b.n	8001b30 <display_seting_time_screen+0x60>
		case line_1: ssd1306_Line(31, 36, 45, 36, White); break;
 8001b46:	2301      	movs	r3, #1
 8001b48:	9300      	str	r3, [sp, #0]
 8001b4a:	2324      	movs	r3, #36	; 0x24
 8001b4c:	222d      	movs	r2, #45	; 0x2d
 8001b4e:	4619      	mov	r1, r3
 8001b50:	201f      	movs	r0, #31
 8001b52:	f001 fc2b 	bl	80033ac <ssd1306_Line>
 8001b56:	e7eb      	b.n	8001b30 <display_seting_time_screen+0x60>
		case line_2: ssd1306_Line(52, 36, 66, 36, White); break;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	9300      	str	r3, [sp, #0]
 8001b5c:	2324      	movs	r3, #36	; 0x24
 8001b5e:	2242      	movs	r2, #66	; 0x42
 8001b60:	4619      	mov	r1, r3
 8001b62:	2034      	movs	r0, #52	; 0x34
 8001b64:	f001 fc22 	bl	80033ac <ssd1306_Line>
}
 8001b68:	e7e2      	b.n	8001b30 <display_seting_time_screen+0x60>
 8001b6a:	bf00      	nop
 8001b6c:	20000224 	.word	0x20000224
 8001b70:	0800c358 	.word	0x0800c358
 8001b74:	20000004 	.word	0x20000004
 8001b78:	200005e0 	.word	0x200005e0
 8001b7c:	0800c364 	.word	0x0800c364
 8001b80:	200002a4 	.word	0x200002a4

08001b84 <display_seting_GPS_screen>:
void display_seting_GPS_screen (void)
{
 8001b84:	b510      	push	{r4, lr}
	ssd1306_Fill(Black);
 8001b86:	2000      	movs	r0, #0
 8001b88:	f001 fb46 	bl	8003218 <ssd1306_Fill>

	ssd1306_SetCursor(2, 0);
 8001b8c:	2100      	movs	r1, #0
 8001b8e:	2002      	movs	r0, #2
 8001b90:	f001 fc06 	bl	80033a0 <ssd1306_SetCursor>
	sprintf((char*)Message,	"Seting GPS");
 8001b94:	4c07      	ldr	r4, [pc, #28]	; (8001bb4 <display_seting_GPS_screen+0x30>)
 8001b96:	4a08      	ldr	r2, [pc, #32]	; (8001bb8 <display_seting_GPS_screen+0x34>)
 8001b98:	4623      	mov	r3, r4
 8001b9a:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b9c:	c303      	stmia	r3!, {r0, r1}
 8001b9e:	f823 2b02 	strh.w	r2, [r3], #2
 8001ba2:	0c12      	lsrs	r2, r2, #16
 8001ba4:	701a      	strb	r2, [r3, #0]
	ssd1306_WriteString((char*)Message, Font_7x10, White);
 8001ba6:	4a05      	ldr	r2, [pc, #20]	; (8001bbc <display_seting_GPS_screen+0x38>)
 8001ba8:	2301      	movs	r3, #1
 8001baa:	ca06      	ldmia	r2, {r1, r2}
 8001bac:	4620      	mov	r0, r4
 8001bae:	f001 fbdd 	bl	800336c <ssd1306_WriteString>


}
 8001bb2:	bd10      	pop	{r4, pc}
 8001bb4:	20000224 	.word	0x20000224
 8001bb8:	0800c374 	.word	0x0800c374
 8001bbc:	20000004 	.word	0x20000004

08001bc0 <display_handle>:
{
 8001bc0:	b508      	push	{r3, lr}
	switch (page_properties.page_list)
 8001bc2:	4b10      	ldr	r3, [pc, #64]	; (8001c04 <display_handle+0x44>)
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	2b05      	cmp	r3, #5
 8001bc8:	d818      	bhi.n	8001bfc <display_handle+0x3c>
 8001bca:	e8df f003 	tbb	[pc, r3]
 8001bce:	0803      	.short	0x0803
 8001bd0:	14110e0b 	.word	0x14110e0b
	  case page_start			: display_start_screen(); 	break;
 8001bd4:	f7ff fdb4 	bl	8001740 <display_start_screen>
	ssd1306_UpdateScreen();
 8001bd8:	f001 fb2c 	bl	8003234 <ssd1306_UpdateScreen>
}
 8001bdc:	bd08      	pop	{r3, pc}
	  case page_menu			: display_menu_screen();		break;
 8001bde:	f7ff fe3b 	bl	8001858 <display_menu_screen>
 8001be2:	e7f9      	b.n	8001bd8 <display_handle+0x18>
	  case page_settings		: display_setings_screen();	break;
 8001be4:	f7ff fe96 	bl	8001914 <display_setings_screen>
 8001be8:	e7f6      	b.n	8001bd8 <display_handle+0x18>
	  case page_setting_date	: display_seting_data_screen();	break;
 8001bea:	f7ff ff17 	bl	8001a1c <display_seting_data_screen>
 8001bee:	e7f3      	b.n	8001bd8 <display_handle+0x18>
	  case page_setting_time	: display_seting_time_screen();	break;
 8001bf0:	f7ff ff6e 	bl	8001ad0 <display_seting_time_screen>
 8001bf4:	e7f0      	b.n	8001bd8 <display_handle+0x18>
	  case page_setting_GPS		: display_seting_GPS_screen();	break;
 8001bf6:	f7ff ffc5 	bl	8001b84 <display_seting_GPS_screen>
 8001bfa:	e7ed      	b.n	8001bd8 <display_handle+0x18>
	  default:              	display_start_screen(); 	break;
 8001bfc:	f7ff fda0 	bl	8001740 <display_start_screen>
 8001c00:	e7ea      	b.n	8001bd8 <display_handle+0x18>
 8001c02:	bf00      	nop
 8001c04:	200002a4 	.word	0x200002a4

08001c08 <button_has_clicks>:

button_status_t button_has_clicks (button_t *_button)
{
  button_status_t status = BUTTON_NO;

  if (get_state(MANY_CLICKS) != 0)
 8001c08:	4b03      	ldr	r3, [pc, #12]	; (8001c18 <button_has_clicks+0x10>)
 8001c0a:	8898      	ldrh	r0, [r3, #4]
 8001c0c:	f080 0080 	eor.w	r0, r0, #128	; 0x80
  {
    status = BUTTON_YES;
  }

  return status;
}
 8001c10:	f3c0 10c0 	ubfx	r0, r0, #7, #1
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	200002a8 	.word	0x200002a8

08001c1c <button_is_holding>:

button_status_t button_is_holding (button_t *_button)
{
  button_status_t status = BUTTON_NO;

  if (get_state(HOLDING_PROCESS) != 0)
 8001c1c:	4b03      	ldr	r3, [pc, #12]	; (8001c2c <button_is_holding+0x10>)
 8001c1e:	8898      	ldrh	r0, [r3, #4]
 8001c20:	f080 0008 	eor.w	r0, r0, #8
  {
    status = BUTTON_YES;
  }

  return status;
}
 8001c24:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	200002a8 	.word	0x200002a8

08001c30 <button_is_click>:

button_status_t button_is_click (button_t *_button)
{
  button_status_t status = BUTTON_NO;

  if (get_state(CLICK) != 0)
 8001c30:	4b06      	ldr	r3, [pc, #24]	; (8001c4c <button_is_click+0x1c>)
 8001c32:	889b      	ldrh	r3, [r3, #4]
 8001c34:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001c38:	d005      	beq.n	8001c46 <button_is_click+0x16>
  {
    reset_state(CLICK);
 8001c3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001c3e:	4a03      	ldr	r2, [pc, #12]	; (8001c4c <button_is_click+0x1c>)
 8001c40:	8093      	strh	r3, [r2, #4]
    status = BUTTON_YES;
 8001c42:	2000      	movs	r0, #0
 8001c44:	4770      	bx	lr
  button_status_t status = BUTTON_NO;
 8001c46:	2001      	movs	r0, #1
  }

  return status;
}
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	200002a8 	.word	0x200002a8

08001c50 <encoder_init>:

  return status;
}

void encoder_init	(void)
{
 8001c50:	b510      	push	{r4, lr}
	HAL_TIM_Encoder_MspInit(&htim3);
 8001c52:	4c12      	ldr	r4, [pc, #72]	; (8001c9c <encoder_init+0x4c>)
 8001c54:	4620      	mov	r0, r4
 8001c56:	f000 fe8f 	bl	8002978 <HAL_TIM_Encoder_MspInit>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001c5a:	213c      	movs	r1, #60	; 0x3c
 8001c5c:	4620      	mov	r0, r4
 8001c5e:	f004 fc5a 	bl	8006516 <HAL_TIM_Encoder_Start>
	osDelay(100);
 8001c62:	2064      	movs	r0, #100	; 0x64
 8001c64:	f005 f880 	bl	8006d68 <osDelay>

	button._type             = BUTTON_NORM_OPEN;
 8001c68:	4b0d      	ldr	r3, [pc, #52]	; (8001ca0 <encoder_init+0x50>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	701a      	strb	r2, [r3, #0]
	button._pulling_mode     = BUTTON_PULL_UP;
 8001c6e:	705a      	strb	r2, [r3, #1]

	button._debounce_timeout = 30;
 8001c70:	211e      	movs	r1, #30
 8001c72:	71d9      	strb	r1, [r3, #7]
	button._click_timeout    = 400;
 8001c74:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8001c78:	8119      	strh	r1, [r3, #8]
	button._hold_timeout     = 500;
 8001c7a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001c7e:	8159      	strh	r1, [r3, #10]
	button._step_timeout     = 350;
 8001c80:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8001c84:	8199      	strh	r1, [r3, #12]
	button._idle_timeout     = 1000;
 8001c86:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001c8a:	81d9      	strh	r1, [r3, #14]
	button._timer            = global_tick;
 8001c8c:	4905      	ldr	r1, [pc, #20]	; (8001ca4 <encoder_init+0x54>)
 8001c8e:	6809      	ldr	r1, [r1, #0]
 8001c90:	6119      	str	r1, [r3, #16]

	button._state            = 0;
 8001c92:	709a      	strb	r2, [r3, #2]
	button._previous_state   = 0;
 8001c94:	70da      	strb	r2, [r3, #3]

	button._status           = 0;
 8001c96:	809a      	strh	r2, [r3, #4]

	button._clicks_counter   = 0;
 8001c98:	719a      	strb	r2, [r3, #6]

}
 8001c9a:	bd10      	pop	{r4, pc}
 8001c9c:	20000648 	.word	0x20000648
 8001ca0:	200002a8 	.word	0x200002a8
 8001ca4:	200002bc 	.word	0x200002bc

08001ca8 <button_timer_tick>:


void button_timer_tick (void)
{
	global_tick += 1U;
 8001ca8:	4a02      	ldr	r2, [pc, #8]	; (8001cb4 <button_timer_tick+0xc>)
 8001caa:	6813      	ldr	r3, [r2, #0]
 8001cac:	3301      	adds	r3, #1
 8001cae:	6013      	str	r3, [r2, #0]
}
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	200002bc 	.word	0x200002bc

08001cb8 <encoder_handling>:

void encoder_handling (void)
{
 8001cb8:	b410      	push	{r4}
	//Обработка энкодера
	Enc_Counter = (TIM3->CNT)/2;;
 8001cba:	4b58      	ldr	r3, [pc, #352]	; (8001e1c <encoder_handling+0x164>)
 8001cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cbe:	085b      	lsrs	r3, r3, #1
 8001cc0:	4a57      	ldr	r2, [pc, #348]	; (8001e20 <encoder_handling+0x168>)
 8001cc2:	8013      	strh	r3, [r2, #0]
	//Обработка кнопки
	if ((GPIOA->IDR & 0x20) != (uint32_t)GPIO_PIN_RESET)
 8001cc4:	4b57      	ldr	r3, [pc, #348]	; (8001e24 <encoder_handling+0x16c>)
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	f013 0f20 	tst.w	r3, #32
	{
		button._state = button._type ^ button._pulling_mode ^ 0x00U;
 8001ccc:	4a56      	ldr	r2, [pc, #344]	; (8001e28 <encoder_handling+0x170>)
 8001cce:	7813      	ldrb	r3, [r2, #0]
 8001cd0:	7852      	ldrb	r2, [r2, #1]
 8001cd2:	ea83 0302 	eor.w	r3, r3, r2
	}
	else
	{
		button._state = button._type ^ button._pulling_mode ^ 0x01U;
 8001cd6:	bf08      	it	eq
 8001cd8:	f083 0301 	eoreq.w	r3, r3, #1
 8001cdc:	4a52      	ldr	r2, [pc, #328]	; (8001e28 <encoder_handling+0x170>)
 8001cde:	7093      	strb	r3, [r2, #2]
	}


	// Обработка нажатия
	if ((button._state) && !(button._previous_state))
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d065      	beq.n	8001db0 <encoder_handling+0xf8>
 8001ce4:	78d2      	ldrb	r2, [r2, #3]
 8001ce6:	2a00      	cmp	r2, #0
 8001ce8:	d144      	bne.n	8001d74 <encoder_handling+0xbc>
	{
		if (get_state(DEBOUNCE_PROCESS) == 0U)
 8001cea:	4a4f      	ldr	r2, [pc, #316]	; (8001e28 <encoder_handling+0x170>)
 8001cec:	8892      	ldrh	r2, [r2, #4]
 8001cee:	f012 0f01 	tst.w	r2, #1
 8001cf2:	d107      	bne.n	8001d04 <encoder_handling+0x4c>
		{
		  set_state(DEBOUNCE_PROCESS);
 8001cf4:	494c      	ldr	r1, [pc, #304]	; (8001e28 <encoder_handling+0x170>)
 8001cf6:	f042 0201 	orr.w	r2, r2, #1
 8001cfa:	808a      	strh	r2, [r1, #4]
		  button._timer = global_tick;
 8001cfc:	4a4b      	ldr	r2, [pc, #300]	; (8001e2c <encoder_handling+0x174>)
 8001cfe:	6812      	ldr	r2, [r2, #0]
 8001d00:	610a      	str	r2, [r1, #16]
 8001d02:	e05d      	b.n	8001dc0 <encoder_handling+0x108>
		}
		else
		{
		  if (timeout_passed(_debounce_timeout))
 8001d04:	4949      	ldr	r1, [pc, #292]	; (8001e2c <encoder_handling+0x174>)
 8001d06:	6809      	ldr	r1, [r1, #0]
 8001d08:	4847      	ldr	r0, [pc, #284]	; (8001e28 <encoder_handling+0x170>)
 8001d0a:	6904      	ldr	r4, [r0, #16]
 8001d0c:	1b09      	subs	r1, r1, r4
 8001d0e:	79c0      	ldrb	r0, [r0, #7]
 8001d10:	4281      	cmp	r1, r0
 8001d12:	d355      	bcc.n	8001dc0 <encoder_handling+0x108>
		  {
			button._previous_state = 0x01U;
 8001d14:	4944      	ldr	r1, [pc, #272]	; (8001e28 <encoder_handling+0x170>)
 8001d16:	2001      	movs	r0, #1
 8001d18:	70c8      	strb	r0, [r1, #3]
			set_state(PRESSED);
			set_state(CLICK_PROCESS);
 8001d1a:	f042 0212 	orr.w	r2, r2, #18
 8001d1e:	808a      	strh	r2, [r1, #4]

	    button._timer = global_tick;
	  }

	  // Удержание
	  if ((button._previous_state) && (button._state))
 8001d20:	e02f      	b.n	8001d82 <encoder_handling+0xca>
	    button._previous_state = 0x00U;
 8001d22:	4a41      	ldr	r2, [pc, #260]	; (8001e28 <encoder_handling+0x170>)
 8001d24:	2000      	movs	r0, #0
 8001d26:	70d0      	strb	r0, [r2, #3]
	    if (get_state(CLICK_PROCESS) != 0U)
 8001d28:	f011 0f02 	tst.w	r1, #2
 8001d2c:	d007      	beq.n	8001d3e <encoder_handling+0x86>
	      reset_state(CLICK_PROCESS);
 8001d2e:	f021 0103 	bic.w	r1, r1, #3
 8001d32:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8001d36:	8091      	strh	r1, [r2, #4]
	      button._clicks_counter++;
 8001d38:	7991      	ldrb	r1, [r2, #6]
 8001d3a:	3101      	adds	r1, #1
 8001d3c:	7191      	strb	r1, [r2, #6]
	    reset_state(HOLDING_PROCESS);
 8001d3e:	493a      	ldr	r1, [pc, #232]	; (8001e28 <encoder_handling+0x170>)
 8001d40:	888a      	ldrh	r2, [r1, #4]
 8001d42:	f022 0218 	bic.w	r2, r2, #24
 8001d46:	f042 0220 	orr.w	r2, r2, #32
 8001d4a:	808a      	strh	r2, [r1, #4]
	    button._timer = global_tick;
 8001d4c:	4a37      	ldr	r2, [pc, #220]	; (8001e2c <encoder_handling+0x174>)
 8001d4e:	6812      	ldr	r2, [r2, #0]
 8001d50:	610a      	str	r2, [r1, #16]
 8001d52:	e035      	b.n	8001dc0 <encoder_handling+0x108>
	  }

	  // Удержание "с инкрементацией" (для пошагового изменения величин)
	  if (get_state(HOLDING_PROCESS) != 0U)
	  {
	    if (timeout_passed(_step_timeout))
 8001d54:	4935      	ldr	r1, [pc, #212]	; (8001e2c <encoder_handling+0x174>)
 8001d56:	6809      	ldr	r1, [r1, #0]
 8001d58:	4833      	ldr	r0, [pc, #204]	; (8001e28 <encoder_handling+0x170>)
 8001d5a:	6904      	ldr	r4, [r0, #16]
 8001d5c:	1b09      	subs	r1, r1, r4
 8001d5e:	8980      	ldrh	r0, [r0, #12]
 8001d60:	4281      	cmp	r1, r0
 8001d62:	d332      	bcc.n	8001dca <encoder_handling+0x112>
	    {
	      set_state(INCREMENTING_HOLD);
 8001d64:	4930      	ldr	r1, [pc, #192]	; (8001e28 <encoder_handling+0x170>)
 8001d66:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001d6a:	808a      	strh	r2, [r1, #4]
	      button._timer = global_tick;
 8001d6c:	4a2f      	ldr	r2, [pc, #188]	; (8001e2c <encoder_handling+0x174>)
 8001d6e:	6812      	ldr	r2, [r2, #0]
 8001d70:	610a      	str	r2, [r1, #16]
 8001d72:	e02a      	b.n	8001dca <encoder_handling+0x112>
		reset_state(DEBOUNCE_PROCESS);
 8001d74:	4a2c      	ldr	r2, [pc, #176]	; (8001e28 <encoder_handling+0x170>)
 8001d76:	8891      	ldrh	r1, [r2, #4]
 8001d78:	f021 0101 	bic.w	r1, r1, #1
 8001d7c:	8091      	strh	r1, [r2, #4]
	  if ((button._previous_state) && (button._state))
 8001d7e:	78d2      	ldrb	r2, [r2, #3]
 8001d80:	b1f2      	cbz	r2, 8001dc0 <encoder_handling+0x108>
	    if (timeout_passed(_hold_timeout))
 8001d82:	4a2a      	ldr	r2, [pc, #168]	; (8001e2c <encoder_handling+0x174>)
 8001d84:	6812      	ldr	r2, [r2, #0]
 8001d86:	4928      	ldr	r1, [pc, #160]	; (8001e28 <encoder_handling+0x170>)
 8001d88:	6908      	ldr	r0, [r1, #16]
 8001d8a:	1a12      	subs	r2, r2, r0
 8001d8c:	8949      	ldrh	r1, [r1, #10]
 8001d8e:	428a      	cmp	r2, r1
 8001d90:	d316      	bcc.n	8001dc0 <encoder_handling+0x108>
	      if (get_state(HOLDING_PROCESS) == 0U)
 8001d92:	4a25      	ldr	r2, [pc, #148]	; (8001e28 <encoder_handling+0x170>)
 8001d94:	8892      	ldrh	r2, [r2, #4]
 8001d96:	f012 0f08 	tst.w	r2, #8
 8001d9a:	d1db      	bne.n	8001d54 <encoder_handling+0x9c>
	        reset_state(CLICK_PROCESS);
 8001d9c:	4922      	ldr	r1, [pc, #136]	; (8001e28 <encoder_handling+0x170>)
 8001d9e:	f022 0202 	bic.w	r2, r2, #2
 8001da2:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 8001da6:	808a      	strh	r2, [r1, #4]
	        button._timer = global_tick;
 8001da8:	4a20      	ldr	r2, [pc, #128]	; (8001e2c <encoder_handling+0x174>)
 8001daa:	6812      	ldr	r2, [r2, #0]
 8001dac:	610a      	str	r2, [r1, #16]
 8001dae:	e007      	b.n	8001dc0 <encoder_handling+0x108>
		reset_state(DEBOUNCE_PROCESS);
 8001db0:	4a1d      	ldr	r2, [pc, #116]	; (8001e28 <encoder_handling+0x170>)
 8001db2:	8891      	ldrh	r1, [r2, #4]
 8001db4:	f021 0001 	bic.w	r0, r1, #1
 8001db8:	8090      	strh	r0, [r2, #4]
	  if (!(button._state) && (button._previous_state))
 8001dba:	78d2      	ldrb	r2, [r2, #3]
 8001dbc:	2a00      	cmp	r2, #0
 8001dbe:	d1b0      	bne.n	8001d22 <encoder_handling+0x6a>
	  if (get_state(HOLDING_PROCESS) != 0U)
 8001dc0:	4a19      	ldr	r2, [pc, #100]	; (8001e28 <encoder_handling+0x170>)
 8001dc2:	8892      	ldrh	r2, [r2, #4]
 8001dc4:	f012 0f08 	tst.w	r2, #8
 8001dc8:	d1c4      	bne.n	8001d54 <encoder_handling+0x9c>
	    }
	  }

	  // Многократное нажатие
	  if (timeout_passed(_click_timeout))
 8001dca:	4a18      	ldr	r2, [pc, #96]	; (8001e2c <encoder_handling+0x174>)
 8001dcc:	6812      	ldr	r2, [r2, #0]
 8001dce:	4816      	ldr	r0, [pc, #88]	; (8001e28 <encoder_handling+0x170>)
 8001dd0:	6901      	ldr	r1, [r0, #16]
 8001dd2:	1a52      	subs	r2, r2, r1
 8001dd4:	8900      	ldrh	r0, [r0, #8]
 8001dd6:	4282      	cmp	r2, r0
 8001dd8:	d308      	bcc.n	8001dec <encoder_handling+0x134>
	  {
	    if ((button._clicks_counter > 0U) && (button._state == 0U))
 8001dda:	4a13      	ldr	r2, [pc, #76]	; (8001e28 <encoder_handling+0x170>)
 8001ddc:	7992      	ldrb	r2, [r2, #6]
 8001dde:	b12a      	cbz	r2, 8001dec <encoder_handling+0x134>
 8001de0:	b923      	cbnz	r3, 8001dec <encoder_handling+0x134>
	    {
	      set_state(MANY_CLICKS);
 8001de2:	4a11      	ldr	r2, [pc, #68]	; (8001e28 <encoder_handling+0x170>)
 8001de4:	8893      	ldrh	r3, [r2, #4]
 8001de6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dea:	8093      	strh	r3, [r2, #4]
	    }
	  }

	  // Сброс многократного нажатия
	  if (get_state(CLICKS_COUNTER_RESET) != 0U)
 8001dec:	4b0e      	ldr	r3, [pc, #56]	; (8001e28 <encoder_handling+0x170>)
 8001dee:	889b      	ldrh	r3, [r3, #4]
 8001df0:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001df4:	d005      	beq.n	8001e02 <encoder_handling+0x14a>
	  {
	    reset_state(CLICKS_COUNTER_RESET);
	    reset_state(MANY_CLICKS);
 8001df6:	4a0c      	ldr	r2, [pc, #48]	; (8001e28 <encoder_handling+0x170>)
 8001df8:	f423 73c0 	bic.w	r3, r3, #384	; 0x180
 8001dfc:	8093      	strh	r3, [r2, #4]
	    button._clicks_counter = 0U;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	7193      	strb	r3, [r2, #6]
	  }

	  // Сброс необработанных состояний
	  if (timeout_passed(_idle_timeout))
 8001e02:	4b0a      	ldr	r3, [pc, #40]	; (8001e2c <encoder_handling+0x174>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	1a5b      	subs	r3, r3, r1
 8001e08:	4a07      	ldr	r2, [pc, #28]	; (8001e28 <encoder_handling+0x170>)
 8001e0a:	89d2      	ldrh	r2, [r2, #14]
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d303      	bcc.n	8001e18 <encoder_handling+0x160>
	  {
	    button._status = 0;
 8001e10:	4b05      	ldr	r3, [pc, #20]	; (8001e28 <encoder_handling+0x170>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	809a      	strh	r2, [r3, #4]
	    button._clicks_counter = 0U;
 8001e16:	719a      	strb	r2, [r3, #6]
	  }

}
 8001e18:	bc10      	pop	{r4}
 8001e1a:	4770      	bx	lr
 8001e1c:	40000400 	.word	0x40000400
 8001e20:	200002a6 	.word	0x200002a6
 8001e24:	40010800 	.word	0x40010800
 8001e28:	200002a8 	.word	0x200002a8
 8001e2c:	200002bc 	.word	0x200002bc

08001e30 <keyboard_handling>:

void keyboard_handling(void)
{
 8001e30:	b510      	push	{r4, lr}
	if (button_has_clicks (&button) == BUTTON_YES)
 8001e32:	4849      	ldr	r0, [pc, #292]	; (8001f58 <keyboard_handling+0x128>)
 8001e34:	f7ff fee8 	bl	8001c08 <button_has_clicks>
 8001e38:	b918      	cbnz	r0, 8001e42 <keyboard_handling+0x12>
  return _button->_clicks_counter;
 8001e3a:	4b47      	ldr	r3, [pc, #284]	; (8001f58 <keyboard_handling+0x128>)
	  {
	    switch (button_get_clicks_count (&button))
 8001e3c:	799b      	ldrb	r3, [r3, #6]
 8001e3e:	2b05      	cmp	r3, #5
 8001e40:	d046      	beq.n	8001ed0 <keyboard_handling+0xa0>
	      //case 1:   agregat_reset_alarm (); break;
	      case 5:   NVIC_SystemReset ();    break;
	      default:                          break;
	    }
	  }
	if(page_properties.page_list != page_start)
 8001e42:	4b46      	ldr	r3, [pc, #280]	; (8001f5c <keyboard_handling+0x12c>)
 8001e44:	781c      	ldrb	r4, [r3, #0]
 8001e46:	b144      	cbz	r4, 8001e5a <keyboard_handling+0x2a>
	{
		if (button_is_holding (&button) == BUTTON_YES)
 8001e48:	4843      	ldr	r0, [pc, #268]	; (8001f58 <keyboard_handling+0x128>)
 8001e4a:	f7ff fee7 	bl	8001c1c <button_is_holding>
 8001e4e:	2800      	cmp	r0, #0
 8001e50:	d172      	bne.n	8001f38 <keyboard_handling+0x108>
		{
			page_properties.page_list	= page_start;
 8001e52:	4b42      	ldr	r3, [pc, #264]	; (8001f5c <keyboard_handling+0x12c>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	701a      	strb	r2, [r3, #0]
			page_properties.line 		= line_0;
 8001e58:	705a      	strb	r2, [r3, #1]
		}
	}
	if(page_properties.page_list == page_start)
	{
		if (button_is_holding (&button) == BUTTON_YES)
 8001e5a:	483f      	ldr	r0, [pc, #252]	; (8001f58 <keyboard_handling+0x128>)
 8001e5c:	f7ff fede 	bl	8001c1c <button_is_holding>
 8001e60:	2800      	cmp	r0, #0
 8001e62:	d16f      	bne.n	8001f44 <keyboard_handling+0x114>
		{
			page_properties.page_list	= page_menu;
 8001e64:	4b3d      	ldr	r3, [pc, #244]	; (8001f5c <keyboard_handling+0x12c>)
 8001e66:	2201      	movs	r2, #1
 8001e68:	701a      	strb	r2, [r3, #0]
			page_properties.line 		= line_0;
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	705a      	strb	r2, [r3, #1]
		}
	}

	if(page_properties.page_list == page_menu)
	{
		if(button_is_click(&button) == BUTTON_YES)
 8001e6e:	483a      	ldr	r0, [pc, #232]	; (8001f58 <keyboard_handling+0x128>)
 8001e70:	f7ff fede 	bl	8001c30 <button_is_click>
		{
			switch(page_properties.line)
 8001e74:	4b39      	ldr	r3, [pc, #228]	; (8001f5c <keyboard_handling+0x12c>)
 8001e76:	785b      	ldrb	r3, [r3, #1]
 8001e78:	4318      	orrs	r0, r3
 8001e7a:	f010 0fff 	tst.w	r0, #255	; 0xff
 8001e7e:	d15d      	bne.n	8001f3c <keyboard_handling+0x10c>
			{
				case line_0: page_properties.page_list = page_settings; page_properties.line = line_0; break;
 8001e80:	4b36      	ldr	r3, [pc, #216]	; (8001f5c <keyboard_handling+0x12c>)
 8001e82:	2202      	movs	r2, #2
 8001e84:	701a      	strb	r2, [r3, #0]
 8001e86:	2200      	movs	r2, #0
 8001e88:	705a      	strb	r2, [r3, #1]
			}
		}
	}
	if(page_properties.page_list == page_settings)
	{
		if(button_is_click(&button) == BUTTON_YES)
 8001e8a:	4833      	ldr	r0, [pc, #204]	; (8001f58 <keyboard_handling+0x128>)
 8001e8c:	f7ff fed0 	bl	8001c30 <button_is_click>
 8001e90:	2800      	cmp	r0, #0
 8001e92:	d157      	bne.n	8001f44 <keyboard_handling+0x114>
		{
			switch(page_properties.line)
 8001e94:	4b31      	ldr	r3, [pc, #196]	; (8001f5c <keyboard_handling+0x12c>)
 8001e96:	785b      	ldrb	r3, [r3, #1]
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d045      	beq.n	8001f28 <keyboard_handling+0xf8>
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d045      	beq.n	8001f2c <keyboard_handling+0xfc>
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d14f      	bne.n	8001f44 <keyboard_handling+0x114>
			{
				case line_0: page_properties.page_list = page_setting_date; page_properties.line = line_0; break;
 8001ea4:	4b2d      	ldr	r3, [pc, #180]	; (8001f5c <keyboard_handling+0x12c>)
 8001ea6:	2203      	movs	r2, #3
 8001ea8:	701a      	strb	r2, [r3, #0]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	705a      	strb	r2, [r3, #1]
			}
		}
	}
	if(page_properties.page_list == page_setting_date)
	{
		if(button_is_click(&button) == BUTTON_YES)
 8001eae:	482a      	ldr	r0, [pc, #168]	; (8001f58 <keyboard_handling+0x128>)
 8001eb0:	f7ff febe 	bl	8001c30 <button_is_click>
 8001eb4:	2800      	cmp	r0, #0
 8001eb6:	d149      	bne.n	8001f4c <keyboard_handling+0x11c>
		{
			switch(page_properties.line)
 8001eb8:	4b28      	ldr	r3, [pc, #160]	; (8001f5c <keyboard_handling+0x12c>)
 8001eba:	785b      	ldrb	r3, [r3, #1]
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d014      	beq.n	8001eea <keyboard_handling+0xba>
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	d016      	beq.n	8001ef2 <keyboard_handling+0xc2>
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d141      	bne.n	8001f4c <keyboard_handling+0x11c>
			{
				case line_0: page_properties.line = line_1; break;
 8001ec8:	4b24      	ldr	r3, [pc, #144]	; (8001f5c <keyboard_handling+0x12c>)
 8001eca:	2201      	movs	r2, #1
 8001ecc:	705a      	strb	r2, [r3, #1]
 8001ece:	e03d      	b.n	8001f4c <keyboard_handling+0x11c>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001ed0:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001ed4:	4922      	ldr	r1, [pc, #136]	; (8001f60 <keyboard_handling+0x130>)
 8001ed6:	68ca      	ldr	r2, [r1, #12]
 8001ed8:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001edc:	4b21      	ldr	r3, [pc, #132]	; (8001f64 <keyboard_handling+0x134>)
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	60cb      	str	r3, [r1, #12]
 8001ee2:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001ee6:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8001ee8:	e7fd      	b.n	8001ee6 <keyboard_handling+0xb6>
				case line_1: page_properties.line = line_2; break;
 8001eea:	4b1c      	ldr	r3, [pc, #112]	; (8001f5c <keyboard_handling+0x12c>)
 8001eec:	2202      	movs	r2, #2
 8001eee:	705a      	strb	r2, [r3, #1]
 8001ef0:	e02c      	b.n	8001f4c <keyboard_handling+0x11c>
				case line_2: page_properties.line = line_3; break;
 8001ef2:	4b1a      	ldr	r3, [pc, #104]	; (8001f5c <keyboard_handling+0x12c>)
 8001ef4:	2203      	movs	r2, #3
 8001ef6:	705a      	strb	r2, [r3, #1]
 8001ef8:	e028      	b.n	8001f4c <keyboard_handling+0x11c>
			}
		}
	}
	if(page_properties.page_list == page_setting_time)
	{
		if(button_is_click(&button) == BUTTON_YES)
 8001efa:	4817      	ldr	r0, [pc, #92]	; (8001f58 <keyboard_handling+0x128>)
 8001efc:	f7ff fe98 	bl	8001c30 <button_is_click>
 8001f00:	bb40      	cbnz	r0, 8001f54 <keyboard_handling+0x124>
		{
			switch(page_properties.line)
 8001f02:	4b16      	ldr	r3, [pc, #88]	; (8001f5c <keyboard_handling+0x12c>)
 8001f04:	785b      	ldrb	r3, [r3, #1]
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d006      	beq.n	8001f18 <keyboard_handling+0xe8>
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d008      	beq.n	8001f20 <keyboard_handling+0xf0>
 8001f0e:	bb0b      	cbnz	r3, 8001f54 <keyboard_handling+0x124>
			{
				case line_0: page_properties.line = line_1; break;
 8001f10:	4b12      	ldr	r3, [pc, #72]	; (8001f5c <keyboard_handling+0x12c>)
 8001f12:	2201      	movs	r2, #1
 8001f14:	705a      	strb	r2, [r3, #1]
 8001f16:	e01d      	b.n	8001f54 <keyboard_handling+0x124>
				case line_1: page_properties.line = line_2; break;
 8001f18:	4b10      	ldr	r3, [pc, #64]	; (8001f5c <keyboard_handling+0x12c>)
 8001f1a:	2202      	movs	r2, #2
 8001f1c:	705a      	strb	r2, [r3, #1]
 8001f1e:	e019      	b.n	8001f54 <keyboard_handling+0x124>
				case line_2: page_properties.line = line_3; break;
 8001f20:	4b0e      	ldr	r3, [pc, #56]	; (8001f5c <keyboard_handling+0x12c>)
 8001f22:	2203      	movs	r2, #3
 8001f24:	705a      	strb	r2, [r3, #1]
				default:	break;
			}
		}
	}
}
 8001f26:	e015      	b.n	8001f54 <keyboard_handling+0x124>
			switch(page_properties.line)
 8001f28:	2204      	movs	r2, #4
 8001f2a:	e000      	b.n	8001f2e <keyboard_handling+0xfe>
 8001f2c:	2205      	movs	r2, #5
				case line_2: page_properties.page_list = page_setting_GPS; page_properties.line = line_0; break;
 8001f2e:	4b0b      	ldr	r3, [pc, #44]	; (8001f5c <keyboard_handling+0x12c>)
 8001f30:	701a      	strb	r2, [r3, #0]
 8001f32:	2200      	movs	r2, #0
 8001f34:	705a      	strb	r2, [r3, #1]
	if(page_properties.page_list == page_setting_date)
 8001f36:	e009      	b.n	8001f4c <keyboard_handling+0x11c>
	if(page_properties.page_list == page_menu)
 8001f38:	2c01      	cmp	r4, #1
 8001f3a:	d098      	beq.n	8001e6e <keyboard_handling+0x3e>
	if(page_properties.page_list == page_settings)
 8001f3c:	4b07      	ldr	r3, [pc, #28]	; (8001f5c <keyboard_handling+0x12c>)
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d0a2      	beq.n	8001e8a <keyboard_handling+0x5a>
	if(page_properties.page_list == page_setting_date)
 8001f44:	4b05      	ldr	r3, [pc, #20]	; (8001f5c <keyboard_handling+0x12c>)
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	2b03      	cmp	r3, #3
 8001f4a:	d0b0      	beq.n	8001eae <keyboard_handling+0x7e>
	if(page_properties.page_list == page_setting_time)
 8001f4c:	4b03      	ldr	r3, [pc, #12]	; (8001f5c <keyboard_handling+0x12c>)
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	2b04      	cmp	r3, #4
 8001f52:	d0d2      	beq.n	8001efa <keyboard_handling+0xca>
}
 8001f54:	bd10      	pop	{r4, pc}
 8001f56:	bf00      	nop
 8001f58:	200002a8 	.word	0x200002a8
 8001f5c:	200002a4 	.word	0x200002a4
 8001f60:	e000ed00 	.word	0xe000ed00
 8001f64:	05fa0004 	.word	0x05fa0004

08001f68 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001f68:	b508      	push	{r3, lr}
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001f6a:	2401      	movs	r4, #1
 8001f6c:	4620      	mov	r0, r4
 8001f6e:	f004 fefb 	bl	8006d68 <osDelay>
  for(;;)
 8001f72:	e7fb      	b.n	8001f6c <StartDefaultTask+0x4>

08001f74 <StartdispleyTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartdispleyTask */
void StartdispleyTask(void const * argument)
{
 8001f74:	b508      	push	{r3, lr}
  /* USER CODE BEGIN StartdispleyTask */
	display_Init();
 8001f76:	f7ff fbd5 	bl	8001724 <display_Init>
  /* Infinite loop */
	for(;;)
	{
		display_handle();
		osDelay(500);
 8001f7a:	f44f 74fa 	mov.w	r4, #500	; 0x1f4
		display_handle();
 8001f7e:	f7ff fe1f 	bl	8001bc0 <display_handle>
		osDelay(500);
 8001f82:	4620      	mov	r0, r4
 8001f84:	f004 fef0 	bl	8006d68 <osDelay>
	for(;;)
 8001f88:	e7f9      	b.n	8001f7e <StartdispleyTask+0xa>

08001f8a <StartencodetTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartencodetTask */
void StartencodetTask(void const * argument)
{
 8001f8a:	b508      	push	{r3, lr}
  /* USER CODE BEGIN StartencodetTask */
	encoder_init();
 8001f8c:	f7ff fe60 	bl	8001c50 <encoder_init>
  /* Infinite loop */
	for(;;)
	  {
		encoder_handling();
		keyboard_handling();
		osDelay(1);
 8001f90:	2401      	movs	r4, #1
		encoder_handling();
 8001f92:	f7ff fe91 	bl	8001cb8 <encoder_handling>
		keyboard_handling();
 8001f96:	f7ff ff4b 	bl	8001e30 <keyboard_handling>
		osDelay(1);
 8001f9a:	4620      	mov	r0, r4
 8001f9c:	f004 fee4 	bl	8006d68 <osDelay>
	for(;;)
 8001fa0:	e7f7      	b.n	8001f92 <StartencodetTask+0x8>
	...

08001fa4 <StartGPSTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGPSTask */
void StartGPSTask(void const * argument)
{
 8001fa4:	b500      	push	{lr}
 8001fa6:	b083      	sub	sp, #12
  /* USER CODE BEGIN StartGPSTask */
	sprintf((char*)Message, "T %02d:%02d:%02d", 12, 12, 12);
 8001fa8:	4e10      	ldr	r6, [pc, #64]	; (8001fec <StartGPSTask+0x48>)
 8001faa:	4d11      	ldr	r5, [pc, #68]	; (8001ff0 <StartGPSTask+0x4c>)
 8001fac:	220c      	movs	r2, #12
 8001fae:	9200      	str	r2, [sp, #0]
 8001fb0:	4613      	mov	r3, r2
 8001fb2:	4631      	mov	r1, r6
 8001fb4:	4628      	mov	r0, r5
 8001fb6:	f007 fafd 	bl	80095b4 <siprintf>
	NEO6_Init(&GpsState, &huart1);
 8001fba:	4c0e      	ldr	r4, [pc, #56]	; (8001ff4 <StartGPSTask+0x50>)
 8001fbc:	490e      	ldr	r1, [pc, #56]	; (8001ff8 <StartGPSTask+0x54>)
 8001fbe:	4620      	mov	r0, r4
 8001fc0:	f001 f8c8 	bl	8003154 <NEO6_Init>
	osDelay(1000);
 8001fc4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001fc8:	f004 fece 	bl	8006d68 <osDelay>
	sprintf((char*)Message, "T %02d:%02d:%02d", GpsState.Hour, GpsState.Minute, GpsState.Second);
 8001fcc:	f894 3189 	ldrb.w	r3, [r4, #393]	; 0x189
 8001fd0:	9300      	str	r3, [sp, #0]
 8001fd2:	f894 3188 	ldrb.w	r3, [r4, #392]	; 0x188
 8001fd6:	f894 2187 	ldrb.w	r2, [r4, #391]	; 0x187
 8001fda:	4631      	mov	r1, r6
 8001fdc:	4628      	mov	r0, r5
 8001fde:	f007 fae9 	bl	80095b4 <siprintf>
  /* Infinite loop */
  for(;;)
  {
//	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
	  NEO6_Task(&GpsState);
 8001fe2:	4620      	mov	r0, r4
 8001fe4:	f001 f8aa 	bl	800313c <NEO6_Task>
  for(;;)
 8001fe8:	e7fb      	b.n	8001fe2 <StartGPSTask+0x3e>
 8001fea:	bf00      	nop
 8001fec:	0800c380 	.word	0x0800c380
 8001ff0:	20000224 	.word	0x20000224
 8001ff4:	20000768 	.word	0x20000768
 8001ff8:	200006d0 	.word	0x200006d0

08001ffc <StartRTCTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRTCTask */
void StartRTCTask(void const * argument)
{
 8001ffc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN StartRTCTask */
	rtc_Init();
 8001ffe:	f000 fa05 	bl	800240c <rtc_Init>
  /* Infinite loop */
  for(;;)
  {
	rtc_handle();
	osDelay(100);
 8002002:	2464      	movs	r4, #100	; 0x64
	rtc_handle();
 8002004:	f000 fb5a 	bl	80026bc <rtc_handle>
	osDelay(100);
 8002008:	4620      	mov	r0, r4
 800200a:	f004 fead 	bl	8006d68 <osDelay>
  for(;;)
 800200e:	e7f9      	b.n	8002004 <StartRTCTask+0x8>

08002010 <StartUARTTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUARTTask */
void StartUARTTask(void const * argument)
{
 8002010:	b508      	push	{r3, lr}
  /* USER CODE BEGIN StartUARTTask */
  /* Infinite loop */
  for(;;)
  {
	  uart_pc_handle();
	  osDelay(100);
 8002012:	2464      	movs	r4, #100	; 0x64
	  uart_pc_handle();
 8002014:	f000 fce6 	bl	80029e4 <uart_pc_handle>
	  osDelay(100);
 8002018:	4620      	mov	r0, r4
 800201a:	f004 fea5 	bl	8006d68 <osDelay>
  for(;;)
 800201e:	e7f9      	b.n	8002014 <StartUARTTask+0x4>

08002020 <StartSensorTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSensorTask */
void StartSensorTask(void const * argument)
{
 8002020:	b508      	push	{r3, lr}
  /* USER CODE BEGIN StartSensorTask */
	sensors_Init();
 8002022:	f000 fb73 	bl	800270c <sensors_Init>
  /* Infinite loop */
  for(;;)
  {
	  sensors_Handle();
	  osDelay(1000);
 8002026:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
	  sensors_Handle();
 800202a:	f000 fb7b 	bl	8002724 <sensors_Handle>
	  osDelay(1000);
 800202e:	4620      	mov	r0, r4
 8002030:	f004 fe9a 	bl	8006d68 <osDelay>
  for(;;)
 8002034:	e7f9      	b.n	800202a <StartSensorTask+0xa>
	...

08002038 <vApplicationGetIdleTaskMemory>:
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002038:	4b03      	ldr	r3, [pc, #12]	; (8002048 <vApplicationGetIdleTaskMemory+0x10>)
 800203a:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800203c:	4b03      	ldr	r3, [pc, #12]	; (800204c <vApplicationGetIdleTaskMemory+0x14>)
 800203e:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002040:	2380      	movs	r3, #128	; 0x80
 8002042:	6013      	str	r3, [r2, #0]
}
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	200004dc 	.word	0x200004dc
 800204c:	200002dc 	.word	0x200002dc

08002050 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 8002050:	b510      	push	{r4, lr}
 8002052:	b0b2      	sub	sp, #200	; 0xc8
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8002054:	4c3f      	ldr	r4, [pc, #252]	; (8002154 <MX_FREERTOS_Init+0x104>)
 8002056:	f10d 0cac 	add.w	ip, sp, #172	; 0xac
 800205a:	46a6      	mov	lr, r4
 800205c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8002060:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8002064:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8002068:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800206c:	2100      	movs	r1, #0
 800206e:	a82b      	add	r0, sp, #172	; 0xac
 8002070:	f004 fe45 	bl	8006cfe <osThreadCreate>
 8002074:	4b38      	ldr	r3, [pc, #224]	; (8002158 <MX_FREERTOS_Init+0x108>)
 8002076:	6018      	str	r0, [r3, #0]
  osThreadDef(displeyTask, StartdispleyTask, osPriorityLow, 0, 512);
 8002078:	f10d 0c90 	add.w	ip, sp, #144	; 0x90
 800207c:	f104 0e1c 	add.w	lr, r4, #28
 8002080:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8002084:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8002088:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 800208c:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
  displeyTaskHandle = osThreadCreate(osThread(displeyTask), NULL);
 8002090:	2100      	movs	r1, #0
 8002092:	a824      	add	r0, sp, #144	; 0x90
 8002094:	f004 fe33 	bl	8006cfe <osThreadCreate>
 8002098:	4b30      	ldr	r3, [pc, #192]	; (800215c <MX_FREERTOS_Init+0x10c>)
 800209a:	6018      	str	r0, [r3, #0]
  osThreadDef(encodetTask, StartencodetTask, osPriorityLow, 0, 128);
 800209c:	f10d 0c74 	add.w	ip, sp, #116	; 0x74
 80020a0:	f104 0e38 	add.w	lr, r4, #56	; 0x38
 80020a4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80020a8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80020ac:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 80020b0:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
  encodetTaskHandle = osThreadCreate(osThread(encodetTask), NULL);
 80020b4:	2100      	movs	r1, #0
 80020b6:	a81d      	add	r0, sp, #116	; 0x74
 80020b8:	f004 fe21 	bl	8006cfe <osThreadCreate>
 80020bc:	4b28      	ldr	r3, [pc, #160]	; (8002160 <MX_FREERTOS_Init+0x110>)
 80020be:	6018      	str	r0, [r3, #0]
  osThreadDef(gpsTask, StartGPSTask, osPriorityLow, 0, 256);
 80020c0:	f10d 0c58 	add.w	ip, sp, #88	; 0x58
 80020c4:	f104 0e54 	add.w	lr, r4, #84	; 0x54
 80020c8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80020cc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80020d0:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 80020d4:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
  gpsTaskHandle = osThreadCreate(osThread(gpsTask), NULL);
 80020d8:	2100      	movs	r1, #0
 80020da:	a816      	add	r0, sp, #88	; 0x58
 80020dc:	f004 fe0f 	bl	8006cfe <osThreadCreate>
 80020e0:	4b20      	ldr	r3, [pc, #128]	; (8002164 <MX_FREERTOS_Init+0x114>)
 80020e2:	6018      	str	r0, [r3, #0]
  osThreadDef(rtcTask, StartRTCTask, osPriorityLow, 0, 128);
 80020e4:	f10d 0c3c 	add.w	ip, sp, #60	; 0x3c
 80020e8:	f104 0e70 	add.w	lr, r4, #112	; 0x70
 80020ec:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80020f0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80020f4:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 80020f8:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
  rtcTaskHandle = osThreadCreate(osThread(rtcTask), NULL);
 80020fc:	2100      	movs	r1, #0
 80020fe:	a80f      	add	r0, sp, #60	; 0x3c
 8002100:	f004 fdfd 	bl	8006cfe <osThreadCreate>
 8002104:	4b18      	ldr	r3, [pc, #96]	; (8002168 <MX_FREERTOS_Init+0x118>)
 8002106:	6018      	str	r0, [r3, #0]
  osThreadDef(UARTTask, StartUARTTask, osPriorityIdle, 0, 256);
 8002108:	f10d 0c20 	add.w	ip, sp, #32
 800210c:	f104 0e8c 	add.w	lr, r4, #140	; 0x8c
 8002110:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8002114:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8002118:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 800211c:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
  UARTTaskHandle = osThreadCreate(osThread(UARTTask), NULL);
 8002120:	2100      	movs	r1, #0
 8002122:	a808      	add	r0, sp, #32
 8002124:	f004 fdeb 	bl	8006cfe <osThreadCreate>
 8002128:	4b10      	ldr	r3, [pc, #64]	; (800216c <MX_FREERTOS_Init+0x11c>)
 800212a:	6018      	str	r0, [r3, #0]
  osThreadDef(sensorsTask, StartSensorTask, osPriorityIdle, 0, 128);
 800212c:	f10d 0e04 	add.w	lr, sp, #4
 8002130:	f104 0ca8 	add.w	ip, r4, #168	; 0xa8
 8002134:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8002138:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800213c:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8002140:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
  sensorsTaskHandle = osThreadCreate(osThread(sensorsTask), NULL);
 8002144:	2100      	movs	r1, #0
 8002146:	a801      	add	r0, sp, #4
 8002148:	f004 fdd9 	bl	8006cfe <osThreadCreate>
 800214c:	4b08      	ldr	r3, [pc, #32]	; (8002170 <MX_FREERTOS_Init+0x120>)
 800214e:	6018      	str	r0, [r3, #0]
}
 8002150:	b032      	add	sp, #200	; 0xc8
 8002152:	bd10      	pop	{r4, pc}
 8002154:	0800c1d8 	.word	0x0800c1d8
 8002158:	200002c4 	.word	0x200002c4
 800215c:	200002c8 	.word	0x200002c8
 8002160:	200002cc 	.word	0x200002cc
 8002164:	200002d0 	.word	0x200002d0
 8002168:	200002d4 	.word	0x200002d4
 800216c:	200002c0 	.word	0x200002c0
 8002170:	200002d8 	.word	0x200002d8

08002174 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002174:	b530      	push	{r4, r5, lr}
 8002176:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002178:	2400      	movs	r4, #0
 800217a:	9404      	str	r4, [sp, #16]
 800217c:	9405      	str	r4, [sp, #20]
 800217e:	9406      	str	r4, [sp, #24]
 8002180:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002182:	4b20      	ldr	r3, [pc, #128]	; (8002204 <MX_GPIO_Init+0x90>)
 8002184:	699a      	ldr	r2, [r3, #24]
 8002186:	f042 0210 	orr.w	r2, r2, #16
 800218a:	619a      	str	r2, [r3, #24]
 800218c:	699a      	ldr	r2, [r3, #24]
 800218e:	f002 0210 	and.w	r2, r2, #16
 8002192:	9200      	str	r2, [sp, #0]
 8002194:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002196:	699a      	ldr	r2, [r3, #24]
 8002198:	f042 0220 	orr.w	r2, r2, #32
 800219c:	619a      	str	r2, [r3, #24]
 800219e:	699a      	ldr	r2, [r3, #24]
 80021a0:	f002 0220 	and.w	r2, r2, #32
 80021a4:	9201      	str	r2, [sp, #4]
 80021a6:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021a8:	699a      	ldr	r2, [r3, #24]
 80021aa:	f042 0204 	orr.w	r2, r2, #4
 80021ae:	619a      	str	r2, [r3, #24]
 80021b0:	699a      	ldr	r2, [r3, #24]
 80021b2:	f002 0204 	and.w	r2, r2, #4
 80021b6:	9202      	str	r2, [sp, #8]
 80021b8:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021ba:	699a      	ldr	r2, [r3, #24]
 80021bc:	f042 0208 	orr.w	r2, r2, #8
 80021c0:	619a      	str	r2, [r3, #24]
 80021c2:	699b      	ldr	r3, [r3, #24]
 80021c4:	f003 0308 	and.w	r3, r3, #8
 80021c8:	9303      	str	r3, [sp, #12]
 80021ca:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80021cc:	4d0e      	ldr	r5, [pc, #56]	; (8002208 <MX_GPIO_Init+0x94>)
 80021ce:	4622      	mov	r2, r4
 80021d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80021d4:	4628      	mov	r0, r5
 80021d6:	f001 fbe5 	bl	80039a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80021da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021de:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021e0:	2301      	movs	r3, #1
 80021e2:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e4:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80021e6:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021e8:	a904      	add	r1, sp, #16
 80021ea:	4628      	mov	r0, r5
 80021ec:	f001 faa0 	bl	8003730 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80021f0:	2320      	movs	r3, #32
 80021f2:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021f4:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f6:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021f8:	a904      	add	r1, sp, #16
 80021fa:	4804      	ldr	r0, [pc, #16]	; (800220c <MX_GPIO_Init+0x98>)
 80021fc:	f001 fa98 	bl	8003730 <HAL_GPIO_Init>

}
 8002200:	b009      	add	sp, #36	; 0x24
 8002202:	bd30      	pop	{r4, r5, pc}
 8002204:	40021000 	.word	0x40021000
 8002208:	40011000 	.word	0x40011000
 800220c:	40010800 	.word	0x40010800

08002210 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002210:	b508      	push	{r3, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002212:	480b      	ldr	r0, [pc, #44]	; (8002240 <MX_I2C1_Init+0x30>)
 8002214:	4b0b      	ldr	r3, [pc, #44]	; (8002244 <MX_I2C1_Init+0x34>)
 8002216:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002218:	4b0b      	ldr	r3, [pc, #44]	; (8002248 <MX_I2C1_Init+0x38>)
 800221a:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800221c:	2300      	movs	r3, #0
 800221e:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002220:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002222:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002226:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002228:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800222a:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800222c:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800222e:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002230:	f001 fe3a 	bl	8003ea8 <HAL_I2C_Init>
 8002234:	b900      	cbnz	r0, 8002238 <MX_I2C1_Init+0x28>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002236:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002238:	f000 f8e6 	bl	8002408 <Error_Handler>
}
 800223c:	e7fb      	b.n	8002236 <MX_I2C1_Init+0x26>
 800223e:	bf00      	nop
 8002240:	20000530 	.word	0x20000530
 8002244:	40005400 	.word	0x40005400
 8002248:	00061a80 	.word	0x00061a80

0800224c <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800224c:	b508      	push	{r3, lr}
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800224e:	480b      	ldr	r0, [pc, #44]	; (800227c <MX_I2C2_Init+0x30>)
 8002250:	4b0b      	ldr	r3, [pc, #44]	; (8002280 <MX_I2C2_Init+0x34>)
 8002252:	6003      	str	r3, [r0, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8002254:	4b0b      	ldr	r3, [pc, #44]	; (8002284 <MX_I2C2_Init+0x38>)
 8002256:	6043      	str	r3, [r0, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002258:	2300      	movs	r3, #0
 800225a:	6083      	str	r3, [r0, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800225c:	60c3      	str	r3, [r0, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800225e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002262:	6102      	str	r2, [r0, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002264:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002266:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002268:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800226a:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800226c:	f001 fe1c 	bl	8003ea8 <HAL_I2C_Init>
 8002270:	b900      	cbnz	r0, 8002274 <MX_I2C2_Init+0x28>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002272:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002274:	f000 f8c8 	bl	8002408 <Error_Handler>
}
 8002278:	e7fb      	b.n	8002272 <MX_I2C2_Init+0x26>
 800227a:	bf00      	nop
 800227c:	20000584 	.word	0x20000584
 8002280:	40005800 	.word	0x40005800
 8002284:	000186a0 	.word	0x000186a0

08002288 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002288:	b510      	push	{r4, lr}
 800228a:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800228c:	2300      	movs	r3, #0
 800228e:	9304      	str	r3, [sp, #16]
 8002290:	9305      	str	r3, [sp, #20]
 8002292:	9306      	str	r3, [sp, #24]
 8002294:	9307      	str	r3, [sp, #28]
  if(i2cHandle->Instance==I2C1)
 8002296:	6803      	ldr	r3, [r0, #0]
 8002298:	4a2a      	ldr	r2, [pc, #168]	; (8002344 <HAL_I2C_MspInit+0xbc>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d004      	beq.n	80022a8 <HAL_I2C_MspInit+0x20>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
  else if(i2cHandle->Instance==I2C2)
 800229e:	4a2a      	ldr	r2, [pc, #168]	; (8002348 <HAL_I2C_MspInit+0xc0>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d02f      	beq.n	8002304 <HAL_I2C_MspInit+0x7c>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80022a4:	b008      	add	sp, #32
 80022a6:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022a8:	4c28      	ldr	r4, [pc, #160]	; (800234c <HAL_I2C_MspInit+0xc4>)
 80022aa:	69a3      	ldr	r3, [r4, #24]
 80022ac:	f043 0308 	orr.w	r3, r3, #8
 80022b0:	61a3      	str	r3, [r4, #24]
 80022b2:	69a3      	ldr	r3, [r4, #24]
 80022b4:	f003 0308 	and.w	r3, r3, #8
 80022b8:	9300      	str	r3, [sp, #0]
 80022ba:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80022bc:	23c0      	movs	r3, #192	; 0xc0
 80022be:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022c0:	2312      	movs	r3, #18
 80022c2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80022c4:	2303      	movs	r3, #3
 80022c6:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022c8:	a904      	add	r1, sp, #16
 80022ca:	4821      	ldr	r0, [pc, #132]	; (8002350 <HAL_I2C_MspInit+0xc8>)
 80022cc:	f001 fa30 	bl	8003730 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 80022d0:	69e3      	ldr	r3, [r4, #28]
 80022d2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80022d6:	61e3      	str	r3, [r4, #28]
 80022d8:	69e3      	ldr	r3, [r4, #28]
 80022da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022de:	9301      	str	r3, [sp, #4]
 80022e0:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 80022e2:	2200      	movs	r2, #0
 80022e4:	2105      	movs	r1, #5
 80022e6:	201f      	movs	r0, #31
 80022e8:	f001 f96c 	bl	80035c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80022ec:	201f      	movs	r0, #31
 80022ee:	f001 f99f 	bl	8003630 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 80022f2:	2200      	movs	r2, #0
 80022f4:	2105      	movs	r1, #5
 80022f6:	2020      	movs	r0, #32
 80022f8:	f001 f964 	bl	80035c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80022fc:	2020      	movs	r0, #32
 80022fe:	f001 f997 	bl	8003630 <HAL_NVIC_EnableIRQ>
 8002302:	e7cf      	b.n	80022a4 <HAL_I2C_MspInit+0x1c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002304:	4c11      	ldr	r4, [pc, #68]	; (800234c <HAL_I2C_MspInit+0xc4>)
 8002306:	69a3      	ldr	r3, [r4, #24]
 8002308:	f043 0308 	orr.w	r3, r3, #8
 800230c:	61a3      	str	r3, [r4, #24]
 800230e:	69a3      	ldr	r3, [r4, #24]
 8002310:	f003 0308 	and.w	r3, r3, #8
 8002314:	9302      	str	r3, [sp, #8]
 8002316:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002318:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800231c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800231e:	2312      	movs	r3, #18
 8002320:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002322:	2303      	movs	r3, #3
 8002324:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002326:	a904      	add	r1, sp, #16
 8002328:	4809      	ldr	r0, [pc, #36]	; (8002350 <HAL_I2C_MspInit+0xc8>)
 800232a:	f001 fa01 	bl	8003730 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800232e:	69e3      	ldr	r3, [r4, #28]
 8002330:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002334:	61e3      	str	r3, [r4, #28]
 8002336:	69e3      	ldr	r3, [r4, #28]
 8002338:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800233c:	9303      	str	r3, [sp, #12]
 800233e:	9b03      	ldr	r3, [sp, #12]
}
 8002340:	e7b0      	b.n	80022a4 <HAL_I2C_MspInit+0x1c>
 8002342:	bf00      	nop
 8002344:	40005400 	.word	0x40005400
 8002348:	40005800 	.word	0x40005800
 800234c:	40021000 	.word	0x40021000
 8002350:	40010c00 	.word	0x40010c00

08002354 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002354:	b500      	push	{lr}
 8002356:	b091      	sub	sp, #68	; 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002358:	2300      	movs	r3, #0
 800235a:	9308      	str	r3, [sp, #32]
 800235c:	9309      	str	r3, [sp, #36]	; 0x24
 800235e:	930b      	str	r3, [sp, #44]	; 0x2c
 8002360:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002362:	9301      	str	r3, [sp, #4]
 8002364:	9302      	str	r3, [sp, #8]
 8002366:	9303      	str	r3, [sp, #12]
 8002368:	9304      	str	r3, [sp, #16]
 800236a:	9305      	str	r3, [sp, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800236c:	2201      	movs	r2, #1
 800236e:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002370:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002374:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002376:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002378:	2202      	movs	r2, #2
 800237a:	920d      	str	r2, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800237c:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800237e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002382:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002384:	a806      	add	r0, sp, #24
 8002386:	f003 fbb7 	bl	8005af8 <HAL_RCC_OscConfig>
 800238a:	b980      	cbnz	r0, 80023ae <SystemClock_Config+0x5a>
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800238c:	230f      	movs	r3, #15
 800238e:	9301      	str	r3, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002390:	2102      	movs	r1, #2
 8002392:	9102      	str	r1, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002394:	2300      	movs	r3, #0
 8002396:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002398:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800239c:	9204      	str	r2, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800239e:	9305      	str	r3, [sp, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80023a0:	a801      	add	r0, sp, #4
 80023a2:	f003 fde9 	bl	8005f78 <HAL_RCC_ClockConfig>
 80023a6:	b920      	cbnz	r0, 80023b2 <SystemClock_Config+0x5e>
  {
    Error_Handler();
  }
}
 80023a8:	b011      	add	sp, #68	; 0x44
 80023aa:	f85d fb04 	ldr.w	pc, [sp], #4
  __ASM volatile ("cpsid i" : : : "memory");
 80023ae:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80023b0:	e7fe      	b.n	80023b0 <SystemClock_Config+0x5c>
 80023b2:	b672      	cpsid	i
 80023b4:	e7fe      	b.n	80023b4 <SystemClock_Config+0x60>

080023b6 <main>:
{
 80023b6:	b508      	push	{r3, lr}
  HAL_Init();
 80023b8:	f001 f8ba 	bl	8003530 <HAL_Init>
  SystemClock_Config();
 80023bc:	f7ff ffca 	bl	8002354 <SystemClock_Config>
  MX_GPIO_Init();
 80023c0:	f7ff fed8 	bl	8002174 <MX_GPIO_Init>
  MX_I2C1_Init();
 80023c4:	f7ff ff24 	bl	8002210 <MX_I2C1_Init>
  MX_I2C2_Init();
 80023c8:	f7ff ff40 	bl	800224c <MX_I2C2_Init>
  MX_USART1_UART_Init();
 80023cc:	f000 fb3e 	bl	8002a4c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80023d0:	f000 fb56 	bl	8002a80 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80023d4:	f000 fa9c 	bl	8002910 <MX_TIM3_Init>
  MX_FREERTOS_Init();
 80023d8:	f7ff fe3a 	bl	8002050 <MX_FREERTOS_Init>
  osKernelStart();
 80023dc:	f004 fc8a 	bl	8006cf4 <osKernelStart>
  while (1)
 80023e0:	e7fe      	b.n	80023e0 <main+0x2a>
	...

080023e4 <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM4) {
 80023e4:	6802      	ldr	r2, [r0, #0]
 80023e6:	4b07      	ldr	r3, [pc, #28]	; (8002404 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d000      	beq.n	80023ee <HAL_TIM_PeriodElapsedCallback+0xa>
 80023ec:	4770      	bx	lr
{
 80023ee:	b510      	push	{r4, lr}
 80023f0:	4604      	mov	r4, r0
    HAL_IncTick();
 80023f2:	f001 f8af 	bl	8003554 <HAL_IncTick>
  if (htim->Instance == TIM4)
 80023f6:	6822      	ldr	r2, [r4, #0]
 80023f8:	4b02      	ldr	r3, [pc, #8]	; (8002404 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d101      	bne.n	8002402 <HAL_TIM_PeriodElapsedCallback+0x1e>
	  button_timer_tick();
 80023fe:	f7ff fc53 	bl	8001ca8 <button_timer_tick>
}
 8002402:	bd10      	pop	{r4, pc}
 8002404:	40000800 	.word	0x40000800

08002408 <Error_Handler>:
 8002408:	b672      	cpsid	i
  while (1)
 800240a:	e7fe      	b.n	800240a <Error_Handler+0x2>

0800240c <rtc_Init>:
void rtc_InstalTimeEncoder (void);


/* Private user code ---------------------------------------------------------*/
void rtc_Init(void)
{
 800240c:	b508      	push	{r3, lr}
	timedata.sec	= 0;
 800240e:	4b06      	ldr	r3, [pc, #24]	; (8002428 <rtc_Init+0x1c>)
 8002410:	2200      	movs	r2, #0
 8002412:	701a      	strb	r2, [r3, #0]
	timedata.min	= 0;
 8002414:	705a      	strb	r2, [r3, #1]
	timedata.hour	= 0;
 8002416:	709a      	strb	r2, [r3, #2]

	timedata.date	= 0;
 8002418:	70da      	strb	r2, [r3, #3]
	timedata.month	= 0;
 800241a:	711a      	strb	r2, [r3, #4]
	timedata.year	= 0;
 800241c:	80da      	strh	r2, [r3, #6]

	DS1307_Init(&hi2c2);
 800241e:	4803      	ldr	r0, [pc, #12]	; (800242c <rtc_Init+0x20>)
 8002420:	f000 fc24 	bl	8002c6c <DS1307_Init>
}
 8002424:	bd08      	pop	{r3, pc}
 8002426:	bf00      	nop
 8002428:	200005e8 	.word	0x200005e8
 800242c:	20000584 	.word	0x20000584

08002430 <rtc_SetTimeData>:
		rtc_InstalTimeEncoder();
	}
}

void rtc_SetTimeData (void)
{
 8002430:	b508      	push	{r3, lr}
	if(flag_line_timedata.flag_data)
 8002432:	4b23      	ldr	r3, [pc, #140]	; (80024c0 <rtc_SetTimeData+0x90>)
 8002434:	791b      	ldrb	r3, [r3, #4]
 8002436:	b993      	cbnz	r3, 800245e <rtc_SetTimeData+0x2e>
	{
		DS1307_SetDate(temptimedata.date);
		flag_line_timedata.flag_data = 0;
	}
	if(flag_line_timedata.flag_month)
 8002438:	4b21      	ldr	r3, [pc, #132]	; (80024c0 <rtc_SetTimeData+0x90>)
 800243a:	795b      	ldrb	r3, [r3, #5]
 800243c:	b9bb      	cbnz	r3, 800246e <rtc_SetTimeData+0x3e>
	{
		DS1307_SetMonth(temptimedata.month);
		flag_line_timedata.flag_month = 0;
	}
	if(flag_line_timedata.flag_year)
 800243e:	4b20      	ldr	r3, [pc, #128]	; (80024c0 <rtc_SetTimeData+0x90>)
 8002440:	799b      	ldrb	r3, [r3, #6]
 8002442:	b9e3      	cbnz	r3, 800247e <rtc_SetTimeData+0x4e>
	{
		DS1307_SetYear(temptimedata.year);
		flag_line_timedata.flag_year = 0;
	}
	if(flag_line_timedata.flag_hour)
 8002444:	4b1e      	ldr	r3, [pc, #120]	; (80024c0 <rtc_SetTimeData+0x90>)
 8002446:	78db      	ldrb	r3, [r3, #3]
 8002448:	bb0b      	cbnz	r3, 800248e <rtc_SetTimeData+0x5e>
	{
		DS1307_SetHour(temptimedata.hour);
		flag_line_timedata.flag_hour = 0;
	}
	if(flag_line_timedata.flag_min)
 800244a:	4b1d      	ldr	r3, [pc, #116]	; (80024c0 <rtc_SetTimeData+0x90>)
 800244c:	789b      	ldrb	r3, [r3, #2]
 800244e:	bb33      	cbnz	r3, 800249e <rtc_SetTimeData+0x6e>
	{
		DS1307_SetMinute(temptimedata.min);
		flag_line_timedata.flag_min = 0;
	}
	if(flag_line_timedata.flag_sec)
 8002450:	4b1b      	ldr	r3, [pc, #108]	; (80024c0 <rtc_SetTimeData+0x90>)
 8002452:	785b      	ldrb	r3, [r3, #1]
 8002454:	bb5b      	cbnz	r3, 80024ae <rtc_SetTimeData+0x7e>
	{
		DS1307_SetSecond(temptimedata.sec);
		flag_line_timedata.flag_sec = 0;
	}

	flag_line_timedata.flag_readtemptimedata = 0;
 8002456:	4b1a      	ldr	r3, [pc, #104]	; (80024c0 <rtc_SetTimeData+0x90>)
 8002458:	2200      	movs	r2, #0
 800245a:	701a      	strb	r2, [r3, #0]
}
 800245c:	bd08      	pop	{r3, pc}
		DS1307_SetDate(temptimedata.date);
 800245e:	4b19      	ldr	r3, [pc, #100]	; (80024c4 <rtc_SetTimeData+0x94>)
 8002460:	78d8      	ldrb	r0, [r3, #3]
 8002462:	f000 fc65 	bl	8002d30 <DS1307_SetDate>
		flag_line_timedata.flag_data = 0;
 8002466:	4b16      	ldr	r3, [pc, #88]	; (80024c0 <rtc_SetTimeData+0x90>)
 8002468:	2200      	movs	r2, #0
 800246a:	711a      	strb	r2, [r3, #4]
 800246c:	e7e4      	b.n	8002438 <rtc_SetTimeData+0x8>
		DS1307_SetMonth(temptimedata.month);
 800246e:	4b15      	ldr	r3, [pc, #84]	; (80024c4 <rtc_SetTimeData+0x94>)
 8002470:	7918      	ldrb	r0, [r3, #4]
 8002472:	f000 fc65 	bl	8002d40 <DS1307_SetMonth>
		flag_line_timedata.flag_month = 0;
 8002476:	4b12      	ldr	r3, [pc, #72]	; (80024c0 <rtc_SetTimeData+0x90>)
 8002478:	2200      	movs	r2, #0
 800247a:	715a      	strb	r2, [r3, #5]
 800247c:	e7df      	b.n	800243e <rtc_SetTimeData+0xe>
		DS1307_SetYear(temptimedata.year);
 800247e:	4b11      	ldr	r3, [pc, #68]	; (80024c4 <rtc_SetTimeData+0x94>)
 8002480:	88d8      	ldrh	r0, [r3, #6]
 8002482:	f000 fc65 	bl	8002d50 <DS1307_SetYear>
		flag_line_timedata.flag_year = 0;
 8002486:	4b0e      	ldr	r3, [pc, #56]	; (80024c0 <rtc_SetTimeData+0x90>)
 8002488:	2200      	movs	r2, #0
 800248a:	719a      	strb	r2, [r3, #6]
 800248c:	e7da      	b.n	8002444 <rtc_SetTimeData+0x14>
		DS1307_SetHour(temptimedata.hour);
 800248e:	4b0d      	ldr	r3, [pc, #52]	; (80024c4 <rtc_SetTimeData+0x94>)
 8002490:	7898      	ldrb	r0, [r3, #2]
 8002492:	f000 fc75 	bl	8002d80 <DS1307_SetHour>
		flag_line_timedata.flag_hour = 0;
 8002496:	4b0a      	ldr	r3, [pc, #40]	; (80024c0 <rtc_SetTimeData+0x90>)
 8002498:	2200      	movs	r2, #0
 800249a:	70da      	strb	r2, [r3, #3]
 800249c:	e7d5      	b.n	800244a <rtc_SetTimeData+0x1a>
		DS1307_SetMinute(temptimedata.min);
 800249e:	4b09      	ldr	r3, [pc, #36]	; (80024c4 <rtc_SetTimeData+0x94>)
 80024a0:	7858      	ldrb	r0, [r3, #1]
 80024a2:	f000 fc77 	bl	8002d94 <DS1307_SetMinute>
		flag_line_timedata.flag_min = 0;
 80024a6:	4b06      	ldr	r3, [pc, #24]	; (80024c0 <rtc_SetTimeData+0x90>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	709a      	strb	r2, [r3, #2]
 80024ac:	e7d0      	b.n	8002450 <rtc_SetTimeData+0x20>
		DS1307_SetSecond(temptimedata.sec);
 80024ae:	4b05      	ldr	r3, [pc, #20]	; (80024c4 <rtc_SetTimeData+0x94>)
 80024b0:	7818      	ldrb	r0, [r3, #0]
 80024b2:	f000 fc77 	bl	8002da4 <DS1307_SetSecond>
		flag_line_timedata.flag_sec = 0;
 80024b6:	4b02      	ldr	r3, [pc, #8]	; (80024c0 <rtc_SetTimeData+0x90>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	705a      	strb	r2, [r3, #1]
 80024bc:	e7cb      	b.n	8002456 <rtc_SetTimeData+0x26>
 80024be:	bf00      	nop
 80024c0:	200005d8 	.word	0x200005d8
 80024c4:	200005e0 	.word	0x200005e0

080024c8 <rtc_InstalDataEncoder>:

void rtc_InstalDataEncoder (void)
{
 80024c8:	b510      	push	{r4, lr}
	if(flag_line_timedata.flag_readtemptimedata == 0)
 80024ca:	4b40      	ldr	r3, [pc, #256]	; (80025cc <rtc_InstalDataEncoder+0x104>)
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	b1bb      	cbz	r3, 8002500 <rtc_InstalDataEncoder+0x38>
		temptimedata.date	= DS1307_GetDate();
		temptimedata.month	= DS1307_GetMonth();
		temptimedata.year	= DS1307_GetYear();
	}

	if(page_properties.line == line_0)
 80024d0:	4b3f      	ldr	r3, [pc, #252]	; (80025d0 <rtc_InstalDataEncoder+0x108>)
 80024d2:	785b      	ldrb	r3, [r3, #1]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d133      	bne.n	8002540 <rtc_InstalDataEncoder+0x78>
	{
		if(flag_line_timedata.flag_data == 0)
 80024d8:	4a3c      	ldr	r2, [pc, #240]	; (80025cc <rtc_InstalDataEncoder+0x104>)
 80024da:	7912      	ldrb	r2, [r2, #4]
 80024dc:	b9f2      	cbnz	r2, 800251c <rtc_InstalDataEncoder+0x54>
		{
			flag_line_timedata.flag_data = 1;
 80024de:	4a3b      	ldr	r2, [pc, #236]	; (80025cc <rtc_InstalDataEncoder+0x104>)
 80024e0:	2101      	movs	r1, #1
 80024e2:	7111      	strb	r1, [r2, #4]
			(TIM3->CNT) = temptimedata.date * 2;
 80024e4:	4a3b      	ldr	r2, [pc, #236]	; (80025d4 <rtc_InstalDataEncoder+0x10c>)
 80024e6:	78d2      	ldrb	r2, [r2, #3]
 80024e8:	408a      	lsls	r2, r1
 80024ea:	493b      	ldr	r1, [pc, #236]	; (80025d8 <rtc_InstalDataEncoder+0x110>)
 80024ec:	624a      	str	r2, [r1, #36]	; 0x24
					(TIM3->CNT) = 2100 * 2;
				}
				temptimedata.year = Enc_Counter;
			}
		}
	if(page_properties.line == line_3)
 80024ee:	2b03      	cmp	r3, #3
 80024f0:	d105      	bne.n	80024fe <rtc_InstalDataEncoder+0x36>
	{
		rtc_SetTimeData();
 80024f2:	f7ff ff9d 	bl	8002430 <rtc_SetTimeData>
		page_properties.page_list = page_start;
 80024f6:	4b36      	ldr	r3, [pc, #216]	; (80025d0 <rtc_InstalDataEncoder+0x108>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	701a      	strb	r2, [r3, #0]
		page_properties.line = line_0;
 80024fc:	705a      	strb	r2, [r3, #1]
	}
}
 80024fe:	bd10      	pop	{r4, pc}
		flag_line_timedata.flag_readtemptimedata = 1;
 8002500:	4b32      	ldr	r3, [pc, #200]	; (80025cc <rtc_InstalDataEncoder+0x104>)
 8002502:	2201      	movs	r2, #1
 8002504:	701a      	strb	r2, [r3, #0]
		temptimedata.date	= DS1307_GetDate();
 8002506:	f000 fbcb 	bl	8002ca0 <DS1307_GetDate>
 800250a:	4c32      	ldr	r4, [pc, #200]	; (80025d4 <rtc_InstalDataEncoder+0x10c>)
 800250c:	70e0      	strb	r0, [r4, #3]
		temptimedata.month	= DS1307_GetMonth();
 800250e:	f000 fbce 	bl	8002cae <DS1307_GetMonth>
 8002512:	7120      	strb	r0, [r4, #4]
		temptimedata.year	= DS1307_GetYear();
 8002514:	f000 fbd2 	bl	8002cbc <DS1307_GetYear>
 8002518:	80e0      	strh	r0, [r4, #6]
 800251a:	e7d9      	b.n	80024d0 <rtc_InstalDataEncoder+0x8>
			if(Enc_Counter > 31)
 800251c:	4a2f      	ldr	r2, [pc, #188]	; (80025dc <rtc_InstalDataEncoder+0x114>)
 800251e:	8812      	ldrh	r2, [r2, #0]
 8002520:	2a1f      	cmp	r2, #31
 8002522:	d905      	bls.n	8002530 <rtc_InstalDataEncoder+0x68>
				(TIM3->CNT) = 0;
 8002524:	492c      	ldr	r1, [pc, #176]	; (80025d8 <rtc_InstalDataEncoder+0x110>)
 8002526:	2000      	movs	r0, #0
 8002528:	6248      	str	r0, [r1, #36]	; 0x24
			temptimedata.date = Enc_Counter;
 800252a:	492a      	ldr	r1, [pc, #168]	; (80025d4 <rtc_InstalDataEncoder+0x10c>)
 800252c:	70ca      	strb	r2, [r1, #3]
 800252e:	e7de      	b.n	80024ee <rtc_InstalDataEncoder+0x26>
			else if((Enc_Counter <1) || (Enc_Counter >100))
 8002530:	1e51      	subs	r1, r2, #1
 8002532:	b289      	uxth	r1, r1
 8002534:	2963      	cmp	r1, #99	; 0x63
 8002536:	d9f8      	bls.n	800252a <rtc_InstalDataEncoder+0x62>
				(TIM3->CNT) = 31 * 2;
 8002538:	4927      	ldr	r1, [pc, #156]	; (80025d8 <rtc_InstalDataEncoder+0x110>)
 800253a:	203e      	movs	r0, #62	; 0x3e
 800253c:	6248      	str	r0, [r1, #36]	; 0x24
 800253e:	e7f4      	b.n	800252a <rtc_InstalDataEncoder+0x62>
	if(page_properties.line == line_1)
 8002540:	2b01      	cmp	r3, #1
 8002542:	d11d      	bne.n	8002580 <rtc_InstalDataEncoder+0xb8>
			if(flag_line_timedata.flag_month == 0)
 8002544:	4b21      	ldr	r3, [pc, #132]	; (80025cc <rtc_InstalDataEncoder+0x104>)
 8002546:	795b      	ldrb	r3, [r3, #5]
 8002548:	b943      	cbnz	r3, 800255c <rtc_InstalDataEncoder+0x94>
				flag_line_timedata.flag_month = 1;
 800254a:	4b20      	ldr	r3, [pc, #128]	; (80025cc <rtc_InstalDataEncoder+0x104>)
 800254c:	2201      	movs	r2, #1
 800254e:	715a      	strb	r2, [r3, #5]
				(TIM3->CNT) = temptimedata.month * 2;
 8002550:	4b20      	ldr	r3, [pc, #128]	; (80025d4 <rtc_InstalDataEncoder+0x10c>)
 8002552:	791b      	ldrb	r3, [r3, #4]
 8002554:	4093      	lsls	r3, r2
 8002556:	4a20      	ldr	r2, [pc, #128]	; (80025d8 <rtc_InstalDataEncoder+0x110>)
 8002558:	6253      	str	r3, [r2, #36]	; 0x24
 800255a:	e7d0      	b.n	80024fe <rtc_InstalDataEncoder+0x36>
				if(Enc_Counter > 12)
 800255c:	4b1f      	ldr	r3, [pc, #124]	; (80025dc <rtc_InstalDataEncoder+0x114>)
 800255e:	881b      	ldrh	r3, [r3, #0]
 8002560:	2b0c      	cmp	r3, #12
 8002562:	d905      	bls.n	8002570 <rtc_InstalDataEncoder+0xa8>
					(TIM3->CNT) = 0;
 8002564:	4a1c      	ldr	r2, [pc, #112]	; (80025d8 <rtc_InstalDataEncoder+0x110>)
 8002566:	2100      	movs	r1, #0
 8002568:	6251      	str	r1, [r2, #36]	; 0x24
				temptimedata.month = Enc_Counter;
 800256a:	4a1a      	ldr	r2, [pc, #104]	; (80025d4 <rtc_InstalDataEncoder+0x10c>)
 800256c:	7113      	strb	r3, [r2, #4]
 800256e:	e7c6      	b.n	80024fe <rtc_InstalDataEncoder+0x36>
				else if((Enc_Counter <1) || (Enc_Counter >100))
 8002570:	1e5a      	subs	r2, r3, #1
 8002572:	b292      	uxth	r2, r2
 8002574:	2a63      	cmp	r2, #99	; 0x63
 8002576:	d9f8      	bls.n	800256a <rtc_InstalDataEncoder+0xa2>
					(TIM3->CNT) = 12 * 2;
 8002578:	4a17      	ldr	r2, [pc, #92]	; (80025d8 <rtc_InstalDataEncoder+0x110>)
 800257a:	2118      	movs	r1, #24
 800257c:	6251      	str	r1, [r2, #36]	; 0x24
 800257e:	e7f4      	b.n	800256a <rtc_InstalDataEncoder+0xa2>
	if(page_properties.line == line_2)
 8002580:	2b02      	cmp	r3, #2
 8002582:	d1b4      	bne.n	80024ee <rtc_InstalDataEncoder+0x26>
			if(flag_line_timedata.flag_year == 0)
 8002584:	4b11      	ldr	r3, [pc, #68]	; (80025cc <rtc_InstalDataEncoder+0x104>)
 8002586:	799b      	ldrb	r3, [r3, #6]
 8002588:	b943      	cbnz	r3, 800259c <rtc_InstalDataEncoder+0xd4>
				flag_line_timedata.flag_year = 1;
 800258a:	4b10      	ldr	r3, [pc, #64]	; (80025cc <rtc_InstalDataEncoder+0x104>)
 800258c:	2201      	movs	r2, #1
 800258e:	719a      	strb	r2, [r3, #6]
				(TIM3->CNT) = temptimedata.year * 2;
 8002590:	4b10      	ldr	r3, [pc, #64]	; (80025d4 <rtc_InstalDataEncoder+0x10c>)
 8002592:	88db      	ldrh	r3, [r3, #6]
 8002594:	4093      	lsls	r3, r2
 8002596:	4a10      	ldr	r2, [pc, #64]	; (80025d8 <rtc_InstalDataEncoder+0x110>)
 8002598:	6253      	str	r3, [r2, #36]	; 0x24
 800259a:	e7b0      	b.n	80024fe <rtc_InstalDataEncoder+0x36>
				if(Enc_Counter > 2100)
 800259c:	4b0f      	ldr	r3, [pc, #60]	; (80025dc <rtc_InstalDataEncoder+0x114>)
 800259e:	881b      	ldrh	r3, [r3, #0]
 80025a0:	f640 0234 	movw	r2, #2100	; 0x834
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d906      	bls.n	80025b6 <rtc_InstalDataEncoder+0xee>
					(TIM3->CNT) = 2000;
 80025a8:	4a0b      	ldr	r2, [pc, #44]	; (80025d8 <rtc_InstalDataEncoder+0x110>)
 80025aa:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80025ae:	6251      	str	r1, [r2, #36]	; 0x24
				temptimedata.year = Enc_Counter;
 80025b0:	4a08      	ldr	r2, [pc, #32]	; (80025d4 <rtc_InstalDataEncoder+0x10c>)
 80025b2:	80d3      	strh	r3, [r2, #6]
 80025b4:	e7a3      	b.n	80024fe <rtc_InstalDataEncoder+0x36>
				else if((Enc_Counter <2000) || (Enc_Counter >2500))
 80025b6:	f5a3 62fa 	sub.w	r2, r3, #2000	; 0x7d0
 80025ba:	b292      	uxth	r2, r2
 80025bc:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
 80025c0:	d9f6      	bls.n	80025b0 <rtc_InstalDataEncoder+0xe8>
					(TIM3->CNT) = 2100 * 2;
 80025c2:	4a05      	ldr	r2, [pc, #20]	; (80025d8 <rtc_InstalDataEncoder+0x110>)
 80025c4:	f241 0168 	movw	r1, #4200	; 0x1068
 80025c8:	6251      	str	r1, [r2, #36]	; 0x24
 80025ca:	e7f1      	b.n	80025b0 <rtc_InstalDataEncoder+0xe8>
 80025cc:	200005d8 	.word	0x200005d8
 80025d0:	200002a4 	.word	0x200002a4
 80025d4:	200005e0 	.word	0x200005e0
 80025d8:	40000400 	.word	0x40000400
 80025dc:	200002a6 	.word	0x200002a6

080025e0 <rtc_InstalTimeEncoder>:

void rtc_InstalTimeEncoder (void)
{
 80025e0:	b510      	push	{r4, lr}
	if(flag_line_timedata.flag_readtemptimedata == 0)
 80025e2:	4b31      	ldr	r3, [pc, #196]	; (80026a8 <rtc_InstalTimeEncoder+0xc8>)
 80025e4:	781b      	ldrb	r3, [r3, #0]
 80025e6:	b1b3      	cbz	r3, 8002616 <rtc_InstalTimeEncoder+0x36>
		temptimedata.sec	= DS1307_GetSecond();
		temptimedata.min	= DS1307_GetMinute();
		temptimedata.hour	= DS1307_GetHour();
	}

	if(page_properties.line == line_0)
 80025e8:	4b30      	ldr	r3, [pc, #192]	; (80026ac <rtc_InstalTimeEncoder+0xcc>)
 80025ea:	785b      	ldrb	r3, [r3, #1]
 80025ec:	bb5b      	cbnz	r3, 8002646 <rtc_InstalTimeEncoder+0x66>
	{
		if(flag_line_timedata.flag_hour == 0)
 80025ee:	4a2e      	ldr	r2, [pc, #184]	; (80026a8 <rtc_InstalTimeEncoder+0xc8>)
 80025f0:	78d2      	ldrb	r2, [r2, #3]
 80025f2:	b9f2      	cbnz	r2, 8002632 <rtc_InstalTimeEncoder+0x52>
		{
			flag_line_timedata.flag_hour = 1;
 80025f4:	4a2c      	ldr	r2, [pc, #176]	; (80026a8 <rtc_InstalTimeEncoder+0xc8>)
 80025f6:	2101      	movs	r1, #1
 80025f8:	70d1      	strb	r1, [r2, #3]
			(TIM3->CNT) = temptimedata.hour * 2;
 80025fa:	4a2d      	ldr	r2, [pc, #180]	; (80026b0 <rtc_InstalTimeEncoder+0xd0>)
 80025fc:	7892      	ldrb	r2, [r2, #2]
 80025fe:	408a      	lsls	r2, r1
 8002600:	492c      	ldr	r1, [pc, #176]	; (80026b4 <rtc_InstalTimeEncoder+0xd4>)
 8002602:	624a      	str	r2, [r1, #36]	; 0x24
					(TIM3->CNT) = 59 * 2;
				}
				temptimedata.sec = Enc_Counter;
			}
		}
	if(page_properties.line == line_3)
 8002604:	2b03      	cmp	r3, #3
 8002606:	d105      	bne.n	8002614 <rtc_InstalTimeEncoder+0x34>
	{
		rtc_SetTimeData();
 8002608:	f7ff ff12 	bl	8002430 <rtc_SetTimeData>
		page_properties.page_list = page_start;
 800260c:	4b27      	ldr	r3, [pc, #156]	; (80026ac <rtc_InstalTimeEncoder+0xcc>)
 800260e:	2200      	movs	r2, #0
 8002610:	701a      	strb	r2, [r3, #0]
		page_properties.line = line_0;
 8002612:	705a      	strb	r2, [r3, #1]
	}
}
 8002614:	bd10      	pop	{r4, pc}
		flag_line_timedata.flag_readtemptimedata = 1;
 8002616:	4b24      	ldr	r3, [pc, #144]	; (80026a8 <rtc_InstalTimeEncoder+0xc8>)
 8002618:	2201      	movs	r2, #1
 800261a:	701a      	strb	r2, [r3, #0]
		temptimedata.sec	= DS1307_GetSecond();
 800261c:	f000 fb70 	bl	8002d00 <DS1307_GetSecond>
 8002620:	4c23      	ldr	r4, [pc, #140]	; (80026b0 <rtc_InstalTimeEncoder+0xd0>)
 8002622:	7020      	strb	r0, [r4, #0]
		temptimedata.min	= DS1307_GetMinute();
 8002624:	f000 fb65 	bl	8002cf2 <DS1307_GetMinute>
 8002628:	7060      	strb	r0, [r4, #1]
		temptimedata.hour	= DS1307_GetHour();
 800262a:	f000 fb59 	bl	8002ce0 <DS1307_GetHour>
 800262e:	70a0      	strb	r0, [r4, #2]
 8002630:	e7da      	b.n	80025e8 <rtc_InstalTimeEncoder+0x8>
			if(Enc_Counter > 23)
 8002632:	4a21      	ldr	r2, [pc, #132]	; (80026b8 <rtc_InstalTimeEncoder+0xd8>)
 8002634:	8812      	ldrh	r2, [r2, #0]
 8002636:	2a17      	cmp	r2, #23
 8002638:	d902      	bls.n	8002640 <rtc_InstalTimeEncoder+0x60>
				(TIM3->CNT) = 0;
 800263a:	491e      	ldr	r1, [pc, #120]	; (80026b4 <rtc_InstalTimeEncoder+0xd4>)
 800263c:	2000      	movs	r0, #0
 800263e:	6248      	str	r0, [r1, #36]	; 0x24
			temptimedata.hour = Enc_Counter;
 8002640:	491b      	ldr	r1, [pc, #108]	; (80026b0 <rtc_InstalTimeEncoder+0xd0>)
 8002642:	708a      	strb	r2, [r1, #2]
 8002644:	e7de      	b.n	8002604 <rtc_InstalTimeEncoder+0x24>
	if(page_properties.line == line_1)
 8002646:	2b01      	cmp	r3, #1
 8002648:	d115      	bne.n	8002676 <rtc_InstalTimeEncoder+0x96>
			if(flag_line_timedata.flag_min == 0)
 800264a:	4b17      	ldr	r3, [pc, #92]	; (80026a8 <rtc_InstalTimeEncoder+0xc8>)
 800264c:	789b      	ldrb	r3, [r3, #2]
 800264e:	b943      	cbnz	r3, 8002662 <rtc_InstalTimeEncoder+0x82>
				flag_line_timedata.flag_min = 1;
 8002650:	4b15      	ldr	r3, [pc, #84]	; (80026a8 <rtc_InstalTimeEncoder+0xc8>)
 8002652:	2201      	movs	r2, #1
 8002654:	709a      	strb	r2, [r3, #2]
				(TIM3->CNT) = temptimedata.min * 2;
 8002656:	4b16      	ldr	r3, [pc, #88]	; (80026b0 <rtc_InstalTimeEncoder+0xd0>)
 8002658:	785b      	ldrb	r3, [r3, #1]
 800265a:	4093      	lsls	r3, r2
 800265c:	4a15      	ldr	r2, [pc, #84]	; (80026b4 <rtc_InstalTimeEncoder+0xd4>)
 800265e:	6253      	str	r3, [r2, #36]	; 0x24
 8002660:	e7d8      	b.n	8002614 <rtc_InstalTimeEncoder+0x34>
				if(Enc_Counter > 59)
 8002662:	4b15      	ldr	r3, [pc, #84]	; (80026b8 <rtc_InstalTimeEncoder+0xd8>)
 8002664:	881b      	ldrh	r3, [r3, #0]
 8002666:	2b3b      	cmp	r3, #59	; 0x3b
 8002668:	d902      	bls.n	8002670 <rtc_InstalTimeEncoder+0x90>
					(TIM3->CNT) = 0;
 800266a:	4a12      	ldr	r2, [pc, #72]	; (80026b4 <rtc_InstalTimeEncoder+0xd4>)
 800266c:	2100      	movs	r1, #0
 800266e:	6251      	str	r1, [r2, #36]	; 0x24
				temptimedata.min = Enc_Counter;
 8002670:	4a0f      	ldr	r2, [pc, #60]	; (80026b0 <rtc_InstalTimeEncoder+0xd0>)
 8002672:	7053      	strb	r3, [r2, #1]
 8002674:	e7ce      	b.n	8002614 <rtc_InstalTimeEncoder+0x34>
	if(page_properties.line == line_2)
 8002676:	2b02      	cmp	r3, #2
 8002678:	d1c4      	bne.n	8002604 <rtc_InstalTimeEncoder+0x24>
			if(flag_line_timedata.flag_sec == 0)
 800267a:	4b0b      	ldr	r3, [pc, #44]	; (80026a8 <rtc_InstalTimeEncoder+0xc8>)
 800267c:	785b      	ldrb	r3, [r3, #1]
 800267e:	b943      	cbnz	r3, 8002692 <rtc_InstalTimeEncoder+0xb2>
				flag_line_timedata.flag_sec = 1;
 8002680:	4b09      	ldr	r3, [pc, #36]	; (80026a8 <rtc_InstalTimeEncoder+0xc8>)
 8002682:	2201      	movs	r2, #1
 8002684:	705a      	strb	r2, [r3, #1]
				(TIM3->CNT) = temptimedata.sec * 2;
 8002686:	4b0a      	ldr	r3, [pc, #40]	; (80026b0 <rtc_InstalTimeEncoder+0xd0>)
 8002688:	781b      	ldrb	r3, [r3, #0]
 800268a:	4093      	lsls	r3, r2
 800268c:	4a09      	ldr	r2, [pc, #36]	; (80026b4 <rtc_InstalTimeEncoder+0xd4>)
 800268e:	6253      	str	r3, [r2, #36]	; 0x24
 8002690:	e7c0      	b.n	8002614 <rtc_InstalTimeEncoder+0x34>
				if(Enc_Counter > 59)
 8002692:	4b09      	ldr	r3, [pc, #36]	; (80026b8 <rtc_InstalTimeEncoder+0xd8>)
 8002694:	881b      	ldrh	r3, [r3, #0]
 8002696:	2b3b      	cmp	r3, #59	; 0x3b
 8002698:	d902      	bls.n	80026a0 <rtc_InstalTimeEncoder+0xc0>
					(TIM3->CNT) = 0;
 800269a:	4a06      	ldr	r2, [pc, #24]	; (80026b4 <rtc_InstalTimeEncoder+0xd4>)
 800269c:	2100      	movs	r1, #0
 800269e:	6251      	str	r1, [r2, #36]	; 0x24
				temptimedata.sec = Enc_Counter;
 80026a0:	4a03      	ldr	r2, [pc, #12]	; (80026b0 <rtc_InstalTimeEncoder+0xd0>)
 80026a2:	7013      	strb	r3, [r2, #0]
 80026a4:	e7b6      	b.n	8002614 <rtc_InstalTimeEncoder+0x34>
 80026a6:	bf00      	nop
 80026a8:	200005d8 	.word	0x200005d8
 80026ac:	200002a4 	.word	0x200002a4
 80026b0:	200005e0 	.word	0x200005e0
 80026b4:	40000400 	.word	0x40000400
 80026b8:	200002a6 	.word	0x200002a6

080026bc <rtc_handle>:
{
 80026bc:	b510      	push	{r4, lr}
	timedata.sec	= DS1307_GetSecond();
 80026be:	f000 fb1f 	bl	8002d00 <DS1307_GetSecond>
 80026c2:	4c10      	ldr	r4, [pc, #64]	; (8002704 <rtc_handle+0x48>)
 80026c4:	7020      	strb	r0, [r4, #0]
	timedata.min	= DS1307_GetMinute();
 80026c6:	f000 fb14 	bl	8002cf2 <DS1307_GetMinute>
 80026ca:	7060      	strb	r0, [r4, #1]
	timedata.hour	= DS1307_GetHour();
 80026cc:	f000 fb08 	bl	8002ce0 <DS1307_GetHour>
 80026d0:	70a0      	strb	r0, [r4, #2]
	timedata.date	= DS1307_GetDate();
 80026d2:	f000 fae5 	bl	8002ca0 <DS1307_GetDate>
 80026d6:	70e0      	strb	r0, [r4, #3]
	timedata.month	= DS1307_GetMonth();
 80026d8:	f000 fae9 	bl	8002cae <DS1307_GetMonth>
 80026dc:	7120      	strb	r0, [r4, #4]
	timedata.year	= DS1307_GetYear();
 80026de:	f000 faed 	bl	8002cbc <DS1307_GetYear>
 80026e2:	80e0      	strh	r0, [r4, #6]
	if(page_properties.page_list == page_setting_date)
 80026e4:	4b08      	ldr	r3, [pc, #32]	; (8002708 <rtc_handle+0x4c>)
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	2b03      	cmp	r3, #3
 80026ea:	d004      	beq.n	80026f6 <rtc_handle+0x3a>
	if(page_properties.page_list == page_setting_time)
 80026ec:	4b06      	ldr	r3, [pc, #24]	; (8002708 <rtc_handle+0x4c>)
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	2b04      	cmp	r3, #4
 80026f2:	d003      	beq.n	80026fc <rtc_handle+0x40>
}
 80026f4:	bd10      	pop	{r4, pc}
		rtc_InstalDataEncoder();
 80026f6:	f7ff fee7 	bl	80024c8 <rtc_InstalDataEncoder>
 80026fa:	e7f7      	b.n	80026ec <rtc_handle+0x30>
		rtc_InstalTimeEncoder();
 80026fc:	f7ff ff70 	bl	80025e0 <rtc_InstalTimeEncoder>
}
 8002700:	e7f8      	b.n	80026f4 <rtc_handle+0x38>
 8002702:	bf00      	nop
 8002704:	200005e8 	.word	0x200005e8
 8002708:	200002a4 	.word	0x200002a4

0800270c <sensors_Init>:

/* Private function prototypes -----------------------------------------------*/

/* Private user code ---------------------------------------------------------*/
void sensors_Init(void)
{
 800270c:	b508      	push	{r3, lr}
	//Инициализация датчика BME280
	BME280_sensor.temperature = 0.0f;
 800270e:	4b04      	ldr	r3, [pc, #16]	; (8002720 <sensors_Init+0x14>)
 8002710:	2200      	movs	r2, #0
 8002712:	601a      	str	r2, [r3, #0]
	BME280_sensor.pressure = 0.0f;
 8002714:	605a      	str	r2, [r3, #4]
	BME280_sensor.humidity = 0.0f;
 8002716:	609a      	str	r2, [r3, #8]

	BME280_Init();
 8002718:	f7fe ffe4 	bl	80016e4 <BME280_Init>
}
 800271c:	bd08      	pop	{r3, pc}
 800271e:	bf00      	nop
 8002720:	200005f0 	.word	0x200005f0

08002724 <sensors_Handle>:

void sensors_Handle(void)
{
 8002724:	b510      	push	{r4, lr}
	//Задача получения температуры и давления с датчика
	BME280_sensor.temperature = BME280_ReadTemperature();
 8002726:	f7fe fe71 	bl	800140c <BME280_ReadTemperature>
 800272a:	4c03      	ldr	r4, [pc, #12]	; (8002738 <sensors_Handle+0x14>)
 800272c:	6020      	str	r0, [r4, #0]
	BME280_sensor.pressure = BME280_ReadPressure();
 800272e:	f7fe fe9f 	bl	8001470 <BME280_ReadPressure>
 8002732:	6060      	str	r0, [r4, #4]
}
 8002734:	bd10      	pop	{r4, pc}
 8002736:	bf00      	nop
 8002738:	200005f0 	.word	0x200005f0

0800273c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800273c:	b500      	push	{lr}
 800273e:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002740:	4b11      	ldr	r3, [pc, #68]	; (8002788 <HAL_MspInit+0x4c>)
 8002742:	699a      	ldr	r2, [r3, #24]
 8002744:	f042 0201 	orr.w	r2, r2, #1
 8002748:	619a      	str	r2, [r3, #24]
 800274a:	699a      	ldr	r2, [r3, #24]
 800274c:	f002 0201 	and.w	r2, r2, #1
 8002750:	9200      	str	r2, [sp, #0]
 8002752:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002754:	69da      	ldr	r2, [r3, #28]
 8002756:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800275a:	61da      	str	r2, [r3, #28]
 800275c:	69db      	ldr	r3, [r3, #28]
 800275e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002762:	9301      	str	r3, [sp, #4]
 8002764:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002766:	2200      	movs	r2, #0
 8002768:	210f      	movs	r1, #15
 800276a:	f06f 0001 	mvn.w	r0, #1
 800276e:	f000 ff29 	bl	80035c4 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002772:	4a06      	ldr	r2, [pc, #24]	; (800278c <HAL_MspInit+0x50>)
 8002774:	6853      	ldr	r3, [r2, #4]
 8002776:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800277a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800277e:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002780:	b003      	add	sp, #12
 8002782:	f85d fb04 	ldr.w	pc, [sp], #4
 8002786:	bf00      	nop
 8002788:	40021000 	.word	0x40021000
 800278c:	40010000 	.word	0x40010000

08002790 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002790:	b500      	push	{lr}
 8002792:	b089      	sub	sp, #36	; 0x24
 8002794:	4601      	mov	r1, r0
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8002796:	2200      	movs	r2, #0
 8002798:	201e      	movs	r0, #30
 800279a:	f000 ff13 	bl	80035c4 <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800279e:	201e      	movs	r0, #30
 80027a0:	f000 ff46 	bl	8003630 <HAL_NVIC_EnableIRQ>

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80027a4:	4b15      	ldr	r3, [pc, #84]	; (80027fc <HAL_InitTick+0x6c>)
 80027a6:	69da      	ldr	r2, [r3, #28]
 80027a8:	f042 0204 	orr.w	r2, r2, #4
 80027ac:	61da      	str	r2, [r3, #28]
 80027ae:	69db      	ldr	r3, [r3, #28]
 80027b0:	f003 0304 	and.w	r3, r3, #4
 80027b4:	9301      	str	r3, [sp, #4]
 80027b6:	9b01      	ldr	r3, [sp, #4]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80027b8:	a902      	add	r1, sp, #8
 80027ba:	a803      	add	r0, sp, #12
 80027bc:	f003 fcb4 	bl	8006128 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80027c0:	f003 fc92 	bl	80060e8 <HAL_RCC_GetPCLK1Freq>
 80027c4:	4603      	mov	r3, r0
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80027c6:	480e      	ldr	r0, [pc, #56]	; (8002800 <HAL_InitTick+0x70>)
 80027c8:	4a0e      	ldr	r2, [pc, #56]	; (8002804 <HAL_InitTick+0x74>)
 80027ca:	6002      	str	r2, [r0, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80027cc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80027d0:	60c2      	str	r2, [r0, #12]
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80027d2:	005b      	lsls	r3, r3, #1
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80027d4:	4a0c      	ldr	r2, [pc, #48]	; (8002808 <HAL_InitTick+0x78>)
 80027d6:	fba2 2303 	umull	r2, r3, r2, r3
 80027da:	0c9b      	lsrs	r3, r3, #18
 80027dc:	3b01      	subs	r3, #1
  htim4.Init.Prescaler = uwPrescalerValue;
 80027de:	6043      	str	r3, [r0, #4]
  htim4.Init.ClockDivision = 0;
 80027e0:	2300      	movs	r3, #0
 80027e2:	6103      	str	r3, [r0, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027e4:	6083      	str	r3, [r0, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 80027e6:	f003 fe03 	bl	80063f0 <HAL_TIM_Base_Init>
 80027ea:	b118      	cbz	r0, 80027f4 <HAL_InitTick+0x64>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
  }

  /* Return function status */
  return HAL_ERROR;
 80027ec:	2001      	movs	r0, #1
}
 80027ee:	b009      	add	sp, #36	; 0x24
 80027f0:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_TIM_Base_Start_IT(&htim4);
 80027f4:	4802      	ldr	r0, [pc, #8]	; (8002800 <HAL_InitTick+0x70>)
 80027f6:	f003 fcb7 	bl	8006168 <HAL_TIM_Base_Start_IT>
 80027fa:	e7f8      	b.n	80027ee <HAL_InitTick+0x5e>
 80027fc:	40021000 	.word	0x40021000
 8002800:	200005fc 	.word	0x200005fc
 8002804:	40000800 	.word	0x40000800
 8002808:	431bde83 	.word	0x431bde83

0800280c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800280c:	e7fe      	b.n	800280c <NMI_Handler>

0800280e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800280e:	e7fe      	b.n	800280e <HardFault_Handler>

08002810 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002810:	e7fe      	b.n	8002810 <MemManage_Handler>

08002812 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002812:	e7fe      	b.n	8002812 <BusFault_Handler>

08002814 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002814:	e7fe      	b.n	8002814 <UsageFault_Handler>

08002816 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002816:	4770      	bx	lr

08002818 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002818:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800281a:	4802      	ldr	r0, [pc, #8]	; (8002824 <TIM4_IRQHandler+0xc>)
 800281c:	f003 fcdc 	bl	80061d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002820:	bd08      	pop	{r3, pc}
 8002822:	bf00      	nop
 8002824:	200005fc 	.word	0x200005fc

08002828 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002828:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800282a:	4802      	ldr	r0, [pc, #8]	; (8002834 <I2C1_EV_IRQHandler+0xc>)
 800282c:	f002 fb20 	bl	8004e70 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002830:	bd08      	pop	{r3, pc}
 8002832:	bf00      	nop
 8002834:	20000530 	.word	0x20000530

08002838 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002838:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800283a:	4802      	ldr	r0, [pc, #8]	; (8002844 <I2C1_ER_IRQHandler+0xc>)
 800283c:	f003 f884 	bl	8005948 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002840:	bd08      	pop	{r3, pc}
 8002842:	bf00      	nop
 8002844:	20000530 	.word	0x20000530

08002848 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002848:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800284a:	4802      	ldr	r0, [pc, #8]	; (8002854 <USART1_IRQHandler+0xc>)
 800284c:	f004 f8a6 	bl	800699c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002850:	bd08      	pop	{r3, pc}
 8002852:	bf00      	nop
 8002854:	200006d0 	.word	0x200006d0

08002858 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8002858:	2001      	movs	r0, #1
 800285a:	4770      	bx	lr

0800285c <_kill>:

int _kill(int pid, int sig)
{
 800285c:	b508      	push	{r3, lr}
	errno = EINVAL;
 800285e:	f006 ffa3 	bl	80097a8 <__errno>
 8002862:	2316      	movs	r3, #22
 8002864:	6003      	str	r3, [r0, #0]
	return -1;
}
 8002866:	f04f 30ff 	mov.w	r0, #4294967295
 800286a:	bd08      	pop	{r3, pc}

0800286c <_exit>:

void _exit (int status)
{
 800286c:	b508      	push	{r3, lr}
	errno = EINVAL;
 800286e:	f006 ff9b 	bl	80097a8 <__errno>
 8002872:	2316      	movs	r3, #22
 8002874:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8002876:	e7fe      	b.n	8002876 <_exit+0xa>

08002878 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002878:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800287a:	1e16      	subs	r6, r2, #0
 800287c:	dd07      	ble.n	800288e <_read+0x16>
 800287e:	460c      	mov	r4, r1
 8002880:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 8002882:	f3af 8000 	nop.w
 8002886:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800288a:	42a5      	cmp	r5, r4
 800288c:	d1f9      	bne.n	8002882 <_read+0xa>
	}

return len;
}
 800288e:	4630      	mov	r0, r6
 8002890:	bd70      	pop	{r4, r5, r6, pc}

08002892 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002892:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002894:	1e16      	subs	r6, r2, #0
 8002896:	dd07      	ble.n	80028a8 <_write+0x16>
 8002898:	460c      	mov	r4, r1
 800289a:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 800289c:	f814 0b01 	ldrb.w	r0, [r4], #1
 80028a0:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028a4:	42a5      	cmp	r5, r4
 80028a6:	d1f9      	bne.n	800289c <_write+0xa>
	}
	return len;
}
 80028a8:	4630      	mov	r0, r6
 80028aa:	bd70      	pop	{r4, r5, r6, pc}

080028ac <_close>:

int _close(int file)
{
	return -1;
}
 80028ac:	f04f 30ff 	mov.w	r0, #4294967295
 80028b0:	4770      	bx	lr

080028b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80028b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80028b6:	604b      	str	r3, [r1, #4]
	return 0;
}
 80028b8:	2000      	movs	r0, #0
 80028ba:	4770      	bx	lr

080028bc <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80028bc:	2001      	movs	r0, #1
 80028be:	4770      	bx	lr

080028c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80028c0:	2000      	movs	r0, #0
 80028c2:	4770      	bx	lr

080028c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028c4:	b508      	push	{r3, lr}
 80028c6:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028c8:	4a0c      	ldr	r2, [pc, #48]	; (80028fc <_sbrk+0x38>)
 80028ca:	6812      	ldr	r2, [r2, #0]
 80028cc:	b152      	cbz	r2, 80028e4 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028ce:	4a0b      	ldr	r2, [pc, #44]	; (80028fc <_sbrk+0x38>)
 80028d0:	6810      	ldr	r0, [r2, #0]
 80028d2:	4403      	add	r3, r0
 80028d4:	4a0a      	ldr	r2, [pc, #40]	; (8002900 <_sbrk+0x3c>)
 80028d6:	490b      	ldr	r1, [pc, #44]	; (8002904 <_sbrk+0x40>)
 80028d8:	1a52      	subs	r2, r2, r1
 80028da:	4293      	cmp	r3, r2
 80028dc:	d806      	bhi.n	80028ec <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80028de:	4a07      	ldr	r2, [pc, #28]	; (80028fc <_sbrk+0x38>)
 80028e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 80028e2:	bd08      	pop	{r3, pc}
    __sbrk_heap_end = &_end;
 80028e4:	4a05      	ldr	r2, [pc, #20]	; (80028fc <_sbrk+0x38>)
 80028e6:	4908      	ldr	r1, [pc, #32]	; (8002908 <_sbrk+0x44>)
 80028e8:	6011      	str	r1, [r2, #0]
 80028ea:	e7f0      	b.n	80028ce <_sbrk+0xa>
    errno = ENOMEM;
 80028ec:	f006 ff5c 	bl	80097a8 <__errno>
 80028f0:	230c      	movs	r3, #12
 80028f2:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80028f4:	f04f 30ff 	mov.w	r0, #4294967295
 80028f8:	e7f3      	b.n	80028e2 <_sbrk+0x1e>
 80028fa:	bf00      	nop
 80028fc:	20000644 	.word	0x20000644
 8002900:	20005000 	.word	0x20005000
 8002904:	00000400 	.word	0x00000400
 8002908:	20002978 	.word	0x20002978

0800290c <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800290c:	4770      	bx	lr
	...

08002910 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002910:	b500      	push	{lr}
 8002912:	b08d      	sub	sp, #52	; 0x34

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002914:	2300      	movs	r3, #0
 8002916:	9306      	str	r3, [sp, #24]
 8002918:	930a      	str	r3, [sp, #40]	; 0x28
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800291a:	9301      	str	r3, [sp, #4]
 800291c:	9302      	str	r3, [sp, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800291e:	4814      	ldr	r0, [pc, #80]	; (8002970 <MX_TIM3_Init+0x60>)
 8002920:	4a14      	ldr	r2, [pc, #80]	; (8002974 <MX_TIM3_Init+0x64>)
 8002922:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 0;
 8002924:	6043      	str	r3, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002926:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 1000;
 8002928:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800292c:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800292e:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002930:	6183      	str	r3, [r0, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002932:	2301      	movs	r3, #1
 8002934:	9303      	str	r3, [sp, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8002936:	2102      	movs	r1, #2
 8002938:	9104      	str	r1, [sp, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800293a:	9305      	str	r3, [sp, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC1Filter = 6;
 800293c:	2206      	movs	r2, #6
 800293e:	9207      	str	r2, [sp, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8002940:	9108      	str	r1, [sp, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002942:	9309      	str	r3, [sp, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC2Filter = 6;
 8002944:	920b      	str	r2, [sp, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002946:	a903      	add	r1, sp, #12
 8002948:	f003 fd7e 	bl	8006448 <HAL_TIM_Encoder_Init>
 800294c:	b950      	cbnz	r0, 8002964 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800294e:	2300      	movs	r3, #0
 8002950:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002952:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002954:	a901      	add	r1, sp, #4
 8002956:	4806      	ldr	r0, [pc, #24]	; (8002970 <MX_TIM3_Init+0x60>)
 8002958:	f003 feae 	bl	80066b8 <HAL_TIMEx_MasterConfigSynchronization>
 800295c:	b928      	cbnz	r0, 800296a <MX_TIM3_Init+0x5a>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800295e:	b00d      	add	sp, #52	; 0x34
 8002960:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8002964:	f7ff fd50 	bl	8002408 <Error_Handler>
 8002968:	e7f1      	b.n	800294e <MX_TIM3_Init+0x3e>
    Error_Handler();
 800296a:	f7ff fd4d 	bl	8002408 <Error_Handler>
}
 800296e:	e7f6      	b.n	800295e <MX_TIM3_Init+0x4e>
 8002970:	20000648 	.word	0x20000648
 8002974:	40000400 	.word	0x40000400

08002978 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002978:	b500      	push	{lr}
 800297a:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800297c:	2300      	movs	r3, #0
 800297e:	9302      	str	r3, [sp, #8]
 8002980:	9303      	str	r3, [sp, #12]
 8002982:	9304      	str	r3, [sp, #16]
 8002984:	9305      	str	r3, [sp, #20]
  if(tim_encoderHandle->Instance==TIM3)
 8002986:	6802      	ldr	r2, [r0, #0]
 8002988:	4b13      	ldr	r3, [pc, #76]	; (80029d8 <HAL_TIM_Encoder_MspInit+0x60>)
 800298a:	429a      	cmp	r2, r3
 800298c:	d002      	beq.n	8002994 <HAL_TIM_Encoder_MspInit+0x1c>
  /* USER CODE BEGIN TIM3_MspInit 1 */
    HAL_TIM_Encoder_Start_IT(&htim3,TIM_CHANNEL_2);

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800298e:	b007      	add	sp, #28
 8002990:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002994:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 8002998:	69da      	ldr	r2, [r3, #28]
 800299a:	f042 0202 	orr.w	r2, r2, #2
 800299e:	61da      	str	r2, [r3, #28]
 80029a0:	69da      	ldr	r2, [r3, #28]
 80029a2:	f002 0202 	and.w	r2, r2, #2
 80029a6:	9200      	str	r2, [sp, #0]
 80029a8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029aa:	699a      	ldr	r2, [r3, #24]
 80029ac:	f042 0204 	orr.w	r2, r2, #4
 80029b0:	619a      	str	r2, [r3, #24]
 80029b2:	699b      	ldr	r3, [r3, #24]
 80029b4:	f003 0304 	and.w	r3, r3, #4
 80029b8:	9301      	str	r3, [sp, #4]
 80029ba:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80029bc:	23c0      	movs	r3, #192	; 0xc0
 80029be:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029c0:	2301      	movs	r3, #1
 80029c2:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029c4:	a902      	add	r1, sp, #8
 80029c6:	4805      	ldr	r0, [pc, #20]	; (80029dc <HAL_TIM_Encoder_MspInit+0x64>)
 80029c8:	f000 feb2 	bl	8003730 <HAL_GPIO_Init>
    HAL_TIM_Encoder_Start_IT(&htim3,TIM_CHANNEL_2);
 80029cc:	2104      	movs	r1, #4
 80029ce:	4804      	ldr	r0, [pc, #16]	; (80029e0 <HAL_TIM_Encoder_MspInit+0x68>)
 80029d0:	f003 fdff 	bl	80065d2 <HAL_TIM_Encoder_Start_IT>
}
 80029d4:	e7db      	b.n	800298e <HAL_TIM_Encoder_MspInit+0x16>
 80029d6:	bf00      	nop
 80029d8:	40000400 	.word	0x40000400
 80029dc:	40010800 	.word	0x40010800
 80029e0:	20000648 	.word	0x20000648

080029e4 <uart_pc_handle>:

/* Private user code ---------------------------------------------------------*/
void uart_pc_init 	(void)
{}
void uart_pc_handle	(void)
{
 80029e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80029e8:	b088      	sub	sp, #32

	sprintf((char*)data,	"%02d:%02d:%02d %02d.%02d.%02d %.2f %.2f   \n\r", 	timedata.hour,
																				timedata.min,
 80029ea:	4c13      	ldr	r4, [pc, #76]	; (8002a38 <uart_pc_handle+0x54>)
	sprintf((char*)data,	"%02d:%02d:%02d %02d.%02d.%02d %.2f %.2f   \n\r", 	timedata.hour,
 80029ec:	f894 8001 	ldrb.w	r8, [r4, #1]
 80029f0:	78a7      	ldrb	r7, [r4, #2]
 80029f2:	4d12      	ldr	r5, [pc, #72]	; (8002a3c <uart_pc_handle+0x58>)
																				timedata.sec,
																				timedata.date,
																				timedata.month,
																				timedata.year,
																				BME280_sensor.temperature,
																				BME280_sensor.pressure
 80029f4:	4e12      	ldr	r6, [pc, #72]	; (8002a40 <uart_pc_handle+0x5c>)
	sprintf((char*)data,	"%02d:%02d:%02d %02d.%02d.%02d %.2f %.2f   \n\r", 	timedata.hour,
 80029f6:	6870      	ldr	r0, [r6, #4]
 80029f8:	f7fd fd20 	bl	800043c <__aeabi_f2d>
 80029fc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8002a00:	6830      	ldr	r0, [r6, #0]
 8002a02:	f7fd fd1b 	bl	800043c <__aeabi_f2d>
 8002a06:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002a0a:	88e3      	ldrh	r3, [r4, #6]
 8002a0c:	9303      	str	r3, [sp, #12]
 8002a0e:	7923      	ldrb	r3, [r4, #4]
 8002a10:	9302      	str	r3, [sp, #8]
 8002a12:	78e3      	ldrb	r3, [r4, #3]
 8002a14:	9301      	str	r3, [sp, #4]
 8002a16:	7823      	ldrb	r3, [r4, #0]
 8002a18:	9300      	str	r3, [sp, #0]
 8002a1a:	4643      	mov	r3, r8
 8002a1c:	463a      	mov	r2, r7
 8002a1e:	4909      	ldr	r1, [pc, #36]	; (8002a44 <uart_pc_handle+0x60>)
 8002a20:	4628      	mov	r0, r5
 8002a22:	f006 fdc7 	bl	80095b4 <siprintf>
//	data[2] = timedata.sec;
//	data[3] = timedata.date;
//	data[4] = timedata.month;
//	data[5] = timedata.year;

	HAL_UART_Transmit_IT(&huart2, data, sizeof(data));
 8002a26:	2240      	movs	r2, #64	; 0x40
 8002a28:	4629      	mov	r1, r5
 8002a2a:	4807      	ldr	r0, [pc, #28]	; (8002a48 <uart_pc_handle+0x64>)
 8002a2c:	f003 ff1e 	bl	800686c <HAL_UART_Transmit_IT>
}
 8002a30:	b008      	add	sp, #32
 8002a32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002a36:	bf00      	nop
 8002a38:	200005e8 	.word	0x200005e8
 8002a3c:	20000690 	.word	0x20000690
 8002a40:	200005f0 	.word	0x200005f0
 8002a44:	0800c3f8 	.word	0x0800c3f8
 8002a48:	20000718 	.word	0x20000718

08002a4c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002a4c:	b508      	push	{r3, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002a4e:	480a      	ldr	r0, [pc, #40]	; (8002a78 <MX_USART1_UART_Init+0x2c>)
 8002a50:	4b0a      	ldr	r3, [pc, #40]	; (8002a7c <MX_USART1_UART_Init+0x30>)
 8002a52:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 9600;
 8002a54:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8002a58:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002a5e:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002a60:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002a62:	220c      	movs	r2, #12
 8002a64:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a66:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a68:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002a6a:	f003 fecf 	bl	800680c <HAL_UART_Init>
 8002a6e:	b900      	cbnz	r0, 8002a72 <MX_USART1_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002a70:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002a72:	f7ff fcc9 	bl	8002408 <Error_Handler>
}
 8002a76:	e7fb      	b.n	8002a70 <MX_USART1_UART_Init+0x24>
 8002a78:	200006d0 	.word	0x200006d0
 8002a7c:	40013800 	.word	0x40013800

08002a80 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002a80:	b508      	push	{r3, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002a82:	480a      	ldr	r0, [pc, #40]	; (8002aac <MX_USART2_UART_Init+0x2c>)
 8002a84:	4b0a      	ldr	r3, [pc, #40]	; (8002ab0 <MX_USART2_UART_Init+0x30>)
 8002a86:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 9600;
 8002a88:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8002a8c:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002a92:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002a94:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002a96:	220c      	movs	r2, #12
 8002a98:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a9a:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a9c:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002a9e:	f003 feb5 	bl	800680c <HAL_UART_Init>
 8002aa2:	b900      	cbnz	r0, 8002aa6 <MX_USART2_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002aa4:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002aa6:	f7ff fcaf 	bl	8002408 <Error_Handler>
}
 8002aaa:	e7fb      	b.n	8002aa4 <MX_USART2_UART_Init+0x24>
 8002aac:	20000718 	.word	0x20000718
 8002ab0:	40004400 	.word	0x40004400

08002ab4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002ab4:	b530      	push	{r4, r5, lr}
 8002ab6:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ab8:	2300      	movs	r3, #0
 8002aba:	9304      	str	r3, [sp, #16]
 8002abc:	9305      	str	r3, [sp, #20]
 8002abe:	9306      	str	r3, [sp, #24]
 8002ac0:	9307      	str	r3, [sp, #28]
  if(uartHandle->Instance==USART1)
 8002ac2:	6803      	ldr	r3, [r0, #0]
 8002ac4:	4a30      	ldr	r2, [pc, #192]	; (8002b88 <HAL_UART_MspInit+0xd4>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d004      	beq.n	8002ad4 <HAL_UART_MspInit+0x20>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(uartHandle->Instance==USART2)
 8002aca:	4a30      	ldr	r2, [pc, #192]	; (8002b8c <HAL_UART_MspInit+0xd8>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d033      	beq.n	8002b38 <HAL_UART_MspInit+0x84>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002ad0:	b009      	add	sp, #36	; 0x24
 8002ad2:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8002ad4:	4b2e      	ldr	r3, [pc, #184]	; (8002b90 <HAL_UART_MspInit+0xdc>)
 8002ad6:	699a      	ldr	r2, [r3, #24]
 8002ad8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002adc:	619a      	str	r2, [r3, #24]
 8002ade:	699a      	ldr	r2, [r3, #24]
 8002ae0:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002ae4:	9200      	str	r2, [sp, #0]
 8002ae6:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ae8:	699a      	ldr	r2, [r3, #24]
 8002aea:	f042 0204 	orr.w	r2, r2, #4
 8002aee:	619a      	str	r2, [r3, #24]
 8002af0:	699b      	ldr	r3, [r3, #24]
 8002af2:	f003 0304 	and.w	r3, r3, #4
 8002af6:	9301      	str	r3, [sp, #4]
 8002af8:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002afa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002afe:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b00:	2302      	movs	r3, #2
 8002b02:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b04:	2303      	movs	r3, #3
 8002b06:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b08:	4d22      	ldr	r5, [pc, #136]	; (8002b94 <HAL_UART_MspInit+0xe0>)
 8002b0a:	a904      	add	r1, sp, #16
 8002b0c:	4628      	mov	r0, r5
 8002b0e:	f000 fe0f 	bl	8003730 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002b12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b16:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b18:	2400      	movs	r4, #0
 8002b1a:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b1c:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b1e:	a904      	add	r1, sp, #16
 8002b20:	4628      	mov	r0, r5
 8002b22:	f000 fe05 	bl	8003730 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002b26:	4622      	mov	r2, r4
 8002b28:	2105      	movs	r1, #5
 8002b2a:	2025      	movs	r0, #37	; 0x25
 8002b2c:	f000 fd4a 	bl	80035c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002b30:	2025      	movs	r0, #37	; 0x25
 8002b32:	f000 fd7d 	bl	8003630 <HAL_NVIC_EnableIRQ>
 8002b36:	e7cb      	b.n	8002ad0 <HAL_UART_MspInit+0x1c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b38:	4b15      	ldr	r3, [pc, #84]	; (8002b90 <HAL_UART_MspInit+0xdc>)
 8002b3a:	69da      	ldr	r2, [r3, #28]
 8002b3c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002b40:	61da      	str	r2, [r3, #28]
 8002b42:	69da      	ldr	r2, [r3, #28]
 8002b44:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8002b48:	9202      	str	r2, [sp, #8]
 8002b4a:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b4c:	699a      	ldr	r2, [r3, #24]
 8002b4e:	f042 0204 	orr.w	r2, r2, #4
 8002b52:	619a      	str	r2, [r3, #24]
 8002b54:	699b      	ldr	r3, [r3, #24]
 8002b56:	f003 0304 	and.w	r3, r3, #4
 8002b5a:	9303      	str	r3, [sp, #12]
 8002b5c:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002b5e:	2304      	movs	r3, #4
 8002b60:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b62:	2302      	movs	r3, #2
 8002b64:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b66:	2303      	movs	r3, #3
 8002b68:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b6a:	4c0a      	ldr	r4, [pc, #40]	; (8002b94 <HAL_UART_MspInit+0xe0>)
 8002b6c:	a904      	add	r1, sp, #16
 8002b6e:	4620      	mov	r0, r4
 8002b70:	f000 fdde 	bl	8003730 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002b74:	2308      	movs	r3, #8
 8002b76:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b7c:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b7e:	a904      	add	r1, sp, #16
 8002b80:	4620      	mov	r0, r4
 8002b82:	f000 fdd5 	bl	8003730 <HAL_GPIO_Init>
}
 8002b86:	e7a3      	b.n	8002ad0 <HAL_UART_MspInit+0x1c>
 8002b88:	40013800 	.word	0x40013800
 8002b8c:	40004400 	.word	0x40004400
 8002b90:	40021000 	.word	0x40021000
 8002b94:	40010800 	.word	0x40010800

08002b98 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002b98:	f7ff feb8 	bl	800290c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b9c:	480b      	ldr	r0, [pc, #44]	; (8002bcc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002b9e:	490c      	ldr	r1, [pc, #48]	; (8002bd0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002ba0:	4a0c      	ldr	r2, [pc, #48]	; (8002bd4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002ba2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ba4:	e002      	b.n	8002bac <LoopCopyDataInit>

08002ba6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ba6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ba8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002baa:	3304      	adds	r3, #4

08002bac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002bac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002bae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002bb0:	d3f9      	bcc.n	8002ba6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002bb2:	4a09      	ldr	r2, [pc, #36]	; (8002bd8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002bb4:	4c09      	ldr	r4, [pc, #36]	; (8002bdc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002bb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002bb8:	e001      	b.n	8002bbe <LoopFillZerobss>

08002bba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002bba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002bbc:	3204      	adds	r2, #4

08002bbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002bbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002bc0:	d3fb      	bcc.n	8002bba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002bc2:	f006 fdf7 	bl	80097b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002bc6:	f7ff fbf6 	bl	80023b6 <main>
  bx lr
 8002bca:	4770      	bx	lr
  ldr r0, =_sdata
 8002bcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002bd0:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002bd4:	0800d004 	.word	0x0800d004
  ldr r2, =_sbss
 8002bd8:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002bdc:	20002978 	.word	0x20002978

08002be0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002be0:	e7fe      	b.n	8002be0 <ADC1_2_IRQHandler>
	...

08002be4 <DS1307_SetRegByte>:
/**
 * @brief Sets the byte in the designated DS1307 register to value.
 * @param regAddr Register address to write.
 * @param val Value to set, 0 to 255.
 */
void DS1307_SetRegByte(uint8_t regAddr, uint8_t val) {
 8002be4:	b500      	push	{lr}
 8002be6:	b085      	sub	sp, #20
	uint8_t bytes[2] = { regAddr, val };
 8002be8:	f88d 000c 	strb.w	r0, [sp, #12]
 8002bec:	f88d 100d 	strb.w	r1, [sp, #13]
	HAL_I2C_Master_Transmit(_ds1307_ui2c, DS1307_I2C_ADDR << 1, bytes, 2, DS1307_TIMEOUT);
 8002bf0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002bf4:	9300      	str	r3, [sp, #0]
 8002bf6:	2302      	movs	r3, #2
 8002bf8:	aa03      	add	r2, sp, #12
 8002bfa:	21d0      	movs	r1, #208	; 0xd0
 8002bfc:	4803      	ldr	r0, [pc, #12]	; (8002c0c <DS1307_SetRegByte+0x28>)
 8002bfe:	6800      	ldr	r0, [r0, #0]
 8002c00:	f001 fa14 	bl	800402c <HAL_I2C_Master_Transmit>
}
 8002c04:	b005      	add	sp, #20
 8002c06:	f85d fb04 	ldr.w	pc, [sp], #4
 8002c0a:	bf00      	nop
 8002c0c:	20000760 	.word	0x20000760

08002c10 <DS1307_GetRegByte>:
/**
 * @brief Gets the byte in the designated DS1307 register.
 * @param regAddr Register address to read.
 * @return Value stored in the register, 0 to 255.
 */
uint8_t DS1307_GetRegByte(uint8_t regAddr) {
 8002c10:	b530      	push	{r4, r5, lr}
 8002c12:	b087      	sub	sp, #28
 8002c14:	f88d 000f 	strb.w	r0, [sp, #15]
	uint8_t val;
	HAL_I2C_Master_Transmit(_ds1307_ui2c, DS1307_I2C_ADDR << 1, &regAddr, 1, DS1307_TIMEOUT);
 8002c18:	4c0b      	ldr	r4, [pc, #44]	; (8002c48 <DS1307_GetRegByte+0x38>)
 8002c1a:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8002c1e:	9500      	str	r5, [sp, #0]
 8002c20:	2301      	movs	r3, #1
 8002c22:	f10d 020f 	add.w	r2, sp, #15
 8002c26:	21d0      	movs	r1, #208	; 0xd0
 8002c28:	6820      	ldr	r0, [r4, #0]
 8002c2a:	f001 f9ff 	bl	800402c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_ds1307_ui2c, DS1307_I2C_ADDR << 1, &val, 1, DS1307_TIMEOUT);
 8002c2e:	9500      	str	r5, [sp, #0]
 8002c30:	2301      	movs	r3, #1
 8002c32:	f10d 0217 	add.w	r2, sp, #23
 8002c36:	21d0      	movs	r1, #208	; 0xd0
 8002c38:	6820      	ldr	r0, [r4, #0]
 8002c3a:	f001 fafb 	bl	8004234 <HAL_I2C_Master_Receive>
	return val;
}
 8002c3e:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8002c42:	b007      	add	sp, #28
 8002c44:	bd30      	pop	{r4, r5, pc}
 8002c46:	bf00      	nop
 8002c48:	20000760 	.word	0x20000760

08002c4c <DS1307_SetClockHalt>:
void DS1307_SetClockHalt(uint8_t halt) {
 8002c4c:	b510      	push	{r4, lr}
 8002c4e:	4604      	mov	r4, r0
	DS1307_SetRegByte(DS1307_REG_SECOND, ch | (DS1307_GetRegByte(DS1307_REG_SECOND) & 0x7f));
 8002c50:	2000      	movs	r0, #0
 8002c52:	f7ff ffdd 	bl	8002c10 <DS1307_GetRegByte>
	uint8_t ch = (halt ? 1 << 7 : 0);
 8002c56:	3c00      	subs	r4, #0
 8002c58:	bf18      	it	ne
 8002c5a:	2401      	movne	r4, #1
	DS1307_SetRegByte(DS1307_REG_SECOND, ch | (DS1307_GetRegByte(DS1307_REG_SECOND) & 0x7f));
 8002c5c:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 8002c60:	ea41 11c4 	orr.w	r1, r1, r4, lsl #7
 8002c64:	2000      	movs	r0, #0
 8002c66:	f7ff ffbd 	bl	8002be4 <DS1307_SetRegByte>
}
 8002c6a:	bd10      	pop	{r4, pc}

08002c6c <DS1307_Init>:
void DS1307_Init(I2C_HandleTypeDef *hi2c) {
 8002c6c:	b508      	push	{r3, lr}
	_ds1307_ui2c = hi2c;
 8002c6e:	4b03      	ldr	r3, [pc, #12]	; (8002c7c <DS1307_Init+0x10>)
 8002c70:	6018      	str	r0, [r3, #0]
	DS1307_SetClockHalt(0);
 8002c72:	2000      	movs	r0, #0
 8002c74:	f7ff ffea 	bl	8002c4c <DS1307_SetClockHalt>
}
 8002c78:	bd08      	pop	{r3, pc}
 8002c7a:	bf00      	nop
 8002c7c:	20000760 	.word	0x20000760

08002c80 <DS1307_GetClockHalt>:
uint8_t DS1307_GetClockHalt(void) {
 8002c80:	b508      	push	{r3, lr}
	return (DS1307_GetRegByte(DS1307_REG_SECOND) & 0x80) >> 7;
 8002c82:	2000      	movs	r0, #0
 8002c84:	f7ff ffc4 	bl	8002c10 <DS1307_GetRegByte>
}
 8002c88:	f3c0 10c7 	ubfx	r0, r0, #7, #8
 8002c8c:	bd08      	pop	{r3, pc}

08002c8e <DS1307_DecodeBCD>:
 * @brief Decodes the raw binary value stored in registers to decimal format.
 * @param bin Binary-coded decimal value retrieved from register, 0 to 255.
 * @return Decoded decimal value.
 */
uint8_t DS1307_DecodeBCD(uint8_t bin) {
	return (((bin & 0xf0) >> 4) * 10) + (bin & 0x0f);
 8002c8e:	0903      	lsrs	r3, r0, #4
 8002c90:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002c94:	f000 000f 	and.w	r0, r0, #15
 8002c98:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 8002c9c:	b2c0      	uxtb	r0, r0
 8002c9e:	4770      	bx	lr

08002ca0 <DS1307_GetDate>:
uint8_t DS1307_GetDate(void) {
 8002ca0:	b508      	push	{r3, lr}
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_DATE));
 8002ca2:	2004      	movs	r0, #4
 8002ca4:	f7ff ffb4 	bl	8002c10 <DS1307_GetRegByte>
 8002ca8:	f7ff fff1 	bl	8002c8e <DS1307_DecodeBCD>
}
 8002cac:	bd08      	pop	{r3, pc}

08002cae <DS1307_GetMonth>:
uint8_t DS1307_GetMonth(void) {
 8002cae:	b508      	push	{r3, lr}
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_MONTH));
 8002cb0:	2005      	movs	r0, #5
 8002cb2:	f7ff ffad 	bl	8002c10 <DS1307_GetRegByte>
 8002cb6:	f7ff ffea 	bl	8002c8e <DS1307_DecodeBCD>
}
 8002cba:	bd08      	pop	{r3, pc}

08002cbc <DS1307_GetYear>:
uint16_t DS1307_GetYear(void) {
 8002cbc:	b510      	push	{r4, lr}
	uint16_t cen = DS1307_GetRegByte(DS1307_REG_CENT) * 100;
 8002cbe:	2010      	movs	r0, #16
 8002cc0:	f7ff ffa6 	bl	8002c10 <DS1307_GetRegByte>
 8002cc4:	4604      	mov	r4, r0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_YEAR)) + cen;
 8002cc6:	2006      	movs	r0, #6
 8002cc8:	f7ff ffa2 	bl	8002c10 <DS1307_GetRegByte>
 8002ccc:	f7ff ffdf 	bl	8002c8e <DS1307_DecodeBCD>
	uint16_t cen = DS1307_GetRegByte(DS1307_REG_CENT) * 100;
 8002cd0:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8002cd4:	eb04 0484 	add.w	r4, r4, r4, lsl #2
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_YEAR)) + cen;
 8002cd8:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
 8002cdc:	b280      	uxth	r0, r0
 8002cde:	bd10      	pop	{r4, pc}

08002ce0 <DS1307_GetHour>:
uint8_t DS1307_GetHour(void) {
 8002ce0:	b508      	push	{r3, lr}
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_HOUR) & 0x3f);
 8002ce2:	2002      	movs	r0, #2
 8002ce4:	f7ff ff94 	bl	8002c10 <DS1307_GetRegByte>
 8002ce8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8002cec:	f7ff ffcf 	bl	8002c8e <DS1307_DecodeBCD>
}
 8002cf0:	bd08      	pop	{r3, pc}

08002cf2 <DS1307_GetMinute>:
uint8_t DS1307_GetMinute(void) {
 8002cf2:	b508      	push	{r3, lr}
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_MINUTE));
 8002cf4:	2001      	movs	r0, #1
 8002cf6:	f7ff ff8b 	bl	8002c10 <DS1307_GetRegByte>
 8002cfa:	f7ff ffc8 	bl	8002c8e <DS1307_DecodeBCD>
}
 8002cfe:	bd08      	pop	{r3, pc}

08002d00 <DS1307_GetSecond>:
uint8_t DS1307_GetSecond(void) {
 8002d00:	b508      	push	{r3, lr}
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_SECOND) & 0x7f);
 8002d02:	2000      	movs	r0, #0
 8002d04:	f7ff ff84 	bl	8002c10 <DS1307_GetRegByte>
 8002d08:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8002d0c:	f7ff ffbf 	bl	8002c8e <DS1307_DecodeBCD>
}
 8002d10:	bd08      	pop	{r3, pc}
	...

08002d14 <DS1307_EncodeBCD>:
 * @brief Encodes a decimal number to binaty-coded decimal for storage in registers.
 * @param dec Decimal number to encode.
 * @return Encoded binary-coded decimal value.
 */
uint8_t DS1307_EncodeBCD(uint8_t dec) {
	return (dec % 10 + ((dec / 10) << 4));
 8002d14:	4b05      	ldr	r3, [pc, #20]	; (8002d2c <DS1307_EncodeBCD+0x18>)
 8002d16:	fba3 2300 	umull	r2, r3, r3, r0
 8002d1a:	08db      	lsrs	r3, r3, #3
 8002d1c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8002d20:	eba0 0042 	sub.w	r0, r0, r2, lsl #1
 8002d24:	eb00 1003 	add.w	r0, r0, r3, lsl #4
}
 8002d28:	b2c0      	uxtb	r0, r0
 8002d2a:	4770      	bx	lr
 8002d2c:	cccccccd 	.word	0xcccccccd

08002d30 <DS1307_SetDate>:
void DS1307_SetDate(uint8_t date) {
 8002d30:	b508      	push	{r3, lr}
	DS1307_SetRegByte(DS1307_REG_DATE, DS1307_EncodeBCD(date));
 8002d32:	f7ff ffef 	bl	8002d14 <DS1307_EncodeBCD>
 8002d36:	4601      	mov	r1, r0
 8002d38:	2004      	movs	r0, #4
 8002d3a:	f7ff ff53 	bl	8002be4 <DS1307_SetRegByte>
}
 8002d3e:	bd08      	pop	{r3, pc}

08002d40 <DS1307_SetMonth>:
void DS1307_SetMonth(uint8_t month) {
 8002d40:	b508      	push	{r3, lr}
	DS1307_SetRegByte(DS1307_REG_MONTH, DS1307_EncodeBCD(month));
 8002d42:	f7ff ffe7 	bl	8002d14 <DS1307_EncodeBCD>
 8002d46:	4601      	mov	r1, r0
 8002d48:	2005      	movs	r0, #5
 8002d4a:	f7ff ff4b 	bl	8002be4 <DS1307_SetRegByte>
}
 8002d4e:	bd08      	pop	{r3, pc}

08002d50 <DS1307_SetYear>:
void DS1307_SetYear(uint16_t year) {
 8002d50:	b538      	push	{r3, r4, r5, lr}
 8002d52:	4604      	mov	r4, r0
	DS1307_SetRegByte(DS1307_REG_CENT, year / 100);
 8002d54:	4909      	ldr	r1, [pc, #36]	; (8002d7c <DS1307_SetYear+0x2c>)
 8002d56:	fba1 3100 	umull	r3, r1, r1, r0
 8002d5a:	094d      	lsrs	r5, r1, #5
 8002d5c:	f3c1 1147 	ubfx	r1, r1, #5, #8
 8002d60:	2010      	movs	r0, #16
 8002d62:	f7ff ff3f 	bl	8002be4 <DS1307_SetRegByte>
	DS1307_SetRegByte(DS1307_REG_YEAR, DS1307_EncodeBCD(year % 100));
 8002d66:	2364      	movs	r3, #100	; 0x64
 8002d68:	fb03 4015 	mls	r0, r3, r5, r4
 8002d6c:	b2c0      	uxtb	r0, r0
 8002d6e:	f7ff ffd1 	bl	8002d14 <DS1307_EncodeBCD>
 8002d72:	4601      	mov	r1, r0
 8002d74:	2006      	movs	r0, #6
 8002d76:	f7ff ff35 	bl	8002be4 <DS1307_SetRegByte>
}
 8002d7a:	bd38      	pop	{r3, r4, r5, pc}
 8002d7c:	51eb851f 	.word	0x51eb851f

08002d80 <DS1307_SetHour>:
void DS1307_SetHour(uint8_t hour_24mode) {
 8002d80:	b508      	push	{r3, lr}
	DS1307_SetRegByte(DS1307_REG_HOUR, DS1307_EncodeBCD(hour_24mode & 0x3f));
 8002d82:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8002d86:	f7ff ffc5 	bl	8002d14 <DS1307_EncodeBCD>
 8002d8a:	4601      	mov	r1, r0
 8002d8c:	2002      	movs	r0, #2
 8002d8e:	f7ff ff29 	bl	8002be4 <DS1307_SetRegByte>
}
 8002d92:	bd08      	pop	{r3, pc}

08002d94 <DS1307_SetMinute>:
void DS1307_SetMinute(uint8_t minute) {
 8002d94:	b508      	push	{r3, lr}
	DS1307_SetRegByte(DS1307_REG_MINUTE, DS1307_EncodeBCD(minute));
 8002d96:	f7ff ffbd 	bl	8002d14 <DS1307_EncodeBCD>
 8002d9a:	4601      	mov	r1, r0
 8002d9c:	2001      	movs	r0, #1
 8002d9e:	f7ff ff21 	bl	8002be4 <DS1307_SetRegByte>
}
 8002da2:	bd08      	pop	{r3, pc}

08002da4 <DS1307_SetSecond>:
void DS1307_SetSecond(uint8_t second) {
 8002da4:	b510      	push	{r4, lr}
 8002da6:	4604      	mov	r4, r0
	uint8_t ch = DS1307_GetClockHalt();
 8002da8:	f7ff ff6a 	bl	8002c80 <DS1307_GetClockHalt>
	DS1307_SetRegByte(DS1307_REG_SECOND, DS1307_EncodeBCD(second | ch));
 8002dac:	4320      	orrs	r0, r4
 8002dae:	b2c0      	uxtb	r0, r0
 8002db0:	f7ff ffb0 	bl	8002d14 <DS1307_EncodeBCD>
 8002db4:	4601      	mov	r1, r0
 8002db6:	2000      	movs	r0, #0
 8002db8:	f7ff ff14 	bl	8002be4 <DS1307_SetRegByte>
}
 8002dbc:	bd10      	pop	{r4, pc}
	...

08002dc0 <strtoke>:
/*
 * Behaves like strtok() except that it returns empty tokens also.
 * Found on https://stackoverflow.com/questions/42315585/split-string-into-tokens-in-c-when-there-are-2-delimiters-in-a-row
 */
char* strtoke(char *str, const char *delim)
{
 8002dc0:	b510      	push	{r4, lr}
  static char *start = NULL; /* stores string str for consecutive calls */
  char *token = NULL; /* found token */
  /* assign new start in case */
  if (str) start = str;
 8002dc2:	4604      	mov	r4, r0
 8002dc4:	b150      	cbz	r0, 8002ddc <strtoke+0x1c>
  /* check whether text to parse left */
  if (!start) return NULL;
  /* remember current start as found token */
  token = start;
  /* find next occurrence of delim */
  start = strpbrk(start, delim);
 8002dc6:	4620      	mov	r0, r4
 8002dc8:	f006 fc8b 	bl	80096e2 <strpbrk>
  /* replace delim with terminator and move start to follower */
  if (start) *start++ = '\0';
 8002dcc:	b160      	cbz	r0, 8002de8 <strtoke+0x28>
 8002dce:	1c41      	adds	r1, r0, #1
 8002dd0:	4a08      	ldr	r2, [pc, #32]	; (8002df4 <strtoke+0x34>)
 8002dd2:	6011      	str	r1, [r2, #0]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	7002      	strb	r2, [r0, #0]
 8002dd8:	4620      	mov	r0, r4
  /* done */
  return token;
}
 8002dda:	bd10      	pop	{r4, pc}
  if (!start) return NULL;
 8002ddc:	4b05      	ldr	r3, [pc, #20]	; (8002df4 <strtoke+0x34>)
 8002dde:	681c      	ldr	r4, [r3, #0]
 8002de0:	2c00      	cmp	r4, #0
 8002de2:	d1f0      	bne.n	8002dc6 <strtoke+0x6>
 8002de4:	4620      	mov	r0, r4
 8002de6:	e7f8      	b.n	8002dda <strtoke+0x1a>
  start = strpbrk(start, delim);
 8002de8:	4b02      	ldr	r3, [pc, #8]	; (8002df4 <strtoke+0x34>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	601a      	str	r2, [r3, #0]
 8002dee:	4620      	mov	r0, r4
 8002df0:	e7f3      	b.n	8002dda <strtoke+0x1a>
 8002df2:	bf00      	nop
 8002df4:	20000954 	.word	0x20000954

08002df8 <NEO6_GetCharFromBuffer>:
	HAL_UART_Receive_IT(GpsStateHandler->neo6_huart, (uint8_t*)&UartReceivedChar, 1);
}

int NEO6_GetCharFromBuffer(NEO6_State *GpsStateHandler)
{
	if(GpsStateHandler->UartBufferHead == GpsStateHandler->UartBufferTail)
 8002df8:	f890 3105 	ldrb.w	r3, [r0, #261]	; 0x105
 8002dfc:	f890 2104 	ldrb.w	r2, [r0, #260]	; 0x104
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d00a      	beq.n	8002e1a <NEO6_GetCharFromBuffer+0x22>
	{
		return -1; // error - no char to return
	}
	GpsStateHandler->UartBufferTail = (GpsStateHandler->UartBufferTail + 1) % GPS_UART_BUFFER_SIZE;
 8002e04:	3301      	adds	r3, #1
 8002e06:	425a      	negs	r2, r3
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	b2d2      	uxtb	r2, r2
 8002e0c:	bf58      	it	pl
 8002e0e:	4253      	negpl	r3, r2
 8002e10:	f880 3105 	strb.w	r3, [r0, #261]	; 0x105

	return GpsStateHandler->UartBuffer[GpsStateHandler->UartBufferTail];
 8002e14:	4418      	add	r0, r3
 8002e16:	7900      	ldrb	r0, [r0, #4]
 8002e18:	4770      	bx	lr
		return -1; // error - no char to return
 8002e1a:	f04f 30ff 	mov.w	r0, #4294967295
}
 8002e1e:	4770      	bx	lr

08002e20 <NEO6_GetLineFromBuffer>:

int NEO6_GetLineFromBuffer(NEO6_State *GpsStateHandler)
{
 8002e20:	b538      	push	{r3, r4, r5, lr}
	char TempChar;
	char* LinePointer = (char*)GpsStateHandler->WorkingBuffer;
	if(GpsStateHandler->UartBufferLines)
 8002e22:	f890 3106 	ldrb.w	r3, [r0, #262]	; 0x106
 8002e26:	b1a3      	cbz	r3, 8002e52 <NEO6_GetLineFromBuffer+0x32>
 8002e28:	4604      	mov	r4, r0
	char* LinePointer = (char*)GpsStateHandler->WorkingBuffer;
 8002e2a:	f200 1507 	addw	r5, r0, #263	; 0x107
 8002e2e:	e001      	b.n	8002e34 <NEO6_GetLineFromBuffer+0x14>
		{
			if(TempChar == 13)
			{
				break;
			}
			*LinePointer = TempChar;
 8002e30:	f805 0b01 	strb.w	r0, [r5], #1
		while((TempChar = NEO6_GetCharFromBuffer(GpsStateHandler)))
 8002e34:	4620      	mov	r0, r4
 8002e36:	f7ff ffdf 	bl	8002df8 <NEO6_GetCharFromBuffer>
 8002e3a:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 8002e3e:	d001      	beq.n	8002e44 <NEO6_GetLineFromBuffer+0x24>
			if(TempChar == 13)
 8002e40:	280d      	cmp	r0, #13
 8002e42:	d1f5      	bne.n	8002e30 <NEO6_GetLineFromBuffer+0x10>
			LinePointer++;
		}
		*LinePointer = 0; // end of cstring
 8002e44:	2300      	movs	r3, #0
 8002e46:	702b      	strb	r3, [r5, #0]
		GpsStateHandler->UartBufferLines--; // decrement line counter
 8002e48:	f894 3106 	ldrb.w	r3, [r4, #262]	; 0x106
 8002e4c:	3b01      	subs	r3, #1
 8002e4e:	f884 3106 	strb.w	r3, [r4, #262]	; 0x106
	}
	return 0;
}
 8002e52:	2000      	movs	r0, #0
 8002e54:	bd38      	pop	{r3, r4, r5, pc}
	...

08002e58 <NEO6_ParseGPRMC>:

//
// Recommended minimum specific GPS/Transit data
//
void NEO6_ParseGPRMC(NEO6_State *GpsStateHandler)
{
 8002e58:	b538      	push	{r3, r4, r5, lr}
 8002e5a:	4604      	mov	r4, r0

	char *ParsePoiner;
	uint32_t Temp;

	// Time of FIX
	ParsePoiner = strtoke(NULL, ",");
 8002e5c:	493f      	ldr	r1, [pc, #252]	; (8002f5c <NEO6_ParseGPRMC+0x104>)
 8002e5e:	2000      	movs	r0, #0
 8002e60:	f7ff ffae 	bl	8002dc0 <strtoke>
	if(strlen(ParsePoiner) > 0)
 8002e64:	7803      	ldrb	r3, [r0, #0]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d132      	bne.n	8002ed0 <NEO6_ParseGPRMC+0x78>
		GpsStateHandler->Second = Temp % 100;
		GpsStateHandler->Minute = (Temp / 100) % 100;
		GpsStateHandler->Hour = (Temp / 10000) % 100;
	}
	// Navigation receiver warning A = OK, V = warning
	ParsePoiner = strtoke(NULL, ",");
 8002e6a:	4d3c      	ldr	r5, [pc, #240]	; (8002f5c <NEO6_ParseGPRMC+0x104>)
 8002e6c:	4629      	mov	r1, r5
 8002e6e:	2000      	movs	r0, #0
 8002e70:	f7ff ffa6 	bl	8002dc0 <strtoke>
	// Latitude
	ParsePoiner = strtoke(NULL, ",");
 8002e74:	4629      	mov	r1, r5
 8002e76:	2000      	movs	r0, #0
 8002e78:	f7ff ffa2 	bl	8002dc0 <strtoke>
	if(strlen(ParsePoiner) > 0)
 8002e7c:	7803      	ldrb	r3, [r0, #0]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d144      	bne.n	8002f0c <NEO6_ParseGPRMC+0xb4>
	{
		GpsStateHandler->Latitude = atof(ParsePoiner);
	}
	// Latitude Direction
	ParsePoiner = strtoke(NULL, ",");
 8002e82:	4936      	ldr	r1, [pc, #216]	; (8002f5c <NEO6_ParseGPRMC+0x104>)
 8002e84:	2000      	movs	r0, #0
 8002e86:	f7ff ff9b 	bl	8002dc0 <strtoke>
	if(strlen(ParsePoiner) > 0)
 8002e8a:	7803      	ldrb	r3, [r0, #0]
 8002e8c:	b10b      	cbz	r3, 8002e92 <NEO6_ParseGPRMC+0x3a>
	{
		GpsStateHandler->LatitudeDirection = *ParsePoiner;
 8002e8e:	f884 3198 	strb.w	r3, [r4, #408]	; 0x198
	}
	// Longnitude
	ParsePoiner = strtoke(NULL, ",");
 8002e92:	4932      	ldr	r1, [pc, #200]	; (8002f5c <NEO6_ParseGPRMC+0x104>)
 8002e94:	2000      	movs	r0, #0
 8002e96:	f7ff ff93 	bl	8002dc0 <strtoke>
	if(strlen(ParsePoiner) > 0)
 8002e9a:	7803      	ldrb	r3, [r0, #0]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d13a      	bne.n	8002f16 <NEO6_ParseGPRMC+0xbe>
	{
		GpsStateHandler->Longitude = atof(ParsePoiner);
	}
	// Longnitude Direction
	ParsePoiner = strtoke(NULL, ",");
 8002ea0:	492e      	ldr	r1, [pc, #184]	; (8002f5c <NEO6_ParseGPRMC+0x104>)
 8002ea2:	2000      	movs	r0, #0
 8002ea4:	f7ff ff8c 	bl	8002dc0 <strtoke>
	if(strlen(ParsePoiner) > 0)
 8002ea8:	7803      	ldrb	r3, [r0, #0]
 8002eaa:	b10b      	cbz	r3, 8002eb0 <NEO6_ParseGPRMC+0x58>
	{
		GpsStateHandler->LongitudeDirection = *ParsePoiner;
 8002eac:	f884 31a8 	strb.w	r3, [r4, #424]	; 0x1a8
	}
	// Speed over ground, Knots
	ParsePoiner = strtoke(NULL, ",");
 8002eb0:	4d2a      	ldr	r5, [pc, #168]	; (8002f5c <NEO6_ParseGPRMC+0x104>)
 8002eb2:	4629      	mov	r1, r5
 8002eb4:	2000      	movs	r0, #0
 8002eb6:	f7ff ff83 	bl	8002dc0 <strtoke>
	// Course Made Good, True
	ParsePoiner = strtoke(NULL, ",");
 8002eba:	4629      	mov	r1, r5
 8002ebc:	2000      	movs	r0, #0
 8002ebe:	f7ff ff7f 	bl	8002dc0 <strtoke>
	// Date of fix
	ParsePoiner = strtoke(NULL, ",");
 8002ec2:	4629      	mov	r1, r5
 8002ec4:	2000      	movs	r0, #0
 8002ec6:	f7ff ff7b 	bl	8002dc0 <strtoke>
	if(strlen(ParsePoiner) > 0)
 8002eca:	7803      	ldrb	r3, [r0, #0]
 8002ecc:	bb43      	cbnz	r3, 8002f20 <NEO6_ParseGPRMC+0xc8>
		Temp = atoi(ParsePoiner);
		GpsStateHandler->Year = Temp % 100;
		GpsStateHandler->Month = (Temp / 100) % 100;
		GpsStateHandler->Day = (Temp / 10000) % 100;
	}
}
 8002ece:	bd38      	pop	{r3, r4, r5, pc}
		Temp = atoi(ParsePoiner);
 8002ed0:	f004 fd8b 	bl	80079ea <atoi>
		GpsStateHandler->Second = Temp % 100;
 8002ed4:	4b22      	ldr	r3, [pc, #136]	; (8002f60 <NEO6_ParseGPRMC+0x108>)
 8002ed6:	fba3 1200 	umull	r1, r2, r3, r0
 8002eda:	0952      	lsrs	r2, r2, #5
 8002edc:	2164      	movs	r1, #100	; 0x64
 8002ede:	fb01 0512 	mls	r5, r1, r2, r0
 8002ee2:	f884 5189 	strb.w	r5, [r4, #393]	; 0x189
		GpsStateHandler->Minute = (Temp / 100) % 100;
 8002ee6:	fba3 c502 	umull	ip, r5, r3, r2
 8002eea:	096d      	lsrs	r5, r5, #5
 8002eec:	fb01 2215 	mls	r2, r1, r5, r2
 8002ef0:	f884 2188 	strb.w	r2, [r4, #392]	; 0x188
		GpsStateHandler->Hour = (Temp / 10000) % 100;
 8002ef4:	4a1b      	ldr	r2, [pc, #108]	; (8002f64 <NEO6_ParseGPRMC+0x10c>)
 8002ef6:	fba2 2000 	umull	r2, r0, r2, r0
 8002efa:	0b40      	lsrs	r0, r0, #13
 8002efc:	fba3 2300 	umull	r2, r3, r3, r0
 8002f00:	095b      	lsrs	r3, r3, #5
 8002f02:	fb01 0013 	mls	r0, r1, r3, r0
 8002f06:	f884 0187 	strb.w	r0, [r4, #391]	; 0x187
 8002f0a:	e7ae      	b.n	8002e6a <NEO6_ParseGPRMC+0x12>
		GpsStateHandler->Latitude = atof(ParsePoiner);
 8002f0c:	f004 fd6a 	bl	80079e4 <atof>
 8002f10:	e9c4 0164 	strd	r0, r1, [r4, #400]	; 0x190
 8002f14:	e7b5      	b.n	8002e82 <NEO6_ParseGPRMC+0x2a>
		GpsStateHandler->Longitude = atof(ParsePoiner);
 8002f16:	f004 fd65 	bl	80079e4 <atof>
 8002f1a:	e9c4 0168 	strd	r0, r1, [r4, #416]	; 0x1a0
 8002f1e:	e7bf      	b.n	8002ea0 <NEO6_ParseGPRMC+0x48>
		Temp = atoi(ParsePoiner);
 8002f20:	f004 fd63 	bl	80079ea <atoi>
		GpsStateHandler->Year = Temp % 100;
 8002f24:	4b0e      	ldr	r3, [pc, #56]	; (8002f60 <NEO6_ParseGPRMC+0x108>)
 8002f26:	fba3 1200 	umull	r1, r2, r3, r0
 8002f2a:	0952      	lsrs	r2, r2, #5
 8002f2c:	2164      	movs	r1, #100	; 0x64
 8002f2e:	fb01 0512 	mls	r5, r1, r2, r0
 8002f32:	f884 518c 	strb.w	r5, [r4, #396]	; 0x18c
		GpsStateHandler->Month = (Temp / 100) % 100;
 8002f36:	fba3 c502 	umull	ip, r5, r3, r2
 8002f3a:	096d      	lsrs	r5, r5, #5
 8002f3c:	fb01 2215 	mls	r2, r1, r5, r2
 8002f40:	f884 218b 	strb.w	r2, [r4, #395]	; 0x18b
		GpsStateHandler->Day = (Temp / 10000) % 100;
 8002f44:	4a07      	ldr	r2, [pc, #28]	; (8002f64 <NEO6_ParseGPRMC+0x10c>)
 8002f46:	fba2 2000 	umull	r2, r0, r2, r0
 8002f4a:	0b40      	lsrs	r0, r0, #13
 8002f4c:	fba3 2300 	umull	r2, r3, r3, r0
 8002f50:	095b      	lsrs	r3, r3, #5
 8002f52:	fb01 0013 	mls	r0, r1, r3, r0
 8002f56:	f884 018a 	strb.w	r0, [r4, #394]	; 0x18a
}
 8002f5a:	e7b8      	b.n	8002ece <NEO6_ParseGPRMC+0x76>
 8002f5c:	0800c428 	.word	0x0800c428
 8002f60:	51eb851f 	.word	0x51eb851f
 8002f64:	d1b71759 	.word	0xd1b71759

08002f68 <NEO6_ParseGPVTG>:

//
//	Track Made Good and Ground Speed.
//
void NEO6_ParseGPVTG(NEO6_State *GpsStateHandler)
{
 8002f68:	b538      	push	{r3, r4, r5, lr}
 8002f6a:	4605      	mov	r5, r0
	// eg2. $GPVTG,054.7,T,034.4,M,005.5,N,010.2,K

	char *ParsePoiner;

	// True track made good
	ParsePoiner = strtoke(NULL, ",");
 8002f6c:	4c16      	ldr	r4, [pc, #88]	; (8002fc8 <NEO6_ParseGPVTG+0x60>)
 8002f6e:	4621      	mov	r1, r4
 8002f70:	2000      	movs	r0, #0
 8002f72:	f7ff ff25 	bl	8002dc0 <strtoke>
	ParsePoiner = strtoke(NULL, ",");
 8002f76:	4621      	mov	r1, r4
 8002f78:	2000      	movs	r0, #0
 8002f7a:	f7ff ff21 	bl	8002dc0 <strtoke>
	// Magnetic track made good
	ParsePoiner = strtoke(NULL, ",");
 8002f7e:	4621      	mov	r1, r4
 8002f80:	2000      	movs	r0, #0
 8002f82:	f7ff ff1d 	bl	8002dc0 <strtoke>
	ParsePoiner = strtoke(NULL, ",");
 8002f86:	4621      	mov	r1, r4
 8002f88:	2000      	movs	r0, #0
 8002f8a:	f7ff ff19 	bl	8002dc0 <strtoke>
	// Ground speed, knots
	ParsePoiner = strtoke(NULL, ",");
 8002f8e:	4621      	mov	r1, r4
 8002f90:	2000      	movs	r0, #0
 8002f92:	f7ff ff15 	bl	8002dc0 <strtoke>
	if(strlen(ParsePoiner) > 0)
 8002f96:	7803      	ldrb	r3, [r0, #0]
 8002f98:	b95b      	cbnz	r3, 8002fb2 <NEO6_ParseGPVTG+0x4a>
	{
		GpsStateHandler->SpeedKnots = atof(ParsePoiner);
	}
	ParsePoiner = strtoke(NULL, ",");
 8002f9a:	4c0b      	ldr	r4, [pc, #44]	; (8002fc8 <NEO6_ParseGPVTG+0x60>)
 8002f9c:	4621      	mov	r1, r4
 8002f9e:	2000      	movs	r0, #0
 8002fa0:	f7ff ff0e 	bl	8002dc0 <strtoke>
	// Ground speed, Kilometers per hour
	ParsePoiner = strtoke(NULL, ",");
 8002fa4:	4621      	mov	r1, r4
 8002fa6:	2000      	movs	r0, #0
 8002fa8:	f7ff ff0a 	bl	8002dc0 <strtoke>
	if(strlen(ParsePoiner) > 0)
 8002fac:	7803      	ldrb	r3, [r0, #0]
 8002fae:	b92b      	cbnz	r3, 8002fbc <NEO6_ParseGPVTG+0x54>
	{
		GpsStateHandler->SpeedKilometers = atof(ParsePoiner);
	}
}
 8002fb0:	bd38      	pop	{r3, r4, r5, pc}
		GpsStateHandler->SpeedKnots = atof(ParsePoiner);
 8002fb2:	f004 fd17 	bl	80079e4 <atof>
 8002fb6:	e9c5 016e 	strd	r0, r1, [r5, #440]	; 0x1b8
 8002fba:	e7ee      	b.n	8002f9a <NEO6_ParseGPVTG+0x32>
		GpsStateHandler->SpeedKilometers = atof(ParsePoiner);
 8002fbc:	f004 fd12 	bl	80079e4 <atof>
 8002fc0:	e9c5 0170 	strd	r0, r1, [r5, #448]	; 0x1c0
}
 8002fc4:	e7f4      	b.n	8002fb0 <NEO6_ParseGPVTG+0x48>
 8002fc6:	bf00      	nop
 8002fc8:	0800c428 	.word	0x0800c428

08002fcc <NEO6_ParseGPGGA>:

//
//	Global Positioning System Fix Data
//
void NEO6_ParseGPGGA(NEO6_State *GpsStateHandler)
{
 8002fcc:	b538      	push	{r3, r4, r5, lr}
 8002fce:	4605      	mov	r5, r0
	// eg. $GPGGA,212846.00,5025.81511,N,01639.92090,E,1,04,4.72,281.1,M,42.0,M,,*5F

	char *ParsePoiner;

	// UTC of Position
	ParsePoiner = strtoke(NULL, ",");
 8002fd0:	4c1d      	ldr	r4, [pc, #116]	; (8003048 <NEO6_ParseGPGGA+0x7c>)
 8002fd2:	4621      	mov	r1, r4
 8002fd4:	2000      	movs	r0, #0
 8002fd6:	f7ff fef3 	bl	8002dc0 <strtoke>
	// Latitude
	ParsePoiner = strtoke(NULL, ",");
 8002fda:	4621      	mov	r1, r4
 8002fdc:	2000      	movs	r0, #0
 8002fde:	f7ff feef 	bl	8002dc0 <strtoke>
	// N or S
	ParsePoiner = strtoke(NULL, ",");
 8002fe2:	4621      	mov	r1, r4
 8002fe4:	2000      	movs	r0, #0
 8002fe6:	f7ff feeb 	bl	8002dc0 <strtoke>
	// Longitude
	ParsePoiner = strtoke(NULL, ",");
 8002fea:	4621      	mov	r1, r4
 8002fec:	2000      	movs	r0, #0
 8002fee:	f7ff fee7 	bl	8002dc0 <strtoke>
	// E or W
	ParsePoiner = strtoke(NULL, ",");
 8002ff2:	4621      	mov	r1, r4
 8002ff4:	2000      	movs	r0, #0
 8002ff6:	f7ff fee3 	bl	8002dc0 <strtoke>
	// GPS quality indicator (0=invalid; 1=GPS fix; 2=Diff. GPS fix)
	ParsePoiner = strtoke(NULL, ",");
 8002ffa:	4621      	mov	r1, r4
 8002ffc:	2000      	movs	r0, #0
 8002ffe:	f7ff fedf 	bl	8002dc0 <strtoke>
	if(strlen(ParsePoiner) > 0)
 8003002:	7803      	ldrb	r3, [r0, #0]
 8003004:	b98b      	cbnz	r3, 800302a <NEO6_ParseGPGGA+0x5e>
	{
		GpsStateHandler->Quality = atoi(ParsePoiner);
	}
	// Number of satellites in use [not those in view]
	ParsePoiner = strtoke(NULL, ",");
 8003006:	4910      	ldr	r1, [pc, #64]	; (8003048 <NEO6_ParseGPGGA+0x7c>)
 8003008:	2000      	movs	r0, #0
 800300a:	f7ff fed9 	bl	8002dc0 <strtoke>
	if(strlen(ParsePoiner) > 0)
 800300e:	7803      	ldrb	r3, [r0, #0]
 8003010:	b983      	cbnz	r3, 8003034 <NEO6_ParseGPGGA+0x68>
	{
		GpsStateHandler->SatelitesNumber = atoi(ParsePoiner);
	}
	// Horizontal dilution of position
	ParsePoiner = strtoke(NULL, ",");
 8003012:	4c0d      	ldr	r4, [pc, #52]	; (8003048 <NEO6_ParseGPGGA+0x7c>)
 8003014:	4621      	mov	r1, r4
 8003016:	2000      	movs	r0, #0
 8003018:	f7ff fed2 	bl	8002dc0 <strtoke>
	// Antenna altitude above/below mean sea level (geoid)
	ParsePoiner = strtoke(NULL, ",");
 800301c:	4621      	mov	r1, r4
 800301e:	2000      	movs	r0, #0
 8003020:	f7ff fece 	bl	8002dc0 <strtoke>
	if(strlen(ParsePoiner) > 0)
 8003024:	7803      	ldrb	r3, [r0, #0]
 8003026:	b953      	cbnz	r3, 800303e <NEO6_ParseGPGGA+0x72>
	{
		GpsStateHandler->Altitude = atof(ParsePoiner);
	}
}
 8003028:	bd38      	pop	{r3, r4, r5, pc}
		GpsStateHandler->Quality = atoi(ParsePoiner);
 800302a:	f004 fcde 	bl	80079ea <atoi>
 800302e:	f885 01c9 	strb.w	r0, [r5, #457]	; 0x1c9
 8003032:	e7e8      	b.n	8003006 <NEO6_ParseGPGGA+0x3a>
		GpsStateHandler->SatelitesNumber = atoi(ParsePoiner);
 8003034:	f004 fcd9 	bl	80079ea <atoi>
 8003038:	f885 01c8 	strb.w	r0, [r5, #456]	; 0x1c8
 800303c:	e7e9      	b.n	8003012 <NEO6_ParseGPGGA+0x46>
		GpsStateHandler->Altitude = atof(ParsePoiner);
 800303e:	f004 fcd1 	bl	80079e4 <atof>
 8003042:	e9c5 016c 	strd	r0, r1, [r5, #432]	; 0x1b0
}
 8003046:	e7ef      	b.n	8003028 <NEO6_ParseGPGGA+0x5c>
 8003048:	0800c428 	.word	0x0800c428

0800304c <NEO6_ParseGPGSA>:

//
//	GPS DOP and active satellites
//
void NEO6_ParseGPGSA(NEO6_State *GpsStateHandler)
{
 800304c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800304e:	4607      	mov	r7, r0
	// eg2. $GPGSA,A,3,19,28,14,18,27,22,31,39,,,,,1.7,1.0,1.3*35

	char *ParsePoiner;

	// Mode
	ParsePoiner = strtoke(NULL, ",");
 8003050:	4c1e      	ldr	r4, [pc, #120]	; (80030cc <NEO6_ParseGPGSA+0x80>)
 8003052:	4621      	mov	r1, r4
 8003054:	2000      	movs	r0, #0
 8003056:	f7ff feb3 	bl	8002dc0 <strtoke>
	// 2D/3D Fix
	ParsePoiner = strtoke(NULL, ",");
 800305a:	4621      	mov	r1, r4
 800305c:	2000      	movs	r0, #0
 800305e:	f7ff feaf 	bl	8002dc0 <strtoke>
	if(strlen(ParsePoiner) > 0)
 8003062:	7803      	ldrb	r3, [r0, #0]
 8003064:	b9eb      	cbnz	r3, 80030a2 <NEO6_ParseGPGSA+0x56>
{
 8003066:	240c      	movs	r4, #12
		GpsStateHandler->FixMode = atoi(ParsePoiner);
	}
	// IDs of SVs used in position fix (null for unused fields)
	for(uint8_t i=0; i < 12; i++)
	{
		ParsePoiner = strtoke(NULL, ",");
 8003068:	4e18      	ldr	r6, [pc, #96]	; (80030cc <NEO6_ParseGPGSA+0x80>)
 800306a:	2500      	movs	r5, #0
 800306c:	4631      	mov	r1, r6
 800306e:	4628      	mov	r0, r5
 8003070:	f7ff fea6 	bl	8002dc0 <strtoke>
	for(uint8_t i=0; i < 12; i++)
 8003074:	1e63      	subs	r3, r4, #1
 8003076:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 800307a:	d1f7      	bne.n	800306c <NEO6_ParseGPGSA+0x20>
	}
	// PDOP
	ParsePoiner = strtoke(NULL, ",");
 800307c:	4913      	ldr	r1, [pc, #76]	; (80030cc <NEO6_ParseGPGSA+0x80>)
 800307e:	2000      	movs	r0, #0
 8003080:	f7ff fe9e 	bl	8002dc0 <strtoke>
	if(strlen(ParsePoiner) > 0)
 8003084:	7803      	ldrb	r3, [r0, #0]
 8003086:	b98b      	cbnz	r3, 80030ac <NEO6_ParseGPGSA+0x60>
	{
		GpsStateHandler->Dop = atof(ParsePoiner);
	}
	// HDOP
	ParsePoiner = strtoke(NULL, ",");
 8003088:	4910      	ldr	r1, [pc, #64]	; (80030cc <NEO6_ParseGPGSA+0x80>)
 800308a:	2000      	movs	r0, #0
 800308c:	f7ff fe98 	bl	8002dc0 <strtoke>
	if(strlen(ParsePoiner) > 0)
 8003090:	7803      	ldrb	r3, [r0, #0]
 8003092:	b983      	cbnz	r3, 80030b6 <NEO6_ParseGPGSA+0x6a>
	{
		GpsStateHandler->Hdop = atof(ParsePoiner);
	}
	// VDOP
	ParsePoiner = strtoke(NULL, ",");
 8003094:	490d      	ldr	r1, [pc, #52]	; (80030cc <NEO6_ParseGPGSA+0x80>)
 8003096:	2000      	movs	r0, #0
 8003098:	f7ff fe92 	bl	8002dc0 <strtoke>
	if(strlen(ParsePoiner) > 0)
 800309c:	7803      	ldrb	r3, [r0, #0]
 800309e:	b97b      	cbnz	r3, 80030c0 <NEO6_ParseGPGSA+0x74>
	{
		GpsStateHandler->Vdop = atof(ParsePoiner);
	}
}
 80030a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		GpsStateHandler->FixMode = atoi(ParsePoiner);
 80030a2:	f004 fca2 	bl	80079ea <atoi>
 80030a6:	f887 01ca 	strb.w	r0, [r7, #458]	; 0x1ca
 80030aa:	e7dc      	b.n	8003066 <NEO6_ParseGPGSA+0x1a>
		GpsStateHandler->Dop = atof(ParsePoiner);
 80030ac:	f004 fc9a 	bl	80079e4 <atof>
 80030b0:	e9c7 0174 	strd	r0, r1, [r7, #464]	; 0x1d0
 80030b4:	e7e8      	b.n	8003088 <NEO6_ParseGPGSA+0x3c>
		GpsStateHandler->Hdop = atof(ParsePoiner);
 80030b6:	f004 fc95 	bl	80079e4 <atof>
 80030ba:	e9c7 0176 	strd	r0, r1, [r7, #472]	; 0x1d8
 80030be:	e7e9      	b.n	8003094 <NEO6_ParseGPGSA+0x48>
		GpsStateHandler->Vdop = atof(ParsePoiner);
 80030c0:	f004 fc90 	bl	80079e4 <atof>
 80030c4:	e9c7 0178 	strd	r0, r1, [r7, #480]	; 0x1e0
}
 80030c8:	e7ea      	b.n	80030a0 <NEO6_ParseGPGSA+0x54>
 80030ca:	bf00      	nop
 80030cc:	0800c428 	.word	0x0800c428

080030d0 <NEO6_ParseLine>:
	// Could be good for minimal system for LoRa device
}


void NEO6_ParseLine(NEO6_State *GpsStateHandler)
{
 80030d0:	b538      	push	{r3, r4, r5, lr}
 80030d2:	4604      	mov	r4, r0
	// Nice website with NMEA commuincates description
	//	http://aprs.gids.nl/nmea
	//

	// Header
	char* ParsePoiner = strtoke((char*)GpsStateHandler->WorkingBuffer, ",");
 80030d4:	4914      	ldr	r1, [pc, #80]	; (8003128 <NEO6_ParseLine+0x58>)
 80030d6:	f200 1007 	addw	r0, r0, #263	; 0x107
 80030da:	f7ff fe71 	bl	8002dc0 <strtoke>
 80030de:	4605      	mov	r5, r0

	if(strcmp(ParsePoiner, "$GPRMC") == 0) NEO6_ParseGPRMC(GpsStateHandler);
 80030e0:	4912      	ldr	r1, [pc, #72]	; (800312c <NEO6_ParseLine+0x5c>)
 80030e2:	f7fd f835 	bl	8000150 <strcmp>
 80030e6:	b190      	cbz	r0, 800310e <NEO6_ParseLine+0x3e>
	else if(strcmp(ParsePoiner, "$GPVTG") == 0) NEO6_ParseGPVTG(GpsStateHandler);
 80030e8:	4911      	ldr	r1, [pc, #68]	; (8003130 <NEO6_ParseLine+0x60>)
 80030ea:	4628      	mov	r0, r5
 80030ec:	f7fd f830 	bl	8000150 <strcmp>
 80030f0:	b188      	cbz	r0, 8003116 <NEO6_ParseLine+0x46>
	else if(strcmp(ParsePoiner, "$GPGGA") == 0) NEO6_ParseGPGGA(GpsStateHandler);
 80030f2:	4910      	ldr	r1, [pc, #64]	; (8003134 <NEO6_ParseLine+0x64>)
 80030f4:	4628      	mov	r0, r5
 80030f6:	f7fd f82b 	bl	8000150 <strcmp>
 80030fa:	b180      	cbz	r0, 800311e <NEO6_ParseLine+0x4e>
	else if(strcmp(ParsePoiner, "$GPGSA") == 0) NEO6_ParseGPGSA(GpsStateHandler);
 80030fc:	490e      	ldr	r1, [pc, #56]	; (8003138 <NEO6_ParseLine+0x68>)
 80030fe:	4628      	mov	r0, r5
 8003100:	f7fd f826 	bl	8000150 <strcmp>
 8003104:	b930      	cbnz	r0, 8003114 <NEO6_ParseLine+0x44>
 8003106:	4620      	mov	r0, r4
 8003108:	f7ff ffa0 	bl	800304c <NEO6_ParseGPGSA>
//	else if(strcmp(ParsePoiner, "$GPGSV") == 0) NEO6_ParseGPGSV(GpsStateHandler);
//	else if(strcmp(ParsePoiner, "$GPGLL") == 0) NEO6_ParseGPGLL(GpsStateHandler);
}
 800310c:	e002      	b.n	8003114 <NEO6_ParseLine+0x44>
	if(strcmp(ParsePoiner, "$GPRMC") == 0) NEO6_ParseGPRMC(GpsStateHandler);
 800310e:	4620      	mov	r0, r4
 8003110:	f7ff fea2 	bl	8002e58 <NEO6_ParseGPRMC>
}
 8003114:	bd38      	pop	{r3, r4, r5, pc}
	else if(strcmp(ParsePoiner, "$GPVTG") == 0) NEO6_ParseGPVTG(GpsStateHandler);
 8003116:	4620      	mov	r0, r4
 8003118:	f7ff ff26 	bl	8002f68 <NEO6_ParseGPVTG>
 800311c:	e7fa      	b.n	8003114 <NEO6_ParseLine+0x44>
	else if(strcmp(ParsePoiner, "$GPGGA") == 0) NEO6_ParseGPGGA(GpsStateHandler);
 800311e:	4620      	mov	r0, r4
 8003120:	f7ff ff54 	bl	8002fcc <NEO6_ParseGPGGA>
 8003124:	e7f6      	b.n	8003114 <NEO6_ParseLine+0x44>
 8003126:	bf00      	nop
 8003128:	0800c428 	.word	0x0800c428
 800312c:	0800c42c 	.word	0x0800c42c
 8003130:	0800c434 	.word	0x0800c434
 8003134:	0800c43c 	.word	0x0800c43c
 8003138:	0800c444 	.word	0x0800c444

0800313c <NEO6_Task>:
	return GpsStateHandler->Quality;
}

void NEO6_Task(NEO6_State *GpsStateHandler)
{
	if(GpsStateHandler->UartBufferLines)
 800313c:	f890 3106 	ldrb.w	r3, [r0, #262]	; 0x106
 8003140:	b903      	cbnz	r3, 8003144 <NEO6_Task+0x8>
 8003142:	4770      	bx	lr
{
 8003144:	b510      	push	{r4, lr}
 8003146:	4604      	mov	r4, r0
	{
		NEO6_GetLineFromBuffer(GpsStateHandler);
 8003148:	f7ff fe6a 	bl	8002e20 <NEO6_GetLineFromBuffer>
		NEO6_ParseLine(GpsStateHandler);
 800314c:	4620      	mov	r0, r4
 800314e:	f7ff ffbf 	bl	80030d0 <NEO6_ParseLine>
	}
}
 8003152:	bd10      	pop	{r4, pc}

08003154 <NEO6_Init>:

void NEO6_Init(NEO6_State *GpsStateHandler, UART_HandleTypeDef *huart)
{
 8003154:	b538      	push	{r3, r4, r5, lr}
 8003156:	4603      	mov	r3, r0
 8003158:	4608      	mov	r0, r1
	GpsStateHandler->neo6_huart = huart;
 800315a:	6019      	str	r1, [r3, #0]
	GpsStateHandler->UartBufferHead = 0;
 800315c:	2200      	movs	r2, #0
 800315e:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
	GpsStateHandler->UartBufferTail = 0;
 8003162:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
	GpsStateHandler->UartBufferLines = 0;
 8003166:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106

	GpsStateHandler->Hour = 0;
 800316a:	f883 2187 	strb.w	r2, [r3, #391]	; 0x187
	GpsStateHandler->Minute = 0;
 800316e:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188
	GpsStateHandler->Second = 0;
 8003172:	f883 2189 	strb.w	r2, [r3, #393]	; 0x189
	GpsStateHandler->Day = 0;
 8003176:	f883 218a 	strb.w	r2, [r3, #394]	; 0x18a
	GpsStateHandler->Month = 0;
 800317a:	f883 218b 	strb.w	r2, [r3, #395]	; 0x18b
	GpsStateHandler->Year = 0;
 800317e:	f883 218c 	strb.w	r2, [r3, #396]	; 0x18c

	GpsStateHandler->Latitude = 0;
 8003182:	2400      	movs	r4, #0
 8003184:	2500      	movs	r5, #0
 8003186:	e9c3 4564 	strd	r4, r5, [r3, #400]	; 0x190
	GpsStateHandler->LatitudeDirection = '0';
 800318a:	2130      	movs	r1, #48	; 0x30
 800318c:	f883 1198 	strb.w	r1, [r3, #408]	; 0x198
	GpsStateHandler->Longitude = 0;
 8003190:	e9c3 4568 	strd	r4, r5, [r3, #416]	; 0x1a0
	GpsStateHandler->LongitudeDirection = '0';
 8003194:	f883 11a8 	strb.w	r1, [r3, #424]	; 0x1a8

	GpsStateHandler->SpeedKilometers = 0;
 8003198:	e9c3 4570 	strd	r4, r5, [r3, #448]	; 0x1c0
	GpsStateHandler->SpeedKnots = 0;
 800319c:	e9c3 456e 	strd	r4, r5, [r3, #440]	; 0x1b8

	GpsStateHandler->SatelitesNumber = 0;
 80031a0:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8
	GpsStateHandler->Quality = 0;
 80031a4:	f883 21c9 	strb.w	r2, [r3, #457]	; 0x1c9
	GpsStateHandler->Dop = 0;
 80031a8:	e9c3 4574 	strd	r4, r5, [r3, #464]	; 0x1d0
	GpsStateHandler->Hdop = 0;
 80031ac:	e9c3 4576 	strd	r4, r5, [r3, #472]	; 0x1d8
	GpsStateHandler->Vdop = 0;
 80031b0:	e9c3 4578 	strd	r4, r5, [r3, #480]	; 0x1e0

	HAL_UART_Receive_IT(GpsStateHandler->neo6_huart, (uint8_t*)&UartReceivedChar, 1);
 80031b4:	2201      	movs	r2, #1
 80031b6:	4902      	ldr	r1, [pc, #8]	; (80031c0 <NEO6_Init+0x6c>)
 80031b8:	f003 fd89 	bl	8006cce <HAL_UART_Receive_IT>
}
 80031bc:	bd38      	pop	{r3, r4, r5, pc}
 80031be:	bf00      	nop
 80031c0:	20000950 	.word	0x20000950

080031c4 <ssd1306_WriteCommand>:
void ssd1306_Reset(void) {
    /* for I2C - do nothing */
}

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80031c4:	b500      	push	{lr}
 80031c6:	b087      	sub	sp, #28
 80031c8:	f88d 0017 	strb.w	r0, [sp, #23]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80031cc:	f04f 33ff 	mov.w	r3, #4294967295
 80031d0:	9302      	str	r3, [sp, #8]
 80031d2:	2301      	movs	r3, #1
 80031d4:	9301      	str	r3, [sp, #4]
 80031d6:	f10d 0217 	add.w	r2, sp, #23
 80031da:	9200      	str	r2, [sp, #0]
 80031dc:	2200      	movs	r2, #0
 80031de:	2178      	movs	r1, #120	; 0x78
 80031e0:	4802      	ldr	r0, [pc, #8]	; (80031ec <ssd1306_WriteCommand+0x28>)
 80031e2:	f001 fa49 	bl	8004678 <HAL_I2C_Mem_Write>
}
 80031e6:	b007      	add	sp, #28
 80031e8:	f85d fb04 	ldr.w	pc, [sp], #4
 80031ec:	20000530 	.word	0x20000530

080031f0 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80031f0:	b500      	push	{lr}
 80031f2:	b085      	sub	sp, #20
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80031f4:	f04f 33ff 	mov.w	r3, #4294967295
 80031f8:	9302      	str	r3, [sp, #8]
 80031fa:	b289      	uxth	r1, r1
 80031fc:	9101      	str	r1, [sp, #4]
 80031fe:	9000      	str	r0, [sp, #0]
 8003200:	2301      	movs	r3, #1
 8003202:	2240      	movs	r2, #64	; 0x40
 8003204:	2178      	movs	r1, #120	; 0x78
 8003206:	4803      	ldr	r0, [pc, #12]	; (8003214 <ssd1306_WriteData+0x24>)
 8003208:	f001 fa36 	bl	8004678 <HAL_I2C_Mem_Write>
}
 800320c:	b005      	add	sp, #20
 800320e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003212:	bf00      	nop
 8003214:	20000530 	.word	0x20000530

08003218 <ssd1306_Fill>:
    
    SSD1306.Initialized = 1;
}

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8003218:	b508      	push	{r3, lr}
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800321a:	2800      	cmp	r0, #0
 800321c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003220:	bf0c      	ite	eq
 8003222:	2100      	moveq	r1, #0
 8003224:	21ff      	movne	r1, #255	; 0xff
 8003226:	4802      	ldr	r0, [pc, #8]	; (8003230 <ssd1306_Fill+0x18>)
 8003228:	f006 fa41 	bl	80096ae <memset>
}
 800322c:	bd08      	pop	{r3, pc}
 800322e:	bf00      	nop
 8003230:	20000960 	.word	0x20000960

08003234 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8003234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8003238:	4d0c      	ldr	r5, [pc, #48]	; (800326c <ssd1306_UpdateScreen+0x38>)
void ssd1306_UpdateScreen(void) {
 800323a:	24b0      	movs	r4, #176	; 0xb0
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 800323c:	f04f 0800 	mov.w	r8, #0
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8003240:	2710      	movs	r7, #16
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8003242:	2680      	movs	r6, #128	; 0x80
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8003244:	4620      	mov	r0, r4
 8003246:	f7ff ffbd 	bl	80031c4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 800324a:	4640      	mov	r0, r8
 800324c:	f7ff ffba 	bl	80031c4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8003250:	4638      	mov	r0, r7
 8003252:	f7ff ffb7 	bl	80031c4 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8003256:	4631      	mov	r1, r6
 8003258:	4628      	mov	r0, r5
 800325a:	f7ff ffc9 	bl	80031f0 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800325e:	3401      	adds	r4, #1
 8003260:	b2e4      	uxtb	r4, r4
 8003262:	3580      	adds	r5, #128	; 0x80
 8003264:	2cb8      	cmp	r4, #184	; 0xb8
 8003266:	d1ed      	bne.n	8003244 <ssd1306_UpdateScreen+0x10>
    }
}
 8003268:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800326c:	20000960 	.word	0x20000960

08003270 <ssd1306_DrawPixel>:
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8003270:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003274:	d11e      	bne.n	80032b4 <ssd1306_DrawPixel+0x44>
 8003276:	293f      	cmp	r1, #63	; 0x3f
 8003278:	d81c      	bhi.n	80032b4 <ssd1306_DrawPixel+0x44>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 800327a:	2a01      	cmp	r2, #1
 800327c:	d00e      	beq.n	800329c <ssd1306_DrawPixel+0x2c>
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 800327e:	b410      	push	{r4}
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8003280:	08cb      	lsrs	r3, r1, #3
 8003282:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
 8003286:	4c0c      	ldr	r4, [pc, #48]	; (80032b8 <ssd1306_DrawPixel+0x48>)
 8003288:	f001 0107 	and.w	r1, r1, #7
 800328c:	2201      	movs	r2, #1
 800328e:	408a      	lsls	r2, r1
 8003290:	5c23      	ldrb	r3, [r4, r0]
 8003292:	ea23 0302 	bic.w	r3, r3, r2
 8003296:	5423      	strb	r3, [r4, r0]
    }
}
 8003298:	bc10      	pop	{r4}
 800329a:	4770      	bx	lr
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800329c:	08cb      	lsrs	r3, r1, #3
 800329e:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
 80032a2:	4a05      	ldr	r2, [pc, #20]	; (80032b8 <ssd1306_DrawPixel+0x48>)
 80032a4:	f001 0107 	and.w	r1, r1, #7
 80032a8:	2301      	movs	r3, #1
 80032aa:	408b      	lsls	r3, r1
 80032ac:	5c11      	ldrb	r1, [r2, r0]
 80032ae:	430b      	orrs	r3, r1
 80032b0:	5413      	strb	r3, [r2, r0]
 80032b2:	4770      	bx	lr
 80032b4:	4770      	bx	lr
 80032b6:	bf00      	nop
 80032b8:	20000960 	.word	0x20000960

080032bc <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80032bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032c0:	b085      	sub	sp, #20
 80032c2:	9001      	str	r0, [sp, #4]
 80032c4:	ac04      	add	r4, sp, #16
 80032c6:	e904 0006 	stmdb	r4, {r1, r2}
 80032ca:	461f      	mov	r7, r3
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80032cc:	f1a0 0320 	sub.w	r3, r0, #32
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	2b5e      	cmp	r3, #94	; 0x5e
 80032d4:	d840      	bhi.n	8003358 <ssd1306_WriteChar+0x9c>
 80032d6:	f89d 6008 	ldrb.w	r6, [sp, #8]
        return 0;
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80032da:	4b23      	ldr	r3, [pc, #140]	; (8003368 <ssd1306_WriteChar+0xac>)
 80032dc:	f8b3 9000 	ldrh.w	r9, [r3]
 80032e0:	eb09 0306 	add.w	r3, r9, r6
 80032e4:	2b80      	cmp	r3, #128	; 0x80
 80032e6:	dc3b      	bgt.n	8003360 <ssd1306_WriteChar+0xa4>
 80032e8:	f89d 2009 	ldrb.w	r2, [sp, #9]
 80032ec:	9200      	str	r2, [sp, #0]
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 80032ee:	4b1e      	ldr	r3, [pc, #120]	; (8003368 <ssd1306_WriteChar+0xac>)
 80032f0:	885d      	ldrh	r5, [r3, #2]
 80032f2:	18ab      	adds	r3, r5, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80032f4:	2b40      	cmp	r3, #64	; 0x40
 80032f6:	dc35      	bgt.n	8003364 <ssd1306_WriteChar+0xa8>
        // Not enough space on current line
        return 0;
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80032f8:	b342      	cbz	r2, 800334c <ssd1306_WriteChar+0x90>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80032fa:	f1a0 0a20 	sub.w	sl, r0, #32
 80032fe:	fb02 fa0a 	mul.w	sl, r2, sl
 8003302:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
 8003306:	b2ed      	uxtb	r5, r5
    for(i = 0; i < Font.FontHeight; i++) {
 8003308:	f04f 0b00 	mov.w	fp, #0
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800330c:	9b03      	ldr	r3, [sp, #12]
 800330e:	f833 800a 	ldrh.w	r8, [r3, sl]
        for(j = 0; j < Font.FontWidth; j++) {
 8003312:	b196      	cbz	r6, 800333a <ssd1306_WriteChar+0x7e>
 8003314:	2400      	movs	r4, #0
            if((b << j) & 0x8000)  {
 8003316:	fa08 f304 	lsl.w	r3, r8, r4
 800331a:	f413 4f00 	tst.w	r3, #32768	; 0x8000
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800331e:	eb09 0004 	add.w	r0, r9, r4
 8003322:	bf12      	itee	ne
 8003324:	463a      	movne	r2, r7
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8003326:	fab7 f287 	clzeq	r2, r7
 800332a:	0952      	lsreq	r2, r2, #5
 800332c:	4629      	mov	r1, r5
 800332e:	b2c0      	uxtb	r0, r0
 8003330:	f7ff ff9e 	bl	8003270 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8003334:	3401      	adds	r4, #1
 8003336:	42b4      	cmp	r4, r6
 8003338:	d1ed      	bne.n	8003316 <ssd1306_WriteChar+0x5a>
    for(i = 0; i < Font.FontHeight; i++) {
 800333a:	f10b 0b01 	add.w	fp, fp, #1
 800333e:	f10a 0a02 	add.w	sl, sl, #2
 8003342:	3501      	adds	r5, #1
 8003344:	b2ed      	uxtb	r5, r5
 8003346:	9b00      	ldr	r3, [sp, #0]
 8003348:	455b      	cmp	r3, fp
 800334a:	d1df      	bne.n	800330c <ssd1306_WriteChar+0x50>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 800334c:	44b1      	add	r9, r6
 800334e:	4b06      	ldr	r3, [pc, #24]	; (8003368 <ssd1306_WriteChar+0xac>)
 8003350:	f8a3 9000 	strh.w	r9, [r3]
    
    // Return written char for validation
    return ch;
 8003354:	9801      	ldr	r0, [sp, #4]
 8003356:	e000      	b.n	800335a <ssd1306_WriteChar+0x9e>
        return 0;
 8003358:	2000      	movs	r0, #0
}
 800335a:	b005      	add	sp, #20
 800335c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return 0;
 8003360:	2000      	movs	r0, #0
 8003362:	e7fa      	b.n	800335a <ssd1306_WriteChar+0x9e>
 8003364:	2000      	movs	r0, #0
 8003366:	e7f8      	b.n	800335a <ssd1306_WriteChar+0x9e>
 8003368:	20000958 	.word	0x20000958

0800336c <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 800336c:	b570      	push	{r4, r5, r6, lr}
 800336e:	b082      	sub	sp, #8
 8003370:	4604      	mov	r4, r0
 8003372:	a802      	add	r0, sp, #8
 8003374:	e900 0006 	stmdb	r0, {r1, r2}
    while (*str) {
 8003378:	7820      	ldrb	r0, [r4, #0]
 800337a:	b170      	cbz	r0, 800339a <ssd1306_WriteString+0x2e>
 800337c:	461e      	mov	r6, r3
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800337e:	466d      	mov	r5, sp
 8003380:	4633      	mov	r3, r6
 8003382:	e895 0006 	ldmia.w	r5, {r1, r2}
 8003386:	f7ff ff99 	bl	80032bc <ssd1306_WriteChar>
 800338a:	4602      	mov	r2, r0
 800338c:	7820      	ldrb	r0, [r4, #0]
 800338e:	4282      	cmp	r2, r0
 8003390:	d103      	bne.n	800339a <ssd1306_WriteString+0x2e>
    while (*str) {
 8003392:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8003396:	2800      	cmp	r0, #0
 8003398:	d1f2      	bne.n	8003380 <ssd1306_WriteString+0x14>
        str++;
    }
    
    // Everything ok
    return *str;
}
 800339a:	b002      	add	sp, #8
 800339c:	bd70      	pop	{r4, r5, r6, pc}
	...

080033a0 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
    SSD1306.CurrentX = x;
 80033a0:	4b01      	ldr	r3, [pc, #4]	; (80033a8 <ssd1306_SetCursor+0x8>)
 80033a2:	8018      	strh	r0, [r3, #0]
    SSD1306.CurrentY = y;
 80033a4:	8059      	strh	r1, [r3, #2]
}
 80033a6:	4770      	bx	lr
 80033a8:	20000958 	.word	0x20000958

080033ac <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 80033ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033b0:	b085      	sub	sp, #20
 80033b2:	4604      	mov	r4, r0
 80033b4:	460e      	mov	r6, r1
 80033b6:	4690      	mov	r8, r2
 80033b8:	469b      	mov	fp, r3
 80033ba:	f89d 9038 	ldrb.w	r9, [sp, #56]	; 0x38
    int32_t deltaX = abs(x2 - x1);
 80033be:	1a17      	subs	r7, r2, r0
 80033c0:	2f00      	cmp	r7, #0
 80033c2:	bfb8      	it	lt
 80033c4:	427f      	neglt	r7, r7
    int32_t deltaY = abs(y2 - y1);
 80033c6:	1a5b      	subs	r3, r3, r1
 80033c8:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80033cc:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80033d0:	4613      	mov	r3, r2
    int32_t signX = ((x1 < x2) ? 1 : -1);
 80033d2:	4580      	cmp	r8, r0
 80033d4:	bf8c      	ite	hi
 80033d6:	2201      	movhi	r2, #1
 80033d8:	f04f 32ff 	movls.w	r2, #4294967295
 80033dc:	9202      	str	r2, [sp, #8]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 80033de:	458b      	cmp	fp, r1
 80033e0:	bf8c      	ite	hi
 80033e2:	2201      	movhi	r2, #1
 80033e4:	f04f 32ff 	movls.w	r2, #4294967295
 80033e8:	9203      	str	r2, [sp, #12]
    int32_t error = deltaX - deltaY;
 80033ea:	9301      	str	r3, [sp, #4]
 80033ec:	1afd      	subs	r5, r7, r3
    int32_t error2;
    
    ssd1306_DrawPixel(x2, y2, color);
 80033ee:	464a      	mov	r2, r9
 80033f0:	4659      	mov	r1, fp
 80033f2:	4640      	mov	r0, r8
 80033f4:	f7ff ff3c 	bl	8003270 <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
        ssd1306_DrawPixel(x1, y1, color);
        error2 = error * 2;
        if(error2 > -deltaY) {
 80033f8:	9b01      	ldr	r3, [sp, #4]
 80033fa:	f1c3 0a00 	rsb	sl, r3, #0
    while((x1 != x2) || (y1 != y2)) {
 80033fe:	e013      	b.n	8003428 <ssd1306_Line+0x7c>
        ssd1306_DrawPixel(x1, y1, color);
 8003400:	464a      	mov	r2, r9
 8003402:	4631      	mov	r1, r6
 8003404:	4620      	mov	r0, r4
 8003406:	f7ff ff33 	bl	8003270 <ssd1306_DrawPixel>
        error2 = error * 2;
 800340a:	006b      	lsls	r3, r5, #1
        if(error2 > -deltaY) {
 800340c:	ebba 0f45 	cmp.w	sl, r5, lsl #1
 8003410:	da04      	bge.n	800341c <ssd1306_Line+0x70>
            error -= deltaY;
 8003412:	9a01      	ldr	r2, [sp, #4]
 8003414:	1aad      	subs	r5, r5, r2
            x1 += signX;
 8003416:	9a02      	ldr	r2, [sp, #8]
 8003418:	4414      	add	r4, r2
 800341a:	b2e4      	uxtb	r4, r4
        }
        
        if(error2 < deltaX) {
 800341c:	429f      	cmp	r7, r3
 800341e:	dd03      	ble.n	8003428 <ssd1306_Line+0x7c>
            error += deltaX;
 8003420:	443d      	add	r5, r7
            y1 += signY;
 8003422:	9b03      	ldr	r3, [sp, #12]
 8003424:	441e      	add	r6, r3
 8003426:	b2f6      	uxtb	r6, r6
    while((x1 != x2) || (y1 != y2)) {
 8003428:	4544      	cmp	r4, r8
 800342a:	d1e9      	bne.n	8003400 <ssd1306_Line+0x54>
 800342c:	455e      	cmp	r6, fp
 800342e:	d1e7      	bne.n	8003400 <ssd1306_Line+0x54>
        }
    }
    return;
}
 8003430:	b005      	add	sp, #20
 8003432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003436 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8003436:	b510      	push	{r4, lr}
 8003438:	4604      	mov	r4, r0
    const uint8_t kSetContrastControlRegister = 0x81;
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800343a:	2081      	movs	r0, #129	; 0x81
 800343c:	f7ff fec2 	bl	80031c4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8003440:	4620      	mov	r0, r4
 8003442:	f7ff febf 	bl	80031c4 <ssd1306_WriteCommand>
}
 8003446:	bd10      	pop	{r4, pc}

08003448 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8003448:	b508      	push	{r3, lr}
 800344a:	4602      	mov	r2, r0
    uint8_t value;
    if (on) {
 800344c:	4603      	mov	r3, r0
        value = 0xAF;   // Display on
        SSD1306.DisplayOn = 1;
    } else {
        value = 0xAE;   // Display off
 800344e:	2800      	cmp	r0, #0
 8003450:	bf13      	iteet	ne
 8003452:	20af      	movne	r0, #175	; 0xaf
 8003454:	20ae      	moveq	r0, #174	; 0xae
 8003456:	4613      	moveq	r3, r2
 8003458:	2301      	movne	r3, #1
 800345a:	4a02      	ldr	r2, [pc, #8]	; (8003464 <ssd1306_SetDisplayOn+0x1c>)
 800345c:	7153      	strb	r3, [r2, #5]
        SSD1306.DisplayOn = 0;
    }
    ssd1306_WriteCommand(value);
 800345e:	f7ff feb1 	bl	80031c4 <ssd1306_WriteCommand>
}
 8003462:	bd08      	pop	{r3, pc}
 8003464:	20000958 	.word	0x20000958

08003468 <ssd1306_Init>:
void ssd1306_Init(void) {
 8003468:	b508      	push	{r3, lr}
    HAL_Delay(100);
 800346a:	2064      	movs	r0, #100	; 0x64
 800346c:	f000 f884 	bl	8003578 <HAL_Delay>
    ssd1306_SetDisplayOn(0); //display off
 8003470:	2000      	movs	r0, #0
 8003472:	f7ff ffe9 	bl	8003448 <ssd1306_SetDisplayOn>
    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8003476:	2020      	movs	r0, #32
 8003478:	f7ff fea4 	bl	80031c4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800347c:	2000      	movs	r0, #0
 800347e:	f7ff fea1 	bl	80031c4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8003482:	20b0      	movs	r0, #176	; 0xb0
 8003484:	f7ff fe9e 	bl	80031c4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8003488:	20c8      	movs	r0, #200	; 0xc8
 800348a:	f7ff fe9b 	bl	80031c4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //---set low column address
 800348e:	2000      	movs	r0, #0
 8003490:	f7ff fe98 	bl	80031c4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8003494:	2010      	movs	r0, #16
 8003496:	f7ff fe95 	bl	80031c4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 800349a:	2040      	movs	r0, #64	; 0x40
 800349c:	f7ff fe92 	bl	80031c4 <ssd1306_WriteCommand>
    ssd1306_SetContrast(0xFF);
 80034a0:	20ff      	movs	r0, #255	; 0xff
 80034a2:	f7ff ffc8 	bl	8003436 <ssd1306_SetContrast>
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80034a6:	20a1      	movs	r0, #161	; 0xa1
 80034a8:	f7ff fe8c 	bl	80031c4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xA6); //--set normal color
 80034ac:	20a6      	movs	r0, #166	; 0xa6
 80034ae:	f7ff fe89 	bl	80031c4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80034b2:	20a8      	movs	r0, #168	; 0xa8
 80034b4:	f7ff fe86 	bl	80031c4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); //
 80034b8:	203f      	movs	r0, #63	; 0x3f
 80034ba:	f7ff fe83 	bl	80031c4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80034be:	20a4      	movs	r0, #164	; 0xa4
 80034c0:	f7ff fe80 	bl	80031c4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80034c4:	20d3      	movs	r0, #211	; 0xd3
 80034c6:	f7ff fe7d 	bl	80031c4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80034ca:	2000      	movs	r0, #0
 80034cc:	f7ff fe7a 	bl	80031c4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80034d0:	20d5      	movs	r0, #213	; 0xd5
 80034d2:	f7ff fe77 	bl	80031c4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80034d6:	20f0      	movs	r0, #240	; 0xf0
 80034d8:	f7ff fe74 	bl	80031c4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80034dc:	20d9      	movs	r0, #217	; 0xd9
 80034de:	f7ff fe71 	bl	80031c4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80034e2:	2022      	movs	r0, #34	; 0x22
 80034e4:	f7ff fe6e 	bl	80031c4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80034e8:	20da      	movs	r0, #218	; 0xda
 80034ea:	f7ff fe6b 	bl	80031c4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
 80034ee:	2012      	movs	r0, #18
 80034f0:	f7ff fe68 	bl	80031c4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xDB); //--set vcomh
 80034f4:	20db      	movs	r0, #219	; 0xdb
 80034f6:	f7ff fe65 	bl	80031c4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80034fa:	2020      	movs	r0, #32
 80034fc:	f7ff fe62 	bl	80031c4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8003500:	208d      	movs	r0, #141	; 0x8d
 8003502:	f7ff fe5f 	bl	80031c4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8003506:	2014      	movs	r0, #20
 8003508:	f7ff fe5c 	bl	80031c4 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800350c:	2001      	movs	r0, #1
 800350e:	f7ff ff9b 	bl	8003448 <ssd1306_SetDisplayOn>
    ssd1306_Fill(Black);
 8003512:	2000      	movs	r0, #0
 8003514:	f7ff fe80 	bl	8003218 <ssd1306_Fill>
    ssd1306_UpdateScreen();
 8003518:	f7ff fe8c 	bl	8003234 <ssd1306_UpdateScreen>
    SSD1306.CurrentX = 0;
 800351c:	4b03      	ldr	r3, [pc, #12]	; (800352c <ssd1306_Init+0xc4>)
 800351e:	2200      	movs	r2, #0
 8003520:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8003522:	805a      	strh	r2, [r3, #2]
    SSD1306.Initialized = 1;
 8003524:	2201      	movs	r2, #1
 8003526:	711a      	strb	r2, [r3, #4]
}
 8003528:	bd08      	pop	{r3, pc}
 800352a:	bf00      	nop
 800352c:	20000958 	.word	0x20000958

08003530 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003530:	b508      	push	{r3, lr}
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003532:	4a07      	ldr	r2, [pc, #28]	; (8003550 <HAL_Init+0x20>)
 8003534:	6813      	ldr	r3, [r2, #0]
 8003536:	f043 0310 	orr.w	r3, r3, #16
 800353a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800353c:	2003      	movs	r0, #3
 800353e:	f000 f82f 	bl	80035a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003542:	200f      	movs	r0, #15
 8003544:	f7ff f924 	bl	8002790 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003548:	f7ff f8f8 	bl	800273c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 800354c:	2000      	movs	r0, #0
 800354e:	bd08      	pop	{r3, pc}
 8003550:	40022000 	.word	0x40022000

08003554 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8003554:	4a03      	ldr	r2, [pc, #12]	; (8003564 <HAL_IncTick+0x10>)
 8003556:	6811      	ldr	r1, [r2, #0]
 8003558:	4b03      	ldr	r3, [pc, #12]	; (8003568 <HAL_IncTick+0x14>)
 800355a:	781b      	ldrb	r3, [r3, #0]
 800355c:	440b      	add	r3, r1
 800355e:	6013      	str	r3, [r2, #0]
}
 8003560:	4770      	bx	lr
 8003562:	bf00      	nop
 8003564:	20000d60 	.word	0x20000d60
 8003568:	2000000c 	.word	0x2000000c

0800356c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800356c:	4b01      	ldr	r3, [pc, #4]	; (8003574 <HAL_GetTick+0x8>)
 800356e:	6818      	ldr	r0, [r3, #0]
}
 8003570:	4770      	bx	lr
 8003572:	bf00      	nop
 8003574:	20000d60 	.word	0x20000d60

08003578 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003578:	b538      	push	{r3, r4, r5, lr}
 800357a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800357c:	f7ff fff6 	bl	800356c <HAL_GetTick>
 8003580:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003582:	f1b4 3fff 	cmp.w	r4, #4294967295
 8003586:	d002      	beq.n	800358e <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8003588:	4b04      	ldr	r3, [pc, #16]	; (800359c <HAL_Delay+0x24>)
 800358a:	781b      	ldrb	r3, [r3, #0]
 800358c:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800358e:	f7ff ffed 	bl	800356c <HAL_GetTick>
 8003592:	1b40      	subs	r0, r0, r5
 8003594:	42a0      	cmp	r0, r4
 8003596:	d3fa      	bcc.n	800358e <HAL_Delay+0x16>
  {
  }
}
 8003598:	bd38      	pop	{r3, r4, r5, pc}
 800359a:	bf00      	nop
 800359c:	2000000c 	.word	0x2000000c

080035a0 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035a0:	4907      	ldr	r1, [pc, #28]	; (80035c0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80035a2:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80035a4:	0203      	lsls	r3, r0, #8
 80035a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035aa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80035ae:	0412      	lsls	r2, r2, #16
 80035b0:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80035b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80035b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80035bc:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80035be:	4770      	bx	lr
 80035c0:	e000ed00 	.word	0xe000ed00

080035c4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80035c4:	b500      	push	{lr}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035c6:	4b18      	ldr	r3, [pc, #96]	; (8003628 <HAL_NVIC_SetPriority+0x64>)
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035ce:	f1c3 0c07 	rsb	ip, r3, #7
 80035d2:	f1bc 0f04 	cmp.w	ip, #4
 80035d6:	bf28      	it	cs
 80035d8:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035dc:	f103 0e04 	add.w	lr, r3, #4
 80035e0:	f1be 0f06 	cmp.w	lr, #6
 80035e4:	bf8c      	ite	hi
 80035e6:	3b03      	subhi	r3, #3
 80035e8:	2300      	movls	r3, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035ea:	f04f 3eff 	mov.w	lr, #4294967295
 80035ee:	fa0e fc0c 	lsl.w	ip, lr, ip
 80035f2:	ea21 010c 	bic.w	r1, r1, ip
 80035f6:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035f8:	fa0e fe03 	lsl.w	lr, lr, r3
 80035fc:	ea22 020e 	bic.w	r2, r2, lr
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003600:	4311      	orrs	r1, r2
  if ((int32_t)(IRQn) >= 0)
 8003602:	2800      	cmp	r0, #0
 8003604:	db09      	blt.n	800361a <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003606:	0109      	lsls	r1, r1, #4
 8003608:	b2c9      	uxtb	r1, r1
 800360a:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800360e:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8003612:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003616:	f85d fb04 	ldr.w	pc, [sp], #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800361a:	f000 000f 	and.w	r0, r0, #15
 800361e:	0109      	lsls	r1, r1, #4
 8003620:	b2c9      	uxtb	r1, r1
 8003622:	4b02      	ldr	r3, [pc, #8]	; (800362c <HAL_NVIC_SetPriority+0x68>)
 8003624:	5419      	strb	r1, [r3, r0]
 8003626:	e7f6      	b.n	8003616 <HAL_NVIC_SetPriority+0x52>
 8003628:	e000ed00 	.word	0xe000ed00
 800362c:	e000ed14 	.word	0xe000ed14

08003630 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003630:	2800      	cmp	r0, #0
 8003632:	db07      	blt.n	8003644 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003634:	0941      	lsrs	r1, r0, #5
 8003636:	f000 001f 	and.w	r0, r0, #31
 800363a:	2301      	movs	r3, #1
 800363c:	4083      	lsls	r3, r0
 800363e:	4a02      	ldr	r2, [pc, #8]	; (8003648 <HAL_NVIC_EnableIRQ+0x18>)
 8003640:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003644:	4770      	bx	lr
 8003646:	bf00      	nop
 8003648:	e000e100 	.word	0xe000e100

0800364c <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800364c:	4603      	mov	r3, r0
  HAL_StatusTypeDef status = HAL_OK;
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800364e:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
 8003652:	b2d2      	uxtb	r2, r2
 8003654:	2a02      	cmp	r2, #2
 8003656:	d006      	beq.n	8003666 <HAL_DMA_Abort+0x1a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003658:	2204      	movs	r2, #4
 800365a:	6382      	str	r2, [r0, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
    
    return HAL_ERROR;
 800365c:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 800365e:	2200      	movs	r2, #0
 8003660:	f883 2020 	strb.w	r2, [r3, #32]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
  
  return status; 
}
 8003664:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003666:	6801      	ldr	r1, [r0, #0]
 8003668:	680a      	ldr	r2, [r1, #0]
 800366a:	f022 020e 	bic.w	r2, r2, #14
 800366e:	600a      	str	r2, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 8003670:	6801      	ldr	r1, [r0, #0]
 8003672:	680a      	ldr	r2, [r1, #0]
 8003674:	f022 0201 	bic.w	r2, r2, #1
 8003678:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800367a:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 800367c:	2101      	movs	r1, #1
 800367e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003680:	fa01 f202 	lsl.w	r2, r1, r2
 8003684:	6042      	str	r2, [r0, #4]
  hdma->State = HAL_DMA_STATE_READY;
 8003686:	f883 1021 	strb.w	r1, [r3, #33]	; 0x21
  return status; 
 800368a:	2000      	movs	r0, #0
 800368c:	e7e7      	b.n	800365e <HAL_DMA_Abort+0x12>
	...

08003690 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003690:	b508      	push	{r3, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003692:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8003696:	b2db      	uxtb	r3, r3
 8003698:	2b02      	cmp	r3, #2
 800369a:	d003      	beq.n	80036a4 <HAL_DMA_Abort_IT+0x14>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800369c:	2304      	movs	r3, #4
 800369e:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 80036a0:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    } 
  }
  return status;
}
 80036a2:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80036a4:	6802      	ldr	r2, [r0, #0]
 80036a6:	6813      	ldr	r3, [r2, #0]
 80036a8:	f023 030e 	bic.w	r3, r3, #14
 80036ac:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80036ae:	6802      	ldr	r2, [r0, #0]
 80036b0:	6813      	ldr	r3, [r2, #0]
 80036b2:	f023 0301 	bic.w	r3, r3, #1
 80036b6:	6013      	str	r3, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80036b8:	6803      	ldr	r3, [r0, #0]
 80036ba:	4a19      	ldr	r2, [pc, #100]	; (8003720 <HAL_DMA_Abort_IT+0x90>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d013      	beq.n	80036e8 <HAL_DMA_Abort_IT+0x58>
 80036c0:	3214      	adds	r2, #20
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d01e      	beq.n	8003704 <HAL_DMA_Abort_IT+0x74>
 80036c6:	3214      	adds	r2, #20
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d01d      	beq.n	8003708 <HAL_DMA_Abort_IT+0x78>
 80036cc:	3214      	adds	r2, #20
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d01d      	beq.n	800370e <HAL_DMA_Abort_IT+0x7e>
 80036d2:	3214      	adds	r2, #20
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d01d      	beq.n	8003714 <HAL_DMA_Abort_IT+0x84>
 80036d8:	3214      	adds	r2, #20
 80036da:	4293      	cmp	r3, r2
 80036dc:	bf0c      	ite	eq
 80036de:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 80036e2:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 80036e6:	e000      	b.n	80036ea <HAL_DMA_Abort_IT+0x5a>
 80036e8:	2301      	movs	r3, #1
 80036ea:	4a0e      	ldr	r2, [pc, #56]	; (8003724 <HAL_DMA_Abort_IT+0x94>)
 80036ec:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80036ee:	2301      	movs	r3, #1
 80036f0:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 80036f4:	2300      	movs	r3, #0
 80036f6:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 80036fa:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80036fc:	b16b      	cbz	r3, 800371a <HAL_DMA_Abort_IT+0x8a>
      hdma->XferAbortCallback(hdma);
 80036fe:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8003700:	2000      	movs	r0, #0
 8003702:	e7ce      	b.n	80036a2 <HAL_DMA_Abort_IT+0x12>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003704:	2310      	movs	r3, #16
 8003706:	e7f0      	b.n	80036ea <HAL_DMA_Abort_IT+0x5a>
 8003708:	f44f 7380 	mov.w	r3, #256	; 0x100
 800370c:	e7ed      	b.n	80036ea <HAL_DMA_Abort_IT+0x5a>
 800370e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003712:	e7ea      	b.n	80036ea <HAL_DMA_Abort_IT+0x5a>
 8003714:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003718:	e7e7      	b.n	80036ea <HAL_DMA_Abort_IT+0x5a>
  HAL_StatusTypeDef status = HAL_OK;
 800371a:	2000      	movs	r0, #0
 800371c:	e7c1      	b.n	80036a2 <HAL_DMA_Abort_IT+0x12>
 800371e:	bf00      	nop
 8003720:	40020008 	.word	0x40020008
 8003724:	40020000 	.word	0x40020000

08003728 <HAL_DMA_GetState>:
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
  /* Return DMA handle state */
  return hdma->State;
 8003728:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
}
 800372c:	4770      	bx	lr
	...

08003730 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003734:	b083      	sub	sp, #12
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003736:	f8d1 9000 	ldr.w	r9, [r1]
 800373a:	f1b9 0f00 	cmp.w	r9, #0
 800373e:	f000 811f 	beq.w	8003980 <HAL_GPIO_Init+0x250>
 8003742:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 8003744:	4613      	mov	r3, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003746:	4e90      	ldr	r6, [pc, #576]	; (8003988 <HAL_GPIO_Init+0x258>)
        {
          SET_BIT(EXTI->IMR, iocurrent);
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003748:	4c90      	ldr	r4, [pc, #576]	; (800398c <HAL_GPIO_Init+0x25c>)
      switch (GPIO_Init->Mode)
 800374a:	4d91      	ldr	r5, [pc, #580]	; (8003990 <HAL_GPIO_Init+0x260>)
 800374c:	f8df e244 	ldr.w	lr, [pc, #580]	; 8003994 <HAL_GPIO_Init+0x264>
 8003750:	4694      	mov	ip, r2
 8003752:	e0ba      	b.n	80038ca <HAL_GPIO_Init+0x19a>
 8003754:	f04f 0c00 	mov.w	ip, #0
 8003758:	e025      	b.n	80037a6 <HAL_GPIO_Init+0x76>
 800375a:	45a9      	cmp	r9, r5
 800375c:	d00f      	beq.n	800377e <HAL_GPIO_Init+0x4e>
 800375e:	d906      	bls.n	800376e <HAL_GPIO_Init+0x3e>
 8003760:	45f1      	cmp	r9, lr
 8003762:	d00c      	beq.n	800377e <HAL_GPIO_Init+0x4e>
 8003764:	f8df a230 	ldr.w	sl, [pc, #560]	; 8003998 <HAL_GPIO_Init+0x268>
 8003768:	45d1      	cmp	r9, sl
 800376a:	d008      	beq.n	800377e <HAL_GPIO_Init+0x4e>
 800376c:	e01b      	b.n	80037a6 <HAL_GPIO_Init+0x76>
 800376e:	f8df a22c 	ldr.w	sl, [pc, #556]	; 800399c <HAL_GPIO_Init+0x26c>
 8003772:	45d1      	cmp	r9, sl
 8003774:	d003      	beq.n	800377e <HAL_GPIO_Init+0x4e>
 8003776:	f50a 2a70 	add.w	sl, sl, #983040	; 0xf0000
 800377a:	45d1      	cmp	r9, sl
 800377c:	d10f      	bne.n	800379e <HAL_GPIO_Init+0x6e>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800377e:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8003782:	f1bc 0f00 	cmp.w	ip, #0
 8003786:	f000 80ef 	beq.w	8003968 <HAL_GPIO_Init+0x238>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800378a:	f1bc 0f01 	cmp.w	ip, #1
            GPIOx->BSRR = ioposition;
 800378e:	bf0c      	ite	eq
 8003790:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8003794:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003798:	f04f 0c08 	mov.w	ip, #8
 800379c:	e003      	b.n	80037a6 <HAL_GPIO_Init+0x76>
      switch (GPIO_Init->Mode)
 800379e:	f5aa 1a80 	sub.w	sl, sl, #1048576	; 0x100000
 80037a2:	45d1      	cmp	r9, sl
 80037a4:	d0eb      	beq.n	800377e <HAL_GPIO_Init+0x4e>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80037a6:	2fff      	cmp	r7, #255	; 0xff
 80037a8:	bf99      	ittee	ls
 80037aa:	4681      	movls	r9, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80037ac:	4692      	movls	sl, r2
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80037ae:	f100 0904 	addhi.w	r9, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80037b2:	f1a2 0a20 	subhi.w	sl, r2, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80037b6:	f8d9 8000 	ldr.w	r8, [r9]
 80037ba:	f04f 0b0f 	mov.w	fp, #15
 80037be:	fa0b fb0a 	lsl.w	fp, fp, sl
 80037c2:	ea28 080b 	bic.w	r8, r8, fp
 80037c6:	fa0c fa0a 	lsl.w	sl, ip, sl
 80037ca:	ea48 080a 	orr.w	r8, r8, sl
 80037ce:	f8c9 8000 	str.w	r8, [r9]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80037d2:	f8d1 8004 	ldr.w	r8, [r1, #4]
 80037d6:	f018 5f80 	tst.w	r8, #268435456	; 0x10000000
 80037da:	d06f      	beq.n	80038bc <HAL_GPIO_Init+0x18c>
        __HAL_RCC_AFIO_CLK_ENABLE();
 80037dc:	f8d6 8018 	ldr.w	r8, [r6, #24]
 80037e0:	f048 0801 	orr.w	r8, r8, #1
 80037e4:	f8c6 8018 	str.w	r8, [r6, #24]
 80037e8:	f8d6 8018 	ldr.w	r8, [r6, #24]
 80037ec:	f008 0801 	and.w	r8, r8, #1
 80037f0:	f8cd 8004 	str.w	r8, [sp, #4]
 80037f4:	f8dd 8004 	ldr.w	r8, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 80037f8:	f023 0803 	bic.w	r8, r3, #3
 80037fc:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8003800:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
 8003804:	f8d8 a008 	ldr.w	sl, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003808:	f003 0b03 	and.w	fp, r3, #3
 800380c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8003810:	f04f 090f 	mov.w	r9, #15
 8003814:	fa09 f90b 	lsl.w	r9, r9, fp
 8003818:	ea2a 0a09 	bic.w	sl, sl, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800381c:	f8df 9180 	ldr.w	r9, [pc, #384]	; 80039a0 <HAL_GPIO_Init+0x270>
 8003820:	4548      	cmp	r0, r9
 8003822:	f000 80a4 	beq.w	800396e <HAL_GPIO_Init+0x23e>
 8003826:	f509 6980 	add.w	r9, r9, #1024	; 0x400
 800382a:	4548      	cmp	r0, r9
 800382c:	f000 80a2 	beq.w	8003974 <HAL_GPIO_Init+0x244>
 8003830:	f509 6980 	add.w	r9, r9, #1024	; 0x400
 8003834:	4548      	cmp	r0, r9
 8003836:	f000 80a0 	beq.w	800397a <HAL_GPIO_Init+0x24a>
 800383a:	f509 6980 	add.w	r9, r9, #1024	; 0x400
 800383e:	4548      	cmp	r0, r9
 8003840:	bf0c      	ite	eq
 8003842:	f04f 0903 	moveq.w	r9, #3
 8003846:	f04f 0904 	movne.w	r9, #4
 800384a:	fa09 f90b 	lsl.w	r9, r9, fp
 800384e:	ea49 090a 	orr.w	r9, r9, sl
        AFIO->EXTICR[position >> 2u] = temp;
 8003852:	f8c8 9008 	str.w	r9, [r8, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003856:	f8d1 8004 	ldr.w	r8, [r1, #4]
 800385a:	f418 1f80 	tst.w	r8, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 800385e:	f8d4 8008 	ldr.w	r8, [r4, #8]
 8003862:	bf14      	ite	ne
 8003864:	ea48 0807 	orrne.w	r8, r8, r7
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003868:	ea28 0807 	biceq.w	r8, r8, r7
 800386c:	f8c4 8008 	str.w	r8, [r4, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003870:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8003874:	f418 1f00 	tst.w	r8, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8003878:	f8d4 800c 	ldr.w	r8, [r4, #12]
 800387c:	bf14      	ite	ne
 800387e:	ea48 0807 	orrne.w	r8, r8, r7
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003882:	ea28 0807 	biceq.w	r8, r8, r7
 8003886:	f8c4 800c 	str.w	r8, [r4, #12]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800388a:	f8d1 8004 	ldr.w	r8, [r1, #4]
 800388e:	f418 3f00 	tst.w	r8, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8003892:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8003896:	bf14      	ite	ne
 8003898:	ea48 0807 	orrne.w	r8, r8, r7
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800389c:	ea28 0807 	biceq.w	r8, r8, r7
 80038a0:	f8c4 8004 	str.w	r8, [r4, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80038a4:	f8d1 8004 	ldr.w	r8, [r1, #4]
 80038a8:	f418 3f80 	tst.w	r8, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80038ac:	f8d4 8000 	ldr.w	r8, [r4]
 80038b0:	bf14      	ite	ne
 80038b2:	ea48 0707 	orrne.w	r7, r8, r7
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80038b6:	ea28 0707 	biceq.w	r7, r8, r7
 80038ba:	6027      	str	r7, [r4, #0]
        }
      }
    }

	position++;
 80038bc:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038be:	f8d1 9000 	ldr.w	r9, [r1]
 80038c2:	3204      	adds	r2, #4
 80038c4:	fa39 f703 	lsrs.w	r7, r9, r3
 80038c8:	d05a      	beq.n	8003980 <HAL_GPIO_Init+0x250>
    ioposition = (0x01uL << position);
 80038ca:	f04f 0801 	mov.w	r8, #1
 80038ce:	fa08 f803 	lsl.w	r8, r8, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80038d2:	ea08 0709 	and.w	r7, r8, r9
    if (iocurrent == ioposition)
 80038d6:	ea38 0909 	bics.w	r9, r8, r9
 80038da:	d1ef      	bne.n	80038bc <HAL_GPIO_Init+0x18c>
      switch (GPIO_Init->Mode)
 80038dc:	f8d1 9004 	ldr.w	r9, [r1, #4]
 80038e0:	f1b9 0f12 	cmp.w	r9, #18
 80038e4:	f63f af39 	bhi.w	800375a <HAL_GPIO_Init+0x2a>
 80038e8:	f1b9 0f12 	cmp.w	r9, #18
 80038ec:	f63f af5b 	bhi.w	80037a6 <HAL_GPIO_Init+0x76>
 80038f0:	f20f 0a04 	addw	sl, pc, #4
 80038f4:	f85a f029 	ldr.w	pc, [sl, r9, lsl #2]
 80038f8:	0800377f 	.word	0x0800377f
 80038fc:	08003945 	.word	0x08003945
 8003900:	08003955 	.word	0x08003955
 8003904:	08003755 	.word	0x08003755
 8003908:	080037a7 	.word	0x080037a7
 800390c:	080037a7 	.word	0x080037a7
 8003910:	080037a7 	.word	0x080037a7
 8003914:	080037a7 	.word	0x080037a7
 8003918:	080037a7 	.word	0x080037a7
 800391c:	080037a7 	.word	0x080037a7
 8003920:	080037a7 	.word	0x080037a7
 8003924:	080037a7 	.word	0x080037a7
 8003928:	080037a7 	.word	0x080037a7
 800392c:	080037a7 	.word	0x080037a7
 8003930:	080037a7 	.word	0x080037a7
 8003934:	080037a7 	.word	0x080037a7
 8003938:	080037a7 	.word	0x080037a7
 800393c:	0800394b 	.word	0x0800394b
 8003940:	0800395f 	.word	0x0800395f
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003944:	f8d1 c00c 	ldr.w	ip, [r1, #12]
          break;
 8003948:	e72d      	b.n	80037a6 <HAL_GPIO_Init+0x76>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800394a:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 800394e:	f10c 0c04 	add.w	ip, ip, #4
          break;
 8003952:	e728      	b.n	80037a6 <HAL_GPIO_Init+0x76>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003954:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 8003958:	f10c 0c08 	add.w	ip, ip, #8
          break;
 800395c:	e723      	b.n	80037a6 <HAL_GPIO_Init+0x76>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800395e:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 8003962:	f10c 0c0c 	add.w	ip, ip, #12
          break;
 8003966:	e71e      	b.n	80037a6 <HAL_GPIO_Init+0x76>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003968:	f04f 0c04 	mov.w	ip, #4
 800396c:	e71b      	b.n	80037a6 <HAL_GPIO_Init+0x76>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800396e:	f04f 0900 	mov.w	r9, #0
 8003972:	e76a      	b.n	800384a <HAL_GPIO_Init+0x11a>
 8003974:	f04f 0901 	mov.w	r9, #1
 8003978:	e767      	b.n	800384a <HAL_GPIO_Init+0x11a>
 800397a:	f04f 0902 	mov.w	r9, #2
 800397e:	e764      	b.n	800384a <HAL_GPIO_Init+0x11a>
  }
}
 8003980:	b003      	add	sp, #12
 8003982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003986:	bf00      	nop
 8003988:	40021000 	.word	0x40021000
 800398c:	40010400 	.word	0x40010400
 8003990:	10220000 	.word	0x10220000
 8003994:	10310000 	.word	0x10310000
 8003998:	10320000 	.word	0x10320000
 800399c:	10120000 	.word	0x10120000
 80039a0:	40010800 	.word	0x40010800

080039a4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80039a4:	b10a      	cbz	r2, 80039aa <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 80039a6:	6101      	str	r1, [r0, #16]
 80039a8:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80039aa:	0409      	lsls	r1, r1, #16
 80039ac:	6101      	str	r1, [r0, #16]
  }
}
 80039ae:	4770      	bx	lr

080039b0 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80039b0:	6803      	ldr	r3, [r0, #0]
 80039b2:	695a      	ldr	r2, [r3, #20]
 80039b4:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80039b8:	d101      	bne.n	80039be <I2C_IsAcknowledgeFailed+0xe>
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_ERROR;
  }
  return HAL_OK;
 80039ba:	2000      	movs	r0, #0
}
 80039bc:	4770      	bx	lr
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039be:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80039c2:	615a      	str	r2, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 80039c4:	2300      	movs	r3, #0
 80039c6:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80039c8:	2220      	movs	r2, #32
 80039ca:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039ce:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80039d2:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80039d4:	f042 0204 	orr.w	r2, r2, #4
 80039d8:	6402      	str	r2, [r0, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 80039da:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    return HAL_ERROR;
 80039de:	2001      	movs	r0, #1
 80039e0:	4770      	bx	lr

080039e2 <I2C_WaitOnFlagUntilTimeout>:
{
 80039e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039e6:	4605      	mov	r5, r0
 80039e8:	460c      	mov	r4, r1
 80039ea:	4616      	mov	r6, r2
 80039ec:	461f      	mov	r7, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039ee:	f3c1 4807 	ubfx	r8, r1, #16, #8
 80039f2:	f1b8 0f01 	cmp.w	r8, #1
 80039f6:	682b      	ldr	r3, [r5, #0]
 80039f8:	bf0c      	ite	eq
 80039fa:	695b      	ldreq	r3, [r3, #20]
 80039fc:	699b      	ldrne	r3, [r3, #24]
 80039fe:	ea24 0c03 	bic.w	ip, r4, r3
 8003a02:	fa1f fc8c 	uxth.w	ip, ip
 8003a06:	fabc fc8c 	clz	ip, ip
 8003a0a:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8003a0e:	4566      	cmp	r6, ip
 8003a10:	d127      	bne.n	8003a62 <I2C_WaitOnFlagUntilTimeout+0x80>
    if (Timeout != HAL_MAX_DELAY)
 8003a12:	f1b7 3fff 	cmp.w	r7, #4294967295
 8003a16:	d0ec      	beq.n	80039f2 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a18:	f7ff fda8 	bl	800356c <HAL_GetTick>
 8003a1c:	9b06      	ldr	r3, [sp, #24]
 8003a1e:	1ac0      	subs	r0, r0, r3
 8003a20:	42b8      	cmp	r0, r7
 8003a22:	d801      	bhi.n	8003a28 <I2C_WaitOnFlagUntilTimeout+0x46>
 8003a24:	2f00      	cmp	r7, #0
 8003a26:	d1e4      	bne.n	80039f2 <I2C_WaitOnFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003a28:	f1b8 0f01 	cmp.w	r8, #1
 8003a2c:	682b      	ldr	r3, [r5, #0]
 8003a2e:	bf0c      	ite	eq
 8003a30:	695b      	ldreq	r3, [r3, #20]
 8003a32:	699b      	ldrne	r3, [r3, #24]
 8003a34:	ea24 0303 	bic.w	r3, r4, r3
 8003a38:	b29b      	uxth	r3, r3
 8003a3a:	fab3 f383 	clz	r3, r3
 8003a3e:	095b      	lsrs	r3, r3, #5
 8003a40:	429e      	cmp	r6, r3
 8003a42:	d1d6      	bne.n	80039f2 <I2C_WaitOnFlagUntilTimeout+0x10>
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003a44:	2300      	movs	r3, #0
 8003a46:	632b      	str	r3, [r5, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003a48:	2220      	movs	r2, #32
 8003a4a:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003a4e:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003a52:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8003a54:	f042 0220 	orr.w	r2, r2, #32
 8003a58:	642a      	str	r2, [r5, #64]	; 0x40
          __HAL_UNLOCK(hi2c);
 8003a5a:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
          return HAL_ERROR;
 8003a5e:	2001      	movs	r0, #1
 8003a60:	e000      	b.n	8003a64 <I2C_WaitOnFlagUntilTimeout+0x82>
  return HAL_OK;
 8003a62:	2000      	movs	r0, #0
}
 8003a64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003a68 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8003a68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a6c:	4605      	mov	r5, r0
 8003a6e:	460e      	mov	r6, r1
 8003a70:	4617      	mov	r7, r2
 8003a72:	4699      	mov	r9, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a74:	f3c1 4807 	ubfx	r8, r1, #16, #8
 8003a78:	f1b8 0f01 	cmp.w	r8, #1
 8003a7c:	682b      	ldr	r3, [r5, #0]
 8003a7e:	bf0c      	ite	eq
 8003a80:	695c      	ldreq	r4, [r3, #20]
 8003a82:	699c      	ldrne	r4, [r3, #24]
 8003a84:	ea26 0404 	bic.w	r4, r6, r4
 8003a88:	b2a4      	uxth	r4, r4
 8003a8a:	3c00      	subs	r4, #0
 8003a8c:	bf18      	it	ne
 8003a8e:	2401      	movne	r4, #1
 8003a90:	2c00      	cmp	r4, #0
 8003a92:	d044      	beq.n	8003b1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a94:	682b      	ldr	r3, [r5, #0]
 8003a96:	695a      	ldr	r2, [r3, #20]
 8003a98:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8003a9c:	d127      	bne.n	8003aee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
    if (Timeout != HAL_MAX_DELAY)
 8003a9e:	f1b7 3fff 	cmp.w	r7, #4294967295
 8003aa2:	d0e9      	beq.n	8003a78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003aa4:	f7ff fd62 	bl	800356c <HAL_GetTick>
 8003aa8:	eba0 0009 	sub.w	r0, r0, r9
 8003aac:	42b8      	cmp	r0, r7
 8003aae:	d801      	bhi.n	8003ab4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4c>
 8003ab0:	2f00      	cmp	r7, #0
 8003ab2:	d1e1      	bne.n	8003a78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003ab4:	f1b8 0f01 	cmp.w	r8, #1
 8003ab8:	682b      	ldr	r3, [r5, #0]
 8003aba:	bf0c      	ite	eq
 8003abc:	695b      	ldreq	r3, [r3, #20]
 8003abe:	699b      	ldrne	r3, [r3, #24]
 8003ac0:	ea26 0303 	bic.w	r3, r6, r3
 8003ac4:	b29b      	uxth	r3, r3
 8003ac6:	3b00      	subs	r3, #0
 8003ac8:	bf18      	it	ne
 8003aca:	2301      	movne	r3, #1
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d0d3      	beq.n	8003a78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	632b      	str	r3, [r5, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003ad4:	2220      	movs	r2, #32
 8003ad6:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ada:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ade:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8003ae0:	f042 0220 	orr.w	r2, r2, #32
 8003ae4:	642a      	str	r2, [r5, #64]	; 0x40
          __HAL_UNLOCK(hi2c);
 8003ae6:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
          return HAL_ERROR;
 8003aea:	2001      	movs	r0, #1
 8003aec:	e015      	b.n	8003b1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb2>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003af4:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003af6:	682b      	ldr	r3, [r5, #0]
 8003af8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003afc:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003afe:	2300      	movs	r3, #0
 8003b00:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003b02:	2220      	movs	r2, #32
 8003b04:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b08:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003b0c:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8003b0e:	f042 0204 	orr.w	r2, r2, #4
 8003b12:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8003b14:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 8003b18:	2001      	movs	r0, #1
}
 8003b1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  return HAL_OK;
 8003b1e:	2000      	movs	r0, #0
 8003b20:	e7fb      	b.n	8003b1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb2>

08003b22 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8003b22:	b570      	push	{r4, r5, r6, lr}
 8003b24:	4604      	mov	r4, r0
 8003b26:	460d      	mov	r5, r1
 8003b28:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b2a:	6823      	ldr	r3, [r4, #0]
 8003b2c:	695b      	ldr	r3, [r3, #20]
 8003b2e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003b32:	d121      	bne.n	8003b78 <I2C_WaitOnTXEFlagUntilTimeout+0x56>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b34:	4620      	mov	r0, r4
 8003b36:	f7ff ff3b 	bl	80039b0 <I2C_IsAcknowledgeFailed>
 8003b3a:	b9f8      	cbnz	r0, 8003b7c <I2C_WaitOnTXEFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 8003b3c:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003b40:	d0f3      	beq.n	8003b2a <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b42:	f7ff fd13 	bl	800356c <HAL_GetTick>
 8003b46:	1b80      	subs	r0, r0, r6
 8003b48:	42a8      	cmp	r0, r5
 8003b4a:	d801      	bhi.n	8003b50 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8003b4c:	2d00      	cmp	r5, #0
 8003b4e:	d1ec      	bne.n	8003b2a <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003b50:	6823      	ldr	r3, [r4, #0]
 8003b52:	695b      	ldr	r3, [r3, #20]
 8003b54:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003b58:	d1e7      	bne.n	8003b2a <I2C_WaitOnTXEFlagUntilTimeout+0x8>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	6323      	str	r3, [r4, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003b5e:	2220      	movs	r2, #32
 8003b60:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b64:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b68:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003b6a:	f042 0220 	orr.w	r2, r2, #32
 8003b6e:	6422      	str	r2, [r4, #64]	; 0x40
          __HAL_UNLOCK(hi2c);
 8003b70:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_ERROR;
 8003b74:	2001      	movs	r0, #1
 8003b76:	e000      	b.n	8003b7a <I2C_WaitOnTXEFlagUntilTimeout+0x58>
  return HAL_OK;
 8003b78:	2000      	movs	r0, #0
}
 8003b7a:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8003b7c:	2001      	movs	r0, #1
 8003b7e:	e7fc      	b.n	8003b7a <I2C_WaitOnTXEFlagUntilTimeout+0x58>

08003b80 <I2C_RequestMemoryWrite>:
{
 8003b80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003b84:	b085      	sub	sp, #20
 8003b86:	4604      	mov	r4, r0
 8003b88:	460d      	mov	r5, r1
 8003b8a:	4691      	mov	r9, r2
 8003b8c:	461f      	mov	r7, r3
 8003b8e:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8003b92:	9e0d      	ldr	r6, [sp, #52]	; 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b94:	6803      	ldr	r3, [r0, #0]
 8003b96:	6819      	ldr	r1, [r3, #0]
 8003b98:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8003b9c:	6019      	str	r1, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b9e:	9600      	str	r6, [sp, #0]
 8003ba0:	4643      	mov	r3, r8
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003ba8:	f7ff ff1b 	bl	80039e2 <I2C_WaitOnFlagUntilTimeout>
 8003bac:	b970      	cbnz	r0, 8003bcc <I2C_RequestMemoryWrite+0x4c>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003bae:	6823      	ldr	r3, [r4, #0]
 8003bb0:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8003bb4:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003bb6:	4633      	mov	r3, r6
 8003bb8:	4642      	mov	r2, r8
 8003bba:	4928      	ldr	r1, [pc, #160]	; (8003c5c <I2C_RequestMemoryWrite+0xdc>)
 8003bbc:	4620      	mov	r0, r4
 8003bbe:	f7ff ff53 	bl	8003a68 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003bc2:	b168      	cbz	r0, 8003be0 <I2C_RequestMemoryWrite+0x60>
    return HAL_ERROR;
 8003bc4:	2001      	movs	r0, #1
}
 8003bc6:	b005      	add	sp, #20
 8003bc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003bcc:	6823      	ldr	r3, [r4, #0]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003bd4:	d040      	beq.n	8003c58 <I2C_RequestMemoryWrite+0xd8>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003bd6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003bda:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8003bdc:	2003      	movs	r0, #3
 8003bde:	e7f2      	b.n	8003bc6 <I2C_RequestMemoryWrite+0x46>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003be0:	2300      	movs	r3, #0
 8003be2:	9303      	str	r3, [sp, #12]
 8003be4:	6823      	ldr	r3, [r4, #0]
 8003be6:	695a      	ldr	r2, [r3, #20]
 8003be8:	9203      	str	r2, [sp, #12]
 8003bea:	699b      	ldr	r3, [r3, #24]
 8003bec:	9303      	str	r3, [sp, #12]
 8003bee:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bf0:	4632      	mov	r2, r6
 8003bf2:	4641      	mov	r1, r8
 8003bf4:	4620      	mov	r0, r4
 8003bf6:	f7ff ff94 	bl	8003b22 <I2C_WaitOnTXEFlagUntilTimeout>
 8003bfa:	b930      	cbnz	r0, 8003c0a <I2C_RequestMemoryWrite+0x8a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003bfc:	2f01      	cmp	r7, #1
 8003bfe:	d110      	bne.n	8003c22 <I2C_RequestMemoryWrite+0xa2>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003c00:	6823      	ldr	r3, [r4, #0]
 8003c02:	fa5f f689 	uxtb.w	r6, r9
 8003c06:	611e      	str	r6, [r3, #16]
 8003c08:	e7dd      	b.n	8003bc6 <I2C_RequestMemoryWrite+0x46>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c0a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003c0c:	2b04      	cmp	r3, #4
 8003c0e:	d001      	beq.n	8003c14 <I2C_RequestMemoryWrite+0x94>
    return HAL_ERROR;
 8003c10:	2001      	movs	r0, #1
 8003c12:	e7d8      	b.n	8003bc6 <I2C_RequestMemoryWrite+0x46>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c14:	6822      	ldr	r2, [r4, #0]
 8003c16:	6813      	ldr	r3, [r2, #0]
 8003c18:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c1c:	6013      	str	r3, [r2, #0]
    return HAL_ERROR;
 8003c1e:	2001      	movs	r0, #1
 8003c20:	e7d1      	b.n	8003bc6 <I2C_RequestMemoryWrite+0x46>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003c22:	6823      	ldr	r3, [r4, #0]
 8003c24:	ea4f 2219 	mov.w	r2, r9, lsr #8
 8003c28:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c2a:	4632      	mov	r2, r6
 8003c2c:	4641      	mov	r1, r8
 8003c2e:	4620      	mov	r0, r4
 8003c30:	f7ff ff77 	bl	8003b22 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c34:	b920      	cbnz	r0, 8003c40 <I2C_RequestMemoryWrite+0xc0>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003c36:	6823      	ldr	r3, [r4, #0]
 8003c38:	fa5f f689 	uxtb.w	r6, r9
 8003c3c:	611e      	str	r6, [r3, #16]
 8003c3e:	e7c2      	b.n	8003bc6 <I2C_RequestMemoryWrite+0x46>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c40:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003c42:	2b04      	cmp	r3, #4
 8003c44:	d001      	beq.n	8003c4a <I2C_RequestMemoryWrite+0xca>
      return HAL_ERROR;
 8003c46:	2001      	movs	r0, #1
 8003c48:	e7bd      	b.n	8003bc6 <I2C_RequestMemoryWrite+0x46>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c4a:	6822      	ldr	r2, [r4, #0]
 8003c4c:	6813      	ldr	r3, [r2, #0]
 8003c4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c52:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 8003c54:	2001      	movs	r0, #1
 8003c56:	e7b6      	b.n	8003bc6 <I2C_RequestMemoryWrite+0x46>
    return HAL_TIMEOUT;
 8003c58:	2003      	movs	r0, #3
 8003c5a:	e7b4      	b.n	8003bc6 <I2C_RequestMemoryWrite+0x46>
 8003c5c:	00010002 	.word	0x00010002

08003c60 <I2C_RequestMemoryRead>:
{
 8003c60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c64:	b084      	sub	sp, #16
 8003c66:	4604      	mov	r4, r0
 8003c68:	460d      	mov	r5, r1
 8003c6a:	4616      	mov	r6, r2
 8003c6c:	4699      	mov	r9, r3
 8003c6e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8003c70:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c74:	6802      	ldr	r2, [r0, #0]
 8003c76:	6813      	ldr	r3, [r2, #0]
 8003c78:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c7c:	6013      	str	r3, [r2, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c7e:	6803      	ldr	r3, [r0, #0]
 8003c80:	6819      	ldr	r1, [r3, #0]
 8003c82:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8003c86:	6019      	str	r1, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c88:	f8cd 8000 	str.w	r8, [sp]
 8003c8c:	463b      	mov	r3, r7
 8003c8e:	2200      	movs	r2, #0
 8003c90:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003c94:	f7ff fea5 	bl	80039e2 <I2C_WaitOnFlagUntilTimeout>
 8003c98:	b980      	cbnz	r0, 8003cbc <I2C_RequestMemoryRead+0x5c>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003c9a:	fa5f fa85 	uxtb.w	sl, r5
 8003c9e:	6823      	ldr	r3, [r4, #0]
 8003ca0:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8003ca4:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ca6:	4643      	mov	r3, r8
 8003ca8:	463a      	mov	r2, r7
 8003caa:	4945      	ldr	r1, [pc, #276]	; (8003dc0 <I2C_RequestMemoryRead+0x160>)
 8003cac:	4620      	mov	r0, r4
 8003cae:	f7ff fedb 	bl	8003a68 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003cb2:	b168      	cbz	r0, 8003cd0 <I2C_RequestMemoryRead+0x70>
    return HAL_ERROR;
 8003cb4:	2001      	movs	r0, #1
}
 8003cb6:	b004      	add	sp, #16
 8003cb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003cbc:	6823      	ldr	r3, [r4, #0]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003cc4:	d077      	beq.n	8003db6 <I2C_RequestMemoryRead+0x156>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003cc6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003cca:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8003ccc:	2003      	movs	r0, #3
 8003cce:	e7f2      	b.n	8003cb6 <I2C_RequestMemoryRead+0x56>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	9303      	str	r3, [sp, #12]
 8003cd4:	6823      	ldr	r3, [r4, #0]
 8003cd6:	695a      	ldr	r2, [r3, #20]
 8003cd8:	9203      	str	r2, [sp, #12]
 8003cda:	699b      	ldr	r3, [r3, #24]
 8003cdc:	9303      	str	r3, [sp, #12]
 8003cde:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ce0:	4642      	mov	r2, r8
 8003ce2:	4639      	mov	r1, r7
 8003ce4:	4620      	mov	r0, r4
 8003ce6:	f7ff ff1c 	bl	8003b22 <I2C_WaitOnTXEFlagUntilTimeout>
 8003cea:	b988      	cbnz	r0, 8003d10 <I2C_RequestMemoryRead+0xb0>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003cec:	f1b9 0f01 	cmp.w	r9, #1
 8003cf0:	d11a      	bne.n	8003d28 <I2C_RequestMemoryRead+0xc8>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003cf2:	6823      	ldr	r3, [r4, #0]
 8003cf4:	b2f6      	uxtb	r6, r6
 8003cf6:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cf8:	4642      	mov	r2, r8
 8003cfa:	4639      	mov	r1, r7
 8003cfc:	4620      	mov	r0, r4
 8003cfe:	f7ff ff10 	bl	8003b22 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d02:	2800      	cmp	r0, #0
 8003d04:	d030      	beq.n	8003d68 <I2C_RequestMemoryRead+0x108>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d06:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003d08:	2b04      	cmp	r3, #4
 8003d0a:	d026      	beq.n	8003d5a <I2C_RequestMemoryRead+0xfa>
    return HAL_ERROR;
 8003d0c:	2001      	movs	r0, #1
 8003d0e:	e7d2      	b.n	8003cb6 <I2C_RequestMemoryRead+0x56>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d10:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003d12:	2b04      	cmp	r3, #4
 8003d14:	d001      	beq.n	8003d1a <I2C_RequestMemoryRead+0xba>
    return HAL_ERROR;
 8003d16:	2001      	movs	r0, #1
 8003d18:	e7cd      	b.n	8003cb6 <I2C_RequestMemoryRead+0x56>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d1a:	6822      	ldr	r2, [r4, #0]
 8003d1c:	6813      	ldr	r3, [r2, #0]
 8003d1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d22:	6013      	str	r3, [r2, #0]
    return HAL_ERROR;
 8003d24:	2001      	movs	r0, #1
 8003d26:	e7c6      	b.n	8003cb6 <I2C_RequestMemoryRead+0x56>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003d28:	6823      	ldr	r3, [r4, #0]
 8003d2a:	0a32      	lsrs	r2, r6, #8
 8003d2c:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d2e:	4642      	mov	r2, r8
 8003d30:	4639      	mov	r1, r7
 8003d32:	4620      	mov	r0, r4
 8003d34:	f7ff fef5 	bl	8003b22 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d38:	b918      	cbnz	r0, 8003d42 <I2C_RequestMemoryRead+0xe2>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d3a:	6823      	ldr	r3, [r4, #0]
 8003d3c:	b2f6      	uxtb	r6, r6
 8003d3e:	611e      	str	r6, [r3, #16]
 8003d40:	e7da      	b.n	8003cf8 <I2C_RequestMemoryRead+0x98>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d42:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003d44:	2b04      	cmp	r3, #4
 8003d46:	d001      	beq.n	8003d4c <I2C_RequestMemoryRead+0xec>
      return HAL_ERROR;
 8003d48:	2001      	movs	r0, #1
 8003d4a:	e7b4      	b.n	8003cb6 <I2C_RequestMemoryRead+0x56>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d4c:	6822      	ldr	r2, [r4, #0]
 8003d4e:	6813      	ldr	r3, [r2, #0]
 8003d50:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d54:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 8003d56:	2001      	movs	r0, #1
 8003d58:	e7ad      	b.n	8003cb6 <I2C_RequestMemoryRead+0x56>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d5a:	6822      	ldr	r2, [r4, #0]
 8003d5c:	6813      	ldr	r3, [r2, #0]
 8003d5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d62:	6013      	str	r3, [r2, #0]
    return HAL_ERROR;
 8003d64:	2001      	movs	r0, #1
 8003d66:	e7a6      	b.n	8003cb6 <I2C_RequestMemoryRead+0x56>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d68:	6822      	ldr	r2, [r4, #0]
 8003d6a:	6813      	ldr	r3, [r2, #0]
 8003d6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d70:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d72:	f8cd 8000 	str.w	r8, [sp]
 8003d76:	463b      	mov	r3, r7
 8003d78:	2200      	movs	r2, #0
 8003d7a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003d7e:	4620      	mov	r0, r4
 8003d80:	f7ff fe2f 	bl	80039e2 <I2C_WaitOnFlagUntilTimeout>
 8003d84:	b968      	cbnz	r0, 8003da2 <I2C_RequestMemoryRead+0x142>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003d86:	6822      	ldr	r2, [r4, #0]
 8003d88:	f04a 0301 	orr.w	r3, sl, #1
 8003d8c:	6113      	str	r3, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d8e:	4643      	mov	r3, r8
 8003d90:	463a      	mov	r2, r7
 8003d92:	490b      	ldr	r1, [pc, #44]	; (8003dc0 <I2C_RequestMemoryRead+0x160>)
 8003d94:	4620      	mov	r0, r4
 8003d96:	f7ff fe67 	bl	8003a68 <I2C_WaitOnMasterAddressFlagUntilTimeout>
    return HAL_TIMEOUT;
 8003d9a:	3800      	subs	r0, #0
 8003d9c:	bf18      	it	ne
 8003d9e:	2001      	movne	r0, #1
 8003da0:	e789      	b.n	8003cb6 <I2C_RequestMemoryRead+0x56>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003da2:	6823      	ldr	r3, [r4, #0]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003daa:	d006      	beq.n	8003dba <I2C_RequestMemoryRead+0x15a>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003dac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003db0:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8003db2:	2003      	movs	r0, #3
 8003db4:	e77f      	b.n	8003cb6 <I2C_RequestMemoryRead+0x56>
    return HAL_TIMEOUT;
 8003db6:	2003      	movs	r0, #3
 8003db8:	e77d      	b.n	8003cb6 <I2C_RequestMemoryRead+0x56>
    return HAL_TIMEOUT;
 8003dba:	2003      	movs	r0, #3
 8003dbc:	e77b      	b.n	8003cb6 <I2C_RequestMemoryRead+0x56>
 8003dbe:	bf00      	nop
 8003dc0:	00010002 	.word	0x00010002

08003dc4 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8003dc4:	b570      	push	{r4, r5, r6, lr}
 8003dc6:	4604      	mov	r4, r0
 8003dc8:	460d      	mov	r5, r1
 8003dca:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003dcc:	6823      	ldr	r3, [r4, #0]
 8003dce:	695b      	ldr	r3, [r3, #20]
 8003dd0:	f013 0f04 	tst.w	r3, #4
 8003dd4:	d121      	bne.n	8003e1a <I2C_WaitOnBTFFlagUntilTimeout+0x56>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003dd6:	4620      	mov	r0, r4
 8003dd8:	f7ff fdea 	bl	80039b0 <I2C_IsAcknowledgeFailed>
 8003ddc:	b9f8      	cbnz	r0, 8003e1e <I2C_WaitOnBTFFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 8003dde:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003de2:	d0f3      	beq.n	8003dcc <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003de4:	f7ff fbc2 	bl	800356c <HAL_GetTick>
 8003de8:	1b80      	subs	r0, r0, r6
 8003dea:	42a8      	cmp	r0, r5
 8003dec:	d801      	bhi.n	8003df2 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8003dee:	2d00      	cmp	r5, #0
 8003df0:	d1ec      	bne.n	8003dcc <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003df2:	6823      	ldr	r3, [r4, #0]
 8003df4:	695b      	ldr	r3, [r3, #20]
 8003df6:	f013 0f04 	tst.w	r3, #4
 8003dfa:	d1e7      	bne.n	8003dcc <I2C_WaitOnBTFFlagUntilTimeout+0x8>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	6323      	str	r3, [r4, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003e00:	2220      	movs	r2, #32
 8003e02:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e06:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e0a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003e0c:	f042 0220 	orr.w	r2, r2, #32
 8003e10:	6422      	str	r2, [r4, #64]	; 0x40
          __HAL_UNLOCK(hi2c);
 8003e12:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_ERROR;
 8003e16:	2001      	movs	r0, #1
 8003e18:	e000      	b.n	8003e1c <I2C_WaitOnBTFFlagUntilTimeout+0x58>
  return HAL_OK;
 8003e1a:	2000      	movs	r0, #0
}
 8003e1c:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8003e1e:	2001      	movs	r0, #1
 8003e20:	e7fc      	b.n	8003e1c <I2C_WaitOnBTFFlagUntilTimeout+0x58>

08003e22 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8003e22:	b570      	push	{r4, r5, r6, lr}
 8003e24:	4604      	mov	r4, r0
 8003e26:	460d      	mov	r5, r1
 8003e28:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003e2a:	6803      	ldr	r3, [r0, #0]
 8003e2c:	695a      	ldr	r2, [r3, #20]
 8003e2e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003e32:	d01b      	beq.n	8003e6c <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
  return HAL_OK;
 8003e34:	2000      	movs	r0, #0
 8003e36:	e00e      	b.n	8003e56 <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e38:	f06f 0210 	mvn.w	r2, #16
 8003e3c:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e42:	2220      	movs	r2, #32
 8003e44:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e48:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003e4c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003e4e:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8003e50:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      return HAL_ERROR;
 8003e54:	2001      	movs	r0, #1
}
 8003e56:	bd70      	pop	{r4, r5, r6, pc}
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003e58:	6823      	ldr	r3, [r4, #0]
 8003e5a:	695b      	ldr	r3, [r3, #20]
 8003e5c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003e60:	d010      	beq.n	8003e84 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003e62:	6823      	ldr	r3, [r4, #0]
 8003e64:	6958      	ldr	r0, [r3, #20]
 8003e66:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003e6a:	d11a      	bne.n	8003ea2 <I2C_WaitOnRXNEFlagUntilTimeout+0x80>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003e6c:	6958      	ldr	r0, [r3, #20]
 8003e6e:	f010 0f10 	tst.w	r0, #16
 8003e72:	d1e1      	bne.n	8003e38 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e74:	f7ff fb7a 	bl	800356c <HAL_GetTick>
 8003e78:	1b80      	subs	r0, r0, r6
 8003e7a:	42a8      	cmp	r0, r5
 8003e7c:	d8ec      	bhi.n	8003e58 <I2C_WaitOnRXNEFlagUntilTimeout+0x36>
 8003e7e:	2d00      	cmp	r5, #0
 8003e80:	d1ef      	bne.n	8003e62 <I2C_WaitOnRXNEFlagUntilTimeout+0x40>
 8003e82:	e7e9      	b.n	8003e58 <I2C_WaitOnRXNEFlagUntilTimeout+0x36>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003e84:	2300      	movs	r3, #0
 8003e86:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003e88:	2220      	movs	r2, #32
 8003e8a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e8e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e92:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003e94:	f042 0220 	orr.w	r2, r2, #32
 8003e98:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003e9a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8003e9e:	2001      	movs	r0, #1
 8003ea0:	e7d9      	b.n	8003e56 <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
  return HAL_OK;
 8003ea2:	2000      	movs	r0, #0
 8003ea4:	e7d7      	b.n	8003e56 <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
	...

08003ea8 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8003ea8:	2800      	cmp	r0, #0
 8003eaa:	f000 80b1 	beq.w	8004010 <HAL_I2C_Init+0x168>
{
 8003eae:	b538      	push	{r3, r4, r5, lr}
 8003eb0:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003eb2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d074      	beq.n	8003fa4 <HAL_I2C_Init+0xfc>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003eba:	2324      	movs	r3, #36	; 0x24
 8003ebc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8003ec0:	6822      	ldr	r2, [r4, #0]
 8003ec2:	6813      	ldr	r3, [r2, #0]
 8003ec4:	f023 0301 	bic.w	r3, r3, #1
 8003ec8:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003eca:	6822      	ldr	r2, [r4, #0]
 8003ecc:	6813      	ldr	r3, [r2, #0]
 8003ece:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ed2:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003ed4:	6822      	ldr	r2, [r4, #0]
 8003ed6:	6813      	ldr	r3, [r2, #0]
 8003ed8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003edc:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003ede:	f002 f903 	bl	80060e8 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003ee2:	6862      	ldr	r2, [r4, #4]
 8003ee4:	4b4c      	ldr	r3, [pc, #304]	; (8004018 <HAL_I2C_Init+0x170>)
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d861      	bhi.n	8003fae <HAL_I2C_Init+0x106>
 8003eea:	4b4c      	ldr	r3, [pc, #304]	; (800401c <HAL_I2C_Init+0x174>)
 8003eec:	4298      	cmp	r0, r3
 8003eee:	f240 8091 	bls.w	8004014 <HAL_I2C_Init+0x16c>
  freqrange = I2C_FREQRANGE(pclk1);
 8003ef2:	494b      	ldr	r1, [pc, #300]	; (8004020 <HAL_I2C_Init+0x178>)
 8003ef4:	fba1 3100 	umull	r3, r1, r1, r0
 8003ef8:	0c8b      	lsrs	r3, r1, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003efa:	6825      	ldr	r5, [r4, #0]
 8003efc:	686a      	ldr	r2, [r5, #4]
 8003efe:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8003f02:	ea42 4291 	orr.w	r2, r2, r1, lsr #18
 8003f06:	606a      	str	r2, [r5, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003f08:	6821      	ldr	r1, [r4, #0]
 8003f0a:	6a0a      	ldr	r2, [r1, #32]
 8003f0c:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8003f10:	4d41      	ldr	r5, [pc, #260]	; (8004018 <HAL_I2C_Init+0x170>)
 8003f12:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8003f16:	45ac      	cmp	ip, r5
 8003f18:	d84e      	bhi.n	8003fb8 <HAL_I2C_Init+0x110>
 8003f1a:	3301      	adds	r3, #1
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003f20:	6821      	ldr	r1, [r4, #0]
 8003f22:	69ca      	ldr	r2, [r1, #28]
 8003f24:	f422 424f 	bic.w	r2, r2, #52992	; 0xcf00
 8003f28:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003f2c:	6865      	ldr	r5, [r4, #4]
 8003f2e:	4b3a      	ldr	r3, [pc, #232]	; (8004018 <HAL_I2C_Init+0x170>)
 8003f30:	429d      	cmp	r5, r3
 8003f32:	d84b      	bhi.n	8003fcc <HAL_I2C_Init+0x124>
 8003f34:	1e43      	subs	r3, r0, #1
 8003f36:	006d      	lsls	r5, r5, #1
 8003f38:	fbb3 f3f5 	udiv	r3, r3, r5
 8003f3c:	3301      	adds	r3, #1
 8003f3e:	f640 70fc 	movw	r0, #4092	; 0xffc
 8003f42:	4203      	tst	r3, r0
 8003f44:	d05e      	beq.n	8004004 <HAL_I2C_Init+0x15c>
 8003f46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f4a:	431a      	orrs	r2, r3
 8003f4c:	61ca      	str	r2, [r1, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003f4e:	6821      	ldr	r1, [r4, #0]
 8003f50:	680a      	ldr	r2, [r1, #0]
 8003f52:	69e3      	ldr	r3, [r4, #28]
 8003f54:	6a20      	ldr	r0, [r4, #32]
 8003f56:	4303      	orrs	r3, r0
 8003f58:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003f60:	6821      	ldr	r1, [r4, #0]
 8003f62:	688a      	ldr	r2, [r1, #8]
 8003f64:	6923      	ldr	r3, [r4, #16]
 8003f66:	68e0      	ldr	r0, [r4, #12]
 8003f68:	4303      	orrs	r3, r0
 8003f6a:	f422 4203 	bic.w	r2, r2, #33536	; 0x8300
 8003f6e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003f72:	4313      	orrs	r3, r2
 8003f74:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003f76:	6821      	ldr	r1, [r4, #0]
 8003f78:	68ca      	ldr	r2, [r1, #12]
 8003f7a:	6963      	ldr	r3, [r4, #20]
 8003f7c:	69a0      	ldr	r0, [r4, #24]
 8003f7e:	4303      	orrs	r3, r0
 8003f80:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003f84:	4313      	orrs	r3, r2
 8003f86:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 8003f88:	6822      	ldr	r2, [r4, #0]
 8003f8a:	6813      	ldr	r3, [r2, #0]
 8003f8c:	f043 0301 	orr.w	r3, r3, #1
 8003f90:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f92:	2000      	movs	r0, #0
 8003f94:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003f96:	2320      	movs	r3, #32
 8003f98:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f9c:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f9e:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 8003fa2:	bd38      	pop	{r3, r4, r5, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8003fa4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8003fa8:	f7fe f96e 	bl	8002288 <HAL_I2C_MspInit>
 8003fac:	e785      	b.n	8003eba <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003fae:	4b1d      	ldr	r3, [pc, #116]	; (8004024 <HAL_I2C_Init+0x17c>)
 8003fb0:	4298      	cmp	r0, r3
 8003fb2:	d89e      	bhi.n	8003ef2 <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8003fb4:	2001      	movs	r0, #1
 8003fb6:	e7f4      	b.n	8003fa2 <HAL_I2C_Init+0xfa>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003fb8:	f44f 7596 	mov.w	r5, #300	; 0x12c
 8003fbc:	fb05 f303 	mul.w	r3, r5, r3
 8003fc0:	4d19      	ldr	r5, [pc, #100]	; (8004028 <HAL_I2C_Init+0x180>)
 8003fc2:	fba5 5303 	umull	r5, r3, r5, r3
 8003fc6:	099b      	lsrs	r3, r3, #6
 8003fc8:	3301      	adds	r3, #1
 8003fca:	e7a7      	b.n	8003f1c <HAL_I2C_Init+0x74>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003fcc:	68a3      	ldr	r3, [r4, #8]
 8003fce:	b95b      	cbnz	r3, 8003fe8 <HAL_I2C_Init+0x140>
 8003fd0:	1e43      	subs	r3, r0, #1
 8003fd2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003fd6:	fbb3 f3f5 	udiv	r3, r3, r5
 8003fda:	3301      	adds	r3, #1
 8003fdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fe0:	b193      	cbz	r3, 8004008 <HAL_I2C_Init+0x160>
 8003fe2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fe6:	e7b0      	b.n	8003f4a <HAL_I2C_Init+0xa2>
 8003fe8:	1e43      	subs	r3, r0, #1
 8003fea:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8003fee:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8003ff2:	fbb3 f3f5 	udiv	r3, r3, r5
 8003ff6:	3301      	adds	r3, #1
 8003ff8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ffc:	b133      	cbz	r3, 800400c <HAL_I2C_Init+0x164>
 8003ffe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004002:	e7a2      	b.n	8003f4a <HAL_I2C_Init+0xa2>
 8004004:	2304      	movs	r3, #4
 8004006:	e7a0      	b.n	8003f4a <HAL_I2C_Init+0xa2>
 8004008:	2301      	movs	r3, #1
 800400a:	e79e      	b.n	8003f4a <HAL_I2C_Init+0xa2>
 800400c:	2301      	movs	r3, #1
 800400e:	e79c      	b.n	8003f4a <HAL_I2C_Init+0xa2>
    return HAL_ERROR;
 8004010:	2001      	movs	r0, #1
}
 8004012:	4770      	bx	lr
    return HAL_ERROR;
 8004014:	2001      	movs	r0, #1
 8004016:	e7c4      	b.n	8003fa2 <HAL_I2C_Init+0xfa>
 8004018:	000186a0 	.word	0x000186a0
 800401c:	001e847f 	.word	0x001e847f
 8004020:	431bde83 	.word	0x431bde83
 8004024:	003d08ff 	.word	0x003d08ff
 8004028:	10624dd3 	.word	0x10624dd3

0800402c <HAL_I2C_Master_Transmit>:
{
 800402c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004030:	b085      	sub	sp, #20
 8004032:	4604      	mov	r4, r0
 8004034:	460f      	mov	r7, r1
 8004036:	4691      	mov	r9, r2
 8004038:	4698      	mov	r8, r3
 800403a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 800403c:	f7ff fa96 	bl	800356c <HAL_GetTick>
 8004040:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004042:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 8004046:	b2c0      	uxtb	r0, r0
 8004048:	2820      	cmp	r0, #32
 800404a:	d004      	beq.n	8004056 <HAL_I2C_Master_Transmit+0x2a>
    return HAL_BUSY;
 800404c:	2702      	movs	r7, #2
}
 800404e:	4638      	mov	r0, r7
 8004050:	b005      	add	sp, #20
 8004052:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004056:	9500      	str	r5, [sp, #0]
 8004058:	2319      	movs	r3, #25
 800405a:	2201      	movs	r2, #1
 800405c:	4971      	ldr	r1, [pc, #452]	; (8004224 <HAL_I2C_Master_Transmit+0x1f8>)
 800405e:	4620      	mov	r0, r4
 8004060:	f7ff fcbf 	bl	80039e2 <I2C_WaitOnFlagUntilTimeout>
 8004064:	2800      	cmp	r0, #0
 8004066:	f040 80d7 	bne.w	8004218 <HAL_I2C_Master_Transmit+0x1ec>
    __HAL_LOCK(hi2c);
 800406a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800406e:	2b01      	cmp	r3, #1
 8004070:	f000 80d4 	beq.w	800421c <HAL_I2C_Master_Transmit+0x1f0>
 8004074:	2301      	movs	r3, #1
 8004076:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800407a:	6823      	ldr	r3, [r4, #0]
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	f012 0f01 	tst.w	r2, #1
 8004082:	d103      	bne.n	800408c <HAL_I2C_Master_Transmit+0x60>
      __HAL_I2C_ENABLE(hi2c);
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	f042 0201 	orr.w	r2, r2, #1
 800408a:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800408c:	6822      	ldr	r2, [r4, #0]
 800408e:	6813      	ldr	r3, [r2, #0]
 8004090:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004094:	6013      	str	r3, [r2, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004096:	2321      	movs	r3, #33	; 0x21
 8004098:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800409c:	2310      	movs	r3, #16
 800409e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80040a2:	2300      	movs	r3, #0
 80040a4:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 80040a6:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 80040aa:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80040ae:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80040b0:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040b2:	4b5d      	ldr	r3, [pc, #372]	; (8004228 <HAL_I2C_Master_Transmit+0x1fc>)
 80040b4:	62e3      	str	r3, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80040b6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80040b8:	2b08      	cmp	r3, #8
 80040ba:	d00d      	beq.n	80040d8 <HAL_I2C_Master_Transmit+0xac>
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d00b      	beq.n	80040d8 <HAL_I2C_Master_Transmit+0xac>
 80040c0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80040c4:	d008      	beq.n	80040d8 <HAL_I2C_Master_Transmit+0xac>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80040c6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80040c8:	2b12      	cmp	r3, #18
 80040ca:	d10a      	bne.n	80040e2 <HAL_I2C_Master_Transmit+0xb6>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040cc:	6822      	ldr	r2, [r4, #0]
 80040ce:	6813      	ldr	r3, [r2, #0]
 80040d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040d4:	6013      	str	r3, [r2, #0]
 80040d6:	e004      	b.n	80040e2 <HAL_I2C_Master_Transmit+0xb6>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040d8:	6822      	ldr	r2, [r4, #0]
 80040da:	6813      	ldr	r3, [r2, #0]
 80040dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040e0:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80040e2:	9500      	str	r5, [sp, #0]
 80040e4:	4633      	mov	r3, r6
 80040e6:	2200      	movs	r2, #0
 80040e8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80040ec:	4620      	mov	r0, r4
 80040ee:	f7ff fc78 	bl	80039e2 <I2C_WaitOnFlagUntilTimeout>
 80040f2:	b9d0      	cbnz	r0, 800412a <HAL_I2C_Master_Transmit+0xfe>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80040f4:	6923      	ldr	r3, [r4, #16]
 80040f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040fa:	d120      	bne.n	800413e <HAL_I2C_Master_Transmit+0x112>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80040fc:	6823      	ldr	r3, [r4, #0]
 80040fe:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
 8004102:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004104:	462b      	mov	r3, r5
 8004106:	4632      	mov	r2, r6
 8004108:	4948      	ldr	r1, [pc, #288]	; (800422c <HAL_I2C_Master_Transmit+0x200>)
 800410a:	4620      	mov	r0, r4
 800410c:	f7ff fcac 	bl	8003a68 <I2C_WaitOnMasterAddressFlagUntilTimeout>
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004110:	4607      	mov	r7, r0
 8004112:	2800      	cmp	r0, #0
 8004114:	f040 8084 	bne.w	8004220 <HAL_I2C_Master_Transmit+0x1f4>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004118:	2300      	movs	r3, #0
 800411a:	9303      	str	r3, [sp, #12]
 800411c:	6823      	ldr	r3, [r4, #0]
 800411e:	695a      	ldr	r2, [r3, #20]
 8004120:	9203      	str	r2, [sp, #12]
 8004122:	699b      	ldr	r3, [r3, #24]
 8004124:	9303      	str	r3, [sp, #12]
 8004126:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 8004128:	e02f      	b.n	800418a <HAL_I2C_Master_Transmit+0x15e>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800412a:	6823      	ldr	r3, [r4, #0]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004132:	d002      	beq.n	800413a <HAL_I2C_Master_Transmit+0x10e>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004134:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004138:	6423      	str	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 800413a:	2701      	movs	r7, #1
 800413c:	e787      	b.n	800404e <HAL_I2C_Master_Transmit+0x22>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800413e:	6822      	ldr	r2, [r4, #0]
 8004140:	11fb      	asrs	r3, r7, #7
 8004142:	f003 0306 	and.w	r3, r3, #6
 8004146:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 800414a:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800414c:	462b      	mov	r3, r5
 800414e:	4632      	mov	r2, r6
 8004150:	4937      	ldr	r1, [pc, #220]	; (8004230 <HAL_I2C_Master_Transmit+0x204>)
 8004152:	4620      	mov	r0, r4
 8004154:	f7ff fc88 	bl	8003a68 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004158:	2800      	cmp	r0, #0
 800415a:	d1ee      	bne.n	800413a <HAL_I2C_Master_Transmit+0x10e>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800415c:	6823      	ldr	r3, [r4, #0]
 800415e:	b2ff      	uxtb	r7, r7
 8004160:	611f      	str	r7, [r3, #16]
 8004162:	e7cf      	b.n	8004104 <HAL_I2C_Master_Transmit+0xd8>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004164:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004166:	2b04      	cmp	r3, #4
 8004168:	d001      	beq.n	800416e <HAL_I2C_Master_Transmit+0x142>
        return HAL_ERROR;
 800416a:	2701      	movs	r7, #1
 800416c:	e76f      	b.n	800404e <HAL_I2C_Master_Transmit+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800416e:	6822      	ldr	r2, [r4, #0]
 8004170:	6813      	ldr	r3, [r2, #0]
 8004172:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004176:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 8004178:	2701      	movs	r7, #1
 800417a:	e768      	b.n	800404e <HAL_I2C_Master_Transmit+0x22>
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800417c:	462a      	mov	r2, r5
 800417e:	4631      	mov	r1, r6
 8004180:	4620      	mov	r0, r4
 8004182:	f7ff fe1f 	bl	8003dc4 <I2C_WaitOnBTFFlagUntilTimeout>
 8004186:	2800      	cmp	r0, #0
 8004188:	d12c      	bne.n	80041e4 <HAL_I2C_Master_Transmit+0x1b8>
    while (hi2c->XferSize > 0U)
 800418a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800418c:	2b00      	cmp	r3, #0
 800418e:	d035      	beq.n	80041fc <HAL_I2C_Master_Transmit+0x1d0>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004190:	462a      	mov	r2, r5
 8004192:	4631      	mov	r1, r6
 8004194:	4620      	mov	r0, r4
 8004196:	f7ff fcc4 	bl	8003b22 <I2C_WaitOnTXEFlagUntilTimeout>
 800419a:	2800      	cmp	r0, #0
 800419c:	d1e2      	bne.n	8004164 <HAL_I2C_Master_Transmit+0x138>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800419e:	6823      	ldr	r3, [r4, #0]
 80041a0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80041a2:	7812      	ldrb	r2, [r2, #0]
 80041a4:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80041a6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80041a8:	1c53      	adds	r3, r2, #1
 80041aa:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80041ac:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 80041ae:	3901      	subs	r1, #1
 80041b0:	b289      	uxth	r1, r1
 80041b2:	8561      	strh	r1, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80041b4:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 80041b6:	3901      	subs	r1, #1
 80041b8:	b289      	uxth	r1, r1
 80041ba:	8521      	strh	r1, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80041bc:	6823      	ldr	r3, [r4, #0]
 80041be:	6958      	ldr	r0, [r3, #20]
 80041c0:	f010 0f04 	tst.w	r0, #4
 80041c4:	d0da      	beq.n	800417c <HAL_I2C_Master_Transmit+0x150>
 80041c6:	2900      	cmp	r1, #0
 80041c8:	d0d8      	beq.n	800417c <HAL_I2C_Master_Transmit+0x150>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041ca:	7852      	ldrb	r2, [r2, #1]
 80041cc:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80041ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80041d0:	3301      	adds	r3, #1
 80041d2:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 80041d4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80041d6:	3b01      	subs	r3, #1
 80041d8:	b29b      	uxth	r3, r3
 80041da:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 80041dc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80041de:	3b01      	subs	r3, #1
 80041e0:	8523      	strh	r3, [r4, #40]	; 0x28
 80041e2:	e7cb      	b.n	800417c <HAL_I2C_Master_Transmit+0x150>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041e4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80041e6:	2b04      	cmp	r3, #4
 80041e8:	d001      	beq.n	80041ee <HAL_I2C_Master_Transmit+0x1c2>
        return HAL_ERROR;
 80041ea:	2701      	movs	r7, #1
 80041ec:	e72f      	b.n	800404e <HAL_I2C_Master_Transmit+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041ee:	6822      	ldr	r2, [r4, #0]
 80041f0:	6813      	ldr	r3, [r2, #0]
 80041f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80041f6:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 80041f8:	2701      	movs	r7, #1
 80041fa:	e728      	b.n	800404e <HAL_I2C_Master_Transmit+0x22>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041fc:	6822      	ldr	r2, [r4, #0]
 80041fe:	6813      	ldr	r3, [r2, #0]
 8004200:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004204:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8004206:	2320      	movs	r3, #32
 8004208:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800420c:	2300      	movs	r3, #0
 800420e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8004212:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8004216:	e71a      	b.n	800404e <HAL_I2C_Master_Transmit+0x22>
      return HAL_BUSY;
 8004218:	2702      	movs	r7, #2
 800421a:	e718      	b.n	800404e <HAL_I2C_Master_Transmit+0x22>
    __HAL_LOCK(hi2c);
 800421c:	2702      	movs	r7, #2
 800421e:	e716      	b.n	800404e <HAL_I2C_Master_Transmit+0x22>
      return HAL_ERROR;
 8004220:	2701      	movs	r7, #1
 8004222:	e714      	b.n	800404e <HAL_I2C_Master_Transmit+0x22>
 8004224:	00100002 	.word	0x00100002
 8004228:	ffff0000 	.word	0xffff0000
 800422c:	00010002 	.word	0x00010002
 8004230:	00010008 	.word	0x00010008

08004234 <HAL_I2C_Master_Receive>:
{
 8004234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004238:	b088      	sub	sp, #32
 800423a:	4604      	mov	r4, r0
 800423c:	460f      	mov	r7, r1
 800423e:	4691      	mov	r9, r2
 8004240:	4698      	mov	r8, r3
 8004242:	9e10      	ldr	r6, [sp, #64]	; 0x40
  __IO uint32_t count = 0U;
 8004244:	2300      	movs	r3, #0
 8004246:	9307      	str	r3, [sp, #28]
  uint32_t tickstart = HAL_GetTick();
 8004248:	f7ff f990 	bl	800356c <HAL_GetTick>
 800424c:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800424e:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 8004252:	b2c0      	uxtb	r0, r0
 8004254:	2820      	cmp	r0, #32
 8004256:	d004      	beq.n	8004262 <HAL_I2C_Master_Receive+0x2e>
    return HAL_BUSY;
 8004258:	2702      	movs	r7, #2
}
 800425a:	4638      	mov	r0, r7
 800425c:	b008      	add	sp, #32
 800425e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004262:	9500      	str	r5, [sp, #0]
 8004264:	2319      	movs	r3, #25
 8004266:	2201      	movs	r2, #1
 8004268:	498a      	ldr	r1, [pc, #552]	; (8004494 <HAL_I2C_Master_Receive+0x260>)
 800426a:	4620      	mov	r0, r4
 800426c:	f7ff fbb9 	bl	80039e2 <I2C_WaitOnFlagUntilTimeout>
 8004270:	2800      	cmp	r0, #0
 8004272:	f040 81f2 	bne.w	800465a <HAL_I2C_Master_Receive+0x426>
    __HAL_LOCK(hi2c);
 8004276:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800427a:	2b01      	cmp	r3, #1
 800427c:	f000 81ef 	beq.w	800465e <HAL_I2C_Master_Receive+0x42a>
 8004280:	2301      	movs	r3, #1
 8004282:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004286:	6823      	ldr	r3, [r4, #0]
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	f012 0f01 	tst.w	r2, #1
 800428e:	d103      	bne.n	8004298 <HAL_I2C_Master_Receive+0x64>
      __HAL_I2C_ENABLE(hi2c);
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	f042 0201 	orr.w	r2, r2, #1
 8004296:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004298:	6822      	ldr	r2, [r4, #0]
 800429a:	6813      	ldr	r3, [r2, #0]
 800429c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80042a0:	6013      	str	r3, [r2, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80042a2:	2322      	movs	r3, #34	; 0x22
 80042a4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80042a8:	2310      	movs	r3, #16
 80042aa:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80042ae:	2300      	movs	r3, #0
 80042b0:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 80042b2:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 80042b6:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80042ba:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80042bc:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80042be:	4b76      	ldr	r3, [pc, #472]	; (8004498 <HAL_I2C_Master_Receive+0x264>)
 80042c0:	62e3      	str	r3, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80042c2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042c4:	6821      	ldr	r1, [r4, #0]
 80042c6:	680b      	ldr	r3, [r1, #0]
 80042c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80042cc:	600b      	str	r3, [r1, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80042ce:	2a08      	cmp	r2, #8
 80042d0:	d00d      	beq.n	80042ee <HAL_I2C_Master_Receive+0xba>
 80042d2:	2a01      	cmp	r2, #1
 80042d4:	d00b      	beq.n	80042ee <HAL_I2C_Master_Receive+0xba>
 80042d6:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 80042da:	d008      	beq.n	80042ee <HAL_I2C_Master_Receive+0xba>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80042dc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80042de:	2b11      	cmp	r3, #17
 80042e0:	d10a      	bne.n	80042f8 <HAL_I2C_Master_Receive+0xc4>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042e2:	6822      	ldr	r2, [r4, #0]
 80042e4:	6813      	ldr	r3, [r2, #0]
 80042e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042ea:	6013      	str	r3, [r2, #0]
 80042ec:	e004      	b.n	80042f8 <HAL_I2C_Master_Receive+0xc4>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042ee:	6822      	ldr	r2, [r4, #0]
 80042f0:	6813      	ldr	r3, [r2, #0]
 80042f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042f6:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80042f8:	9500      	str	r5, [sp, #0]
 80042fa:	4633      	mov	r3, r6
 80042fc:	2200      	movs	r2, #0
 80042fe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004302:	4620      	mov	r0, r4
 8004304:	f7ff fb6d 	bl	80039e2 <I2C_WaitOnFlagUntilTimeout>
 8004308:	bb58      	cbnz	r0, 8004362 <HAL_I2C_Master_Receive+0x12e>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800430a:	6923      	ldr	r3, [r4, #16]
 800430c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004310:	d130      	bne.n	8004374 <HAL_I2C_Master_Receive+0x140>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004312:	6823      	ldr	r3, [r4, #0]
 8004314:	f047 0701 	orr.w	r7, r7, #1
 8004318:	b2ff      	uxtb	r7, r7
 800431a:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800431c:	462b      	mov	r3, r5
 800431e:	4632      	mov	r2, r6
 8004320:	495e      	ldr	r1, [pc, #376]	; (800449c <HAL_I2C_Master_Receive+0x268>)
 8004322:	4620      	mov	r0, r4
 8004324:	f7ff fba0 	bl	8003a68 <I2C_WaitOnMasterAddressFlagUntilTimeout>
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004328:	4607      	mov	r7, r0
 800432a:	2800      	cmp	r0, #0
 800432c:	f040 8199 	bne.w	8004662 <HAL_I2C_Master_Receive+0x42e>
    if (hi2c->XferSize == 0U)
 8004330:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004332:	2b00      	cmp	r3, #0
 8004334:	d15c      	bne.n	80043f0 <HAL_I2C_Master_Receive+0x1bc>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004336:	9302      	str	r3, [sp, #8]
 8004338:	6823      	ldr	r3, [r4, #0]
 800433a:	695a      	ldr	r2, [r3, #20]
 800433c:	9202      	str	r2, [sp, #8]
 800433e:	699a      	ldr	r2, [r3, #24]
 8004340:	9202      	str	r2, [sp, #8]
 8004342:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800434a:	601a      	str	r2, [r3, #0]
    while (hi2c->XferSize > 0U)
 800434c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800434e:	2b00      	cmp	r3, #0
 8004350:	f000 817a 	beq.w	8004648 <HAL_I2C_Master_Receive+0x414>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004354:	f8df 8148 	ldr.w	r8, [pc, #328]	; 80044a0 <HAL_I2C_Master_Receive+0x26c>
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004358:	f8df a148 	ldr.w	sl, [pc, #328]	; 80044a4 <HAL_I2C_Master_Receive+0x270>
 800435c:	f8df 9148 	ldr.w	r9, [pc, #328]	; 80044a8 <HAL_I2C_Master_Receive+0x274>
 8004360:	e138      	b.n	80045d4 <HAL_I2C_Master_Receive+0x3a0>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004362:	6823      	ldr	r3, [r4, #0]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f413 7f80 	tst.w	r3, #256	; 0x100
 800436a:	d012      	beq.n	8004392 <HAL_I2C_Master_Receive+0x15e>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800436c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004370:	6423      	str	r3, [r4, #64]	; 0x40
 8004372:	e00e      	b.n	8004392 <HAL_I2C_Master_Receive+0x15e>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004374:	ea4f 18e7 	mov.w	r8, r7, asr #7
 8004378:	f008 0806 	and.w	r8, r8, #6
 800437c:	6823      	ldr	r3, [r4, #0]
 800437e:	f048 02f0 	orr.w	r2, r8, #240	; 0xf0
 8004382:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004384:	462b      	mov	r3, r5
 8004386:	4632      	mov	r2, r6
 8004388:	4948      	ldr	r1, [pc, #288]	; (80044ac <HAL_I2C_Master_Receive+0x278>)
 800438a:	4620      	mov	r0, r4
 800438c:	f7ff fb6c 	bl	8003a68 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004390:	b108      	cbz	r0, 8004396 <HAL_I2C_Master_Receive+0x162>
      return HAL_ERROR;
 8004392:	2701      	movs	r7, #1
 8004394:	e761      	b.n	800425a <HAL_I2C_Master_Receive+0x26>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004396:	6823      	ldr	r3, [r4, #0]
 8004398:	b2ff      	uxtb	r7, r7
 800439a:	611f      	str	r7, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800439c:	462b      	mov	r3, r5
 800439e:	4632      	mov	r2, r6
 80043a0:	493e      	ldr	r1, [pc, #248]	; (800449c <HAL_I2C_Master_Receive+0x268>)
 80043a2:	4620      	mov	r0, r4
 80043a4:	f7ff fb60 	bl	8003a68 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80043a8:	2800      	cmp	r0, #0
 80043aa:	d1f2      	bne.n	8004392 <HAL_I2C_Master_Receive+0x15e>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043ac:	2200      	movs	r2, #0
 80043ae:	9206      	str	r2, [sp, #24]
 80043b0:	6823      	ldr	r3, [r4, #0]
 80043b2:	6959      	ldr	r1, [r3, #20]
 80043b4:	9106      	str	r1, [sp, #24]
 80043b6:	6999      	ldr	r1, [r3, #24]
 80043b8:	9106      	str	r1, [sp, #24]
 80043ba:	9906      	ldr	r1, [sp, #24]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043bc:	6819      	ldr	r1, [r3, #0]
 80043be:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80043c2:	6019      	str	r1, [r3, #0]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80043c4:	9500      	str	r5, [sp, #0]
 80043c6:	4633      	mov	r3, r6
 80043c8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80043cc:	4620      	mov	r0, r4
 80043ce:	f7ff fb08 	bl	80039e2 <I2C_WaitOnFlagUntilTimeout>
 80043d2:	b920      	cbnz	r0, 80043de <HAL_I2C_Master_Receive+0x1aa>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80043d4:	6822      	ldr	r2, [r4, #0]
 80043d6:	f048 03f1 	orr.w	r3, r8, #241	; 0xf1
 80043da:	6113      	str	r3, [r2, #16]
 80043dc:	e79e      	b.n	800431c <HAL_I2C_Master_Receive+0xe8>
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80043de:	6823      	ldr	r3, [r4, #0]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f413 7f80 	tst.w	r3, #256	; 0x100
 80043e6:	d0d4      	beq.n	8004392 <HAL_I2C_Master_Receive+0x15e>
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80043e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80043ec:	6423      	str	r3, [r4, #64]	; 0x40
 80043ee:	e7d0      	b.n	8004392 <HAL_I2C_Master_Receive+0x15e>
    else if (hi2c->XferSize == 1U)
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d00f      	beq.n	8004414 <HAL_I2C_Master_Receive+0x1e0>
    else if (hi2c->XferSize == 2U)
 80043f4:	2b02      	cmp	r3, #2
 80043f6:	d021      	beq.n	800443c <HAL_I2C_Master_Receive+0x208>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043f8:	6822      	ldr	r2, [r4, #0]
 80043fa:	6813      	ldr	r3, [r2, #0]
 80043fc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004400:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004402:	2300      	movs	r3, #0
 8004404:	9305      	str	r3, [sp, #20]
 8004406:	6823      	ldr	r3, [r4, #0]
 8004408:	695a      	ldr	r2, [r3, #20]
 800440a:	9205      	str	r2, [sp, #20]
 800440c:	699b      	ldr	r3, [r3, #24]
 800440e:	9305      	str	r3, [sp, #20]
 8004410:	9b05      	ldr	r3, [sp, #20]
 8004412:	e79b      	b.n	800434c <HAL_I2C_Master_Receive+0x118>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004414:	6822      	ldr	r2, [r4, #0]
 8004416:	6813      	ldr	r3, [r2, #0]
 8004418:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800441c:	6013      	str	r3, [r2, #0]
 800441e:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004420:	2300      	movs	r3, #0
 8004422:	9303      	str	r3, [sp, #12]
 8004424:	6823      	ldr	r3, [r4, #0]
 8004426:	695a      	ldr	r2, [r3, #20]
 8004428:	9203      	str	r2, [sp, #12]
 800442a:	699a      	ldr	r2, [r3, #24]
 800442c:	9203      	str	r2, [sp, #12]
 800442e:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004436:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004438:	b662      	cpsie	i
}
 800443a:	e787      	b.n	800434c <HAL_I2C_Master_Receive+0x118>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800443c:	6822      	ldr	r2, [r4, #0]
 800443e:	6813      	ldr	r3, [r2, #0]
 8004440:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004444:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004446:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004448:	2300      	movs	r3, #0
 800444a:	9304      	str	r3, [sp, #16]
 800444c:	6823      	ldr	r3, [r4, #0]
 800444e:	695a      	ldr	r2, [r3, #20]
 8004450:	9204      	str	r2, [sp, #16]
 8004452:	699a      	ldr	r2, [r3, #24]
 8004454:	9204      	str	r2, [sp, #16]
 8004456:	9a04      	ldr	r2, [sp, #16]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800445e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004460:	b662      	cpsie	i
}
 8004462:	e773      	b.n	800434c <HAL_I2C_Master_Receive+0x118>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004464:	462a      	mov	r2, r5
 8004466:	4631      	mov	r1, r6
 8004468:	4620      	mov	r0, r4
 800446a:	f7ff fcda 	bl	8003e22 <I2C_WaitOnRXNEFlagUntilTimeout>
 800446e:	2800      	cmp	r0, #0
 8004470:	f040 80f9 	bne.w	8004666 <HAL_I2C_Master_Receive+0x432>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004474:	6823      	ldr	r3, [r4, #0]
 8004476:	691a      	ldr	r2, [r3, #16]
 8004478:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800447a:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 800447c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800447e:	3301      	adds	r3, #1
 8004480:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8004482:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004484:	3b01      	subs	r3, #1
 8004486:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8004488:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800448a:	3b01      	subs	r3, #1
 800448c:	b29b      	uxth	r3, r3
 800448e:	8563      	strh	r3, [r4, #42]	; 0x2a
 8004490:	e09d      	b.n	80045ce <HAL_I2C_Master_Receive+0x39a>
 8004492:	bf00      	nop
 8004494:	00100002 	.word	0x00100002
 8004498:	ffff0000 	.word	0xffff0000
 800449c:	00010002 	.word	0x00010002
 80044a0:	00010004 	.word	0x00010004
 80044a4:	20000000 	.word	0x20000000
 80044a8:	14f8b589 	.word	0x14f8b589
 80044ac:	00010008 	.word	0x00010008
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80044b0:	9500      	str	r5, [sp, #0]
 80044b2:	4633      	mov	r3, r6
 80044b4:	2200      	movs	r2, #0
 80044b6:	4641      	mov	r1, r8
 80044b8:	4620      	mov	r0, r4
 80044ba:	f7ff fa92 	bl	80039e2 <I2C_WaitOnFlagUntilTimeout>
 80044be:	2800      	cmp	r0, #0
 80044c0:	f040 80d5 	bne.w	800466e <HAL_I2C_Master_Receive+0x43a>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044c4:	6822      	ldr	r2, [r4, #0]
 80044c6:	6813      	ldr	r3, [r2, #0]
 80044c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80044cc:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80044ce:	b672      	cpsid	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044d0:	6823      	ldr	r3, [r4, #0]
 80044d2:	691a      	ldr	r2, [r3, #16]
 80044d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80044d6:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80044d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80044da:	3301      	adds	r3, #1
 80044dc:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80044de:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80044e0:	3b01      	subs	r3, #1
 80044e2:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80044e4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80044e6:	3b01      	subs	r3, #1
 80044e8:	b29b      	uxth	r3, r3
 80044ea:	8563      	strh	r3, [r4, #42]	; 0x2a
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80044ec:	f8da 3000 	ldr.w	r3, [sl]
 80044f0:	08db      	lsrs	r3, r3, #3
 80044f2:	fba9 2303 	umull	r2, r3, r9, r3
 80044f6:	0a1b      	lsrs	r3, r3, #8
 80044f8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80044fc:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8004500:	9307      	str	r3, [sp, #28]
            count--;
 8004502:	9907      	ldr	r1, [sp, #28]
 8004504:	3901      	subs	r1, #1
 8004506:	9107      	str	r1, [sp, #28]
            if (count == 0U)
 8004508:	9b07      	ldr	r3, [sp, #28]
 800450a:	b333      	cbz	r3, 800455a <HAL_I2C_Master_Receive+0x326>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800450c:	6823      	ldr	r3, [r4, #0]
 800450e:	695a      	ldr	r2, [r3, #20]
 8004510:	f012 0f04 	tst.w	r2, #4
 8004514:	d0f5      	beq.n	8004502 <HAL_I2C_Master_Receive+0x2ce>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800451c:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800451e:	6823      	ldr	r3, [r4, #0]
 8004520:	691a      	ldr	r2, [r3, #16]
 8004522:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004524:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8004526:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004528:	3301      	adds	r3, #1
 800452a:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800452c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800452e:	3b01      	subs	r3, #1
 8004530:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8004532:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004534:	3b01      	subs	r3, #1
 8004536:	b29b      	uxth	r3, r3
 8004538:	8563      	strh	r3, [r4, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800453a:	b662      	cpsie	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800453c:	6823      	ldr	r3, [r4, #0]
 800453e:	691a      	ldr	r2, [r3, #16]
 8004540:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004542:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8004544:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004546:	3301      	adds	r3, #1
 8004548:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800454a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800454c:	3b01      	subs	r3, #1
 800454e:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8004550:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004552:	3b01      	subs	r3, #1
 8004554:	b29b      	uxth	r3, r3
 8004556:	8563      	strh	r3, [r4, #42]	; 0x2a
 8004558:	e039      	b.n	80045ce <HAL_I2C_Master_Receive+0x39a>
              hi2c->PreviousState       = I2C_STATE_NONE;
 800455a:	6323      	str	r3, [r4, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800455c:	2220      	movs	r2, #32
 800455e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004562:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004566:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004568:	f042 0220 	orr.w	r2, r2, #32
 800456c:	6422      	str	r2, [r4, #64]	; 0x40
 800456e:	b662      	cpsie	i
              __HAL_UNLOCK(hi2c);
 8004570:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
              return HAL_ERROR;
 8004574:	2701      	movs	r7, #1
 8004576:	e670      	b.n	800425a <HAL_I2C_Master_Receive+0x26>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004578:	462a      	mov	r2, r5
 800457a:	4631      	mov	r1, r6
 800457c:	4620      	mov	r0, r4
 800457e:	f7ff fc50 	bl	8003e22 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004582:	2800      	cmp	r0, #0
 8004584:	d175      	bne.n	8004672 <HAL_I2C_Master_Receive+0x43e>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004586:	6823      	ldr	r3, [r4, #0]
 8004588:	691a      	ldr	r2, [r3, #16]
 800458a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800458c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800458e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004590:	3301      	adds	r3, #1
 8004592:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8004594:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004596:	3b01      	subs	r3, #1
 8004598:	b29b      	uxth	r3, r3
 800459a:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 800459c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800459e:	3a01      	subs	r2, #1
 80045a0:	b292      	uxth	r2, r2
 80045a2:	8562      	strh	r2, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80045a4:	6822      	ldr	r2, [r4, #0]
 80045a6:	6951      	ldr	r1, [r2, #20]
 80045a8:	f011 0f04 	tst.w	r1, #4
 80045ac:	d00f      	beq.n	80045ce <HAL_I2C_Master_Receive+0x39a>
          if (hi2c->XferSize == 3U)
 80045ae:	2b03      	cmp	r3, #3
 80045b0:	d045      	beq.n	800463e <HAL_I2C_Master_Receive+0x40a>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045b2:	6823      	ldr	r3, [r4, #0]
 80045b4:	691a      	ldr	r2, [r3, #16]
 80045b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80045b8:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80045ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80045bc:	3301      	adds	r3, #1
 80045be:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80045c0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80045c2:	3b01      	subs	r3, #1
 80045c4:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80045c6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80045c8:	3b01      	subs	r3, #1
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80045ce:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d039      	beq.n	8004648 <HAL_I2C_Master_Receive+0x414>
      if (hi2c->XferSize <= 3U)
 80045d4:	2b03      	cmp	r3, #3
 80045d6:	d8cf      	bhi.n	8004578 <HAL_I2C_Master_Receive+0x344>
        if (hi2c->XferSize == 1U)
 80045d8:	2b01      	cmp	r3, #1
 80045da:	f43f af43 	beq.w	8004464 <HAL_I2C_Master_Receive+0x230>
        else if (hi2c->XferSize == 2U)
 80045de:	2b02      	cmp	r3, #2
 80045e0:	f47f af66 	bne.w	80044b0 <HAL_I2C_Master_Receive+0x27c>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80045e4:	9500      	str	r5, [sp, #0]
 80045e6:	4633      	mov	r3, r6
 80045e8:	2200      	movs	r2, #0
 80045ea:	4641      	mov	r1, r8
 80045ec:	4620      	mov	r0, r4
 80045ee:	f7ff f9f8 	bl	80039e2 <I2C_WaitOnFlagUntilTimeout>
 80045f2:	2800      	cmp	r0, #0
 80045f4:	d139      	bne.n	800466a <HAL_I2C_Master_Receive+0x436>
  __ASM volatile ("cpsid i" : : : "memory");
 80045f6:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045f8:	6822      	ldr	r2, [r4, #0]
 80045fa:	6813      	ldr	r3, [r2, #0]
 80045fc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004600:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004602:	6823      	ldr	r3, [r4, #0]
 8004604:	691a      	ldr	r2, [r3, #16]
 8004606:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004608:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 800460a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800460c:	3301      	adds	r3, #1
 800460e:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8004610:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004612:	3b01      	subs	r3, #1
 8004614:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8004616:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004618:	3b01      	subs	r3, #1
 800461a:	b29b      	uxth	r3, r3
 800461c:	8563      	strh	r3, [r4, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800461e:	b662      	cpsie	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004620:	6823      	ldr	r3, [r4, #0]
 8004622:	691a      	ldr	r2, [r3, #16]
 8004624:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004626:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8004628:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800462a:	3301      	adds	r3, #1
 800462c:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800462e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004630:	3b01      	subs	r3, #1
 8004632:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8004634:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004636:	3b01      	subs	r3, #1
 8004638:	b29b      	uxth	r3, r3
 800463a:	8563      	strh	r3, [r4, #42]	; 0x2a
 800463c:	e7c7      	b.n	80045ce <HAL_I2C_Master_Receive+0x39a>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800463e:	6813      	ldr	r3, [r2, #0]
 8004640:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004644:	6013      	str	r3, [r2, #0]
 8004646:	e7b4      	b.n	80045b2 <HAL_I2C_Master_Receive+0x37e>
    hi2c->State = HAL_I2C_STATE_READY;
 8004648:	2320      	movs	r3, #32
 800464a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800464e:	2300      	movs	r3, #0
 8004650:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8004654:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8004658:	e5ff      	b.n	800425a <HAL_I2C_Master_Receive+0x26>
      return HAL_BUSY;
 800465a:	2702      	movs	r7, #2
 800465c:	e5fd      	b.n	800425a <HAL_I2C_Master_Receive+0x26>
    __HAL_LOCK(hi2c);
 800465e:	2702      	movs	r7, #2
 8004660:	e5fb      	b.n	800425a <HAL_I2C_Master_Receive+0x26>
      return HAL_ERROR;
 8004662:	2701      	movs	r7, #1
 8004664:	e5f9      	b.n	800425a <HAL_I2C_Master_Receive+0x26>
            return HAL_ERROR;
 8004666:	2701      	movs	r7, #1
 8004668:	e5f7      	b.n	800425a <HAL_I2C_Master_Receive+0x26>
            return HAL_ERROR;
 800466a:	2701      	movs	r7, #1
 800466c:	e5f5      	b.n	800425a <HAL_I2C_Master_Receive+0x26>
            return HAL_ERROR;
 800466e:	2701      	movs	r7, #1
 8004670:	e5f3      	b.n	800425a <HAL_I2C_Master_Receive+0x26>
          return HAL_ERROR;
 8004672:	2701      	movs	r7, #1
 8004674:	e5f1      	b.n	800425a <HAL_I2C_Master_Receive+0x26>
 8004676:	bf00      	nop

08004678 <HAL_I2C_Mem_Write>:
{
 8004678:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800467c:	b083      	sub	sp, #12
 800467e:	4604      	mov	r4, r0
 8004680:	460f      	mov	r7, r1
 8004682:	4690      	mov	r8, r2
 8004684:	4699      	mov	r9, r3
 8004686:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 8004688:	f7fe ff70 	bl	800356c <HAL_GetTick>
 800468c:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800468e:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 8004692:	b2c0      	uxtb	r0, r0
 8004694:	2820      	cmp	r0, #32
 8004696:	d003      	beq.n	80046a0 <HAL_I2C_Mem_Write+0x28>
    return HAL_BUSY;
 8004698:	2002      	movs	r0, #2
}
 800469a:	b003      	add	sp, #12
 800469c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80046a0:	9500      	str	r5, [sp, #0]
 80046a2:	2319      	movs	r3, #25
 80046a4:	2201      	movs	r2, #1
 80046a6:	494d      	ldr	r1, [pc, #308]	; (80047dc <HAL_I2C_Mem_Write+0x164>)
 80046a8:	4620      	mov	r0, r4
 80046aa:	f7ff f99a 	bl	80039e2 <I2C_WaitOnFlagUntilTimeout>
 80046ae:	2800      	cmp	r0, #0
 80046b0:	f040 808d 	bne.w	80047ce <HAL_I2C_Mem_Write+0x156>
    __HAL_LOCK(hi2c);
 80046b4:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	f000 808a 	beq.w	80047d2 <HAL_I2C_Mem_Write+0x15a>
 80046be:	2301      	movs	r3, #1
 80046c0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80046c4:	6823      	ldr	r3, [r4, #0]
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	f012 0f01 	tst.w	r2, #1
 80046cc:	d103      	bne.n	80046d6 <HAL_I2C_Mem_Write+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	f042 0201 	orr.w	r2, r2, #1
 80046d4:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80046d6:	6822      	ldr	r2, [r4, #0]
 80046d8:	6813      	ldr	r3, [r2, #0]
 80046da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80046de:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80046e0:	2321      	movs	r3, #33	; 0x21
 80046e2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80046e6:	2340      	movs	r3, #64	; 0x40
 80046e8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046ec:	2300      	movs	r3, #0
 80046ee:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 80046f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80046f2:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 80046f4:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 80046f8:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80046fa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80046fc:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80046fe:	4b38      	ldr	r3, [pc, #224]	; (80047e0 <HAL_I2C_Mem_Write+0x168>)
 8004700:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004702:	9501      	str	r5, [sp, #4]
 8004704:	9600      	str	r6, [sp, #0]
 8004706:	464b      	mov	r3, r9
 8004708:	4642      	mov	r2, r8
 800470a:	4639      	mov	r1, r7
 800470c:	4620      	mov	r0, r4
 800470e:	f7ff fa37 	bl	8003b80 <I2C_RequestMemoryWrite>
 8004712:	2800      	cmp	r0, #0
 8004714:	d15f      	bne.n	80047d6 <HAL_I2C_Mem_Write+0x15e>
    while (hi2c->XferSize > 0U)
 8004716:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004718:	b9d3      	cbnz	r3, 8004750 <HAL_I2C_Mem_Write+0xd8>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800471a:	462a      	mov	r2, r5
 800471c:	4631      	mov	r1, r6
 800471e:	4620      	mov	r0, r4
 8004720:	f7ff fb50 	bl	8003dc4 <I2C_WaitOnBTFFlagUntilTimeout>
 8004724:	2800      	cmp	r0, #0
 8004726:	d044      	beq.n	80047b2 <HAL_I2C_Mem_Write+0x13a>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004728:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800472a:	2b04      	cmp	r3, #4
 800472c:	d03a      	beq.n	80047a4 <HAL_I2C_Mem_Write+0x12c>
      return HAL_ERROR;
 800472e:	2001      	movs	r0, #1
 8004730:	e7b3      	b.n	800469a <HAL_I2C_Mem_Write+0x22>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004732:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004734:	2b04      	cmp	r3, #4
 8004736:	d001      	beq.n	800473c <HAL_I2C_Mem_Write+0xc4>
        return HAL_ERROR;
 8004738:	2001      	movs	r0, #1
 800473a:	e7ae      	b.n	800469a <HAL_I2C_Mem_Write+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800473c:	6822      	ldr	r2, [r4, #0]
 800473e:	6813      	ldr	r3, [r2, #0]
 8004740:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004744:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 8004746:	2001      	movs	r0, #1
 8004748:	e7a7      	b.n	800469a <HAL_I2C_Mem_Write+0x22>
    while (hi2c->XferSize > 0U)
 800474a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800474c:	2b00      	cmp	r3, #0
 800474e:	d0e4      	beq.n	800471a <HAL_I2C_Mem_Write+0xa2>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004750:	462a      	mov	r2, r5
 8004752:	4631      	mov	r1, r6
 8004754:	4620      	mov	r0, r4
 8004756:	f7ff f9e4 	bl	8003b22 <I2C_WaitOnTXEFlagUntilTimeout>
 800475a:	2800      	cmp	r0, #0
 800475c:	d1e9      	bne.n	8004732 <HAL_I2C_Mem_Write+0xba>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800475e:	6823      	ldr	r3, [r4, #0]
 8004760:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004762:	7812      	ldrb	r2, [r2, #0]
 8004764:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004766:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004768:	1c43      	adds	r3, r0, #1
 800476a:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800476c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800476e:	3b01      	subs	r3, #1
 8004770:	b29b      	uxth	r3, r3
 8004772:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8004774:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8004776:	3901      	subs	r1, #1
 8004778:	b289      	uxth	r1, r1
 800477a:	8561      	strh	r1, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800477c:	6822      	ldr	r2, [r4, #0]
 800477e:	6951      	ldr	r1, [r2, #20]
 8004780:	f011 0f04 	tst.w	r1, #4
 8004784:	d0e1      	beq.n	800474a <HAL_I2C_Mem_Write+0xd2>
 8004786:	2b00      	cmp	r3, #0
 8004788:	d0c7      	beq.n	800471a <HAL_I2C_Mem_Write+0xa2>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800478a:	7843      	ldrb	r3, [r0, #1]
 800478c:	6113      	str	r3, [r2, #16]
        hi2c->pBuffPtr++;
 800478e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004790:	3301      	adds	r3, #1
 8004792:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8004794:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004796:	3b01      	subs	r3, #1
 8004798:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 800479a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800479c:	3b01      	subs	r3, #1
 800479e:	b29b      	uxth	r3, r3
 80047a0:	8563      	strh	r3, [r4, #42]	; 0x2a
 80047a2:	e7d2      	b.n	800474a <HAL_I2C_Mem_Write+0xd2>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047a4:	6822      	ldr	r2, [r4, #0]
 80047a6:	6813      	ldr	r3, [r2, #0]
 80047a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80047ac:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 80047ae:	2001      	movs	r0, #1
 80047b0:	e773      	b.n	800469a <HAL_I2C_Mem_Write+0x22>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047b2:	6822      	ldr	r2, [r4, #0]
 80047b4:	6813      	ldr	r3, [r2, #0]
 80047b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80047ba:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80047bc:	2320      	movs	r3, #32
 80047be:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80047c2:	2300      	movs	r3, #0
 80047c4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 80047c8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 80047cc:	e765      	b.n	800469a <HAL_I2C_Mem_Write+0x22>
      return HAL_BUSY;
 80047ce:	2002      	movs	r0, #2
 80047d0:	e763      	b.n	800469a <HAL_I2C_Mem_Write+0x22>
    __HAL_LOCK(hi2c);
 80047d2:	2002      	movs	r0, #2
 80047d4:	e761      	b.n	800469a <HAL_I2C_Mem_Write+0x22>
      return HAL_ERROR;
 80047d6:	2001      	movs	r0, #1
 80047d8:	e75f      	b.n	800469a <HAL_I2C_Mem_Write+0x22>
 80047da:	bf00      	nop
 80047dc:	00100002 	.word	0x00100002
 80047e0:	ffff0000 	.word	0xffff0000

080047e4 <HAL_I2C_Mem_Read>:
{
 80047e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047e8:	b088      	sub	sp, #32
 80047ea:	4604      	mov	r4, r0
 80047ec:	460f      	mov	r7, r1
 80047ee:	4690      	mov	r8, r2
 80047f0:	4699      	mov	r9, r3
 80047f2:	9e12      	ldr	r6, [sp, #72]	; 0x48
  __IO uint32_t count = 0U;
 80047f4:	2300      	movs	r3, #0
 80047f6:	9307      	str	r3, [sp, #28]
  uint32_t tickstart = HAL_GetTick();
 80047f8:	f7fe feb8 	bl	800356c <HAL_GetTick>
 80047fc:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80047fe:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 8004802:	b2c0      	uxtb	r0, r0
 8004804:	2820      	cmp	r0, #32
 8004806:	d004      	beq.n	8004812 <HAL_I2C_Mem_Read+0x2e>
    return HAL_BUSY;
 8004808:	2702      	movs	r7, #2
}
 800480a:	4638      	mov	r0, r7
 800480c:	b008      	add	sp, #32
 800480e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004812:	9500      	str	r5, [sp, #0]
 8004814:	2319      	movs	r3, #25
 8004816:	2201      	movs	r2, #1
 8004818:	4983      	ldr	r1, [pc, #524]	; (8004a28 <HAL_I2C_Mem_Read+0x244>)
 800481a:	4620      	mov	r0, r4
 800481c:	f7ff f8e1 	bl	80039e2 <I2C_WaitOnFlagUntilTimeout>
 8004820:	2800      	cmp	r0, #0
 8004822:	f040 8172 	bne.w	8004b0a <HAL_I2C_Mem_Read+0x326>
    __HAL_LOCK(hi2c);
 8004826:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800482a:	2b01      	cmp	r3, #1
 800482c:	f000 816f 	beq.w	8004b0e <HAL_I2C_Mem_Read+0x32a>
 8004830:	2301      	movs	r3, #1
 8004832:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004836:	6823      	ldr	r3, [r4, #0]
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	f012 0f01 	tst.w	r2, #1
 800483e:	d103      	bne.n	8004848 <HAL_I2C_Mem_Read+0x64>
      __HAL_I2C_ENABLE(hi2c);
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	f042 0201 	orr.w	r2, r2, #1
 8004846:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004848:	6822      	ldr	r2, [r4, #0]
 800484a:	6813      	ldr	r3, [r2, #0]
 800484c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004850:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004852:	2322      	movs	r3, #34	; 0x22
 8004854:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004858:	2340      	movs	r3, #64	; 0x40
 800485a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800485e:	2300      	movs	r3, #0
 8004860:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8004862:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004864:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004866:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800486a:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800486c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800486e:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004870:	4b6e      	ldr	r3, [pc, #440]	; (8004a2c <HAL_I2C_Mem_Read+0x248>)
 8004872:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004874:	9501      	str	r5, [sp, #4]
 8004876:	9600      	str	r6, [sp, #0]
 8004878:	464b      	mov	r3, r9
 800487a:	4642      	mov	r2, r8
 800487c:	4639      	mov	r1, r7
 800487e:	4620      	mov	r0, r4
 8004880:	f7ff f9ee 	bl	8003c60 <I2C_RequestMemoryRead>
 8004884:	4607      	mov	r7, r0
 8004886:	2800      	cmp	r0, #0
 8004888:	f040 8143 	bne.w	8004b12 <HAL_I2C_Mem_Read+0x32e>
    if (hi2c->XferSize == 0U)
 800488c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800488e:	b9ab      	cbnz	r3, 80048bc <HAL_I2C_Mem_Read+0xd8>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004890:	9303      	str	r3, [sp, #12]
 8004892:	6823      	ldr	r3, [r4, #0]
 8004894:	695a      	ldr	r2, [r3, #20]
 8004896:	9203      	str	r2, [sp, #12]
 8004898:	699a      	ldr	r2, [r3, #24]
 800489a:	9203      	str	r2, [sp, #12]
 800489c:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048a4:	601a      	str	r2, [r3, #0]
    while (hi2c->XferSize > 0U)
 80048a6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	f000 8125 	beq.w	8004af8 <HAL_I2C_Mem_Read+0x314>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80048ae:	f8df 8180 	ldr.w	r8, [pc, #384]	; 8004a30 <HAL_I2C_Mem_Read+0x24c>
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80048b2:	f8df a180 	ldr.w	sl, [pc, #384]	; 8004a34 <HAL_I2C_Mem_Read+0x250>
 80048b6:	f8df 9180 	ldr.w	r9, [pc, #384]	; 8004a38 <HAL_I2C_Mem_Read+0x254>
 80048ba:	e0e8      	b.n	8004a8e <HAL_I2C_Mem_Read+0x2aa>
    else if (hi2c->XferSize == 1U)
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d00f      	beq.n	80048e0 <HAL_I2C_Mem_Read+0xfc>
    else if (hi2c->XferSize == 2U)
 80048c0:	2b02      	cmp	r3, #2
 80048c2:	d021      	beq.n	8004908 <HAL_I2C_Mem_Read+0x124>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048c4:	6822      	ldr	r2, [r4, #0]
 80048c6:	6813      	ldr	r3, [r2, #0]
 80048c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80048cc:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048ce:	2300      	movs	r3, #0
 80048d0:	9306      	str	r3, [sp, #24]
 80048d2:	6823      	ldr	r3, [r4, #0]
 80048d4:	695a      	ldr	r2, [r3, #20]
 80048d6:	9206      	str	r2, [sp, #24]
 80048d8:	699b      	ldr	r3, [r3, #24]
 80048da:	9306      	str	r3, [sp, #24]
 80048dc:	9b06      	ldr	r3, [sp, #24]
 80048de:	e7e2      	b.n	80048a6 <HAL_I2C_Mem_Read+0xc2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048e0:	6822      	ldr	r2, [r4, #0]
 80048e2:	6813      	ldr	r3, [r2, #0]
 80048e4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80048e8:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80048ea:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048ec:	2300      	movs	r3, #0
 80048ee:	9304      	str	r3, [sp, #16]
 80048f0:	6823      	ldr	r3, [r4, #0]
 80048f2:	695a      	ldr	r2, [r3, #20]
 80048f4:	9204      	str	r2, [sp, #16]
 80048f6:	699a      	ldr	r2, [r3, #24]
 80048f8:	9204      	str	r2, [sp, #16]
 80048fa:	9a04      	ldr	r2, [sp, #16]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004902:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004904:	b662      	cpsie	i
}
 8004906:	e7ce      	b.n	80048a6 <HAL_I2C_Mem_Read+0xc2>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004908:	6822      	ldr	r2, [r4, #0]
 800490a:	6813      	ldr	r3, [r2, #0]
 800490c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004910:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004912:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004914:	2300      	movs	r3, #0
 8004916:	9305      	str	r3, [sp, #20]
 8004918:	6823      	ldr	r3, [r4, #0]
 800491a:	695a      	ldr	r2, [r3, #20]
 800491c:	9205      	str	r2, [sp, #20]
 800491e:	699a      	ldr	r2, [r3, #24]
 8004920:	9205      	str	r2, [sp, #20]
 8004922:	9a05      	ldr	r2, [sp, #20]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800492a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800492c:	b662      	cpsie	i
}
 800492e:	e7ba      	b.n	80048a6 <HAL_I2C_Mem_Read+0xc2>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004930:	462a      	mov	r2, r5
 8004932:	4631      	mov	r1, r6
 8004934:	4620      	mov	r0, r4
 8004936:	f7ff fa74 	bl	8003e22 <I2C_WaitOnRXNEFlagUntilTimeout>
 800493a:	2800      	cmp	r0, #0
 800493c:	f040 80eb 	bne.w	8004b16 <HAL_I2C_Mem_Read+0x332>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004940:	6823      	ldr	r3, [r4, #0]
 8004942:	691a      	ldr	r2, [r3, #16]
 8004944:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004946:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8004948:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800494a:	3301      	adds	r3, #1
 800494c:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800494e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004950:	3b01      	subs	r3, #1
 8004952:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8004954:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004956:	3b01      	subs	r3, #1
 8004958:	b29b      	uxth	r3, r3
 800495a:	8563      	strh	r3, [r4, #42]	; 0x2a
 800495c:	e094      	b.n	8004a88 <HAL_I2C_Mem_Read+0x2a4>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800495e:	9500      	str	r5, [sp, #0]
 8004960:	4633      	mov	r3, r6
 8004962:	2200      	movs	r2, #0
 8004964:	4641      	mov	r1, r8
 8004966:	4620      	mov	r0, r4
 8004968:	f7ff f83b 	bl	80039e2 <I2C_WaitOnFlagUntilTimeout>
 800496c:	2800      	cmp	r0, #0
 800496e:	f040 80d6 	bne.w	8004b1e <HAL_I2C_Mem_Read+0x33a>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004972:	6822      	ldr	r2, [r4, #0]
 8004974:	6813      	ldr	r3, [r2, #0]
 8004976:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800497a:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800497c:	b672      	cpsid	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800497e:	6823      	ldr	r3, [r4, #0]
 8004980:	691a      	ldr	r2, [r3, #16]
 8004982:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004984:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8004986:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004988:	3301      	adds	r3, #1
 800498a:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800498c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800498e:	3b01      	subs	r3, #1
 8004990:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8004992:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004994:	3b01      	subs	r3, #1
 8004996:	b29b      	uxth	r3, r3
 8004998:	8563      	strh	r3, [r4, #42]	; 0x2a
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800499a:	f8da 3000 	ldr.w	r3, [sl]
 800499e:	08db      	lsrs	r3, r3, #3
 80049a0:	fba9 2303 	umull	r2, r3, r9, r3
 80049a4:	0a1b      	lsrs	r3, r3, #8
 80049a6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80049aa:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80049ae:	9307      	str	r3, [sp, #28]
            count--;
 80049b0:	9b07      	ldr	r3, [sp, #28]
 80049b2:	3b01      	subs	r3, #1
 80049b4:	9307      	str	r3, [sp, #28]
            if (count == 0U)
 80049b6:	9b07      	ldr	r3, [sp, #28]
 80049b8:	b333      	cbz	r3, 8004a08 <HAL_I2C_Mem_Read+0x224>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80049ba:	6823      	ldr	r3, [r4, #0]
 80049bc:	695a      	ldr	r2, [r3, #20]
 80049be:	f012 0f04 	tst.w	r2, #4
 80049c2:	d0f5      	beq.n	80049b0 <HAL_I2C_Mem_Read+0x1cc>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049c4:	681a      	ldr	r2, [r3, #0]
 80049c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049ca:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049cc:	6823      	ldr	r3, [r4, #0]
 80049ce:	691a      	ldr	r2, [r3, #16]
 80049d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80049d2:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80049d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80049d6:	3301      	adds	r3, #1
 80049d8:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80049da:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80049dc:	3b01      	subs	r3, #1
 80049de:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80049e0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80049e2:	3b01      	subs	r3, #1
 80049e4:	b29b      	uxth	r3, r3
 80049e6:	8563      	strh	r3, [r4, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80049e8:	b662      	cpsie	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049ea:	6823      	ldr	r3, [r4, #0]
 80049ec:	691a      	ldr	r2, [r3, #16]
 80049ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80049f0:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80049f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80049f4:	3301      	adds	r3, #1
 80049f6:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80049f8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80049fa:	3b01      	subs	r3, #1
 80049fc:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80049fe:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004a00:	3b01      	subs	r3, #1
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	8563      	strh	r3, [r4, #42]	; 0x2a
 8004a06:	e03f      	b.n	8004a88 <HAL_I2C_Mem_Read+0x2a4>
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004a08:	6323      	str	r3, [r4, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004a0a:	2220      	movs	r2, #32
 8004a0c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a10:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a14:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004a16:	f042 0220 	orr.w	r2, r2, #32
 8004a1a:	6422      	str	r2, [r4, #64]	; 0x40
 8004a1c:	b662      	cpsie	i
              __HAL_UNLOCK(hi2c);
 8004a1e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
              return HAL_ERROR;
 8004a22:	2701      	movs	r7, #1
 8004a24:	e6f1      	b.n	800480a <HAL_I2C_Mem_Read+0x26>
 8004a26:	bf00      	nop
 8004a28:	00100002 	.word	0x00100002
 8004a2c:	ffff0000 	.word	0xffff0000
 8004a30:	00010004 	.word	0x00010004
 8004a34:	20000000 	.word	0x20000000
 8004a38:	14f8b589 	.word	0x14f8b589
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a3c:	462a      	mov	r2, r5
 8004a3e:	4631      	mov	r1, r6
 8004a40:	4620      	mov	r0, r4
 8004a42:	f7ff f9ee 	bl	8003e22 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004a46:	2800      	cmp	r0, #0
 8004a48:	d16b      	bne.n	8004b22 <HAL_I2C_Mem_Read+0x33e>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a4a:	6823      	ldr	r3, [r4, #0]
 8004a4c:	691a      	ldr	r2, [r3, #16]
 8004a4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004a50:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004a52:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004a54:	1c53      	adds	r3, r2, #1
 8004a56:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8004a58:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004a5a:	3b01      	subs	r3, #1
 8004a5c:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8004a5e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004a60:	3b01      	subs	r3, #1
 8004a62:	b29b      	uxth	r3, r3
 8004a64:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004a66:	6823      	ldr	r3, [r4, #0]
 8004a68:	6959      	ldr	r1, [r3, #20]
 8004a6a:	f011 0f04 	tst.w	r1, #4
 8004a6e:	d00b      	beq.n	8004a88 <HAL_I2C_Mem_Read+0x2a4>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a70:	691b      	ldr	r3, [r3, #16]
 8004a72:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 8004a74:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004a76:	3301      	adds	r3, #1
 8004a78:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8004a7a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004a7c:	3b01      	subs	r3, #1
 8004a7e:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8004a80:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004a82:	3b01      	subs	r3, #1
 8004a84:	b29b      	uxth	r3, r3
 8004a86:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004a88:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d034      	beq.n	8004af8 <HAL_I2C_Mem_Read+0x314>
      if (hi2c->XferSize <= 3U)
 8004a8e:	2b03      	cmp	r3, #3
 8004a90:	d8d4      	bhi.n	8004a3c <HAL_I2C_Mem_Read+0x258>
        if (hi2c->XferSize == 1U)
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	f43f af4c 	beq.w	8004930 <HAL_I2C_Mem_Read+0x14c>
        else if (hi2c->XferSize == 2U)
 8004a98:	2b02      	cmp	r3, #2
 8004a9a:	f47f af60 	bne.w	800495e <HAL_I2C_Mem_Read+0x17a>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004a9e:	9500      	str	r5, [sp, #0]
 8004aa0:	4633      	mov	r3, r6
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	4641      	mov	r1, r8
 8004aa6:	4620      	mov	r0, r4
 8004aa8:	f7fe ff9b 	bl	80039e2 <I2C_WaitOnFlagUntilTimeout>
 8004aac:	2800      	cmp	r0, #0
 8004aae:	d134      	bne.n	8004b1a <HAL_I2C_Mem_Read+0x336>
  __ASM volatile ("cpsid i" : : : "memory");
 8004ab0:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ab2:	6822      	ldr	r2, [r4, #0]
 8004ab4:	6813      	ldr	r3, [r2, #0]
 8004ab6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004aba:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004abc:	6823      	ldr	r3, [r4, #0]
 8004abe:	691a      	ldr	r2, [r3, #16]
 8004ac0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004ac2:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8004ac4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004ac6:	3301      	adds	r3, #1
 8004ac8:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8004aca:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004acc:	3b01      	subs	r3, #1
 8004ace:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8004ad0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004ad2:	3b01      	subs	r3, #1
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	8563      	strh	r3, [r4, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004ad8:	b662      	cpsie	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ada:	6823      	ldr	r3, [r4, #0]
 8004adc:	691a      	ldr	r2, [r3, #16]
 8004ade:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004ae0:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8004ae2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004ae4:	3301      	adds	r3, #1
 8004ae6:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8004ae8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004aea:	3b01      	subs	r3, #1
 8004aec:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8004aee:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004af0:	3b01      	subs	r3, #1
 8004af2:	b29b      	uxth	r3, r3
 8004af4:	8563      	strh	r3, [r4, #42]	; 0x2a
 8004af6:	e7c7      	b.n	8004a88 <HAL_I2C_Mem_Read+0x2a4>
    hi2c->State = HAL_I2C_STATE_READY;
 8004af8:	2320      	movs	r3, #32
 8004afa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004afe:	2300      	movs	r3, #0
 8004b00:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8004b04:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8004b08:	e67f      	b.n	800480a <HAL_I2C_Mem_Read+0x26>
      return HAL_BUSY;
 8004b0a:	2702      	movs	r7, #2
 8004b0c:	e67d      	b.n	800480a <HAL_I2C_Mem_Read+0x26>
    __HAL_LOCK(hi2c);
 8004b0e:	2702      	movs	r7, #2
 8004b10:	e67b      	b.n	800480a <HAL_I2C_Mem_Read+0x26>
      return HAL_ERROR;
 8004b12:	2701      	movs	r7, #1
 8004b14:	e679      	b.n	800480a <HAL_I2C_Mem_Read+0x26>
            return HAL_ERROR;
 8004b16:	2701      	movs	r7, #1
 8004b18:	e677      	b.n	800480a <HAL_I2C_Mem_Read+0x26>
            return HAL_ERROR;
 8004b1a:	2701      	movs	r7, #1
 8004b1c:	e675      	b.n	800480a <HAL_I2C_Mem_Read+0x26>
            return HAL_ERROR;
 8004b1e:	2701      	movs	r7, #1
 8004b20:	e673      	b.n	800480a <HAL_I2C_Mem_Read+0x26>
          return HAL_ERROR;
 8004b22:	2701      	movs	r7, #1
 8004b24:	e671      	b.n	800480a <HAL_I2C_Mem_Read+0x26>
 8004b26:	bf00      	nop

08004b28 <HAL_I2C_MasterTxCpltCallback>:
}
 8004b28:	4770      	bx	lr

08004b2a <HAL_I2C_MasterRxCpltCallback>:
}
 8004b2a:	4770      	bx	lr

08004b2c <HAL_I2C_SlaveTxCpltCallback>:
}
 8004b2c:	4770      	bx	lr

08004b2e <HAL_I2C_SlaveRxCpltCallback>:
}
 8004b2e:	4770      	bx	lr

08004b30 <HAL_I2C_AddrCallback>:
}
 8004b30:	4770      	bx	lr

08004b32 <HAL_I2C_ListenCpltCallback>:
}
 8004b32:	4770      	bx	lr

08004b34 <HAL_I2C_MemTxCpltCallback>:
}
 8004b34:	4770      	bx	lr

08004b36 <I2C_MemoryTransmit_TXE_BTF>:
{
 8004b36:	b508      	push	{r3, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004b38:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
  if (hi2c->EventCount == 0U)
 8004b3c:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8004b3e:	b99a      	cbnz	r2, 8004b68 <I2C_MemoryTransmit_TXE_BTF+0x32>
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004b40:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8004b42:	2b01      	cmp	r3, #1
 8004b44:	d008      	beq.n	8004b58 <I2C_MemoryTransmit_TXE_BTF+0x22>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004b46:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8004b48:	6802      	ldr	r2, [r0, #0]
 8004b4a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8004b4e:	6113      	str	r3, [r2, #16]
      hi2c->EventCount++;
 8004b50:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8004b52:	3301      	adds	r3, #1
 8004b54:	6503      	str	r3, [r0, #80]	; 0x50
}
 8004b56:	bd08      	pop	{r3, pc}
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004b58:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8004b5a:	6802      	ldr	r2, [r0, #0]
 8004b5c:	b2db      	uxtb	r3, r3
 8004b5e:	6113      	str	r3, [r2, #16]
      hi2c->EventCount += 2U;
 8004b60:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8004b62:	3302      	adds	r3, #2
 8004b64:	6503      	str	r3, [r0, #80]	; 0x50
 8004b66:	e7f6      	b.n	8004b56 <I2C_MemoryTransmit_TXE_BTF+0x20>
 8004b68:	b2db      	uxtb	r3, r3
  else if (hi2c->EventCount == 1U)
 8004b6a:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8004b6c:	2a01      	cmp	r2, #1
 8004b6e:	d00b      	beq.n	8004b88 <I2C_MemoryTransmit_TXE_BTF+0x52>
  else if (hi2c->EventCount == 2U)
 8004b70:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8004b72:	2a02      	cmp	r2, #2
 8004b74:	d13f      	bne.n	8004bf6 <I2C_MemoryTransmit_TXE_BTF+0xc0>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004b76:	2b22      	cmp	r3, #34	; 0x22
 8004b78:	d00e      	beq.n	8004b98 <I2C_MemoryTransmit_TXE_BTF+0x62>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004b7a:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8004b7c:	b292      	uxth	r2, r2
 8004b7e:	b302      	cbz	r2, 8004bc2 <I2C_MemoryTransmit_TXE_BTF+0x8c>
 8004b80:	2b21      	cmp	r3, #33	; 0x21
 8004b82:	d012      	beq.n	8004baa <I2C_MemoryTransmit_TXE_BTF+0x74>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004b84:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8004b86:	e7e6      	b.n	8004b56 <I2C_MemoryTransmit_TXE_BTF+0x20>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004b88:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8004b8a:	6802      	ldr	r2, [r0, #0]
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	6113      	str	r3, [r2, #16]
    hi2c->EventCount++;
 8004b90:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8004b92:	3301      	adds	r3, #1
 8004b94:	6503      	str	r3, [r0, #80]	; 0x50
 8004b96:	e7de      	b.n	8004b56 <I2C_MemoryTransmit_TXE_BTF+0x20>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004b98:	6802      	ldr	r2, [r0, #0]
 8004b9a:	6813      	ldr	r3, [r2, #0]
 8004b9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ba0:	6013      	str	r3, [r2, #0]
      hi2c->EventCount++;
 8004ba2:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8004ba4:	3301      	adds	r3, #1
 8004ba6:	6503      	str	r3, [r0, #80]	; 0x50
 8004ba8:	e7d5      	b.n	8004b56 <I2C_MemoryTransmit_TXE_BTF+0x20>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004baa:	6803      	ldr	r3, [r0, #0]
 8004bac:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8004bae:	7812      	ldrb	r2, [r2, #0]
 8004bb0:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004bb2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004bb4:	3301      	adds	r3, #1
 8004bb6:	6243      	str	r3, [r0, #36]	; 0x24
      hi2c->XferCount--;
 8004bb8:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8004bba:	3b01      	subs	r3, #1
 8004bbc:	b29b      	uxth	r3, r3
 8004bbe:	8543      	strh	r3, [r0, #42]	; 0x2a
 8004bc0:	e7c9      	b.n	8004b56 <I2C_MemoryTransmit_TXE_BTF+0x20>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004bc2:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8004bc4:	b292      	uxth	r2, r2
 8004bc6:	2a00      	cmp	r2, #0
 8004bc8:	d1c5      	bne.n	8004b56 <I2C_MemoryTransmit_TXE_BTF+0x20>
 8004bca:	2b21      	cmp	r3, #33	; 0x21
 8004bcc:	d1c3      	bne.n	8004b56 <I2C_MemoryTransmit_TXE_BTF+0x20>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004bce:	6802      	ldr	r2, [r0, #0]
 8004bd0:	6853      	ldr	r3, [r2, #4]
 8004bd2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004bd6:	6053      	str	r3, [r2, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bd8:	6802      	ldr	r2, [r0, #0]
 8004bda:	6813      	ldr	r3, [r2, #0]
 8004bdc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004be0:	6013      	str	r3, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004be2:	2300      	movs	r3, #0
 8004be4:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004be6:	2220      	movs	r2, #32
 8004be8:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bec:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004bf0:	f7ff ffa0 	bl	8004b34 <HAL_I2C_MemTxCpltCallback>
 8004bf4:	e7af      	b.n	8004b56 <I2C_MemoryTransmit_TXE_BTF+0x20>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8004bf6:	6803      	ldr	r3, [r0, #0]
 8004bf8:	695a      	ldr	r2, [r3, #20]
 8004bfa:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004bfe:	d0aa      	beq.n	8004b56 <I2C_MemoryTransmit_TXE_BTF+0x20>
    hi2c->Instance->DR = 0x00U;
 8004c00:	2200      	movs	r2, #0
 8004c02:	611a      	str	r2, [r3, #16]
}
 8004c04:	e7a7      	b.n	8004b56 <I2C_MemoryTransmit_TXE_BTF+0x20>

08004c06 <HAL_I2C_MemRxCpltCallback>:
}
 8004c06:	4770      	bx	lr

08004c08 <HAL_I2C_ErrorCallback>:
}
 8004c08:	4770      	bx	lr

08004c0a <HAL_I2C_AbortCpltCallback>:
}
 8004c0a:	4770      	bx	lr

08004c0c <I2C_DMAAbort>:
{
 8004c0c:	b500      	push	{lr}
 8004c0e:	b083      	sub	sp, #12
  __IO uint32_t count = 0U;
 8004c10:	2300      	movs	r3, #0
 8004c12:	9301      	str	r3, [sp, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004c14:	6a40      	ldr	r0, [r0, #36]	; 0x24
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004c16:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 8004c1a:	b2d2      	uxtb	r2, r2
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004c1c:	4b32      	ldr	r3, [pc, #200]	; (8004ce8 <I2C_DMAAbort+0xdc>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	08db      	lsrs	r3, r3, #3
 8004c22:	4932      	ldr	r1, [pc, #200]	; (8004cec <I2C_DMAAbort+0xe0>)
 8004c24:	fba1 1303 	umull	r1, r3, r1, r3
 8004c28:	0a1b      	lsrs	r3, r3, #8
 8004c2a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004c2e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8004c32:	9301      	str	r3, [sp, #4]
    if (count == 0U)
 8004c34:	9b01      	ldr	r3, [sp, #4]
 8004c36:	b143      	cbz	r3, 8004c4a <I2C_DMAAbort+0x3e>
    count--;
 8004c38:	9b01      	ldr	r3, [sp, #4]
 8004c3a:	3b01      	subs	r3, #1
 8004c3c:	9301      	str	r3, [sp, #4]
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004c3e:	6803      	ldr	r3, [r0, #0]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f413 7f00 	tst.w	r3, #512	; 0x200
 8004c46:	d1f5      	bne.n	8004c34 <I2C_DMAAbort+0x28>
 8004c48:	e003      	b.n	8004c52 <I2C_DMAAbort+0x46>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c4a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004c4c:	f043 0320 	orr.w	r3, r3, #32
 8004c50:	6403      	str	r3, [r0, #64]	; 0x40
  if (hi2c->hdmatx != NULL)
 8004c52:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004c54:	b10b      	cbz	r3, 8004c5a <I2C_DMAAbort+0x4e>
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004c56:	2100      	movs	r1, #0
 8004c58:	6299      	str	r1, [r3, #40]	; 0x28
  if (hi2c->hdmarx != NULL)
 8004c5a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004c5c:	b10b      	cbz	r3, 8004c62 <I2C_DMAAbort+0x56>
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004c5e:	2100      	movs	r1, #0
 8004c60:	6299      	str	r1, [r3, #40]	; 0x28
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c62:	6801      	ldr	r1, [r0, #0]
 8004c64:	680b      	ldr	r3, [r1, #0]
 8004c66:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c6a:	600b      	str	r3, [r1, #0]
  hi2c->XferCount = 0U;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	8543      	strh	r3, [r0, #42]	; 0x2a
  if (hi2c->hdmatx != NULL)
 8004c70:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004c72:	b10b      	cbz	r3, 8004c78 <I2C_DMAAbort+0x6c>
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004c74:	2100      	movs	r1, #0
 8004c76:	6359      	str	r1, [r3, #52]	; 0x34
  if (hi2c->hdmarx != NULL)
 8004c78:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004c7a:	b10b      	cbz	r3, 8004c80 <I2C_DMAAbort+0x74>
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004c7c:	2100      	movs	r1, #0
 8004c7e:	6359      	str	r1, [r3, #52]	; 0x34
  __HAL_I2C_DISABLE(hi2c);
 8004c80:	6801      	ldr	r1, [r0, #0]
 8004c82:	680b      	ldr	r3, [r1, #0]
 8004c84:	f023 0301 	bic.w	r3, r3, #1
 8004c88:	600b      	str	r3, [r1, #0]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004c8a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004c8e:	b2db      	uxtb	r3, r3
 8004c90:	2b60      	cmp	r3, #96	; 0x60
 8004c92:	d00e      	beq.n	8004cb2 <I2C_DMAAbort+0xa6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004c94:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8004c98:	2a28      	cmp	r2, #40	; 0x28
 8004c9a:	d014      	beq.n	8004cc6 <I2C_DMAAbort+0xba>
      hi2c->State = HAL_I2C_STATE_READY;
 8004c9c:	2320      	movs	r3, #32
 8004c9e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004ca8:	f7ff ffae 	bl	8004c08 <HAL_I2C_ErrorCallback>
}
 8004cac:	b003      	add	sp, #12
 8004cae:	f85d fb04 	ldr.w	pc, [sp], #4
    hi2c->State         = HAL_I2C_STATE_READY;
 8004cb2:	2320      	movs	r3, #32
 8004cb4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004cbe:	6403      	str	r3, [r0, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 8004cc0:	f7ff ffa3 	bl	8004c0a <HAL_I2C_AbortCpltCallback>
 8004cc4:	e7f2      	b.n	8004cac <I2C_DMAAbort+0xa0>
      __HAL_I2C_ENABLE(hi2c);
 8004cc6:	6802      	ldr	r2, [r0, #0]
 8004cc8:	6813      	ldr	r3, [r2, #0]
 8004cca:	f043 0301 	orr.w	r3, r3, #1
 8004cce:	6013      	str	r3, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cd0:	6802      	ldr	r2, [r0, #0]
 8004cd2:	6813      	ldr	r3, [r2, #0]
 8004cd4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004cd8:	6013      	str	r3, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004cde:	2328      	movs	r3, #40	; 0x28
 8004ce0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 8004ce4:	e7e0      	b.n	8004ca8 <I2C_DMAAbort+0x9c>
 8004ce6:	bf00      	nop
 8004ce8:	20000000 	.word	0x20000000
 8004cec:	14f8b589 	.word	0x14f8b589

08004cf0 <I2C_ITError>:
{
 8004cf0:	b510      	push	{r4, lr}
 8004cf2:	4604      	mov	r4, r0
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004cf4:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 8004cf8:	b2d2      	uxtb	r2, r2
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004cfa:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8004cfe:	b2db      	uxtb	r3, r3
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004d00:	2b10      	cmp	r3, #16
 8004d02:	d036      	beq.n	8004d72 <I2C_ITError+0x82>
 8004d04:	2b40      	cmp	r3, #64	; 0x40
 8004d06:	d034      	beq.n	8004d72 <I2C_ITError+0x82>
  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004d08:	f002 0328 	and.w	r3, r2, #40	; 0x28
 8004d0c:	2b28      	cmp	r3, #40	; 0x28
 8004d0e:	d03d      	beq.n	8004d8c <I2C_ITError+0x9c>
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004d10:	6823      	ldr	r3, [r4, #0]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8004d18:	d107      	bne.n	8004d2a <I2C_ITError+0x3a>
 8004d1a:	2a60      	cmp	r2, #96	; 0x60
 8004d1c:	d005      	beq.n	8004d2a <I2C_ITError+0x3a>
      hi2c->State = HAL_I2C_STATE_READY;
 8004d1e:	2320      	movs	r3, #32
 8004d20:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d24:	2300      	movs	r3, #0
 8004d26:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->PreviousState = I2C_STATE_NONE;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	6323      	str	r3, [r4, #48]	; 0x30
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004d2e:	6823      	ldr	r3, [r4, #0]
 8004d30:	685a      	ldr	r2, [r3, #4]
 8004d32:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8004d36:	d04d      	beq.n	8004dd4 <I2C_ITError+0xe4>
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004d38:	685a      	ldr	r2, [r3, #4]
 8004d3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d3e:	605a      	str	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004d40:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8004d42:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 8004d46:	b2db      	uxtb	r3, r3
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d025      	beq.n	8004d98 <I2C_ITError+0xa8>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004d4c:	4b46      	ldr	r3, [pc, #280]	; (8004e68 <I2C_ITError+0x178>)
 8004d4e:	6353      	str	r3, [r2, #52]	; 0x34
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004d50:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8004d52:	f7fe fc9d 	bl	8003690 <HAL_DMA_Abort_IT>
 8004d56:	2800      	cmp	r0, #0
 8004d58:	d04e      	beq.n	8004df8 <I2C_ITError+0x108>
        __HAL_I2C_DISABLE(hi2c);
 8004d5a:	6822      	ldr	r2, [r4, #0]
 8004d5c:	6813      	ldr	r3, [r2, #0]
 8004d5e:	f023 0301 	bic.w	r3, r3, #1
 8004d62:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8004d64:	2320      	movs	r3, #32
 8004d66:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004d6a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8004d6c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004d6e:	4798      	blx	r3
 8004d70:	e042      	b.n	8004df8 <I2C_ITError+0x108>
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004d72:	2a22      	cmp	r2, #34	; 0x22
 8004d74:	d1c8      	bne.n	8004d08 <I2C_ITError+0x18>
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004d76:	6822      	ldr	r2, [r4, #0]
 8004d78:	6813      	ldr	r3, [r2, #0]
 8004d7a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d7e:	6013      	str	r3, [r2, #0]
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004d80:	6823      	ldr	r3, [r4, #0]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8004d88:	d0c9      	beq.n	8004d1e <I2C_ITError+0x2e>
 8004d8a:	e7ce      	b.n	8004d2a <I2C_ITError+0x3a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004d90:	2328      	movs	r3, #40	; 0x28
 8004d92:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 8004d96:	e7ca      	b.n	8004d2e <I2C_ITError+0x3e>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004d98:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004d9a:	4a33      	ldr	r2, [pc, #204]	; (8004e68 <I2C_ITError+0x178>)
 8004d9c:	635a      	str	r2, [r3, #52]	; 0x34
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004d9e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004da0:	f7fe fc76 	bl	8003690 <HAL_DMA_Abort_IT>
 8004da4:	b340      	cbz	r0, 8004df8 <I2C_ITError+0x108>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004da6:	6823      	ldr	r3, [r4, #0]
 8004da8:	695a      	ldr	r2, [r3, #20]
 8004daa:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004dae:	d005      	beq.n	8004dbc <I2C_ITError+0xcc>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004db0:	691a      	ldr	r2, [r3, #16]
 8004db2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004db4:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8004db6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004db8:	3301      	adds	r3, #1
 8004dba:	6263      	str	r3, [r4, #36]	; 0x24
        __HAL_I2C_DISABLE(hi2c);
 8004dbc:	6822      	ldr	r2, [r4, #0]
 8004dbe:	6813      	ldr	r3, [r2, #0]
 8004dc0:	f023 0301 	bic.w	r3, r3, #1
 8004dc4:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8004dc6:	2320      	movs	r3, #32
 8004dc8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004dcc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004dce:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004dd0:	4798      	blx	r3
 8004dd2:	e011      	b.n	8004df8 <I2C_ITError+0x108>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004dd4:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8004dd8:	b2d2      	uxtb	r2, r2
 8004dda:	2a60      	cmp	r2, #96	; 0x60
 8004ddc:	d01f      	beq.n	8004e1e <I2C_ITError+0x12e>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004dde:	695a      	ldr	r2, [r3, #20]
 8004de0:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004de4:	d005      	beq.n	8004df2 <I2C_ITError+0x102>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004de6:	691a      	ldr	r2, [r3, #16]
 8004de8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004dea:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8004dec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004dee:	3301      	adds	r3, #1
 8004df0:	6263      	str	r3, [r4, #36]	; 0x24
    HAL_I2C_ErrorCallback(hi2c);
 8004df2:	4620      	mov	r0, r4
 8004df4:	f7ff ff08 	bl	8004c08 <HAL_I2C_ErrorCallback>
  CurrentError = hi2c->ErrorCode;
 8004df8:	6c23      	ldr	r3, [r4, #64]	; 0x40
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004dfa:	f013 0f0f 	tst.w	r3, #15
 8004dfe:	d004      	beq.n	8004e0a <I2C_ITError+0x11a>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004e00:	6822      	ldr	r2, [r4, #0]
 8004e02:	6853      	ldr	r3, [r2, #4]
 8004e04:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004e08:	6053      	str	r3, [r2, #4]
  CurrentState = hi2c->State;
 8004e0a:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8004e0e:	b2db      	uxtb	r3, r3
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004e10:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004e12:	f012 0f04 	tst.w	r2, #4
 8004e16:	d001      	beq.n	8004e1c <I2C_ITError+0x12c>
 8004e18:	2b28      	cmp	r3, #40	; 0x28
 8004e1a:	d018      	beq.n	8004e4e <I2C_ITError+0x15e>
}
 8004e1c:	bd10      	pop	{r4, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 8004e1e:	2220      	movs	r2, #32
 8004e20:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e24:	2200      	movs	r2, #0
 8004e26:	6422      	str	r2, [r4, #64]	; 0x40
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004e28:	695a      	ldr	r2, [r3, #20]
 8004e2a:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004e2e:	d005      	beq.n	8004e3c <I2C_ITError+0x14c>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e30:	691a      	ldr	r2, [r3, #16]
 8004e32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004e34:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8004e36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004e38:	3301      	adds	r3, #1
 8004e3a:	6263      	str	r3, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE(hi2c);
 8004e3c:	6822      	ldr	r2, [r4, #0]
 8004e3e:	6813      	ldr	r3, [r2, #0]
 8004e40:	f023 0301 	bic.w	r3, r3, #1
 8004e44:	6013      	str	r3, [r2, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 8004e46:	4620      	mov	r0, r4
 8004e48:	f7ff fedf 	bl	8004c0a <HAL_I2C_AbortCpltCallback>
 8004e4c:	e7d4      	b.n	8004df8 <I2C_ITError+0x108>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004e4e:	4b07      	ldr	r3, [pc, #28]	; (8004e6c <I2C_ITError+0x17c>)
 8004e50:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004e52:	2300      	movs	r3, #0
 8004e54:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004e56:	2220      	movs	r2, #32
 8004e58:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004e5c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 8004e60:	4620      	mov	r0, r4
 8004e62:	f7ff fe66 	bl	8004b32 <HAL_I2C_ListenCpltCallback>
}
 8004e66:	e7d9      	b.n	8004e1c <I2C_ITError+0x12c>
 8004e68:	08004c0d 	.word	0x08004c0d
 8004e6c:	ffff0000 	.word	0xffff0000

08004e70 <HAL_I2C_EV_IRQHandler>:
{
 8004e70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e72:	b08f      	sub	sp, #60	; 0x3c
 8004e74:	4604      	mov	r4, r0
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004e76:	6803      	ldr	r3, [r0, #0]
 8004e78:	6858      	ldr	r0, [r3, #4]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004e7a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004e7c:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8004e80:	b2d2      	uxtb	r2, r2
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004e82:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 8004e86:	b2c9      	uxtb	r1, r1
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004e88:	2a10      	cmp	r2, #16
 8004e8a:	d024      	beq.n	8004ed6 <HAL_I2C_EV_IRQHandler+0x66>
 8004e8c:	2a40      	cmp	r2, #64	; 0x40
 8004e8e:	d022      	beq.n	8004ed6 <HAL_I2C_EV_IRQHandler+0x66>
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004e90:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004e92:	2a00      	cmp	r2, #0
 8004e94:	f000 83d6 	beq.w	8005644 <HAL_I2C_EV_IRQHandler+0x7d4>
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004e98:	695a      	ldr	r2, [r3, #20]
  uint32_t sr2itflags               = 0U;
 8004e9a:	2500      	movs	r5, #0
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004e9c:	f012 0f02 	tst.w	r2, #2
 8004ea0:	f000 83ea 	beq.w	8005678 <HAL_I2C_EV_IRQHandler+0x808>
 8004ea4:	f410 7f00 	tst.w	r0, #512	; 0x200
 8004ea8:	f000 83ec 	beq.w	8005684 <HAL_I2C_EV_IRQHandler+0x814>
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004eac:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004eae:	b102      	cbz	r2, 8004eb2 <HAL_I2C_EV_IRQHandler+0x42>
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004eb0:	699d      	ldr	r5, [r3, #24]
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004eb2:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8004eb6:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8004eba:	2a28      	cmp	r2, #40	; 0x28
 8004ebc:	f000 83c5 	beq.w	800564a <HAL_I2C_EV_IRQHandler+0x7da>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	920c      	str	r2, [sp, #48]	; 0x30
 8004ec4:	6959      	ldr	r1, [r3, #20]
 8004ec6:	910c      	str	r1, [sp, #48]	; 0x30
 8004ec8:	699b      	ldr	r3, [r3, #24]
 8004eca:	930c      	str	r3, [sp, #48]	; 0x30
 8004ecc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004ece:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
}
 8004ed2:	b00f      	add	sp, #60	; 0x3c
 8004ed4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004ed6:	699f      	ldr	r7, [r3, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004ed8:	695d      	ldr	r5, [r3, #20]
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004eda:	f015 0f01 	tst.w	r5, #1
 8004ede:	d11d      	bne.n	8004f1c <HAL_I2C_EV_IRQHandler+0xac>
 8004ee0:	f5b6 0f2a 	cmp.w	r6, #11141120	; 0xaa0000
 8004ee4:	d0f5      	beq.n	8004ed2 <HAL_I2C_EV_IRQHandler+0x62>
 8004ee6:	f1b6 4f2a 	cmp.w	r6, #2852126720	; 0xaa000000
 8004eea:	d0f2      	beq.n	8004ed2 <HAL_I2C_EV_IRQHandler+0x62>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004eec:	f015 0f08 	tst.w	r5, #8
 8004ef0:	d01b      	beq.n	8004f2a <HAL_I2C_EV_IRQHandler+0xba>
 8004ef2:	f410 7f00 	tst.w	r0, #512	; 0x200
 8004ef6:	f000 8198 	beq.w	800522a <HAL_I2C_EV_IRQHandler+0x3ba>
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004efa:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004efc:	b2d2      	uxtb	r2, r2
 8004efe:	611a      	str	r2, [r3, #16]
  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004f00:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	f000 8085 	beq.w	8005012 <HAL_I2C_EV_IRQHandler+0x1a2>
 8004f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	f000 8081 	beq.w	8005012 <HAL_I2C_EV_IRQHandler+0x1a2>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004f10:	6822      	ldr	r2, [r4, #0]
 8004f12:	6853      	ldr	r3, [r2, #4]
 8004f14:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004f18:	6053      	str	r3, [r2, #4]
 8004f1a:	e7da      	b.n	8004ed2 <HAL_I2C_EV_IRQHandler+0x62>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004f1c:	f410 7f00 	tst.w	r0, #512	; 0x200
 8004f20:	d11d      	bne.n	8004f5e <HAL_I2C_EV_IRQHandler+0xee>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004f22:	f015 0f08 	tst.w	r5, #8
 8004f26:	f040 8180 	bne.w	800522a <HAL_I2C_EV_IRQHandler+0x3ba>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004f2a:	f015 0f02 	tst.w	r5, #2
 8004f2e:	f000 817c 	beq.w	800522a <HAL_I2C_EV_IRQHandler+0x3ba>
 8004f32:	f410 7f00 	tst.w	r0, #512	; 0x200
 8004f36:	f000 8178 	beq.w	800522a <HAL_I2C_EV_IRQHandler+0x3ba>
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004f3a:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8004f3e:	b2d1      	uxtb	r1, r2
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004f40:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004f42:	6b25      	ldr	r5, [r4, #48]	; 0x30
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004f44:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8004f48:	b2d2      	uxtb	r2, r2
 8004f4a:	2a22      	cmp	r2, #34	; 0x22
 8004f4c:	d06a      	beq.n	8005024 <HAL_I2C_EV_IRQHandler+0x1b4>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f4e:	2200      	movs	r2, #0
 8004f50:	920a      	str	r2, [sp, #40]	; 0x28
 8004f52:	695a      	ldr	r2, [r3, #20]
 8004f54:	920a      	str	r2, [sp, #40]	; 0x28
 8004f56:	699b      	ldr	r3, [r3, #24]
 8004f58:	930a      	str	r3, [sp, #40]	; 0x28
 8004f5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f5c:	e7b9      	b.n	8004ed2 <HAL_I2C_EV_IRQHandler+0x62>
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004f5e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004f60:	f5b2 0f2a 	cmp.w	r2, #11141120	; 0xaa0000
 8004f64:	d01a      	beq.n	8004f9c <HAL_I2C_EV_IRQHandler+0x12c>
  }
  /* else if user set XferOptions to I2C_OTHER_AND_LAST_FRAME */
  /* it request implicitly to generate a restart condition    */
  /* then generate a stop condition at the end of transfer    */
  /* set XferOptions to I2C_FIRST_AND_LAST_FRAME              */
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004f66:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004f68:	f1b2 4f2a 	cmp.w	r2, #2852126720	; 0xaa000000
  {
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004f6c:	bf04      	itt	eq
 8004f6e:	2208      	moveq	r2, #8
 8004f70:	62e2      	streq	r2, [r4, #44]	; 0x2c
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004f72:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8004f76:	b2d2      	uxtb	r2, r2
 8004f78:	2a40      	cmp	r2, #64	; 0x40
 8004f7a:	d012      	beq.n	8004fa2 <HAL_I2C_EV_IRQHandler+0x132>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004f7c:	6922      	ldr	r2, [r4, #16]
 8004f7e:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8004f82:	d01b      	beq.n	8004fbc <HAL_I2C_EV_IRQHandler+0x14c>
      if (hi2c->EventCount == 0U)
 8004f84:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8004f86:	2a00      	cmp	r2, #0
 8004f88:	d136      	bne.n	8004ff8 <HAL_I2C_EV_IRQHandler+0x188>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004f8a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004f8c:	f3c2 12c8 	ubfx	r2, r2, #7, #9
 8004f90:	f002 0206 	and.w	r2, r2, #6
 8004f94:	f042 02f0 	orr.w	r2, r2, #240	; 0xf0
 8004f98:	611a      	str	r2, [r3, #16]
 8004f9a:	e79a      	b.n	8004ed2 <HAL_I2C_EV_IRQHandler+0x62>
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004f9c:	2201      	movs	r2, #1
 8004f9e:	62e2      	str	r2, [r4, #44]	; 0x2c
 8004fa0:	e7e7      	b.n	8004f72 <HAL_I2C_EV_IRQHandler+0x102>
    if (hi2c->EventCount == 0U)
 8004fa2:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8004fa4:	b922      	cbnz	r2, 8004fb0 <HAL_I2C_EV_IRQHandler+0x140>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004fa6:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004fa8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004fac:	611a      	str	r2, [r3, #16]
 8004fae:	e790      	b.n	8004ed2 <HAL_I2C_EV_IRQHandler+0x62>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004fb0:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004fb2:	f042 0201 	orr.w	r2, r2, #1
 8004fb6:	b2d2      	uxtb	r2, r2
 8004fb8:	611a      	str	r2, [r3, #16]
 8004fba:	e78a      	b.n	8004ed2 <HAL_I2C_EV_IRQHandler+0x62>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004fbc:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8004fc0:	b2d2      	uxtb	r2, r2
 8004fc2:	2a21      	cmp	r2, #33	; 0x21
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004fc4:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004fc6:	bf0e      	itee	eq
 8004fc8:	f002 02fe 	andeq.w	r2, r2, #254	; 0xfe
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004fcc:	f042 0201 	orrne.w	r2, r2, #1
 8004fd0:	b2d2      	uxtbne	r2, r2
 8004fd2:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004fd4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004fd6:	b13b      	cbz	r3, 8004fe8 <HAL_I2C_EV_IRQHandler+0x178>
 8004fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fda:	b12b      	cbz	r3, 8004fe8 <HAL_I2C_EV_IRQHandler+0x178>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004fdc:	6822      	ldr	r2, [r4, #0]
 8004fde:	6853      	ldr	r3, [r2, #4]
 8004fe0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004fe4:	6053      	str	r3, [r2, #4]
 8004fe6:	e774      	b.n	8004ed2 <HAL_I2C_EV_IRQHandler+0x62>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004fe8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	f43f af71 	beq.w	8004ed2 <HAL_I2C_EV_IRQHandler+0x62>
 8004ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d1f2      	bne.n	8004fdc <HAL_I2C_EV_IRQHandler+0x16c>
 8004ff6:	e76c      	b.n	8004ed2 <HAL_I2C_EV_IRQHandler+0x62>
      else if (hi2c->EventCount == 1U)
 8004ff8:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8004ffa:	2a01      	cmp	r2, #1
 8004ffc:	f47f af69 	bne.w	8004ed2 <HAL_I2C_EV_IRQHandler+0x62>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005000:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8005002:	f3c2 12c8 	ubfx	r2, r2, #7, #9
 8005006:	f002 0206 	and.w	r2, r2, #6
 800500a:	f042 02f1 	orr.w	r2, r2, #241	; 0xf1
 800500e:	611a      	str	r2, [r3, #16]
 8005010:	e75f      	b.n	8004ed2 <HAL_I2C_EV_IRQHandler+0x62>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005012:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005014:	2b00      	cmp	r3, #0
 8005016:	f43f af5c 	beq.w	8004ed2 <HAL_I2C_EV_IRQHandler+0x62>
 800501a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800501c:	2b00      	cmp	r3, #0
 800501e:	f47f af77 	bne.w	8004f10 <HAL_I2C_EV_IRQHandler+0xa0>
 8005022:	e756      	b.n	8004ed2 <HAL_I2C_EV_IRQHandler+0x62>
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005024:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8005026:	b90a      	cbnz	r2, 800502c <HAL_I2C_EV_IRQHandler+0x1bc>
 8005028:	2940      	cmp	r1, #64	; 0x40
 800502a:	d015      	beq.n	8005058 <HAL_I2C_EV_IRQHandler+0x1e8>
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800502c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800502e:	b91a      	cbnz	r2, 8005038 <HAL_I2C_EV_IRQHandler+0x1c8>
 8005030:	6922      	ldr	r2, [r4, #16]
 8005032:	f5b2 4f40 	cmp.w	r2, #49152	; 0xc000
 8005036:	d016      	beq.n	8005066 <HAL_I2C_EV_IRQHandler+0x1f6>
      if (hi2c->XferCount == 0U)
 8005038:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800503a:	b292      	uxth	r2, r2
 800503c:	bb12      	cbnz	r2, 8005084 <HAL_I2C_EV_IRQHandler+0x214>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800503e:	9202      	str	r2, [sp, #8]
 8005040:	695a      	ldr	r2, [r3, #20]
 8005042:	9202      	str	r2, [sp, #8]
 8005044:	699a      	ldr	r2, [r3, #24]
 8005046:	9202      	str	r2, [sp, #8]
 8005048:	9a02      	ldr	r2, [sp, #8]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005050:	601a      	str	r2, [r3, #0]
      hi2c->EventCount = 0U;
 8005052:	2300      	movs	r3, #0
 8005054:	6523      	str	r3, [r4, #80]	; 0x50
 8005056:	e73c      	b.n	8004ed2 <HAL_I2C_EV_IRQHandler+0x62>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005058:	9200      	str	r2, [sp, #0]
 800505a:	695a      	ldr	r2, [r3, #20]
 800505c:	9200      	str	r2, [sp, #0]
 800505e:	699b      	ldr	r3, [r3, #24]
 8005060:	9300      	str	r3, [sp, #0]
 8005062:	9b00      	ldr	r3, [sp, #0]
 8005064:	e735      	b.n	8004ed2 <HAL_I2C_EV_IRQHandler+0x62>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005066:	2200      	movs	r2, #0
 8005068:	9201      	str	r2, [sp, #4]
 800506a:	695a      	ldr	r2, [r3, #20]
 800506c:	9201      	str	r2, [sp, #4]
 800506e:	699a      	ldr	r2, [r3, #24]
 8005070:	9201      	str	r2, [sp, #4]
 8005072:	9a01      	ldr	r2, [sp, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005074:	681a      	ldr	r2, [r3, #0]
 8005076:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800507a:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800507c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800507e:	3301      	adds	r3, #1
 8005080:	6523      	str	r3, [r4, #80]	; 0x50
 8005082:	e726      	b.n	8004ed2 <HAL_I2C_EV_IRQHandler+0x62>
      else if (hi2c->XferCount == 1U)
 8005084:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005086:	b292      	uxth	r2, r2
 8005088:	2a01      	cmp	r2, #1
 800508a:	d01b      	beq.n	80050c4 <HAL_I2C_EV_IRQHandler+0x254>
      else if (hi2c->XferCount == 2U)
 800508c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800508e:	b292      	uxth	r2, r2
 8005090:	2a02      	cmp	r2, #2
 8005092:	d06e      	beq.n	8005172 <HAL_I2C_EV_IRQHandler+0x302>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800509a:	601a      	str	r2, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800509c:	6823      	ldr	r3, [r4, #0]
 800509e:	685a      	ldr	r2, [r3, #4]
 80050a0:	f412 6f00 	tst.w	r2, #2048	; 0x800
 80050a4:	f000 80b4 	beq.w	8005210 <HAL_I2C_EV_IRQHandler+0x3a0>
 80050a8:	2820      	cmp	r0, #32
 80050aa:	f200 80ba 	bhi.w	8005222 <HAL_I2C_EV_IRQHandler+0x3b2>
 80050ae:	2807      	cmp	r0, #7
 80050b0:	f200 80a7 	bhi.w	8005202 <HAL_I2C_EV_IRQHandler+0x392>
 80050b4:	2801      	cmp	r0, #1
 80050b6:	f040 80ab 	bne.w	8005210 <HAL_I2C_EV_IRQHandler+0x3a0>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80050ba:	685a      	ldr	r2, [r3, #4]
 80050bc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80050c0:	605a      	str	r2, [r3, #4]
 80050c2:	e0a5      	b.n	8005210 <HAL_I2C_EV_IRQHandler+0x3a0>
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80050c4:	f510 3f80 	cmn.w	r0, #65536	; 0x10000
 80050c8:	d019      	beq.n	80050fe <HAL_I2C_EV_IRQHandler+0x28e>
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80050ca:	2808      	cmp	r0, #8
 80050cc:	d03b      	beq.n	8005146 <HAL_I2C_EV_IRQHandler+0x2d6>
 80050ce:	2820      	cmp	r0, #32
 80050d0:	d039      	beq.n	8005146 <HAL_I2C_EV_IRQHandler+0x2d6>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80050d2:	2d12      	cmp	r5, #18
 80050d4:	d035      	beq.n	8005142 <HAL_I2C_EV_IRQHandler+0x2d2>
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80050d6:	2810      	cmp	r0, #16
 80050d8:	d804      	bhi.n	80050e4 <HAL_I2C_EV_IRQHandler+0x274>
 80050da:	4a9a      	ldr	r2, [pc, #616]	; (8005344 <HAL_I2C_EV_IRQHandler+0x4d4>)
 80050dc:	40c2      	lsrs	r2, r0
 80050de:	f012 0f01 	tst.w	r2, #1
 80050e2:	d141      	bne.n	8005168 <HAL_I2C_EV_IRQHandler+0x2f8>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050e4:	681a      	ldr	r2, [r3, #0]
 80050e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050ea:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050ec:	2300      	movs	r3, #0
 80050ee:	9305      	str	r3, [sp, #20]
 80050f0:	6823      	ldr	r3, [r4, #0]
 80050f2:	695a      	ldr	r2, [r3, #20]
 80050f4:	9205      	str	r2, [sp, #20]
 80050f6:	699b      	ldr	r3, [r3, #24]
 80050f8:	9305      	str	r3, [sp, #20]
 80050fa:	9b05      	ldr	r3, [sp, #20]
 80050fc:	e7a9      	b.n	8005052 <HAL_I2C_EV_IRQHandler+0x1e2>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050fe:	681a      	ldr	r2, [r3, #0]
 8005100:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005104:	601a      	str	r2, [r3, #0]
          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005106:	6823      	ldr	r3, [r4, #0]
 8005108:	685a      	ldr	r2, [r3, #4]
 800510a:	f412 6f00 	tst.w	r2, #2048	; 0x800
 800510e:	d00c      	beq.n	800512a <HAL_I2C_EV_IRQHandler+0x2ba>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005116:	601a      	str	r2, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005118:	2300      	movs	r3, #0
 800511a:	9303      	str	r3, [sp, #12]
 800511c:	6823      	ldr	r3, [r4, #0]
 800511e:	695a      	ldr	r2, [r3, #20]
 8005120:	9203      	str	r2, [sp, #12]
 8005122:	699b      	ldr	r3, [r3, #24]
 8005124:	9303      	str	r3, [sp, #12]
 8005126:	9b03      	ldr	r3, [sp, #12]
 8005128:	e793      	b.n	8005052 <HAL_I2C_EV_IRQHandler+0x1e2>
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800512a:	2200      	movs	r2, #0
 800512c:	9204      	str	r2, [sp, #16]
 800512e:	695a      	ldr	r2, [r3, #20]
 8005130:	9204      	str	r2, [sp, #16]
 8005132:	699a      	ldr	r2, [r3, #24]
 8005134:	9204      	str	r2, [sp, #16]
 8005136:	9a04      	ldr	r2, [sp, #16]
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005138:	681a      	ldr	r2, [r3, #0]
 800513a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800513e:	601a      	str	r2, [r3, #0]
 8005140:	e787      	b.n	8005052 <HAL_I2C_EV_IRQHandler+0x1e2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005142:	2801      	cmp	r0, #1
 8005144:	d0ce      	beq.n	80050e4 <HAL_I2C_EV_IRQHandler+0x274>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005146:	681a      	ldr	r2, [r3, #0]
 8005148:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800514c:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800514e:	2300      	movs	r3, #0
 8005150:	9306      	str	r3, [sp, #24]
 8005152:	6823      	ldr	r3, [r4, #0]
 8005154:	695a      	ldr	r2, [r3, #20]
 8005156:	9206      	str	r2, [sp, #24]
 8005158:	699a      	ldr	r2, [r3, #24]
 800515a:	9206      	str	r2, [sp, #24]
 800515c:	9a06      	ldr	r2, [sp, #24]
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005164:	601a      	str	r2, [r3, #0]
 8005166:	e774      	b.n	8005052 <HAL_I2C_EV_IRQHandler+0x1e2>
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800516e:	601a      	str	r2, [r3, #0]
 8005170:	e7bc      	b.n	80050ec <HAL_I2C_EV_IRQHandler+0x27c>
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005172:	2810      	cmp	r0, #16
 8005174:	d804      	bhi.n	8005180 <HAL_I2C_EV_IRQHandler+0x310>
 8005176:	4a73      	ldr	r2, [pc, #460]	; (8005344 <HAL_I2C_EV_IRQHandler+0x4d4>)
 8005178:	40c2      	lsrs	r2, r0
 800517a:	f012 0f01 	tst.w	r2, #1
 800517e:	d11c      	bne.n	80051ba <HAL_I2C_EV_IRQHandler+0x34a>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005186:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005188:	2300      	movs	r3, #0
 800518a:	9307      	str	r3, [sp, #28]
 800518c:	6823      	ldr	r3, [r4, #0]
 800518e:	695a      	ldr	r2, [r3, #20]
 8005190:	9207      	str	r2, [sp, #28]
 8005192:	699a      	ldr	r2, [r3, #24]
 8005194:	9207      	str	r2, [sp, #28]
 8005196:	9a07      	ldr	r2, [sp, #28]
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800519e:	601a      	str	r2, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80051a0:	6823      	ldr	r3, [r4, #0]
 80051a2:	685a      	ldr	r2, [r3, #4]
 80051a4:	f412 6f00 	tst.w	r2, #2048	; 0x800
 80051a8:	f43f af53 	beq.w	8005052 <HAL_I2C_EV_IRQHandler+0x1e2>
 80051ac:	2820      	cmp	r0, #32
 80051ae:	d916      	bls.n	80051de <HAL_I2C_EV_IRQHandler+0x36e>
 80051b0:	f510 3f80 	cmn.w	r0, #65536	; 0x10000
 80051b4:	f47f af4d 	bne.w	8005052 <HAL_I2C_EV_IRQHandler+0x1e2>
 80051b8:	e016      	b.n	80051e8 <HAL_I2C_EV_IRQHandler+0x378>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80051c0:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051c2:	2300      	movs	r3, #0
 80051c4:	9308      	str	r3, [sp, #32]
 80051c6:	6822      	ldr	r2, [r4, #0]
 80051c8:	6953      	ldr	r3, [r2, #20]
 80051ca:	9308      	str	r3, [sp, #32]
 80051cc:	6993      	ldr	r3, [r2, #24]
 80051ce:	9308      	str	r3, [sp, #32]
 80051d0:	9b08      	ldr	r3, [sp, #32]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80051d2:	4613      	mov	r3, r2
 80051d4:	6852      	ldr	r2, [r2, #4]
 80051d6:	f412 6f00 	tst.w	r2, #2048	; 0x800
 80051da:	f43f af3a 	beq.w	8005052 <HAL_I2C_EV_IRQHandler+0x1e2>
 80051de:	2807      	cmp	r0, #7
 80051e0:	d807      	bhi.n	80051f2 <HAL_I2C_EV_IRQHandler+0x382>
 80051e2:	2801      	cmp	r0, #1
 80051e4:	f47f af35 	bne.w	8005052 <HAL_I2C_EV_IRQHandler+0x1e2>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80051e8:	685a      	ldr	r2, [r3, #4]
 80051ea:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80051ee:	605a      	str	r2, [r3, #4]
 80051f0:	e72f      	b.n	8005052 <HAL_I2C_EV_IRQHandler+0x1e2>
 80051f2:	3808      	subs	r0, #8
 80051f4:	4a54      	ldr	r2, [pc, #336]	; (8005348 <HAL_I2C_EV_IRQHandler+0x4d8>)
 80051f6:	40c2      	lsrs	r2, r0
 80051f8:	f012 0f01 	tst.w	r2, #1
 80051fc:	f43f af29 	beq.w	8005052 <HAL_I2C_EV_IRQHandler+0x1e2>
 8005200:	e7f2      	b.n	80051e8 <HAL_I2C_EV_IRQHandler+0x378>
 8005202:	3808      	subs	r0, #8
 8005204:	4a50      	ldr	r2, [pc, #320]	; (8005348 <HAL_I2C_EV_IRQHandler+0x4d8>)
 8005206:	40c2      	lsrs	r2, r0
 8005208:	f012 0f01 	tst.w	r2, #1
 800520c:	f47f af55 	bne.w	80050ba <HAL_I2C_EV_IRQHandler+0x24a>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005210:	2300      	movs	r3, #0
 8005212:	9309      	str	r3, [sp, #36]	; 0x24
 8005214:	6823      	ldr	r3, [r4, #0]
 8005216:	695a      	ldr	r2, [r3, #20]
 8005218:	9209      	str	r2, [sp, #36]	; 0x24
 800521a:	699b      	ldr	r3, [r3, #24]
 800521c:	9309      	str	r3, [sp, #36]	; 0x24
 800521e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005220:	e717      	b.n	8005052 <HAL_I2C_EV_IRQHandler+0x1e2>
 8005222:	f510 3f80 	cmn.w	r0, #65536	; 0x10000
 8005226:	d1f3      	bne.n	8005210 <HAL_I2C_EV_IRQHandler+0x3a0>
 8005228:	e747      	b.n	80050ba <HAL_I2C_EV_IRQHandler+0x24a>
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800522a:	f017 0f04 	tst.w	r7, #4
 800522e:	f000 80da 	beq.w	80053e6 <HAL_I2C_EV_IRQHandler+0x576>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005232:	685e      	ldr	r6, [r3, #4]
 8005234:	f416 6f00 	tst.w	r6, #2048	; 0x800
 8005238:	f47f ae4b 	bne.w	8004ed2 <HAL_I2C_EV_IRQHandler+0x62>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800523c:	f015 0f80 	tst.w	r5, #128	; 0x80
 8005240:	d06e      	beq.n	8005320 <HAL_I2C_EV_IRQHandler+0x4b0>
 8005242:	f410 6f80 	tst.w	r0, #1024	; 0x400
 8005246:	d06b      	beq.n	8005320 <HAL_I2C_EV_IRQHandler+0x4b0>
 8005248:	f015 0f04 	tst.w	r5, #4
 800524c:	d16c      	bne.n	8005328 <HAL_I2C_EV_IRQHandler+0x4b8>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800524e:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8005252:	b2d2      	uxtb	r2, r2
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005254:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
 8005258:	b2c9      	uxtb	r1, r1
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800525a:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800525c:	8d20      	ldrh	r0, [r4, #40]	; 0x28
 800525e:	2800      	cmp	r0, #0
 8005260:	d140      	bne.n	80052e4 <HAL_I2C_EV_IRQHandler+0x474>
 8005262:	2a21      	cmp	r2, #33	; 0x21
 8005264:	d006      	beq.n	8005274 <HAL_I2C_EV_IRQHandler+0x404>
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8005266:	2940      	cmp	r1, #64	; 0x40
 8005268:	f47f ae33 	bne.w	8004ed2 <HAL_I2C_EV_IRQHandler+0x62>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800526c:	2a22      	cmp	r2, #34	; 0x22
 800526e:	f47f ae30 	bne.w	8004ed2 <HAL_I2C_EV_IRQHandler+0x62>
 8005272:	e039      	b.n	80052e8 <HAL_I2C_EV_IRQHandler+0x478>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005274:	2d08      	cmp	r5, #8
 8005276:	d004      	beq.n	8005282 <HAL_I2C_EV_IRQHandler+0x412>
 8005278:	2d20      	cmp	r5, #32
 800527a:	d002      	beq.n	8005282 <HAL_I2C_EV_IRQHandler+0x412>
 800527c:	f515 3f80 	cmn.w	r5, #65536	; 0x10000
 8005280:	d119      	bne.n	80052b6 <HAL_I2C_EV_IRQHandler+0x446>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005282:	685a      	ldr	r2, [r3, #4]
 8005284:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005288:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800528a:	6822      	ldr	r2, [r4, #0]
 800528c:	6813      	ldr	r3, [r2, #0]
 800528e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005292:	6013      	str	r3, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005294:	2300      	movs	r3, #0
 8005296:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005298:	2320      	movs	r3, #32
 800529a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800529e:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 80052a2:	b2db      	uxtb	r3, r3
 80052a4:	2b40      	cmp	r3, #64	; 0x40
 80052a6:	d016      	beq.n	80052d6 <HAL_I2C_EV_IRQHandler+0x466>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80052a8:	2300      	movs	r3, #0
 80052aa:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80052ae:	4620      	mov	r0, r4
 80052b0:	f7ff fc3a 	bl	8004b28 <HAL_I2C_MasterTxCpltCallback>
 80052b4:	e60d      	b.n	8004ed2 <HAL_I2C_EV_IRQHandler+0x62>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80052b6:	685a      	ldr	r2, [r3, #4]
 80052b8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80052bc:	605a      	str	r2, [r3, #4]
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80052be:	2311      	movs	r3, #17
 80052c0:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80052c2:	2300      	movs	r3, #0
 80052c4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80052c8:	2320      	movs	r3, #32
 80052ca:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80052ce:	4620      	mov	r0, r4
 80052d0:	f7ff fc2a 	bl	8004b28 <HAL_I2C_MasterTxCpltCallback>
 80052d4:	e5fd      	b.n	8004ed2 <HAL_I2C_EV_IRQHandler+0x62>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80052d6:	2300      	movs	r3, #0
 80052d8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        HAL_I2C_MemTxCpltCallback(hi2c);
 80052dc:	4620      	mov	r0, r4
 80052de:	f7ff fc29 	bl	8004b34 <HAL_I2C_MemTxCpltCallback>
 80052e2:	e5f6      	b.n	8004ed2 <HAL_I2C_EV_IRQHandler+0x62>
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80052e4:	2a21      	cmp	r2, #33	; 0x21
 80052e6:	d1be      	bne.n	8005266 <HAL_I2C_EV_IRQHandler+0x3f6>
    if (hi2c->XferCount == 0U)
 80052e8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80052ea:	b292      	uxth	r2, r2
 80052ec:	b922      	cbnz	r2, 80052f8 <HAL_I2C_EV_IRQHandler+0x488>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80052ee:	685a      	ldr	r2, [r3, #4]
 80052f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052f4:	605a      	str	r2, [r3, #4]
 80052f6:	e5ec      	b.n	8004ed2 <HAL_I2C_EV_IRQHandler+0x62>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80052f8:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 80052fc:	b2d2      	uxtb	r2, r2
 80052fe:	2a40      	cmp	r2, #64	; 0x40
 8005300:	d00a      	beq.n	8005318 <HAL_I2C_EV_IRQHandler+0x4a8>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005302:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005304:	7812      	ldrb	r2, [r2, #0]
 8005306:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8005308:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800530a:	3301      	adds	r3, #1
 800530c:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 800530e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005310:	3b01      	subs	r3, #1
 8005312:	b29b      	uxth	r3, r3
 8005314:	8563      	strh	r3, [r4, #42]	; 0x2a
 8005316:	e5dc      	b.n	8004ed2 <HAL_I2C_EV_IRQHandler+0x62>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005318:	4620      	mov	r0, r4
 800531a:	f7ff fc0c 	bl	8004b36 <I2C_MemoryTransmit_TXE_BTF>
 800531e:	e5d8      	b.n	8004ed2 <HAL_I2C_EV_IRQHandler+0x62>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005320:	f015 0f04 	tst.w	r5, #4
 8005324:	f43f add5 	beq.w	8004ed2 <HAL_I2C_EV_IRQHandler+0x62>
 8005328:	f410 7f00 	tst.w	r0, #512	; 0x200
 800532c:	f43f add1 	beq.w	8004ed2 <HAL_I2C_EV_IRQHandler+0x62>
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005330:	2921      	cmp	r1, #33	; 0x21
 8005332:	d00b      	beq.n	800534c <HAL_I2C_EV_IRQHandler+0x4dc>
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8005334:	2a40      	cmp	r2, #64	; 0x40
 8005336:	f47f adcc 	bne.w	8004ed2 <HAL_I2C_EV_IRQHandler+0x62>
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800533a:	4620      	mov	r0, r4
 800533c:	f7ff fbfb 	bl	8004b36 <I2C_MemoryTransmit_TXE_BTF>
 8005340:	e5c7      	b.n	8004ed2 <HAL_I2C_EV_IRQHandler+0x62>
 8005342:	bf00      	nop
 8005344:	00010014 	.word	0x00010014
 8005348:	01000101 	.word	0x01000101
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800534c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800534e:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8005352:	b2d2      	uxtb	r2, r2
 8005354:	2a21      	cmp	r2, #33	; 0x21
 8005356:	f47f adbc 	bne.w	8004ed2 <HAL_I2C_EV_IRQHandler+0x62>
    if (hi2c->XferCount != 0U)
 800535a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800535c:	b292      	uxth	r2, r2
 800535e:	b152      	cbz	r2, 8005376 <HAL_I2C_EV_IRQHandler+0x506>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005360:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005362:	7812      	ldrb	r2, [r2, #0]
 8005364:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8005366:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005368:	3301      	adds	r3, #1
 800536a:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800536c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800536e:	3b01      	subs	r3, #1
 8005370:	b29b      	uxth	r3, r3
 8005372:	8563      	strh	r3, [r4, #42]	; 0x2a
 8005374:	e5ad      	b.n	8004ed2 <HAL_I2C_EV_IRQHandler+0x62>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005376:	2908      	cmp	r1, #8
 8005378:	d004      	beq.n	8005384 <HAL_I2C_EV_IRQHandler+0x514>
 800537a:	2920      	cmp	r1, #32
 800537c:	d002      	beq.n	8005384 <HAL_I2C_EV_IRQHandler+0x514>
 800537e:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 8005382:	d119      	bne.n	80053b8 <HAL_I2C_EV_IRQHandler+0x548>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005384:	685a      	ldr	r2, [r3, #4]
 8005386:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800538a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800538c:	6822      	ldr	r2, [r4, #0]
 800538e:	6813      	ldr	r3, [r2, #0]
 8005390:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005394:	6013      	str	r3, [r2, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8005396:	2300      	movs	r3, #0
 8005398:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800539a:	2320      	movs	r3, #32
 800539c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80053a0:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 80053a4:	b2db      	uxtb	r3, r3
 80053a6:	2b40      	cmp	r3, #64	; 0x40
 80053a8:	d016      	beq.n	80053d8 <HAL_I2C_EV_IRQHandler+0x568>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80053aa:	2300      	movs	r3, #0
 80053ac:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80053b0:	4620      	mov	r0, r4
 80053b2:	f7ff fbb9 	bl	8004b28 <HAL_I2C_MasterTxCpltCallback>
 80053b6:	e58c      	b.n	8004ed2 <HAL_I2C_EV_IRQHandler+0x62>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80053b8:	685a      	ldr	r2, [r3, #4]
 80053ba:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80053be:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80053c0:	2311      	movs	r3, #17
 80053c2:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80053c4:	2300      	movs	r3, #0
 80053c6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80053ca:	2320      	movs	r3, #32
 80053cc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80053d0:	4620      	mov	r0, r4
 80053d2:	f7ff fba9 	bl	8004b28 <HAL_I2C_MasterTxCpltCallback>
 80053d6:	e57c      	b.n	8004ed2 <HAL_I2C_EV_IRQHandler+0x62>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80053d8:	2300      	movs	r3, #0
 80053da:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80053de:	4620      	mov	r0, r4
 80053e0:	f7ff fba8 	bl	8004b34 <HAL_I2C_MemTxCpltCallback>
 80053e4:	e575      	b.n	8004ed2 <HAL_I2C_EV_IRQHandler+0x62>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80053e6:	685a      	ldr	r2, [r3, #4]
 80053e8:	f412 6f00 	tst.w	r2, #2048	; 0x800
 80053ec:	f47f ad71 	bne.w	8004ed2 <HAL_I2C_EV_IRQHandler+0x62>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80053f0:	f015 0f40 	tst.w	r5, #64	; 0x40
 80053f4:	f000 808f 	beq.w	8005516 <HAL_I2C_EV_IRQHandler+0x6a6>
 80053f8:	f410 6f80 	tst.w	r0, #1024	; 0x400
 80053fc:	f000 808b 	beq.w	8005516 <HAL_I2C_EV_IRQHandler+0x6a6>
 8005400:	f015 0f04 	tst.w	r5, #4
 8005404:	f040 808b 	bne.w	800551e <HAL_I2C_EV_IRQHandler+0x6ae>
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005408:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 800540c:	b2d2      	uxtb	r2, r2
 800540e:	2a22      	cmp	r2, #34	; 0x22
 8005410:	f47f ad5f 	bne.w	8004ed2 <HAL_I2C_EV_IRQHandler+0x62>
    tmp = hi2c->XferCount;
 8005414:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005416:	b292      	uxth	r2, r2
    if (tmp > 3U)
 8005418:	2a03      	cmp	r2, #3
 800541a:	d914      	bls.n	8005446 <HAL_I2C_EV_IRQHandler+0x5d6>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800541c:	691a      	ldr	r2, [r3, #16]
 800541e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005420:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8005422:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005424:	3301      	adds	r3, #1
 8005426:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8005428:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800542a:	3b01      	subs	r3, #1
 800542c:	b29b      	uxth	r3, r3
 800542e:	8563      	strh	r3, [r4, #42]	; 0x2a
      if (hi2c->XferCount == (uint16_t)3)
 8005430:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005432:	b29b      	uxth	r3, r3
 8005434:	2b03      	cmp	r3, #3
 8005436:	f47f ad4c 	bne.w	8004ed2 <HAL_I2C_EV_IRQHandler+0x62>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800543a:	6822      	ldr	r2, [r4, #0]
 800543c:	6853      	ldr	r3, [r2, #4]
 800543e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005442:	6053      	str	r3, [r2, #4]
 8005444:	e545      	b.n	8004ed2 <HAL_I2C_EV_IRQHandler+0x62>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8005446:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005448:	2902      	cmp	r1, #2
 800544a:	d001      	beq.n	8005450 <HAL_I2C_EV_IRQHandler+0x5e0>
 800544c:	2a01      	cmp	r2, #1
 800544e:	d904      	bls.n	800545a <HAL_I2C_EV_IRQHandler+0x5ea>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005450:	685a      	ldr	r2, [r3, #4]
 8005452:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005456:	605a      	str	r2, [r3, #4]
 8005458:	e53b      	b.n	8004ed2 <HAL_I2C_EV_IRQHandler+0x62>
  __IO uint32_t count = 0U;
 800545a:	2200      	movs	r2, #0
 800545c:	920b      	str	r2, [sp, #44]	; 0x2c
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800545e:	4a85      	ldr	r2, [pc, #532]	; (8005674 <HAL_I2C_EV_IRQHandler+0x804>)
 8005460:	6812      	ldr	r2, [r2, #0]
 8005462:	f246 11a8 	movw	r1, #25000	; 0x61a8
 8005466:	fbb2 f2f1 	udiv	r2, r2, r1
 800546a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800546e:	920b      	str	r2, [sp, #44]	; 0x2c
    count--;
 8005470:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005472:	3a01      	subs	r2, #1
 8005474:	920b      	str	r2, [sp, #44]	; 0x2c
    if (count == 0U)
 8005476:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005478:	b342      	cbz	r2, 80054cc <HAL_I2C_EV_IRQHandler+0x65c>
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	f412 7f00 	tst.w	r2, #512	; 0x200
 8005480:	d1f6      	bne.n	8005470 <HAL_I2C_EV_IRQHandler+0x600>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005488:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800548a:	6822      	ldr	r2, [r4, #0]
 800548c:	6853      	ldr	r3, [r2, #4]
 800548e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005492:	6053      	str	r3, [r2, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005494:	6823      	ldr	r3, [r4, #0]
 8005496:	691a      	ldr	r2, [r3, #16]
 8005498:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800549a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800549c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800549e:	3301      	adds	r3, #1
 80054a0:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 80054a2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80054a4:	3b01      	subs	r3, #1
 80054a6:	b29b      	uxth	r3, r3
 80054a8:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80054aa:	2320      	movs	r3, #32
 80054ac:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80054b0:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 80054b4:	b2db      	uxtb	r3, r3
 80054b6:	2b40      	cmp	r3, #64	; 0x40
 80054b8:	d025      	beq.n	8005506 <HAL_I2C_EV_IRQHandler+0x696>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80054ba:	2300      	movs	r3, #0
 80054bc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80054c0:	2312      	movs	r3, #18
 80054c2:	6323      	str	r3, [r4, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80054c4:	4620      	mov	r0, r4
 80054c6:	f7ff fb30 	bl	8004b2a <HAL_I2C_MasterRxCpltCallback>
 80054ca:	e502      	b.n	8004ed2 <HAL_I2C_EV_IRQHandler+0x62>
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80054cc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80054ce:	f042 0220 	orr.w	r2, r2, #32
 80054d2:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80054d4:	685a      	ldr	r2, [r3, #4]
 80054d6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80054da:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054dc:	6823      	ldr	r3, [r4, #0]
 80054de:	691a      	ldr	r2, [r3, #16]
 80054e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80054e2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80054e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80054e6:	3301      	adds	r3, #1
 80054e8:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 80054ea:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80054ec:	3b01      	subs	r3, #1
 80054ee:	b29b      	uxth	r3, r3
 80054f0:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80054f2:	2320      	movs	r3, #32
 80054f4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80054f8:	2300      	movs	r3, #0
 80054fa:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80054fe:	4620      	mov	r0, r4
 8005500:	f7ff fb82 	bl	8004c08 <HAL_I2C_ErrorCallback>
 8005504:	e4e5      	b.n	8004ed2 <HAL_I2C_EV_IRQHandler+0x62>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005506:	2300      	movs	r3, #0
 8005508:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800550c:	6323      	str	r3, [r4, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800550e:	4620      	mov	r0, r4
 8005510:	f7ff fb79 	bl	8004c06 <HAL_I2C_MemRxCpltCallback>
 8005514:	e4dd      	b.n	8004ed2 <HAL_I2C_EV_IRQHandler+0x62>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005516:	f015 0f04 	tst.w	r5, #4
 800551a:	f43f acda 	beq.w	8004ed2 <HAL_I2C_EV_IRQHandler+0x62>
 800551e:	f410 7f00 	tst.w	r0, #512	; 0x200
 8005522:	f43f acd6 	beq.w	8004ed2 <HAL_I2C_EV_IRQHandler+0x62>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005526:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  if (hi2c->XferCount == 4U)
 8005528:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800552a:	b292      	uxth	r2, r2
 800552c:	2a04      	cmp	r2, #4
 800552e:	d012      	beq.n	8005556 <HAL_I2C_EV_IRQHandler+0x6e6>
  else if (hi2c->XferCount == 3U)
 8005530:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005532:	b292      	uxth	r2, r2
 8005534:	2a03      	cmp	r2, #3
 8005536:	d01e      	beq.n	8005576 <HAL_I2C_EV_IRQHandler+0x706>
  else if (hi2c->XferCount == 2U)
 8005538:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800553a:	b292      	uxth	r2, r2
 800553c:	2a02      	cmp	r2, #2
 800553e:	d033      	beq.n	80055a8 <HAL_I2C_EV_IRQHandler+0x738>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005540:	691a      	ldr	r2, [r3, #16]
 8005542:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005544:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005546:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005548:	3301      	adds	r3, #1
 800554a:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 800554c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800554e:	3b01      	subs	r3, #1
 8005550:	b29b      	uxth	r3, r3
 8005552:	8563      	strh	r3, [r4, #42]	; 0x2a
 8005554:	e4bd      	b.n	8004ed2 <HAL_I2C_EV_IRQHandler+0x62>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005556:	685a      	ldr	r2, [r3, #4]
 8005558:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800555c:	605a      	str	r2, [r3, #4]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800555e:	6823      	ldr	r3, [r4, #0]
 8005560:	691a      	ldr	r2, [r3, #16]
 8005562:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005564:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005566:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005568:	3301      	adds	r3, #1
 800556a:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 800556c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800556e:	3b01      	subs	r3, #1
 8005570:	b29b      	uxth	r3, r3
 8005572:	8563      	strh	r3, [r4, #42]	; 0x2a
 8005574:	e4ad      	b.n	8004ed2 <HAL_I2C_EV_IRQHandler+0x62>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005576:	685a      	ldr	r2, [r3, #4]
 8005578:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800557c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800557e:	2904      	cmp	r1, #4
 8005580:	d006      	beq.n	8005590 <HAL_I2C_EV_IRQHandler+0x720>
 8005582:	2902      	cmp	r1, #2
 8005584:	d004      	beq.n	8005590 <HAL_I2C_EV_IRQHandler+0x720>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005586:	6822      	ldr	r2, [r4, #0]
 8005588:	6813      	ldr	r3, [r2, #0]
 800558a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800558e:	6013      	str	r3, [r2, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005590:	6823      	ldr	r3, [r4, #0]
 8005592:	691a      	ldr	r2, [r3, #16]
 8005594:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005596:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005598:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800559a:	3301      	adds	r3, #1
 800559c:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 800559e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80055a0:	3b01      	subs	r3, #1
 80055a2:	b29b      	uxth	r3, r3
 80055a4:	8563      	strh	r3, [r4, #42]	; 0x2a
 80055a6:	e494      	b.n	8004ed2 <HAL_I2C_EV_IRQHandler+0x62>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80055a8:	3901      	subs	r1, #1
 80055aa:	290f      	cmp	r1, #15
 80055ac:	d83d      	bhi.n	800562a <HAL_I2C_EV_IRQHandler+0x7ba>
 80055ae:	e8df f001 	tbb	[pc, r1]
 80055b2:	3708      	.short	0x3708
 80055b4:	3c3c373c 	.word	0x3c3c373c
 80055b8:	3c3c3c3c 	.word	0x3c3c3c3c
 80055bc:	3c3c3c3c 	.word	0x3c3c3c3c
 80055c0:	083c      	.short	0x083c
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055c2:	681a      	ldr	r2, [r3, #0]
 80055c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055c8:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055ca:	6823      	ldr	r3, [r4, #0]
 80055cc:	691a      	ldr	r2, [r3, #16]
 80055ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80055d0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80055d2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80055d4:	1c53      	adds	r3, r2, #1
 80055d6:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 80055d8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80055da:	3b01      	subs	r3, #1
 80055dc:	b29b      	uxth	r3, r3
 80055de:	8563      	strh	r3, [r4, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055e0:	6823      	ldr	r3, [r4, #0]
 80055e2:	691b      	ldr	r3, [r3, #16]
 80055e4:	7053      	strb	r3, [r2, #1]
    hi2c->pBuffPtr++;
 80055e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80055e8:	3301      	adds	r3, #1
 80055ea:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 80055ec:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80055ee:	3b01      	subs	r3, #1
 80055f0:	b29b      	uxth	r3, r3
 80055f2:	8563      	strh	r3, [r4, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80055f4:	6822      	ldr	r2, [r4, #0]
 80055f6:	6853      	ldr	r3, [r2, #4]
 80055f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055fc:	6053      	str	r3, [r2, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80055fe:	2320      	movs	r3, #32
 8005600:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005604:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8005608:	b2db      	uxtb	r3, r3
 800560a:	2b40      	cmp	r3, #64	; 0x40
 800560c:	d012      	beq.n	8005634 <HAL_I2C_EV_IRQHandler+0x7c4>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800560e:	2300      	movs	r3, #0
 8005610:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005614:	2312      	movs	r3, #18
 8005616:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005618:	4620      	mov	r0, r4
 800561a:	f7ff fa86 	bl	8004b2a <HAL_I2C_MasterRxCpltCallback>
 800561e:	e458      	b.n	8004ed2 <HAL_I2C_EV_IRQHandler+0x62>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005620:	681a      	ldr	r2, [r3, #0]
 8005622:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005626:	601a      	str	r2, [r3, #0]
 8005628:	e7cf      	b.n	80055ca <HAL_I2C_EV_IRQHandler+0x75a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005630:	601a      	str	r2, [r3, #0]
 8005632:	e7ca      	b.n	80055ca <HAL_I2C_EV_IRQHandler+0x75a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005634:	2300      	movs	r3, #0
 8005636:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800563a:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800563c:	4620      	mov	r0, r4
 800563e:	f7ff fae2 	bl	8004c06 <HAL_I2C_MemRxCpltCallback>
 8005642:	e446      	b.n	8004ed2 <HAL_I2C_EV_IRQHandler+0x62>
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005644:	699d      	ldr	r5, [r3, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005646:	695a      	ldr	r2, [r3, #20]
 8005648:	e428      	b.n	8004e9c <HAL_I2C_EV_IRQHandler+0x2c>
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800564a:	685a      	ldr	r2, [r3, #4]
 800564c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005650:	605a      	str	r2, [r3, #4]
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005652:	f085 0104 	eor.w	r1, r5, #4
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005656:	f3c1 0180 	ubfx	r1, r1, #2, #1
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800565a:	f015 0f80 	tst.w	r5, #128	; 0x80
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800565e:	bf0c      	ite	eq
 8005660:	89a2      	ldrheq	r2, [r4, #12]
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005662:	8b22      	ldrhne	r2, [r4, #24]
    __HAL_UNLOCK(hi2c);
 8005664:	2300      	movs	r3, #0
 8005666:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800566a:	4620      	mov	r0, r4
 800566c:	f7ff fa60 	bl	8004b30 <HAL_I2C_AddrCallback>
 8005670:	e42f      	b.n	8004ed2 <HAL_I2C_EV_IRQHandler+0x62>
 8005672:	bf00      	nop
 8005674:	20000000 	.word	0x20000000
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005678:	f012 0f10 	tst.w	r2, #16
 800567c:	d002      	beq.n	8005684 <HAL_I2C_EV_IRQHandler+0x814>
 800567e:	f410 7f00 	tst.w	r0, #512	; 0x200
 8005682:	d139      	bne.n	80056f8 <HAL_I2C_EV_IRQHandler+0x888>
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005684:	f001 01f7 	and.w	r1, r1, #247	; 0xf7
 8005688:	2921      	cmp	r1, #33	; 0x21
 800568a:	f000 80f4 	beq.w	8005876 <HAL_I2C_EV_IRQHandler+0xa06>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800568e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005692:	f000 813b 	beq.w	800590c <HAL_I2C_EV_IRQHandler+0xa9c>
 8005696:	f410 6f80 	tst.w	r0, #1024	; 0x400
 800569a:	f000 8137 	beq.w	800590c <HAL_I2C_EV_IRQHandler+0xa9c>
 800569e:	f012 0f04 	tst.w	r2, #4
 80056a2:	f040 8137 	bne.w	8005914 <HAL_I2C_EV_IRQHandler+0xaa4>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80056a6:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 80056aa:	b2d1      	uxtb	r1, r2
  if (hi2c->XferCount != 0U)
 80056ac:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80056ae:	b292      	uxth	r2, r2
 80056b0:	2a00      	cmp	r2, #0
 80056b2:	f43f ac0e 	beq.w	8004ed2 <HAL_I2C_EV_IRQHandler+0x62>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056b6:	691a      	ldr	r2, [r3, #16]
 80056b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80056ba:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80056bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80056be:	3301      	adds	r3, #1
 80056c0:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 80056c2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80056c4:	3b01      	subs	r3, #1
 80056c6:	b29b      	uxth	r3, r3
 80056c8:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80056ca:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80056cc:	b29b      	uxth	r3, r3
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	f47f abff 	bne.w	8004ed2 <HAL_I2C_EV_IRQHandler+0x62>
 80056d4:	292a      	cmp	r1, #42	; 0x2a
 80056d6:	f47f abfc 	bne.w	8004ed2 <HAL_I2C_EV_IRQHandler+0x62>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80056da:	6822      	ldr	r2, [r4, #0]
 80056dc:	6853      	ldr	r3, [r2, #4]
 80056de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80056e2:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80056e4:	2322      	movs	r3, #34	; 0x22
 80056e6:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80056e8:	2328      	movs	r3, #40	; 0x28
 80056ea:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80056ee:	4620      	mov	r0, r4
 80056f0:	f7ff fa1d 	bl	8004b2e <HAL_I2C_SlaveRxCpltCallback>
 80056f4:	f7ff bbed 	b.w	8004ed2 <HAL_I2C_EV_IRQHandler+0x62>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80056f8:	f894 503d 	ldrb.w	r5, [r4, #61]	; 0x3d
 80056fc:	b2ed      	uxtb	r5, r5
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80056fe:	685a      	ldr	r2, [r3, #4]
 8005700:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005704:	605a      	str	r2, [r3, #4]
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005706:	2300      	movs	r3, #0
 8005708:	930d      	str	r3, [sp, #52]	; 0x34
 800570a:	6823      	ldr	r3, [r4, #0]
 800570c:	695a      	ldr	r2, [r3, #20]
 800570e:	920d      	str	r2, [sp, #52]	; 0x34
 8005710:	681a      	ldr	r2, [r3, #0]
 8005712:	f042 0201 	orr.w	r2, r2, #1
 8005716:	601a      	str	r2, [r3, #0]
 8005718:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800571a:	6822      	ldr	r2, [r4, #0]
 800571c:	6813      	ldr	r3, [r2, #0]
 800571e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005722:	6013      	str	r3, [r2, #0]
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005724:	6823      	ldr	r3, [r4, #0]
 8005726:	685a      	ldr	r2, [r3, #4]
 8005728:	f412 6f00 	tst.w	r2, #2048	; 0x800
 800572c:	d038      	beq.n	80057a0 <HAL_I2C_EV_IRQHandler+0x930>
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800572e:	f005 02f7 	and.w	r2, r5, #247	; 0xf7
 8005732:	2a22      	cmp	r2, #34	; 0x22
 8005734:	d01f      	beq.n	8005776 <HAL_I2C_EV_IRQHandler+0x906>
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8005736:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8005738:	6812      	ldr	r2, [r2, #0]
 800573a:	6852      	ldr	r2, [r2, #4]
 800573c:	b292      	uxth	r2, r2
 800573e:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 8005740:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005742:	b292      	uxth	r2, r2
 8005744:	b11a      	cbz	r2, 800574e <HAL_I2C_EV_IRQHandler+0x8de>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005746:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005748:	f042 0204 	orr.w	r2, r2, #4
 800574c:	6422      	str	r2, [r4, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800574e:	685a      	ldr	r2, [r3, #4]
 8005750:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005754:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005756:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8005758:	f7fd ffe6 	bl	8003728 <HAL_DMA_GetState>
 800575c:	2801      	cmp	r0, #1
 800575e:	d01f      	beq.n	80057a0 <HAL_I2C_EV_IRQHandler+0x930>
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005760:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005762:	4a77      	ldr	r2, [pc, #476]	; (8005940 <HAL_I2C_EV_IRQHandler+0xad0>)
 8005764:	635a      	str	r2, [r3, #52]	; 0x34
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005766:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8005768:	f7fd ff92 	bl	8003690 <HAL_DMA_Abort_IT>
 800576c:	b1c0      	cbz	r0, 80057a0 <HAL_I2C_EV_IRQHandler+0x930>
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800576e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8005770:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005772:	4798      	blx	r3
 8005774:	e014      	b.n	80057a0 <HAL_I2C_EV_IRQHandler+0x930>
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8005776:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005778:	6812      	ldr	r2, [r2, #0]
 800577a:	6852      	ldr	r2, [r2, #4]
 800577c:	b292      	uxth	r2, r2
 800577e:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 8005780:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005782:	b292      	uxth	r2, r2
 8005784:	b11a      	cbz	r2, 800578e <HAL_I2C_EV_IRQHandler+0x91e>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005786:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005788:	f042 0204 	orr.w	r2, r2, #4
 800578c:	6422      	str	r2, [r4, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800578e:	685a      	ldr	r2, [r3, #4]
 8005790:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005794:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005796:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8005798:	f7fd ffc6 	bl	8003728 <HAL_DMA_GetState>
 800579c:	2801      	cmp	r0, #1
 800579e:	d142      	bne.n	8005826 <HAL_I2C_EV_IRQHandler+0x9b6>
  if (hi2c->XferCount != 0U)
 80057a0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80057a2:	b29b      	uxth	r3, r3
 80057a4:	b323      	cbz	r3, 80057f0 <HAL_I2C_EV_IRQHandler+0x980>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80057a6:	6823      	ldr	r3, [r4, #0]
 80057a8:	695a      	ldr	r2, [r3, #20]
 80057aa:	f012 0f04 	tst.w	r2, #4
 80057ae:	d009      	beq.n	80057c4 <HAL_I2C_EV_IRQHandler+0x954>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057b0:	691a      	ldr	r2, [r3, #16]
 80057b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80057b4:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80057b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80057b8:	3301      	adds	r3, #1
 80057ba:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80057bc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80057be:	3b01      	subs	r3, #1
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80057c4:	6823      	ldr	r3, [r4, #0]
 80057c6:	695a      	ldr	r2, [r3, #20]
 80057c8:	f012 0f40 	tst.w	r2, #64	; 0x40
 80057cc:	d009      	beq.n	80057e2 <HAL_I2C_EV_IRQHandler+0x972>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057ce:	691a      	ldr	r2, [r3, #16]
 80057d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80057d2:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80057d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80057d6:	3301      	adds	r3, #1
 80057d8:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80057da:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80057dc:	3b01      	subs	r3, #1
 80057de:	b29b      	uxth	r3, r3
 80057e0:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->XferCount != 0U)
 80057e2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80057e4:	b29b      	uxth	r3, r3
 80057e6:	b11b      	cbz	r3, 80057f0 <HAL_I2C_EV_IRQHandler+0x980>
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80057e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80057ea:	f043 0304 	orr.w	r3, r3, #4
 80057ee:	6423      	str	r3, [r4, #64]	; 0x40
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80057f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80057f2:	bb23      	cbnz	r3, 800583e <HAL_I2C_EV_IRQHandler+0x9ce>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80057f4:	2d2a      	cmp	r5, #42	; 0x2a
 80057f6:	d027      	beq.n	8005848 <HAL_I2C_EV_IRQHandler+0x9d8>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80057f8:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80057fc:	b2db      	uxtb	r3, r3
 80057fe:	2b28      	cmp	r3, #40	; 0x28
 8005800:	d02b      	beq.n	800585a <HAL_I2C_EV_IRQHandler+0x9ea>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005802:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005804:	2b22      	cmp	r3, #34	; 0x22
 8005806:	d002      	beq.n	800580e <HAL_I2C_EV_IRQHandler+0x99e>
 8005808:	2d22      	cmp	r5, #34	; 0x22
 800580a:	f47f ab62 	bne.w	8004ed2 <HAL_I2C_EV_IRQHandler+0x62>
        hi2c->PreviousState = I2C_STATE_NONE;
 800580e:	2300      	movs	r3, #0
 8005810:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005812:	2220      	movs	r2, #32
 8005814:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005818:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800581c:	4620      	mov	r0, r4
 800581e:	f7ff f986 	bl	8004b2e <HAL_I2C_SlaveRxCpltCallback>
 8005822:	f7ff bb56 	b.w	8004ed2 <HAL_I2C_EV_IRQHandler+0x62>
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005826:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005828:	4a45      	ldr	r2, [pc, #276]	; (8005940 <HAL_I2C_EV_IRQHandler+0xad0>)
 800582a:	635a      	str	r2, [r3, #52]	; 0x34
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800582c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800582e:	f7fd ff2f 	bl	8003690 <HAL_DMA_Abort_IT>
 8005832:	2800      	cmp	r0, #0
 8005834:	d0b4      	beq.n	80057a0 <HAL_I2C_EV_IRQHandler+0x930>
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005836:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8005838:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800583a:	4798      	blx	r3
 800583c:	e7b0      	b.n	80057a0 <HAL_I2C_EV_IRQHandler+0x930>
    I2C_ITError(hi2c);
 800583e:	4620      	mov	r0, r4
 8005840:	f7ff fa56 	bl	8004cf0 <I2C_ITError>
 8005844:	f7ff bb45 	b.w	8004ed2 <HAL_I2C_EV_IRQHandler+0x62>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005848:	2300      	movs	r3, #0
 800584a:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800584c:	2328      	movs	r3, #40	; 0x28
 800584e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005852:	4620      	mov	r0, r4
 8005854:	f7ff f96b 	bl	8004b2e <HAL_I2C_SlaveRxCpltCallback>
 8005858:	e7ce      	b.n	80057f8 <HAL_I2C_EV_IRQHandler+0x988>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800585a:	4b3a      	ldr	r3, [pc, #232]	; (8005944 <HAL_I2C_EV_IRQHandler+0xad4>)
 800585c:	62e3      	str	r3, [r4, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800585e:	2300      	movs	r3, #0
 8005860:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005862:	2220      	movs	r2, #32
 8005864:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005868:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800586c:	4620      	mov	r0, r4
 800586e:	f7ff f960 	bl	8004b32 <HAL_I2C_ListenCpltCallback>
 8005872:	f7ff bb2e 	b.w	8004ed2 <HAL_I2C_EV_IRQHandler+0x62>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005876:	f012 0f80 	tst.w	r2, #128	; 0x80
 800587a:	d02e      	beq.n	80058da <HAL_I2C_EV_IRQHandler+0xa6a>
 800587c:	f410 6f80 	tst.w	r0, #1024	; 0x400
 8005880:	d02b      	beq.n	80058da <HAL_I2C_EV_IRQHandler+0xa6a>
 8005882:	f012 0f04 	tst.w	r2, #4
 8005886:	d12c      	bne.n	80058e2 <HAL_I2C_EV_IRQHandler+0xa72>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005888:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 800588c:	b2d1      	uxtb	r1, r2
  if (hi2c->XferCount != 0U)
 800588e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005890:	b292      	uxth	r2, r2
 8005892:	2a00      	cmp	r2, #0
 8005894:	f43f ab1d 	beq.w	8004ed2 <HAL_I2C_EV_IRQHandler+0x62>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005898:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800589a:	7812      	ldrb	r2, [r2, #0]
 800589c:	611a      	str	r2, [r3, #16]
    hi2c->pBuffPtr++;
 800589e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80058a0:	3301      	adds	r3, #1
 80058a2:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 80058a4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80058a6:	3b01      	subs	r3, #1
 80058a8:	b29b      	uxth	r3, r3
 80058aa:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80058ac:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80058ae:	b29b      	uxth	r3, r3
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	f47f ab0e 	bne.w	8004ed2 <HAL_I2C_EV_IRQHandler+0x62>
 80058b6:	2929      	cmp	r1, #41	; 0x29
 80058b8:	f47f ab0b 	bne.w	8004ed2 <HAL_I2C_EV_IRQHandler+0x62>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80058bc:	6822      	ldr	r2, [r4, #0]
 80058be:	6853      	ldr	r3, [r2, #4]
 80058c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80058c4:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80058c6:	2321      	movs	r3, #33	; 0x21
 80058c8:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80058ca:	2328      	movs	r3, #40	; 0x28
 80058cc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80058d0:	4620      	mov	r0, r4
 80058d2:	f7ff f92b 	bl	8004b2c <HAL_I2C_SlaveTxCpltCallback>
 80058d6:	f7ff bafc 	b.w	8004ed2 <HAL_I2C_EV_IRQHandler+0x62>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80058da:	f012 0f04 	tst.w	r2, #4
 80058de:	f43f aaf8 	beq.w	8004ed2 <HAL_I2C_EV_IRQHandler+0x62>
 80058e2:	f410 7f00 	tst.w	r0, #512	; 0x200
 80058e6:	f43f aaf4 	beq.w	8004ed2 <HAL_I2C_EV_IRQHandler+0x62>
  if (hi2c->XferCount != 0U)
 80058ea:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80058ec:	b292      	uxth	r2, r2
 80058ee:	2a00      	cmp	r2, #0
 80058f0:	f43f aaef 	beq.w	8004ed2 <HAL_I2C_EV_IRQHandler+0x62>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80058f4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80058f6:	7812      	ldrb	r2, [r2, #0]
 80058f8:	611a      	str	r2, [r3, #16]
    hi2c->pBuffPtr++;
 80058fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80058fc:	3301      	adds	r3, #1
 80058fe:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8005900:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005902:	3b01      	subs	r3, #1
 8005904:	b29b      	uxth	r3, r3
 8005906:	8563      	strh	r3, [r4, #42]	; 0x2a
 8005908:	f7ff bae3 	b.w	8004ed2 <HAL_I2C_EV_IRQHandler+0x62>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800590c:	f012 0f04 	tst.w	r2, #4
 8005910:	f43f aadf 	beq.w	8004ed2 <HAL_I2C_EV_IRQHandler+0x62>
 8005914:	f410 7f00 	tst.w	r0, #512	; 0x200
 8005918:	f43f aadb 	beq.w	8004ed2 <HAL_I2C_EV_IRQHandler+0x62>
  if (hi2c->XferCount != 0U)
 800591c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800591e:	b292      	uxth	r2, r2
 8005920:	2a00      	cmp	r2, #0
 8005922:	f43f aad6 	beq.w	8004ed2 <HAL_I2C_EV_IRQHandler+0x62>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005926:	691a      	ldr	r2, [r3, #16]
 8005928:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800592a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800592c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800592e:	3301      	adds	r3, #1
 8005930:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8005932:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005934:	3b01      	subs	r3, #1
 8005936:	b29b      	uxth	r3, r3
 8005938:	8563      	strh	r3, [r4, #42]	; 0x2a
      }
 800593a:	f7ff baca 	b.w	8004ed2 <HAL_I2C_EV_IRQHandler+0x62>
 800593e:	bf00      	nop
 8005940:	08004c0d 	.word	0x08004c0d
 8005944:	ffff0000 	.word	0xffff0000

08005948 <HAL_I2C_ER_IRQHandler>:
{
 8005948:	b570      	push	{r4, r5, r6, lr}
 800594a:	4604      	mov	r4, r0
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800594c:	6803      	ldr	r3, [r0, #0]
 800594e:	695d      	ldr	r5, [r3, #20]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8005950:	685a      	ldr	r2, [r3, #4]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005952:	f890 103e 	ldrb.w	r1, [r0, #62]	; 0x3e
 8005956:	b2c9      	uxtb	r1, r1
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005958:	f415 7f80 	tst.w	r5, #256	; 0x100
 800595c:	d012      	beq.n	8005984 <HAL_I2C_ER_IRQHandler+0x3c>
 800595e:	f412 7f80 	tst.w	r2, #256	; 0x100
 8005962:	d00f      	beq.n	8005984 <HAL_I2C_ER_IRQHandler+0x3c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005964:	f46f 7080 	mvn.w	r0, #256	; 0x100
 8005968:	6158      	str	r0, [r3, #20]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 800596a:	6820      	ldr	r0, [r4, #0]
 800596c:	6803      	ldr	r3, [r0, #0]
 800596e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005972:	6003      	str	r3, [r0, #0]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005974:	f415 7f00 	tst.w	r5, #512	; 0x200
 8005978:	d125      	bne.n	80059c6 <HAL_I2C_ER_IRQHandler+0x7e>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800597a:	f415 6f80 	tst.w	r5, #1024	; 0x400
 800597e:	d152      	bne.n	8005a26 <HAL_I2C_ER_IRQHandler+0xde>
    error |= HAL_I2C_ERROR_BERR;
 8005980:	2601      	movs	r6, #1
 8005982:	e009      	b.n	8005998 <HAL_I2C_ER_IRQHandler+0x50>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005984:	f415 7300 	ands.w	r3, r5, #512	; 0x200
 8005988:	d01f      	beq.n	80059ca <HAL_I2C_ER_IRQHandler+0x82>
 800598a:	f412 7380 	ands.w	r3, r2, #256	; 0x100
 800598e:	d109      	bne.n	80059a4 <HAL_I2C_ER_IRQHandler+0x5c>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005990:	f415 6680 	ands.w	r6, r5, #1024	; 0x400
 8005994:	f040 80ab 	bne.w	8005aee <HAL_I2C_ER_IRQHandler+0x1a6>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005998:	f415 6f00 	tst.w	r5, #2048	; 0x800
 800599c:	d10f      	bne.n	80059be <HAL_I2C_ER_IRQHandler+0x76>
  if (error != HAL_I2C_ERROR_NONE)
 800599e:	2e00      	cmp	r6, #0
 80059a0:	d13a      	bne.n	8005a18 <HAL_I2C_ER_IRQHandler+0xd0>
}
 80059a2:	bd70      	pop	{r4, r5, r6, pc}
 80059a4:	2600      	movs	r6, #0
    error |= HAL_I2C_ERROR_ARLO;
 80059a6:	f046 0602 	orr.w	r6, r6, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80059aa:	6823      	ldr	r3, [r4, #0]
 80059ac:	f46f 7000 	mvn.w	r0, #512	; 0x200
 80059b0:	6158      	str	r0, [r3, #20]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80059b2:	f415 6f80 	tst.w	r5, #1024	; 0x400
 80059b6:	d10f      	bne.n	80059d8 <HAL_I2C_ER_IRQHandler+0x90>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80059b8:	f415 6f00 	tst.w	r5, #2048	; 0x800
 80059bc:	d02c      	beq.n	8005a18 <HAL_I2C_ER_IRQHandler+0xd0>
 80059be:	f412 7f80 	tst.w	r2, #256	; 0x100
 80059c2:	d0ec      	beq.n	800599e <HAL_I2C_ER_IRQHandler+0x56>
 80059c4:	e022      	b.n	8005a0c <HAL_I2C_ER_IRQHandler+0xc4>
    error |= HAL_I2C_ERROR_BERR;
 80059c6:	2601      	movs	r6, #1
 80059c8:	e7ed      	b.n	80059a6 <HAL_I2C_ER_IRQHandler+0x5e>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80059ca:	f415 6680 	ands.w	r6, r5, #1024	; 0x400
 80059ce:	d0e3      	beq.n	8005998 <HAL_I2C_ER_IRQHandler+0x50>
 80059d0:	f412 7680 	ands.w	r6, r2, #256	; 0x100
 80059d4:	d0e3      	beq.n	800599e <HAL_I2C_ER_IRQHandler+0x56>
 80059d6:	461e      	mov	r6, r3
    tmp2 = hi2c->XferCount;
 80059d8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80059da:	b29b      	uxth	r3, r3
    tmp3 = hi2c->State;
 80059dc:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 80059e0:	b2d2      	uxtb	r2, r2
    tmp4 = hi2c->PreviousState;
 80059e2:	6b20      	ldr	r0, [r4, #48]	; 0x30
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80059e4:	2920      	cmp	r1, #32
 80059e6:	d020      	beq.n	8005a2a <HAL_I2C_ER_IRQHandler+0xe2>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80059e8:	6823      	ldr	r3, [r4, #0]
 80059ea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80059ee:	615a      	str	r2, [r3, #20]
      error |= HAL_I2C_ERROR_AF;
 80059f0:	f046 0604 	orr.w	r6, r6, #4
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80059f4:	2910      	cmp	r1, #16
 80059f6:	d001      	beq.n	80059fc <HAL_I2C_ER_IRQHandler+0xb4>
 80059f8:	2940      	cmp	r1, #64	; 0x40
 80059fa:	d104      	bne.n	8005a06 <HAL_I2C_ER_IRQHandler+0xbe>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059fc:	6822      	ldr	r2, [r4, #0]
 80059fe:	6813      	ldr	r3, [r2, #0]
 8005a00:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005a04:	6013      	str	r3, [r2, #0]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005a06:	f415 6f00 	tst.w	r5, #2048	; 0x800
 8005a0a:	d005      	beq.n	8005a18 <HAL_I2C_ER_IRQHandler+0xd0>
    error |= HAL_I2C_ERROR_OVR;
 8005a0c:	f046 0608 	orr.w	r6, r6, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005a10:	6823      	ldr	r3, [r4, #0]
 8005a12:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8005a16:	615a      	str	r2, [r3, #20]
    hi2c->ErrorCode |= error;
 8005a18:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005a1a:	4333      	orrs	r3, r6
 8005a1c:	6423      	str	r3, [r4, #64]	; 0x40
    I2C_ITError(hi2c);
 8005a1e:	4620      	mov	r0, r4
 8005a20:	f7ff f966 	bl	8004cf0 <I2C_ITError>
}
 8005a24:	e7bd      	b.n	80059a2 <HAL_I2C_ER_IRQHandler+0x5a>
    error |= HAL_I2C_ERROR_BERR;
 8005a26:	2601      	movs	r6, #1
 8005a28:	e7d6      	b.n	80059d8 <HAL_I2C_ER_IRQHandler+0x90>
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8005a2a:	b92b      	cbnz	r3, 8005a38 <HAL_I2C_ER_IRQHandler+0xf0>
 8005a2c:	f002 03f7 	and.w	r3, r2, #247	; 0xf7
 8005a30:	2b21      	cmp	r3, #33	; 0x21
 8005a32:	d00a      	beq.n	8005a4a <HAL_I2C_ER_IRQHandler+0x102>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8005a34:	2a28      	cmp	r2, #40	; 0x28
 8005a36:	d006      	beq.n	8005a46 <HAL_I2C_ER_IRQHandler+0xfe>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a38:	6823      	ldr	r3, [r4, #0]
 8005a3a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005a3e:	615a      	str	r2, [r3, #20]
      error |= HAL_I2C_ERROR_AF;
 8005a40:	f046 0604 	orr.w	r6, r6, #4
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005a44:	e7df      	b.n	8005a06 <HAL_I2C_ER_IRQHandler+0xbe>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8005a46:	2821      	cmp	r0, #33	; 0x21
 8005a48:	d1f6      	bne.n	8005a38 <HAL_I2C_ER_IRQHandler+0xf0>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005a4a:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8005a4e:	b2db      	uxtb	r3, r3
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005a50:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8005a52:	2a08      	cmp	r2, #8
 8005a54:	d001      	beq.n	8005a5a <HAL_I2C_ER_IRQHandler+0x112>
 8005a56:	2a20      	cmp	r2, #32
 8005a58:	d101      	bne.n	8005a5e <HAL_I2C_ER_IRQHandler+0x116>
 8005a5a:	2b28      	cmp	r3, #40	; 0x28
 8005a5c:	d009      	beq.n	8005a72 <HAL_I2C_ER_IRQHandler+0x12a>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005a5e:	2b21      	cmp	r3, #33	; 0x21
 8005a60:	d022      	beq.n	8005aa8 <HAL_I2C_ER_IRQHandler+0x160>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a62:	6823      	ldr	r3, [r4, #0]
 8005a64:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005a68:	615a      	str	r2, [r3, #20]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005a6a:	f415 6f00 	tst.w	r5, #2048	; 0x800
 8005a6e:	d096      	beq.n	800599e <HAL_I2C_ER_IRQHandler+0x56>
 8005a70:	e7cc      	b.n	8005a0c <HAL_I2C_ER_IRQHandler+0xc4>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005a72:	4b20      	ldr	r3, [pc, #128]	; (8005af4 <HAL_I2C_ER_IRQHandler+0x1ac>)
 8005a74:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005a76:	6822      	ldr	r2, [r4, #0]
 8005a78:	6853      	ldr	r3, [r2, #4]
 8005a7a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005a7e:	6053      	str	r3, [r2, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a80:	6823      	ldr	r3, [r4, #0]
 8005a82:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005a86:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a88:	6822      	ldr	r2, [r4, #0]
 8005a8a:	6813      	ldr	r3, [r2, #0]
 8005a8c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005a90:	6013      	str	r3, [r2, #0]
    hi2c->PreviousState = I2C_STATE_NONE;
 8005a92:	2300      	movs	r3, #0
 8005a94:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005a96:	2220      	movs	r2, #32
 8005a98:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005a9c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 8005aa0:	4620      	mov	r0, r4
 8005aa2:	f7ff f846 	bl	8004b32 <HAL_I2C_ListenCpltCallback>
 8005aa6:	e7e0      	b.n	8005a6a <HAL_I2C_ER_IRQHandler+0x122>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005aa8:	4b12      	ldr	r3, [pc, #72]	; (8005af4 <HAL_I2C_ER_IRQHandler+0x1ac>)
 8005aaa:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005aac:	2321      	movs	r3, #33	; 0x21
 8005aae:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005ab0:	2320      	movs	r3, #32
 8005ab2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005abc:	6822      	ldr	r2, [r4, #0]
 8005abe:	6853      	ldr	r3, [r2, #4]
 8005ac0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005ac4:	6053      	str	r3, [r2, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ac6:	6823      	ldr	r3, [r4, #0]
 8005ac8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005acc:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ace:	6822      	ldr	r2, [r4, #0]
 8005ad0:	6813      	ldr	r3, [r2, #0]
 8005ad2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ad6:	6013      	str	r3, [r2, #0]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8005ad8:	6823      	ldr	r3, [r4, #0]
 8005ada:	695a      	ldr	r2, [r3, #20]
 8005adc:	f012 0f80 	tst.w	r2, #128	; 0x80
    hi2c->Instance->DR = 0x00U;
 8005ae0:	bf1c      	itt	ne
 8005ae2:	2200      	movne	r2, #0
 8005ae4:	611a      	strne	r2, [r3, #16]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005ae6:	4620      	mov	r0, r4
 8005ae8:	f7ff f820 	bl	8004b2c <HAL_I2C_SlaveTxCpltCallback>
 8005aec:	e7bd      	b.n	8005a6a <HAL_I2C_ER_IRQHandler+0x122>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005aee:	461e      	mov	r6, r3
 8005af0:	e755      	b.n	800599e <HAL_I2C_ER_IRQHandler+0x56>
 8005af2:	bf00      	nop
 8005af4:	ffff0000 	.word	0xffff0000

08005af8 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005af8:	2800      	cmp	r0, #0
 8005afa:	f000 8201 	beq.w	8005f00 <HAL_RCC_OscConfig+0x408>
{
 8005afe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b02:	b082      	sub	sp, #8
 8005b04:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b06:	6803      	ldr	r3, [r0, #0]
 8005b08:	f013 0f01 	tst.w	r3, #1
 8005b0c:	d02c      	beq.n	8005b68 <HAL_RCC_OscConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005b0e:	4b9f      	ldr	r3, [pc, #636]	; (8005d8c <HAL_RCC_OscConfig+0x294>)
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	f003 030c 	and.w	r3, r3, #12
 8005b16:	2b04      	cmp	r3, #4
 8005b18:	d01d      	beq.n	8005b56 <HAL_RCC_OscConfig+0x5e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005b1a:	4b9c      	ldr	r3, [pc, #624]	; (8005d8c <HAL_RCC_OscConfig+0x294>)
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	f003 030c 	and.w	r3, r3, #12
 8005b22:	2b08      	cmp	r3, #8
 8005b24:	d012      	beq.n	8005b4c <HAL_RCC_OscConfig+0x54>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b26:	6863      	ldr	r3, [r4, #4]
 8005b28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b2c:	d041      	beq.n	8005bb2 <HAL_RCC_OscConfig+0xba>
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d155      	bne.n	8005bde <HAL_RCC_OscConfig+0xe6>
 8005b32:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005b36:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8005b3a:	681a      	ldr	r2, [r3, #0]
 8005b3c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005b40:	601a      	str	r2, [r3, #0]
 8005b42:	681a      	ldr	r2, [r3, #0]
 8005b44:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005b48:	601a      	str	r2, [r3, #0]
 8005b4a:	e037      	b.n	8005bbc <HAL_RCC_OscConfig+0xc4>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005b4c:	4b8f      	ldr	r3, [pc, #572]	; (8005d8c <HAL_RCC_OscConfig+0x294>)
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8005b54:	d0e7      	beq.n	8005b26 <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b56:	4b8d      	ldr	r3, [pc, #564]	; (8005d8c <HAL_RCC_OscConfig+0x294>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8005b5e:	d003      	beq.n	8005b68 <HAL_RCC_OscConfig+0x70>
 8005b60:	6863      	ldr	r3, [r4, #4]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	f000 81ce 	beq.w	8005f04 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b68:	6823      	ldr	r3, [r4, #0]
 8005b6a:	f013 0f02 	tst.w	r3, #2
 8005b6e:	d075      	beq.n	8005c5c <HAL_RCC_OscConfig+0x164>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005b70:	4b86      	ldr	r3, [pc, #536]	; (8005d8c <HAL_RCC_OscConfig+0x294>)
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	f013 0f0c 	tst.w	r3, #12
 8005b78:	d05f      	beq.n	8005c3a <HAL_RCC_OscConfig+0x142>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005b7a:	4b84      	ldr	r3, [pc, #528]	; (8005d8c <HAL_RCC_OscConfig+0x294>)
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	f003 030c 	and.w	r3, r3, #12
 8005b82:	2b08      	cmp	r3, #8
 8005b84:	d054      	beq.n	8005c30 <HAL_RCC_OscConfig+0x138>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005b86:	6923      	ldr	r3, [r4, #16]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	f000 808a 	beq.w	8005ca2 <HAL_RCC_OscConfig+0x1aa>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005b8e:	4b80      	ldr	r3, [pc, #512]	; (8005d90 <HAL_RCC_OscConfig+0x298>)
 8005b90:	2201      	movs	r2, #1
 8005b92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b94:	f7fd fcea 	bl	800356c <HAL_GetTick>
 8005b98:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b9a:	4e7c      	ldr	r6, [pc, #496]	; (8005d8c <HAL_RCC_OscConfig+0x294>)
 8005b9c:	6833      	ldr	r3, [r6, #0]
 8005b9e:	f013 0f02 	tst.w	r3, #2
 8005ba2:	d175      	bne.n	8005c90 <HAL_RCC_OscConfig+0x198>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ba4:	f7fd fce2 	bl	800356c <HAL_GetTick>
 8005ba8:	1b40      	subs	r0, r0, r5
 8005baa:	2802      	cmp	r0, #2
 8005bac:	d9f6      	bls.n	8005b9c <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_TIMEOUT;
 8005bae:	2003      	movs	r0, #3
 8005bb0:	e1ad      	b.n	8005f0e <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005bb2:	4a76      	ldr	r2, [pc, #472]	; (8005d8c <HAL_RCC_OscConfig+0x294>)
 8005bb4:	6813      	ldr	r3, [r2, #0]
 8005bb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bba:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005bbc:	6863      	ldr	r3, [r4, #4]
 8005bbe:	b343      	cbz	r3, 8005c12 <HAL_RCC_OscConfig+0x11a>
        tickstart = HAL_GetTick();
 8005bc0:	f7fd fcd4 	bl	800356c <HAL_GetTick>
 8005bc4:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bc6:	4e71      	ldr	r6, [pc, #452]	; (8005d8c <HAL_RCC_OscConfig+0x294>)
 8005bc8:	6833      	ldr	r3, [r6, #0]
 8005bca:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8005bce:	d1cb      	bne.n	8005b68 <HAL_RCC_OscConfig+0x70>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005bd0:	f7fd fccc 	bl	800356c <HAL_GetTick>
 8005bd4:	1b40      	subs	r0, r0, r5
 8005bd6:	2864      	cmp	r0, #100	; 0x64
 8005bd8:	d9f6      	bls.n	8005bc8 <HAL_RCC_OscConfig+0xd0>
            return HAL_TIMEOUT;
 8005bda:	2003      	movs	r0, #3
 8005bdc:	e197      	b.n	8005f0e <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005bde:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005be2:	d009      	beq.n	8005bf8 <HAL_RCC_OscConfig+0x100>
 8005be4:	4b69      	ldr	r3, [pc, #420]	; (8005d8c <HAL_RCC_OscConfig+0x294>)
 8005be6:	681a      	ldr	r2, [r3, #0]
 8005be8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005bec:	601a      	str	r2, [r3, #0]
 8005bee:	681a      	ldr	r2, [r3, #0]
 8005bf0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005bf4:	601a      	str	r2, [r3, #0]
 8005bf6:	e7e1      	b.n	8005bbc <HAL_RCC_OscConfig+0xc4>
 8005bf8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005bfc:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8005c00:	681a      	ldr	r2, [r3, #0]
 8005c02:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8005c06:	601a      	str	r2, [r3, #0]
 8005c08:	681a      	ldr	r2, [r3, #0]
 8005c0a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005c0e:	601a      	str	r2, [r3, #0]
 8005c10:	e7d4      	b.n	8005bbc <HAL_RCC_OscConfig+0xc4>
        tickstart = HAL_GetTick();
 8005c12:	f7fd fcab 	bl	800356c <HAL_GetTick>
 8005c16:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c18:	4e5c      	ldr	r6, [pc, #368]	; (8005d8c <HAL_RCC_OscConfig+0x294>)
 8005c1a:	6833      	ldr	r3, [r6, #0]
 8005c1c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8005c20:	d0a2      	beq.n	8005b68 <HAL_RCC_OscConfig+0x70>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c22:	f7fd fca3 	bl	800356c <HAL_GetTick>
 8005c26:	1b40      	subs	r0, r0, r5
 8005c28:	2864      	cmp	r0, #100	; 0x64
 8005c2a:	d9f6      	bls.n	8005c1a <HAL_RCC_OscConfig+0x122>
            return HAL_TIMEOUT;
 8005c2c:	2003      	movs	r0, #3
 8005c2e:	e16e      	b.n	8005f0e <HAL_RCC_OscConfig+0x416>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005c30:	4b56      	ldr	r3, [pc, #344]	; (8005d8c <HAL_RCC_OscConfig+0x294>)
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8005c38:	d1a5      	bne.n	8005b86 <HAL_RCC_OscConfig+0x8e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c3a:	4b54      	ldr	r3, [pc, #336]	; (8005d8c <HAL_RCC_OscConfig+0x294>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f013 0f02 	tst.w	r3, #2
 8005c42:	d003      	beq.n	8005c4c <HAL_RCC_OscConfig+0x154>
 8005c44:	6923      	ldr	r3, [r4, #16]
 8005c46:	2b01      	cmp	r3, #1
 8005c48:	f040 815e 	bne.w	8005f08 <HAL_RCC_OscConfig+0x410>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c4c:	4a4f      	ldr	r2, [pc, #316]	; (8005d8c <HAL_RCC_OscConfig+0x294>)
 8005c4e:	6813      	ldr	r3, [r2, #0]
 8005c50:	6961      	ldr	r1, [r4, #20]
 8005c52:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005c56:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005c5a:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c5c:	6823      	ldr	r3, [r4, #0]
 8005c5e:	f013 0f08 	tst.w	r3, #8
 8005c62:	d03d      	beq.n	8005ce0 <HAL_RCC_OscConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005c64:	69a3      	ldr	r3, [r4, #24]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d066      	beq.n	8005d38 <HAL_RCC_OscConfig+0x240>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c6a:	4b49      	ldr	r3, [pc, #292]	; (8005d90 <HAL_RCC_OscConfig+0x298>)
 8005c6c:	2201      	movs	r2, #1
 8005c6e:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c72:	f7fd fc7b 	bl	800356c <HAL_GetTick>
 8005c76:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c78:	4e44      	ldr	r6, [pc, #272]	; (8005d8c <HAL_RCC_OscConfig+0x294>)
 8005c7a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005c7c:	f013 0f02 	tst.w	r3, #2
 8005c80:	d121      	bne.n	8005cc6 <HAL_RCC_OscConfig+0x1ce>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c82:	f7fd fc73 	bl	800356c <HAL_GetTick>
 8005c86:	1b40      	subs	r0, r0, r5
 8005c88:	2802      	cmp	r0, #2
 8005c8a:	d9f6      	bls.n	8005c7a <HAL_RCC_OscConfig+0x182>
        {
          return HAL_TIMEOUT;
 8005c8c:	2003      	movs	r0, #3
 8005c8e:	e13e      	b.n	8005f0e <HAL_RCC_OscConfig+0x416>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c90:	4a3e      	ldr	r2, [pc, #248]	; (8005d8c <HAL_RCC_OscConfig+0x294>)
 8005c92:	6813      	ldr	r3, [r2, #0]
 8005c94:	6961      	ldr	r1, [r4, #20]
 8005c96:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005c9a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005c9e:	6013      	str	r3, [r2, #0]
 8005ca0:	e7dc      	b.n	8005c5c <HAL_RCC_OscConfig+0x164>
        __HAL_RCC_HSI_DISABLE();
 8005ca2:	4b3b      	ldr	r3, [pc, #236]	; (8005d90 <HAL_RCC_OscConfig+0x298>)
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8005ca8:	f7fd fc60 	bl	800356c <HAL_GetTick>
 8005cac:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005cae:	4e37      	ldr	r6, [pc, #220]	; (8005d8c <HAL_RCC_OscConfig+0x294>)
 8005cb0:	6833      	ldr	r3, [r6, #0]
 8005cb2:	f013 0f02 	tst.w	r3, #2
 8005cb6:	d0d1      	beq.n	8005c5c <HAL_RCC_OscConfig+0x164>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005cb8:	f7fd fc58 	bl	800356c <HAL_GetTick>
 8005cbc:	1b40      	subs	r0, r0, r5
 8005cbe:	2802      	cmp	r0, #2
 8005cc0:	d9f6      	bls.n	8005cb0 <HAL_RCC_OscConfig+0x1b8>
            return HAL_TIMEOUT;
 8005cc2:	2003      	movs	r0, #3
 8005cc4:	e123      	b.n	8005f0e <HAL_RCC_OscConfig+0x416>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005cc6:	4b33      	ldr	r3, [pc, #204]	; (8005d94 <HAL_RCC_OscConfig+0x29c>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a33      	ldr	r2, [pc, #204]	; (8005d98 <HAL_RCC_OscConfig+0x2a0>)
 8005ccc:	fba2 2303 	umull	r2, r3, r2, r3
 8005cd0:	0a5b      	lsrs	r3, r3, #9
 8005cd2:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8005cd4:	bf00      	nop
  }
  while (Delay --);
 8005cd6:	9b01      	ldr	r3, [sp, #4]
 8005cd8:	1e5a      	subs	r2, r3, #1
 8005cda:	9201      	str	r2, [sp, #4]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d1f9      	bne.n	8005cd4 <HAL_RCC_OscConfig+0x1dc>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ce0:	6823      	ldr	r3, [r4, #0]
 8005ce2:	f013 0f04 	tst.w	r3, #4
 8005ce6:	f000 809b 	beq.w	8005e20 <HAL_RCC_OscConfig+0x328>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005cea:	4b28      	ldr	r3, [pc, #160]	; (8005d8c <HAL_RCC_OscConfig+0x294>)
 8005cec:	69db      	ldr	r3, [r3, #28]
 8005cee:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8005cf2:	d134      	bne.n	8005d5e <HAL_RCC_OscConfig+0x266>
      __HAL_RCC_PWR_CLK_ENABLE();
 8005cf4:	4b25      	ldr	r3, [pc, #148]	; (8005d8c <HAL_RCC_OscConfig+0x294>)
 8005cf6:	69da      	ldr	r2, [r3, #28]
 8005cf8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005cfc:	61da      	str	r2, [r3, #28]
 8005cfe:	69db      	ldr	r3, [r3, #28]
 8005d00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d04:	9300      	str	r3, [sp, #0]
 8005d06:	9b00      	ldr	r3, [sp, #0]
      pwrclkchanged = SET;
 8005d08:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d0a:	4b24      	ldr	r3, [pc, #144]	; (8005d9c <HAL_RCC_OscConfig+0x2a4>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005d12:	d026      	beq.n	8005d62 <HAL_RCC_OscConfig+0x26a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d14:	68e3      	ldr	r3, [r4, #12]
 8005d16:	2b01      	cmp	r3, #1
 8005d18:	d042      	beq.n	8005da0 <HAL_RCC_OscConfig+0x2a8>
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d158      	bne.n	8005dd0 <HAL_RCC_OscConfig+0x2d8>
 8005d1e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005d22:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8005d26:	6a1a      	ldr	r2, [r3, #32]
 8005d28:	f022 0201 	bic.w	r2, r2, #1
 8005d2c:	621a      	str	r2, [r3, #32]
 8005d2e:	6a1a      	ldr	r2, [r3, #32]
 8005d30:	f022 0204 	bic.w	r2, r2, #4
 8005d34:	621a      	str	r2, [r3, #32]
 8005d36:	e038      	b.n	8005daa <HAL_RCC_OscConfig+0x2b2>
      __HAL_RCC_LSI_DISABLE();
 8005d38:	4b15      	ldr	r3, [pc, #84]	; (8005d90 <HAL_RCC_OscConfig+0x298>)
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8005d40:	f7fd fc14 	bl	800356c <HAL_GetTick>
 8005d44:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d46:	4e11      	ldr	r6, [pc, #68]	; (8005d8c <HAL_RCC_OscConfig+0x294>)
 8005d48:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005d4a:	f013 0f02 	tst.w	r3, #2
 8005d4e:	d0c7      	beq.n	8005ce0 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d50:	f7fd fc0c 	bl	800356c <HAL_GetTick>
 8005d54:	1b40      	subs	r0, r0, r5
 8005d56:	2802      	cmp	r0, #2
 8005d58:	d9f6      	bls.n	8005d48 <HAL_RCC_OscConfig+0x250>
          return HAL_TIMEOUT;
 8005d5a:	2003      	movs	r0, #3
 8005d5c:	e0d7      	b.n	8005f0e <HAL_RCC_OscConfig+0x416>
    FlagStatus       pwrclkchanged = RESET;
 8005d5e:	2500      	movs	r5, #0
 8005d60:	e7d3      	b.n	8005d0a <HAL_RCC_OscConfig+0x212>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005d62:	4a0e      	ldr	r2, [pc, #56]	; (8005d9c <HAL_RCC_OscConfig+0x2a4>)
 8005d64:	6813      	ldr	r3, [r2, #0]
 8005d66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d6a:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8005d6c:	f7fd fbfe 	bl	800356c <HAL_GetTick>
 8005d70:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d72:	4f0a      	ldr	r7, [pc, #40]	; (8005d9c <HAL_RCC_OscConfig+0x2a4>)
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005d7a:	d1cb      	bne.n	8005d14 <HAL_RCC_OscConfig+0x21c>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d7c:	f7fd fbf6 	bl	800356c <HAL_GetTick>
 8005d80:	1b80      	subs	r0, r0, r6
 8005d82:	2864      	cmp	r0, #100	; 0x64
 8005d84:	d9f6      	bls.n	8005d74 <HAL_RCC_OscConfig+0x27c>
          return HAL_TIMEOUT;
 8005d86:	2003      	movs	r0, #3
 8005d88:	e0c1      	b.n	8005f0e <HAL_RCC_OscConfig+0x416>
 8005d8a:	bf00      	nop
 8005d8c:	40021000 	.word	0x40021000
 8005d90:	42420000 	.word	0x42420000
 8005d94:	20000000 	.word	0x20000000
 8005d98:	10624dd3 	.word	0x10624dd3
 8005d9c:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005da0:	4a5e      	ldr	r2, [pc, #376]	; (8005f1c <HAL_RCC_OscConfig+0x424>)
 8005da2:	6a13      	ldr	r3, [r2, #32]
 8005da4:	f043 0301 	orr.w	r3, r3, #1
 8005da8:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005daa:	68e3      	ldr	r3, [r4, #12]
 8005dac:	b333      	cbz	r3, 8005dfc <HAL_RCC_OscConfig+0x304>
      tickstart = HAL_GetTick();
 8005dae:	f7fd fbdd 	bl	800356c <HAL_GetTick>
 8005db2:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005db4:	4f59      	ldr	r7, [pc, #356]	; (8005f1c <HAL_RCC_OscConfig+0x424>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005db6:	f241 3888 	movw	r8, #5000	; 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005dba:	6a3b      	ldr	r3, [r7, #32]
 8005dbc:	f013 0f02 	tst.w	r3, #2
 8005dc0:	d12d      	bne.n	8005e1e <HAL_RCC_OscConfig+0x326>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005dc2:	f7fd fbd3 	bl	800356c <HAL_GetTick>
 8005dc6:	1b80      	subs	r0, r0, r6
 8005dc8:	4540      	cmp	r0, r8
 8005dca:	d9f6      	bls.n	8005dba <HAL_RCC_OscConfig+0x2c2>
          return HAL_TIMEOUT;
 8005dcc:	2003      	movs	r0, #3
 8005dce:	e09e      	b.n	8005f0e <HAL_RCC_OscConfig+0x416>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005dd0:	2b05      	cmp	r3, #5
 8005dd2:	d009      	beq.n	8005de8 <HAL_RCC_OscConfig+0x2f0>
 8005dd4:	4b51      	ldr	r3, [pc, #324]	; (8005f1c <HAL_RCC_OscConfig+0x424>)
 8005dd6:	6a1a      	ldr	r2, [r3, #32]
 8005dd8:	f022 0201 	bic.w	r2, r2, #1
 8005ddc:	621a      	str	r2, [r3, #32]
 8005dde:	6a1a      	ldr	r2, [r3, #32]
 8005de0:	f022 0204 	bic.w	r2, r2, #4
 8005de4:	621a      	str	r2, [r3, #32]
 8005de6:	e7e0      	b.n	8005daa <HAL_RCC_OscConfig+0x2b2>
 8005de8:	4b4c      	ldr	r3, [pc, #304]	; (8005f1c <HAL_RCC_OscConfig+0x424>)
 8005dea:	6a1a      	ldr	r2, [r3, #32]
 8005dec:	f042 0204 	orr.w	r2, r2, #4
 8005df0:	621a      	str	r2, [r3, #32]
 8005df2:	6a1a      	ldr	r2, [r3, #32]
 8005df4:	f042 0201 	orr.w	r2, r2, #1
 8005df8:	621a      	str	r2, [r3, #32]
 8005dfa:	e7d6      	b.n	8005daa <HAL_RCC_OscConfig+0x2b2>
      tickstart = HAL_GetTick();
 8005dfc:	f7fd fbb6 	bl	800356c <HAL_GetTick>
 8005e00:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e02:	4f46      	ldr	r7, [pc, #280]	; (8005f1c <HAL_RCC_OscConfig+0x424>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e04:	f241 3888 	movw	r8, #5000	; 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e08:	6a3b      	ldr	r3, [r7, #32]
 8005e0a:	f013 0f02 	tst.w	r3, #2
 8005e0e:	d006      	beq.n	8005e1e <HAL_RCC_OscConfig+0x326>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e10:	f7fd fbac 	bl	800356c <HAL_GetTick>
 8005e14:	1b80      	subs	r0, r0, r6
 8005e16:	4540      	cmp	r0, r8
 8005e18:	d9f6      	bls.n	8005e08 <HAL_RCC_OscConfig+0x310>
          return HAL_TIMEOUT;
 8005e1a:	2003      	movs	r0, #3
 8005e1c:	e077      	b.n	8005f0e <HAL_RCC_OscConfig+0x416>
    if (pwrclkchanged == SET)
 8005e1e:	b9e5      	cbnz	r5, 8005e5a <HAL_RCC_OscConfig+0x362>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005e20:	69e3      	ldr	r3, [r4, #28]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d072      	beq.n	8005f0c <HAL_RCC_OscConfig+0x414>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005e26:	4a3d      	ldr	r2, [pc, #244]	; (8005f1c <HAL_RCC_OscConfig+0x424>)
 8005e28:	6852      	ldr	r2, [r2, #4]
 8005e2a:	f002 020c 	and.w	r2, r2, #12
 8005e2e:	2a08      	cmp	r2, #8
 8005e30:	d056      	beq.n	8005ee0 <HAL_RCC_OscConfig+0x3e8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005e32:	2b02      	cmp	r3, #2
 8005e34:	d017      	beq.n	8005e66 <HAL_RCC_OscConfig+0x36e>
        __HAL_RCC_PLL_DISABLE();
 8005e36:	4b3a      	ldr	r3, [pc, #232]	; (8005f20 <HAL_RCC_OscConfig+0x428>)
 8005e38:	2200      	movs	r2, #0
 8005e3a:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8005e3c:	f7fd fb96 	bl	800356c <HAL_GetTick>
 8005e40:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005e42:	4d36      	ldr	r5, [pc, #216]	; (8005f1c <HAL_RCC_OscConfig+0x424>)
 8005e44:	682b      	ldr	r3, [r5, #0]
 8005e46:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8005e4a:	d047      	beq.n	8005edc <HAL_RCC_OscConfig+0x3e4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e4c:	f7fd fb8e 	bl	800356c <HAL_GetTick>
 8005e50:	1b00      	subs	r0, r0, r4
 8005e52:	2802      	cmp	r0, #2
 8005e54:	d9f6      	bls.n	8005e44 <HAL_RCC_OscConfig+0x34c>
            return HAL_TIMEOUT;
 8005e56:	2003      	movs	r0, #3
 8005e58:	e059      	b.n	8005f0e <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e5a:	4a30      	ldr	r2, [pc, #192]	; (8005f1c <HAL_RCC_OscConfig+0x424>)
 8005e5c:	69d3      	ldr	r3, [r2, #28]
 8005e5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e62:	61d3      	str	r3, [r2, #28]
 8005e64:	e7dc      	b.n	8005e20 <HAL_RCC_OscConfig+0x328>
        __HAL_RCC_PLL_DISABLE();
 8005e66:	4b2e      	ldr	r3, [pc, #184]	; (8005f20 <HAL_RCC_OscConfig+0x428>)
 8005e68:	2200      	movs	r2, #0
 8005e6a:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8005e6c:	f7fd fb7e 	bl	800356c <HAL_GetTick>
 8005e70:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005e72:	4e2a      	ldr	r6, [pc, #168]	; (8005f1c <HAL_RCC_OscConfig+0x424>)
 8005e74:	6833      	ldr	r3, [r6, #0]
 8005e76:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8005e7a:	d006      	beq.n	8005e8a <HAL_RCC_OscConfig+0x392>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e7c:	f7fd fb76 	bl	800356c <HAL_GetTick>
 8005e80:	1b40      	subs	r0, r0, r5
 8005e82:	2802      	cmp	r0, #2
 8005e84:	d9f6      	bls.n	8005e74 <HAL_RCC_OscConfig+0x37c>
            return HAL_TIMEOUT;
 8005e86:	2003      	movs	r0, #3
 8005e88:	e041      	b.n	8005f0e <HAL_RCC_OscConfig+0x416>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005e8a:	6a23      	ldr	r3, [r4, #32]
 8005e8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e90:	d01a      	beq.n	8005ec8 <HAL_RCC_OscConfig+0x3d0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005e92:	4922      	ldr	r1, [pc, #136]	; (8005f1c <HAL_RCC_OscConfig+0x424>)
 8005e94:	684a      	ldr	r2, [r1, #4]
 8005e96:	6a23      	ldr	r3, [r4, #32]
 8005e98:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005e9a:	4303      	orrs	r3, r0
 8005e9c:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 8005ea4:	4b1e      	ldr	r3, [pc, #120]	; (8005f20 <HAL_RCC_OscConfig+0x428>)
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8005eaa:	f7fd fb5f 	bl	800356c <HAL_GetTick>
 8005eae:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005eb0:	4d1a      	ldr	r5, [pc, #104]	; (8005f1c <HAL_RCC_OscConfig+0x424>)
 8005eb2:	682b      	ldr	r3, [r5, #0]
 8005eb4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8005eb8:	d10e      	bne.n	8005ed8 <HAL_RCC_OscConfig+0x3e0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005eba:	f7fd fb57 	bl	800356c <HAL_GetTick>
 8005ebe:	1b00      	subs	r0, r0, r4
 8005ec0:	2802      	cmp	r0, #2
 8005ec2:	d9f6      	bls.n	8005eb2 <HAL_RCC_OscConfig+0x3ba>
            return HAL_TIMEOUT;
 8005ec4:	2003      	movs	r0, #3
 8005ec6:	e022      	b.n	8005f0e <HAL_RCC_OscConfig+0x416>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005ec8:	4a14      	ldr	r2, [pc, #80]	; (8005f1c <HAL_RCC_OscConfig+0x424>)
 8005eca:	6853      	ldr	r3, [r2, #4]
 8005ecc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005ed0:	68a1      	ldr	r1, [r4, #8]
 8005ed2:	430b      	orrs	r3, r1
 8005ed4:	6053      	str	r3, [r2, #4]
 8005ed6:	e7dc      	b.n	8005e92 <HAL_RCC_OscConfig+0x39a>
  return HAL_OK;
 8005ed8:	2000      	movs	r0, #0
 8005eda:	e018      	b.n	8005f0e <HAL_RCC_OscConfig+0x416>
 8005edc:	2000      	movs	r0, #0
 8005ede:	e016      	b.n	8005f0e <HAL_RCC_OscConfig+0x416>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005ee0:	2b01      	cmp	r3, #1
 8005ee2:	d017      	beq.n	8005f14 <HAL_RCC_OscConfig+0x41c>
        pll_config = RCC->CFGR;
 8005ee4:	4b0d      	ldr	r3, [pc, #52]	; (8005f1c <HAL_RCC_OscConfig+0x424>)
 8005ee6:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ee8:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8005eec:	6a22      	ldr	r2, [r4, #32]
 8005eee:	4291      	cmp	r1, r2
 8005ef0:	d112      	bne.n	8005f18 <HAL_RCC_OscConfig+0x420>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005ef2:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ef6:	6a60      	ldr	r0, [r4, #36]	; 0x24
    return HAL_ERROR;
 8005ef8:	1a18      	subs	r0, r3, r0
 8005efa:	bf18      	it	ne
 8005efc:	2001      	movne	r0, #1
 8005efe:	e006      	b.n	8005f0e <HAL_RCC_OscConfig+0x416>
 8005f00:	2001      	movs	r0, #1
}
 8005f02:	4770      	bx	lr
        return HAL_ERROR;
 8005f04:	2001      	movs	r0, #1
 8005f06:	e002      	b.n	8005f0e <HAL_RCC_OscConfig+0x416>
        return HAL_ERROR;
 8005f08:	2001      	movs	r0, #1
 8005f0a:	e000      	b.n	8005f0e <HAL_RCC_OscConfig+0x416>
  return HAL_OK;
 8005f0c:	2000      	movs	r0, #0
}
 8005f0e:	b002      	add	sp, #8
 8005f10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_ERROR;
 8005f14:	2001      	movs	r0, #1
 8005f16:	e7fa      	b.n	8005f0e <HAL_RCC_OscConfig+0x416>
          return HAL_ERROR;
 8005f18:	2001      	movs	r0, #1
 8005f1a:	e7f8      	b.n	8005f0e <HAL_RCC_OscConfig+0x416>
 8005f1c:	40021000 	.word	0x40021000
 8005f20:	42420000 	.word	0x42420000

08005f24 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8005f24:	4b0f      	ldr	r3, [pc, #60]	; (8005f64 <HAL_RCC_GetSysClockFreq+0x40>)
 8005f26:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8005f28:	f003 020c 	and.w	r2, r3, #12
 8005f2c:	2a08      	cmp	r2, #8
 8005f2e:	d001      	beq.n	8005f34 <HAL_RCC_GetSysClockFreq+0x10>
      sysclockfreq = HSE_VALUE;
 8005f30:	480d      	ldr	r0, [pc, #52]	; (8005f68 <HAL_RCC_GetSysClockFreq+0x44>)
}
 8005f32:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005f34:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8005f38:	490c      	ldr	r1, [pc, #48]	; (8005f6c <HAL_RCC_GetSysClockFreq+0x48>)
 8005f3a:	5c88      	ldrb	r0, [r1, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005f3c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8005f40:	d00b      	beq.n	8005f5a <HAL_RCC_GetSysClockFreq+0x36>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005f42:	4b08      	ldr	r3, [pc, #32]	; (8005f64 <HAL_RCC_GetSysClockFreq+0x40>)
 8005f44:	685b      	ldr	r3, [r3, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005f46:	4a08      	ldr	r2, [pc, #32]	; (8005f68 <HAL_RCC_GetSysClockFreq+0x44>)
 8005f48:	fb02 f000 	mul.w	r0, r2, r0
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005f4c:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8005f50:	4a07      	ldr	r2, [pc, #28]	; (8005f70 <HAL_RCC_GetSysClockFreq+0x4c>)
 8005f52:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005f54:	fbb0 f0f3 	udiv	r0, r0, r3
 8005f58:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005f5a:	4b06      	ldr	r3, [pc, #24]	; (8005f74 <HAL_RCC_GetSysClockFreq+0x50>)
 8005f5c:	fb03 f000 	mul.w	r0, r3, r0
 8005f60:	4770      	bx	lr
 8005f62:	bf00      	nop
 8005f64:	40021000 	.word	0x40021000
 8005f68:	007a1200 	.word	0x007a1200
 8005f6c:	0800cbb8 	.word	0x0800cbb8
 8005f70:	0800cbc8 	.word	0x0800cbc8
 8005f74:	003d0900 	.word	0x003d0900

08005f78 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8005f78:	2800      	cmp	r0, #0
 8005f7a:	f000 80a2 	beq.w	80060c2 <HAL_RCC_ClockConfig+0x14a>
{
 8005f7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f82:	460d      	mov	r5, r1
 8005f84:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005f86:	4b53      	ldr	r3, [pc, #332]	; (80060d4 <HAL_RCC_ClockConfig+0x15c>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f003 0307 	and.w	r3, r3, #7
 8005f8e:	428b      	cmp	r3, r1
 8005f90:	d20b      	bcs.n	8005faa <HAL_RCC_ClockConfig+0x32>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f92:	4a50      	ldr	r2, [pc, #320]	; (80060d4 <HAL_RCC_ClockConfig+0x15c>)
 8005f94:	6813      	ldr	r3, [r2, #0]
 8005f96:	f023 0307 	bic.w	r3, r3, #7
 8005f9a:	430b      	orrs	r3, r1
 8005f9c:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f9e:	6813      	ldr	r3, [r2, #0]
 8005fa0:	f003 0307 	and.w	r3, r3, #7
 8005fa4:	428b      	cmp	r3, r1
 8005fa6:	f040 808e 	bne.w	80060c6 <HAL_RCC_ClockConfig+0x14e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005faa:	6823      	ldr	r3, [r4, #0]
 8005fac:	f013 0f02 	tst.w	r3, #2
 8005fb0:	d017      	beq.n	8005fe2 <HAL_RCC_ClockConfig+0x6a>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005fb2:	f013 0f04 	tst.w	r3, #4
 8005fb6:	d004      	beq.n	8005fc2 <HAL_RCC_ClockConfig+0x4a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005fb8:	4a47      	ldr	r2, [pc, #284]	; (80060d8 <HAL_RCC_ClockConfig+0x160>)
 8005fba:	6853      	ldr	r3, [r2, #4]
 8005fbc:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005fc0:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005fc2:	6823      	ldr	r3, [r4, #0]
 8005fc4:	f013 0f08 	tst.w	r3, #8
 8005fc8:	d004      	beq.n	8005fd4 <HAL_RCC_ClockConfig+0x5c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005fca:	4a43      	ldr	r2, [pc, #268]	; (80060d8 <HAL_RCC_ClockConfig+0x160>)
 8005fcc:	6853      	ldr	r3, [r2, #4]
 8005fce:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005fd2:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005fd4:	4a40      	ldr	r2, [pc, #256]	; (80060d8 <HAL_RCC_ClockConfig+0x160>)
 8005fd6:	6853      	ldr	r3, [r2, #4]
 8005fd8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005fdc:	68a1      	ldr	r1, [r4, #8]
 8005fde:	430b      	orrs	r3, r1
 8005fe0:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005fe2:	6823      	ldr	r3, [r4, #0]
 8005fe4:	f013 0f01 	tst.w	r3, #1
 8005fe8:	d031      	beq.n	800604e <HAL_RCC_ClockConfig+0xd6>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005fea:	6862      	ldr	r2, [r4, #4]
 8005fec:	2a01      	cmp	r2, #1
 8005fee:	d020      	beq.n	8006032 <HAL_RCC_ClockConfig+0xba>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005ff0:	2a02      	cmp	r2, #2
 8005ff2:	d025      	beq.n	8006040 <HAL_RCC_ClockConfig+0xc8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ff4:	4b38      	ldr	r3, [pc, #224]	; (80060d8 <HAL_RCC_ClockConfig+0x160>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f013 0f02 	tst.w	r3, #2
 8005ffc:	d065      	beq.n	80060ca <HAL_RCC_ClockConfig+0x152>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005ffe:	4936      	ldr	r1, [pc, #216]	; (80060d8 <HAL_RCC_ClockConfig+0x160>)
 8006000:	684b      	ldr	r3, [r1, #4]
 8006002:	f023 0303 	bic.w	r3, r3, #3
 8006006:	4313      	orrs	r3, r2
 8006008:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 800600a:	f7fd faaf 	bl	800356c <HAL_GetTick>
 800600e:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006010:	4f31      	ldr	r7, [pc, #196]	; (80060d8 <HAL_RCC_ClockConfig+0x160>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006012:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f003 030c 	and.w	r3, r3, #12
 800601c:	6862      	ldr	r2, [r4, #4]
 800601e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8006022:	d014      	beq.n	800604e <HAL_RCC_ClockConfig+0xd6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006024:	f7fd faa2 	bl	800356c <HAL_GetTick>
 8006028:	1b80      	subs	r0, r0, r6
 800602a:	4540      	cmp	r0, r8
 800602c:	d9f3      	bls.n	8006016 <HAL_RCC_ClockConfig+0x9e>
        return HAL_TIMEOUT;
 800602e:	2003      	movs	r0, #3
 8006030:	e045      	b.n	80060be <HAL_RCC_ClockConfig+0x146>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006032:	4b29      	ldr	r3, [pc, #164]	; (80060d8 <HAL_RCC_ClockConfig+0x160>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800603a:	d1e0      	bne.n	8005ffe <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 800603c:	2001      	movs	r0, #1
 800603e:	e03e      	b.n	80060be <HAL_RCC_ClockConfig+0x146>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006040:	4b25      	ldr	r3, [pc, #148]	; (80060d8 <HAL_RCC_ClockConfig+0x160>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8006048:	d1d9      	bne.n	8005ffe <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 800604a:	2001      	movs	r0, #1
 800604c:	e037      	b.n	80060be <HAL_RCC_ClockConfig+0x146>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800604e:	4b21      	ldr	r3, [pc, #132]	; (80060d4 <HAL_RCC_ClockConfig+0x15c>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f003 0307 	and.w	r3, r3, #7
 8006056:	42ab      	cmp	r3, r5
 8006058:	d90a      	bls.n	8006070 <HAL_RCC_ClockConfig+0xf8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800605a:	4a1e      	ldr	r2, [pc, #120]	; (80060d4 <HAL_RCC_ClockConfig+0x15c>)
 800605c:	6813      	ldr	r3, [r2, #0]
 800605e:	f023 0307 	bic.w	r3, r3, #7
 8006062:	432b      	orrs	r3, r5
 8006064:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006066:	6813      	ldr	r3, [r2, #0]
 8006068:	f003 0307 	and.w	r3, r3, #7
 800606c:	42ab      	cmp	r3, r5
 800606e:	d12e      	bne.n	80060ce <HAL_RCC_ClockConfig+0x156>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006070:	6823      	ldr	r3, [r4, #0]
 8006072:	f013 0f04 	tst.w	r3, #4
 8006076:	d006      	beq.n	8006086 <HAL_RCC_ClockConfig+0x10e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006078:	4a17      	ldr	r2, [pc, #92]	; (80060d8 <HAL_RCC_ClockConfig+0x160>)
 800607a:	6853      	ldr	r3, [r2, #4]
 800607c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006080:	68e1      	ldr	r1, [r4, #12]
 8006082:	430b      	orrs	r3, r1
 8006084:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006086:	6823      	ldr	r3, [r4, #0]
 8006088:	f013 0f08 	tst.w	r3, #8
 800608c:	d007      	beq.n	800609e <HAL_RCC_ClockConfig+0x126>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800608e:	4a12      	ldr	r2, [pc, #72]	; (80060d8 <HAL_RCC_ClockConfig+0x160>)
 8006090:	6853      	ldr	r3, [r2, #4]
 8006092:	6921      	ldr	r1, [r4, #16]
 8006094:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8006098:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800609c:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800609e:	f7ff ff41 	bl	8005f24 <HAL_RCC_GetSysClockFreq>
 80060a2:	4b0d      	ldr	r3, [pc, #52]	; (80060d8 <HAL_RCC_ClockConfig+0x160>)
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80060aa:	4a0c      	ldr	r2, [pc, #48]	; (80060dc <HAL_RCC_ClockConfig+0x164>)
 80060ac:	5cd3      	ldrb	r3, [r2, r3]
 80060ae:	40d8      	lsrs	r0, r3
 80060b0:	4b0b      	ldr	r3, [pc, #44]	; (80060e0 <HAL_RCC_ClockConfig+0x168>)
 80060b2:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80060b4:	4b0b      	ldr	r3, [pc, #44]	; (80060e4 <HAL_RCC_ClockConfig+0x16c>)
 80060b6:	6818      	ldr	r0, [r3, #0]
 80060b8:	f7fc fb6a 	bl	8002790 <HAL_InitTick>
  return HAL_OK;
 80060bc:	2000      	movs	r0, #0
}
 80060be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 80060c2:	2001      	movs	r0, #1
}
 80060c4:	4770      	bx	lr
    return HAL_ERROR;
 80060c6:	2001      	movs	r0, #1
 80060c8:	e7f9      	b.n	80060be <HAL_RCC_ClockConfig+0x146>
        return HAL_ERROR;
 80060ca:	2001      	movs	r0, #1
 80060cc:	e7f7      	b.n	80060be <HAL_RCC_ClockConfig+0x146>
    return HAL_ERROR;
 80060ce:	2001      	movs	r0, #1
 80060d0:	e7f5      	b.n	80060be <HAL_RCC_ClockConfig+0x146>
 80060d2:	bf00      	nop
 80060d4:	40022000 	.word	0x40022000
 80060d8:	40021000 	.word	0x40021000
 80060dc:	0800c3e0 	.word	0x0800c3e0
 80060e0:	20000000 	.word	0x20000000
 80060e4:	20000010 	.word	0x20000010

080060e8 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80060e8:	4b04      	ldr	r3, [pc, #16]	; (80060fc <HAL_RCC_GetPCLK1Freq+0x14>)
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80060f0:	4a03      	ldr	r2, [pc, #12]	; (8006100 <HAL_RCC_GetPCLK1Freq+0x18>)
 80060f2:	5cd3      	ldrb	r3, [r2, r3]
 80060f4:	4a03      	ldr	r2, [pc, #12]	; (8006104 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80060f6:	6810      	ldr	r0, [r2, #0]
}
 80060f8:	40d8      	lsrs	r0, r3
 80060fa:	4770      	bx	lr
 80060fc:	40021000 	.word	0x40021000
 8006100:	0800c3f0 	.word	0x0800c3f0
 8006104:	20000000 	.word	0x20000000

08006108 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006108:	4b04      	ldr	r3, [pc, #16]	; (800611c <HAL_RCC_GetPCLK2Freq+0x14>)
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8006110:	4a03      	ldr	r2, [pc, #12]	; (8006120 <HAL_RCC_GetPCLK2Freq+0x18>)
 8006112:	5cd3      	ldrb	r3, [r2, r3]
 8006114:	4a03      	ldr	r2, [pc, #12]	; (8006124 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8006116:	6810      	ldr	r0, [r2, #0]
}
 8006118:	40d8      	lsrs	r0, r3
 800611a:	4770      	bx	lr
 800611c:	40021000 	.word	0x40021000
 8006120:	0800c3f0 	.word	0x0800c3f0
 8006124:	20000000 	.word	0x20000000

08006128 <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006128:	230f      	movs	r3, #15
 800612a:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800612c:	4b0b      	ldr	r3, [pc, #44]	; (800615c <HAL_RCC_GetClockConfig+0x34>)
 800612e:	685a      	ldr	r2, [r3, #4]
 8006130:	f002 0203 	and.w	r2, r2, #3
 8006134:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006136:	685a      	ldr	r2, [r3, #4]
 8006138:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800613c:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800613e:	685a      	ldr	r2, [r3, #4]
 8006140:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8006144:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8006146:	685b      	ldr	r3, [r3, #4]
 8006148:	08db      	lsrs	r3, r3, #3
 800614a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800614e:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006150:	4b03      	ldr	r3, [pc, #12]	; (8006160 <HAL_RCC_GetClockConfig+0x38>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f003 0307 	and.w	r3, r3, #7
 8006158:	600b      	str	r3, [r1, #0]
}
 800615a:	4770      	bx	lr
 800615c:	40021000 	.word	0x40021000
 8006160:	40022000 	.word	0x40022000

08006164 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006164:	4770      	bx	lr
	...

08006168 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006168:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800616c:	b2db      	uxtb	r3, r3
 800616e:	2b01      	cmp	r3, #1
 8006170:	d127      	bne.n	80061c2 <HAL_TIM_Base_Start_IT+0x5a>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006172:	2302      	movs	r3, #2
 8006174:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006178:	6802      	ldr	r2, [r0, #0]
 800617a:	68d3      	ldr	r3, [r2, #12]
 800617c:	f043 0301 	orr.w	r3, r3, #1
 8006180:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006182:	6803      	ldr	r3, [r0, #0]
 8006184:	4a11      	ldr	r2, [pc, #68]	; (80061cc <HAL_TIM_Base_Start_IT+0x64>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d010      	beq.n	80061ac <HAL_TIM_Base_Start_IT+0x44>
 800618a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800618e:	d00d      	beq.n	80061ac <HAL_TIM_Base_Start_IT+0x44>
 8006190:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8006194:	4293      	cmp	r3, r2
 8006196:	d009      	beq.n	80061ac <HAL_TIM_Base_Start_IT+0x44>
 8006198:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800619c:	4293      	cmp	r3, r2
 800619e:	d005      	beq.n	80061ac <HAL_TIM_Base_Start_IT+0x44>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80061a0:	681a      	ldr	r2, [r3, #0]
 80061a2:	f042 0201 	orr.w	r2, r2, #1
 80061a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80061a8:	2000      	movs	r0, #0
 80061aa:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80061ac:	689a      	ldr	r2, [r3, #8]
 80061ae:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061b2:	2a06      	cmp	r2, #6
 80061b4:	d007      	beq.n	80061c6 <HAL_TIM_Base_Start_IT+0x5e>
      __HAL_TIM_ENABLE(htim);
 80061b6:	681a      	ldr	r2, [r3, #0]
 80061b8:	f042 0201 	orr.w	r2, r2, #1
 80061bc:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80061be:	2000      	movs	r0, #0
 80061c0:	4770      	bx	lr
    return HAL_ERROR;
 80061c2:	2001      	movs	r0, #1
 80061c4:	4770      	bx	lr
  return HAL_OK;
 80061c6:	2000      	movs	r0, #0
}
 80061c8:	4770      	bx	lr
 80061ca:	bf00      	nop
 80061cc:	40012c00 	.word	0x40012c00

080061d0 <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80061d0:	4770      	bx	lr

080061d2 <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80061d2:	4770      	bx	lr

080061d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80061d4:	4770      	bx	lr

080061d6 <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80061d6:	4770      	bx	lr

080061d8 <HAL_TIM_IRQHandler>:
{
 80061d8:	b510      	push	{r4, lr}
 80061da:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80061dc:	6803      	ldr	r3, [r0, #0]
 80061de:	691a      	ldr	r2, [r3, #16]
 80061e0:	f012 0f02 	tst.w	r2, #2
 80061e4:	d011      	beq.n	800620a <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80061e6:	68da      	ldr	r2, [r3, #12]
 80061e8:	f012 0f02 	tst.w	r2, #2
 80061ec:	d00d      	beq.n	800620a <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80061ee:	f06f 0202 	mvn.w	r2, #2
 80061f2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80061f4:	2301      	movs	r3, #1
 80061f6:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80061f8:	6803      	ldr	r3, [r0, #0]
 80061fa:	699b      	ldr	r3, [r3, #24]
 80061fc:	f013 0f03 	tst.w	r3, #3
 8006200:	d070      	beq.n	80062e4 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 8006202:	f7ff ffe6 	bl	80061d2 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006206:	2300      	movs	r3, #0
 8006208:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800620a:	6823      	ldr	r3, [r4, #0]
 800620c:	691a      	ldr	r2, [r3, #16]
 800620e:	f012 0f04 	tst.w	r2, #4
 8006212:	d012      	beq.n	800623a <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006214:	68da      	ldr	r2, [r3, #12]
 8006216:	f012 0f04 	tst.w	r2, #4
 800621a:	d00e      	beq.n	800623a <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800621c:	f06f 0204 	mvn.w	r2, #4
 8006220:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006222:	2302      	movs	r3, #2
 8006224:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006226:	6823      	ldr	r3, [r4, #0]
 8006228:	699b      	ldr	r3, [r3, #24]
 800622a:	f413 7f40 	tst.w	r3, #768	; 0x300
 800622e:	d05f      	beq.n	80062f0 <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 8006230:	4620      	mov	r0, r4
 8006232:	f7ff ffce 	bl	80061d2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006236:	2300      	movs	r3, #0
 8006238:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800623a:	6823      	ldr	r3, [r4, #0]
 800623c:	691a      	ldr	r2, [r3, #16]
 800623e:	f012 0f08 	tst.w	r2, #8
 8006242:	d012      	beq.n	800626a <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006244:	68da      	ldr	r2, [r3, #12]
 8006246:	f012 0f08 	tst.w	r2, #8
 800624a:	d00e      	beq.n	800626a <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800624c:	f06f 0208 	mvn.w	r2, #8
 8006250:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006252:	2304      	movs	r3, #4
 8006254:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006256:	6823      	ldr	r3, [r4, #0]
 8006258:	69db      	ldr	r3, [r3, #28]
 800625a:	f013 0f03 	tst.w	r3, #3
 800625e:	d04e      	beq.n	80062fe <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 8006260:	4620      	mov	r0, r4
 8006262:	f7ff ffb6 	bl	80061d2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006266:	2300      	movs	r3, #0
 8006268:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800626a:	6823      	ldr	r3, [r4, #0]
 800626c:	691a      	ldr	r2, [r3, #16]
 800626e:	f012 0f10 	tst.w	r2, #16
 8006272:	d012      	beq.n	800629a <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006274:	68da      	ldr	r2, [r3, #12]
 8006276:	f012 0f10 	tst.w	r2, #16
 800627a:	d00e      	beq.n	800629a <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800627c:	f06f 0210 	mvn.w	r2, #16
 8006280:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006282:	2308      	movs	r3, #8
 8006284:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006286:	6823      	ldr	r3, [r4, #0]
 8006288:	69db      	ldr	r3, [r3, #28]
 800628a:	f413 7f40 	tst.w	r3, #768	; 0x300
 800628e:	d03d      	beq.n	800630c <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 8006290:	4620      	mov	r0, r4
 8006292:	f7ff ff9e 	bl	80061d2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006296:	2300      	movs	r3, #0
 8006298:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800629a:	6823      	ldr	r3, [r4, #0]
 800629c:	691a      	ldr	r2, [r3, #16]
 800629e:	f012 0f01 	tst.w	r2, #1
 80062a2:	d003      	beq.n	80062ac <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80062a4:	68da      	ldr	r2, [r3, #12]
 80062a6:	f012 0f01 	tst.w	r2, #1
 80062aa:	d136      	bne.n	800631a <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80062ac:	6823      	ldr	r3, [r4, #0]
 80062ae:	691a      	ldr	r2, [r3, #16]
 80062b0:	f012 0f80 	tst.w	r2, #128	; 0x80
 80062b4:	d003      	beq.n	80062be <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80062b6:	68da      	ldr	r2, [r3, #12]
 80062b8:	f012 0f80 	tst.w	r2, #128	; 0x80
 80062bc:	d134      	bne.n	8006328 <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80062be:	6823      	ldr	r3, [r4, #0]
 80062c0:	691a      	ldr	r2, [r3, #16]
 80062c2:	f012 0f40 	tst.w	r2, #64	; 0x40
 80062c6:	d003      	beq.n	80062d0 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80062c8:	68da      	ldr	r2, [r3, #12]
 80062ca:	f012 0f40 	tst.w	r2, #64	; 0x40
 80062ce:	d132      	bne.n	8006336 <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80062d0:	6823      	ldr	r3, [r4, #0]
 80062d2:	691a      	ldr	r2, [r3, #16]
 80062d4:	f012 0f20 	tst.w	r2, #32
 80062d8:	d003      	beq.n	80062e2 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80062da:	68da      	ldr	r2, [r3, #12]
 80062dc:	f012 0f20 	tst.w	r2, #32
 80062e0:	d130      	bne.n	8006344 <HAL_TIM_IRQHandler+0x16c>
}
 80062e2:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80062e4:	f7ff ff74 	bl	80061d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062e8:	4620      	mov	r0, r4
 80062ea:	f7ff ff73 	bl	80061d4 <HAL_TIM_PWM_PulseFinishedCallback>
 80062ee:	e78a      	b.n	8006206 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062f0:	4620      	mov	r0, r4
 80062f2:	f7ff ff6d 	bl	80061d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062f6:	4620      	mov	r0, r4
 80062f8:	f7ff ff6c 	bl	80061d4 <HAL_TIM_PWM_PulseFinishedCallback>
 80062fc:	e79b      	b.n	8006236 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062fe:	4620      	mov	r0, r4
 8006300:	f7ff ff66 	bl	80061d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006304:	4620      	mov	r0, r4
 8006306:	f7ff ff65 	bl	80061d4 <HAL_TIM_PWM_PulseFinishedCallback>
 800630a:	e7ac      	b.n	8006266 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800630c:	4620      	mov	r0, r4
 800630e:	f7ff ff5f 	bl	80061d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006312:	4620      	mov	r0, r4
 8006314:	f7ff ff5e 	bl	80061d4 <HAL_TIM_PWM_PulseFinishedCallback>
 8006318:	e7bd      	b.n	8006296 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800631a:	f06f 0201 	mvn.w	r2, #1
 800631e:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8006320:	4620      	mov	r0, r4
 8006322:	f7fc f85f 	bl	80023e4 <HAL_TIM_PeriodElapsedCallback>
 8006326:	e7c1      	b.n	80062ac <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006328:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800632c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800632e:	4620      	mov	r0, r4
 8006330:	f000 f9f7 	bl	8006722 <HAL_TIMEx_BreakCallback>
 8006334:	e7c3      	b.n	80062be <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006336:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800633a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800633c:	4620      	mov	r0, r4
 800633e:	f7ff ff4a 	bl	80061d6 <HAL_TIM_TriggerCallback>
 8006342:	e7c5      	b.n	80062d0 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006344:	f06f 0220 	mvn.w	r2, #32
 8006348:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 800634a:	4620      	mov	r0, r4
 800634c:	f000 f9e8 	bl	8006720 <HAL_TIMEx_CommutCallback>
}
 8006350:	e7c7      	b.n	80062e2 <HAL_TIM_IRQHandler+0x10a>
	...

08006354 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006354:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006356:	4a25      	ldr	r2, [pc, #148]	; (80063ec <TIM_Base_SetConfig+0x98>)
 8006358:	4290      	cmp	r0, r2
 800635a:	d014      	beq.n	8006386 <TIM_Base_SetConfig+0x32>
 800635c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8006360:	d026      	beq.n	80063b0 <TIM_Base_SetConfig+0x5c>
 8006362:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8006366:	4290      	cmp	r0, r2
 8006368:	d036      	beq.n	80063d8 <TIM_Base_SetConfig+0x84>
 800636a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800636e:	4290      	cmp	r0, r2
 8006370:	d037      	beq.n	80063e2 <TIM_Base_SetConfig+0x8e>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006372:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006376:	694a      	ldr	r2, [r1, #20]
 8006378:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800637a:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800637c:	688b      	ldr	r3, [r1, #8]
 800637e:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006380:	680b      	ldr	r3, [r1, #0]
 8006382:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006384:	e025      	b.n	80063d2 <TIM_Base_SetConfig+0x7e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006386:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800638a:	684a      	ldr	r2, [r1, #4]
 800638c:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 800638e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006392:	68ca      	ldr	r2, [r1, #12]
 8006394:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006396:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800639a:	694a      	ldr	r2, [r1, #20]
 800639c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800639e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80063a0:	688b      	ldr	r3, [r1, #8]
 80063a2:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80063a4:	680b      	ldr	r3, [r1, #0]
 80063a6:	6283      	str	r3, [r0, #40]	; 0x28
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80063a8:	690a      	ldr	r2, [r1, #16]
 80063aa:	4b10      	ldr	r3, [pc, #64]	; (80063ec <TIM_Base_SetConfig+0x98>)
 80063ac:	631a      	str	r2, [r3, #48]	; 0x30
 80063ae:	e010      	b.n	80063d2 <TIM_Base_SetConfig+0x7e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80063b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80063b4:	684a      	ldr	r2, [r1, #4]
 80063b6:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 80063b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80063bc:	68ca      	ldr	r2, [r1, #12]
 80063be:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80063c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80063c4:	694a      	ldr	r2, [r1, #20]
 80063c6:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80063c8:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80063ca:	688b      	ldr	r3, [r1, #8]
 80063cc:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80063ce:	680b      	ldr	r3, [r1, #0]
 80063d0:	6283      	str	r3, [r0, #40]	; 0x28
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80063d2:	2301      	movs	r3, #1
 80063d4:	6143      	str	r3, [r0, #20]
}
 80063d6:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80063d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80063dc:	684a      	ldr	r2, [r1, #4]
 80063de:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80063e0:	e7ea      	b.n	80063b8 <TIM_Base_SetConfig+0x64>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80063e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80063e6:	684a      	ldr	r2, [r1, #4]
 80063e8:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80063ea:	e7e5      	b.n	80063b8 <TIM_Base_SetConfig+0x64>
 80063ec:	40012c00 	.word	0x40012c00

080063f0 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80063f0:	b340      	cbz	r0, 8006444 <HAL_TIM_Base_Init+0x54>
{
 80063f2:	b510      	push	{r4, lr}
 80063f4:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80063f6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80063fa:	b1f3      	cbz	r3, 800643a <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 80063fc:	2302      	movs	r3, #2
 80063fe:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006402:	4621      	mov	r1, r4
 8006404:	f851 0b04 	ldr.w	r0, [r1], #4
 8006408:	f7ff ffa4 	bl	8006354 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800640c:	2301      	movs	r3, #1
 800640e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006412:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8006416:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800641a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800641e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006422:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006426:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800642a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800642e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8006432:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8006436:	2000      	movs	r0, #0
}
 8006438:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800643a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800643e:	f7ff fe91 	bl	8006164 <HAL_TIM_Base_MspInit>
 8006442:	e7db      	b.n	80063fc <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8006444:	2001      	movs	r0, #1
}
 8006446:	4770      	bx	lr

08006448 <HAL_TIM_Encoder_Init>:
  if (htim == NULL)
 8006448:	2800      	cmp	r0, #0
 800644a:	d053      	beq.n	80064f4 <HAL_TIM_Encoder_Init+0xac>
{
 800644c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800644e:	460d      	mov	r5, r1
 8006450:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8006452:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006456:	2b00      	cmp	r3, #0
 8006458:	d047      	beq.n	80064ea <HAL_TIM_Encoder_Init+0xa2>
  htim->State = HAL_TIM_STATE_BUSY;
 800645a:	2302      	movs	r3, #2
 800645c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006460:	6822      	ldr	r2, [r4, #0]
 8006462:	6893      	ldr	r3, [r2, #8]
 8006464:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006468:	f023 0307 	bic.w	r3, r3, #7
 800646c:	6093      	str	r3, [r2, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800646e:	4621      	mov	r1, r4
 8006470:	f851 0b04 	ldr.w	r0, [r1], #4
 8006474:	f7ff ff6e 	bl	8006354 <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 8006478:	6821      	ldr	r1, [r4, #0]
 800647a:	6888      	ldr	r0, [r1, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 800647c:	698b      	ldr	r3, [r1, #24]
  tmpccer = htim->Instance->CCER;
 800647e:	6a0e      	ldr	r6, [r1, #32]
  tmpsmcr |= sConfig->EncoderMode;
 8006480:	682a      	ldr	r2, [r5, #0]
 8006482:	4310      	orrs	r0, r2
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006484:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006488:	f023 0303 	bic.w	r3, r3, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800648c:	69af      	ldr	r7, [r5, #24]
 800648e:	68aa      	ldr	r2, [r5, #8]
 8006490:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 8006494:	431a      	orrs	r2, r3
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006496:	f422 427c 	bic.w	r2, r2, #64512	; 0xfc00
 800649a:	f022 02fc 	bic.w	r2, r2, #252	; 0xfc
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800649e:	692b      	ldr	r3, [r5, #16]
 80064a0:	011b      	lsls	r3, r3, #4
 80064a2:	69ef      	ldr	r7, [r5, #28]
 80064a4:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 80064a8:	68ef      	ldr	r7, [r5, #12]
 80064aa:	433b      	orrs	r3, r7
 80064ac:	6a2f      	ldr	r7, [r5, #32]
 80064ae:	ea43 3307 	orr.w	r3, r3, r7, lsl #12
 80064b2:	4313      	orrs	r3, r2
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80064b4:	f026 0622 	bic.w	r6, r6, #34	; 0x22
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80064b8:	696f      	ldr	r7, [r5, #20]
 80064ba:	686a      	ldr	r2, [r5, #4]
 80064bc:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
 80064c0:	4316      	orrs	r6, r2
  htim->Instance->SMCR = tmpsmcr;
 80064c2:	6088      	str	r0, [r1, #8]
  htim->Instance->CCMR1 = tmpccmr1;
 80064c4:	6822      	ldr	r2, [r4, #0]
 80064c6:	6193      	str	r3, [r2, #24]
  htim->Instance->CCER = tmpccer;
 80064c8:	6823      	ldr	r3, [r4, #0]
 80064ca:	621e      	str	r6, [r3, #32]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064cc:	2301      	movs	r3, #1
 80064ce:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80064d2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80064d6:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80064da:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80064de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  htim->State = HAL_TIM_STATE_READY;
 80064e2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80064e6:	2000      	movs	r0, #0
}
 80064e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    htim->Lock = HAL_UNLOCKED;
 80064ea:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 80064ee:	f7fc fa43 	bl	8002978 <HAL_TIM_Encoder_MspInit>
 80064f2:	e7b2      	b.n	800645a <HAL_TIM_Encoder_Init+0x12>
    return HAL_ERROR;
 80064f4:	2001      	movs	r0, #1
}
 80064f6:	4770      	bx	lr

080064f8 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80064f8:	f001 011f 	and.w	r1, r1, #31

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80064fc:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80064fe:	f04f 0c01 	mov.w	ip, #1
 8006502:	fa0c fc01 	lsl.w	ip, ip, r1
  TIMx->CCER &= ~tmp;
 8006506:	ea23 030c 	bic.w	r3, r3, ip
 800650a:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800650c:	6a03      	ldr	r3, [r0, #32]
 800650e:	408a      	lsls	r2, r1
 8006510:	431a      	orrs	r2, r3
 8006512:	6202      	str	r2, [r0, #32]
}
 8006514:	4770      	bx	lr

08006516 <HAL_TIM_Encoder_Start>:
{
 8006516:	b510      	push	{r4, lr}
 8006518:	4604      	mov	r4, r0
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800651a:	f890 003e 	ldrb.w	r0, [r0, #62]	; 0x3e
 800651e:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006520:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006524:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 8006528:	b2d2      	uxtb	r2, r2
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800652a:	f894 c043 	ldrb.w	ip, [r4, #67]	; 0x43
  if (Channel == TIM_CHANNEL_1)
 800652e:	b991      	cbnz	r1, 8006556 <HAL_TIM_Encoder_Start+0x40>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006530:	2801      	cmp	r0, #1
 8006532:	d142      	bne.n	80065ba <HAL_TIM_Encoder_Start+0xa4>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006534:	2a01      	cmp	r2, #1
 8006536:	d141      	bne.n	80065bc <HAL_TIM_Encoder_Start+0xa6>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006538:	2302      	movs	r3, #2
 800653a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800653e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006542:	6820      	ldr	r0, [r4, #0]
 8006544:	f7ff ffd8 	bl	80064f8 <TIM_CCxChannelCmd>
  __HAL_TIM_ENABLE(htim);
 8006548:	6822      	ldr	r2, [r4, #0]
 800654a:	6813      	ldr	r3, [r2, #0]
 800654c:	f043 0301 	orr.w	r3, r3, #1
 8006550:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8006552:	2000      	movs	r0, #0
 8006554:	e032      	b.n	80065bc <HAL_TIM_Encoder_Start+0xa6>
 8006556:	b2db      	uxtb	r3, r3
 8006558:	fa5f fc8c 	uxtb.w	ip, ip
 800655c:	468e      	mov	lr, r1
  else if (Channel == TIM_CHANNEL_2)
 800655e:	2904      	cmp	r1, #4
 8006560:	d01b      	beq.n	800659a <HAL_TIM_Encoder_Start+0x84>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006562:	2801      	cmp	r0, #1
 8006564:	d12f      	bne.n	80065c6 <HAL_TIM_Encoder_Start+0xb0>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006566:	2b01      	cmp	r3, #1
 8006568:	d128      	bne.n	80065bc <HAL_TIM_Encoder_Start+0xa6>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800656a:	2a01      	cmp	r2, #1
 800656c:	d12d      	bne.n	80065ca <HAL_TIM_Encoder_Start+0xb4>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800656e:	f1bc 0f01 	cmp.w	ip, #1
 8006572:	d12c      	bne.n	80065ce <HAL_TIM_Encoder_Start+0xb8>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006574:	2302      	movs	r3, #2
 8006576:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800657a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800657e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006582:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006586:	2100      	movs	r1, #0
 8006588:	6820      	ldr	r0, [r4, #0]
 800658a:	f7ff ffb5 	bl	80064f8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800658e:	2201      	movs	r2, #1
 8006590:	2104      	movs	r1, #4
 8006592:	6820      	ldr	r0, [r4, #0]
 8006594:	f7ff ffb0 	bl	80064f8 <TIM_CCxChannelCmd>
      break;
 8006598:	e7d6      	b.n	8006548 <HAL_TIM_Encoder_Start+0x32>
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800659a:	2b01      	cmp	r3, #1
 800659c:	d10f      	bne.n	80065be <HAL_TIM_Encoder_Start+0xa8>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800659e:	f1bc 0f01 	cmp.w	ip, #1
 80065a2:	d10e      	bne.n	80065c2 <HAL_TIM_Encoder_Start+0xac>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80065a4:	2302      	movs	r3, #2
 80065a6:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80065aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80065ae:	2201      	movs	r2, #1
 80065b0:	2104      	movs	r1, #4
 80065b2:	6820      	ldr	r0, [r4, #0]
 80065b4:	f7ff ffa0 	bl	80064f8 <TIM_CCxChannelCmd>
      break;
 80065b8:	e7c6      	b.n	8006548 <HAL_TIM_Encoder_Start+0x32>
      return HAL_ERROR;
 80065ba:	2001      	movs	r0, #1
}
 80065bc:	bd10      	pop	{r4, pc}
      return HAL_ERROR;
 80065be:	2001      	movs	r0, #1
 80065c0:	e7fc      	b.n	80065bc <HAL_TIM_Encoder_Start+0xa6>
 80065c2:	4618      	mov	r0, r3
 80065c4:	e7fa      	b.n	80065bc <HAL_TIM_Encoder_Start+0xa6>
      return HAL_ERROR;
 80065c6:	2001      	movs	r0, #1
 80065c8:	e7f8      	b.n	80065bc <HAL_TIM_Encoder_Start+0xa6>
 80065ca:	4618      	mov	r0, r3
 80065cc:	e7f6      	b.n	80065bc <HAL_TIM_Encoder_Start+0xa6>
 80065ce:	4610      	mov	r0, r2
 80065d0:	e7f4      	b.n	80065bc <HAL_TIM_Encoder_Start+0xa6>

080065d2 <HAL_TIM_Encoder_Start_IT>:
{
 80065d2:	b510      	push	{r4, lr}
 80065d4:	4604      	mov	r4, r0
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80065d6:	f890 003e 	ldrb.w	r0, [r0, #62]	; 0x3e
 80065da:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80065dc:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80065e0:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 80065e4:	b2d2      	uxtb	r2, r2
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80065e6:	f894 c043 	ldrb.w	ip, [r4, #67]	; 0x43
  if (Channel == TIM_CHANNEL_1)
 80065ea:	b9b9      	cbnz	r1, 800661c <HAL_TIM_Encoder_Start_IT+0x4a>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80065ec:	2801      	cmp	r0, #1
 80065ee:	d156      	bne.n	800669e <HAL_TIM_Encoder_Start_IT+0xcc>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80065f0:	2a01      	cmp	r2, #1
 80065f2:	d155      	bne.n	80066a0 <HAL_TIM_Encoder_Start_IT+0xce>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80065f4:	2302      	movs	r3, #2
 80065f6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80065fa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80065fe:	6820      	ldr	r0, [r4, #0]
 8006600:	f7ff ff7a 	bl	80064f8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006604:	6822      	ldr	r2, [r4, #0]
 8006606:	68d3      	ldr	r3, [r2, #12]
 8006608:	f043 0302 	orr.w	r3, r3, #2
 800660c:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_ENABLE(htim);
 800660e:	6822      	ldr	r2, [r4, #0]
 8006610:	6813      	ldr	r3, [r2, #0]
 8006612:	f043 0301 	orr.w	r3, r3, #1
 8006616:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8006618:	2000      	movs	r0, #0
 800661a:	e041      	b.n	80066a0 <HAL_TIM_Encoder_Start_IT+0xce>
 800661c:	b2db      	uxtb	r3, r3
 800661e:	fa5f fc8c 	uxtb.w	ip, ip
 8006622:	468e      	mov	lr, r1
  else if (Channel == TIM_CHANNEL_2)
 8006624:	2904      	cmp	r1, #4
 8006626:	d025      	beq.n	8006674 <HAL_TIM_Encoder_Start_IT+0xa2>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006628:	2801      	cmp	r0, #1
 800662a:	d13e      	bne.n	80066aa <HAL_TIM_Encoder_Start_IT+0xd8>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800662c:	2b01      	cmp	r3, #1
 800662e:	d137      	bne.n	80066a0 <HAL_TIM_Encoder_Start_IT+0xce>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006630:	2a01      	cmp	r2, #1
 8006632:	d13c      	bne.n	80066ae <HAL_TIM_Encoder_Start_IT+0xdc>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006634:	f1bc 0f01 	cmp.w	ip, #1
 8006638:	d13b      	bne.n	80066b2 <HAL_TIM_Encoder_Start_IT+0xe0>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800663a:	2302      	movs	r3, #2
 800663c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006640:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006644:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006648:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800664c:	2100      	movs	r1, #0
 800664e:	6820      	ldr	r0, [r4, #0]
 8006650:	f7ff ff52 	bl	80064f8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006654:	2201      	movs	r2, #1
 8006656:	2104      	movs	r1, #4
 8006658:	6820      	ldr	r0, [r4, #0]
 800665a:	f7ff ff4d 	bl	80064f8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800665e:	6822      	ldr	r2, [r4, #0]
 8006660:	68d3      	ldr	r3, [r2, #12]
 8006662:	f043 0302 	orr.w	r3, r3, #2
 8006666:	60d3      	str	r3, [r2, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006668:	6822      	ldr	r2, [r4, #0]
 800666a:	68d3      	ldr	r3, [r2, #12]
 800666c:	f043 0304 	orr.w	r3, r3, #4
 8006670:	60d3      	str	r3, [r2, #12]
      break;
 8006672:	e7cc      	b.n	800660e <HAL_TIM_Encoder_Start_IT+0x3c>
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006674:	2b01      	cmp	r3, #1
 8006676:	d114      	bne.n	80066a2 <HAL_TIM_Encoder_Start_IT+0xd0>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006678:	f1bc 0f01 	cmp.w	ip, #1
 800667c:	d113      	bne.n	80066a6 <HAL_TIM_Encoder_Start_IT+0xd4>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800667e:	2302      	movs	r3, #2
 8006680:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006684:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006688:	2201      	movs	r2, #1
 800668a:	2104      	movs	r1, #4
 800668c:	6820      	ldr	r0, [r4, #0]
 800668e:	f7ff ff33 	bl	80064f8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006692:	6822      	ldr	r2, [r4, #0]
 8006694:	68d3      	ldr	r3, [r2, #12]
 8006696:	f043 0304 	orr.w	r3, r3, #4
 800669a:	60d3      	str	r3, [r2, #12]
      break;
 800669c:	e7b7      	b.n	800660e <HAL_TIM_Encoder_Start_IT+0x3c>
      return HAL_ERROR;
 800669e:	2001      	movs	r0, #1
}
 80066a0:	bd10      	pop	{r4, pc}
      return HAL_ERROR;
 80066a2:	2001      	movs	r0, #1
 80066a4:	e7fc      	b.n	80066a0 <HAL_TIM_Encoder_Start_IT+0xce>
 80066a6:	4618      	mov	r0, r3
 80066a8:	e7fa      	b.n	80066a0 <HAL_TIM_Encoder_Start_IT+0xce>
      return HAL_ERROR;
 80066aa:	2001      	movs	r0, #1
 80066ac:	e7f8      	b.n	80066a0 <HAL_TIM_Encoder_Start_IT+0xce>
 80066ae:	4618      	mov	r0, r3
 80066b0:	e7f6      	b.n	80066a0 <HAL_TIM_Encoder_Start_IT+0xce>
 80066b2:	4610      	mov	r0, r2
 80066b4:	e7f4      	b.n	80066a0 <HAL_TIM_Encoder_Start_IT+0xce>
	...

080066b8 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80066b8:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 80066bc:	2a01      	cmp	r2, #1
 80066be:	d02b      	beq.n	8006718 <HAL_TIMEx_MasterConfigSynchronization+0x60>
{
 80066c0:	b430      	push	{r4, r5}
 80066c2:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 80066c4:	2201      	movs	r2, #1
 80066c6:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066ca:	2202      	movs	r2, #2
 80066cc:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80066d0:	6804      	ldr	r4, [r0, #0]
 80066d2:	6862      	ldr	r2, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80066d4:	68a0      	ldr	r0, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80066d6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80066da:	680d      	ldr	r5, [r1, #0]
 80066dc:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80066de:	6062      	str	r2, [r4, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066e0:	681a      	ldr	r2, [r3, #0]
 80066e2:	4c0e      	ldr	r4, [pc, #56]	; (800671c <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 80066e4:	42a2      	cmp	r2, r4
 80066e6:	d00a      	beq.n	80066fe <HAL_TIMEx_MasterConfigSynchronization+0x46>
 80066e8:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80066ec:	d007      	beq.n	80066fe <HAL_TIMEx_MasterConfigSynchronization+0x46>
 80066ee:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 80066f2:	42a2      	cmp	r2, r4
 80066f4:	d003      	beq.n	80066fe <HAL_TIMEx_MasterConfigSynchronization+0x46>
 80066f6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80066fa:	42a2      	cmp	r2, r4
 80066fc:	d104      	bne.n	8006708 <HAL_TIMEx_MasterConfigSynchronization+0x50>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80066fe:	f020 0080 	bic.w	r0, r0, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006702:	6849      	ldr	r1, [r1, #4]
 8006704:	4308      	orrs	r0, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006706:	6090      	str	r0, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006708:	2201      	movs	r2, #1
 800670a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800670e:	2000      	movs	r0, #0
 8006710:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c

  return HAL_OK;
}
 8006714:	bc30      	pop	{r4, r5}
 8006716:	4770      	bx	lr
  __HAL_LOCK(htim);
 8006718:	2002      	movs	r0, #2
}
 800671a:	4770      	bx	lr
 800671c:	40012c00 	.word	0x40012c00

08006720 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006720:	4770      	bx	lr

08006722 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006722:	4770      	bx	lr

08006724 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006724:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006726:	f102 030c 	add.w	r3, r2, #12
 800672a:	e853 3f00 	ldrex	r3, [r3]
 800672e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006732:	320c      	adds	r2, #12
 8006734:	e842 3100 	strex	r1, r3, [r2]
 8006738:	2900      	cmp	r1, #0
 800673a:	d1f3      	bne.n	8006724 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800673c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800673e:	f102 0314 	add.w	r3, r2, #20
 8006742:	e853 3f00 	ldrex	r3, [r3]
 8006746:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800674a:	3214      	adds	r2, #20
 800674c:	e842 3100 	strex	r1, r3, [r2]
 8006750:	2900      	cmp	r1, #0
 8006752:	d1f3      	bne.n	800673c <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006754:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8006756:	2b01      	cmp	r3, #1
 8006758:	d005      	beq.n	8006766 <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800675a:	2320      	movs	r3, #32
 800675c:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006760:	2300      	movs	r3, #0
 8006762:	6303      	str	r3, [r0, #48]	; 0x30
}
 8006764:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006766:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006768:	f102 030c 	add.w	r3, r2, #12
 800676c:	e853 3f00 	ldrex	r3, [r3]
 8006770:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006774:	320c      	adds	r2, #12
 8006776:	e842 3100 	strex	r1, r3, [r2]
 800677a:	2900      	cmp	r1, #0
 800677c:	d1f3      	bne.n	8006766 <UART_EndRxTransfer+0x42>
 800677e:	e7ec      	b.n	800675a <UART_EndRxTransfer+0x36>

08006780 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006780:	b510      	push	{r4, lr}
 8006782:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006784:	6802      	ldr	r2, [r0, #0]
 8006786:	6913      	ldr	r3, [r2, #16]
 8006788:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800678c:	68c1      	ldr	r1, [r0, #12]
 800678e:	430b      	orrs	r3, r1
 8006790:	6113      	str	r3, [r2, #16]
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
  MODIFY_REG(huart->Instance->CR1,
 8006792:	6801      	ldr	r1, [r0, #0]
 8006794:	68ca      	ldr	r2, [r1, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006796:	6883      	ldr	r3, [r0, #8]
 8006798:	6900      	ldr	r0, [r0, #16]
 800679a:	4303      	orrs	r3, r0
 800679c:	6960      	ldr	r0, [r4, #20]
 800679e:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 80067a0:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 80067a4:	f022 020c 	bic.w	r2, r2, #12
 80067a8:	4313      	orrs	r3, r2
 80067aa:	60cb      	str	r3, [r1, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80067ac:	6822      	ldr	r2, [r4, #0]
 80067ae:	6953      	ldr	r3, [r2, #20]
 80067b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067b4:	69a1      	ldr	r1, [r4, #24]
 80067b6:	430b      	orrs	r3, r1
 80067b8:	6153      	str	r3, [r2, #20]


  if(huart->Instance == USART1)
 80067ba:	6822      	ldr	r2, [r4, #0]
 80067bc:	4b11      	ldr	r3, [pc, #68]	; (8006804 <UART_SetConfig+0x84>)
 80067be:	429a      	cmp	r2, r3
 80067c0:	d01b      	beq.n	80067fa <UART_SetConfig+0x7a>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80067c2:	f7ff fc91 	bl	80060e8 <HAL_RCC_GetPCLK1Freq>
 80067c6:	4603      	mov	r3, r0
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80067c8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80067cc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80067d0:	6862      	ldr	r2, [r4, #4]
 80067d2:	0092      	lsls	r2, r2, #2
 80067d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80067d8:	6820      	ldr	r0, [r4, #0]
 80067da:	490b      	ldr	r1, [pc, #44]	; (8006808 <UART_SetConfig+0x88>)
 80067dc:	fba1 4203 	umull	r4, r2, r1, r3
 80067e0:	0952      	lsrs	r2, r2, #5
 80067e2:	2464      	movs	r4, #100	; 0x64
 80067e4:	fb04 3312 	mls	r3, r4, r2, r3
 80067e8:	011b      	lsls	r3, r3, #4
 80067ea:	3332      	adds	r3, #50	; 0x32
 80067ec:	fba1 1303 	umull	r1, r3, r1, r3
 80067f0:	0112      	lsls	r2, r2, #4
 80067f2:	eb02 1253 	add.w	r2, r2, r3, lsr #5
 80067f6:	6082      	str	r2, [r0, #8]
#endif /* USART_CR1_OVER8 */
}
 80067f8:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK2Freq();
 80067fa:	f7ff fc85 	bl	8006108 <HAL_RCC_GetPCLK2Freq>
 80067fe:	4603      	mov	r3, r0
 8006800:	e7e2      	b.n	80067c8 <UART_SetConfig+0x48>
 8006802:	bf00      	nop
 8006804:	40013800 	.word	0x40013800
 8006808:	51eb851f 	.word	0x51eb851f

0800680c <HAL_UART_Init>:
  if (huart == NULL)
 800680c:	b360      	cbz	r0, 8006868 <HAL_UART_Init+0x5c>
{
 800680e:	b510      	push	{r4, lr}
 8006810:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8006812:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8006816:	b313      	cbz	r3, 800685e <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 8006818:	2324      	movs	r3, #36	; 0x24
 800681a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UART_DISABLE(huart);
 800681e:	6822      	ldr	r2, [r4, #0]
 8006820:	68d3      	ldr	r3, [r2, #12]
 8006822:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006826:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8006828:	4620      	mov	r0, r4
 800682a:	f7ff ffa9 	bl	8006780 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800682e:	6822      	ldr	r2, [r4, #0]
 8006830:	6913      	ldr	r3, [r2, #16]
 8006832:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8006836:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006838:	6822      	ldr	r2, [r4, #0]
 800683a:	6953      	ldr	r3, [r2, #20]
 800683c:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8006840:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8006842:	6822      	ldr	r2, [r4, #0]
 8006844:	68d3      	ldr	r3, [r2, #12]
 8006846:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800684a:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800684c:	2000      	movs	r0, #0
 800684e:	6460      	str	r0, [r4, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006850:	2320      	movs	r3, #32
 8006852:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006856:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800685a:	6360      	str	r0, [r4, #52]	; 0x34
}
 800685c:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800685e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_UART_MspInit(huart);
 8006862:	f7fc f927 	bl	8002ab4 <HAL_UART_MspInit>
 8006866:	e7d7      	b.n	8006818 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8006868:	2001      	movs	r0, #1
}
 800686a:	4770      	bx	lr

0800686c <HAL_UART_Transmit_IT>:
  if (huart->gState == HAL_UART_STATE_READY)
 800686c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8006870:	b2db      	uxtb	r3, r3
 8006872:	2b20      	cmp	r3, #32
 8006874:	d110      	bne.n	8006898 <HAL_UART_Transmit_IT+0x2c>
    if ((pData == NULL) || (Size == 0U))
 8006876:	b189      	cbz	r1, 800689c <HAL_UART_Transmit_IT+0x30>
 8006878:	b192      	cbz	r2, 80068a0 <HAL_UART_Transmit_IT+0x34>
    huart->pTxBuffPtr = pData;
 800687a:	6201      	str	r1, [r0, #32]
    huart->TxXferSize = Size;
 800687c:	8482      	strh	r2, [r0, #36]	; 0x24
    huart->TxXferCount = Size;
 800687e:	84c2      	strh	r2, [r0, #38]	; 0x26
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006880:	2300      	movs	r3, #0
 8006882:	6443      	str	r3, [r0, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006884:	2221      	movs	r2, #33	; 0x21
 8006886:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800688a:	6801      	ldr	r1, [r0, #0]
 800688c:	68ca      	ldr	r2, [r1, #12]
 800688e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006892:	60ca      	str	r2, [r1, #12]
    return HAL_OK;
 8006894:	4618      	mov	r0, r3
 8006896:	4770      	bx	lr
    return HAL_BUSY;
 8006898:	2002      	movs	r0, #2
 800689a:	4770      	bx	lr
      return HAL_ERROR;
 800689c:	2001      	movs	r0, #1
 800689e:	4770      	bx	lr
 80068a0:	2001      	movs	r0, #1
}
 80068a2:	4770      	bx	lr

080068a4 <HAL_UART_TxCpltCallback>:
}
 80068a4:	4770      	bx	lr

080068a6 <HAL_UART_RxCpltCallback>:
}
 80068a6:	4770      	bx	lr

080068a8 <HAL_UART_ErrorCallback>:
}
 80068a8:	4770      	bx	lr

080068aa <UART_DMAAbortOnError>:
{
 80068aa:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80068ac:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 80068ae:	2300      	movs	r3, #0
 80068b0:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80068b2:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 80068b4:	f7ff fff8 	bl	80068a8 <HAL_UART_ErrorCallback>
}
 80068b8:	bd08      	pop	{r3, pc}

080068ba <HAL_UARTEx_RxEventCallback>:
}
 80068ba:	4770      	bx	lr

080068bc <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80068bc:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 80068c0:	b2db      	uxtb	r3, r3
 80068c2:	2b22      	cmp	r3, #34	; 0x22
 80068c4:	d11d      	bne.n	8006902 <UART_Receive_IT+0x46>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80068c6:	6883      	ldr	r3, [r0, #8]
 80068c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068cc:	d006      	beq.n	80068dc <UART_Receive_IT+0x20>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80068ce:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80068d0:	b17b      	cbz	r3, 80068f2 <UART_Receive_IT+0x36>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80068d2:	6803      	ldr	r3, [r0, #0]
 80068d4:	685b      	ldr	r3, [r3, #4]
 80068d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068da:	e01a      	b.n	8006912 <UART_Receive_IT+0x56>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80068dc:	6903      	ldr	r3, [r0, #16]
 80068de:	b9a3      	cbnz	r3, 800690a <UART_Receive_IT+0x4e>
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80068e0:	6a82      	ldr	r2, [r0, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80068e2:	6803      	ldr	r3, [r0, #0]
 80068e4:	685b      	ldr	r3, [r3, #4]
 80068e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068ea:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 80068ec:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80068ee:	3302      	adds	r3, #2
 80068f0:	e012      	b.n	8006918 <UART_Receive_IT+0x5c>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80068f2:	6903      	ldr	r3, [r0, #16]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d1ec      	bne.n	80068d2 <UART_Receive_IT+0x16>
 80068f8:	e008      	b.n	800690c <UART_Receive_IT+0x50>
        HAL_UART_RxCpltCallback(huart);
 80068fa:	f7ff ffd4 	bl	80068a6 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 80068fe:	2000      	movs	r0, #0
 8006900:	e048      	b.n	8006994 <UART_Receive_IT+0xd8>
    return HAL_BUSY;
 8006902:	2002      	movs	r0, #2
 8006904:	4770      	bx	lr
    return HAL_OK;
 8006906:	2000      	movs	r0, #0
}
 8006908:	4770      	bx	lr
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800690a:	6a82      	ldr	r2, [r0, #40]	; 0x28
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800690c:	6803      	ldr	r3, [r0, #0]
 800690e:	685b      	ldr	r3, [r3, #4]
 8006910:	b2db      	uxtb	r3, r3
 8006912:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 8006914:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006916:	3301      	adds	r3, #1
      huart->pRxBuffPtr += 2U;
 8006918:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 800691a:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 800691c:	3b01      	subs	r3, #1
 800691e:	b29b      	uxth	r3, r3
 8006920:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8006922:	2b00      	cmp	r3, #0
 8006924:	d1ef      	bne.n	8006906 <UART_Receive_IT+0x4a>
{
 8006926:	b500      	push	{lr}
 8006928:	b083      	sub	sp, #12
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800692a:	6802      	ldr	r2, [r0, #0]
 800692c:	68d3      	ldr	r3, [r2, #12]
 800692e:	f023 0320 	bic.w	r3, r3, #32
 8006932:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006934:	6802      	ldr	r2, [r0, #0]
 8006936:	68d3      	ldr	r3, [r2, #12]
 8006938:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800693c:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800693e:	6802      	ldr	r2, [r0, #0]
 8006940:	6953      	ldr	r3, [r2, #20]
 8006942:	f023 0301 	bic.w	r3, r3, #1
 8006946:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8006948:	2320      	movs	r3, #32
 800694a:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800694e:	2300      	movs	r3, #0
 8006950:	6343      	str	r3, [r0, #52]	; 0x34
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006952:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8006954:	2b01      	cmp	r3, #1
 8006956:	d1d0      	bne.n	80068fa <UART_Receive_IT+0x3e>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006958:	2300      	movs	r3, #0
 800695a:	6303      	str	r3, [r0, #48]	; 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800695c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800695e:	f102 030c 	add.w	r3, r2, #12
 8006962:	e853 3f00 	ldrex	r3, [r3]
 8006966:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800696a:	320c      	adds	r2, #12
 800696c:	e842 3100 	strex	r1, r3, [r2]
 8006970:	2900      	cmp	r1, #0
 8006972:	d1f3      	bne.n	800695c <UART_Receive_IT+0xa0>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006974:	6803      	ldr	r3, [r0, #0]
 8006976:	681a      	ldr	r2, [r3, #0]
 8006978:	f012 0f10 	tst.w	r2, #16
 800697c:	d006      	beq.n	800698c <UART_Receive_IT+0xd0>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800697e:	2200      	movs	r2, #0
 8006980:	9201      	str	r2, [sp, #4]
 8006982:	681a      	ldr	r2, [r3, #0]
 8006984:	9201      	str	r2, [sp, #4]
 8006986:	685b      	ldr	r3, [r3, #4]
 8006988:	9301      	str	r3, [sp, #4]
 800698a:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800698c:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 800698e:	f7ff ff94 	bl	80068ba <HAL_UARTEx_RxEventCallback>
      return HAL_OK;
 8006992:	2000      	movs	r0, #0
}
 8006994:	b003      	add	sp, #12
 8006996:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800699c <HAL_UART_IRQHandler>:
{
 800699c:	b510      	push	{r4, lr}
 800699e:	b082      	sub	sp, #8
 80069a0:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80069a2:	6802      	ldr	r2, [r0, #0]
 80069a4:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80069a6:	68d1      	ldr	r1, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80069a8:	6950      	ldr	r0, [r2, #20]
  if (errorflags == RESET)
 80069aa:	f013 0f0f 	tst.w	r3, #15
 80069ae:	d109      	bne.n	80069c4 <HAL_UART_IRQHandler+0x28>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80069b0:	f013 0f20 	tst.w	r3, #32
 80069b4:	d00d      	beq.n	80069d2 <HAL_UART_IRQHandler+0x36>
 80069b6:	f011 0f20 	tst.w	r1, #32
 80069ba:	d00a      	beq.n	80069d2 <HAL_UART_IRQHandler+0x36>
      UART_Receive_IT(huart);
 80069bc:	4620      	mov	r0, r4
 80069be:	f7ff ff7d 	bl	80068bc <UART_Receive_IT>
      return;
 80069c2:	e017      	b.n	80069f4 <HAL_UART_IRQHandler+0x58>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80069c4:	f000 0001 	and.w	r0, r0, #1
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80069c8:	f401 7c90 	and.w	ip, r1, #288	; 0x120
 80069cc:	ea5c 0c00 	orrs.w	ip, ip, r0
 80069d0:	d112      	bne.n	80069f8 <HAL_UART_IRQHandler+0x5c>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069d2:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80069d4:	2801      	cmp	r0, #1
 80069d6:	d07f      	beq.n	8006ad8 <HAL_UART_IRQHandler+0x13c>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80069d8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80069dc:	d003      	beq.n	80069e6 <HAL_UART_IRQHandler+0x4a>
 80069de:	f011 0f80 	tst.w	r1, #128	; 0x80
 80069e2:	f040 8119 	bne.w	8006c18 <HAL_UART_IRQHandler+0x27c>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80069e6:	f013 0f40 	tst.w	r3, #64	; 0x40
 80069ea:	d003      	beq.n	80069f4 <HAL_UART_IRQHandler+0x58>
 80069ec:	f011 0f40 	tst.w	r1, #64	; 0x40
 80069f0:	f040 813f 	bne.w	8006c72 <HAL_UART_IRQHandler+0x2d6>
}
 80069f4:	b002      	add	sp, #8
 80069f6:	bd10      	pop	{r4, pc}
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80069f8:	f013 0f01 	tst.w	r3, #1
 80069fc:	d006      	beq.n	8006a0c <HAL_UART_IRQHandler+0x70>
 80069fe:	f411 7f80 	tst.w	r1, #256	; 0x100
 8006a02:	d003      	beq.n	8006a0c <HAL_UART_IRQHandler+0x70>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006a04:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8006a06:	f042 0201 	orr.w	r2, r2, #1
 8006a0a:	6462      	str	r2, [r4, #68]	; 0x44
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006a0c:	f013 0f04 	tst.w	r3, #4
 8006a10:	d02f      	beq.n	8006a72 <HAL_UART_IRQHandler+0xd6>
 8006a12:	b158      	cbz	r0, 8006a2c <HAL_UART_IRQHandler+0x90>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006a14:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8006a16:	f042 0202 	orr.w	r2, r2, #2
 8006a1a:	6462      	str	r2, [r4, #68]	; 0x44
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006a1c:	f013 0f02 	tst.w	r3, #2
 8006a20:	f000 8132 	beq.w	8006c88 <HAL_UART_IRQHandler+0x2ec>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006a24:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8006a26:	f042 0204 	orr.w	r2, r2, #4
 8006a2a:	6462      	str	r2, [r4, #68]	; 0x44
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006a2c:	f013 0f08 	tst.w	r3, #8
 8006a30:	d007      	beq.n	8006a42 <HAL_UART_IRQHandler+0xa6>
 8006a32:	f001 0220 	and.w	r2, r1, #32
 8006a36:	4302      	orrs	r2, r0
 8006a38:	d003      	beq.n	8006a42 <HAL_UART_IRQHandler+0xa6>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006a3a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8006a3c:	f042 0208 	orr.w	r2, r2, #8
 8006a40:	6462      	str	r2, [r4, #68]	; 0x44
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006a42:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8006a44:	2a00      	cmp	r2, #0
 8006a46:	d0d5      	beq.n	80069f4 <HAL_UART_IRQHandler+0x58>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006a48:	f013 0f20 	tst.w	r3, #32
 8006a4c:	d002      	beq.n	8006a54 <HAL_UART_IRQHandler+0xb8>
 8006a4e:	f011 0f20 	tst.w	r1, #32
 8006a52:	d114      	bne.n	8006a7e <HAL_UART_IRQHandler+0xe2>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006a54:	6823      	ldr	r3, [r4, #0]
 8006a56:	695b      	ldr	r3, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006a58:	6c62      	ldr	r2, [r4, #68]	; 0x44
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006a5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006a5e:	f002 0208 	and.w	r2, r2, #8
 8006a62:	4313      	orrs	r3, r2
 8006a64:	d10f      	bne.n	8006a86 <HAL_UART_IRQHandler+0xea>
        HAL_UART_ErrorCallback(huart);
 8006a66:	4620      	mov	r0, r4
 8006a68:	f7ff ff1e 	bl	80068a8 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	6463      	str	r3, [r4, #68]	; 0x44
 8006a70:	e7c0      	b.n	80069f4 <HAL_UART_IRQHandler+0x58>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006a72:	f013 0f02 	tst.w	r3, #2
 8006a76:	d0d9      	beq.n	8006a2c <HAL_UART_IRQHandler+0x90>
 8006a78:	2800      	cmp	r0, #0
 8006a7a:	d0d7      	beq.n	8006a2c <HAL_UART_IRQHandler+0x90>
 8006a7c:	e7d2      	b.n	8006a24 <HAL_UART_IRQHandler+0x88>
        UART_Receive_IT(huart);
 8006a7e:	4620      	mov	r0, r4
 8006a80:	f7ff ff1c 	bl	80068bc <UART_Receive_IT>
 8006a84:	e7e6      	b.n	8006a54 <HAL_UART_IRQHandler+0xb8>
        UART_EndRxTransfer(huart);
 8006a86:	4620      	mov	r0, r4
 8006a88:	f7ff fe4c 	bl	8006724 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a8c:	6823      	ldr	r3, [r4, #0]
 8006a8e:	695b      	ldr	r3, [r3, #20]
 8006a90:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006a94:	d01c      	beq.n	8006ad0 <HAL_UART_IRQHandler+0x134>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a96:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a98:	f102 0314 	add.w	r3, r2, #20
 8006a9c:	e853 3f00 	ldrex	r3, [r3]
 8006aa0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aa4:	3214      	adds	r2, #20
 8006aa6:	e842 3100 	strex	r1, r3, [r2]
 8006aaa:	2900      	cmp	r1, #0
 8006aac:	d1f3      	bne.n	8006a96 <HAL_UART_IRQHandler+0xfa>
          if (huart->hdmarx != NULL)
 8006aae:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006ab0:	b153      	cbz	r3, 8006ac8 <HAL_UART_IRQHandler+0x12c>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006ab2:	4a78      	ldr	r2, [pc, #480]	; (8006c94 <HAL_UART_IRQHandler+0x2f8>)
 8006ab4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006ab6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8006ab8:	f7fc fdea 	bl	8003690 <HAL_DMA_Abort_IT>
 8006abc:	2800      	cmp	r0, #0
 8006abe:	d099      	beq.n	80069f4 <HAL_UART_IRQHandler+0x58>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006ac0:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8006ac2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006ac4:	4798      	blx	r3
 8006ac6:	e795      	b.n	80069f4 <HAL_UART_IRQHandler+0x58>
            HAL_UART_ErrorCallback(huart);
 8006ac8:	4620      	mov	r0, r4
 8006aca:	f7ff feed 	bl	80068a8 <HAL_UART_ErrorCallback>
 8006ace:	e791      	b.n	80069f4 <HAL_UART_IRQHandler+0x58>
          HAL_UART_ErrorCallback(huart);
 8006ad0:	4620      	mov	r0, r4
 8006ad2:	f7ff fee9 	bl	80068a8 <HAL_UART_ErrorCallback>
 8006ad6:	e78d      	b.n	80069f4 <HAL_UART_IRQHandler+0x58>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006ad8:	f013 0f10 	tst.w	r3, #16
 8006adc:	f43f af7c 	beq.w	80069d8 <HAL_UART_IRQHandler+0x3c>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006ae0:	f011 0f10 	tst.w	r1, #16
 8006ae4:	f43f af78 	beq.w	80069d8 <HAL_UART_IRQHandler+0x3c>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006ae8:	2300      	movs	r3, #0
 8006aea:	9301      	str	r3, [sp, #4]
 8006aec:	6813      	ldr	r3, [r2, #0]
 8006aee:	9301      	str	r3, [sp, #4]
 8006af0:	6853      	ldr	r3, [r2, #4]
 8006af2:	9301      	str	r3, [sp, #4]
 8006af4:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006af6:	6953      	ldr	r3, [r2, #20]
 8006af8:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006afc:	d050      	beq.n	8006ba0 <HAL_UART_IRQHandler+0x204>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006afe:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8006b00:	6813      	ldr	r3, [r2, #0]
 8006b02:	685b      	ldr	r3, [r3, #4]
 8006b04:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	f43f af74 	beq.w	80069f4 <HAL_UART_IRQHandler+0x58>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006b0c:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8006b0e:	4299      	cmp	r1, r3
 8006b10:	f67f af70 	bls.w	80069f4 <HAL_UART_IRQHandler+0x58>
        huart->RxXferCount = nb_remaining_rx_data;
 8006b14:	85e3      	strh	r3, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006b16:	6993      	ldr	r3, [r2, #24]
 8006b18:	2b20      	cmp	r3, #32
 8006b1a:	d037      	beq.n	8006b8c <HAL_UART_IRQHandler+0x1f0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b1c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b1e:	f102 030c 	add.w	r3, r2, #12
 8006b22:	e853 3f00 	ldrex	r3, [r3]
 8006b26:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b2a:	320c      	adds	r2, #12
 8006b2c:	e842 3100 	strex	r1, r3, [r2]
 8006b30:	2900      	cmp	r1, #0
 8006b32:	d1f3      	bne.n	8006b1c <HAL_UART_IRQHandler+0x180>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b34:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b36:	f102 0314 	add.w	r3, r2, #20
 8006b3a:	e853 3f00 	ldrex	r3, [r3]
 8006b3e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b42:	3214      	adds	r2, #20
 8006b44:	e842 3100 	strex	r1, r3, [r2]
 8006b48:	2900      	cmp	r1, #0
 8006b4a:	d1f3      	bne.n	8006b34 <HAL_UART_IRQHandler+0x198>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b4c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b4e:	f102 0314 	add.w	r3, r2, #20
 8006b52:	e853 3f00 	ldrex	r3, [r3]
 8006b56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b5a:	3214      	adds	r2, #20
 8006b5c:	e842 3100 	strex	r1, r3, [r2]
 8006b60:	2900      	cmp	r1, #0
 8006b62:	d1f3      	bne.n	8006b4c <HAL_UART_IRQHandler+0x1b0>
          huart->RxState = HAL_UART_STATE_READY;
 8006b64:	2320      	movs	r3, #32
 8006b66:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	6323      	str	r3, [r4, #48]	; 0x30
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b6e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b70:	f102 030c 	add.w	r3, r2, #12
 8006b74:	e853 3f00 	ldrex	r3, [r3]
 8006b78:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b7c:	320c      	adds	r2, #12
 8006b7e:	e842 3100 	strex	r1, r3, [r2]
 8006b82:	2900      	cmp	r1, #0
 8006b84:	d1f3      	bne.n	8006b6e <HAL_UART_IRQHandler+0x1d2>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006b86:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8006b88:	f7fc fd60 	bl	800364c <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006b8c:	2302      	movs	r3, #2
 8006b8e:	6363      	str	r3, [r4, #52]	; 0x34
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006b90:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8006b92:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8006b94:	1ac9      	subs	r1, r1, r3
 8006b96:	b289      	uxth	r1, r1
 8006b98:	4620      	mov	r0, r4
 8006b9a:	f7ff fe8e 	bl	80068ba <HAL_UARTEx_RxEventCallback>
 8006b9e:	e729      	b.n	80069f4 <HAL_UART_IRQHandler+0x58>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006ba0:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8006ba2:	b29a      	uxth	r2, r3
      if ((huart->RxXferCount > 0U)
 8006ba4:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8006ba6:	b29b      	uxth	r3, r3
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	f43f af23 	beq.w	80069f4 <HAL_UART_IRQHandler+0x58>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006bae:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8006bb0:	1a89      	subs	r1, r1, r2
 8006bb2:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8006bb4:	2900      	cmp	r1, #0
 8006bb6:	f43f af1d 	beq.w	80069f4 <HAL_UART_IRQHandler+0x58>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006bba:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bbc:	f102 030c 	add.w	r3, r2, #12
 8006bc0:	e853 3f00 	ldrex	r3, [r3]
 8006bc4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bc8:	320c      	adds	r2, #12
 8006bca:	e842 3000 	strex	r0, r3, [r2]
 8006bce:	2800      	cmp	r0, #0
 8006bd0:	d1f3      	bne.n	8006bba <HAL_UART_IRQHandler+0x21e>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bd2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bd4:	f102 0314 	add.w	r3, r2, #20
 8006bd8:	e853 3f00 	ldrex	r3, [r3]
 8006bdc:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006be0:	3214      	adds	r2, #20
 8006be2:	e842 3000 	strex	r0, r3, [r2]
 8006be6:	2800      	cmp	r0, #0
 8006be8:	d1f3      	bne.n	8006bd2 <HAL_UART_IRQHandler+0x236>
        huart->RxState = HAL_UART_STATE_READY;
 8006bea:	2320      	movs	r3, #32
 8006bec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	6323      	str	r3, [r4, #48]	; 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bf4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bf6:	f102 030c 	add.w	r3, r2, #12
 8006bfa:	e853 3f00 	ldrex	r3, [r3]
 8006bfe:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c02:	320c      	adds	r2, #12
 8006c04:	e842 3000 	strex	r0, r3, [r2]
 8006c08:	2800      	cmp	r0, #0
 8006c0a:	d1f3      	bne.n	8006bf4 <HAL_UART_IRQHandler+0x258>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006c0c:	2302      	movs	r3, #2
 8006c0e:	6363      	str	r3, [r4, #52]	; 0x34
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006c10:	4620      	mov	r0, r4
 8006c12:	f7ff fe52 	bl	80068ba <HAL_UARTEx_RxEventCallback>
 8006c16:	e6ed      	b.n	80069f4 <HAL_UART_IRQHandler+0x58>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006c18:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8006c1c:	b2db      	uxtb	r3, r3
 8006c1e:	2b21      	cmp	r3, #33	; 0x21
 8006c20:	f47f aee8 	bne.w	80069f4 <HAL_UART_IRQHandler+0x58>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c24:	68a3      	ldr	r3, [r4, #8]
 8006c26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c2a:	d016      	beq.n	8006c5a <HAL_UART_IRQHandler+0x2be>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006c2c:	6a23      	ldr	r3, [r4, #32]
 8006c2e:	1c59      	adds	r1, r3, #1
 8006c30:	6221      	str	r1, [r4, #32]
 8006c32:	781b      	ldrb	r3, [r3, #0]
 8006c34:	6053      	str	r3, [r2, #4]
    if (--huart->TxXferCount == 0U)
 8006c36:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8006c38:	3b01      	subs	r3, #1
 8006c3a:	b29b      	uxth	r3, r3
 8006c3c:	84e3      	strh	r3, [r4, #38]	; 0x26
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	f47f aed8 	bne.w	80069f4 <HAL_UART_IRQHandler+0x58>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006c44:	6822      	ldr	r2, [r4, #0]
 8006c46:	68d3      	ldr	r3, [r2, #12]
 8006c48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c4c:	60d3      	str	r3, [r2, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006c4e:	6822      	ldr	r2, [r4, #0]
 8006c50:	68d3      	ldr	r3, [r2, #12]
 8006c52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c56:	60d3      	str	r3, [r2, #12]
 8006c58:	e6cc      	b.n	80069f4 <HAL_UART_IRQHandler+0x58>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c5a:	6923      	ldr	r3, [r4, #16]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d1e5      	bne.n	8006c2c <HAL_UART_IRQHandler+0x290>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006c60:	6a23      	ldr	r3, [r4, #32]
 8006c62:	881b      	ldrh	r3, [r3, #0]
 8006c64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c68:	6053      	str	r3, [r2, #4]
      huart->pTxBuffPtr += 2U;
 8006c6a:	6a23      	ldr	r3, [r4, #32]
 8006c6c:	3302      	adds	r3, #2
 8006c6e:	6223      	str	r3, [r4, #32]
 8006c70:	e7e1      	b.n	8006c36 <HAL_UART_IRQHandler+0x29a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006c72:	68d3      	ldr	r3, [r2, #12]
 8006c74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c78:	60d3      	str	r3, [r2, #12]
  huart->gState = HAL_UART_STATE_READY;
 8006c7a:	2320      	movs	r3, #32
 8006c7c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  HAL_UART_TxCpltCallback(huart);
 8006c80:	4620      	mov	r0, r4
 8006c82:	f7ff fe0f 	bl	80068a4 <HAL_UART_TxCpltCallback>
  return HAL_OK;
 8006c86:	e6b5      	b.n	80069f4 <HAL_UART_IRQHandler+0x58>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006c88:	f013 0f08 	tst.w	r3, #8
 8006c8c:	f47f aed5 	bne.w	8006a3a <HAL_UART_IRQHandler+0x9e>
 8006c90:	e6d7      	b.n	8006a42 <HAL_UART_IRQHandler+0xa6>
 8006c92:	bf00      	nop
 8006c94:	080068ab 	.word	0x080068ab

08006c98 <UART_Start_Receive_IT>:
  huart->pRxBuffPtr = pData;
 8006c98:	6281      	str	r1, [r0, #40]	; 0x28
  huart->RxXferSize = Size;
 8006c9a:	8582      	strh	r2, [r0, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006c9c:	85c2      	strh	r2, [r0, #46]	; 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	6443      	str	r3, [r0, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006ca2:	2322      	movs	r3, #34	; 0x22
 8006ca4:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006ca8:	6903      	ldr	r3, [r0, #16]
 8006caa:	b123      	cbz	r3, 8006cb6 <UART_Start_Receive_IT+0x1e>
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006cac:	6802      	ldr	r2, [r0, #0]
 8006cae:	68d3      	ldr	r3, [r2, #12]
 8006cb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006cb4:	60d3      	str	r3, [r2, #12]
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006cb6:	6802      	ldr	r2, [r0, #0]
 8006cb8:	6953      	ldr	r3, [r2, #20]
 8006cba:	f043 0301 	orr.w	r3, r3, #1
 8006cbe:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006cc0:	6802      	ldr	r2, [r0, #0]
 8006cc2:	68d3      	ldr	r3, [r2, #12]
 8006cc4:	f043 0320 	orr.w	r3, r3, #32
 8006cc8:	60d3      	str	r3, [r2, #12]
}
 8006cca:	2000      	movs	r0, #0
 8006ccc:	4770      	bx	lr

08006cce <HAL_UART_Receive_IT>:
{
 8006cce:	b508      	push	{r3, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8006cd0:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 8006cd4:	b2db      	uxtb	r3, r3
 8006cd6:	2b20      	cmp	r3, #32
 8006cd8:	d108      	bne.n	8006cec <HAL_UART_Receive_IT+0x1e>
    if ((pData == NULL) || (Size == 0U))
 8006cda:	b149      	cbz	r1, 8006cf0 <HAL_UART_Receive_IT+0x22>
 8006cdc:	b90a      	cbnz	r2, 8006ce2 <HAL_UART_Receive_IT+0x14>
      return HAL_ERROR;
 8006cde:	2001      	movs	r0, #1
}
 8006ce0:	bd08      	pop	{r3, pc}
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	6303      	str	r3, [r0, #48]	; 0x30
    return (UART_Start_Receive_IT(huart, pData, Size));
 8006ce6:	f7ff ffd7 	bl	8006c98 <UART_Start_Receive_IT>
 8006cea:	e7f9      	b.n	8006ce0 <HAL_UART_Receive_IT+0x12>
    return HAL_BUSY;
 8006cec:	2002      	movs	r0, #2
 8006cee:	e7f7      	b.n	8006ce0 <HAL_UART_Receive_IT+0x12>
      return HAL_ERROR;
 8006cf0:	2001      	movs	r0, #1
 8006cf2:	e7f5      	b.n	8006ce0 <HAL_UART_Receive_IT+0x12>

08006cf4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006cf4:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8006cf6:	f000 fa65 	bl	80071c4 <vTaskStartScheduler>
  
  return osOK;
}
 8006cfa:	2000      	movs	r0, #0
 8006cfc:	bd08      	pop	{r3, pc}

08006cfe <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006cfe:	b570      	push	{r4, r5, r6, lr}
 8006d00:	b086      	sub	sp, #24
 8006d02:	4684      	mov	ip, r0
 8006d04:	460b      	mov	r3, r1
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006d06:	6944      	ldr	r4, [r0, #20]
 8006d08:	b1bc      	cbz	r4, 8006d3a <osThreadCreate+0x3c>
 8006d0a:	6985      	ldr	r5, [r0, #24]
 8006d0c:	b1ad      	cbz	r5, 8006d3a <osThreadCreate+0x3c>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006d0e:	6840      	ldr	r0, [r0, #4]
 8006d10:	f8dc 1000 	ldr.w	r1, [ip]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006d14:	f8dc 2010 	ldr.w	r2, [ip, #16]
 8006d18:	f9bc c008 	ldrsh.w	ip, [ip, #8]
  if (priority != osPriorityError) {
 8006d1c:	f1bc 0f84 	cmp.w	ip, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 8006d20:	bf14      	ite	ne
 8006d22:	f10c 0603 	addne.w	r6, ip, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006d26:	2600      	moveq	r6, #0
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006d28:	9502      	str	r5, [sp, #8]
 8006d2a:	9401      	str	r4, [sp, #4]
 8006d2c:	9600      	str	r6, [sp, #0]
 8006d2e:	f000 f9dd 	bl	80070ec <xTaskCreateStatic>
 8006d32:	9005      	str	r0, [sp, #20]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006d34:	9805      	ldr	r0, [sp, #20]
}
 8006d36:	b006      	add	sp, #24
 8006d38:	bd70      	pop	{r4, r5, r6, pc}
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006d3a:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8006d3e:	f8dc 1000 	ldr.w	r1, [ip]
 8006d42:	f8bc 2010 	ldrh.w	r2, [ip, #16]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006d46:	f9bc c008 	ldrsh.w	ip, [ip, #8]
  if (priority != osPriorityError) {
 8006d4a:	f1bc 0f84 	cmp.w	ip, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 8006d4e:	bf14      	ite	ne
 8006d50:	f10c 0403 	addne.w	r4, ip, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006d54:	2400      	moveq	r4, #0
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006d56:	ad05      	add	r5, sp, #20
 8006d58:	9501      	str	r5, [sp, #4]
 8006d5a:	9400      	str	r4, [sp, #0]
 8006d5c:	f000 fa00 	bl	8007160 <xTaskCreate>
 8006d60:	2801      	cmp	r0, #1
 8006d62:	d0e7      	beq.n	8006d34 <osThreadCreate+0x36>
      return NULL;
 8006d64:	2000      	movs	r0, #0
 8006d66:	e7e6      	b.n	8006d36 <osThreadCreate+0x38>

08006d68 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006d68:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006d6a:	2801      	cmp	r0, #1
 8006d6c:	bf38      	it	cc
 8006d6e:	2001      	movcc	r0, #1
 8006d70:	f000 fb86 	bl	8007480 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006d74:	2000      	movs	r0, #0
 8006d76:	bd08      	pop	{r3, pc}

08006d78 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d78:	f100 0308 	add.w	r3, r0, #8
 8006d7c:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006d7e:	f04f 32ff 	mov.w	r2, #4294967295
 8006d82:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d84:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d86:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006d88:	2300      	movs	r3, #0
 8006d8a:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006d8c:	4770      	bx	lr

08006d8e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8006d8e:	2300      	movs	r3, #0
 8006d90:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006d92:	4770      	bx	lr

08006d94 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8006d94:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006d96:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006d98:	689a      	ldr	r2, [r3, #8]
 8006d9a:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006d9c:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006d9e:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006da0:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8006da2:	6803      	ldr	r3, [r0, #0]
 8006da4:	3301      	adds	r3, #1
 8006da6:	6003      	str	r3, [r0, #0]
}
 8006da8:	4770      	bx	lr

08006daa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006daa:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006dac:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006dae:	f1b5 3fff 	cmp.w	r5, #4294967295
 8006db2:	d011      	beq.n	8006dd8 <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006db4:	f100 0308 	add.w	r3, r0, #8
 8006db8:	461c      	mov	r4, r3
 8006dba:	685b      	ldr	r3, [r3, #4]
 8006dbc:	681a      	ldr	r2, [r3, #0]
 8006dbe:	42aa      	cmp	r2, r5
 8006dc0:	d9fa      	bls.n	8006db8 <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006dc2:	6863      	ldr	r3, [r4, #4]
 8006dc4:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006dc6:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006dc8:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8006dca:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006dcc:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8006dce:	6803      	ldr	r3, [r0, #0]
 8006dd0:	3301      	adds	r3, #1
 8006dd2:	6003      	str	r3, [r0, #0]
}
 8006dd4:	bc30      	pop	{r4, r5}
 8006dd6:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8006dd8:	6904      	ldr	r4, [r0, #16]
 8006dda:	e7f2      	b.n	8006dc2 <vListInsert+0x18>

08006ddc <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8006ddc:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006dde:	6841      	ldr	r1, [r0, #4]
 8006de0:	6882      	ldr	r2, [r0, #8]
 8006de2:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006de4:	6841      	ldr	r1, [r0, #4]
 8006de6:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006de8:	685a      	ldr	r2, [r3, #4]
 8006dea:	4282      	cmp	r2, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006dec:	bf04      	itt	eq
 8006dee:	6882      	ldreq	r2, [r0, #8]
 8006df0:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8006df2:	2200      	movs	r2, #0
 8006df4:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8006df6:	681a      	ldr	r2, [r3, #0]
 8006df8:	3a01      	subs	r2, #1
 8006dfa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006dfc:	6818      	ldr	r0, [r3, #0]
}
 8006dfe:	4770      	bx	lr

08006e00 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006e00:	4b08      	ldr	r3, [pc, #32]	; (8006e24 <prvResetNextTaskUnblockTime+0x24>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	b923      	cbnz	r3, 8006e12 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006e08:	4b07      	ldr	r3, [pc, #28]	; (8006e28 <prvResetNextTaskUnblockTime+0x28>)
 8006e0a:	f04f 32ff 	mov.w	r2, #4294967295
 8006e0e:	601a      	str	r2, [r3, #0]
 8006e10:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006e12:	4b04      	ldr	r3, [pc, #16]	; (8006e24 <prvResetNextTaskUnblockTime+0x24>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006e18:	68db      	ldr	r3, [r3, #12]
 8006e1a:	685a      	ldr	r2, [r3, #4]
 8006e1c:	4b02      	ldr	r3, [pc, #8]	; (8006e28 <prvResetNextTaskUnblockTime+0x28>)
 8006e1e:	601a      	str	r2, [r3, #0]
	}
}
 8006e20:	4770      	bx	lr
 8006e22:	bf00      	nop
 8006e24:	20000d68 	.word	0x20000d68
 8006e28:	20000e3c 	.word	0x20000e3c

08006e2c <prvInitialiseNewTask>:
{
 8006e2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e30:	4606      	mov	r6, r0
 8006e32:	461f      	mov	r7, r3
 8006e34:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8006e38:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006e3a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8006e3e:	3a01      	subs	r2, #1
 8006e40:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8006e42:	eb05 0582 	add.w	r5, r5, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006e46:	f025 0507 	bic.w	r5, r5, #7
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006e4a:	f101 3cff 	add.w	ip, r1, #4294967295
 8006e4e:	f104 0e33 	add.w	lr, r4, #51	; 0x33
 8006e52:	310f      	adds	r1, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006e54:	f81c 2f01 	ldrb.w	r2, [ip, #1]!
 8006e58:	f80e 2f01 	strb.w	r2, [lr, #1]!
		if( pcName[ x ] == 0x00 )
 8006e5c:	b10a      	cbz	r2, 8006e62 <prvInitialiseNewTask+0x36>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006e5e:	458c      	cmp	ip, r1
 8006e60:	d1f8      	bne.n	8006e54 <prvInitialiseNewTask+0x28>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006e62:	f04f 0a00 	mov.w	sl, #0
 8006e66:	f884 a043 	strb.w	sl, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006e6a:	9b08      	ldr	r3, [sp, #32]
 8006e6c:	2b06      	cmp	r3, #6
 8006e6e:	bf28      	it	cs
 8006e70:	2306      	movcs	r3, #6
 8006e72:	4699      	mov	r9, r3
	pxNewTCB->uxPriority = uxPriority;
 8006e74:	62e3      	str	r3, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8006e76:	6463      	str	r3, [r4, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006e78:	f8c4 a048 	str.w	sl, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006e7c:	1d20      	adds	r0, r4, #4
 8006e7e:	f7ff ff86 	bl	8006d8e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006e82:	f104 0018 	add.w	r0, r4, #24
 8006e86:	f7ff ff82 	bl	8006d8e <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006e8a:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e8c:	f1c9 0307 	rsb	r3, r9, #7
 8006e90:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006e92:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 8006e94:	f8c4 a04c 	str.w	sl, [r4, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006e98:	f884 a050 	strb.w	sl, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006e9c:	463a      	mov	r2, r7
 8006e9e:	4631      	mov	r1, r6
 8006ea0:	4628      	mov	r0, r5
 8006ea2:	f000 fb8d 	bl	80075c0 <pxPortInitialiseStack>
 8006ea6:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8006ea8:	f1b8 0f00 	cmp.w	r8, #0
 8006eac:	d001      	beq.n	8006eb2 <prvInitialiseNewTask+0x86>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006eae:	f8c8 4000 	str.w	r4, [r8]
}
 8006eb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08006eb8 <prvAddNewTaskToReadyList>:
{
 8006eb8:	b570      	push	{r4, r5, r6, lr}
 8006eba:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8006ebc:	f000 fbaa 	bl	8007614 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8006ec0:	4a2f      	ldr	r2, [pc, #188]	; (8006f80 <prvAddNewTaskToReadyList+0xc8>)
 8006ec2:	6813      	ldr	r3, [r2, #0]
 8006ec4:	3301      	adds	r3, #1
 8006ec6:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006ec8:	4b2e      	ldr	r3, [pc, #184]	; (8006f84 <prvAddNewTaskToReadyList+0xcc>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d033      	beq.n	8006f38 <prvAddNewTaskToReadyList+0x80>
			if( xSchedulerRunning == pdFALSE )
 8006ed0:	4b2d      	ldr	r3, [pc, #180]	; (8006f88 <prvAddNewTaskToReadyList+0xd0>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	b93b      	cbnz	r3, 8006ee6 <prvAddNewTaskToReadyList+0x2e>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006ed6:	4b2b      	ldr	r3, [pc, #172]	; (8006f84 <prvAddNewTaskToReadyList+0xcc>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006edc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006ede:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8006ee0:	bf9c      	itt	ls
 8006ee2:	4b28      	ldrls	r3, [pc, #160]	; (8006f84 <prvAddNewTaskToReadyList+0xcc>)
 8006ee4:	601c      	strls	r4, [r3, #0]
		uxTaskNumber++;
 8006ee6:	4a29      	ldr	r2, [pc, #164]	; (8006f8c <prvAddNewTaskToReadyList+0xd4>)
 8006ee8:	6813      	ldr	r3, [r2, #0]
 8006eea:	3301      	adds	r3, #1
 8006eec:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8006eee:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8006ef0:	4a27      	ldr	r2, [pc, #156]	; (8006f90 <prvAddNewTaskToReadyList+0xd8>)
 8006ef2:	6811      	ldr	r1, [r2, #0]
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	4083      	lsls	r3, r0
 8006ef8:	430b      	orrs	r3, r1
 8006efa:	6013      	str	r3, [r2, #0]
 8006efc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006f00:	1d21      	adds	r1, r4, #4
 8006f02:	4b24      	ldr	r3, [pc, #144]	; (8006f94 <prvAddNewTaskToReadyList+0xdc>)
 8006f04:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006f08:	f7ff ff44 	bl	8006d94 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8006f0c:	f000 fba4 	bl	8007658 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8006f10:	4b1d      	ldr	r3, [pc, #116]	; (8006f88 <prvAddNewTaskToReadyList+0xd0>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	b17b      	cbz	r3, 8006f36 <prvAddNewTaskToReadyList+0x7e>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006f16:	4b1b      	ldr	r3, [pc, #108]	; (8006f84 <prvAddNewTaskToReadyList+0xcc>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f1c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006f1e:	429a      	cmp	r2, r3
 8006f20:	d209      	bcs.n	8006f36 <prvAddNewTaskToReadyList+0x7e>
			taskYIELD_IF_USING_PREEMPTION();
 8006f22:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006f26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f2a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006f2e:	f3bf 8f4f 	dsb	sy
 8006f32:	f3bf 8f6f 	isb	sy
}
 8006f36:	bd70      	pop	{r4, r5, r6, pc}
			pxCurrentTCB = pxNewTCB;
 8006f38:	4b12      	ldr	r3, [pc, #72]	; (8006f84 <prvAddNewTaskToReadyList+0xcc>)
 8006f3a:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006f3c:	6813      	ldr	r3, [r2, #0]
 8006f3e:	2b01      	cmp	r3, #1
 8006f40:	d1d1      	bne.n	8006ee6 <prvAddNewTaskToReadyList+0x2e>
 8006f42:	4d14      	ldr	r5, [pc, #80]	; (8006f94 <prvAddNewTaskToReadyList+0xdc>)
 8006f44:	f105 068c 	add.w	r6, r5, #140	; 0x8c
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006f48:	4628      	mov	r0, r5
 8006f4a:	f7ff ff15 	bl	8006d78 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006f4e:	3514      	adds	r5, #20
 8006f50:	42b5      	cmp	r5, r6
 8006f52:	d1f9      	bne.n	8006f48 <prvAddNewTaskToReadyList+0x90>
	vListInitialise( &xDelayedTaskList1 );
 8006f54:	4e10      	ldr	r6, [pc, #64]	; (8006f98 <prvAddNewTaskToReadyList+0xe0>)
 8006f56:	4630      	mov	r0, r6
 8006f58:	f7ff ff0e 	bl	8006d78 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006f5c:	4d0f      	ldr	r5, [pc, #60]	; (8006f9c <prvAddNewTaskToReadyList+0xe4>)
 8006f5e:	4628      	mov	r0, r5
 8006f60:	f7ff ff0a 	bl	8006d78 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006f64:	480e      	ldr	r0, [pc, #56]	; (8006fa0 <prvAddNewTaskToReadyList+0xe8>)
 8006f66:	f7ff ff07 	bl	8006d78 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8006f6a:	480e      	ldr	r0, [pc, #56]	; (8006fa4 <prvAddNewTaskToReadyList+0xec>)
 8006f6c:	f7ff ff04 	bl	8006d78 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8006f70:	480d      	ldr	r0, [pc, #52]	; (8006fa8 <prvAddNewTaskToReadyList+0xf0>)
 8006f72:	f7ff ff01 	bl	8006d78 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8006f76:	4b0d      	ldr	r3, [pc, #52]	; (8006fac <prvAddNewTaskToReadyList+0xf4>)
 8006f78:	601e      	str	r6, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006f7a:	4b0d      	ldr	r3, [pc, #52]	; (8006fb0 <prvAddNewTaskToReadyList+0xf8>)
 8006f7c:	601d      	str	r5, [r3, #0]
}
 8006f7e:	e7b2      	b.n	8006ee6 <prvAddNewTaskToReadyList+0x2e>
 8006f80:	20000dfc 	.word	0x20000dfc
 8006f84:	20000d64 	.word	0x20000d64
 8006f88:	20000e58 	.word	0x20000e58
 8006f8c:	20000e0c 	.word	0x20000e0c
 8006f90:	20000e10 	.word	0x20000e10
 8006f94:	20000d70 	.word	0x20000d70
 8006f98:	20000e14 	.word	0x20000e14
 8006f9c:	20000e28 	.word	0x20000e28
 8006fa0:	20000e44 	.word	0x20000e44
 8006fa4:	20000e70 	.word	0x20000e70
 8006fa8:	20000e5c 	.word	0x20000e5c
 8006fac:	20000d68 	.word	0x20000d68
 8006fb0:	20000d6c 	.word	0x20000d6c

08006fb4 <prvDeleteTCB>:
	{
 8006fb4:	b510      	push	{r4, lr}
 8006fb6:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006fb8:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8006fbc:	b163      	cbz	r3, 8006fd8 <prvDeleteTCB+0x24>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006fbe:	2b01      	cmp	r3, #1
 8006fc0:	d011      	beq.n	8006fe6 <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006fc2:	2b02      	cmp	r3, #2
 8006fc4:	d00e      	beq.n	8006fe4 <prvDeleteTCB+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fca:	f383 8811 	msr	BASEPRI, r3
 8006fce:	f3bf 8f6f 	isb	sy
 8006fd2:	f3bf 8f4f 	dsb	sy
 8006fd6:	e7fe      	b.n	8006fd6 <prvDeleteTCB+0x22>
				vPortFree( pxTCB->pxStack );
 8006fd8:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8006fda:	f000 fccd 	bl	8007978 <vPortFree>
				vPortFree( pxTCB );
 8006fde:	4620      	mov	r0, r4
 8006fe0:	f000 fcca 	bl	8007978 <vPortFree>
	}
 8006fe4:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 8006fe6:	f000 fcc7 	bl	8007978 <vPortFree>
 8006fea:	e7fb      	b.n	8006fe4 <prvDeleteTCB+0x30>

08006fec <prvIdleTask>:
{
 8006fec:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006fee:	4c15      	ldr	r4, [pc, #84]	; (8007044 <prvIdleTask+0x58>)
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006ff0:	4f15      	ldr	r7, [pc, #84]	; (8007048 <prvIdleTask+0x5c>)
				--uxCurrentNumberOfTasks;
 8006ff2:	4e16      	ldr	r6, [pc, #88]	; (800704c <prvIdleTask+0x60>)
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006ff4:	f8df 8058 	ldr.w	r8, [pc, #88]	; 8007050 <prvIdleTask+0x64>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006ff8:	6823      	ldr	r3, [r4, #0]
 8006ffa:	b1a3      	cbz	r3, 8007026 <prvIdleTask+0x3a>
			taskENTER_CRITICAL();
 8006ffc:	f000 fb0a 	bl	8007614 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007004:	1d28      	adds	r0, r5, #4
 8007006:	f7ff fee9 	bl	8006ddc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800700a:	6833      	ldr	r3, [r6, #0]
 800700c:	3b01      	subs	r3, #1
 800700e:	6033      	str	r3, [r6, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007010:	6823      	ldr	r3, [r4, #0]
 8007012:	3b01      	subs	r3, #1
 8007014:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8007016:	f000 fb1f 	bl	8007658 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 800701a:	4628      	mov	r0, r5
 800701c:	f7ff ffca 	bl	8006fb4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007020:	6823      	ldr	r3, [r4, #0]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d1ea      	bne.n	8006ffc <prvIdleTask+0x10>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007026:	f8d8 3000 	ldr.w	r3, [r8]
 800702a:	2b01      	cmp	r3, #1
 800702c:	d9e4      	bls.n	8006ff8 <prvIdleTask+0xc>
				taskYIELD();
 800702e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007032:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007036:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800703a:	f3bf 8f4f 	dsb	sy
 800703e:	f3bf 8f6f 	isb	sy
 8007042:	e7d9      	b.n	8006ff8 <prvIdleTask+0xc>
 8007044:	20000e00 	.word	0x20000e00
 8007048:	20000e70 	.word	0x20000e70
 800704c:	20000dfc 	.word	0x20000dfc
 8007050:	20000d70 	.word	0x20000d70

08007054 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007054:	b570      	push	{r4, r5, r6, lr}
 8007056:	4604      	mov	r4, r0
 8007058:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800705a:	4b1d      	ldr	r3, [pc, #116]	; (80070d0 <prvAddCurrentTaskToDelayedList+0x7c>)
 800705c:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800705e:	4b1d      	ldr	r3, [pc, #116]	; (80070d4 <prvAddCurrentTaskToDelayedList+0x80>)
 8007060:	6818      	ldr	r0, [r3, #0]
 8007062:	3004      	adds	r0, #4
 8007064:	f7ff feba 	bl	8006ddc <uxListRemove>
 8007068:	b948      	cbnz	r0, 800707e <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800706a:	4b1a      	ldr	r3, [pc, #104]	; (80070d4 <prvAddCurrentTaskToDelayedList+0x80>)
 800706c:	681a      	ldr	r2, [r3, #0]
 800706e:	491a      	ldr	r1, [pc, #104]	; (80070d8 <prvAddCurrentTaskToDelayedList+0x84>)
 8007070:	680b      	ldr	r3, [r1, #0]
 8007072:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 8007074:	2201      	movs	r2, #1
 8007076:	4082      	lsls	r2, r0
 8007078:	ea23 0302 	bic.w	r3, r3, r2
 800707c:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800707e:	f1b4 3fff 	cmp.w	r4, #4294967295
 8007082:	d00d      	beq.n	80070a0 <prvAddCurrentTaskToDelayedList+0x4c>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007084:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007086:	4b13      	ldr	r3, [pc, #76]	; (80070d4 <prvAddCurrentTaskToDelayedList+0x80>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 800708c:	42a6      	cmp	r6, r4
 800708e:	d910      	bls.n	80070b2 <prvAddCurrentTaskToDelayedList+0x5e>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007090:	4b12      	ldr	r3, [pc, #72]	; (80070dc <prvAddCurrentTaskToDelayedList+0x88>)
 8007092:	6818      	ldr	r0, [r3, #0]
 8007094:	4b0f      	ldr	r3, [pc, #60]	; (80070d4 <prvAddCurrentTaskToDelayedList+0x80>)
 8007096:	6819      	ldr	r1, [r3, #0]
 8007098:	3104      	adds	r1, #4
 800709a:	f7ff fe86 	bl	8006daa <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800709e:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80070a0:	2d00      	cmp	r5, #0
 80070a2:	d0ef      	beq.n	8007084 <prvAddCurrentTaskToDelayedList+0x30>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80070a4:	4b0b      	ldr	r3, [pc, #44]	; (80070d4 <prvAddCurrentTaskToDelayedList+0x80>)
 80070a6:	6819      	ldr	r1, [r3, #0]
 80070a8:	3104      	adds	r1, #4
 80070aa:	480d      	ldr	r0, [pc, #52]	; (80070e0 <prvAddCurrentTaskToDelayedList+0x8c>)
 80070ac:	f7ff fe72 	bl	8006d94 <vListInsertEnd>
 80070b0:	e7f5      	b.n	800709e <prvAddCurrentTaskToDelayedList+0x4a>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80070b2:	4b0c      	ldr	r3, [pc, #48]	; (80070e4 <prvAddCurrentTaskToDelayedList+0x90>)
 80070b4:	6818      	ldr	r0, [r3, #0]
 80070b6:	4b07      	ldr	r3, [pc, #28]	; (80070d4 <prvAddCurrentTaskToDelayedList+0x80>)
 80070b8:	6819      	ldr	r1, [r3, #0]
 80070ba:	3104      	adds	r1, #4
 80070bc:	f7ff fe75 	bl	8006daa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80070c0:	4b09      	ldr	r3, [pc, #36]	; (80070e8 <prvAddCurrentTaskToDelayedList+0x94>)
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	42a3      	cmp	r3, r4
					xNextTaskUnblockTime = xTimeToWake;
 80070c6:	bf84      	itt	hi
 80070c8:	4b07      	ldrhi	r3, [pc, #28]	; (80070e8 <prvAddCurrentTaskToDelayedList+0x94>)
 80070ca:	601c      	strhi	r4, [r3, #0]
}
 80070cc:	e7e7      	b.n	800709e <prvAddCurrentTaskToDelayedList+0x4a>
 80070ce:	bf00      	nop
 80070d0:	20000e84 	.word	0x20000e84
 80070d4:	20000d64 	.word	0x20000d64
 80070d8:	20000e10 	.word	0x20000e10
 80070dc:	20000d6c 	.word	0x20000d6c
 80070e0:	20000e5c 	.word	0x20000e5c
 80070e4:	20000d68 	.word	0x20000d68
 80070e8:	20000e3c 	.word	0x20000e3c

080070ec <xTaskCreateStatic>:
	{
 80070ec:	b530      	push	{r4, r5, lr}
 80070ee:	b087      	sub	sp, #28
 80070f0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 80070f2:	b17c      	cbz	r4, 8007114 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80070f4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80070f6:	b1b5      	cbz	r5, 8007126 <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 80070f8:	2554      	movs	r5, #84	; 0x54
 80070fa:	9504      	str	r5, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80070fc:	9d04      	ldr	r5, [sp, #16]
 80070fe:	2d54      	cmp	r5, #84	; 0x54
 8007100:	d01a      	beq.n	8007138 <xTaskCreateStatic+0x4c>
 8007102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007106:	f383 8811 	msr	BASEPRI, r3
 800710a:	f3bf 8f6f 	isb	sy
 800710e:	f3bf 8f4f 	dsb	sy
 8007112:	e7fe      	b.n	8007112 <xTaskCreateStatic+0x26>
 8007114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007118:	f383 8811 	msr	BASEPRI, r3
 800711c:	f3bf 8f6f 	isb	sy
 8007120:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 8007124:	e7fe      	b.n	8007124 <xTaskCreateStatic+0x38>
 8007126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800712a:	f383 8811 	msr	BASEPRI, r3
 800712e:	f3bf 8f6f 	isb	sy
 8007132:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 8007136:	e7fe      	b.n	8007136 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007138:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800713a:	632c      	str	r4, [r5, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800713c:	2402      	movs	r4, #2
 800713e:	f885 4051 	strb.w	r4, [r5, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007142:	2400      	movs	r4, #0
 8007144:	9403      	str	r4, [sp, #12]
 8007146:	9502      	str	r5, [sp, #8]
 8007148:	ac05      	add	r4, sp, #20
 800714a:	9401      	str	r4, [sp, #4]
 800714c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800714e:	9400      	str	r4, [sp, #0]
 8007150:	f7ff fe6c 	bl	8006e2c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007154:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007156:	f7ff feaf 	bl	8006eb8 <prvAddNewTaskToReadyList>
	}
 800715a:	9805      	ldr	r0, [sp, #20]
 800715c:	b007      	add	sp, #28
 800715e:	bd30      	pop	{r4, r5, pc}

08007160 <xTaskCreate>:
	{
 8007160:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007164:	b085      	sub	sp, #20
 8007166:	4607      	mov	r7, r0
 8007168:	4688      	mov	r8, r1
 800716a:	4614      	mov	r4, r2
 800716c:	461e      	mov	r6, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800716e:	0090      	lsls	r0, r2, #2
 8007170:	f000 fb6c 	bl	800784c <pvPortMalloc>
			if( pxStack != NULL )
 8007174:	b308      	cbz	r0, 80071ba <xTaskCreate+0x5a>
 8007176:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8007178:	2054      	movs	r0, #84	; 0x54
 800717a:	f000 fb67 	bl	800784c <pvPortMalloc>
				if( pxNewTCB != NULL )
 800717e:	4605      	mov	r5, r0
 8007180:	b1a8      	cbz	r0, 80071ae <xTaskCreate+0x4e>
					pxNewTCB->pxStack = pxStack;
 8007182:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007186:	2300      	movs	r3, #0
 8007188:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800718c:	9303      	str	r3, [sp, #12]
 800718e:	9002      	str	r0, [sp, #8]
 8007190:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007192:	9301      	str	r3, [sp, #4]
 8007194:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007196:	9300      	str	r3, [sp, #0]
 8007198:	4633      	mov	r3, r6
 800719a:	4622      	mov	r2, r4
 800719c:	4641      	mov	r1, r8
 800719e:	4638      	mov	r0, r7
 80071a0:	f7ff fe44 	bl	8006e2c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80071a4:	4628      	mov	r0, r5
 80071a6:	f7ff fe87 	bl	8006eb8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80071aa:	2001      	movs	r0, #1
 80071ac:	e007      	b.n	80071be <xTaskCreate+0x5e>
					vPortFree( pxStack );
 80071ae:	4648      	mov	r0, r9
 80071b0:	f000 fbe2 	bl	8007978 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80071b4:	f04f 30ff 	mov.w	r0, #4294967295
 80071b8:	e001      	b.n	80071be <xTaskCreate+0x5e>
 80071ba:	f04f 30ff 	mov.w	r0, #4294967295
	}
 80071be:	b005      	add	sp, #20
 80071c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080071c4 <vTaskStartScheduler>:
{
 80071c4:	b510      	push	{r4, lr}
 80071c6:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80071c8:	2400      	movs	r4, #0
 80071ca:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80071cc:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80071ce:	aa07      	add	r2, sp, #28
 80071d0:	a906      	add	r1, sp, #24
 80071d2:	a805      	add	r0, sp, #20
 80071d4:	f7fa ff30 	bl	8002038 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80071d8:	9b05      	ldr	r3, [sp, #20]
 80071da:	9302      	str	r3, [sp, #8]
 80071dc:	9b06      	ldr	r3, [sp, #24]
 80071de:	9301      	str	r3, [sp, #4]
 80071e0:	9400      	str	r4, [sp, #0]
 80071e2:	4623      	mov	r3, r4
 80071e4:	9a07      	ldr	r2, [sp, #28]
 80071e6:	490d      	ldr	r1, [pc, #52]	; (800721c <vTaskStartScheduler+0x58>)
 80071e8:	480d      	ldr	r0, [pc, #52]	; (8007220 <vTaskStartScheduler+0x5c>)
 80071ea:	f7ff ff7f 	bl	80070ec <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 80071ee:	b190      	cbz	r0, 8007216 <vTaskStartScheduler+0x52>
 80071f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071f4:	f383 8811 	msr	BASEPRI, r3
 80071f8:	f3bf 8f6f 	isb	sy
 80071fc:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8007200:	4b08      	ldr	r3, [pc, #32]	; (8007224 <vTaskStartScheduler+0x60>)
 8007202:	f04f 32ff 	mov.w	r2, #4294967295
 8007206:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007208:	4b07      	ldr	r3, [pc, #28]	; (8007228 <vTaskStartScheduler+0x64>)
 800720a:	2201      	movs	r2, #1
 800720c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800720e:	4b07      	ldr	r3, [pc, #28]	; (800722c <vTaskStartScheduler+0x68>)
 8007210:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8007212:	f000 fa89 	bl	8007728 <xPortStartScheduler>
}
 8007216:	b008      	add	sp, #32
 8007218:	bd10      	pop	{r4, pc}
 800721a:	bf00      	nop
 800721c:	0800cbcc 	.word	0x0800cbcc
 8007220:	08006fed 	.word	0x08006fed
 8007224:	20000e3c 	.word	0x20000e3c
 8007228:	20000e58 	.word	0x20000e58
 800722c:	20000e84 	.word	0x20000e84

08007230 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8007230:	4a02      	ldr	r2, [pc, #8]	; (800723c <vTaskSuspendAll+0xc>)
 8007232:	6813      	ldr	r3, [r2, #0]
 8007234:	3301      	adds	r3, #1
 8007236:	6013      	str	r3, [r2, #0]
}
 8007238:	4770      	bx	lr
 800723a:	bf00      	nop
 800723c:	20000e08 	.word	0x20000e08

08007240 <xTaskIncrementTick>:
{
 8007240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007244:	4b41      	ldr	r3, [pc, #260]	; (800734c <xTaskIncrementTick+0x10c>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d171      	bne.n	8007330 <xTaskIncrementTick+0xf0>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800724c:	4b40      	ldr	r3, [pc, #256]	; (8007350 <xTaskIncrementTick+0x110>)
 800724e:	681e      	ldr	r6, [r3, #0]
 8007250:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
 8007252:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007254:	b9c6      	cbnz	r6, 8007288 <xTaskIncrementTick+0x48>
			taskSWITCH_DELAYED_LISTS();
 8007256:	4b3f      	ldr	r3, [pc, #252]	; (8007354 <xTaskIncrementTick+0x114>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	b143      	cbz	r3, 8007270 <xTaskIncrementTick+0x30>
 800725e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007262:	f383 8811 	msr	BASEPRI, r3
 8007266:	f3bf 8f6f 	isb	sy
 800726a:	f3bf 8f4f 	dsb	sy
 800726e:	e7fe      	b.n	800726e <xTaskIncrementTick+0x2e>
 8007270:	4a38      	ldr	r2, [pc, #224]	; (8007354 <xTaskIncrementTick+0x114>)
 8007272:	6811      	ldr	r1, [r2, #0]
 8007274:	4b38      	ldr	r3, [pc, #224]	; (8007358 <xTaskIncrementTick+0x118>)
 8007276:	6818      	ldr	r0, [r3, #0]
 8007278:	6010      	str	r0, [r2, #0]
 800727a:	6019      	str	r1, [r3, #0]
 800727c:	4a37      	ldr	r2, [pc, #220]	; (800735c <xTaskIncrementTick+0x11c>)
 800727e:	6813      	ldr	r3, [r2, #0]
 8007280:	3301      	adds	r3, #1
 8007282:	6013      	str	r3, [r2, #0]
 8007284:	f7ff fdbc 	bl	8006e00 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007288:	4b35      	ldr	r3, [pc, #212]	; (8007360 <xTaskIncrementTick+0x120>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	42b3      	cmp	r3, r6
 800728e:	d842      	bhi.n	8007316 <xTaskIncrementTick+0xd6>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007290:	4b30      	ldr	r3, [pc, #192]	; (8007354 <xTaskIncrementTick+0x114>)
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	b13b      	cbz	r3, 80072a8 <xTaskIncrementTick+0x68>
BaseType_t xSwitchRequired = pdFALSE;
 8007298:	2500      	movs	r5, #0
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800729a:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8007354 <xTaskIncrementTick+0x114>
					prvAddTaskToReadyList( pxTCB );
 800729e:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8007364 <xTaskIncrementTick+0x124>
 80072a2:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007368 <xTaskIncrementTick+0x128>
 80072a6:	e023      	b.n	80072f0 <xTaskIncrementTick+0xb0>
BaseType_t xSwitchRequired = pdFALSE;
 80072a8:	2500      	movs	r5, #0
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072aa:	4b2d      	ldr	r3, [pc, #180]	; (8007360 <xTaskIncrementTick+0x120>)
 80072ac:	f04f 32ff 	mov.w	r2, #4294967295
 80072b0:	601a      	str	r2, [r3, #0]
					break;
 80072b2:	e031      	b.n	8007318 <xTaskIncrementTick+0xd8>
						xNextTaskUnblockTime = xItemValue;
 80072b4:	4a2a      	ldr	r2, [pc, #168]	; (8007360 <xTaskIncrementTick+0x120>)
 80072b6:	6013      	str	r3, [r2, #0]
						break;
 80072b8:	e02e      	b.n	8007318 <xTaskIncrementTick+0xd8>
					prvAddTaskToReadyList( pxTCB );
 80072ba:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80072bc:	f8d9 2000 	ldr.w	r2, [r9]
 80072c0:	2301      	movs	r3, #1
 80072c2:	4083      	lsls	r3, r0
 80072c4:	4313      	orrs	r3, r2
 80072c6:	f8c9 3000 	str.w	r3, [r9]
 80072ca:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80072ce:	4639      	mov	r1, r7
 80072d0:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
 80072d4:	f7ff fd5e 	bl	8006d94 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80072d8:	4b24      	ldr	r3, [pc, #144]	; (800736c <xTaskIncrementTick+0x12c>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80072de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 80072e0:	429a      	cmp	r2, r3
 80072e2:	bf28      	it	cs
 80072e4:	2501      	movcs	r5, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80072e6:	f8d8 3000 	ldr.w	r3, [r8]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d0dc      	beq.n	80072aa <xTaskIncrementTick+0x6a>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80072f0:	f8d8 3000 	ldr.w	r3, [r8]
 80072f4:	68db      	ldr	r3, [r3, #12]
 80072f6:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80072f8:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 80072fa:	429e      	cmp	r6, r3
 80072fc:	d3da      	bcc.n	80072b4 <xTaskIncrementTick+0x74>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80072fe:	1d27      	adds	r7, r4, #4
 8007300:	4638      	mov	r0, r7
 8007302:	f7ff fd6b 	bl	8006ddc <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007306:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007308:	2b00      	cmp	r3, #0
 800730a:	d0d6      	beq.n	80072ba <xTaskIncrementTick+0x7a>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800730c:	f104 0018 	add.w	r0, r4, #24
 8007310:	f7ff fd64 	bl	8006ddc <uxListRemove>
 8007314:	e7d1      	b.n	80072ba <xTaskIncrementTick+0x7a>
BaseType_t xSwitchRequired = pdFALSE;
 8007316:	2500      	movs	r5, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007318:	4b14      	ldr	r3, [pc, #80]	; (800736c <xTaskIncrementTick+0x12c>)
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800731e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007322:	009b      	lsls	r3, r3, #2
 8007324:	4a10      	ldr	r2, [pc, #64]	; (8007368 <xTaskIncrementTick+0x128>)
 8007326:	58d3      	ldr	r3, [r2, r3]
				xSwitchRequired = pdTRUE;
 8007328:	2b02      	cmp	r3, #2
 800732a:	bf28      	it	cs
 800732c:	2501      	movcs	r5, #1
 800732e:	e004      	b.n	800733a <xTaskIncrementTick+0xfa>
		++uxPendedTicks;
 8007330:	4a0f      	ldr	r2, [pc, #60]	; (8007370 <xTaskIncrementTick+0x130>)
 8007332:	6813      	ldr	r3, [r2, #0]
 8007334:	3301      	adds	r3, #1
 8007336:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8007338:	2500      	movs	r5, #0
		if( xYieldPending != pdFALSE )
 800733a:	4b0e      	ldr	r3, [pc, #56]	; (8007374 <xTaskIncrementTick+0x134>)
 800733c:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
 800733e:	2b00      	cmp	r3, #0
}
 8007340:	bf0c      	ite	eq
 8007342:	4628      	moveq	r0, r5
 8007344:	2001      	movne	r0, #1
 8007346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800734a:	bf00      	nop
 800734c:	20000e08 	.word	0x20000e08
 8007350:	20000e84 	.word	0x20000e84
 8007354:	20000d68 	.word	0x20000d68
 8007358:	20000d6c 	.word	0x20000d6c
 800735c:	20000e40 	.word	0x20000e40
 8007360:	20000e3c 	.word	0x20000e3c
 8007364:	20000e10 	.word	0x20000e10
 8007368:	20000d70 	.word	0x20000d70
 800736c:	20000d64 	.word	0x20000d64
 8007370:	20000e04 	.word	0x20000e04
 8007374:	20000e88 	.word	0x20000e88

08007378 <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
 8007378:	4b39      	ldr	r3, [pc, #228]	; (8007460 <xTaskResumeAll+0xe8>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	b943      	cbnz	r3, 8007390 <xTaskResumeAll+0x18>
 800737e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007382:	f383 8811 	msr	BASEPRI, r3
 8007386:	f3bf 8f6f 	isb	sy
 800738a:	f3bf 8f4f 	dsb	sy
 800738e:	e7fe      	b.n	800738e <xTaskResumeAll+0x16>
{
 8007390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	taskENTER_CRITICAL();
 8007394:	f000 f93e 	bl	8007614 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8007398:	4b31      	ldr	r3, [pc, #196]	; (8007460 <xTaskResumeAll+0xe8>)
 800739a:	681a      	ldr	r2, [r3, #0]
 800739c:	3a01      	subs	r2, #1
 800739e:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d14a      	bne.n	800743c <xTaskResumeAll+0xc4>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80073a6:	4b2f      	ldr	r3, [pc, #188]	; (8007464 <xTaskResumeAll+0xec>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d04c      	beq.n	8007448 <xTaskResumeAll+0xd0>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80073ae:	4b2e      	ldr	r3, [pc, #184]	; (8007468 <xTaskResumeAll+0xf0>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d04c      	beq.n	8007450 <xTaskResumeAll+0xd8>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80073b6:	4f2c      	ldr	r7, [pc, #176]	; (8007468 <xTaskResumeAll+0xf0>)
					prvAddTaskToReadyList( pxTCB );
 80073b8:	4e2c      	ldr	r6, [pc, #176]	; (800746c <xTaskResumeAll+0xf4>)
 80073ba:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 8007470 <xTaskResumeAll+0xf8>
 80073be:	e002      	b.n	80073c6 <xTaskResumeAll+0x4e>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d042      	beq.n	800744c <xTaskResumeAll+0xd4>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80073ca:	f104 0018 	add.w	r0, r4, #24
 80073ce:	f7ff fd05 	bl	8006ddc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80073d2:	1d25      	adds	r5, r4, #4
 80073d4:	4628      	mov	r0, r5
 80073d6:	f7ff fd01 	bl	8006ddc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80073da:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80073dc:	6832      	ldr	r2, [r6, #0]
 80073de:	2301      	movs	r3, #1
 80073e0:	4083      	lsls	r3, r0
 80073e2:	4313      	orrs	r3, r2
 80073e4:	6033      	str	r3, [r6, #0]
 80073e6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80073ea:	4629      	mov	r1, r5
 80073ec:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 80073f0:	f7ff fcd0 	bl	8006d94 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80073f4:	4b1f      	ldr	r3, [pc, #124]	; (8007474 <xTaskResumeAll+0xfc>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80073fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073fc:	429a      	cmp	r2, r3
 80073fe:	d3df      	bcc.n	80073c0 <xTaskResumeAll+0x48>
						xYieldPending = pdTRUE;
 8007400:	4b1d      	ldr	r3, [pc, #116]	; (8007478 <xTaskResumeAll+0x100>)
 8007402:	2201      	movs	r2, #1
 8007404:	601a      	str	r2, [r3, #0]
 8007406:	e7db      	b.n	80073c0 <xTaskResumeAll+0x48>
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007408:	3c01      	subs	r4, #1
 800740a:	d005      	beq.n	8007418 <xTaskResumeAll+0xa0>
							if( xTaskIncrementTick() != pdFALSE )
 800740c:	f7ff ff18 	bl	8007240 <xTaskIncrementTick>
 8007410:	2800      	cmp	r0, #0
 8007412:	d0f9      	beq.n	8007408 <xTaskResumeAll+0x90>
								xYieldPending = pdTRUE;
 8007414:	6035      	str	r5, [r6, #0]
 8007416:	e7f7      	b.n	8007408 <xTaskResumeAll+0x90>
						uxPendedTicks = 0;
 8007418:	4b18      	ldr	r3, [pc, #96]	; (800747c <xTaskResumeAll+0x104>)
 800741a:	2200      	movs	r2, #0
 800741c:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
 800741e:	4b16      	ldr	r3, [pc, #88]	; (8007478 <xTaskResumeAll+0x100>)
 8007420:	681c      	ldr	r4, [r3, #0]
 8007422:	b164      	cbz	r4, 800743e <xTaskResumeAll+0xc6>
					taskYIELD_IF_USING_PREEMPTION();
 8007424:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007428:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800742c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8007430:	f3bf 8f4f 	dsb	sy
 8007434:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8007438:	2401      	movs	r4, #1
 800743a:	e000      	b.n	800743e <xTaskResumeAll+0xc6>
BaseType_t xAlreadyYielded = pdFALSE;
 800743c:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800743e:	f000 f90b 	bl	8007658 <vPortExitCritical>
}
 8007442:	4620      	mov	r0, r4
 8007444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
BaseType_t xAlreadyYielded = pdFALSE;
 8007448:	2400      	movs	r4, #0
 800744a:	e7f8      	b.n	800743e <xTaskResumeAll+0xc6>
					prvResetNextTaskUnblockTime();
 800744c:	f7ff fcd8 	bl	8006e00 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007450:	4b0a      	ldr	r3, [pc, #40]	; (800747c <xTaskResumeAll+0x104>)
 8007452:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007454:	2c00      	cmp	r4, #0
 8007456:	d0e2      	beq.n	800741e <xTaskResumeAll+0xa6>
								xYieldPending = pdTRUE;
 8007458:	4e07      	ldr	r6, [pc, #28]	; (8007478 <xTaskResumeAll+0x100>)
 800745a:	2501      	movs	r5, #1
 800745c:	e7d6      	b.n	800740c <xTaskResumeAll+0x94>
 800745e:	bf00      	nop
 8007460:	20000e08 	.word	0x20000e08
 8007464:	20000dfc 	.word	0x20000dfc
 8007468:	20000e44 	.word	0x20000e44
 800746c:	20000e10 	.word	0x20000e10
 8007470:	20000d70 	.word	0x20000d70
 8007474:	20000d64 	.word	0x20000d64
 8007478:	20000e88 	.word	0x20000e88
 800747c:	20000e04 	.word	0x20000e04

08007480 <vTaskDelay>:
	{
 8007480:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007482:	b1a8      	cbz	r0, 80074b0 <vTaskDelay+0x30>
 8007484:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 8007486:	4b10      	ldr	r3, [pc, #64]	; (80074c8 <vTaskDelay+0x48>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	b143      	cbz	r3, 800749e <vTaskDelay+0x1e>
 800748c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007490:	f383 8811 	msr	BASEPRI, r3
 8007494:	f3bf 8f6f 	isb	sy
 8007498:	f3bf 8f4f 	dsb	sy
 800749c:	e7fe      	b.n	800749c <vTaskDelay+0x1c>
			vTaskSuspendAll();
 800749e:	f7ff fec7 	bl	8007230 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80074a2:	2100      	movs	r1, #0
 80074a4:	4620      	mov	r0, r4
 80074a6:	f7ff fdd5 	bl	8007054 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 80074aa:	f7ff ff65 	bl	8007378 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 80074ae:	b948      	cbnz	r0, 80074c4 <vTaskDelay+0x44>
			portYIELD_WITHIN_API();
 80074b0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80074b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074b8:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80074bc:	f3bf 8f4f 	dsb	sy
 80074c0:	f3bf 8f6f 	isb	sy
	}
 80074c4:	bd10      	pop	{r4, pc}
 80074c6:	bf00      	nop
 80074c8:	20000e08 	.word	0x20000e08

080074cc <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80074cc:	4b1f      	ldr	r3, [pc, #124]	; (800754c <vTaskSwitchContext+0x80>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	b11b      	cbz	r3, 80074da <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 80074d2:	4b1f      	ldr	r3, [pc, #124]	; (8007550 <vTaskSwitchContext+0x84>)
 80074d4:	2201      	movs	r2, #1
 80074d6:	601a      	str	r2, [r3, #0]
 80074d8:	4770      	bx	lr
		xYieldPending = pdFALSE;
 80074da:	4b1d      	ldr	r3, [pc, #116]	; (8007550 <vTaskSwitchContext+0x84>)
 80074dc:	2200      	movs	r2, #0
 80074de:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80074e0:	4b1c      	ldr	r3, [pc, #112]	; (8007554 <vTaskSwitchContext+0x88>)
 80074e2:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80074e4:	fab3 f383 	clz	r3, r3
 80074e8:	b2db      	uxtb	r3, r3
 80074ea:	f1c3 031f 	rsb	r3, r3, #31
 80074ee:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80074f2:	0092      	lsls	r2, r2, #2
 80074f4:	4918      	ldr	r1, [pc, #96]	; (8007558 <vTaskSwitchContext+0x8c>)
 80074f6:	588a      	ldr	r2, [r1, r2]
 80074f8:	b942      	cbnz	r2, 800750c <vTaskSwitchContext+0x40>
	__asm volatile
 80074fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074fe:	f383 8811 	msr	BASEPRI, r3
 8007502:	f3bf 8f6f 	isb	sy
 8007506:	f3bf 8f4f 	dsb	sy
 800750a:	e7fe      	b.n	800750a <vTaskSwitchContext+0x3e>
 800750c:	4a12      	ldr	r2, [pc, #72]	; (8007558 <vTaskSwitchContext+0x8c>)
 800750e:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8007512:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8007516:	6848      	ldr	r0, [r1, #4]
 8007518:	6840      	ldr	r0, [r0, #4]
 800751a:	6048      	str	r0, [r1, #4]
 800751c:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8007520:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8007524:	3208      	adds	r2, #8
 8007526:	4290      	cmp	r0, r2
 8007528:	d009      	beq.n	800753e <vTaskSwitchContext+0x72>
 800752a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800752e:	4a0a      	ldr	r2, [pc, #40]	; (8007558 <vTaskSwitchContext+0x8c>)
 8007530:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007534:	685b      	ldr	r3, [r3, #4]
 8007536:	68da      	ldr	r2, [r3, #12]
 8007538:	4b08      	ldr	r3, [pc, #32]	; (800755c <vTaskSwitchContext+0x90>)
 800753a:	601a      	str	r2, [r3, #0]
}
 800753c:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800753e:	6840      	ldr	r0, [r0, #4]
 8007540:	4a05      	ldr	r2, [pc, #20]	; (8007558 <vTaskSwitchContext+0x8c>)
 8007542:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8007546:	6050      	str	r0, [r2, #4]
 8007548:	e7ef      	b.n	800752a <vTaskSwitchContext+0x5e>
 800754a:	bf00      	nop
 800754c:	20000e08 	.word	0x20000e08
 8007550:	20000e88 	.word	0x20000e88
 8007554:	20000e10 	.word	0x20000e10
 8007558:	20000d70 	.word	0x20000d70
 800755c:	20000d64 	.word	0x20000d64

08007560 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007560:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
 8007562:	2300      	movs	r3, #0
 8007564:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007566:	4b0d      	ldr	r3, [pc, #52]	; (800759c <prvTaskExitError+0x3c>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800756e:	d008      	beq.n	8007582 <prvTaskExitError+0x22>
 8007570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007574:	f383 8811 	msr	BASEPRI, r3
 8007578:	f3bf 8f6f 	isb	sy
 800757c:	f3bf 8f4f 	dsb	sy
 8007580:	e7fe      	b.n	8007580 <prvTaskExitError+0x20>
 8007582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007586:	f383 8811 	msr	BASEPRI, r3
 800758a:	f3bf 8f6f 	isb	sy
 800758e:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007592:	9b01      	ldr	r3, [sp, #4]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d0fc      	beq.n	8007592 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007598:	b002      	add	sp, #8
 800759a:	4770      	bx	lr
 800759c:	20000014 	.word	0x20000014

080075a0 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80075a0:	4806      	ldr	r0, [pc, #24]	; (80075bc <prvPortStartFirstTask+0x1c>)
 80075a2:	6800      	ldr	r0, [r0, #0]
 80075a4:	6800      	ldr	r0, [r0, #0]
 80075a6:	f380 8808 	msr	MSP, r0
 80075aa:	b662      	cpsie	i
 80075ac:	b661      	cpsie	f
 80075ae:	f3bf 8f4f 	dsb	sy
 80075b2:	f3bf 8f6f 	isb	sy
 80075b6:	df00      	svc	0
 80075b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80075ba:	0000      	.short	0x0000
 80075bc:	e000ed08 	.word	0xe000ed08

080075c0 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80075c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80075c4:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80075c8:	f021 0101 	bic.w	r1, r1, #1
 80075cc:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80075d0:	4b03      	ldr	r3, [pc, #12]	; (80075e0 <pxPortInitialiseStack+0x20>)
 80075d2:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80075d6:	f840 2c20 	str.w	r2, [r0, #-32]
}
 80075da:	3840      	subs	r0, #64	; 0x40
 80075dc:	4770      	bx	lr
 80075de:	bf00      	nop
 80075e0:	08007561 	.word	0x08007561
	...

080075f0 <SVC_Handler>:
	__asm volatile (
 80075f0:	4b07      	ldr	r3, [pc, #28]	; (8007610 <pxCurrentTCBConst2>)
 80075f2:	6819      	ldr	r1, [r3, #0]
 80075f4:	6808      	ldr	r0, [r1, #0]
 80075f6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80075fa:	f380 8809 	msr	PSP, r0
 80075fe:	f3bf 8f6f 	isb	sy
 8007602:	f04f 0000 	mov.w	r0, #0
 8007606:	f380 8811 	msr	BASEPRI, r0
 800760a:	f04e 0e0d 	orr.w	lr, lr, #13
 800760e:	4770      	bx	lr

08007610 <pxCurrentTCBConst2>:
 8007610:	20000d64 	.word	0x20000d64

08007614 <vPortEnterCritical>:
 8007614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007618:	f383 8811 	msr	BASEPRI, r3
 800761c:	f3bf 8f6f 	isb	sy
 8007620:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007624:	4a0b      	ldr	r2, [pc, #44]	; (8007654 <vPortEnterCritical+0x40>)
 8007626:	6813      	ldr	r3, [r2, #0]
 8007628:	3301      	adds	r3, #1
 800762a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800762c:	2b01      	cmp	r3, #1
 800762e:	d000      	beq.n	8007632 <vPortEnterCritical+0x1e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
	}
}
 8007630:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007632:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007636:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 800763a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800763e:	d0f7      	beq.n	8007630 <vPortEnterCritical+0x1c>
 8007640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007644:	f383 8811 	msr	BASEPRI, r3
 8007648:	f3bf 8f6f 	isb	sy
 800764c:	f3bf 8f4f 	dsb	sy
 8007650:	e7fe      	b.n	8007650 <vPortEnterCritical+0x3c>
 8007652:	bf00      	nop
 8007654:	20000014 	.word	0x20000014

08007658 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 8007658:	4b09      	ldr	r3, [pc, #36]	; (8007680 <vPortExitCritical+0x28>)
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	b943      	cbnz	r3, 8007670 <vPortExitCritical+0x18>
 800765e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007662:	f383 8811 	msr	BASEPRI, r3
 8007666:	f3bf 8f6f 	isb	sy
 800766a:	f3bf 8f4f 	dsb	sy
 800766e:	e7fe      	b.n	800766e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8007670:	3b01      	subs	r3, #1
 8007672:	4a03      	ldr	r2, [pc, #12]	; (8007680 <vPortExitCritical+0x28>)
 8007674:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007676:	b90b      	cbnz	r3, 800767c <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007678:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800767c:	4770      	bx	lr
 800767e:	bf00      	nop
 8007680:	20000014 	.word	0x20000014
	...

08007690 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007690:	f3ef 8009 	mrs	r0, PSP
 8007694:	f3bf 8f6f 	isb	sy
 8007698:	4b0d      	ldr	r3, [pc, #52]	; (80076d0 <pxCurrentTCBConst>)
 800769a:	681a      	ldr	r2, [r3, #0]
 800769c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80076a0:	6010      	str	r0, [r2, #0]
 80076a2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80076a6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80076aa:	f380 8811 	msr	BASEPRI, r0
 80076ae:	f7ff ff0d 	bl	80074cc <vTaskSwitchContext>
 80076b2:	f04f 0000 	mov.w	r0, #0
 80076b6:	f380 8811 	msr	BASEPRI, r0
 80076ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80076be:	6819      	ldr	r1, [r3, #0]
 80076c0:	6808      	ldr	r0, [r1, #0]
 80076c2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80076c6:	f380 8809 	msr	PSP, r0
 80076ca:	f3bf 8f6f 	isb	sy
 80076ce:	4770      	bx	lr

080076d0 <pxCurrentTCBConst>:
 80076d0:	20000d64 	.word	0x20000d64

080076d4 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80076d4:	b508      	push	{r3, lr}
	__asm volatile
 80076d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076da:	f383 8811 	msr	BASEPRI, r3
 80076de:	f3bf 8f6f 	isb	sy
 80076e2:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80076e6:	f7ff fdab 	bl	8007240 <xTaskIncrementTick>
 80076ea:	b128      	cbz	r0, 80076f8 <SysTick_Handler+0x24>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80076ec:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80076f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076f4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 80076f8:	2300      	movs	r3, #0
 80076fa:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80076fe:	bd08      	pop	{r3, pc}

08007700 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007700:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8007704:	2300      	movs	r3, #0
 8007706:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007708:	6193      	str	r3, [r2, #24]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800770a:	4b05      	ldr	r3, [pc, #20]	; (8007720 <vPortSetupTimerInterrupt+0x20>)
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	4905      	ldr	r1, [pc, #20]	; (8007724 <vPortSetupTimerInterrupt+0x24>)
 8007710:	fba1 1303 	umull	r1, r3, r1, r3
 8007714:	099b      	lsrs	r3, r3, #6
 8007716:	3b01      	subs	r3, #1
 8007718:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800771a:	2307      	movs	r3, #7
 800771c:	6113      	str	r3, [r2, #16]
}
 800771e:	4770      	bx	lr
 8007720:	20000000 	.word	0x20000000
 8007724:	10624dd3 	.word	0x10624dd3

08007728 <xPortStartScheduler>:
{
 8007728:	b510      	push	{r4, lr}
 800772a:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800772c:	4b2c      	ldr	r3, [pc, #176]	; (80077e0 <xPortStartScheduler+0xb8>)
 800772e:	781a      	ldrb	r2, [r3, #0]
 8007730:	b2d2      	uxtb	r2, r2
 8007732:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007734:	22ff      	movs	r2, #255	; 0xff
 8007736:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007738:	781b      	ldrb	r3, [r3, #0]
 800773a:	b2db      	uxtb	r3, r3
 800773c:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007740:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8007744:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007748:	4a26      	ldr	r2, [pc, #152]	; (80077e4 <xPortStartScheduler+0xbc>)
 800774a:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800774c:	4b26      	ldr	r3, [pc, #152]	; (80077e8 <xPortStartScheduler+0xc0>)
 800774e:	2207      	movs	r2, #7
 8007750:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007752:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8007756:	f013 0f80 	tst.w	r3, #128	; 0x80
 800775a:	d013      	beq.n	8007784 <xPortStartScheduler+0x5c>
 800775c:	2206      	movs	r2, #6
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800775e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8007762:	005b      	lsls	r3, r3, #1
 8007764:	b2db      	uxtb	r3, r3
 8007766:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800776a:	f89d 1003 	ldrb.w	r1, [sp, #3]
 800776e:	4610      	mov	r0, r2
 8007770:	3a01      	subs	r2, #1
 8007772:	f011 0f80 	tst.w	r1, #128	; 0x80
 8007776:	d1f2      	bne.n	800775e <xPortStartScheduler+0x36>
 8007778:	4a1b      	ldr	r2, [pc, #108]	; (80077e8 <xPortStartScheduler+0xc0>)
 800777a:	6010      	str	r0, [r2, #0]
 800777c:	f88d 3003 	strb.w	r3, [sp, #3]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007780:	2803      	cmp	r0, #3
 8007782:	d008      	beq.n	8007796 <xPortStartScheduler+0x6e>
	__asm volatile
 8007784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007788:	f383 8811 	msr	BASEPRI, r3
 800778c:	f3bf 8f6f 	isb	sy
 8007790:	f3bf 8f4f 	dsb	sy
 8007794:	e7fe      	b.n	8007794 <xPortStartScheduler+0x6c>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007796:	4b14      	ldr	r3, [pc, #80]	; (80077e8 <xPortStartScheduler+0xc0>)
 8007798:	f44f 7240 	mov.w	r2, #768	; 0x300
 800779c:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800779e:	9b01      	ldr	r3, [sp, #4]
 80077a0:	b2db      	uxtb	r3, r3
 80077a2:	4a0f      	ldr	r2, [pc, #60]	; (80077e0 <xPortStartScheduler+0xb8>)
 80077a4:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80077a6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80077aa:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 80077ae:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80077b2:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80077b6:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 80077ba:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 80077be:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 80077c2:	f7ff ff9d 	bl	8007700 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80077c6:	2400      	movs	r4, #0
 80077c8:	4b08      	ldr	r3, [pc, #32]	; (80077ec <xPortStartScheduler+0xc4>)
 80077ca:	601c      	str	r4, [r3, #0]
	prvPortStartFirstTask();
 80077cc:	f7ff fee8 	bl	80075a0 <prvPortStartFirstTask>
	vTaskSwitchContext();
 80077d0:	f7ff fe7c 	bl	80074cc <vTaskSwitchContext>
	prvTaskExitError();
 80077d4:	f7ff fec4 	bl	8007560 <prvTaskExitError>
}
 80077d8:	4620      	mov	r0, r4
 80077da:	b002      	add	sp, #8
 80077dc:	bd10      	pop	{r4, pc}
 80077de:	bf00      	nop
 80077e0:	e000e400 	.word	0xe000e400
 80077e4:	20000e8c 	.word	0x20000e8c
 80077e8:	20000e90 	.word	0x20000e90
 80077ec:	20000014 	.word	0x20000014

080077f0 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80077f0:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80077f2:	4b14      	ldr	r3, [pc, #80]	; (8007844 <prvInsertBlockIntoFreeList+0x54>)
 80077f4:	461a      	mov	r2, r3
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	4283      	cmp	r3, r0
 80077fa:	d3fb      	bcc.n	80077f4 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80077fc:	6854      	ldr	r4, [r2, #4]
 80077fe:	1911      	adds	r1, r2, r4
 8007800:	4288      	cmp	r0, r1
 8007802:	d009      	beq.n	8007818 <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007804:	6844      	ldr	r4, [r0, #4]
 8007806:	1901      	adds	r1, r0, r4
 8007808:	428b      	cmp	r3, r1
 800780a:	d00f      	beq.n	800782c <prvInsertBlockIntoFreeList+0x3c>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800780c:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800780e:	4282      	cmp	r2, r0
 8007810:	d000      	beq.n	8007814 <prvInsertBlockIntoFreeList+0x24>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007812:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007814:	bc10      	pop	{r4}
 8007816:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007818:	6841      	ldr	r1, [r0, #4]
 800781a:	4421      	add	r1, r4
 800781c:	6051      	str	r1, [r2, #4]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800781e:	460c      	mov	r4, r1
 8007820:	4411      	add	r1, r2
 8007822:	428b      	cmp	r3, r1
 8007824:	d001      	beq.n	800782a <prvInsertBlockIntoFreeList+0x3a>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007826:	6013      	str	r3, [r2, #0]
	if( pxIterator != pxBlockToInsert )
 8007828:	e7f4      	b.n	8007814 <prvInsertBlockIntoFreeList+0x24>
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800782a:	4610      	mov	r0, r2
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800782c:	4906      	ldr	r1, [pc, #24]	; (8007848 <prvInsertBlockIntoFreeList+0x58>)
 800782e:	6809      	ldr	r1, [r1, #0]
 8007830:	428b      	cmp	r3, r1
 8007832:	d005      	beq.n	8007840 <prvInsertBlockIntoFreeList+0x50>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007834:	685b      	ldr	r3, [r3, #4]
 8007836:	4423      	add	r3, r4
 8007838:	6043      	str	r3, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800783a:	6813      	ldr	r3, [r2, #0]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	e7e5      	b.n	800780c <prvInsertBlockIntoFreeList+0x1c>
 8007840:	460b      	mov	r3, r1
 8007842:	e7e3      	b.n	800780c <prvInsertBlockIntoFreeList+0x1c>
 8007844:	20002824 	.word	0x20002824
 8007848:	20000e94 	.word	0x20000e94

0800784c <pvPortMalloc>:
{
 800784c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800784e:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8007850:	f7ff fcee 	bl	8007230 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8007854:	4b42      	ldr	r3, [pc, #264]	; (8007960 <pvPortMalloc+0x114>)
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	b1b3      	cbz	r3, 8007888 <pvPortMalloc+0x3c>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800785a:	4b42      	ldr	r3, [pc, #264]	; (8007964 <pvPortMalloc+0x118>)
 800785c:	681d      	ldr	r5, [r3, #0]
 800785e:	4225      	tst	r5, r4
 8007860:	d179      	bne.n	8007956 <pvPortMalloc+0x10a>
			if( xWantedSize > 0 )
 8007862:	2c00      	cmp	r4, #0
 8007864:	d077      	beq.n	8007956 <pvPortMalloc+0x10a>
				xWantedSize += xHeapStructSize;
 8007866:	f104 0208 	add.w	r2, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800786a:	f014 0f07 	tst.w	r4, #7
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800786e:	bf1c      	itt	ne
 8007870:	f022 0207 	bicne.w	r2, r2, #7
 8007874:	3208      	addne	r2, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007876:	2a00      	cmp	r2, #0
 8007878:	d06d      	beq.n	8007956 <pvPortMalloc+0x10a>
 800787a:	4b3b      	ldr	r3, [pc, #236]	; (8007968 <pvPortMalloc+0x11c>)
 800787c:	681e      	ldr	r6, [r3, #0]
 800787e:	4296      	cmp	r6, r2
 8007880:	d369      	bcc.n	8007956 <pvPortMalloc+0x10a>
				pxBlock = xStart.pxNextFreeBlock;
 8007882:	493a      	ldr	r1, [pc, #232]	; (800796c <pvPortMalloc+0x120>)
 8007884:	680c      	ldr	r4, [r1, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007886:	e027      	b.n	80078d8 <pvPortMalloc+0x8c>
	uxAddress = ( size_t ) ucHeap;
 8007888:	4a39      	ldr	r2, [pc, #228]	; (8007970 <pvPortMalloc+0x124>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800788a:	f012 0f07 	tst.w	r2, #7
 800788e:	d007      	beq.n	80078a0 <pvPortMalloc+0x54>
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007890:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007892:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007896:	f502 52cc 	add.w	r2, r2, #6528	; 0x1980
 800789a:	1a53      	subs	r3, r2, r1
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800789c:	460a      	mov	r2, r1
 800789e:	e001      	b.n	80078a4 <pvPortMalloc+0x58>
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80078a0:	f44f 53cc 	mov.w	r3, #6528	; 0x1980
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80078a4:	4831      	ldr	r0, [pc, #196]	; (800796c <pvPortMalloc+0x120>)
 80078a6:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80078a8:	2100      	movs	r1, #0
 80078aa:	6041      	str	r1, [r0, #4]
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80078ac:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 80078ae:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80078b0:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 80078b4:	482a      	ldr	r0, [pc, #168]	; (8007960 <pvPortMalloc+0x114>)
 80078b6:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 80078b8:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80078ba:	6019      	str	r1, [r3, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80078bc:	1a99      	subs	r1, r3, r2
 80078be:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80078c0:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80078c2:	4b2c      	ldr	r3, [pc, #176]	; (8007974 <pvPortMalloc+0x128>)
 80078c4:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80078c6:	4b28      	ldr	r3, [pc, #160]	; (8007968 <pvPortMalloc+0x11c>)
 80078c8:	6019      	str	r1, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80078ca:	4b26      	ldr	r3, [pc, #152]	; (8007964 <pvPortMalloc+0x118>)
 80078cc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80078d0:	601a      	str	r2, [r3, #0]
}
 80078d2:	e7c2      	b.n	800785a <pvPortMalloc+0xe>
 80078d4:	4621      	mov	r1, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 80078d6:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80078d8:	6863      	ldr	r3, [r4, #4]
 80078da:	4293      	cmp	r3, r2
 80078dc:	d202      	bcs.n	80078e4 <pvPortMalloc+0x98>
 80078de:	6823      	ldr	r3, [r4, #0]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d1f7      	bne.n	80078d4 <pvPortMalloc+0x88>
				if( pxBlock != pxEnd )
 80078e4:	4b1e      	ldr	r3, [pc, #120]	; (8007960 <pvPortMalloc+0x114>)
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	42a3      	cmp	r3, r4
 80078ea:	d034      	beq.n	8007956 <pvPortMalloc+0x10a>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80078ec:	680f      	ldr	r7, [r1, #0]
 80078ee:	3708      	adds	r7, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80078f0:	6823      	ldr	r3, [r4, #0]
 80078f2:	600b      	str	r3, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80078f4:	6863      	ldr	r3, [r4, #4]
 80078f6:	1a9b      	subs	r3, r3, r2
 80078f8:	2b10      	cmp	r3, #16
 80078fa:	d910      	bls.n	800791e <pvPortMalloc+0xd2>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80078fc:	18a0      	adds	r0, r4, r2
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80078fe:	f010 0f07 	tst.w	r0, #7
 8007902:	d008      	beq.n	8007916 <pvPortMalloc+0xca>
 8007904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007908:	f383 8811 	msr	BASEPRI, r3
 800790c:	f3bf 8f6f 	isb	sy
 8007910:	f3bf 8f4f 	dsb	sy
 8007914:	e7fe      	b.n	8007914 <pvPortMalloc+0xc8>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007916:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007918:	6062      	str	r2, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800791a:	f7ff ff69 	bl	80077f0 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800791e:	6863      	ldr	r3, [r4, #4]
 8007920:	1af6      	subs	r6, r6, r3
 8007922:	4a11      	ldr	r2, [pc, #68]	; (8007968 <pvPortMalloc+0x11c>)
 8007924:	6016      	str	r6, [r2, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007926:	4a13      	ldr	r2, [pc, #76]	; (8007974 <pvPortMalloc+0x128>)
 8007928:	6812      	ldr	r2, [r2, #0]
 800792a:	4296      	cmp	r6, r2
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800792c:	bf3c      	itt	cc
 800792e:	4a11      	ldrcc	r2, [pc, #68]	; (8007974 <pvPortMalloc+0x128>)
 8007930:	6016      	strcc	r6, [r2, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007932:	431d      	orrs	r5, r3
 8007934:	6065      	str	r5, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007936:	2300      	movs	r3, #0
 8007938:	6023      	str	r3, [r4, #0]
	( void ) xTaskResumeAll();
 800793a:	f7ff fd1d 	bl	8007378 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800793e:	f017 0f07 	tst.w	r7, #7
 8007942:	d00b      	beq.n	800795c <pvPortMalloc+0x110>
 8007944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007948:	f383 8811 	msr	BASEPRI, r3
 800794c:	f3bf 8f6f 	isb	sy
 8007950:	f3bf 8f4f 	dsb	sy
 8007954:	e7fe      	b.n	8007954 <pvPortMalloc+0x108>
	( void ) xTaskResumeAll();
 8007956:	f7ff fd0f 	bl	8007378 <xTaskResumeAll>
 800795a:	2700      	movs	r7, #0
}
 800795c:	4638      	mov	r0, r7
 800795e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007960:	20000e94 	.word	0x20000e94
 8007964:	20002818 	.word	0x20002818
 8007968:	2000281c 	.word	0x2000281c
 800796c:	20002824 	.word	0x20002824
 8007970:	20000e98 	.word	0x20000e98
 8007974:	20002820 	.word	0x20002820

08007978 <vPortFree>:
	if( pv != NULL )
 8007978:	b378      	cbz	r0, 80079da <vPortFree+0x62>
{
 800797a:	b510      	push	{r4, lr}
 800797c:	4604      	mov	r4, r0
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800797e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8007982:	4a16      	ldr	r2, [pc, #88]	; (80079dc <vPortFree+0x64>)
 8007984:	6812      	ldr	r2, [r2, #0]
 8007986:	4213      	tst	r3, r2
 8007988:	d108      	bne.n	800799c <vPortFree+0x24>
 800798a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800798e:	f383 8811 	msr	BASEPRI, r3
 8007992:	f3bf 8f6f 	isb	sy
 8007996:	f3bf 8f4f 	dsb	sy
 800799a:	e7fe      	b.n	800799a <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800799c:	f850 1c08 	ldr.w	r1, [r0, #-8]
 80079a0:	b141      	cbz	r1, 80079b4 <vPortFree+0x3c>
 80079a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079a6:	f383 8811 	msr	BASEPRI, r3
 80079aa:	f3bf 8f6f 	isb	sy
 80079ae:	f3bf 8f4f 	dsb	sy
 80079b2:	e7fe      	b.n	80079b2 <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80079b4:	ea23 0302 	bic.w	r3, r3, r2
 80079b8:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 80079bc:	f7ff fc38 	bl	8007230 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80079c0:	4a07      	ldr	r2, [pc, #28]	; (80079e0 <vPortFree+0x68>)
 80079c2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80079c6:	6811      	ldr	r1, [r2, #0]
 80079c8:	440b      	add	r3, r1
 80079ca:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80079cc:	f1a4 0008 	sub.w	r0, r4, #8
 80079d0:	f7ff ff0e 	bl	80077f0 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 80079d4:	f7ff fcd0 	bl	8007378 <xTaskResumeAll>
}
 80079d8:	bd10      	pop	{r4, pc}
 80079da:	4770      	bx	lr
 80079dc:	20002818 	.word	0x20002818
 80079e0:	2000281c 	.word	0x2000281c

080079e4 <atof>:
 80079e4:	2100      	movs	r1, #0
 80079e6:	f000 be21 	b.w	800862c <strtod>

080079ea <atoi>:
 80079ea:	220a      	movs	r2, #10
 80079ec:	2100      	movs	r1, #0
 80079ee:	f000 bea9 	b.w	8008744 <strtol>

080079f2 <sulp>:
 80079f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079f6:	460f      	mov	r7, r1
 80079f8:	4690      	mov	r8, r2
 80079fa:	f003 fd6d 	bl	800b4d8 <__ulp>
 80079fe:	4604      	mov	r4, r0
 8007a00:	460d      	mov	r5, r1
 8007a02:	f1b8 0f00 	cmp.w	r8, #0
 8007a06:	d011      	beq.n	8007a2c <sulp+0x3a>
 8007a08:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8007a0c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	dd0b      	ble.n	8007a2c <sulp+0x3a>
 8007a14:	2400      	movs	r4, #0
 8007a16:	051b      	lsls	r3, r3, #20
 8007a18:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007a1c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007a20:	4622      	mov	r2, r4
 8007a22:	462b      	mov	r3, r5
 8007a24:	f7f8 fd62 	bl	80004ec <__aeabi_dmul>
 8007a28:	4604      	mov	r4, r0
 8007a2a:	460d      	mov	r5, r1
 8007a2c:	4620      	mov	r0, r4
 8007a2e:	4629      	mov	r1, r5
 8007a30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a34:	0000      	movs	r0, r0
	...

08007a38 <_strtod_l>:
 8007a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a3c:	b09f      	sub	sp, #124	; 0x7c
 8007a3e:	9217      	str	r2, [sp, #92]	; 0x5c
 8007a40:	2200      	movs	r2, #0
 8007a42:	4604      	mov	r4, r0
 8007a44:	921a      	str	r2, [sp, #104]	; 0x68
 8007a46:	460d      	mov	r5, r1
 8007a48:	f04f 0800 	mov.w	r8, #0
 8007a4c:	f04f 0900 	mov.w	r9, #0
 8007a50:	460a      	mov	r2, r1
 8007a52:	9219      	str	r2, [sp, #100]	; 0x64
 8007a54:	7811      	ldrb	r1, [r2, #0]
 8007a56:	292b      	cmp	r1, #43	; 0x2b
 8007a58:	d04a      	beq.n	8007af0 <_strtod_l+0xb8>
 8007a5a:	d838      	bhi.n	8007ace <_strtod_l+0x96>
 8007a5c:	290d      	cmp	r1, #13
 8007a5e:	d832      	bhi.n	8007ac6 <_strtod_l+0x8e>
 8007a60:	2908      	cmp	r1, #8
 8007a62:	d832      	bhi.n	8007aca <_strtod_l+0x92>
 8007a64:	2900      	cmp	r1, #0
 8007a66:	d03b      	beq.n	8007ae0 <_strtod_l+0xa8>
 8007a68:	2200      	movs	r2, #0
 8007a6a:	920e      	str	r2, [sp, #56]	; 0x38
 8007a6c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8007a6e:	7832      	ldrb	r2, [r6, #0]
 8007a70:	2a30      	cmp	r2, #48	; 0x30
 8007a72:	f040 80b2 	bne.w	8007bda <_strtod_l+0x1a2>
 8007a76:	7872      	ldrb	r2, [r6, #1]
 8007a78:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8007a7c:	2a58      	cmp	r2, #88	; 0x58
 8007a7e:	d16e      	bne.n	8007b5e <_strtod_l+0x126>
 8007a80:	9302      	str	r3, [sp, #8]
 8007a82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007a84:	4620      	mov	r0, r4
 8007a86:	9301      	str	r3, [sp, #4]
 8007a88:	ab1a      	add	r3, sp, #104	; 0x68
 8007a8a:	9300      	str	r3, [sp, #0]
 8007a8c:	4a8c      	ldr	r2, [pc, #560]	; (8007cc0 <_strtod_l+0x288>)
 8007a8e:	ab1b      	add	r3, sp, #108	; 0x6c
 8007a90:	a919      	add	r1, sp, #100	; 0x64
 8007a92:	f002 fdfd 	bl	800a690 <__gethex>
 8007a96:	f010 070f 	ands.w	r7, r0, #15
 8007a9a:	4605      	mov	r5, r0
 8007a9c:	d005      	beq.n	8007aaa <_strtod_l+0x72>
 8007a9e:	2f06      	cmp	r7, #6
 8007aa0:	d128      	bne.n	8007af4 <_strtod_l+0xbc>
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	3601      	adds	r6, #1
 8007aa6:	9619      	str	r6, [sp, #100]	; 0x64
 8007aa8:	930e      	str	r3, [sp, #56]	; 0x38
 8007aaa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	f040 85a0 	bne.w	80085f2 <_strtod_l+0xbba>
 8007ab2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007ab4:	b1cb      	cbz	r3, 8007aea <_strtod_l+0xb2>
 8007ab6:	4642      	mov	r2, r8
 8007ab8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007abc:	4610      	mov	r0, r2
 8007abe:	4619      	mov	r1, r3
 8007ac0:	b01f      	add	sp, #124	; 0x7c
 8007ac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ac6:	2920      	cmp	r1, #32
 8007ac8:	d1ce      	bne.n	8007a68 <_strtod_l+0x30>
 8007aca:	3201      	adds	r2, #1
 8007acc:	e7c1      	b.n	8007a52 <_strtod_l+0x1a>
 8007ace:	292d      	cmp	r1, #45	; 0x2d
 8007ad0:	d1ca      	bne.n	8007a68 <_strtod_l+0x30>
 8007ad2:	2101      	movs	r1, #1
 8007ad4:	910e      	str	r1, [sp, #56]	; 0x38
 8007ad6:	1c51      	adds	r1, r2, #1
 8007ad8:	9119      	str	r1, [sp, #100]	; 0x64
 8007ada:	7852      	ldrb	r2, [r2, #1]
 8007adc:	2a00      	cmp	r2, #0
 8007ade:	d1c5      	bne.n	8007a6c <_strtod_l+0x34>
 8007ae0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007ae2:	9519      	str	r5, [sp, #100]	; 0x64
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	f040 8582 	bne.w	80085ee <_strtod_l+0xbb6>
 8007aea:	4642      	mov	r2, r8
 8007aec:	464b      	mov	r3, r9
 8007aee:	e7e5      	b.n	8007abc <_strtod_l+0x84>
 8007af0:	2100      	movs	r1, #0
 8007af2:	e7ef      	b.n	8007ad4 <_strtod_l+0x9c>
 8007af4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007af6:	b13a      	cbz	r2, 8007b08 <_strtod_l+0xd0>
 8007af8:	2135      	movs	r1, #53	; 0x35
 8007afa:	a81c      	add	r0, sp, #112	; 0x70
 8007afc:	f003 fdd8 	bl	800b6b0 <__copybits>
 8007b00:	4620      	mov	r0, r4
 8007b02:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007b04:	f003 f9bc 	bl	800ae80 <_Bfree>
 8007b08:	3f01      	subs	r7, #1
 8007b0a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007b0c:	2f04      	cmp	r7, #4
 8007b0e:	d806      	bhi.n	8007b1e <_strtod_l+0xe6>
 8007b10:	e8df f007 	tbb	[pc, r7]
 8007b14:	201d0314 	.word	0x201d0314
 8007b18:	14          	.byte	0x14
 8007b19:	00          	.byte	0x00
 8007b1a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8007b1e:	05e9      	lsls	r1, r5, #23
 8007b20:	bf48      	it	mi
 8007b22:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8007b26:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007b2a:	0d1b      	lsrs	r3, r3, #20
 8007b2c:	051b      	lsls	r3, r3, #20
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d1bb      	bne.n	8007aaa <_strtod_l+0x72>
 8007b32:	f001 fe39 	bl	80097a8 <__errno>
 8007b36:	2322      	movs	r3, #34	; 0x22
 8007b38:	6003      	str	r3, [r0, #0]
 8007b3a:	e7b6      	b.n	8007aaa <_strtod_l+0x72>
 8007b3c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007b40:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8007b44:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007b48:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8007b4c:	e7e7      	b.n	8007b1e <_strtod_l+0xe6>
 8007b4e:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8007cc4 <_strtod_l+0x28c>
 8007b52:	e7e4      	b.n	8007b1e <_strtod_l+0xe6>
 8007b54:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8007b58:	f04f 38ff 	mov.w	r8, #4294967295
 8007b5c:	e7df      	b.n	8007b1e <_strtod_l+0xe6>
 8007b5e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007b60:	1c5a      	adds	r2, r3, #1
 8007b62:	9219      	str	r2, [sp, #100]	; 0x64
 8007b64:	785b      	ldrb	r3, [r3, #1]
 8007b66:	2b30      	cmp	r3, #48	; 0x30
 8007b68:	d0f9      	beq.n	8007b5e <_strtod_l+0x126>
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d09d      	beq.n	8007aaa <_strtod_l+0x72>
 8007b6e:	2301      	movs	r3, #1
 8007b70:	f04f 0a00 	mov.w	sl, #0
 8007b74:	220a      	movs	r2, #10
 8007b76:	46d3      	mov	fp, sl
 8007b78:	9305      	str	r3, [sp, #20]
 8007b7a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007b7c:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8007b80:	930b      	str	r3, [sp, #44]	; 0x2c
 8007b82:	9819      	ldr	r0, [sp, #100]	; 0x64
 8007b84:	7806      	ldrb	r6, [r0, #0]
 8007b86:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007b8a:	b2d9      	uxtb	r1, r3
 8007b8c:	2909      	cmp	r1, #9
 8007b8e:	d926      	bls.n	8007bde <_strtod_l+0x1a6>
 8007b90:	2201      	movs	r2, #1
 8007b92:	494d      	ldr	r1, [pc, #308]	; (8007cc8 <_strtod_l+0x290>)
 8007b94:	f001 fd93 	bl	80096be <strncmp>
 8007b98:	2800      	cmp	r0, #0
 8007b9a:	d030      	beq.n	8007bfe <_strtod_l+0x1c6>
 8007b9c:	2000      	movs	r0, #0
 8007b9e:	4632      	mov	r2, r6
 8007ba0:	4603      	mov	r3, r0
 8007ba2:	465e      	mov	r6, fp
 8007ba4:	9008      	str	r0, [sp, #32]
 8007ba6:	2a65      	cmp	r2, #101	; 0x65
 8007ba8:	d001      	beq.n	8007bae <_strtod_l+0x176>
 8007baa:	2a45      	cmp	r2, #69	; 0x45
 8007bac:	d113      	bne.n	8007bd6 <_strtod_l+0x19e>
 8007bae:	b91e      	cbnz	r6, 8007bb8 <_strtod_l+0x180>
 8007bb0:	9a05      	ldr	r2, [sp, #20]
 8007bb2:	4302      	orrs	r2, r0
 8007bb4:	d094      	beq.n	8007ae0 <_strtod_l+0xa8>
 8007bb6:	2600      	movs	r6, #0
 8007bb8:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8007bba:	1c6a      	adds	r2, r5, #1
 8007bbc:	9219      	str	r2, [sp, #100]	; 0x64
 8007bbe:	786a      	ldrb	r2, [r5, #1]
 8007bc0:	2a2b      	cmp	r2, #43	; 0x2b
 8007bc2:	d074      	beq.n	8007cae <_strtod_l+0x276>
 8007bc4:	2a2d      	cmp	r2, #45	; 0x2d
 8007bc6:	d078      	beq.n	8007cba <_strtod_l+0x282>
 8007bc8:	f04f 0c00 	mov.w	ip, #0
 8007bcc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007bd0:	2909      	cmp	r1, #9
 8007bd2:	d97f      	bls.n	8007cd4 <_strtod_l+0x29c>
 8007bd4:	9519      	str	r5, [sp, #100]	; 0x64
 8007bd6:	2700      	movs	r7, #0
 8007bd8:	e09e      	b.n	8007d18 <_strtod_l+0x2e0>
 8007bda:	2300      	movs	r3, #0
 8007bdc:	e7c8      	b.n	8007b70 <_strtod_l+0x138>
 8007bde:	f1bb 0f08 	cmp.w	fp, #8
 8007be2:	bfd8      	it	le
 8007be4:	990a      	ldrle	r1, [sp, #40]	; 0x28
 8007be6:	f100 0001 	add.w	r0, r0, #1
 8007bea:	bfd6      	itet	le
 8007bec:	fb02 3301 	mlale	r3, r2, r1, r3
 8007bf0:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8007bf4:	930a      	strle	r3, [sp, #40]	; 0x28
 8007bf6:	f10b 0b01 	add.w	fp, fp, #1
 8007bfa:	9019      	str	r0, [sp, #100]	; 0x64
 8007bfc:	e7c1      	b.n	8007b82 <_strtod_l+0x14a>
 8007bfe:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007c00:	1c5a      	adds	r2, r3, #1
 8007c02:	9219      	str	r2, [sp, #100]	; 0x64
 8007c04:	785a      	ldrb	r2, [r3, #1]
 8007c06:	f1bb 0f00 	cmp.w	fp, #0
 8007c0a:	d037      	beq.n	8007c7c <_strtod_l+0x244>
 8007c0c:	465e      	mov	r6, fp
 8007c0e:	9008      	str	r0, [sp, #32]
 8007c10:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007c14:	2b09      	cmp	r3, #9
 8007c16:	d912      	bls.n	8007c3e <_strtod_l+0x206>
 8007c18:	2301      	movs	r3, #1
 8007c1a:	e7c4      	b.n	8007ba6 <_strtod_l+0x16e>
 8007c1c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007c1e:	3001      	adds	r0, #1
 8007c20:	1c5a      	adds	r2, r3, #1
 8007c22:	9219      	str	r2, [sp, #100]	; 0x64
 8007c24:	785a      	ldrb	r2, [r3, #1]
 8007c26:	2a30      	cmp	r2, #48	; 0x30
 8007c28:	d0f8      	beq.n	8007c1c <_strtod_l+0x1e4>
 8007c2a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007c2e:	2b08      	cmp	r3, #8
 8007c30:	f200 84e4 	bhi.w	80085fc <_strtod_l+0xbc4>
 8007c34:	9008      	str	r0, [sp, #32]
 8007c36:	2000      	movs	r0, #0
 8007c38:	4606      	mov	r6, r0
 8007c3a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007c3c:	930b      	str	r3, [sp, #44]	; 0x2c
 8007c3e:	3a30      	subs	r2, #48	; 0x30
 8007c40:	f100 0301 	add.w	r3, r0, #1
 8007c44:	d014      	beq.n	8007c70 <_strtod_l+0x238>
 8007c46:	9908      	ldr	r1, [sp, #32]
 8007c48:	eb00 0c06 	add.w	ip, r0, r6
 8007c4c:	4419      	add	r1, r3
 8007c4e:	9108      	str	r1, [sp, #32]
 8007c50:	4633      	mov	r3, r6
 8007c52:	210a      	movs	r1, #10
 8007c54:	4563      	cmp	r3, ip
 8007c56:	d113      	bne.n	8007c80 <_strtod_l+0x248>
 8007c58:	1833      	adds	r3, r6, r0
 8007c5a:	2b08      	cmp	r3, #8
 8007c5c:	f106 0601 	add.w	r6, r6, #1
 8007c60:	4406      	add	r6, r0
 8007c62:	dc1a      	bgt.n	8007c9a <_strtod_l+0x262>
 8007c64:	230a      	movs	r3, #10
 8007c66:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007c68:	fb03 2301 	mla	r3, r3, r1, r2
 8007c6c:	930a      	str	r3, [sp, #40]	; 0x28
 8007c6e:	2300      	movs	r3, #0
 8007c70:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007c72:	4618      	mov	r0, r3
 8007c74:	1c51      	adds	r1, r2, #1
 8007c76:	9119      	str	r1, [sp, #100]	; 0x64
 8007c78:	7852      	ldrb	r2, [r2, #1]
 8007c7a:	e7c9      	b.n	8007c10 <_strtod_l+0x1d8>
 8007c7c:	4658      	mov	r0, fp
 8007c7e:	e7d2      	b.n	8007c26 <_strtod_l+0x1ee>
 8007c80:	2b08      	cmp	r3, #8
 8007c82:	f103 0301 	add.w	r3, r3, #1
 8007c86:	dc03      	bgt.n	8007c90 <_strtod_l+0x258>
 8007c88:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8007c8a:	434f      	muls	r7, r1
 8007c8c:	970a      	str	r7, [sp, #40]	; 0x28
 8007c8e:	e7e1      	b.n	8007c54 <_strtod_l+0x21c>
 8007c90:	2b10      	cmp	r3, #16
 8007c92:	bfd8      	it	le
 8007c94:	fb01 fa0a 	mulle.w	sl, r1, sl
 8007c98:	e7dc      	b.n	8007c54 <_strtod_l+0x21c>
 8007c9a:	2e10      	cmp	r6, #16
 8007c9c:	bfdc      	itt	le
 8007c9e:	230a      	movle	r3, #10
 8007ca0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8007ca4:	e7e3      	b.n	8007c6e <_strtod_l+0x236>
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	9308      	str	r3, [sp, #32]
 8007caa:	2301      	movs	r3, #1
 8007cac:	e780      	b.n	8007bb0 <_strtod_l+0x178>
 8007cae:	f04f 0c00 	mov.w	ip, #0
 8007cb2:	1caa      	adds	r2, r5, #2
 8007cb4:	9219      	str	r2, [sp, #100]	; 0x64
 8007cb6:	78aa      	ldrb	r2, [r5, #2]
 8007cb8:	e788      	b.n	8007bcc <_strtod_l+0x194>
 8007cba:	f04f 0c01 	mov.w	ip, #1
 8007cbe:	e7f8      	b.n	8007cb2 <_strtod_l+0x27a>
 8007cc0:	0800cbd4 	.word	0x0800cbd4
 8007cc4:	7ff00000 	.word	0x7ff00000
 8007cc8:	0800cbd1 	.word	0x0800cbd1
 8007ccc:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007cce:	1c51      	adds	r1, r2, #1
 8007cd0:	9119      	str	r1, [sp, #100]	; 0x64
 8007cd2:	7852      	ldrb	r2, [r2, #1]
 8007cd4:	2a30      	cmp	r2, #48	; 0x30
 8007cd6:	d0f9      	beq.n	8007ccc <_strtod_l+0x294>
 8007cd8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007cdc:	2908      	cmp	r1, #8
 8007cde:	f63f af7a 	bhi.w	8007bd6 <_strtod_l+0x19e>
 8007ce2:	3a30      	subs	r2, #48	; 0x30
 8007ce4:	9209      	str	r2, [sp, #36]	; 0x24
 8007ce6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007ce8:	920c      	str	r2, [sp, #48]	; 0x30
 8007cea:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007cec:	1c57      	adds	r7, r2, #1
 8007cee:	9719      	str	r7, [sp, #100]	; 0x64
 8007cf0:	7852      	ldrb	r2, [r2, #1]
 8007cf2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8007cf6:	f1be 0f09 	cmp.w	lr, #9
 8007cfa:	d938      	bls.n	8007d6e <_strtod_l+0x336>
 8007cfc:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007cfe:	1a7f      	subs	r7, r7, r1
 8007d00:	2f08      	cmp	r7, #8
 8007d02:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8007d06:	dc03      	bgt.n	8007d10 <_strtod_l+0x2d8>
 8007d08:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007d0a:	428f      	cmp	r7, r1
 8007d0c:	bfa8      	it	ge
 8007d0e:	460f      	movge	r7, r1
 8007d10:	f1bc 0f00 	cmp.w	ip, #0
 8007d14:	d000      	beq.n	8007d18 <_strtod_l+0x2e0>
 8007d16:	427f      	negs	r7, r7
 8007d18:	2e00      	cmp	r6, #0
 8007d1a:	d14f      	bne.n	8007dbc <_strtod_l+0x384>
 8007d1c:	9905      	ldr	r1, [sp, #20]
 8007d1e:	4301      	orrs	r1, r0
 8007d20:	f47f aec3 	bne.w	8007aaa <_strtod_l+0x72>
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	f47f aedb 	bne.w	8007ae0 <_strtod_l+0xa8>
 8007d2a:	2a69      	cmp	r2, #105	; 0x69
 8007d2c:	d029      	beq.n	8007d82 <_strtod_l+0x34a>
 8007d2e:	dc26      	bgt.n	8007d7e <_strtod_l+0x346>
 8007d30:	2a49      	cmp	r2, #73	; 0x49
 8007d32:	d026      	beq.n	8007d82 <_strtod_l+0x34a>
 8007d34:	2a4e      	cmp	r2, #78	; 0x4e
 8007d36:	f47f aed3 	bne.w	8007ae0 <_strtod_l+0xa8>
 8007d3a:	499a      	ldr	r1, [pc, #616]	; (8007fa4 <_strtod_l+0x56c>)
 8007d3c:	a819      	add	r0, sp, #100	; 0x64
 8007d3e:	f002 fee9 	bl	800ab14 <__match>
 8007d42:	2800      	cmp	r0, #0
 8007d44:	f43f aecc 	beq.w	8007ae0 <_strtod_l+0xa8>
 8007d48:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007d4a:	781b      	ldrb	r3, [r3, #0]
 8007d4c:	2b28      	cmp	r3, #40	; 0x28
 8007d4e:	d12f      	bne.n	8007db0 <_strtod_l+0x378>
 8007d50:	4995      	ldr	r1, [pc, #596]	; (8007fa8 <_strtod_l+0x570>)
 8007d52:	aa1c      	add	r2, sp, #112	; 0x70
 8007d54:	a819      	add	r0, sp, #100	; 0x64
 8007d56:	f002 fef1 	bl	800ab3c <__hexnan>
 8007d5a:	2805      	cmp	r0, #5
 8007d5c:	d128      	bne.n	8007db0 <_strtod_l+0x378>
 8007d5e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007d60:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8007d64:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8007d68:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8007d6c:	e69d      	b.n	8007aaa <_strtod_l+0x72>
 8007d6e:	210a      	movs	r1, #10
 8007d70:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007d72:	fb01 2107 	mla	r1, r1, r7, r2
 8007d76:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8007d7a:	9209      	str	r2, [sp, #36]	; 0x24
 8007d7c:	e7b5      	b.n	8007cea <_strtod_l+0x2b2>
 8007d7e:	2a6e      	cmp	r2, #110	; 0x6e
 8007d80:	e7d9      	b.n	8007d36 <_strtod_l+0x2fe>
 8007d82:	498a      	ldr	r1, [pc, #552]	; (8007fac <_strtod_l+0x574>)
 8007d84:	a819      	add	r0, sp, #100	; 0x64
 8007d86:	f002 fec5 	bl	800ab14 <__match>
 8007d8a:	2800      	cmp	r0, #0
 8007d8c:	f43f aea8 	beq.w	8007ae0 <_strtod_l+0xa8>
 8007d90:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007d92:	4987      	ldr	r1, [pc, #540]	; (8007fb0 <_strtod_l+0x578>)
 8007d94:	3b01      	subs	r3, #1
 8007d96:	a819      	add	r0, sp, #100	; 0x64
 8007d98:	9319      	str	r3, [sp, #100]	; 0x64
 8007d9a:	f002 febb 	bl	800ab14 <__match>
 8007d9e:	b910      	cbnz	r0, 8007da6 <_strtod_l+0x36e>
 8007da0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007da2:	3301      	adds	r3, #1
 8007da4:	9319      	str	r3, [sp, #100]	; 0x64
 8007da6:	f04f 0800 	mov.w	r8, #0
 8007daa:	f8df 9208 	ldr.w	r9, [pc, #520]	; 8007fb4 <_strtod_l+0x57c>
 8007dae:	e67c      	b.n	8007aaa <_strtod_l+0x72>
 8007db0:	4881      	ldr	r0, [pc, #516]	; (8007fb8 <_strtod_l+0x580>)
 8007db2:	f001 fd43 	bl	800983c <nan>
 8007db6:	4680      	mov	r8, r0
 8007db8:	4689      	mov	r9, r1
 8007dba:	e676      	b.n	8007aaa <_strtod_l+0x72>
 8007dbc:	9b08      	ldr	r3, [sp, #32]
 8007dbe:	f1bb 0f00 	cmp.w	fp, #0
 8007dc2:	bf08      	it	eq
 8007dc4:	46b3      	moveq	fp, r6
 8007dc6:	1afb      	subs	r3, r7, r3
 8007dc8:	2e10      	cmp	r6, #16
 8007dca:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007dcc:	4635      	mov	r5, r6
 8007dce:	9309      	str	r3, [sp, #36]	; 0x24
 8007dd0:	bfa8      	it	ge
 8007dd2:	2510      	movge	r5, #16
 8007dd4:	f7f8 fb10 	bl	80003f8 <__aeabi_ui2d>
 8007dd8:	2e09      	cmp	r6, #9
 8007dda:	4680      	mov	r8, r0
 8007ddc:	4689      	mov	r9, r1
 8007dde:	dd13      	ble.n	8007e08 <_strtod_l+0x3d0>
 8007de0:	4b76      	ldr	r3, [pc, #472]	; (8007fbc <_strtod_l+0x584>)
 8007de2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007de6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007dea:	f7f8 fb7f 	bl	80004ec <__aeabi_dmul>
 8007dee:	4680      	mov	r8, r0
 8007df0:	4650      	mov	r0, sl
 8007df2:	4689      	mov	r9, r1
 8007df4:	f7f8 fb00 	bl	80003f8 <__aeabi_ui2d>
 8007df8:	4602      	mov	r2, r0
 8007dfa:	460b      	mov	r3, r1
 8007dfc:	4640      	mov	r0, r8
 8007dfe:	4649      	mov	r1, r9
 8007e00:	f7f8 f9be 	bl	8000180 <__adddf3>
 8007e04:	4680      	mov	r8, r0
 8007e06:	4689      	mov	r9, r1
 8007e08:	2e0f      	cmp	r6, #15
 8007e0a:	dc36      	bgt.n	8007e7a <_strtod_l+0x442>
 8007e0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	f43f ae4b 	beq.w	8007aaa <_strtod_l+0x72>
 8007e14:	dd22      	ble.n	8007e5c <_strtod_l+0x424>
 8007e16:	2b16      	cmp	r3, #22
 8007e18:	dc09      	bgt.n	8007e2e <_strtod_l+0x3f6>
 8007e1a:	4968      	ldr	r1, [pc, #416]	; (8007fbc <_strtod_l+0x584>)
 8007e1c:	4642      	mov	r2, r8
 8007e1e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007e22:	464b      	mov	r3, r9
 8007e24:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e28:	f7f8 fb60 	bl	80004ec <__aeabi_dmul>
 8007e2c:	e7c3      	b.n	8007db6 <_strtod_l+0x37e>
 8007e2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e30:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8007e34:	4293      	cmp	r3, r2
 8007e36:	db20      	blt.n	8007e7a <_strtod_l+0x442>
 8007e38:	4c60      	ldr	r4, [pc, #384]	; (8007fbc <_strtod_l+0x584>)
 8007e3a:	f1c6 060f 	rsb	r6, r6, #15
 8007e3e:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8007e42:	4642      	mov	r2, r8
 8007e44:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e48:	464b      	mov	r3, r9
 8007e4a:	f7f8 fb4f 	bl	80004ec <__aeabi_dmul>
 8007e4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e50:	1b9e      	subs	r6, r3, r6
 8007e52:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8007e56:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007e5a:	e7e5      	b.n	8007e28 <_strtod_l+0x3f0>
 8007e5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e5e:	3316      	adds	r3, #22
 8007e60:	db0b      	blt.n	8007e7a <_strtod_l+0x442>
 8007e62:	9b08      	ldr	r3, [sp, #32]
 8007e64:	4640      	mov	r0, r8
 8007e66:	1bdf      	subs	r7, r3, r7
 8007e68:	4b54      	ldr	r3, [pc, #336]	; (8007fbc <_strtod_l+0x584>)
 8007e6a:	4649      	mov	r1, r9
 8007e6c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007e70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e74:	f7f8 fc64 	bl	8000740 <__aeabi_ddiv>
 8007e78:	e79d      	b.n	8007db6 <_strtod_l+0x37e>
 8007e7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e7c:	1b75      	subs	r5, r6, r5
 8007e7e:	441d      	add	r5, r3
 8007e80:	2d00      	cmp	r5, #0
 8007e82:	dd70      	ble.n	8007f66 <_strtod_l+0x52e>
 8007e84:	f015 030f 	ands.w	r3, r5, #15
 8007e88:	d00a      	beq.n	8007ea0 <_strtod_l+0x468>
 8007e8a:	494c      	ldr	r1, [pc, #304]	; (8007fbc <_strtod_l+0x584>)
 8007e8c:	4642      	mov	r2, r8
 8007e8e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007e92:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e96:	464b      	mov	r3, r9
 8007e98:	f7f8 fb28 	bl	80004ec <__aeabi_dmul>
 8007e9c:	4680      	mov	r8, r0
 8007e9e:	4689      	mov	r9, r1
 8007ea0:	f035 050f 	bics.w	r5, r5, #15
 8007ea4:	d04d      	beq.n	8007f42 <_strtod_l+0x50a>
 8007ea6:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8007eaa:	dd22      	ble.n	8007ef2 <_strtod_l+0x4ba>
 8007eac:	2600      	movs	r6, #0
 8007eae:	46b3      	mov	fp, r6
 8007eb0:	960b      	str	r6, [sp, #44]	; 0x2c
 8007eb2:	9608      	str	r6, [sp, #32]
 8007eb4:	2322      	movs	r3, #34	; 0x22
 8007eb6:	f04f 0800 	mov.w	r8, #0
 8007eba:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8007fb4 <_strtod_l+0x57c>
 8007ebe:	6023      	str	r3, [r4, #0]
 8007ec0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	f43f adf1 	beq.w	8007aaa <_strtod_l+0x72>
 8007ec8:	4620      	mov	r0, r4
 8007eca:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007ecc:	f002 ffd8 	bl	800ae80 <_Bfree>
 8007ed0:	4620      	mov	r0, r4
 8007ed2:	9908      	ldr	r1, [sp, #32]
 8007ed4:	f002 ffd4 	bl	800ae80 <_Bfree>
 8007ed8:	4659      	mov	r1, fp
 8007eda:	4620      	mov	r0, r4
 8007edc:	f002 ffd0 	bl	800ae80 <_Bfree>
 8007ee0:	4620      	mov	r0, r4
 8007ee2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007ee4:	f002 ffcc 	bl	800ae80 <_Bfree>
 8007ee8:	4631      	mov	r1, r6
 8007eea:	4620      	mov	r0, r4
 8007eec:	f002 ffc8 	bl	800ae80 <_Bfree>
 8007ef0:	e5db      	b.n	8007aaa <_strtod_l+0x72>
 8007ef2:	4b33      	ldr	r3, [pc, #204]	; (8007fc0 <_strtod_l+0x588>)
 8007ef4:	4640      	mov	r0, r8
 8007ef6:	9305      	str	r3, [sp, #20]
 8007ef8:	2300      	movs	r3, #0
 8007efa:	4649      	mov	r1, r9
 8007efc:	469a      	mov	sl, r3
 8007efe:	112d      	asrs	r5, r5, #4
 8007f00:	2d01      	cmp	r5, #1
 8007f02:	dc21      	bgt.n	8007f48 <_strtod_l+0x510>
 8007f04:	b10b      	cbz	r3, 8007f0a <_strtod_l+0x4d2>
 8007f06:	4680      	mov	r8, r0
 8007f08:	4689      	mov	r9, r1
 8007f0a:	492d      	ldr	r1, [pc, #180]	; (8007fc0 <_strtod_l+0x588>)
 8007f0c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8007f10:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007f14:	4642      	mov	r2, r8
 8007f16:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f1a:	464b      	mov	r3, r9
 8007f1c:	f7f8 fae6 	bl	80004ec <__aeabi_dmul>
 8007f20:	4b24      	ldr	r3, [pc, #144]	; (8007fb4 <_strtod_l+0x57c>)
 8007f22:	460a      	mov	r2, r1
 8007f24:	400b      	ands	r3, r1
 8007f26:	4927      	ldr	r1, [pc, #156]	; (8007fc4 <_strtod_l+0x58c>)
 8007f28:	4680      	mov	r8, r0
 8007f2a:	428b      	cmp	r3, r1
 8007f2c:	d8be      	bhi.n	8007eac <_strtod_l+0x474>
 8007f2e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007f32:	428b      	cmp	r3, r1
 8007f34:	bf86      	itte	hi
 8007f36:	f04f 38ff 	movhi.w	r8, #4294967295
 8007f3a:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 8007fc8 <_strtod_l+0x590>
 8007f3e:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8007f42:	2300      	movs	r3, #0
 8007f44:	9305      	str	r3, [sp, #20]
 8007f46:	e07b      	b.n	8008040 <_strtod_l+0x608>
 8007f48:	07ea      	lsls	r2, r5, #31
 8007f4a:	d505      	bpl.n	8007f58 <_strtod_l+0x520>
 8007f4c:	9b05      	ldr	r3, [sp, #20]
 8007f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f52:	f7f8 facb 	bl	80004ec <__aeabi_dmul>
 8007f56:	2301      	movs	r3, #1
 8007f58:	9a05      	ldr	r2, [sp, #20]
 8007f5a:	f10a 0a01 	add.w	sl, sl, #1
 8007f5e:	3208      	adds	r2, #8
 8007f60:	106d      	asrs	r5, r5, #1
 8007f62:	9205      	str	r2, [sp, #20]
 8007f64:	e7cc      	b.n	8007f00 <_strtod_l+0x4c8>
 8007f66:	d0ec      	beq.n	8007f42 <_strtod_l+0x50a>
 8007f68:	426d      	negs	r5, r5
 8007f6a:	f015 020f 	ands.w	r2, r5, #15
 8007f6e:	d00a      	beq.n	8007f86 <_strtod_l+0x54e>
 8007f70:	4b12      	ldr	r3, [pc, #72]	; (8007fbc <_strtod_l+0x584>)
 8007f72:	4640      	mov	r0, r8
 8007f74:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007f78:	4649      	mov	r1, r9
 8007f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f7e:	f7f8 fbdf 	bl	8000740 <__aeabi_ddiv>
 8007f82:	4680      	mov	r8, r0
 8007f84:	4689      	mov	r9, r1
 8007f86:	112d      	asrs	r5, r5, #4
 8007f88:	d0db      	beq.n	8007f42 <_strtod_l+0x50a>
 8007f8a:	2d1f      	cmp	r5, #31
 8007f8c:	dd1e      	ble.n	8007fcc <_strtod_l+0x594>
 8007f8e:	2600      	movs	r6, #0
 8007f90:	46b3      	mov	fp, r6
 8007f92:	960b      	str	r6, [sp, #44]	; 0x2c
 8007f94:	9608      	str	r6, [sp, #32]
 8007f96:	2322      	movs	r3, #34	; 0x22
 8007f98:	f04f 0800 	mov.w	r8, #0
 8007f9c:	f04f 0900 	mov.w	r9, #0
 8007fa0:	6023      	str	r3, [r4, #0]
 8007fa2:	e78d      	b.n	8007ec0 <_strtod_l+0x488>
 8007fa4:	0800cd36 	.word	0x0800cd36
 8007fa8:	0800cbe8 	.word	0x0800cbe8
 8007fac:	0800cd2e 	.word	0x0800cd2e
 8007fb0:	0800cd6d 	.word	0x0800cd6d
 8007fb4:	7ff00000 	.word	0x7ff00000
 8007fb8:	0800cff8 	.word	0x0800cff8
 8007fbc:	0800ced8 	.word	0x0800ced8
 8007fc0:	0800ceb0 	.word	0x0800ceb0
 8007fc4:	7ca00000 	.word	0x7ca00000
 8007fc8:	7fefffff 	.word	0x7fefffff
 8007fcc:	f015 0310 	ands.w	r3, r5, #16
 8007fd0:	bf18      	it	ne
 8007fd2:	236a      	movne	r3, #106	; 0x6a
 8007fd4:	4640      	mov	r0, r8
 8007fd6:	9305      	str	r3, [sp, #20]
 8007fd8:	4649      	mov	r1, r9
 8007fda:	2300      	movs	r3, #0
 8007fdc:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 80082a8 <_strtod_l+0x870>
 8007fe0:	07ea      	lsls	r2, r5, #31
 8007fe2:	d504      	bpl.n	8007fee <_strtod_l+0x5b6>
 8007fe4:	e9da 2300 	ldrd	r2, r3, [sl]
 8007fe8:	f7f8 fa80 	bl	80004ec <__aeabi_dmul>
 8007fec:	2301      	movs	r3, #1
 8007fee:	106d      	asrs	r5, r5, #1
 8007ff0:	f10a 0a08 	add.w	sl, sl, #8
 8007ff4:	d1f4      	bne.n	8007fe0 <_strtod_l+0x5a8>
 8007ff6:	b10b      	cbz	r3, 8007ffc <_strtod_l+0x5c4>
 8007ff8:	4680      	mov	r8, r0
 8007ffa:	4689      	mov	r9, r1
 8007ffc:	9b05      	ldr	r3, [sp, #20]
 8007ffe:	b1bb      	cbz	r3, 8008030 <_strtod_l+0x5f8>
 8008000:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8008004:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008008:	2b00      	cmp	r3, #0
 800800a:	4649      	mov	r1, r9
 800800c:	dd10      	ble.n	8008030 <_strtod_l+0x5f8>
 800800e:	2b1f      	cmp	r3, #31
 8008010:	f340 8128 	ble.w	8008264 <_strtod_l+0x82c>
 8008014:	2b34      	cmp	r3, #52	; 0x34
 8008016:	bfd8      	it	le
 8008018:	f04f 33ff 	movle.w	r3, #4294967295
 800801c:	f04f 0800 	mov.w	r8, #0
 8008020:	bfcf      	iteee	gt
 8008022:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8008026:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800802a:	4093      	lslle	r3, r2
 800802c:	ea03 0901 	andle.w	r9, r3, r1
 8008030:	2200      	movs	r2, #0
 8008032:	2300      	movs	r3, #0
 8008034:	4640      	mov	r0, r8
 8008036:	4649      	mov	r1, r9
 8008038:	f7f8 fcc0 	bl	80009bc <__aeabi_dcmpeq>
 800803c:	2800      	cmp	r0, #0
 800803e:	d1a6      	bne.n	8007f8e <_strtod_l+0x556>
 8008040:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008042:	465a      	mov	r2, fp
 8008044:	9300      	str	r3, [sp, #0]
 8008046:	4620      	mov	r0, r4
 8008048:	4633      	mov	r3, r6
 800804a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800804c:	f002 ff80 	bl	800af50 <__s2b>
 8008050:	900b      	str	r0, [sp, #44]	; 0x2c
 8008052:	2800      	cmp	r0, #0
 8008054:	f43f af2a 	beq.w	8007eac <_strtod_l+0x474>
 8008058:	2600      	movs	r6, #0
 800805a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800805c:	9b08      	ldr	r3, [sp, #32]
 800805e:	2a00      	cmp	r2, #0
 8008060:	eba3 0307 	sub.w	r3, r3, r7
 8008064:	bfa8      	it	ge
 8008066:	2300      	movge	r3, #0
 8008068:	46b3      	mov	fp, r6
 800806a:	9312      	str	r3, [sp, #72]	; 0x48
 800806c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008070:	9316      	str	r3, [sp, #88]	; 0x58
 8008072:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008074:	4620      	mov	r0, r4
 8008076:	6859      	ldr	r1, [r3, #4]
 8008078:	f002 fec2 	bl	800ae00 <_Balloc>
 800807c:	9008      	str	r0, [sp, #32]
 800807e:	2800      	cmp	r0, #0
 8008080:	f43f af18 	beq.w	8007eb4 <_strtod_l+0x47c>
 8008084:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008086:	300c      	adds	r0, #12
 8008088:	691a      	ldr	r2, [r3, #16]
 800808a:	f103 010c 	add.w	r1, r3, #12
 800808e:	3202      	adds	r2, #2
 8008090:	0092      	lsls	r2, r2, #2
 8008092:	f001 fbc4 	bl	800981e <memcpy>
 8008096:	ab1c      	add	r3, sp, #112	; 0x70
 8008098:	9301      	str	r3, [sp, #4]
 800809a:	ab1b      	add	r3, sp, #108	; 0x6c
 800809c:	9300      	str	r3, [sp, #0]
 800809e:	4642      	mov	r2, r8
 80080a0:	464b      	mov	r3, r9
 80080a2:	4620      	mov	r0, r4
 80080a4:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 80080a8:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 80080ac:	f003 fa7c 	bl	800b5a8 <__d2b>
 80080b0:	901a      	str	r0, [sp, #104]	; 0x68
 80080b2:	2800      	cmp	r0, #0
 80080b4:	f43f aefe 	beq.w	8007eb4 <_strtod_l+0x47c>
 80080b8:	2101      	movs	r1, #1
 80080ba:	4620      	mov	r0, r4
 80080bc:	f002 ffe0 	bl	800b080 <__i2b>
 80080c0:	4683      	mov	fp, r0
 80080c2:	2800      	cmp	r0, #0
 80080c4:	f43f aef6 	beq.w	8007eb4 <_strtod_l+0x47c>
 80080c8:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 80080ca:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80080cc:	2f00      	cmp	r7, #0
 80080ce:	bfab      	itete	ge
 80080d0:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 80080d2:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80080d4:	eb07 0a03 	addge.w	sl, r7, r3
 80080d8:	1bdd      	sublt	r5, r3, r7
 80080da:	9b05      	ldr	r3, [sp, #20]
 80080dc:	bfa8      	it	ge
 80080de:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 80080e0:	eba7 0703 	sub.w	r7, r7, r3
 80080e4:	4417      	add	r7, r2
 80080e6:	4b71      	ldr	r3, [pc, #452]	; (80082ac <_strtod_l+0x874>)
 80080e8:	f107 37ff 	add.w	r7, r7, #4294967295
 80080ec:	bfb8      	it	lt
 80080ee:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 80080f2:	429f      	cmp	r7, r3
 80080f4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80080f8:	f280 80c7 	bge.w	800828a <_strtod_l+0x852>
 80080fc:	1bdb      	subs	r3, r3, r7
 80080fe:	2b1f      	cmp	r3, #31
 8008100:	f04f 0101 	mov.w	r1, #1
 8008104:	eba2 0203 	sub.w	r2, r2, r3
 8008108:	f300 80b3 	bgt.w	8008272 <_strtod_l+0x83a>
 800810c:	fa01 f303 	lsl.w	r3, r1, r3
 8008110:	9313      	str	r3, [sp, #76]	; 0x4c
 8008112:	2300      	movs	r3, #0
 8008114:	9310      	str	r3, [sp, #64]	; 0x40
 8008116:	eb0a 0702 	add.w	r7, sl, r2
 800811a:	9b05      	ldr	r3, [sp, #20]
 800811c:	45ba      	cmp	sl, r7
 800811e:	4415      	add	r5, r2
 8008120:	441d      	add	r5, r3
 8008122:	4653      	mov	r3, sl
 8008124:	bfa8      	it	ge
 8008126:	463b      	movge	r3, r7
 8008128:	42ab      	cmp	r3, r5
 800812a:	bfa8      	it	ge
 800812c:	462b      	movge	r3, r5
 800812e:	2b00      	cmp	r3, #0
 8008130:	bfc2      	ittt	gt
 8008132:	1aff      	subgt	r7, r7, r3
 8008134:	1aed      	subgt	r5, r5, r3
 8008136:	ebaa 0a03 	subgt.w	sl, sl, r3
 800813a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800813c:	2b00      	cmp	r3, #0
 800813e:	dd17      	ble.n	8008170 <_strtod_l+0x738>
 8008140:	4659      	mov	r1, fp
 8008142:	461a      	mov	r2, r3
 8008144:	4620      	mov	r0, r4
 8008146:	f003 f859 	bl	800b1fc <__pow5mult>
 800814a:	4683      	mov	fp, r0
 800814c:	2800      	cmp	r0, #0
 800814e:	f43f aeb1 	beq.w	8007eb4 <_strtod_l+0x47c>
 8008152:	4601      	mov	r1, r0
 8008154:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008156:	4620      	mov	r0, r4
 8008158:	f002 ffa8 	bl	800b0ac <__multiply>
 800815c:	900a      	str	r0, [sp, #40]	; 0x28
 800815e:	2800      	cmp	r0, #0
 8008160:	f43f aea8 	beq.w	8007eb4 <_strtod_l+0x47c>
 8008164:	4620      	mov	r0, r4
 8008166:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008168:	f002 fe8a 	bl	800ae80 <_Bfree>
 800816c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800816e:	931a      	str	r3, [sp, #104]	; 0x68
 8008170:	2f00      	cmp	r7, #0
 8008172:	f300 808f 	bgt.w	8008294 <_strtod_l+0x85c>
 8008176:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008178:	2b00      	cmp	r3, #0
 800817a:	dd08      	ble.n	800818e <_strtod_l+0x756>
 800817c:	4620      	mov	r0, r4
 800817e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008180:	9908      	ldr	r1, [sp, #32]
 8008182:	f003 f83b 	bl	800b1fc <__pow5mult>
 8008186:	9008      	str	r0, [sp, #32]
 8008188:	2800      	cmp	r0, #0
 800818a:	f43f ae93 	beq.w	8007eb4 <_strtod_l+0x47c>
 800818e:	2d00      	cmp	r5, #0
 8008190:	dd08      	ble.n	80081a4 <_strtod_l+0x76c>
 8008192:	462a      	mov	r2, r5
 8008194:	4620      	mov	r0, r4
 8008196:	9908      	ldr	r1, [sp, #32]
 8008198:	f003 f88a 	bl	800b2b0 <__lshift>
 800819c:	9008      	str	r0, [sp, #32]
 800819e:	2800      	cmp	r0, #0
 80081a0:	f43f ae88 	beq.w	8007eb4 <_strtod_l+0x47c>
 80081a4:	f1ba 0f00 	cmp.w	sl, #0
 80081a8:	dd08      	ble.n	80081bc <_strtod_l+0x784>
 80081aa:	4659      	mov	r1, fp
 80081ac:	4652      	mov	r2, sl
 80081ae:	4620      	mov	r0, r4
 80081b0:	f003 f87e 	bl	800b2b0 <__lshift>
 80081b4:	4683      	mov	fp, r0
 80081b6:	2800      	cmp	r0, #0
 80081b8:	f43f ae7c 	beq.w	8007eb4 <_strtod_l+0x47c>
 80081bc:	4620      	mov	r0, r4
 80081be:	9a08      	ldr	r2, [sp, #32]
 80081c0:	991a      	ldr	r1, [sp, #104]	; 0x68
 80081c2:	f003 f8fd 	bl	800b3c0 <__mdiff>
 80081c6:	4606      	mov	r6, r0
 80081c8:	2800      	cmp	r0, #0
 80081ca:	f43f ae73 	beq.w	8007eb4 <_strtod_l+0x47c>
 80081ce:	2500      	movs	r5, #0
 80081d0:	68c3      	ldr	r3, [r0, #12]
 80081d2:	4659      	mov	r1, fp
 80081d4:	60c5      	str	r5, [r0, #12]
 80081d6:	930a      	str	r3, [sp, #40]	; 0x28
 80081d8:	f003 f8d6 	bl	800b388 <__mcmp>
 80081dc:	42a8      	cmp	r0, r5
 80081de:	da6b      	bge.n	80082b8 <_strtod_l+0x880>
 80081e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081e2:	ea53 0308 	orrs.w	r3, r3, r8
 80081e6:	f040 808f 	bne.w	8008308 <_strtod_l+0x8d0>
 80081ea:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	f040 808a 	bne.w	8008308 <_strtod_l+0x8d0>
 80081f4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80081f8:	0d1b      	lsrs	r3, r3, #20
 80081fa:	051b      	lsls	r3, r3, #20
 80081fc:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008200:	f240 8082 	bls.w	8008308 <_strtod_l+0x8d0>
 8008204:	6973      	ldr	r3, [r6, #20]
 8008206:	b913      	cbnz	r3, 800820e <_strtod_l+0x7d6>
 8008208:	6933      	ldr	r3, [r6, #16]
 800820a:	2b01      	cmp	r3, #1
 800820c:	dd7c      	ble.n	8008308 <_strtod_l+0x8d0>
 800820e:	4631      	mov	r1, r6
 8008210:	2201      	movs	r2, #1
 8008212:	4620      	mov	r0, r4
 8008214:	f003 f84c 	bl	800b2b0 <__lshift>
 8008218:	4659      	mov	r1, fp
 800821a:	4606      	mov	r6, r0
 800821c:	f003 f8b4 	bl	800b388 <__mcmp>
 8008220:	2800      	cmp	r0, #0
 8008222:	dd71      	ble.n	8008308 <_strtod_l+0x8d0>
 8008224:	9905      	ldr	r1, [sp, #20]
 8008226:	464b      	mov	r3, r9
 8008228:	4a21      	ldr	r2, [pc, #132]	; (80082b0 <_strtod_l+0x878>)
 800822a:	2900      	cmp	r1, #0
 800822c:	f000 808d 	beq.w	800834a <_strtod_l+0x912>
 8008230:	ea02 0109 	and.w	r1, r2, r9
 8008234:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008238:	f300 8087 	bgt.w	800834a <_strtod_l+0x912>
 800823c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008240:	f77f aea9 	ble.w	8007f96 <_strtod_l+0x55e>
 8008244:	4640      	mov	r0, r8
 8008246:	4649      	mov	r1, r9
 8008248:	4b1a      	ldr	r3, [pc, #104]	; (80082b4 <_strtod_l+0x87c>)
 800824a:	2200      	movs	r2, #0
 800824c:	f7f8 f94e 	bl	80004ec <__aeabi_dmul>
 8008250:	4b17      	ldr	r3, [pc, #92]	; (80082b0 <_strtod_l+0x878>)
 8008252:	4680      	mov	r8, r0
 8008254:	400b      	ands	r3, r1
 8008256:	4689      	mov	r9, r1
 8008258:	2b00      	cmp	r3, #0
 800825a:	f47f ae35 	bne.w	8007ec8 <_strtod_l+0x490>
 800825e:	2322      	movs	r3, #34	; 0x22
 8008260:	6023      	str	r3, [r4, #0]
 8008262:	e631      	b.n	8007ec8 <_strtod_l+0x490>
 8008264:	f04f 32ff 	mov.w	r2, #4294967295
 8008268:	fa02 f303 	lsl.w	r3, r2, r3
 800826c:	ea03 0808 	and.w	r8, r3, r8
 8008270:	e6de      	b.n	8008030 <_strtod_l+0x5f8>
 8008272:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 8008276:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 800827a:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 800827e:	37e2      	adds	r7, #226	; 0xe2
 8008280:	fa01 f307 	lsl.w	r3, r1, r7
 8008284:	9310      	str	r3, [sp, #64]	; 0x40
 8008286:	9113      	str	r1, [sp, #76]	; 0x4c
 8008288:	e745      	b.n	8008116 <_strtod_l+0x6de>
 800828a:	2300      	movs	r3, #0
 800828c:	9310      	str	r3, [sp, #64]	; 0x40
 800828e:	2301      	movs	r3, #1
 8008290:	9313      	str	r3, [sp, #76]	; 0x4c
 8008292:	e740      	b.n	8008116 <_strtod_l+0x6de>
 8008294:	463a      	mov	r2, r7
 8008296:	4620      	mov	r0, r4
 8008298:	991a      	ldr	r1, [sp, #104]	; 0x68
 800829a:	f003 f809 	bl	800b2b0 <__lshift>
 800829e:	901a      	str	r0, [sp, #104]	; 0x68
 80082a0:	2800      	cmp	r0, #0
 80082a2:	f47f af68 	bne.w	8008176 <_strtod_l+0x73e>
 80082a6:	e605      	b.n	8007eb4 <_strtod_l+0x47c>
 80082a8:	0800cc00 	.word	0x0800cc00
 80082ac:	fffffc02 	.word	0xfffffc02
 80082b0:	7ff00000 	.word	0x7ff00000
 80082b4:	39500000 	.word	0x39500000
 80082b8:	46ca      	mov	sl, r9
 80082ba:	d165      	bne.n	8008388 <_strtod_l+0x950>
 80082bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80082be:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80082c2:	b352      	cbz	r2, 800831a <_strtod_l+0x8e2>
 80082c4:	4a9e      	ldr	r2, [pc, #632]	; (8008540 <_strtod_l+0xb08>)
 80082c6:	4293      	cmp	r3, r2
 80082c8:	d12a      	bne.n	8008320 <_strtod_l+0x8e8>
 80082ca:	9b05      	ldr	r3, [sp, #20]
 80082cc:	4641      	mov	r1, r8
 80082ce:	b1fb      	cbz	r3, 8008310 <_strtod_l+0x8d8>
 80082d0:	4b9c      	ldr	r3, [pc, #624]	; (8008544 <_strtod_l+0xb0c>)
 80082d2:	f04f 32ff 	mov.w	r2, #4294967295
 80082d6:	ea09 0303 	and.w	r3, r9, r3
 80082da:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80082de:	d81a      	bhi.n	8008316 <_strtod_l+0x8de>
 80082e0:	0d1b      	lsrs	r3, r3, #20
 80082e2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80082e6:	fa02 f303 	lsl.w	r3, r2, r3
 80082ea:	4299      	cmp	r1, r3
 80082ec:	d118      	bne.n	8008320 <_strtod_l+0x8e8>
 80082ee:	4b96      	ldr	r3, [pc, #600]	; (8008548 <_strtod_l+0xb10>)
 80082f0:	459a      	cmp	sl, r3
 80082f2:	d102      	bne.n	80082fa <_strtod_l+0x8c2>
 80082f4:	3101      	adds	r1, #1
 80082f6:	f43f addd 	beq.w	8007eb4 <_strtod_l+0x47c>
 80082fa:	f04f 0800 	mov.w	r8, #0
 80082fe:	4b91      	ldr	r3, [pc, #580]	; (8008544 <_strtod_l+0xb0c>)
 8008300:	ea0a 0303 	and.w	r3, sl, r3
 8008304:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8008308:	9b05      	ldr	r3, [sp, #20]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d19a      	bne.n	8008244 <_strtod_l+0x80c>
 800830e:	e5db      	b.n	8007ec8 <_strtod_l+0x490>
 8008310:	f04f 33ff 	mov.w	r3, #4294967295
 8008314:	e7e9      	b.n	80082ea <_strtod_l+0x8b2>
 8008316:	4613      	mov	r3, r2
 8008318:	e7e7      	b.n	80082ea <_strtod_l+0x8b2>
 800831a:	ea53 0308 	orrs.w	r3, r3, r8
 800831e:	d081      	beq.n	8008224 <_strtod_l+0x7ec>
 8008320:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008322:	b1e3      	cbz	r3, 800835e <_strtod_l+0x926>
 8008324:	ea13 0f0a 	tst.w	r3, sl
 8008328:	d0ee      	beq.n	8008308 <_strtod_l+0x8d0>
 800832a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800832c:	4640      	mov	r0, r8
 800832e:	4649      	mov	r1, r9
 8008330:	9a05      	ldr	r2, [sp, #20]
 8008332:	b1c3      	cbz	r3, 8008366 <_strtod_l+0x92e>
 8008334:	f7ff fb5d 	bl	80079f2 <sulp>
 8008338:	4602      	mov	r2, r0
 800833a:	460b      	mov	r3, r1
 800833c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800833e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008340:	f7f7 ff1e 	bl	8000180 <__adddf3>
 8008344:	4680      	mov	r8, r0
 8008346:	4689      	mov	r9, r1
 8008348:	e7de      	b.n	8008308 <_strtod_l+0x8d0>
 800834a:	4013      	ands	r3, r2
 800834c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008350:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8008354:	f04f 38ff 	mov.w	r8, #4294967295
 8008358:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800835c:	e7d4      	b.n	8008308 <_strtod_l+0x8d0>
 800835e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008360:	ea13 0f08 	tst.w	r3, r8
 8008364:	e7e0      	b.n	8008328 <_strtod_l+0x8f0>
 8008366:	f7ff fb44 	bl	80079f2 <sulp>
 800836a:	4602      	mov	r2, r0
 800836c:	460b      	mov	r3, r1
 800836e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008370:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008372:	f7f7 ff03 	bl	800017c <__aeabi_dsub>
 8008376:	2200      	movs	r2, #0
 8008378:	2300      	movs	r3, #0
 800837a:	4680      	mov	r8, r0
 800837c:	4689      	mov	r9, r1
 800837e:	f7f8 fb1d 	bl	80009bc <__aeabi_dcmpeq>
 8008382:	2800      	cmp	r0, #0
 8008384:	d0c0      	beq.n	8008308 <_strtod_l+0x8d0>
 8008386:	e606      	b.n	8007f96 <_strtod_l+0x55e>
 8008388:	4659      	mov	r1, fp
 800838a:	4630      	mov	r0, r6
 800838c:	f003 f962 	bl	800b654 <__ratio>
 8008390:	4602      	mov	r2, r0
 8008392:	460b      	mov	r3, r1
 8008394:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8008398:	2200      	movs	r2, #0
 800839a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800839e:	f7f8 fb21 	bl	80009e4 <__aeabi_dcmple>
 80083a2:	2800      	cmp	r0, #0
 80083a4:	d06f      	beq.n	8008486 <_strtod_l+0xa4e>
 80083a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d17c      	bne.n	80084a6 <_strtod_l+0xa6e>
 80083ac:	f1b8 0f00 	cmp.w	r8, #0
 80083b0:	d159      	bne.n	8008466 <_strtod_l+0xa2e>
 80083b2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d17b      	bne.n	80084b2 <_strtod_l+0xa7a>
 80083ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80083be:	2200      	movs	r2, #0
 80083c0:	4b62      	ldr	r3, [pc, #392]	; (800854c <_strtod_l+0xb14>)
 80083c2:	f7f8 fb05 	bl	80009d0 <__aeabi_dcmplt>
 80083c6:	2800      	cmp	r0, #0
 80083c8:	d15a      	bne.n	8008480 <_strtod_l+0xa48>
 80083ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80083ce:	2200      	movs	r2, #0
 80083d0:	4b5f      	ldr	r3, [pc, #380]	; (8008550 <_strtod_l+0xb18>)
 80083d2:	f7f8 f88b 	bl	80004ec <__aeabi_dmul>
 80083d6:	4605      	mov	r5, r0
 80083d8:	460f      	mov	r7, r1
 80083da:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80083de:	9506      	str	r5, [sp, #24]
 80083e0:	9307      	str	r3, [sp, #28]
 80083e2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80083e6:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80083ea:	4b56      	ldr	r3, [pc, #344]	; (8008544 <_strtod_l+0xb0c>)
 80083ec:	4a55      	ldr	r2, [pc, #340]	; (8008544 <_strtod_l+0xb0c>)
 80083ee:	ea0a 0303 	and.w	r3, sl, r3
 80083f2:	9313      	str	r3, [sp, #76]	; 0x4c
 80083f4:	4b57      	ldr	r3, [pc, #348]	; (8008554 <_strtod_l+0xb1c>)
 80083f6:	ea0a 0202 	and.w	r2, sl, r2
 80083fa:	429a      	cmp	r2, r3
 80083fc:	f040 80b0 	bne.w	8008560 <_strtod_l+0xb28>
 8008400:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8008404:	4640      	mov	r0, r8
 8008406:	4649      	mov	r1, r9
 8008408:	f003 f866 	bl	800b4d8 <__ulp>
 800840c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008410:	f7f8 f86c 	bl	80004ec <__aeabi_dmul>
 8008414:	4642      	mov	r2, r8
 8008416:	464b      	mov	r3, r9
 8008418:	f7f7 feb2 	bl	8000180 <__adddf3>
 800841c:	f8df a124 	ldr.w	sl, [pc, #292]	; 8008544 <_strtod_l+0xb0c>
 8008420:	4a4d      	ldr	r2, [pc, #308]	; (8008558 <_strtod_l+0xb20>)
 8008422:	ea01 0a0a 	and.w	sl, r1, sl
 8008426:	4592      	cmp	sl, r2
 8008428:	4680      	mov	r8, r0
 800842a:	d948      	bls.n	80084be <_strtod_l+0xa86>
 800842c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800842e:	4b46      	ldr	r3, [pc, #280]	; (8008548 <_strtod_l+0xb10>)
 8008430:	429a      	cmp	r2, r3
 8008432:	d103      	bne.n	800843c <_strtod_l+0xa04>
 8008434:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008436:	3301      	adds	r3, #1
 8008438:	f43f ad3c 	beq.w	8007eb4 <_strtod_l+0x47c>
 800843c:	f04f 38ff 	mov.w	r8, #4294967295
 8008440:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8008548 <_strtod_l+0xb10>
 8008444:	4620      	mov	r0, r4
 8008446:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008448:	f002 fd1a 	bl	800ae80 <_Bfree>
 800844c:	4620      	mov	r0, r4
 800844e:	9908      	ldr	r1, [sp, #32]
 8008450:	f002 fd16 	bl	800ae80 <_Bfree>
 8008454:	4659      	mov	r1, fp
 8008456:	4620      	mov	r0, r4
 8008458:	f002 fd12 	bl	800ae80 <_Bfree>
 800845c:	4631      	mov	r1, r6
 800845e:	4620      	mov	r0, r4
 8008460:	f002 fd0e 	bl	800ae80 <_Bfree>
 8008464:	e605      	b.n	8008072 <_strtod_l+0x63a>
 8008466:	f1b8 0f01 	cmp.w	r8, #1
 800846a:	d103      	bne.n	8008474 <_strtod_l+0xa3c>
 800846c:	f1b9 0f00 	cmp.w	r9, #0
 8008470:	f43f ad91 	beq.w	8007f96 <_strtod_l+0x55e>
 8008474:	2200      	movs	r2, #0
 8008476:	4b39      	ldr	r3, [pc, #228]	; (800855c <_strtod_l+0xb24>)
 8008478:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800847a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800847e:	e016      	b.n	80084ae <_strtod_l+0xa76>
 8008480:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008482:	4f33      	ldr	r7, [pc, #204]	; (8008550 <_strtod_l+0xb18>)
 8008484:	e7a9      	b.n	80083da <_strtod_l+0x9a2>
 8008486:	4b32      	ldr	r3, [pc, #200]	; (8008550 <_strtod_l+0xb18>)
 8008488:	2200      	movs	r2, #0
 800848a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800848e:	f7f8 f82d 	bl	80004ec <__aeabi_dmul>
 8008492:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008494:	4605      	mov	r5, r0
 8008496:	460f      	mov	r7, r1
 8008498:	2b00      	cmp	r3, #0
 800849a:	d09e      	beq.n	80083da <_strtod_l+0x9a2>
 800849c:	4602      	mov	r2, r0
 800849e:	460b      	mov	r3, r1
 80084a0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80084a4:	e79d      	b.n	80083e2 <_strtod_l+0x9aa>
 80084a6:	2200      	movs	r2, #0
 80084a8:	4b28      	ldr	r3, [pc, #160]	; (800854c <_strtod_l+0xb14>)
 80084aa:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80084ae:	4f27      	ldr	r7, [pc, #156]	; (800854c <_strtod_l+0xb14>)
 80084b0:	e797      	b.n	80083e2 <_strtod_l+0x9aa>
 80084b2:	2200      	movs	r2, #0
 80084b4:	4b29      	ldr	r3, [pc, #164]	; (800855c <_strtod_l+0xb24>)
 80084b6:	4645      	mov	r5, r8
 80084b8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80084bc:	e7f7      	b.n	80084ae <_strtod_l+0xa76>
 80084be:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 80084c2:	9b05      	ldr	r3, [sp, #20]
 80084c4:	46ca      	mov	sl, r9
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d1bc      	bne.n	8008444 <_strtod_l+0xa0c>
 80084ca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80084ce:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80084d0:	0d1b      	lsrs	r3, r3, #20
 80084d2:	051b      	lsls	r3, r3, #20
 80084d4:	429a      	cmp	r2, r3
 80084d6:	d1b5      	bne.n	8008444 <_strtod_l+0xa0c>
 80084d8:	4628      	mov	r0, r5
 80084da:	4639      	mov	r1, r7
 80084dc:	f7f8 fe22 	bl	8001124 <__aeabi_d2lz>
 80084e0:	f7f7 ffd6 	bl	8000490 <__aeabi_l2d>
 80084e4:	4602      	mov	r2, r0
 80084e6:	460b      	mov	r3, r1
 80084e8:	4628      	mov	r0, r5
 80084ea:	4639      	mov	r1, r7
 80084ec:	f7f7 fe46 	bl	800017c <__aeabi_dsub>
 80084f0:	460b      	mov	r3, r1
 80084f2:	4602      	mov	r2, r0
 80084f4:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 80084f8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80084fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084fe:	ea4a 0a08 	orr.w	sl, sl, r8
 8008502:	ea5a 0a03 	orrs.w	sl, sl, r3
 8008506:	d06c      	beq.n	80085e2 <_strtod_l+0xbaa>
 8008508:	a309      	add	r3, pc, #36	; (adr r3, 8008530 <_strtod_l+0xaf8>)
 800850a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800850e:	f7f8 fa5f 	bl	80009d0 <__aeabi_dcmplt>
 8008512:	2800      	cmp	r0, #0
 8008514:	f47f acd8 	bne.w	8007ec8 <_strtod_l+0x490>
 8008518:	a307      	add	r3, pc, #28	; (adr r3, 8008538 <_strtod_l+0xb00>)
 800851a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800851e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008522:	f7f8 fa73 	bl	8000a0c <__aeabi_dcmpgt>
 8008526:	2800      	cmp	r0, #0
 8008528:	d08c      	beq.n	8008444 <_strtod_l+0xa0c>
 800852a:	e4cd      	b.n	8007ec8 <_strtod_l+0x490>
 800852c:	f3af 8000 	nop.w
 8008530:	94a03595 	.word	0x94a03595
 8008534:	3fdfffff 	.word	0x3fdfffff
 8008538:	35afe535 	.word	0x35afe535
 800853c:	3fe00000 	.word	0x3fe00000
 8008540:	000fffff 	.word	0x000fffff
 8008544:	7ff00000 	.word	0x7ff00000
 8008548:	7fefffff 	.word	0x7fefffff
 800854c:	3ff00000 	.word	0x3ff00000
 8008550:	3fe00000 	.word	0x3fe00000
 8008554:	7fe00000 	.word	0x7fe00000
 8008558:	7c9fffff 	.word	0x7c9fffff
 800855c:	bff00000 	.word	0xbff00000
 8008560:	9b05      	ldr	r3, [sp, #20]
 8008562:	b333      	cbz	r3, 80085b2 <_strtod_l+0xb7a>
 8008564:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008566:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800856a:	d822      	bhi.n	80085b2 <_strtod_l+0xb7a>
 800856c:	a328      	add	r3, pc, #160	; (adr r3, 8008610 <_strtod_l+0xbd8>)
 800856e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008572:	4628      	mov	r0, r5
 8008574:	4639      	mov	r1, r7
 8008576:	f7f8 fa35 	bl	80009e4 <__aeabi_dcmple>
 800857a:	b1a0      	cbz	r0, 80085a6 <_strtod_l+0xb6e>
 800857c:	4639      	mov	r1, r7
 800857e:	4628      	mov	r0, r5
 8008580:	f7f8 fa8c 	bl	8000a9c <__aeabi_d2uiz>
 8008584:	2801      	cmp	r0, #1
 8008586:	bf38      	it	cc
 8008588:	2001      	movcc	r0, #1
 800858a:	f7f7 ff35 	bl	80003f8 <__aeabi_ui2d>
 800858e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008590:	4605      	mov	r5, r0
 8008592:	460f      	mov	r7, r1
 8008594:	bb03      	cbnz	r3, 80085d8 <_strtod_l+0xba0>
 8008596:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800859a:	9014      	str	r0, [sp, #80]	; 0x50
 800859c:	9315      	str	r3, [sp, #84]	; 0x54
 800859e:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80085a2:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80085a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80085a8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80085aa:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80085ae:	1a9b      	subs	r3, r3, r2
 80085b0:	9311      	str	r3, [sp, #68]	; 0x44
 80085b2:	980c      	ldr	r0, [sp, #48]	; 0x30
 80085b4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80085b6:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 80085ba:	f002 ff8d 	bl	800b4d8 <__ulp>
 80085be:	4602      	mov	r2, r0
 80085c0:	460b      	mov	r3, r1
 80085c2:	4640      	mov	r0, r8
 80085c4:	4649      	mov	r1, r9
 80085c6:	f7f7 ff91 	bl	80004ec <__aeabi_dmul>
 80085ca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80085cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80085ce:	f7f7 fdd7 	bl	8000180 <__adddf3>
 80085d2:	4680      	mov	r8, r0
 80085d4:	4689      	mov	r9, r1
 80085d6:	e774      	b.n	80084c2 <_strtod_l+0xa8a>
 80085d8:	4602      	mov	r2, r0
 80085da:	460b      	mov	r3, r1
 80085dc:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80085e0:	e7dd      	b.n	800859e <_strtod_l+0xb66>
 80085e2:	a30d      	add	r3, pc, #52	; (adr r3, 8008618 <_strtod_l+0xbe0>)
 80085e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085e8:	f7f8 f9f2 	bl	80009d0 <__aeabi_dcmplt>
 80085ec:	e79b      	b.n	8008526 <_strtod_l+0xaee>
 80085ee:	2300      	movs	r3, #0
 80085f0:	930e      	str	r3, [sp, #56]	; 0x38
 80085f2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80085f4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80085f6:	6013      	str	r3, [r2, #0]
 80085f8:	f7ff ba5b 	b.w	8007ab2 <_strtod_l+0x7a>
 80085fc:	2a65      	cmp	r2, #101	; 0x65
 80085fe:	f43f ab52 	beq.w	8007ca6 <_strtod_l+0x26e>
 8008602:	2a45      	cmp	r2, #69	; 0x45
 8008604:	f43f ab4f 	beq.w	8007ca6 <_strtod_l+0x26e>
 8008608:	2301      	movs	r3, #1
 800860a:	f7ff bb87 	b.w	8007d1c <_strtod_l+0x2e4>
 800860e:	bf00      	nop
 8008610:	ffc00000 	.word	0xffc00000
 8008614:	41dfffff 	.word	0x41dfffff
 8008618:	94a03595 	.word	0x94a03595
 800861c:	3fcfffff 	.word	0x3fcfffff

08008620 <_strtod_r>:
 8008620:	4b01      	ldr	r3, [pc, #4]	; (8008628 <_strtod_r+0x8>)
 8008622:	f7ff ba09 	b.w	8007a38 <_strtod_l>
 8008626:	bf00      	nop
 8008628:	20000024 	.word	0x20000024

0800862c <strtod>:
 800862c:	460a      	mov	r2, r1
 800862e:	4601      	mov	r1, r0
 8008630:	4802      	ldr	r0, [pc, #8]	; (800863c <strtod+0x10>)
 8008632:	4b03      	ldr	r3, [pc, #12]	; (8008640 <strtod+0x14>)
 8008634:	6800      	ldr	r0, [r0, #0]
 8008636:	f7ff b9ff 	b.w	8007a38 <_strtod_l>
 800863a:	bf00      	nop
 800863c:	200001dc 	.word	0x200001dc
 8008640:	20000024 	.word	0x20000024

08008644 <_strtol_l.constprop.0>:
 8008644:	2b01      	cmp	r3, #1
 8008646:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800864a:	4686      	mov	lr, r0
 800864c:	4690      	mov	r8, r2
 800864e:	d001      	beq.n	8008654 <_strtol_l.constprop.0+0x10>
 8008650:	2b24      	cmp	r3, #36	; 0x24
 8008652:	d906      	bls.n	8008662 <_strtol_l.constprop.0+0x1e>
 8008654:	f001 f8a8 	bl	80097a8 <__errno>
 8008658:	2316      	movs	r3, #22
 800865a:	6003      	str	r3, [r0, #0]
 800865c:	2000      	movs	r0, #0
 800865e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008662:	460d      	mov	r5, r1
 8008664:	4835      	ldr	r0, [pc, #212]	; (800873c <_strtol_l.constprop.0+0xf8>)
 8008666:	462a      	mov	r2, r5
 8008668:	f815 4b01 	ldrb.w	r4, [r5], #1
 800866c:	5d06      	ldrb	r6, [r0, r4]
 800866e:	f016 0608 	ands.w	r6, r6, #8
 8008672:	d1f8      	bne.n	8008666 <_strtol_l.constprop.0+0x22>
 8008674:	2c2d      	cmp	r4, #45	; 0x2d
 8008676:	d12e      	bne.n	80086d6 <_strtol_l.constprop.0+0x92>
 8008678:	2601      	movs	r6, #1
 800867a:	782c      	ldrb	r4, [r5, #0]
 800867c:	1c95      	adds	r5, r2, #2
 800867e:	2b00      	cmp	r3, #0
 8008680:	d057      	beq.n	8008732 <_strtol_l.constprop.0+0xee>
 8008682:	2b10      	cmp	r3, #16
 8008684:	d109      	bne.n	800869a <_strtol_l.constprop.0+0x56>
 8008686:	2c30      	cmp	r4, #48	; 0x30
 8008688:	d107      	bne.n	800869a <_strtol_l.constprop.0+0x56>
 800868a:	782a      	ldrb	r2, [r5, #0]
 800868c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8008690:	2a58      	cmp	r2, #88	; 0x58
 8008692:	d149      	bne.n	8008728 <_strtol_l.constprop.0+0xe4>
 8008694:	2310      	movs	r3, #16
 8008696:	786c      	ldrb	r4, [r5, #1]
 8008698:	3502      	adds	r5, #2
 800869a:	2200      	movs	r2, #0
 800869c:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 80086a0:	f10c 3cff 	add.w	ip, ip, #4294967295
 80086a4:	fbbc f9f3 	udiv	r9, ip, r3
 80086a8:	4610      	mov	r0, r2
 80086aa:	fb03 ca19 	mls	sl, r3, r9, ip
 80086ae:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80086b2:	2f09      	cmp	r7, #9
 80086b4:	d814      	bhi.n	80086e0 <_strtol_l.constprop.0+0x9c>
 80086b6:	463c      	mov	r4, r7
 80086b8:	42a3      	cmp	r3, r4
 80086ba:	dd20      	ble.n	80086fe <_strtol_l.constprop.0+0xba>
 80086bc:	1c57      	adds	r7, r2, #1
 80086be:	d007      	beq.n	80086d0 <_strtol_l.constprop.0+0x8c>
 80086c0:	4581      	cmp	r9, r0
 80086c2:	d319      	bcc.n	80086f8 <_strtol_l.constprop.0+0xb4>
 80086c4:	d101      	bne.n	80086ca <_strtol_l.constprop.0+0x86>
 80086c6:	45a2      	cmp	sl, r4
 80086c8:	db16      	blt.n	80086f8 <_strtol_l.constprop.0+0xb4>
 80086ca:	2201      	movs	r2, #1
 80086cc:	fb00 4003 	mla	r0, r0, r3, r4
 80086d0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80086d4:	e7eb      	b.n	80086ae <_strtol_l.constprop.0+0x6a>
 80086d6:	2c2b      	cmp	r4, #43	; 0x2b
 80086d8:	bf04      	itt	eq
 80086da:	782c      	ldrbeq	r4, [r5, #0]
 80086dc:	1c95      	addeq	r5, r2, #2
 80086de:	e7ce      	b.n	800867e <_strtol_l.constprop.0+0x3a>
 80086e0:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80086e4:	2f19      	cmp	r7, #25
 80086e6:	d801      	bhi.n	80086ec <_strtol_l.constprop.0+0xa8>
 80086e8:	3c37      	subs	r4, #55	; 0x37
 80086ea:	e7e5      	b.n	80086b8 <_strtol_l.constprop.0+0x74>
 80086ec:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80086f0:	2f19      	cmp	r7, #25
 80086f2:	d804      	bhi.n	80086fe <_strtol_l.constprop.0+0xba>
 80086f4:	3c57      	subs	r4, #87	; 0x57
 80086f6:	e7df      	b.n	80086b8 <_strtol_l.constprop.0+0x74>
 80086f8:	f04f 32ff 	mov.w	r2, #4294967295
 80086fc:	e7e8      	b.n	80086d0 <_strtol_l.constprop.0+0x8c>
 80086fe:	1c53      	adds	r3, r2, #1
 8008700:	d108      	bne.n	8008714 <_strtol_l.constprop.0+0xd0>
 8008702:	2322      	movs	r3, #34	; 0x22
 8008704:	4660      	mov	r0, ip
 8008706:	f8ce 3000 	str.w	r3, [lr]
 800870a:	f1b8 0f00 	cmp.w	r8, #0
 800870e:	d0a6      	beq.n	800865e <_strtol_l.constprop.0+0x1a>
 8008710:	1e69      	subs	r1, r5, #1
 8008712:	e006      	b.n	8008722 <_strtol_l.constprop.0+0xde>
 8008714:	b106      	cbz	r6, 8008718 <_strtol_l.constprop.0+0xd4>
 8008716:	4240      	negs	r0, r0
 8008718:	f1b8 0f00 	cmp.w	r8, #0
 800871c:	d09f      	beq.n	800865e <_strtol_l.constprop.0+0x1a>
 800871e:	2a00      	cmp	r2, #0
 8008720:	d1f6      	bne.n	8008710 <_strtol_l.constprop.0+0xcc>
 8008722:	f8c8 1000 	str.w	r1, [r8]
 8008726:	e79a      	b.n	800865e <_strtol_l.constprop.0+0x1a>
 8008728:	2430      	movs	r4, #48	; 0x30
 800872a:	2b00      	cmp	r3, #0
 800872c:	d1b5      	bne.n	800869a <_strtol_l.constprop.0+0x56>
 800872e:	2308      	movs	r3, #8
 8008730:	e7b3      	b.n	800869a <_strtol_l.constprop.0+0x56>
 8008732:	2c30      	cmp	r4, #48	; 0x30
 8008734:	d0a9      	beq.n	800868a <_strtol_l.constprop.0+0x46>
 8008736:	230a      	movs	r3, #10
 8008738:	e7af      	b.n	800869a <_strtol_l.constprop.0+0x56>
 800873a:	bf00      	nop
 800873c:	0800cc29 	.word	0x0800cc29

08008740 <_strtol_r>:
 8008740:	f7ff bf80 	b.w	8008644 <_strtol_l.constprop.0>

08008744 <strtol>:
 8008744:	4613      	mov	r3, r2
 8008746:	460a      	mov	r2, r1
 8008748:	4601      	mov	r1, r0
 800874a:	4802      	ldr	r0, [pc, #8]	; (8008754 <strtol+0x10>)
 800874c:	6800      	ldr	r0, [r0, #0]
 800874e:	f7ff bf79 	b.w	8008644 <_strtol_l.constprop.0>
 8008752:	bf00      	nop
 8008754:	200001dc 	.word	0x200001dc

08008758 <__cvt>:
 8008758:	2b00      	cmp	r3, #0
 800875a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800875e:	461f      	mov	r7, r3
 8008760:	bfbb      	ittet	lt
 8008762:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8008766:	461f      	movlt	r7, r3
 8008768:	2300      	movge	r3, #0
 800876a:	232d      	movlt	r3, #45	; 0x2d
 800876c:	b088      	sub	sp, #32
 800876e:	4614      	mov	r4, r2
 8008770:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008772:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8008774:	7013      	strb	r3, [r2, #0]
 8008776:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008778:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800877c:	f023 0820 	bic.w	r8, r3, #32
 8008780:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008784:	d005      	beq.n	8008792 <__cvt+0x3a>
 8008786:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800878a:	d100      	bne.n	800878e <__cvt+0x36>
 800878c:	3501      	adds	r5, #1
 800878e:	2302      	movs	r3, #2
 8008790:	e000      	b.n	8008794 <__cvt+0x3c>
 8008792:	2303      	movs	r3, #3
 8008794:	aa07      	add	r2, sp, #28
 8008796:	9204      	str	r2, [sp, #16]
 8008798:	aa06      	add	r2, sp, #24
 800879a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800879e:	e9cd 3500 	strd	r3, r5, [sp]
 80087a2:	4622      	mov	r2, r4
 80087a4:	463b      	mov	r3, r7
 80087a6:	f001 f8df 	bl	8009968 <_dtoa_r>
 80087aa:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80087ae:	4606      	mov	r6, r0
 80087b0:	d102      	bne.n	80087b8 <__cvt+0x60>
 80087b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80087b4:	07db      	lsls	r3, r3, #31
 80087b6:	d522      	bpl.n	80087fe <__cvt+0xa6>
 80087b8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80087bc:	eb06 0905 	add.w	r9, r6, r5
 80087c0:	d110      	bne.n	80087e4 <__cvt+0x8c>
 80087c2:	7833      	ldrb	r3, [r6, #0]
 80087c4:	2b30      	cmp	r3, #48	; 0x30
 80087c6:	d10a      	bne.n	80087de <__cvt+0x86>
 80087c8:	2200      	movs	r2, #0
 80087ca:	2300      	movs	r3, #0
 80087cc:	4620      	mov	r0, r4
 80087ce:	4639      	mov	r1, r7
 80087d0:	f7f8 f8f4 	bl	80009bc <__aeabi_dcmpeq>
 80087d4:	b918      	cbnz	r0, 80087de <__cvt+0x86>
 80087d6:	f1c5 0501 	rsb	r5, r5, #1
 80087da:	f8ca 5000 	str.w	r5, [sl]
 80087de:	f8da 3000 	ldr.w	r3, [sl]
 80087e2:	4499      	add	r9, r3
 80087e4:	2200      	movs	r2, #0
 80087e6:	2300      	movs	r3, #0
 80087e8:	4620      	mov	r0, r4
 80087ea:	4639      	mov	r1, r7
 80087ec:	f7f8 f8e6 	bl	80009bc <__aeabi_dcmpeq>
 80087f0:	b108      	cbz	r0, 80087f6 <__cvt+0x9e>
 80087f2:	f8cd 901c 	str.w	r9, [sp, #28]
 80087f6:	2230      	movs	r2, #48	; 0x30
 80087f8:	9b07      	ldr	r3, [sp, #28]
 80087fa:	454b      	cmp	r3, r9
 80087fc:	d307      	bcc.n	800880e <__cvt+0xb6>
 80087fe:	4630      	mov	r0, r6
 8008800:	9b07      	ldr	r3, [sp, #28]
 8008802:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008804:	1b9b      	subs	r3, r3, r6
 8008806:	6013      	str	r3, [r2, #0]
 8008808:	b008      	add	sp, #32
 800880a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800880e:	1c59      	adds	r1, r3, #1
 8008810:	9107      	str	r1, [sp, #28]
 8008812:	701a      	strb	r2, [r3, #0]
 8008814:	e7f0      	b.n	80087f8 <__cvt+0xa0>

08008816 <__exponent>:
 8008816:	4603      	mov	r3, r0
 8008818:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800881a:	2900      	cmp	r1, #0
 800881c:	f803 2b02 	strb.w	r2, [r3], #2
 8008820:	bfb6      	itet	lt
 8008822:	222d      	movlt	r2, #45	; 0x2d
 8008824:	222b      	movge	r2, #43	; 0x2b
 8008826:	4249      	neglt	r1, r1
 8008828:	2909      	cmp	r1, #9
 800882a:	7042      	strb	r2, [r0, #1]
 800882c:	dd2a      	ble.n	8008884 <__exponent+0x6e>
 800882e:	f10d 0207 	add.w	r2, sp, #7
 8008832:	4617      	mov	r7, r2
 8008834:	260a      	movs	r6, #10
 8008836:	fb91 f5f6 	sdiv	r5, r1, r6
 800883a:	4694      	mov	ip, r2
 800883c:	fb06 1415 	mls	r4, r6, r5, r1
 8008840:	3430      	adds	r4, #48	; 0x30
 8008842:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8008846:	460c      	mov	r4, r1
 8008848:	2c63      	cmp	r4, #99	; 0x63
 800884a:	4629      	mov	r1, r5
 800884c:	f102 32ff 	add.w	r2, r2, #4294967295
 8008850:	dcf1      	bgt.n	8008836 <__exponent+0x20>
 8008852:	3130      	adds	r1, #48	; 0x30
 8008854:	f1ac 0402 	sub.w	r4, ip, #2
 8008858:	f802 1c01 	strb.w	r1, [r2, #-1]
 800885c:	4622      	mov	r2, r4
 800885e:	1c41      	adds	r1, r0, #1
 8008860:	42ba      	cmp	r2, r7
 8008862:	d30a      	bcc.n	800887a <__exponent+0x64>
 8008864:	f10d 0209 	add.w	r2, sp, #9
 8008868:	eba2 020c 	sub.w	r2, r2, ip
 800886c:	42bc      	cmp	r4, r7
 800886e:	bf88      	it	hi
 8008870:	2200      	movhi	r2, #0
 8008872:	4413      	add	r3, r2
 8008874:	1a18      	subs	r0, r3, r0
 8008876:	b003      	add	sp, #12
 8008878:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800887a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800887e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8008882:	e7ed      	b.n	8008860 <__exponent+0x4a>
 8008884:	2330      	movs	r3, #48	; 0x30
 8008886:	3130      	adds	r1, #48	; 0x30
 8008888:	7083      	strb	r3, [r0, #2]
 800888a:	70c1      	strb	r1, [r0, #3]
 800888c:	1d03      	adds	r3, r0, #4
 800888e:	e7f1      	b.n	8008874 <__exponent+0x5e>

08008890 <_printf_float>:
 8008890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008894:	b091      	sub	sp, #68	; 0x44
 8008896:	460c      	mov	r4, r1
 8008898:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800889c:	4616      	mov	r6, r2
 800889e:	461f      	mov	r7, r3
 80088a0:	4605      	mov	r5, r0
 80088a2:	f000 ff37 	bl	8009714 <_localeconv_r>
 80088a6:	6803      	ldr	r3, [r0, #0]
 80088a8:	4618      	mov	r0, r3
 80088aa:	9309      	str	r3, [sp, #36]	; 0x24
 80088ac:	f7f7 fc5a 	bl	8000164 <strlen>
 80088b0:	2300      	movs	r3, #0
 80088b2:	930e      	str	r3, [sp, #56]	; 0x38
 80088b4:	f8d8 3000 	ldr.w	r3, [r8]
 80088b8:	900a      	str	r0, [sp, #40]	; 0x28
 80088ba:	3307      	adds	r3, #7
 80088bc:	f023 0307 	bic.w	r3, r3, #7
 80088c0:	f103 0208 	add.w	r2, r3, #8
 80088c4:	f894 9018 	ldrb.w	r9, [r4, #24]
 80088c8:	f8d4 b000 	ldr.w	fp, [r4]
 80088cc:	f8c8 2000 	str.w	r2, [r8]
 80088d0:	e9d3 a800 	ldrd	sl, r8, [r3]
 80088d4:	4652      	mov	r2, sl
 80088d6:	4643      	mov	r3, r8
 80088d8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80088dc:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 80088e0:	930b      	str	r3, [sp, #44]	; 0x2c
 80088e2:	f04f 32ff 	mov.w	r2, #4294967295
 80088e6:	4650      	mov	r0, sl
 80088e8:	4b9c      	ldr	r3, [pc, #624]	; (8008b5c <_printf_float+0x2cc>)
 80088ea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80088ec:	f7f8 f898 	bl	8000a20 <__aeabi_dcmpun>
 80088f0:	bb70      	cbnz	r0, 8008950 <_printf_float+0xc0>
 80088f2:	f04f 32ff 	mov.w	r2, #4294967295
 80088f6:	4650      	mov	r0, sl
 80088f8:	4b98      	ldr	r3, [pc, #608]	; (8008b5c <_printf_float+0x2cc>)
 80088fa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80088fc:	f7f8 f872 	bl	80009e4 <__aeabi_dcmple>
 8008900:	bb30      	cbnz	r0, 8008950 <_printf_float+0xc0>
 8008902:	2200      	movs	r2, #0
 8008904:	2300      	movs	r3, #0
 8008906:	4650      	mov	r0, sl
 8008908:	4641      	mov	r1, r8
 800890a:	f7f8 f861 	bl	80009d0 <__aeabi_dcmplt>
 800890e:	b110      	cbz	r0, 8008916 <_printf_float+0x86>
 8008910:	232d      	movs	r3, #45	; 0x2d
 8008912:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008916:	4a92      	ldr	r2, [pc, #584]	; (8008b60 <_printf_float+0x2d0>)
 8008918:	4b92      	ldr	r3, [pc, #584]	; (8008b64 <_printf_float+0x2d4>)
 800891a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800891e:	bf94      	ite	ls
 8008920:	4690      	movls	r8, r2
 8008922:	4698      	movhi	r8, r3
 8008924:	2303      	movs	r3, #3
 8008926:	f04f 0a00 	mov.w	sl, #0
 800892a:	6123      	str	r3, [r4, #16]
 800892c:	f02b 0304 	bic.w	r3, fp, #4
 8008930:	6023      	str	r3, [r4, #0]
 8008932:	4633      	mov	r3, r6
 8008934:	4621      	mov	r1, r4
 8008936:	4628      	mov	r0, r5
 8008938:	9700      	str	r7, [sp, #0]
 800893a:	aa0f      	add	r2, sp, #60	; 0x3c
 800893c:	f000 f9d6 	bl	8008cec <_printf_common>
 8008940:	3001      	adds	r0, #1
 8008942:	f040 8090 	bne.w	8008a66 <_printf_float+0x1d6>
 8008946:	f04f 30ff 	mov.w	r0, #4294967295
 800894a:	b011      	add	sp, #68	; 0x44
 800894c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008950:	4652      	mov	r2, sl
 8008952:	4643      	mov	r3, r8
 8008954:	4650      	mov	r0, sl
 8008956:	4641      	mov	r1, r8
 8008958:	f7f8 f862 	bl	8000a20 <__aeabi_dcmpun>
 800895c:	b148      	cbz	r0, 8008972 <_printf_float+0xe2>
 800895e:	f1b8 0f00 	cmp.w	r8, #0
 8008962:	bfb8      	it	lt
 8008964:	232d      	movlt	r3, #45	; 0x2d
 8008966:	4a80      	ldr	r2, [pc, #512]	; (8008b68 <_printf_float+0x2d8>)
 8008968:	bfb8      	it	lt
 800896a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800896e:	4b7f      	ldr	r3, [pc, #508]	; (8008b6c <_printf_float+0x2dc>)
 8008970:	e7d3      	b.n	800891a <_printf_float+0x8a>
 8008972:	6863      	ldr	r3, [r4, #4]
 8008974:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8008978:	1c5a      	adds	r2, r3, #1
 800897a:	d142      	bne.n	8008a02 <_printf_float+0x172>
 800897c:	2306      	movs	r3, #6
 800897e:	6063      	str	r3, [r4, #4]
 8008980:	2200      	movs	r2, #0
 8008982:	9206      	str	r2, [sp, #24]
 8008984:	aa0e      	add	r2, sp, #56	; 0x38
 8008986:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800898a:	aa0d      	add	r2, sp, #52	; 0x34
 800898c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8008990:	9203      	str	r2, [sp, #12]
 8008992:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8008996:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800899a:	6023      	str	r3, [r4, #0]
 800899c:	6863      	ldr	r3, [r4, #4]
 800899e:	4652      	mov	r2, sl
 80089a0:	9300      	str	r3, [sp, #0]
 80089a2:	4628      	mov	r0, r5
 80089a4:	4643      	mov	r3, r8
 80089a6:	910b      	str	r1, [sp, #44]	; 0x2c
 80089a8:	f7ff fed6 	bl	8008758 <__cvt>
 80089ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80089ae:	4680      	mov	r8, r0
 80089b0:	2947      	cmp	r1, #71	; 0x47
 80089b2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80089b4:	d108      	bne.n	80089c8 <_printf_float+0x138>
 80089b6:	1cc8      	adds	r0, r1, #3
 80089b8:	db02      	blt.n	80089c0 <_printf_float+0x130>
 80089ba:	6863      	ldr	r3, [r4, #4]
 80089bc:	4299      	cmp	r1, r3
 80089be:	dd40      	ble.n	8008a42 <_printf_float+0x1b2>
 80089c0:	f1a9 0902 	sub.w	r9, r9, #2
 80089c4:	fa5f f989 	uxtb.w	r9, r9
 80089c8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80089cc:	d81f      	bhi.n	8008a0e <_printf_float+0x17e>
 80089ce:	464a      	mov	r2, r9
 80089d0:	3901      	subs	r1, #1
 80089d2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80089d6:	910d      	str	r1, [sp, #52]	; 0x34
 80089d8:	f7ff ff1d 	bl	8008816 <__exponent>
 80089dc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80089de:	4682      	mov	sl, r0
 80089e0:	1813      	adds	r3, r2, r0
 80089e2:	2a01      	cmp	r2, #1
 80089e4:	6123      	str	r3, [r4, #16]
 80089e6:	dc02      	bgt.n	80089ee <_printf_float+0x15e>
 80089e8:	6822      	ldr	r2, [r4, #0]
 80089ea:	07d2      	lsls	r2, r2, #31
 80089ec:	d501      	bpl.n	80089f2 <_printf_float+0x162>
 80089ee:	3301      	adds	r3, #1
 80089f0:	6123      	str	r3, [r4, #16]
 80089f2:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d09b      	beq.n	8008932 <_printf_float+0xa2>
 80089fa:	232d      	movs	r3, #45	; 0x2d
 80089fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a00:	e797      	b.n	8008932 <_printf_float+0xa2>
 8008a02:	2947      	cmp	r1, #71	; 0x47
 8008a04:	d1bc      	bne.n	8008980 <_printf_float+0xf0>
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d1ba      	bne.n	8008980 <_printf_float+0xf0>
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	e7b7      	b.n	800897e <_printf_float+0xee>
 8008a0e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8008a12:	d118      	bne.n	8008a46 <_printf_float+0x1b6>
 8008a14:	2900      	cmp	r1, #0
 8008a16:	6863      	ldr	r3, [r4, #4]
 8008a18:	dd0b      	ble.n	8008a32 <_printf_float+0x1a2>
 8008a1a:	6121      	str	r1, [r4, #16]
 8008a1c:	b913      	cbnz	r3, 8008a24 <_printf_float+0x194>
 8008a1e:	6822      	ldr	r2, [r4, #0]
 8008a20:	07d0      	lsls	r0, r2, #31
 8008a22:	d502      	bpl.n	8008a2a <_printf_float+0x19a>
 8008a24:	3301      	adds	r3, #1
 8008a26:	440b      	add	r3, r1
 8008a28:	6123      	str	r3, [r4, #16]
 8008a2a:	f04f 0a00 	mov.w	sl, #0
 8008a2e:	65a1      	str	r1, [r4, #88]	; 0x58
 8008a30:	e7df      	b.n	80089f2 <_printf_float+0x162>
 8008a32:	b913      	cbnz	r3, 8008a3a <_printf_float+0x1aa>
 8008a34:	6822      	ldr	r2, [r4, #0]
 8008a36:	07d2      	lsls	r2, r2, #31
 8008a38:	d501      	bpl.n	8008a3e <_printf_float+0x1ae>
 8008a3a:	3302      	adds	r3, #2
 8008a3c:	e7f4      	b.n	8008a28 <_printf_float+0x198>
 8008a3e:	2301      	movs	r3, #1
 8008a40:	e7f2      	b.n	8008a28 <_printf_float+0x198>
 8008a42:	f04f 0967 	mov.w	r9, #103	; 0x67
 8008a46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008a48:	4299      	cmp	r1, r3
 8008a4a:	db05      	blt.n	8008a58 <_printf_float+0x1c8>
 8008a4c:	6823      	ldr	r3, [r4, #0]
 8008a4e:	6121      	str	r1, [r4, #16]
 8008a50:	07d8      	lsls	r0, r3, #31
 8008a52:	d5ea      	bpl.n	8008a2a <_printf_float+0x19a>
 8008a54:	1c4b      	adds	r3, r1, #1
 8008a56:	e7e7      	b.n	8008a28 <_printf_float+0x198>
 8008a58:	2900      	cmp	r1, #0
 8008a5a:	bfcc      	ite	gt
 8008a5c:	2201      	movgt	r2, #1
 8008a5e:	f1c1 0202 	rsble	r2, r1, #2
 8008a62:	4413      	add	r3, r2
 8008a64:	e7e0      	b.n	8008a28 <_printf_float+0x198>
 8008a66:	6823      	ldr	r3, [r4, #0]
 8008a68:	055a      	lsls	r2, r3, #21
 8008a6a:	d407      	bmi.n	8008a7c <_printf_float+0x1ec>
 8008a6c:	6923      	ldr	r3, [r4, #16]
 8008a6e:	4642      	mov	r2, r8
 8008a70:	4631      	mov	r1, r6
 8008a72:	4628      	mov	r0, r5
 8008a74:	47b8      	blx	r7
 8008a76:	3001      	adds	r0, #1
 8008a78:	d12b      	bne.n	8008ad2 <_printf_float+0x242>
 8008a7a:	e764      	b.n	8008946 <_printf_float+0xb6>
 8008a7c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008a80:	f240 80dd 	bls.w	8008c3e <_printf_float+0x3ae>
 8008a84:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008a88:	2200      	movs	r2, #0
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	f7f7 ff96 	bl	80009bc <__aeabi_dcmpeq>
 8008a90:	2800      	cmp	r0, #0
 8008a92:	d033      	beq.n	8008afc <_printf_float+0x26c>
 8008a94:	2301      	movs	r3, #1
 8008a96:	4631      	mov	r1, r6
 8008a98:	4628      	mov	r0, r5
 8008a9a:	4a35      	ldr	r2, [pc, #212]	; (8008b70 <_printf_float+0x2e0>)
 8008a9c:	47b8      	blx	r7
 8008a9e:	3001      	adds	r0, #1
 8008aa0:	f43f af51 	beq.w	8008946 <_printf_float+0xb6>
 8008aa4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008aa8:	429a      	cmp	r2, r3
 8008aaa:	db02      	blt.n	8008ab2 <_printf_float+0x222>
 8008aac:	6823      	ldr	r3, [r4, #0]
 8008aae:	07d8      	lsls	r0, r3, #31
 8008ab0:	d50f      	bpl.n	8008ad2 <_printf_float+0x242>
 8008ab2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008ab6:	4631      	mov	r1, r6
 8008ab8:	4628      	mov	r0, r5
 8008aba:	47b8      	blx	r7
 8008abc:	3001      	adds	r0, #1
 8008abe:	f43f af42 	beq.w	8008946 <_printf_float+0xb6>
 8008ac2:	f04f 0800 	mov.w	r8, #0
 8008ac6:	f104 091a 	add.w	r9, r4, #26
 8008aca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008acc:	3b01      	subs	r3, #1
 8008ace:	4543      	cmp	r3, r8
 8008ad0:	dc09      	bgt.n	8008ae6 <_printf_float+0x256>
 8008ad2:	6823      	ldr	r3, [r4, #0]
 8008ad4:	079b      	lsls	r3, r3, #30
 8008ad6:	f100 8104 	bmi.w	8008ce2 <_printf_float+0x452>
 8008ada:	68e0      	ldr	r0, [r4, #12]
 8008adc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008ade:	4298      	cmp	r0, r3
 8008ae0:	bfb8      	it	lt
 8008ae2:	4618      	movlt	r0, r3
 8008ae4:	e731      	b.n	800894a <_printf_float+0xba>
 8008ae6:	2301      	movs	r3, #1
 8008ae8:	464a      	mov	r2, r9
 8008aea:	4631      	mov	r1, r6
 8008aec:	4628      	mov	r0, r5
 8008aee:	47b8      	blx	r7
 8008af0:	3001      	adds	r0, #1
 8008af2:	f43f af28 	beq.w	8008946 <_printf_float+0xb6>
 8008af6:	f108 0801 	add.w	r8, r8, #1
 8008afa:	e7e6      	b.n	8008aca <_printf_float+0x23a>
 8008afc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	dc38      	bgt.n	8008b74 <_printf_float+0x2e4>
 8008b02:	2301      	movs	r3, #1
 8008b04:	4631      	mov	r1, r6
 8008b06:	4628      	mov	r0, r5
 8008b08:	4a19      	ldr	r2, [pc, #100]	; (8008b70 <_printf_float+0x2e0>)
 8008b0a:	47b8      	blx	r7
 8008b0c:	3001      	adds	r0, #1
 8008b0e:	f43f af1a 	beq.w	8008946 <_printf_float+0xb6>
 8008b12:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8008b16:	4313      	orrs	r3, r2
 8008b18:	d102      	bne.n	8008b20 <_printf_float+0x290>
 8008b1a:	6823      	ldr	r3, [r4, #0]
 8008b1c:	07d9      	lsls	r1, r3, #31
 8008b1e:	d5d8      	bpl.n	8008ad2 <_printf_float+0x242>
 8008b20:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008b24:	4631      	mov	r1, r6
 8008b26:	4628      	mov	r0, r5
 8008b28:	47b8      	blx	r7
 8008b2a:	3001      	adds	r0, #1
 8008b2c:	f43f af0b 	beq.w	8008946 <_printf_float+0xb6>
 8008b30:	f04f 0900 	mov.w	r9, #0
 8008b34:	f104 0a1a 	add.w	sl, r4, #26
 8008b38:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008b3a:	425b      	negs	r3, r3
 8008b3c:	454b      	cmp	r3, r9
 8008b3e:	dc01      	bgt.n	8008b44 <_printf_float+0x2b4>
 8008b40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008b42:	e794      	b.n	8008a6e <_printf_float+0x1de>
 8008b44:	2301      	movs	r3, #1
 8008b46:	4652      	mov	r2, sl
 8008b48:	4631      	mov	r1, r6
 8008b4a:	4628      	mov	r0, r5
 8008b4c:	47b8      	blx	r7
 8008b4e:	3001      	adds	r0, #1
 8008b50:	f43f aef9 	beq.w	8008946 <_printf_float+0xb6>
 8008b54:	f109 0901 	add.w	r9, r9, #1
 8008b58:	e7ee      	b.n	8008b38 <_printf_float+0x2a8>
 8008b5a:	bf00      	nop
 8008b5c:	7fefffff 	.word	0x7fefffff
 8008b60:	0800cd29 	.word	0x0800cd29
 8008b64:	0800cd2d 	.word	0x0800cd2d
 8008b68:	0800cd31 	.word	0x0800cd31
 8008b6c:	0800cd35 	.word	0x0800cd35
 8008b70:	0800cd39 	.word	0x0800cd39
 8008b74:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008b76:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008b78:	429a      	cmp	r2, r3
 8008b7a:	bfa8      	it	ge
 8008b7c:	461a      	movge	r2, r3
 8008b7e:	2a00      	cmp	r2, #0
 8008b80:	4691      	mov	r9, r2
 8008b82:	dc37      	bgt.n	8008bf4 <_printf_float+0x364>
 8008b84:	f04f 0b00 	mov.w	fp, #0
 8008b88:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008b8c:	f104 021a 	add.w	r2, r4, #26
 8008b90:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8008b94:	ebaa 0309 	sub.w	r3, sl, r9
 8008b98:	455b      	cmp	r3, fp
 8008b9a:	dc33      	bgt.n	8008c04 <_printf_float+0x374>
 8008b9c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008ba0:	429a      	cmp	r2, r3
 8008ba2:	db3b      	blt.n	8008c1c <_printf_float+0x38c>
 8008ba4:	6823      	ldr	r3, [r4, #0]
 8008ba6:	07da      	lsls	r2, r3, #31
 8008ba8:	d438      	bmi.n	8008c1c <_printf_float+0x38c>
 8008baa:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8008bae:	eba2 0903 	sub.w	r9, r2, r3
 8008bb2:	eba2 020a 	sub.w	r2, r2, sl
 8008bb6:	4591      	cmp	r9, r2
 8008bb8:	bfa8      	it	ge
 8008bba:	4691      	movge	r9, r2
 8008bbc:	f1b9 0f00 	cmp.w	r9, #0
 8008bc0:	dc34      	bgt.n	8008c2c <_printf_float+0x39c>
 8008bc2:	f04f 0800 	mov.w	r8, #0
 8008bc6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008bca:	f104 0a1a 	add.w	sl, r4, #26
 8008bce:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008bd2:	1a9b      	subs	r3, r3, r2
 8008bd4:	eba3 0309 	sub.w	r3, r3, r9
 8008bd8:	4543      	cmp	r3, r8
 8008bda:	f77f af7a 	ble.w	8008ad2 <_printf_float+0x242>
 8008bde:	2301      	movs	r3, #1
 8008be0:	4652      	mov	r2, sl
 8008be2:	4631      	mov	r1, r6
 8008be4:	4628      	mov	r0, r5
 8008be6:	47b8      	blx	r7
 8008be8:	3001      	adds	r0, #1
 8008bea:	f43f aeac 	beq.w	8008946 <_printf_float+0xb6>
 8008bee:	f108 0801 	add.w	r8, r8, #1
 8008bf2:	e7ec      	b.n	8008bce <_printf_float+0x33e>
 8008bf4:	4613      	mov	r3, r2
 8008bf6:	4631      	mov	r1, r6
 8008bf8:	4642      	mov	r2, r8
 8008bfa:	4628      	mov	r0, r5
 8008bfc:	47b8      	blx	r7
 8008bfe:	3001      	adds	r0, #1
 8008c00:	d1c0      	bne.n	8008b84 <_printf_float+0x2f4>
 8008c02:	e6a0      	b.n	8008946 <_printf_float+0xb6>
 8008c04:	2301      	movs	r3, #1
 8008c06:	4631      	mov	r1, r6
 8008c08:	4628      	mov	r0, r5
 8008c0a:	920b      	str	r2, [sp, #44]	; 0x2c
 8008c0c:	47b8      	blx	r7
 8008c0e:	3001      	adds	r0, #1
 8008c10:	f43f ae99 	beq.w	8008946 <_printf_float+0xb6>
 8008c14:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008c16:	f10b 0b01 	add.w	fp, fp, #1
 8008c1a:	e7b9      	b.n	8008b90 <_printf_float+0x300>
 8008c1c:	4631      	mov	r1, r6
 8008c1e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008c22:	4628      	mov	r0, r5
 8008c24:	47b8      	blx	r7
 8008c26:	3001      	adds	r0, #1
 8008c28:	d1bf      	bne.n	8008baa <_printf_float+0x31a>
 8008c2a:	e68c      	b.n	8008946 <_printf_float+0xb6>
 8008c2c:	464b      	mov	r3, r9
 8008c2e:	4631      	mov	r1, r6
 8008c30:	4628      	mov	r0, r5
 8008c32:	eb08 020a 	add.w	r2, r8, sl
 8008c36:	47b8      	blx	r7
 8008c38:	3001      	adds	r0, #1
 8008c3a:	d1c2      	bne.n	8008bc2 <_printf_float+0x332>
 8008c3c:	e683      	b.n	8008946 <_printf_float+0xb6>
 8008c3e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008c40:	2a01      	cmp	r2, #1
 8008c42:	dc01      	bgt.n	8008c48 <_printf_float+0x3b8>
 8008c44:	07db      	lsls	r3, r3, #31
 8008c46:	d539      	bpl.n	8008cbc <_printf_float+0x42c>
 8008c48:	2301      	movs	r3, #1
 8008c4a:	4642      	mov	r2, r8
 8008c4c:	4631      	mov	r1, r6
 8008c4e:	4628      	mov	r0, r5
 8008c50:	47b8      	blx	r7
 8008c52:	3001      	adds	r0, #1
 8008c54:	f43f ae77 	beq.w	8008946 <_printf_float+0xb6>
 8008c58:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008c5c:	4631      	mov	r1, r6
 8008c5e:	4628      	mov	r0, r5
 8008c60:	47b8      	blx	r7
 8008c62:	3001      	adds	r0, #1
 8008c64:	f43f ae6f 	beq.w	8008946 <_printf_float+0xb6>
 8008c68:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	2300      	movs	r3, #0
 8008c70:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8008c74:	f7f7 fea2 	bl	80009bc <__aeabi_dcmpeq>
 8008c78:	b9d8      	cbnz	r0, 8008cb2 <_printf_float+0x422>
 8008c7a:	f109 33ff 	add.w	r3, r9, #4294967295
 8008c7e:	f108 0201 	add.w	r2, r8, #1
 8008c82:	4631      	mov	r1, r6
 8008c84:	4628      	mov	r0, r5
 8008c86:	47b8      	blx	r7
 8008c88:	3001      	adds	r0, #1
 8008c8a:	d10e      	bne.n	8008caa <_printf_float+0x41a>
 8008c8c:	e65b      	b.n	8008946 <_printf_float+0xb6>
 8008c8e:	2301      	movs	r3, #1
 8008c90:	464a      	mov	r2, r9
 8008c92:	4631      	mov	r1, r6
 8008c94:	4628      	mov	r0, r5
 8008c96:	47b8      	blx	r7
 8008c98:	3001      	adds	r0, #1
 8008c9a:	f43f ae54 	beq.w	8008946 <_printf_float+0xb6>
 8008c9e:	f108 0801 	add.w	r8, r8, #1
 8008ca2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008ca4:	3b01      	subs	r3, #1
 8008ca6:	4543      	cmp	r3, r8
 8008ca8:	dcf1      	bgt.n	8008c8e <_printf_float+0x3fe>
 8008caa:	4653      	mov	r3, sl
 8008cac:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008cb0:	e6de      	b.n	8008a70 <_printf_float+0x1e0>
 8008cb2:	f04f 0800 	mov.w	r8, #0
 8008cb6:	f104 091a 	add.w	r9, r4, #26
 8008cba:	e7f2      	b.n	8008ca2 <_printf_float+0x412>
 8008cbc:	2301      	movs	r3, #1
 8008cbe:	4642      	mov	r2, r8
 8008cc0:	e7df      	b.n	8008c82 <_printf_float+0x3f2>
 8008cc2:	2301      	movs	r3, #1
 8008cc4:	464a      	mov	r2, r9
 8008cc6:	4631      	mov	r1, r6
 8008cc8:	4628      	mov	r0, r5
 8008cca:	47b8      	blx	r7
 8008ccc:	3001      	adds	r0, #1
 8008cce:	f43f ae3a 	beq.w	8008946 <_printf_float+0xb6>
 8008cd2:	f108 0801 	add.w	r8, r8, #1
 8008cd6:	68e3      	ldr	r3, [r4, #12]
 8008cd8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008cda:	1a5b      	subs	r3, r3, r1
 8008cdc:	4543      	cmp	r3, r8
 8008cde:	dcf0      	bgt.n	8008cc2 <_printf_float+0x432>
 8008ce0:	e6fb      	b.n	8008ada <_printf_float+0x24a>
 8008ce2:	f04f 0800 	mov.w	r8, #0
 8008ce6:	f104 0919 	add.w	r9, r4, #25
 8008cea:	e7f4      	b.n	8008cd6 <_printf_float+0x446>

08008cec <_printf_common>:
 8008cec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cf0:	4616      	mov	r6, r2
 8008cf2:	4699      	mov	r9, r3
 8008cf4:	688a      	ldr	r2, [r1, #8]
 8008cf6:	690b      	ldr	r3, [r1, #16]
 8008cf8:	4607      	mov	r7, r0
 8008cfa:	4293      	cmp	r3, r2
 8008cfc:	bfb8      	it	lt
 8008cfe:	4613      	movlt	r3, r2
 8008d00:	6033      	str	r3, [r6, #0]
 8008d02:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008d06:	460c      	mov	r4, r1
 8008d08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008d0c:	b10a      	cbz	r2, 8008d12 <_printf_common+0x26>
 8008d0e:	3301      	adds	r3, #1
 8008d10:	6033      	str	r3, [r6, #0]
 8008d12:	6823      	ldr	r3, [r4, #0]
 8008d14:	0699      	lsls	r1, r3, #26
 8008d16:	bf42      	ittt	mi
 8008d18:	6833      	ldrmi	r3, [r6, #0]
 8008d1a:	3302      	addmi	r3, #2
 8008d1c:	6033      	strmi	r3, [r6, #0]
 8008d1e:	6825      	ldr	r5, [r4, #0]
 8008d20:	f015 0506 	ands.w	r5, r5, #6
 8008d24:	d106      	bne.n	8008d34 <_printf_common+0x48>
 8008d26:	f104 0a19 	add.w	sl, r4, #25
 8008d2a:	68e3      	ldr	r3, [r4, #12]
 8008d2c:	6832      	ldr	r2, [r6, #0]
 8008d2e:	1a9b      	subs	r3, r3, r2
 8008d30:	42ab      	cmp	r3, r5
 8008d32:	dc2b      	bgt.n	8008d8c <_printf_common+0xa0>
 8008d34:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008d38:	1e13      	subs	r3, r2, #0
 8008d3a:	6822      	ldr	r2, [r4, #0]
 8008d3c:	bf18      	it	ne
 8008d3e:	2301      	movne	r3, #1
 8008d40:	0692      	lsls	r2, r2, #26
 8008d42:	d430      	bmi.n	8008da6 <_printf_common+0xba>
 8008d44:	4649      	mov	r1, r9
 8008d46:	4638      	mov	r0, r7
 8008d48:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008d4c:	47c0      	blx	r8
 8008d4e:	3001      	adds	r0, #1
 8008d50:	d023      	beq.n	8008d9a <_printf_common+0xae>
 8008d52:	6823      	ldr	r3, [r4, #0]
 8008d54:	6922      	ldr	r2, [r4, #16]
 8008d56:	f003 0306 	and.w	r3, r3, #6
 8008d5a:	2b04      	cmp	r3, #4
 8008d5c:	bf14      	ite	ne
 8008d5e:	2500      	movne	r5, #0
 8008d60:	6833      	ldreq	r3, [r6, #0]
 8008d62:	f04f 0600 	mov.w	r6, #0
 8008d66:	bf08      	it	eq
 8008d68:	68e5      	ldreq	r5, [r4, #12]
 8008d6a:	f104 041a 	add.w	r4, r4, #26
 8008d6e:	bf08      	it	eq
 8008d70:	1aed      	subeq	r5, r5, r3
 8008d72:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8008d76:	bf08      	it	eq
 8008d78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008d7c:	4293      	cmp	r3, r2
 8008d7e:	bfc4      	itt	gt
 8008d80:	1a9b      	subgt	r3, r3, r2
 8008d82:	18ed      	addgt	r5, r5, r3
 8008d84:	42b5      	cmp	r5, r6
 8008d86:	d11a      	bne.n	8008dbe <_printf_common+0xd2>
 8008d88:	2000      	movs	r0, #0
 8008d8a:	e008      	b.n	8008d9e <_printf_common+0xb2>
 8008d8c:	2301      	movs	r3, #1
 8008d8e:	4652      	mov	r2, sl
 8008d90:	4649      	mov	r1, r9
 8008d92:	4638      	mov	r0, r7
 8008d94:	47c0      	blx	r8
 8008d96:	3001      	adds	r0, #1
 8008d98:	d103      	bne.n	8008da2 <_printf_common+0xb6>
 8008d9a:	f04f 30ff 	mov.w	r0, #4294967295
 8008d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008da2:	3501      	adds	r5, #1
 8008da4:	e7c1      	b.n	8008d2a <_printf_common+0x3e>
 8008da6:	2030      	movs	r0, #48	; 0x30
 8008da8:	18e1      	adds	r1, r4, r3
 8008daa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008dae:	1c5a      	adds	r2, r3, #1
 8008db0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008db4:	4422      	add	r2, r4
 8008db6:	3302      	adds	r3, #2
 8008db8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008dbc:	e7c2      	b.n	8008d44 <_printf_common+0x58>
 8008dbe:	2301      	movs	r3, #1
 8008dc0:	4622      	mov	r2, r4
 8008dc2:	4649      	mov	r1, r9
 8008dc4:	4638      	mov	r0, r7
 8008dc6:	47c0      	blx	r8
 8008dc8:	3001      	adds	r0, #1
 8008dca:	d0e6      	beq.n	8008d9a <_printf_common+0xae>
 8008dcc:	3601      	adds	r6, #1
 8008dce:	e7d9      	b.n	8008d84 <_printf_common+0x98>

08008dd0 <_printf_i>:
 8008dd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008dd4:	7e0f      	ldrb	r7, [r1, #24]
 8008dd6:	4691      	mov	r9, r2
 8008dd8:	2f78      	cmp	r7, #120	; 0x78
 8008dda:	4680      	mov	r8, r0
 8008ddc:	460c      	mov	r4, r1
 8008dde:	469a      	mov	sl, r3
 8008de0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008de2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008de6:	d807      	bhi.n	8008df8 <_printf_i+0x28>
 8008de8:	2f62      	cmp	r7, #98	; 0x62
 8008dea:	d80a      	bhi.n	8008e02 <_printf_i+0x32>
 8008dec:	2f00      	cmp	r7, #0
 8008dee:	f000 80d5 	beq.w	8008f9c <_printf_i+0x1cc>
 8008df2:	2f58      	cmp	r7, #88	; 0x58
 8008df4:	f000 80c1 	beq.w	8008f7a <_printf_i+0x1aa>
 8008df8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008dfc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008e00:	e03a      	b.n	8008e78 <_printf_i+0xa8>
 8008e02:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008e06:	2b15      	cmp	r3, #21
 8008e08:	d8f6      	bhi.n	8008df8 <_printf_i+0x28>
 8008e0a:	a101      	add	r1, pc, #4	; (adr r1, 8008e10 <_printf_i+0x40>)
 8008e0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008e10:	08008e69 	.word	0x08008e69
 8008e14:	08008e7d 	.word	0x08008e7d
 8008e18:	08008df9 	.word	0x08008df9
 8008e1c:	08008df9 	.word	0x08008df9
 8008e20:	08008df9 	.word	0x08008df9
 8008e24:	08008df9 	.word	0x08008df9
 8008e28:	08008e7d 	.word	0x08008e7d
 8008e2c:	08008df9 	.word	0x08008df9
 8008e30:	08008df9 	.word	0x08008df9
 8008e34:	08008df9 	.word	0x08008df9
 8008e38:	08008df9 	.word	0x08008df9
 8008e3c:	08008f83 	.word	0x08008f83
 8008e40:	08008ea9 	.word	0x08008ea9
 8008e44:	08008f3d 	.word	0x08008f3d
 8008e48:	08008df9 	.word	0x08008df9
 8008e4c:	08008df9 	.word	0x08008df9
 8008e50:	08008fa5 	.word	0x08008fa5
 8008e54:	08008df9 	.word	0x08008df9
 8008e58:	08008ea9 	.word	0x08008ea9
 8008e5c:	08008df9 	.word	0x08008df9
 8008e60:	08008df9 	.word	0x08008df9
 8008e64:	08008f45 	.word	0x08008f45
 8008e68:	682b      	ldr	r3, [r5, #0]
 8008e6a:	1d1a      	adds	r2, r3, #4
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	602a      	str	r2, [r5, #0]
 8008e70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008e74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008e78:	2301      	movs	r3, #1
 8008e7a:	e0a0      	b.n	8008fbe <_printf_i+0x1ee>
 8008e7c:	6820      	ldr	r0, [r4, #0]
 8008e7e:	682b      	ldr	r3, [r5, #0]
 8008e80:	0607      	lsls	r7, r0, #24
 8008e82:	f103 0104 	add.w	r1, r3, #4
 8008e86:	6029      	str	r1, [r5, #0]
 8008e88:	d501      	bpl.n	8008e8e <_printf_i+0xbe>
 8008e8a:	681e      	ldr	r6, [r3, #0]
 8008e8c:	e003      	b.n	8008e96 <_printf_i+0xc6>
 8008e8e:	0646      	lsls	r6, r0, #25
 8008e90:	d5fb      	bpl.n	8008e8a <_printf_i+0xba>
 8008e92:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008e96:	2e00      	cmp	r6, #0
 8008e98:	da03      	bge.n	8008ea2 <_printf_i+0xd2>
 8008e9a:	232d      	movs	r3, #45	; 0x2d
 8008e9c:	4276      	negs	r6, r6
 8008e9e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ea2:	230a      	movs	r3, #10
 8008ea4:	4859      	ldr	r0, [pc, #356]	; (800900c <_printf_i+0x23c>)
 8008ea6:	e012      	b.n	8008ece <_printf_i+0xfe>
 8008ea8:	682b      	ldr	r3, [r5, #0]
 8008eaa:	6820      	ldr	r0, [r4, #0]
 8008eac:	1d19      	adds	r1, r3, #4
 8008eae:	6029      	str	r1, [r5, #0]
 8008eb0:	0605      	lsls	r5, r0, #24
 8008eb2:	d501      	bpl.n	8008eb8 <_printf_i+0xe8>
 8008eb4:	681e      	ldr	r6, [r3, #0]
 8008eb6:	e002      	b.n	8008ebe <_printf_i+0xee>
 8008eb8:	0641      	lsls	r1, r0, #25
 8008eba:	d5fb      	bpl.n	8008eb4 <_printf_i+0xe4>
 8008ebc:	881e      	ldrh	r6, [r3, #0]
 8008ebe:	2f6f      	cmp	r7, #111	; 0x6f
 8008ec0:	bf0c      	ite	eq
 8008ec2:	2308      	moveq	r3, #8
 8008ec4:	230a      	movne	r3, #10
 8008ec6:	4851      	ldr	r0, [pc, #324]	; (800900c <_printf_i+0x23c>)
 8008ec8:	2100      	movs	r1, #0
 8008eca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008ece:	6865      	ldr	r5, [r4, #4]
 8008ed0:	2d00      	cmp	r5, #0
 8008ed2:	bfa8      	it	ge
 8008ed4:	6821      	ldrge	r1, [r4, #0]
 8008ed6:	60a5      	str	r5, [r4, #8]
 8008ed8:	bfa4      	itt	ge
 8008eda:	f021 0104 	bicge.w	r1, r1, #4
 8008ede:	6021      	strge	r1, [r4, #0]
 8008ee0:	b90e      	cbnz	r6, 8008ee6 <_printf_i+0x116>
 8008ee2:	2d00      	cmp	r5, #0
 8008ee4:	d04b      	beq.n	8008f7e <_printf_i+0x1ae>
 8008ee6:	4615      	mov	r5, r2
 8008ee8:	fbb6 f1f3 	udiv	r1, r6, r3
 8008eec:	fb03 6711 	mls	r7, r3, r1, r6
 8008ef0:	5dc7      	ldrb	r7, [r0, r7]
 8008ef2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008ef6:	4637      	mov	r7, r6
 8008ef8:	42bb      	cmp	r3, r7
 8008efa:	460e      	mov	r6, r1
 8008efc:	d9f4      	bls.n	8008ee8 <_printf_i+0x118>
 8008efe:	2b08      	cmp	r3, #8
 8008f00:	d10b      	bne.n	8008f1a <_printf_i+0x14a>
 8008f02:	6823      	ldr	r3, [r4, #0]
 8008f04:	07de      	lsls	r6, r3, #31
 8008f06:	d508      	bpl.n	8008f1a <_printf_i+0x14a>
 8008f08:	6923      	ldr	r3, [r4, #16]
 8008f0a:	6861      	ldr	r1, [r4, #4]
 8008f0c:	4299      	cmp	r1, r3
 8008f0e:	bfde      	ittt	le
 8008f10:	2330      	movle	r3, #48	; 0x30
 8008f12:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008f16:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008f1a:	1b52      	subs	r2, r2, r5
 8008f1c:	6122      	str	r2, [r4, #16]
 8008f1e:	464b      	mov	r3, r9
 8008f20:	4621      	mov	r1, r4
 8008f22:	4640      	mov	r0, r8
 8008f24:	f8cd a000 	str.w	sl, [sp]
 8008f28:	aa03      	add	r2, sp, #12
 8008f2a:	f7ff fedf 	bl	8008cec <_printf_common>
 8008f2e:	3001      	adds	r0, #1
 8008f30:	d14a      	bne.n	8008fc8 <_printf_i+0x1f8>
 8008f32:	f04f 30ff 	mov.w	r0, #4294967295
 8008f36:	b004      	add	sp, #16
 8008f38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f3c:	6823      	ldr	r3, [r4, #0]
 8008f3e:	f043 0320 	orr.w	r3, r3, #32
 8008f42:	6023      	str	r3, [r4, #0]
 8008f44:	2778      	movs	r7, #120	; 0x78
 8008f46:	4832      	ldr	r0, [pc, #200]	; (8009010 <_printf_i+0x240>)
 8008f48:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008f4c:	6823      	ldr	r3, [r4, #0]
 8008f4e:	6829      	ldr	r1, [r5, #0]
 8008f50:	061f      	lsls	r7, r3, #24
 8008f52:	f851 6b04 	ldr.w	r6, [r1], #4
 8008f56:	d402      	bmi.n	8008f5e <_printf_i+0x18e>
 8008f58:	065f      	lsls	r7, r3, #25
 8008f5a:	bf48      	it	mi
 8008f5c:	b2b6      	uxthmi	r6, r6
 8008f5e:	07df      	lsls	r7, r3, #31
 8008f60:	bf48      	it	mi
 8008f62:	f043 0320 	orrmi.w	r3, r3, #32
 8008f66:	6029      	str	r1, [r5, #0]
 8008f68:	bf48      	it	mi
 8008f6a:	6023      	strmi	r3, [r4, #0]
 8008f6c:	b91e      	cbnz	r6, 8008f76 <_printf_i+0x1a6>
 8008f6e:	6823      	ldr	r3, [r4, #0]
 8008f70:	f023 0320 	bic.w	r3, r3, #32
 8008f74:	6023      	str	r3, [r4, #0]
 8008f76:	2310      	movs	r3, #16
 8008f78:	e7a6      	b.n	8008ec8 <_printf_i+0xf8>
 8008f7a:	4824      	ldr	r0, [pc, #144]	; (800900c <_printf_i+0x23c>)
 8008f7c:	e7e4      	b.n	8008f48 <_printf_i+0x178>
 8008f7e:	4615      	mov	r5, r2
 8008f80:	e7bd      	b.n	8008efe <_printf_i+0x12e>
 8008f82:	682b      	ldr	r3, [r5, #0]
 8008f84:	6826      	ldr	r6, [r4, #0]
 8008f86:	1d18      	adds	r0, r3, #4
 8008f88:	6961      	ldr	r1, [r4, #20]
 8008f8a:	6028      	str	r0, [r5, #0]
 8008f8c:	0635      	lsls	r5, r6, #24
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	d501      	bpl.n	8008f96 <_printf_i+0x1c6>
 8008f92:	6019      	str	r1, [r3, #0]
 8008f94:	e002      	b.n	8008f9c <_printf_i+0x1cc>
 8008f96:	0670      	lsls	r0, r6, #25
 8008f98:	d5fb      	bpl.n	8008f92 <_printf_i+0x1c2>
 8008f9a:	8019      	strh	r1, [r3, #0]
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	4615      	mov	r5, r2
 8008fa0:	6123      	str	r3, [r4, #16]
 8008fa2:	e7bc      	b.n	8008f1e <_printf_i+0x14e>
 8008fa4:	682b      	ldr	r3, [r5, #0]
 8008fa6:	2100      	movs	r1, #0
 8008fa8:	1d1a      	adds	r2, r3, #4
 8008faa:	602a      	str	r2, [r5, #0]
 8008fac:	681d      	ldr	r5, [r3, #0]
 8008fae:	6862      	ldr	r2, [r4, #4]
 8008fb0:	4628      	mov	r0, r5
 8008fb2:	f000 fc26 	bl	8009802 <memchr>
 8008fb6:	b108      	cbz	r0, 8008fbc <_printf_i+0x1ec>
 8008fb8:	1b40      	subs	r0, r0, r5
 8008fba:	6060      	str	r0, [r4, #4]
 8008fbc:	6863      	ldr	r3, [r4, #4]
 8008fbe:	6123      	str	r3, [r4, #16]
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008fc6:	e7aa      	b.n	8008f1e <_printf_i+0x14e>
 8008fc8:	462a      	mov	r2, r5
 8008fca:	4649      	mov	r1, r9
 8008fcc:	4640      	mov	r0, r8
 8008fce:	6923      	ldr	r3, [r4, #16]
 8008fd0:	47d0      	blx	sl
 8008fd2:	3001      	adds	r0, #1
 8008fd4:	d0ad      	beq.n	8008f32 <_printf_i+0x162>
 8008fd6:	6823      	ldr	r3, [r4, #0]
 8008fd8:	079b      	lsls	r3, r3, #30
 8008fda:	d413      	bmi.n	8009004 <_printf_i+0x234>
 8008fdc:	68e0      	ldr	r0, [r4, #12]
 8008fde:	9b03      	ldr	r3, [sp, #12]
 8008fe0:	4298      	cmp	r0, r3
 8008fe2:	bfb8      	it	lt
 8008fe4:	4618      	movlt	r0, r3
 8008fe6:	e7a6      	b.n	8008f36 <_printf_i+0x166>
 8008fe8:	2301      	movs	r3, #1
 8008fea:	4632      	mov	r2, r6
 8008fec:	4649      	mov	r1, r9
 8008fee:	4640      	mov	r0, r8
 8008ff0:	47d0      	blx	sl
 8008ff2:	3001      	adds	r0, #1
 8008ff4:	d09d      	beq.n	8008f32 <_printf_i+0x162>
 8008ff6:	3501      	adds	r5, #1
 8008ff8:	68e3      	ldr	r3, [r4, #12]
 8008ffa:	9903      	ldr	r1, [sp, #12]
 8008ffc:	1a5b      	subs	r3, r3, r1
 8008ffe:	42ab      	cmp	r3, r5
 8009000:	dcf2      	bgt.n	8008fe8 <_printf_i+0x218>
 8009002:	e7eb      	b.n	8008fdc <_printf_i+0x20c>
 8009004:	2500      	movs	r5, #0
 8009006:	f104 0619 	add.w	r6, r4, #25
 800900a:	e7f5      	b.n	8008ff8 <_printf_i+0x228>
 800900c:	0800cd3b 	.word	0x0800cd3b
 8009010:	0800cd4c 	.word	0x0800cd4c

08009014 <_scanf_float>:
 8009014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009018:	b087      	sub	sp, #28
 800901a:	9303      	str	r3, [sp, #12]
 800901c:	688b      	ldr	r3, [r1, #8]
 800901e:	4617      	mov	r7, r2
 8009020:	1e5a      	subs	r2, r3, #1
 8009022:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009026:	bf85      	ittet	hi
 8009028:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800902c:	195b      	addhi	r3, r3, r5
 800902e:	2300      	movls	r3, #0
 8009030:	9302      	strhi	r3, [sp, #8]
 8009032:	bf88      	it	hi
 8009034:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009038:	468b      	mov	fp, r1
 800903a:	f04f 0500 	mov.w	r5, #0
 800903e:	bf8c      	ite	hi
 8009040:	608b      	strhi	r3, [r1, #8]
 8009042:	9302      	strls	r3, [sp, #8]
 8009044:	680b      	ldr	r3, [r1, #0]
 8009046:	4680      	mov	r8, r0
 8009048:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800904c:	f84b 3b1c 	str.w	r3, [fp], #28
 8009050:	460c      	mov	r4, r1
 8009052:	465e      	mov	r6, fp
 8009054:	46aa      	mov	sl, r5
 8009056:	46a9      	mov	r9, r5
 8009058:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800905c:	9501      	str	r5, [sp, #4]
 800905e:	68a2      	ldr	r2, [r4, #8]
 8009060:	b152      	cbz	r2, 8009078 <_scanf_float+0x64>
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	781b      	ldrb	r3, [r3, #0]
 8009066:	2b4e      	cmp	r3, #78	; 0x4e
 8009068:	d864      	bhi.n	8009134 <_scanf_float+0x120>
 800906a:	2b40      	cmp	r3, #64	; 0x40
 800906c:	d83c      	bhi.n	80090e8 <_scanf_float+0xd4>
 800906e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8009072:	b2c8      	uxtb	r0, r1
 8009074:	280e      	cmp	r0, #14
 8009076:	d93a      	bls.n	80090ee <_scanf_float+0xda>
 8009078:	f1b9 0f00 	cmp.w	r9, #0
 800907c:	d003      	beq.n	8009086 <_scanf_float+0x72>
 800907e:	6823      	ldr	r3, [r4, #0]
 8009080:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009084:	6023      	str	r3, [r4, #0]
 8009086:	f10a 3aff 	add.w	sl, sl, #4294967295
 800908a:	f1ba 0f01 	cmp.w	sl, #1
 800908e:	f200 8113 	bhi.w	80092b8 <_scanf_float+0x2a4>
 8009092:	455e      	cmp	r6, fp
 8009094:	f200 8105 	bhi.w	80092a2 <_scanf_float+0x28e>
 8009098:	2501      	movs	r5, #1
 800909a:	4628      	mov	r0, r5
 800909c:	b007      	add	sp, #28
 800909e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090a2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80090a6:	2a0d      	cmp	r2, #13
 80090a8:	d8e6      	bhi.n	8009078 <_scanf_float+0x64>
 80090aa:	a101      	add	r1, pc, #4	; (adr r1, 80090b0 <_scanf_float+0x9c>)
 80090ac:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80090b0:	080091ef 	.word	0x080091ef
 80090b4:	08009079 	.word	0x08009079
 80090b8:	08009079 	.word	0x08009079
 80090bc:	08009079 	.word	0x08009079
 80090c0:	0800924f 	.word	0x0800924f
 80090c4:	08009227 	.word	0x08009227
 80090c8:	08009079 	.word	0x08009079
 80090cc:	08009079 	.word	0x08009079
 80090d0:	080091fd 	.word	0x080091fd
 80090d4:	08009079 	.word	0x08009079
 80090d8:	08009079 	.word	0x08009079
 80090dc:	08009079 	.word	0x08009079
 80090e0:	08009079 	.word	0x08009079
 80090e4:	080091b5 	.word	0x080091b5
 80090e8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80090ec:	e7db      	b.n	80090a6 <_scanf_float+0x92>
 80090ee:	290e      	cmp	r1, #14
 80090f0:	d8c2      	bhi.n	8009078 <_scanf_float+0x64>
 80090f2:	a001      	add	r0, pc, #4	; (adr r0, 80090f8 <_scanf_float+0xe4>)
 80090f4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80090f8:	080091a7 	.word	0x080091a7
 80090fc:	08009079 	.word	0x08009079
 8009100:	080091a7 	.word	0x080091a7
 8009104:	0800923b 	.word	0x0800923b
 8009108:	08009079 	.word	0x08009079
 800910c:	08009155 	.word	0x08009155
 8009110:	08009191 	.word	0x08009191
 8009114:	08009191 	.word	0x08009191
 8009118:	08009191 	.word	0x08009191
 800911c:	08009191 	.word	0x08009191
 8009120:	08009191 	.word	0x08009191
 8009124:	08009191 	.word	0x08009191
 8009128:	08009191 	.word	0x08009191
 800912c:	08009191 	.word	0x08009191
 8009130:	08009191 	.word	0x08009191
 8009134:	2b6e      	cmp	r3, #110	; 0x6e
 8009136:	d809      	bhi.n	800914c <_scanf_float+0x138>
 8009138:	2b60      	cmp	r3, #96	; 0x60
 800913a:	d8b2      	bhi.n	80090a2 <_scanf_float+0x8e>
 800913c:	2b54      	cmp	r3, #84	; 0x54
 800913e:	d077      	beq.n	8009230 <_scanf_float+0x21c>
 8009140:	2b59      	cmp	r3, #89	; 0x59
 8009142:	d199      	bne.n	8009078 <_scanf_float+0x64>
 8009144:	2d07      	cmp	r5, #7
 8009146:	d197      	bne.n	8009078 <_scanf_float+0x64>
 8009148:	2508      	movs	r5, #8
 800914a:	e029      	b.n	80091a0 <_scanf_float+0x18c>
 800914c:	2b74      	cmp	r3, #116	; 0x74
 800914e:	d06f      	beq.n	8009230 <_scanf_float+0x21c>
 8009150:	2b79      	cmp	r3, #121	; 0x79
 8009152:	e7f6      	b.n	8009142 <_scanf_float+0x12e>
 8009154:	6821      	ldr	r1, [r4, #0]
 8009156:	05c8      	lsls	r0, r1, #23
 8009158:	d51a      	bpl.n	8009190 <_scanf_float+0x17c>
 800915a:	9b02      	ldr	r3, [sp, #8]
 800915c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8009160:	6021      	str	r1, [r4, #0]
 8009162:	f109 0901 	add.w	r9, r9, #1
 8009166:	b11b      	cbz	r3, 8009170 <_scanf_float+0x15c>
 8009168:	3b01      	subs	r3, #1
 800916a:	3201      	adds	r2, #1
 800916c:	9302      	str	r3, [sp, #8]
 800916e:	60a2      	str	r2, [r4, #8]
 8009170:	68a3      	ldr	r3, [r4, #8]
 8009172:	3b01      	subs	r3, #1
 8009174:	60a3      	str	r3, [r4, #8]
 8009176:	6923      	ldr	r3, [r4, #16]
 8009178:	3301      	adds	r3, #1
 800917a:	6123      	str	r3, [r4, #16]
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	3b01      	subs	r3, #1
 8009180:	2b00      	cmp	r3, #0
 8009182:	607b      	str	r3, [r7, #4]
 8009184:	f340 8084 	ble.w	8009290 <_scanf_float+0x27c>
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	3301      	adds	r3, #1
 800918c:	603b      	str	r3, [r7, #0]
 800918e:	e766      	b.n	800905e <_scanf_float+0x4a>
 8009190:	eb1a 0f05 	cmn.w	sl, r5
 8009194:	f47f af70 	bne.w	8009078 <_scanf_float+0x64>
 8009198:	6822      	ldr	r2, [r4, #0]
 800919a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800919e:	6022      	str	r2, [r4, #0]
 80091a0:	f806 3b01 	strb.w	r3, [r6], #1
 80091a4:	e7e4      	b.n	8009170 <_scanf_float+0x15c>
 80091a6:	6822      	ldr	r2, [r4, #0]
 80091a8:	0610      	lsls	r0, r2, #24
 80091aa:	f57f af65 	bpl.w	8009078 <_scanf_float+0x64>
 80091ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80091b2:	e7f4      	b.n	800919e <_scanf_float+0x18a>
 80091b4:	f1ba 0f00 	cmp.w	sl, #0
 80091b8:	d10e      	bne.n	80091d8 <_scanf_float+0x1c4>
 80091ba:	f1b9 0f00 	cmp.w	r9, #0
 80091be:	d10e      	bne.n	80091de <_scanf_float+0x1ca>
 80091c0:	6822      	ldr	r2, [r4, #0]
 80091c2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80091c6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80091ca:	d108      	bne.n	80091de <_scanf_float+0x1ca>
 80091cc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80091d0:	f04f 0a01 	mov.w	sl, #1
 80091d4:	6022      	str	r2, [r4, #0]
 80091d6:	e7e3      	b.n	80091a0 <_scanf_float+0x18c>
 80091d8:	f1ba 0f02 	cmp.w	sl, #2
 80091dc:	d055      	beq.n	800928a <_scanf_float+0x276>
 80091de:	2d01      	cmp	r5, #1
 80091e0:	d002      	beq.n	80091e8 <_scanf_float+0x1d4>
 80091e2:	2d04      	cmp	r5, #4
 80091e4:	f47f af48 	bne.w	8009078 <_scanf_float+0x64>
 80091e8:	3501      	adds	r5, #1
 80091ea:	b2ed      	uxtb	r5, r5
 80091ec:	e7d8      	b.n	80091a0 <_scanf_float+0x18c>
 80091ee:	f1ba 0f01 	cmp.w	sl, #1
 80091f2:	f47f af41 	bne.w	8009078 <_scanf_float+0x64>
 80091f6:	f04f 0a02 	mov.w	sl, #2
 80091fa:	e7d1      	b.n	80091a0 <_scanf_float+0x18c>
 80091fc:	b97d      	cbnz	r5, 800921e <_scanf_float+0x20a>
 80091fe:	f1b9 0f00 	cmp.w	r9, #0
 8009202:	f47f af3c 	bne.w	800907e <_scanf_float+0x6a>
 8009206:	6822      	ldr	r2, [r4, #0]
 8009208:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800920c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009210:	f47f af39 	bne.w	8009086 <_scanf_float+0x72>
 8009214:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009218:	2501      	movs	r5, #1
 800921a:	6022      	str	r2, [r4, #0]
 800921c:	e7c0      	b.n	80091a0 <_scanf_float+0x18c>
 800921e:	2d03      	cmp	r5, #3
 8009220:	d0e2      	beq.n	80091e8 <_scanf_float+0x1d4>
 8009222:	2d05      	cmp	r5, #5
 8009224:	e7de      	b.n	80091e4 <_scanf_float+0x1d0>
 8009226:	2d02      	cmp	r5, #2
 8009228:	f47f af26 	bne.w	8009078 <_scanf_float+0x64>
 800922c:	2503      	movs	r5, #3
 800922e:	e7b7      	b.n	80091a0 <_scanf_float+0x18c>
 8009230:	2d06      	cmp	r5, #6
 8009232:	f47f af21 	bne.w	8009078 <_scanf_float+0x64>
 8009236:	2507      	movs	r5, #7
 8009238:	e7b2      	b.n	80091a0 <_scanf_float+0x18c>
 800923a:	6822      	ldr	r2, [r4, #0]
 800923c:	0591      	lsls	r1, r2, #22
 800923e:	f57f af1b 	bpl.w	8009078 <_scanf_float+0x64>
 8009242:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8009246:	6022      	str	r2, [r4, #0]
 8009248:	f8cd 9004 	str.w	r9, [sp, #4]
 800924c:	e7a8      	b.n	80091a0 <_scanf_float+0x18c>
 800924e:	6822      	ldr	r2, [r4, #0]
 8009250:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8009254:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009258:	d006      	beq.n	8009268 <_scanf_float+0x254>
 800925a:	0550      	lsls	r0, r2, #21
 800925c:	f57f af0c 	bpl.w	8009078 <_scanf_float+0x64>
 8009260:	f1b9 0f00 	cmp.w	r9, #0
 8009264:	f43f af0f 	beq.w	8009086 <_scanf_float+0x72>
 8009268:	0591      	lsls	r1, r2, #22
 800926a:	bf58      	it	pl
 800926c:	9901      	ldrpl	r1, [sp, #4]
 800926e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009272:	bf58      	it	pl
 8009274:	eba9 0101 	subpl.w	r1, r9, r1
 8009278:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800927c:	f04f 0900 	mov.w	r9, #0
 8009280:	bf58      	it	pl
 8009282:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009286:	6022      	str	r2, [r4, #0]
 8009288:	e78a      	b.n	80091a0 <_scanf_float+0x18c>
 800928a:	f04f 0a03 	mov.w	sl, #3
 800928e:	e787      	b.n	80091a0 <_scanf_float+0x18c>
 8009290:	4639      	mov	r1, r7
 8009292:	4640      	mov	r0, r8
 8009294:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009298:	4798      	blx	r3
 800929a:	2800      	cmp	r0, #0
 800929c:	f43f aedf 	beq.w	800905e <_scanf_float+0x4a>
 80092a0:	e6ea      	b.n	8009078 <_scanf_float+0x64>
 80092a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80092a6:	463a      	mov	r2, r7
 80092a8:	4640      	mov	r0, r8
 80092aa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80092ae:	4798      	blx	r3
 80092b0:	6923      	ldr	r3, [r4, #16]
 80092b2:	3b01      	subs	r3, #1
 80092b4:	6123      	str	r3, [r4, #16]
 80092b6:	e6ec      	b.n	8009092 <_scanf_float+0x7e>
 80092b8:	1e6b      	subs	r3, r5, #1
 80092ba:	2b06      	cmp	r3, #6
 80092bc:	d825      	bhi.n	800930a <_scanf_float+0x2f6>
 80092be:	2d02      	cmp	r5, #2
 80092c0:	d836      	bhi.n	8009330 <_scanf_float+0x31c>
 80092c2:	455e      	cmp	r6, fp
 80092c4:	f67f aee8 	bls.w	8009098 <_scanf_float+0x84>
 80092c8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80092cc:	463a      	mov	r2, r7
 80092ce:	4640      	mov	r0, r8
 80092d0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80092d4:	4798      	blx	r3
 80092d6:	6923      	ldr	r3, [r4, #16]
 80092d8:	3b01      	subs	r3, #1
 80092da:	6123      	str	r3, [r4, #16]
 80092dc:	e7f1      	b.n	80092c2 <_scanf_float+0x2ae>
 80092de:	9802      	ldr	r0, [sp, #8]
 80092e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80092e4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80092e8:	463a      	mov	r2, r7
 80092ea:	9002      	str	r0, [sp, #8]
 80092ec:	4640      	mov	r0, r8
 80092ee:	4798      	blx	r3
 80092f0:	6923      	ldr	r3, [r4, #16]
 80092f2:	3b01      	subs	r3, #1
 80092f4:	6123      	str	r3, [r4, #16]
 80092f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80092fa:	fa5f fa8a 	uxtb.w	sl, sl
 80092fe:	f1ba 0f02 	cmp.w	sl, #2
 8009302:	d1ec      	bne.n	80092de <_scanf_float+0x2ca>
 8009304:	3d03      	subs	r5, #3
 8009306:	b2ed      	uxtb	r5, r5
 8009308:	1b76      	subs	r6, r6, r5
 800930a:	6823      	ldr	r3, [r4, #0]
 800930c:	05da      	lsls	r2, r3, #23
 800930e:	d52f      	bpl.n	8009370 <_scanf_float+0x35c>
 8009310:	055b      	lsls	r3, r3, #21
 8009312:	d510      	bpl.n	8009336 <_scanf_float+0x322>
 8009314:	455e      	cmp	r6, fp
 8009316:	f67f aebf 	bls.w	8009098 <_scanf_float+0x84>
 800931a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800931e:	463a      	mov	r2, r7
 8009320:	4640      	mov	r0, r8
 8009322:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009326:	4798      	blx	r3
 8009328:	6923      	ldr	r3, [r4, #16]
 800932a:	3b01      	subs	r3, #1
 800932c:	6123      	str	r3, [r4, #16]
 800932e:	e7f1      	b.n	8009314 <_scanf_float+0x300>
 8009330:	46aa      	mov	sl, r5
 8009332:	9602      	str	r6, [sp, #8]
 8009334:	e7df      	b.n	80092f6 <_scanf_float+0x2e2>
 8009336:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800933a:	6923      	ldr	r3, [r4, #16]
 800933c:	2965      	cmp	r1, #101	; 0x65
 800933e:	f103 33ff 	add.w	r3, r3, #4294967295
 8009342:	f106 35ff 	add.w	r5, r6, #4294967295
 8009346:	6123      	str	r3, [r4, #16]
 8009348:	d00c      	beq.n	8009364 <_scanf_float+0x350>
 800934a:	2945      	cmp	r1, #69	; 0x45
 800934c:	d00a      	beq.n	8009364 <_scanf_float+0x350>
 800934e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009352:	463a      	mov	r2, r7
 8009354:	4640      	mov	r0, r8
 8009356:	4798      	blx	r3
 8009358:	6923      	ldr	r3, [r4, #16]
 800935a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800935e:	3b01      	subs	r3, #1
 8009360:	1eb5      	subs	r5, r6, #2
 8009362:	6123      	str	r3, [r4, #16]
 8009364:	463a      	mov	r2, r7
 8009366:	4640      	mov	r0, r8
 8009368:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800936c:	4798      	blx	r3
 800936e:	462e      	mov	r6, r5
 8009370:	6825      	ldr	r5, [r4, #0]
 8009372:	f015 0510 	ands.w	r5, r5, #16
 8009376:	d155      	bne.n	8009424 <_scanf_float+0x410>
 8009378:	7035      	strb	r5, [r6, #0]
 800937a:	6823      	ldr	r3, [r4, #0]
 800937c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009380:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009384:	d11d      	bne.n	80093c2 <_scanf_float+0x3ae>
 8009386:	9b01      	ldr	r3, [sp, #4]
 8009388:	454b      	cmp	r3, r9
 800938a:	eba3 0209 	sub.w	r2, r3, r9
 800938e:	d125      	bne.n	80093dc <_scanf_float+0x3c8>
 8009390:	2200      	movs	r2, #0
 8009392:	4659      	mov	r1, fp
 8009394:	4640      	mov	r0, r8
 8009396:	f7ff f943 	bl	8008620 <_strtod_r>
 800939a:	9b03      	ldr	r3, [sp, #12]
 800939c:	f8d4 c000 	ldr.w	ip, [r4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	f01c 0f02 	tst.w	ip, #2
 80093a6:	4606      	mov	r6, r0
 80093a8:	460f      	mov	r7, r1
 80093aa:	f103 0204 	add.w	r2, r3, #4
 80093ae:	d020      	beq.n	80093f2 <_scanf_float+0x3de>
 80093b0:	9903      	ldr	r1, [sp, #12]
 80093b2:	600a      	str	r2, [r1, #0]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	e9c3 6700 	strd	r6, r7, [r3]
 80093ba:	68e3      	ldr	r3, [r4, #12]
 80093bc:	3301      	adds	r3, #1
 80093be:	60e3      	str	r3, [r4, #12]
 80093c0:	e66b      	b.n	800909a <_scanf_float+0x86>
 80093c2:	9b04      	ldr	r3, [sp, #16]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d0e3      	beq.n	8009390 <_scanf_float+0x37c>
 80093c8:	9905      	ldr	r1, [sp, #20]
 80093ca:	230a      	movs	r3, #10
 80093cc:	462a      	mov	r2, r5
 80093ce:	4640      	mov	r0, r8
 80093d0:	3101      	adds	r1, #1
 80093d2:	f7ff f9b5 	bl	8008740 <_strtol_r>
 80093d6:	9b04      	ldr	r3, [sp, #16]
 80093d8:	9e05      	ldr	r6, [sp, #20]
 80093da:	1ac2      	subs	r2, r0, r3
 80093dc:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80093e0:	429e      	cmp	r6, r3
 80093e2:	bf28      	it	cs
 80093e4:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80093e8:	4630      	mov	r0, r6
 80093ea:	490f      	ldr	r1, [pc, #60]	; (8009428 <_scanf_float+0x414>)
 80093ec:	f000 f8e2 	bl	80095b4 <siprintf>
 80093f0:	e7ce      	b.n	8009390 <_scanf_float+0x37c>
 80093f2:	f01c 0f04 	tst.w	ip, #4
 80093f6:	d1db      	bne.n	80093b0 <_scanf_float+0x39c>
 80093f8:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80093fc:	f8cc 2000 	str.w	r2, [ip]
 8009400:	f8d3 8000 	ldr.w	r8, [r3]
 8009404:	4602      	mov	r2, r0
 8009406:	460b      	mov	r3, r1
 8009408:	f7f7 fb0a 	bl	8000a20 <__aeabi_dcmpun>
 800940c:	b128      	cbz	r0, 800941a <_scanf_float+0x406>
 800940e:	4807      	ldr	r0, [pc, #28]	; (800942c <_scanf_float+0x418>)
 8009410:	f000 fa1a 	bl	8009848 <nanf>
 8009414:	f8c8 0000 	str.w	r0, [r8]
 8009418:	e7cf      	b.n	80093ba <_scanf_float+0x3a6>
 800941a:	4630      	mov	r0, r6
 800941c:	4639      	mov	r1, r7
 800941e:	f7f7 fb5d 	bl	8000adc <__aeabi_d2f>
 8009422:	e7f7      	b.n	8009414 <_scanf_float+0x400>
 8009424:	2500      	movs	r5, #0
 8009426:	e638      	b.n	800909a <_scanf_float+0x86>
 8009428:	0800cd5d 	.word	0x0800cd5d
 800942c:	0800cff8 	.word	0x0800cff8

08009430 <std>:
 8009430:	2300      	movs	r3, #0
 8009432:	b510      	push	{r4, lr}
 8009434:	4604      	mov	r4, r0
 8009436:	e9c0 3300 	strd	r3, r3, [r0]
 800943a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800943e:	6083      	str	r3, [r0, #8]
 8009440:	8181      	strh	r1, [r0, #12]
 8009442:	6643      	str	r3, [r0, #100]	; 0x64
 8009444:	81c2      	strh	r2, [r0, #14]
 8009446:	6183      	str	r3, [r0, #24]
 8009448:	4619      	mov	r1, r3
 800944a:	2208      	movs	r2, #8
 800944c:	305c      	adds	r0, #92	; 0x5c
 800944e:	f000 f92e 	bl	80096ae <memset>
 8009452:	4b0d      	ldr	r3, [pc, #52]	; (8009488 <std+0x58>)
 8009454:	6224      	str	r4, [r4, #32]
 8009456:	6263      	str	r3, [r4, #36]	; 0x24
 8009458:	4b0c      	ldr	r3, [pc, #48]	; (800948c <std+0x5c>)
 800945a:	62a3      	str	r3, [r4, #40]	; 0x28
 800945c:	4b0c      	ldr	r3, [pc, #48]	; (8009490 <std+0x60>)
 800945e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009460:	4b0c      	ldr	r3, [pc, #48]	; (8009494 <std+0x64>)
 8009462:	6323      	str	r3, [r4, #48]	; 0x30
 8009464:	4b0c      	ldr	r3, [pc, #48]	; (8009498 <std+0x68>)
 8009466:	429c      	cmp	r4, r3
 8009468:	d006      	beq.n	8009478 <std+0x48>
 800946a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800946e:	4294      	cmp	r4, r2
 8009470:	d002      	beq.n	8009478 <std+0x48>
 8009472:	33d0      	adds	r3, #208	; 0xd0
 8009474:	429c      	cmp	r4, r3
 8009476:	d105      	bne.n	8009484 <std+0x54>
 8009478:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800947c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009480:	f000 b9bc 	b.w	80097fc <__retarget_lock_init_recursive>
 8009484:	bd10      	pop	{r4, pc}
 8009486:	bf00      	nop
 8009488:	080095f5 	.word	0x080095f5
 800948c:	08009617 	.word	0x08009617
 8009490:	0800964f 	.word	0x0800964f
 8009494:	08009673 	.word	0x08009673
 8009498:	2000282c 	.word	0x2000282c

0800949c <stdio_exit_handler>:
 800949c:	4a02      	ldr	r2, [pc, #8]	; (80094a8 <stdio_exit_handler+0xc>)
 800949e:	4903      	ldr	r1, [pc, #12]	; (80094ac <stdio_exit_handler+0x10>)
 80094a0:	4803      	ldr	r0, [pc, #12]	; (80094b0 <stdio_exit_handler+0x14>)
 80094a2:	f000 b869 	b.w	8009578 <_fwalk_sglue>
 80094a6:	bf00      	nop
 80094a8:	20000018 	.word	0x20000018
 80094ac:	0800bb09 	.word	0x0800bb09
 80094b0:	20000190 	.word	0x20000190

080094b4 <cleanup_stdio>:
 80094b4:	6841      	ldr	r1, [r0, #4]
 80094b6:	4b0c      	ldr	r3, [pc, #48]	; (80094e8 <cleanup_stdio+0x34>)
 80094b8:	b510      	push	{r4, lr}
 80094ba:	4299      	cmp	r1, r3
 80094bc:	4604      	mov	r4, r0
 80094be:	d001      	beq.n	80094c4 <cleanup_stdio+0x10>
 80094c0:	f002 fb22 	bl	800bb08 <_fflush_r>
 80094c4:	68a1      	ldr	r1, [r4, #8]
 80094c6:	4b09      	ldr	r3, [pc, #36]	; (80094ec <cleanup_stdio+0x38>)
 80094c8:	4299      	cmp	r1, r3
 80094ca:	d002      	beq.n	80094d2 <cleanup_stdio+0x1e>
 80094cc:	4620      	mov	r0, r4
 80094ce:	f002 fb1b 	bl	800bb08 <_fflush_r>
 80094d2:	68e1      	ldr	r1, [r4, #12]
 80094d4:	4b06      	ldr	r3, [pc, #24]	; (80094f0 <cleanup_stdio+0x3c>)
 80094d6:	4299      	cmp	r1, r3
 80094d8:	d004      	beq.n	80094e4 <cleanup_stdio+0x30>
 80094da:	4620      	mov	r0, r4
 80094dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80094e0:	f002 bb12 	b.w	800bb08 <_fflush_r>
 80094e4:	bd10      	pop	{r4, pc}
 80094e6:	bf00      	nop
 80094e8:	2000282c 	.word	0x2000282c
 80094ec:	20002894 	.word	0x20002894
 80094f0:	200028fc 	.word	0x200028fc

080094f4 <global_stdio_init.part.0>:
 80094f4:	b510      	push	{r4, lr}
 80094f6:	4b0b      	ldr	r3, [pc, #44]	; (8009524 <global_stdio_init.part.0+0x30>)
 80094f8:	4c0b      	ldr	r4, [pc, #44]	; (8009528 <global_stdio_init.part.0+0x34>)
 80094fa:	4a0c      	ldr	r2, [pc, #48]	; (800952c <global_stdio_init.part.0+0x38>)
 80094fc:	4620      	mov	r0, r4
 80094fe:	601a      	str	r2, [r3, #0]
 8009500:	2104      	movs	r1, #4
 8009502:	2200      	movs	r2, #0
 8009504:	f7ff ff94 	bl	8009430 <std>
 8009508:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800950c:	2201      	movs	r2, #1
 800950e:	2109      	movs	r1, #9
 8009510:	f7ff ff8e 	bl	8009430 <std>
 8009514:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009518:	2202      	movs	r2, #2
 800951a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800951e:	2112      	movs	r1, #18
 8009520:	f7ff bf86 	b.w	8009430 <std>
 8009524:	20002964 	.word	0x20002964
 8009528:	2000282c 	.word	0x2000282c
 800952c:	0800949d 	.word	0x0800949d

08009530 <__sfp_lock_acquire>:
 8009530:	4801      	ldr	r0, [pc, #4]	; (8009538 <__sfp_lock_acquire+0x8>)
 8009532:	f000 b964 	b.w	80097fe <__retarget_lock_acquire_recursive>
 8009536:	bf00      	nop
 8009538:	2000296d 	.word	0x2000296d

0800953c <__sfp_lock_release>:
 800953c:	4801      	ldr	r0, [pc, #4]	; (8009544 <__sfp_lock_release+0x8>)
 800953e:	f000 b95f 	b.w	8009800 <__retarget_lock_release_recursive>
 8009542:	bf00      	nop
 8009544:	2000296d 	.word	0x2000296d

08009548 <__sinit>:
 8009548:	b510      	push	{r4, lr}
 800954a:	4604      	mov	r4, r0
 800954c:	f7ff fff0 	bl	8009530 <__sfp_lock_acquire>
 8009550:	6a23      	ldr	r3, [r4, #32]
 8009552:	b11b      	cbz	r3, 800955c <__sinit+0x14>
 8009554:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009558:	f7ff bff0 	b.w	800953c <__sfp_lock_release>
 800955c:	4b04      	ldr	r3, [pc, #16]	; (8009570 <__sinit+0x28>)
 800955e:	6223      	str	r3, [r4, #32]
 8009560:	4b04      	ldr	r3, [pc, #16]	; (8009574 <__sinit+0x2c>)
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d1f5      	bne.n	8009554 <__sinit+0xc>
 8009568:	f7ff ffc4 	bl	80094f4 <global_stdio_init.part.0>
 800956c:	e7f2      	b.n	8009554 <__sinit+0xc>
 800956e:	bf00      	nop
 8009570:	080094b5 	.word	0x080094b5
 8009574:	20002964 	.word	0x20002964

08009578 <_fwalk_sglue>:
 8009578:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800957c:	4607      	mov	r7, r0
 800957e:	4688      	mov	r8, r1
 8009580:	4614      	mov	r4, r2
 8009582:	2600      	movs	r6, #0
 8009584:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009588:	f1b9 0901 	subs.w	r9, r9, #1
 800958c:	d505      	bpl.n	800959a <_fwalk_sglue+0x22>
 800958e:	6824      	ldr	r4, [r4, #0]
 8009590:	2c00      	cmp	r4, #0
 8009592:	d1f7      	bne.n	8009584 <_fwalk_sglue+0xc>
 8009594:	4630      	mov	r0, r6
 8009596:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800959a:	89ab      	ldrh	r3, [r5, #12]
 800959c:	2b01      	cmp	r3, #1
 800959e:	d907      	bls.n	80095b0 <_fwalk_sglue+0x38>
 80095a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80095a4:	3301      	adds	r3, #1
 80095a6:	d003      	beq.n	80095b0 <_fwalk_sglue+0x38>
 80095a8:	4629      	mov	r1, r5
 80095aa:	4638      	mov	r0, r7
 80095ac:	47c0      	blx	r8
 80095ae:	4306      	orrs	r6, r0
 80095b0:	3568      	adds	r5, #104	; 0x68
 80095b2:	e7e9      	b.n	8009588 <_fwalk_sglue+0x10>

080095b4 <siprintf>:
 80095b4:	b40e      	push	{r1, r2, r3}
 80095b6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80095ba:	b500      	push	{lr}
 80095bc:	b09c      	sub	sp, #112	; 0x70
 80095be:	ab1d      	add	r3, sp, #116	; 0x74
 80095c0:	9002      	str	r0, [sp, #8]
 80095c2:	9006      	str	r0, [sp, #24]
 80095c4:	9107      	str	r1, [sp, #28]
 80095c6:	9104      	str	r1, [sp, #16]
 80095c8:	4808      	ldr	r0, [pc, #32]	; (80095ec <siprintf+0x38>)
 80095ca:	4909      	ldr	r1, [pc, #36]	; (80095f0 <siprintf+0x3c>)
 80095cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80095d0:	9105      	str	r1, [sp, #20]
 80095d2:	6800      	ldr	r0, [r0, #0]
 80095d4:	a902      	add	r1, sp, #8
 80095d6:	9301      	str	r3, [sp, #4]
 80095d8:	f002 f916 	bl	800b808 <_svfiprintf_r>
 80095dc:	2200      	movs	r2, #0
 80095de:	9b02      	ldr	r3, [sp, #8]
 80095e0:	701a      	strb	r2, [r3, #0]
 80095e2:	b01c      	add	sp, #112	; 0x70
 80095e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80095e8:	b003      	add	sp, #12
 80095ea:	4770      	bx	lr
 80095ec:	200001dc 	.word	0x200001dc
 80095f0:	ffff0208 	.word	0xffff0208

080095f4 <__sread>:
 80095f4:	b510      	push	{r4, lr}
 80095f6:	460c      	mov	r4, r1
 80095f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095fc:	f000 f8b0 	bl	8009760 <_read_r>
 8009600:	2800      	cmp	r0, #0
 8009602:	bfab      	itete	ge
 8009604:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009606:	89a3      	ldrhlt	r3, [r4, #12]
 8009608:	181b      	addge	r3, r3, r0
 800960a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800960e:	bfac      	ite	ge
 8009610:	6563      	strge	r3, [r4, #84]	; 0x54
 8009612:	81a3      	strhlt	r3, [r4, #12]
 8009614:	bd10      	pop	{r4, pc}

08009616 <__swrite>:
 8009616:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800961a:	461f      	mov	r7, r3
 800961c:	898b      	ldrh	r3, [r1, #12]
 800961e:	4605      	mov	r5, r0
 8009620:	05db      	lsls	r3, r3, #23
 8009622:	460c      	mov	r4, r1
 8009624:	4616      	mov	r6, r2
 8009626:	d505      	bpl.n	8009634 <__swrite+0x1e>
 8009628:	2302      	movs	r3, #2
 800962a:	2200      	movs	r2, #0
 800962c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009630:	f000 f884 	bl	800973c <_lseek_r>
 8009634:	89a3      	ldrh	r3, [r4, #12]
 8009636:	4632      	mov	r2, r6
 8009638:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800963c:	81a3      	strh	r3, [r4, #12]
 800963e:	4628      	mov	r0, r5
 8009640:	463b      	mov	r3, r7
 8009642:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009646:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800964a:	f000 b89b 	b.w	8009784 <_write_r>

0800964e <__sseek>:
 800964e:	b510      	push	{r4, lr}
 8009650:	460c      	mov	r4, r1
 8009652:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009656:	f000 f871 	bl	800973c <_lseek_r>
 800965a:	1c43      	adds	r3, r0, #1
 800965c:	89a3      	ldrh	r3, [r4, #12]
 800965e:	bf15      	itete	ne
 8009660:	6560      	strne	r0, [r4, #84]	; 0x54
 8009662:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009666:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800966a:	81a3      	strheq	r3, [r4, #12]
 800966c:	bf18      	it	ne
 800966e:	81a3      	strhne	r3, [r4, #12]
 8009670:	bd10      	pop	{r4, pc}

08009672 <__sclose>:
 8009672:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009676:	f000 b851 	b.w	800971c <_close_r>

0800967a <memmove>:
 800967a:	4288      	cmp	r0, r1
 800967c:	b510      	push	{r4, lr}
 800967e:	eb01 0402 	add.w	r4, r1, r2
 8009682:	d902      	bls.n	800968a <memmove+0x10>
 8009684:	4284      	cmp	r4, r0
 8009686:	4623      	mov	r3, r4
 8009688:	d807      	bhi.n	800969a <memmove+0x20>
 800968a:	1e43      	subs	r3, r0, #1
 800968c:	42a1      	cmp	r1, r4
 800968e:	d008      	beq.n	80096a2 <memmove+0x28>
 8009690:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009694:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009698:	e7f8      	b.n	800968c <memmove+0x12>
 800969a:	4601      	mov	r1, r0
 800969c:	4402      	add	r2, r0
 800969e:	428a      	cmp	r2, r1
 80096a0:	d100      	bne.n	80096a4 <memmove+0x2a>
 80096a2:	bd10      	pop	{r4, pc}
 80096a4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80096a8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80096ac:	e7f7      	b.n	800969e <memmove+0x24>

080096ae <memset>:
 80096ae:	4603      	mov	r3, r0
 80096b0:	4402      	add	r2, r0
 80096b2:	4293      	cmp	r3, r2
 80096b4:	d100      	bne.n	80096b8 <memset+0xa>
 80096b6:	4770      	bx	lr
 80096b8:	f803 1b01 	strb.w	r1, [r3], #1
 80096bc:	e7f9      	b.n	80096b2 <memset+0x4>

080096be <strncmp>:
 80096be:	b510      	push	{r4, lr}
 80096c0:	b16a      	cbz	r2, 80096de <strncmp+0x20>
 80096c2:	3901      	subs	r1, #1
 80096c4:	1884      	adds	r4, r0, r2
 80096c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80096ca:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80096ce:	429a      	cmp	r2, r3
 80096d0:	d103      	bne.n	80096da <strncmp+0x1c>
 80096d2:	42a0      	cmp	r0, r4
 80096d4:	d001      	beq.n	80096da <strncmp+0x1c>
 80096d6:	2a00      	cmp	r2, #0
 80096d8:	d1f5      	bne.n	80096c6 <strncmp+0x8>
 80096da:	1ad0      	subs	r0, r2, r3
 80096dc:	bd10      	pop	{r4, pc}
 80096de:	4610      	mov	r0, r2
 80096e0:	e7fc      	b.n	80096dc <strncmp+0x1e>

080096e2 <strpbrk>:
 80096e2:	b570      	push	{r4, r5, r6, lr}
 80096e4:	4603      	mov	r3, r0
 80096e6:	7800      	ldrb	r0, [r0, #0]
 80096e8:	b190      	cbz	r0, 8009710 <strpbrk+0x2e>
 80096ea:	460c      	mov	r4, r1
 80096ec:	4618      	mov	r0, r3
 80096ee:	f813 5b01 	ldrb.w	r5, [r3], #1
 80096f2:	b14d      	cbz	r5, 8009708 <strpbrk+0x26>
 80096f4:	460a      	mov	r2, r1
 80096f6:	e001      	b.n	80096fc <strpbrk+0x1a>
 80096f8:	42ae      	cmp	r6, r5
 80096fa:	d009      	beq.n	8009710 <strpbrk+0x2e>
 80096fc:	4614      	mov	r4, r2
 80096fe:	f812 6b01 	ldrb.w	r6, [r2], #1
 8009702:	2e00      	cmp	r6, #0
 8009704:	d1f8      	bne.n	80096f8 <strpbrk+0x16>
 8009706:	e7f1      	b.n	80096ec <strpbrk+0xa>
 8009708:	7823      	ldrb	r3, [r4, #0]
 800970a:	2b00      	cmp	r3, #0
 800970c:	bf08      	it	eq
 800970e:	2000      	moveq	r0, #0
 8009710:	bd70      	pop	{r4, r5, r6, pc}
	...

08009714 <_localeconv_r>:
 8009714:	4800      	ldr	r0, [pc, #0]	; (8009718 <_localeconv_r+0x4>)
 8009716:	4770      	bx	lr
 8009718:	20000114 	.word	0x20000114

0800971c <_close_r>:
 800971c:	b538      	push	{r3, r4, r5, lr}
 800971e:	2300      	movs	r3, #0
 8009720:	4d05      	ldr	r5, [pc, #20]	; (8009738 <_close_r+0x1c>)
 8009722:	4604      	mov	r4, r0
 8009724:	4608      	mov	r0, r1
 8009726:	602b      	str	r3, [r5, #0]
 8009728:	f7f9 f8c0 	bl	80028ac <_close>
 800972c:	1c43      	adds	r3, r0, #1
 800972e:	d102      	bne.n	8009736 <_close_r+0x1a>
 8009730:	682b      	ldr	r3, [r5, #0]
 8009732:	b103      	cbz	r3, 8009736 <_close_r+0x1a>
 8009734:	6023      	str	r3, [r4, #0]
 8009736:	bd38      	pop	{r3, r4, r5, pc}
 8009738:	20002968 	.word	0x20002968

0800973c <_lseek_r>:
 800973c:	b538      	push	{r3, r4, r5, lr}
 800973e:	4604      	mov	r4, r0
 8009740:	4608      	mov	r0, r1
 8009742:	4611      	mov	r1, r2
 8009744:	2200      	movs	r2, #0
 8009746:	4d05      	ldr	r5, [pc, #20]	; (800975c <_lseek_r+0x20>)
 8009748:	602a      	str	r2, [r5, #0]
 800974a:	461a      	mov	r2, r3
 800974c:	f7f9 f8b8 	bl	80028c0 <_lseek>
 8009750:	1c43      	adds	r3, r0, #1
 8009752:	d102      	bne.n	800975a <_lseek_r+0x1e>
 8009754:	682b      	ldr	r3, [r5, #0]
 8009756:	b103      	cbz	r3, 800975a <_lseek_r+0x1e>
 8009758:	6023      	str	r3, [r4, #0]
 800975a:	bd38      	pop	{r3, r4, r5, pc}
 800975c:	20002968 	.word	0x20002968

08009760 <_read_r>:
 8009760:	b538      	push	{r3, r4, r5, lr}
 8009762:	4604      	mov	r4, r0
 8009764:	4608      	mov	r0, r1
 8009766:	4611      	mov	r1, r2
 8009768:	2200      	movs	r2, #0
 800976a:	4d05      	ldr	r5, [pc, #20]	; (8009780 <_read_r+0x20>)
 800976c:	602a      	str	r2, [r5, #0]
 800976e:	461a      	mov	r2, r3
 8009770:	f7f9 f882 	bl	8002878 <_read>
 8009774:	1c43      	adds	r3, r0, #1
 8009776:	d102      	bne.n	800977e <_read_r+0x1e>
 8009778:	682b      	ldr	r3, [r5, #0]
 800977a:	b103      	cbz	r3, 800977e <_read_r+0x1e>
 800977c:	6023      	str	r3, [r4, #0]
 800977e:	bd38      	pop	{r3, r4, r5, pc}
 8009780:	20002968 	.word	0x20002968

08009784 <_write_r>:
 8009784:	b538      	push	{r3, r4, r5, lr}
 8009786:	4604      	mov	r4, r0
 8009788:	4608      	mov	r0, r1
 800978a:	4611      	mov	r1, r2
 800978c:	2200      	movs	r2, #0
 800978e:	4d05      	ldr	r5, [pc, #20]	; (80097a4 <_write_r+0x20>)
 8009790:	602a      	str	r2, [r5, #0]
 8009792:	461a      	mov	r2, r3
 8009794:	f7f9 f87d 	bl	8002892 <_write>
 8009798:	1c43      	adds	r3, r0, #1
 800979a:	d102      	bne.n	80097a2 <_write_r+0x1e>
 800979c:	682b      	ldr	r3, [r5, #0]
 800979e:	b103      	cbz	r3, 80097a2 <_write_r+0x1e>
 80097a0:	6023      	str	r3, [r4, #0]
 80097a2:	bd38      	pop	{r3, r4, r5, pc}
 80097a4:	20002968 	.word	0x20002968

080097a8 <__errno>:
 80097a8:	4b01      	ldr	r3, [pc, #4]	; (80097b0 <__errno+0x8>)
 80097aa:	6818      	ldr	r0, [r3, #0]
 80097ac:	4770      	bx	lr
 80097ae:	bf00      	nop
 80097b0:	200001dc 	.word	0x200001dc

080097b4 <__libc_init_array>:
 80097b4:	b570      	push	{r4, r5, r6, lr}
 80097b6:	2600      	movs	r6, #0
 80097b8:	4d0c      	ldr	r5, [pc, #48]	; (80097ec <__libc_init_array+0x38>)
 80097ba:	4c0d      	ldr	r4, [pc, #52]	; (80097f0 <__libc_init_array+0x3c>)
 80097bc:	1b64      	subs	r4, r4, r5
 80097be:	10a4      	asrs	r4, r4, #2
 80097c0:	42a6      	cmp	r6, r4
 80097c2:	d109      	bne.n	80097d8 <__libc_init_array+0x24>
 80097c4:	f002 fcfa 	bl	800c1bc <_init>
 80097c8:	2600      	movs	r6, #0
 80097ca:	4d0a      	ldr	r5, [pc, #40]	; (80097f4 <__libc_init_array+0x40>)
 80097cc:	4c0a      	ldr	r4, [pc, #40]	; (80097f8 <__libc_init_array+0x44>)
 80097ce:	1b64      	subs	r4, r4, r5
 80097d0:	10a4      	asrs	r4, r4, #2
 80097d2:	42a6      	cmp	r6, r4
 80097d4:	d105      	bne.n	80097e2 <__libc_init_array+0x2e>
 80097d6:	bd70      	pop	{r4, r5, r6, pc}
 80097d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80097dc:	4798      	blx	r3
 80097de:	3601      	adds	r6, #1
 80097e0:	e7ee      	b.n	80097c0 <__libc_init_array+0xc>
 80097e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80097e6:	4798      	blx	r3
 80097e8:	3601      	adds	r6, #1
 80097ea:	e7f2      	b.n	80097d2 <__libc_init_array+0x1e>
 80097ec:	0800cffc 	.word	0x0800cffc
 80097f0:	0800cffc 	.word	0x0800cffc
 80097f4:	0800cffc 	.word	0x0800cffc
 80097f8:	0800d000 	.word	0x0800d000

080097fc <__retarget_lock_init_recursive>:
 80097fc:	4770      	bx	lr

080097fe <__retarget_lock_acquire_recursive>:
 80097fe:	4770      	bx	lr

08009800 <__retarget_lock_release_recursive>:
 8009800:	4770      	bx	lr

08009802 <memchr>:
 8009802:	4603      	mov	r3, r0
 8009804:	b510      	push	{r4, lr}
 8009806:	b2c9      	uxtb	r1, r1
 8009808:	4402      	add	r2, r0
 800980a:	4293      	cmp	r3, r2
 800980c:	4618      	mov	r0, r3
 800980e:	d101      	bne.n	8009814 <memchr+0x12>
 8009810:	2000      	movs	r0, #0
 8009812:	e003      	b.n	800981c <memchr+0x1a>
 8009814:	7804      	ldrb	r4, [r0, #0]
 8009816:	3301      	adds	r3, #1
 8009818:	428c      	cmp	r4, r1
 800981a:	d1f6      	bne.n	800980a <memchr+0x8>
 800981c:	bd10      	pop	{r4, pc}

0800981e <memcpy>:
 800981e:	440a      	add	r2, r1
 8009820:	4291      	cmp	r1, r2
 8009822:	f100 33ff 	add.w	r3, r0, #4294967295
 8009826:	d100      	bne.n	800982a <memcpy+0xc>
 8009828:	4770      	bx	lr
 800982a:	b510      	push	{r4, lr}
 800982c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009830:	4291      	cmp	r1, r2
 8009832:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009836:	d1f9      	bne.n	800982c <memcpy+0xe>
 8009838:	bd10      	pop	{r4, pc}
	...

0800983c <nan>:
 800983c:	2000      	movs	r0, #0
 800983e:	4901      	ldr	r1, [pc, #4]	; (8009844 <nan+0x8>)
 8009840:	4770      	bx	lr
 8009842:	bf00      	nop
 8009844:	7ff80000 	.word	0x7ff80000

08009848 <nanf>:
 8009848:	4800      	ldr	r0, [pc, #0]	; (800984c <nanf+0x4>)
 800984a:	4770      	bx	lr
 800984c:	7fc00000 	.word	0x7fc00000

08009850 <quorem>:
 8009850:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009854:	6903      	ldr	r3, [r0, #16]
 8009856:	690c      	ldr	r4, [r1, #16]
 8009858:	4607      	mov	r7, r0
 800985a:	42a3      	cmp	r3, r4
 800985c:	db7f      	blt.n	800995e <quorem+0x10e>
 800985e:	3c01      	subs	r4, #1
 8009860:	f100 0514 	add.w	r5, r0, #20
 8009864:	f101 0814 	add.w	r8, r1, #20
 8009868:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800986c:	9301      	str	r3, [sp, #4]
 800986e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009872:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009876:	3301      	adds	r3, #1
 8009878:	429a      	cmp	r2, r3
 800987a:	fbb2 f6f3 	udiv	r6, r2, r3
 800987e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009882:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009886:	d331      	bcc.n	80098ec <quorem+0x9c>
 8009888:	f04f 0e00 	mov.w	lr, #0
 800988c:	4640      	mov	r0, r8
 800988e:	46ac      	mov	ip, r5
 8009890:	46f2      	mov	sl, lr
 8009892:	f850 2b04 	ldr.w	r2, [r0], #4
 8009896:	b293      	uxth	r3, r2
 8009898:	fb06 e303 	mla	r3, r6, r3, lr
 800989c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80098a0:	0c1a      	lsrs	r2, r3, #16
 80098a2:	b29b      	uxth	r3, r3
 80098a4:	fb06 220e 	mla	r2, r6, lr, r2
 80098a8:	ebaa 0303 	sub.w	r3, sl, r3
 80098ac:	f8dc a000 	ldr.w	sl, [ip]
 80098b0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80098b4:	fa1f fa8a 	uxth.w	sl, sl
 80098b8:	4453      	add	r3, sl
 80098ba:	f8dc a000 	ldr.w	sl, [ip]
 80098be:	b292      	uxth	r2, r2
 80098c0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80098c4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80098c8:	b29b      	uxth	r3, r3
 80098ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80098ce:	4581      	cmp	r9, r0
 80098d0:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80098d4:	f84c 3b04 	str.w	r3, [ip], #4
 80098d8:	d2db      	bcs.n	8009892 <quorem+0x42>
 80098da:	f855 300b 	ldr.w	r3, [r5, fp]
 80098de:	b92b      	cbnz	r3, 80098ec <quorem+0x9c>
 80098e0:	9b01      	ldr	r3, [sp, #4]
 80098e2:	3b04      	subs	r3, #4
 80098e4:	429d      	cmp	r5, r3
 80098e6:	461a      	mov	r2, r3
 80098e8:	d32d      	bcc.n	8009946 <quorem+0xf6>
 80098ea:	613c      	str	r4, [r7, #16]
 80098ec:	4638      	mov	r0, r7
 80098ee:	f001 fd4b 	bl	800b388 <__mcmp>
 80098f2:	2800      	cmp	r0, #0
 80098f4:	db23      	blt.n	800993e <quorem+0xee>
 80098f6:	4629      	mov	r1, r5
 80098f8:	2000      	movs	r0, #0
 80098fa:	3601      	adds	r6, #1
 80098fc:	f858 2b04 	ldr.w	r2, [r8], #4
 8009900:	f8d1 c000 	ldr.w	ip, [r1]
 8009904:	b293      	uxth	r3, r2
 8009906:	1ac3      	subs	r3, r0, r3
 8009908:	0c12      	lsrs	r2, r2, #16
 800990a:	fa1f f08c 	uxth.w	r0, ip
 800990e:	4403      	add	r3, r0
 8009910:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8009914:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009918:	b29b      	uxth	r3, r3
 800991a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800991e:	45c1      	cmp	r9, r8
 8009920:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009924:	f841 3b04 	str.w	r3, [r1], #4
 8009928:	d2e8      	bcs.n	80098fc <quorem+0xac>
 800992a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800992e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009932:	b922      	cbnz	r2, 800993e <quorem+0xee>
 8009934:	3b04      	subs	r3, #4
 8009936:	429d      	cmp	r5, r3
 8009938:	461a      	mov	r2, r3
 800993a:	d30a      	bcc.n	8009952 <quorem+0x102>
 800993c:	613c      	str	r4, [r7, #16]
 800993e:	4630      	mov	r0, r6
 8009940:	b003      	add	sp, #12
 8009942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009946:	6812      	ldr	r2, [r2, #0]
 8009948:	3b04      	subs	r3, #4
 800994a:	2a00      	cmp	r2, #0
 800994c:	d1cd      	bne.n	80098ea <quorem+0x9a>
 800994e:	3c01      	subs	r4, #1
 8009950:	e7c8      	b.n	80098e4 <quorem+0x94>
 8009952:	6812      	ldr	r2, [r2, #0]
 8009954:	3b04      	subs	r3, #4
 8009956:	2a00      	cmp	r2, #0
 8009958:	d1f0      	bne.n	800993c <quorem+0xec>
 800995a:	3c01      	subs	r4, #1
 800995c:	e7eb      	b.n	8009936 <quorem+0xe6>
 800995e:	2000      	movs	r0, #0
 8009960:	e7ee      	b.n	8009940 <quorem+0xf0>
 8009962:	0000      	movs	r0, r0
 8009964:	0000      	movs	r0, r0
	...

08009968 <_dtoa_r>:
 8009968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800996c:	4616      	mov	r6, r2
 800996e:	461f      	mov	r7, r3
 8009970:	69c4      	ldr	r4, [r0, #28]
 8009972:	b099      	sub	sp, #100	; 0x64
 8009974:	4605      	mov	r5, r0
 8009976:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800997a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800997e:	b974      	cbnz	r4, 800999e <_dtoa_r+0x36>
 8009980:	2010      	movs	r0, #16
 8009982:	f001 f977 	bl	800ac74 <malloc>
 8009986:	4602      	mov	r2, r0
 8009988:	61e8      	str	r0, [r5, #28]
 800998a:	b920      	cbnz	r0, 8009996 <_dtoa_r+0x2e>
 800998c:	21ef      	movs	r1, #239	; 0xef
 800998e:	4bac      	ldr	r3, [pc, #688]	; (8009c40 <_dtoa_r+0x2d8>)
 8009990:	48ac      	ldr	r0, [pc, #688]	; (8009c44 <_dtoa_r+0x2dc>)
 8009992:	f002 f8f1 	bl	800bb78 <__assert_func>
 8009996:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800999a:	6004      	str	r4, [r0, #0]
 800999c:	60c4      	str	r4, [r0, #12]
 800999e:	69eb      	ldr	r3, [r5, #28]
 80099a0:	6819      	ldr	r1, [r3, #0]
 80099a2:	b151      	cbz	r1, 80099ba <_dtoa_r+0x52>
 80099a4:	685a      	ldr	r2, [r3, #4]
 80099a6:	2301      	movs	r3, #1
 80099a8:	4093      	lsls	r3, r2
 80099aa:	604a      	str	r2, [r1, #4]
 80099ac:	608b      	str	r3, [r1, #8]
 80099ae:	4628      	mov	r0, r5
 80099b0:	f001 fa66 	bl	800ae80 <_Bfree>
 80099b4:	2200      	movs	r2, #0
 80099b6:	69eb      	ldr	r3, [r5, #28]
 80099b8:	601a      	str	r2, [r3, #0]
 80099ba:	1e3b      	subs	r3, r7, #0
 80099bc:	bfaf      	iteee	ge
 80099be:	2300      	movge	r3, #0
 80099c0:	2201      	movlt	r2, #1
 80099c2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80099c6:	9305      	strlt	r3, [sp, #20]
 80099c8:	bfa8      	it	ge
 80099ca:	f8c8 3000 	strge.w	r3, [r8]
 80099ce:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80099d2:	4b9d      	ldr	r3, [pc, #628]	; (8009c48 <_dtoa_r+0x2e0>)
 80099d4:	bfb8      	it	lt
 80099d6:	f8c8 2000 	strlt.w	r2, [r8]
 80099da:	ea33 0309 	bics.w	r3, r3, r9
 80099de:	d119      	bne.n	8009a14 <_dtoa_r+0xac>
 80099e0:	f242 730f 	movw	r3, #9999	; 0x270f
 80099e4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80099e6:	6013      	str	r3, [r2, #0]
 80099e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80099ec:	4333      	orrs	r3, r6
 80099ee:	f000 8589 	beq.w	800a504 <_dtoa_r+0xb9c>
 80099f2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80099f4:	b953      	cbnz	r3, 8009a0c <_dtoa_r+0xa4>
 80099f6:	4b95      	ldr	r3, [pc, #596]	; (8009c4c <_dtoa_r+0x2e4>)
 80099f8:	e023      	b.n	8009a42 <_dtoa_r+0xda>
 80099fa:	4b95      	ldr	r3, [pc, #596]	; (8009c50 <_dtoa_r+0x2e8>)
 80099fc:	9303      	str	r3, [sp, #12]
 80099fe:	3308      	adds	r3, #8
 8009a00:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009a02:	6013      	str	r3, [r2, #0]
 8009a04:	9803      	ldr	r0, [sp, #12]
 8009a06:	b019      	add	sp, #100	; 0x64
 8009a08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a0c:	4b8f      	ldr	r3, [pc, #572]	; (8009c4c <_dtoa_r+0x2e4>)
 8009a0e:	9303      	str	r3, [sp, #12]
 8009a10:	3303      	adds	r3, #3
 8009a12:	e7f5      	b.n	8009a00 <_dtoa_r+0x98>
 8009a14:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8009a18:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8009a1c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009a20:	2200      	movs	r2, #0
 8009a22:	2300      	movs	r3, #0
 8009a24:	f7f6 ffca 	bl	80009bc <__aeabi_dcmpeq>
 8009a28:	4680      	mov	r8, r0
 8009a2a:	b160      	cbz	r0, 8009a46 <_dtoa_r+0xde>
 8009a2c:	2301      	movs	r3, #1
 8009a2e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009a30:	6013      	str	r3, [r2, #0]
 8009a32:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	f000 8562 	beq.w	800a4fe <_dtoa_r+0xb96>
 8009a3a:	4b86      	ldr	r3, [pc, #536]	; (8009c54 <_dtoa_r+0x2ec>)
 8009a3c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009a3e:	6013      	str	r3, [r2, #0]
 8009a40:	3b01      	subs	r3, #1
 8009a42:	9303      	str	r3, [sp, #12]
 8009a44:	e7de      	b.n	8009a04 <_dtoa_r+0x9c>
 8009a46:	ab16      	add	r3, sp, #88	; 0x58
 8009a48:	9301      	str	r3, [sp, #4]
 8009a4a:	ab17      	add	r3, sp, #92	; 0x5c
 8009a4c:	9300      	str	r3, [sp, #0]
 8009a4e:	4628      	mov	r0, r5
 8009a50:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009a54:	f001 fda8 	bl	800b5a8 <__d2b>
 8009a58:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8009a5c:	4682      	mov	sl, r0
 8009a5e:	2c00      	cmp	r4, #0
 8009a60:	d07e      	beq.n	8009b60 <_dtoa_r+0x1f8>
 8009a62:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009a66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009a68:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8009a6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009a70:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8009a74:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009a78:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8009a7c:	4619      	mov	r1, r3
 8009a7e:	2200      	movs	r2, #0
 8009a80:	4b75      	ldr	r3, [pc, #468]	; (8009c58 <_dtoa_r+0x2f0>)
 8009a82:	f7f6 fb7b 	bl	800017c <__aeabi_dsub>
 8009a86:	a368      	add	r3, pc, #416	; (adr r3, 8009c28 <_dtoa_r+0x2c0>)
 8009a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a8c:	f7f6 fd2e 	bl	80004ec <__aeabi_dmul>
 8009a90:	a367      	add	r3, pc, #412	; (adr r3, 8009c30 <_dtoa_r+0x2c8>)
 8009a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a96:	f7f6 fb73 	bl	8000180 <__adddf3>
 8009a9a:	4606      	mov	r6, r0
 8009a9c:	4620      	mov	r0, r4
 8009a9e:	460f      	mov	r7, r1
 8009aa0:	f7f6 fcba 	bl	8000418 <__aeabi_i2d>
 8009aa4:	a364      	add	r3, pc, #400	; (adr r3, 8009c38 <_dtoa_r+0x2d0>)
 8009aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aaa:	f7f6 fd1f 	bl	80004ec <__aeabi_dmul>
 8009aae:	4602      	mov	r2, r0
 8009ab0:	460b      	mov	r3, r1
 8009ab2:	4630      	mov	r0, r6
 8009ab4:	4639      	mov	r1, r7
 8009ab6:	f7f6 fb63 	bl	8000180 <__adddf3>
 8009aba:	4606      	mov	r6, r0
 8009abc:	460f      	mov	r7, r1
 8009abe:	f7f6 ffc5 	bl	8000a4c <__aeabi_d2iz>
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	4683      	mov	fp, r0
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	4630      	mov	r0, r6
 8009aca:	4639      	mov	r1, r7
 8009acc:	f7f6 ff80 	bl	80009d0 <__aeabi_dcmplt>
 8009ad0:	b148      	cbz	r0, 8009ae6 <_dtoa_r+0x17e>
 8009ad2:	4658      	mov	r0, fp
 8009ad4:	f7f6 fca0 	bl	8000418 <__aeabi_i2d>
 8009ad8:	4632      	mov	r2, r6
 8009ada:	463b      	mov	r3, r7
 8009adc:	f7f6 ff6e 	bl	80009bc <__aeabi_dcmpeq>
 8009ae0:	b908      	cbnz	r0, 8009ae6 <_dtoa_r+0x17e>
 8009ae2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009ae6:	f1bb 0f16 	cmp.w	fp, #22
 8009aea:	d857      	bhi.n	8009b9c <_dtoa_r+0x234>
 8009aec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009af0:	4b5a      	ldr	r3, [pc, #360]	; (8009c5c <_dtoa_r+0x2f4>)
 8009af2:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009afa:	f7f6 ff69 	bl	80009d0 <__aeabi_dcmplt>
 8009afe:	2800      	cmp	r0, #0
 8009b00:	d04e      	beq.n	8009ba0 <_dtoa_r+0x238>
 8009b02:	2300      	movs	r3, #0
 8009b04:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009b08:	930f      	str	r3, [sp, #60]	; 0x3c
 8009b0a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009b0c:	1b1b      	subs	r3, r3, r4
 8009b0e:	1e5a      	subs	r2, r3, #1
 8009b10:	bf46      	itte	mi
 8009b12:	f1c3 0901 	rsbmi	r9, r3, #1
 8009b16:	2300      	movmi	r3, #0
 8009b18:	f04f 0900 	movpl.w	r9, #0
 8009b1c:	9209      	str	r2, [sp, #36]	; 0x24
 8009b1e:	bf48      	it	mi
 8009b20:	9309      	strmi	r3, [sp, #36]	; 0x24
 8009b22:	f1bb 0f00 	cmp.w	fp, #0
 8009b26:	db3d      	blt.n	8009ba4 <_dtoa_r+0x23c>
 8009b28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b2a:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8009b2e:	445b      	add	r3, fp
 8009b30:	9309      	str	r3, [sp, #36]	; 0x24
 8009b32:	2300      	movs	r3, #0
 8009b34:	930a      	str	r3, [sp, #40]	; 0x28
 8009b36:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009b38:	2b09      	cmp	r3, #9
 8009b3a:	d867      	bhi.n	8009c0c <_dtoa_r+0x2a4>
 8009b3c:	2b05      	cmp	r3, #5
 8009b3e:	bfc4      	itt	gt
 8009b40:	3b04      	subgt	r3, #4
 8009b42:	9322      	strgt	r3, [sp, #136]	; 0x88
 8009b44:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009b46:	bfc8      	it	gt
 8009b48:	2400      	movgt	r4, #0
 8009b4a:	f1a3 0302 	sub.w	r3, r3, #2
 8009b4e:	bfd8      	it	le
 8009b50:	2401      	movle	r4, #1
 8009b52:	2b03      	cmp	r3, #3
 8009b54:	f200 8086 	bhi.w	8009c64 <_dtoa_r+0x2fc>
 8009b58:	e8df f003 	tbb	[pc, r3]
 8009b5c:	5637392c 	.word	0x5637392c
 8009b60:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8009b64:	441c      	add	r4, r3
 8009b66:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8009b6a:	2b20      	cmp	r3, #32
 8009b6c:	bfc1      	itttt	gt
 8009b6e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009b72:	fa09 f903 	lslgt.w	r9, r9, r3
 8009b76:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8009b7a:	fa26 f303 	lsrgt.w	r3, r6, r3
 8009b7e:	bfd6      	itet	le
 8009b80:	f1c3 0320 	rsble	r3, r3, #32
 8009b84:	ea49 0003 	orrgt.w	r0, r9, r3
 8009b88:	fa06 f003 	lslle.w	r0, r6, r3
 8009b8c:	f7f6 fc34 	bl	80003f8 <__aeabi_ui2d>
 8009b90:	2201      	movs	r2, #1
 8009b92:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8009b96:	3c01      	subs	r4, #1
 8009b98:	9213      	str	r2, [sp, #76]	; 0x4c
 8009b9a:	e76f      	b.n	8009a7c <_dtoa_r+0x114>
 8009b9c:	2301      	movs	r3, #1
 8009b9e:	e7b3      	b.n	8009b08 <_dtoa_r+0x1a0>
 8009ba0:	900f      	str	r0, [sp, #60]	; 0x3c
 8009ba2:	e7b2      	b.n	8009b0a <_dtoa_r+0x1a2>
 8009ba4:	f1cb 0300 	rsb	r3, fp, #0
 8009ba8:	930a      	str	r3, [sp, #40]	; 0x28
 8009baa:	2300      	movs	r3, #0
 8009bac:	eba9 090b 	sub.w	r9, r9, fp
 8009bb0:	930e      	str	r3, [sp, #56]	; 0x38
 8009bb2:	e7c0      	b.n	8009b36 <_dtoa_r+0x1ce>
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	930b      	str	r3, [sp, #44]	; 0x2c
 8009bb8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	dc55      	bgt.n	8009c6a <_dtoa_r+0x302>
 8009bbe:	2301      	movs	r3, #1
 8009bc0:	461a      	mov	r2, r3
 8009bc2:	9306      	str	r3, [sp, #24]
 8009bc4:	9308      	str	r3, [sp, #32]
 8009bc6:	9223      	str	r2, [sp, #140]	; 0x8c
 8009bc8:	e00b      	b.n	8009be2 <_dtoa_r+0x27a>
 8009bca:	2301      	movs	r3, #1
 8009bcc:	e7f3      	b.n	8009bb6 <_dtoa_r+0x24e>
 8009bce:	2300      	movs	r3, #0
 8009bd0:	930b      	str	r3, [sp, #44]	; 0x2c
 8009bd2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009bd4:	445b      	add	r3, fp
 8009bd6:	9306      	str	r3, [sp, #24]
 8009bd8:	3301      	adds	r3, #1
 8009bda:	2b01      	cmp	r3, #1
 8009bdc:	9308      	str	r3, [sp, #32]
 8009bde:	bfb8      	it	lt
 8009be0:	2301      	movlt	r3, #1
 8009be2:	2100      	movs	r1, #0
 8009be4:	2204      	movs	r2, #4
 8009be6:	69e8      	ldr	r0, [r5, #28]
 8009be8:	f102 0614 	add.w	r6, r2, #20
 8009bec:	429e      	cmp	r6, r3
 8009bee:	d940      	bls.n	8009c72 <_dtoa_r+0x30a>
 8009bf0:	6041      	str	r1, [r0, #4]
 8009bf2:	4628      	mov	r0, r5
 8009bf4:	f001 f904 	bl	800ae00 <_Balloc>
 8009bf8:	9003      	str	r0, [sp, #12]
 8009bfa:	2800      	cmp	r0, #0
 8009bfc:	d13c      	bne.n	8009c78 <_dtoa_r+0x310>
 8009bfe:	4602      	mov	r2, r0
 8009c00:	f240 11af 	movw	r1, #431	; 0x1af
 8009c04:	4b16      	ldr	r3, [pc, #88]	; (8009c60 <_dtoa_r+0x2f8>)
 8009c06:	e6c3      	b.n	8009990 <_dtoa_r+0x28>
 8009c08:	2301      	movs	r3, #1
 8009c0a:	e7e1      	b.n	8009bd0 <_dtoa_r+0x268>
 8009c0c:	2401      	movs	r4, #1
 8009c0e:	2300      	movs	r3, #0
 8009c10:	940b      	str	r4, [sp, #44]	; 0x2c
 8009c12:	9322      	str	r3, [sp, #136]	; 0x88
 8009c14:	f04f 33ff 	mov.w	r3, #4294967295
 8009c18:	2200      	movs	r2, #0
 8009c1a:	9306      	str	r3, [sp, #24]
 8009c1c:	9308      	str	r3, [sp, #32]
 8009c1e:	2312      	movs	r3, #18
 8009c20:	e7d1      	b.n	8009bc6 <_dtoa_r+0x25e>
 8009c22:	bf00      	nop
 8009c24:	f3af 8000 	nop.w
 8009c28:	636f4361 	.word	0x636f4361
 8009c2c:	3fd287a7 	.word	0x3fd287a7
 8009c30:	8b60c8b3 	.word	0x8b60c8b3
 8009c34:	3fc68a28 	.word	0x3fc68a28
 8009c38:	509f79fb 	.word	0x509f79fb
 8009c3c:	3fd34413 	.word	0x3fd34413
 8009c40:	0800cd77 	.word	0x0800cd77
 8009c44:	0800cd8e 	.word	0x0800cd8e
 8009c48:	7ff00000 	.word	0x7ff00000
 8009c4c:	0800cd73 	.word	0x0800cd73
 8009c50:	0800cd6a 	.word	0x0800cd6a
 8009c54:	0800cd3a 	.word	0x0800cd3a
 8009c58:	3ff80000 	.word	0x3ff80000
 8009c5c:	0800ced8 	.word	0x0800ced8
 8009c60:	0800cde6 	.word	0x0800cde6
 8009c64:	2301      	movs	r3, #1
 8009c66:	930b      	str	r3, [sp, #44]	; 0x2c
 8009c68:	e7d4      	b.n	8009c14 <_dtoa_r+0x2ac>
 8009c6a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009c6c:	9306      	str	r3, [sp, #24]
 8009c6e:	9308      	str	r3, [sp, #32]
 8009c70:	e7b7      	b.n	8009be2 <_dtoa_r+0x27a>
 8009c72:	3101      	adds	r1, #1
 8009c74:	0052      	lsls	r2, r2, #1
 8009c76:	e7b7      	b.n	8009be8 <_dtoa_r+0x280>
 8009c78:	69eb      	ldr	r3, [r5, #28]
 8009c7a:	9a03      	ldr	r2, [sp, #12]
 8009c7c:	601a      	str	r2, [r3, #0]
 8009c7e:	9b08      	ldr	r3, [sp, #32]
 8009c80:	2b0e      	cmp	r3, #14
 8009c82:	f200 80a8 	bhi.w	8009dd6 <_dtoa_r+0x46e>
 8009c86:	2c00      	cmp	r4, #0
 8009c88:	f000 80a5 	beq.w	8009dd6 <_dtoa_r+0x46e>
 8009c8c:	f1bb 0f00 	cmp.w	fp, #0
 8009c90:	dd34      	ble.n	8009cfc <_dtoa_r+0x394>
 8009c92:	4b9a      	ldr	r3, [pc, #616]	; (8009efc <_dtoa_r+0x594>)
 8009c94:	f00b 020f 	and.w	r2, fp, #15
 8009c98:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009c9c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009ca0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009ca4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8009ca8:	ea4f 142b 	mov.w	r4, fp, asr #4
 8009cac:	d016      	beq.n	8009cdc <_dtoa_r+0x374>
 8009cae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009cb2:	4b93      	ldr	r3, [pc, #588]	; (8009f00 <_dtoa_r+0x598>)
 8009cb4:	2703      	movs	r7, #3
 8009cb6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009cba:	f7f6 fd41 	bl	8000740 <__aeabi_ddiv>
 8009cbe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009cc2:	f004 040f 	and.w	r4, r4, #15
 8009cc6:	4e8e      	ldr	r6, [pc, #568]	; (8009f00 <_dtoa_r+0x598>)
 8009cc8:	b954      	cbnz	r4, 8009ce0 <_dtoa_r+0x378>
 8009cca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009cce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009cd2:	f7f6 fd35 	bl	8000740 <__aeabi_ddiv>
 8009cd6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009cda:	e029      	b.n	8009d30 <_dtoa_r+0x3c8>
 8009cdc:	2702      	movs	r7, #2
 8009cde:	e7f2      	b.n	8009cc6 <_dtoa_r+0x35e>
 8009ce0:	07e1      	lsls	r1, r4, #31
 8009ce2:	d508      	bpl.n	8009cf6 <_dtoa_r+0x38e>
 8009ce4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009ce8:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009cec:	f7f6 fbfe 	bl	80004ec <__aeabi_dmul>
 8009cf0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009cf4:	3701      	adds	r7, #1
 8009cf6:	1064      	asrs	r4, r4, #1
 8009cf8:	3608      	adds	r6, #8
 8009cfa:	e7e5      	b.n	8009cc8 <_dtoa_r+0x360>
 8009cfc:	f000 80a5 	beq.w	8009e4a <_dtoa_r+0x4e2>
 8009d00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009d04:	f1cb 0400 	rsb	r4, fp, #0
 8009d08:	4b7c      	ldr	r3, [pc, #496]	; (8009efc <_dtoa_r+0x594>)
 8009d0a:	f004 020f 	and.w	r2, r4, #15
 8009d0e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d16:	f7f6 fbe9 	bl	80004ec <__aeabi_dmul>
 8009d1a:	2702      	movs	r7, #2
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009d22:	4e77      	ldr	r6, [pc, #476]	; (8009f00 <_dtoa_r+0x598>)
 8009d24:	1124      	asrs	r4, r4, #4
 8009d26:	2c00      	cmp	r4, #0
 8009d28:	f040 8084 	bne.w	8009e34 <_dtoa_r+0x4cc>
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d1d2      	bne.n	8009cd6 <_dtoa_r+0x36e>
 8009d30:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8009d34:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8009d38:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	f000 8087 	beq.w	8009e4e <_dtoa_r+0x4e6>
 8009d40:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009d44:	2200      	movs	r2, #0
 8009d46:	4b6f      	ldr	r3, [pc, #444]	; (8009f04 <_dtoa_r+0x59c>)
 8009d48:	f7f6 fe42 	bl	80009d0 <__aeabi_dcmplt>
 8009d4c:	2800      	cmp	r0, #0
 8009d4e:	d07e      	beq.n	8009e4e <_dtoa_r+0x4e6>
 8009d50:	9b08      	ldr	r3, [sp, #32]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d07b      	beq.n	8009e4e <_dtoa_r+0x4e6>
 8009d56:	9b06      	ldr	r3, [sp, #24]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	dd38      	ble.n	8009dce <_dtoa_r+0x466>
 8009d5c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009d60:	2200      	movs	r2, #0
 8009d62:	4b69      	ldr	r3, [pc, #420]	; (8009f08 <_dtoa_r+0x5a0>)
 8009d64:	f7f6 fbc2 	bl	80004ec <__aeabi_dmul>
 8009d68:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009d6c:	9c06      	ldr	r4, [sp, #24]
 8009d6e:	f10b 38ff 	add.w	r8, fp, #4294967295
 8009d72:	3701      	adds	r7, #1
 8009d74:	4638      	mov	r0, r7
 8009d76:	f7f6 fb4f 	bl	8000418 <__aeabi_i2d>
 8009d7a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d7e:	f7f6 fbb5 	bl	80004ec <__aeabi_dmul>
 8009d82:	2200      	movs	r2, #0
 8009d84:	4b61      	ldr	r3, [pc, #388]	; (8009f0c <_dtoa_r+0x5a4>)
 8009d86:	f7f6 f9fb 	bl	8000180 <__adddf3>
 8009d8a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8009d8e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009d92:	9611      	str	r6, [sp, #68]	; 0x44
 8009d94:	2c00      	cmp	r4, #0
 8009d96:	d15d      	bne.n	8009e54 <_dtoa_r+0x4ec>
 8009d98:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	4b5c      	ldr	r3, [pc, #368]	; (8009f10 <_dtoa_r+0x5a8>)
 8009da0:	f7f6 f9ec 	bl	800017c <__aeabi_dsub>
 8009da4:	4602      	mov	r2, r0
 8009da6:	460b      	mov	r3, r1
 8009da8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009dac:	4633      	mov	r3, r6
 8009dae:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009db0:	f7f6 fe2c 	bl	8000a0c <__aeabi_dcmpgt>
 8009db4:	2800      	cmp	r0, #0
 8009db6:	f040 8295 	bne.w	800a2e4 <_dtoa_r+0x97c>
 8009dba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009dbe:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009dc0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8009dc4:	f7f6 fe04 	bl	80009d0 <__aeabi_dcmplt>
 8009dc8:	2800      	cmp	r0, #0
 8009dca:	f040 8289 	bne.w	800a2e0 <_dtoa_r+0x978>
 8009dce:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8009dd2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009dd6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	f2c0 8151 	blt.w	800a080 <_dtoa_r+0x718>
 8009dde:	f1bb 0f0e 	cmp.w	fp, #14
 8009de2:	f300 814d 	bgt.w	800a080 <_dtoa_r+0x718>
 8009de6:	4b45      	ldr	r3, [pc, #276]	; (8009efc <_dtoa_r+0x594>)
 8009de8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009dec:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009df0:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8009df4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	f280 80da 	bge.w	8009fb0 <_dtoa_r+0x648>
 8009dfc:	9b08      	ldr	r3, [sp, #32]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	f300 80d6 	bgt.w	8009fb0 <_dtoa_r+0x648>
 8009e04:	f040 826b 	bne.w	800a2de <_dtoa_r+0x976>
 8009e08:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	4b40      	ldr	r3, [pc, #256]	; (8009f10 <_dtoa_r+0x5a8>)
 8009e10:	f7f6 fb6c 	bl	80004ec <__aeabi_dmul>
 8009e14:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009e18:	f7f6 fdee 	bl	80009f8 <__aeabi_dcmpge>
 8009e1c:	9c08      	ldr	r4, [sp, #32]
 8009e1e:	4626      	mov	r6, r4
 8009e20:	2800      	cmp	r0, #0
 8009e22:	f040 8241 	bne.w	800a2a8 <_dtoa_r+0x940>
 8009e26:	2331      	movs	r3, #49	; 0x31
 8009e28:	9f03      	ldr	r7, [sp, #12]
 8009e2a:	f10b 0b01 	add.w	fp, fp, #1
 8009e2e:	f807 3b01 	strb.w	r3, [r7], #1
 8009e32:	e23d      	b.n	800a2b0 <_dtoa_r+0x948>
 8009e34:	07e2      	lsls	r2, r4, #31
 8009e36:	d505      	bpl.n	8009e44 <_dtoa_r+0x4dc>
 8009e38:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009e3c:	f7f6 fb56 	bl	80004ec <__aeabi_dmul>
 8009e40:	2301      	movs	r3, #1
 8009e42:	3701      	adds	r7, #1
 8009e44:	1064      	asrs	r4, r4, #1
 8009e46:	3608      	adds	r6, #8
 8009e48:	e76d      	b.n	8009d26 <_dtoa_r+0x3be>
 8009e4a:	2702      	movs	r7, #2
 8009e4c:	e770      	b.n	8009d30 <_dtoa_r+0x3c8>
 8009e4e:	46d8      	mov	r8, fp
 8009e50:	9c08      	ldr	r4, [sp, #32]
 8009e52:	e78f      	b.n	8009d74 <_dtoa_r+0x40c>
 8009e54:	9903      	ldr	r1, [sp, #12]
 8009e56:	4b29      	ldr	r3, [pc, #164]	; (8009efc <_dtoa_r+0x594>)
 8009e58:	4421      	add	r1, r4
 8009e5a:	9112      	str	r1, [sp, #72]	; 0x48
 8009e5c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009e5e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009e62:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8009e66:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009e6a:	2900      	cmp	r1, #0
 8009e6c:	d054      	beq.n	8009f18 <_dtoa_r+0x5b0>
 8009e6e:	2000      	movs	r0, #0
 8009e70:	4928      	ldr	r1, [pc, #160]	; (8009f14 <_dtoa_r+0x5ac>)
 8009e72:	f7f6 fc65 	bl	8000740 <__aeabi_ddiv>
 8009e76:	463b      	mov	r3, r7
 8009e78:	4632      	mov	r2, r6
 8009e7a:	f7f6 f97f 	bl	800017c <__aeabi_dsub>
 8009e7e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009e82:	9f03      	ldr	r7, [sp, #12]
 8009e84:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009e88:	f7f6 fde0 	bl	8000a4c <__aeabi_d2iz>
 8009e8c:	4604      	mov	r4, r0
 8009e8e:	f7f6 fac3 	bl	8000418 <__aeabi_i2d>
 8009e92:	4602      	mov	r2, r0
 8009e94:	460b      	mov	r3, r1
 8009e96:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009e9a:	f7f6 f96f 	bl	800017c <__aeabi_dsub>
 8009e9e:	4602      	mov	r2, r0
 8009ea0:	460b      	mov	r3, r1
 8009ea2:	3430      	adds	r4, #48	; 0x30
 8009ea4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009ea8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009eac:	f807 4b01 	strb.w	r4, [r7], #1
 8009eb0:	f7f6 fd8e 	bl	80009d0 <__aeabi_dcmplt>
 8009eb4:	2800      	cmp	r0, #0
 8009eb6:	d173      	bne.n	8009fa0 <_dtoa_r+0x638>
 8009eb8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009ebc:	2000      	movs	r0, #0
 8009ebe:	4911      	ldr	r1, [pc, #68]	; (8009f04 <_dtoa_r+0x59c>)
 8009ec0:	f7f6 f95c 	bl	800017c <__aeabi_dsub>
 8009ec4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009ec8:	f7f6 fd82 	bl	80009d0 <__aeabi_dcmplt>
 8009ecc:	2800      	cmp	r0, #0
 8009ece:	f040 80b6 	bne.w	800a03e <_dtoa_r+0x6d6>
 8009ed2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009ed4:	429f      	cmp	r7, r3
 8009ed6:	f43f af7a 	beq.w	8009dce <_dtoa_r+0x466>
 8009eda:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009ede:	2200      	movs	r2, #0
 8009ee0:	4b09      	ldr	r3, [pc, #36]	; (8009f08 <_dtoa_r+0x5a0>)
 8009ee2:	f7f6 fb03 	bl	80004ec <__aeabi_dmul>
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009eec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009ef0:	4b05      	ldr	r3, [pc, #20]	; (8009f08 <_dtoa_r+0x5a0>)
 8009ef2:	f7f6 fafb 	bl	80004ec <__aeabi_dmul>
 8009ef6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009efa:	e7c3      	b.n	8009e84 <_dtoa_r+0x51c>
 8009efc:	0800ced8 	.word	0x0800ced8
 8009f00:	0800ceb0 	.word	0x0800ceb0
 8009f04:	3ff00000 	.word	0x3ff00000
 8009f08:	40240000 	.word	0x40240000
 8009f0c:	401c0000 	.word	0x401c0000
 8009f10:	40140000 	.word	0x40140000
 8009f14:	3fe00000 	.word	0x3fe00000
 8009f18:	4630      	mov	r0, r6
 8009f1a:	4639      	mov	r1, r7
 8009f1c:	f7f6 fae6 	bl	80004ec <__aeabi_dmul>
 8009f20:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009f22:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009f26:	9c03      	ldr	r4, [sp, #12]
 8009f28:	9314      	str	r3, [sp, #80]	; 0x50
 8009f2a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009f2e:	f7f6 fd8d 	bl	8000a4c <__aeabi_d2iz>
 8009f32:	9015      	str	r0, [sp, #84]	; 0x54
 8009f34:	f7f6 fa70 	bl	8000418 <__aeabi_i2d>
 8009f38:	4602      	mov	r2, r0
 8009f3a:	460b      	mov	r3, r1
 8009f3c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009f40:	f7f6 f91c 	bl	800017c <__aeabi_dsub>
 8009f44:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009f46:	4606      	mov	r6, r0
 8009f48:	3330      	adds	r3, #48	; 0x30
 8009f4a:	f804 3b01 	strb.w	r3, [r4], #1
 8009f4e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009f50:	460f      	mov	r7, r1
 8009f52:	429c      	cmp	r4, r3
 8009f54:	f04f 0200 	mov.w	r2, #0
 8009f58:	d124      	bne.n	8009fa4 <_dtoa_r+0x63c>
 8009f5a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009f5e:	4baf      	ldr	r3, [pc, #700]	; (800a21c <_dtoa_r+0x8b4>)
 8009f60:	f7f6 f90e 	bl	8000180 <__adddf3>
 8009f64:	4602      	mov	r2, r0
 8009f66:	460b      	mov	r3, r1
 8009f68:	4630      	mov	r0, r6
 8009f6a:	4639      	mov	r1, r7
 8009f6c:	f7f6 fd4e 	bl	8000a0c <__aeabi_dcmpgt>
 8009f70:	2800      	cmp	r0, #0
 8009f72:	d163      	bne.n	800a03c <_dtoa_r+0x6d4>
 8009f74:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009f78:	2000      	movs	r0, #0
 8009f7a:	49a8      	ldr	r1, [pc, #672]	; (800a21c <_dtoa_r+0x8b4>)
 8009f7c:	f7f6 f8fe 	bl	800017c <__aeabi_dsub>
 8009f80:	4602      	mov	r2, r0
 8009f82:	460b      	mov	r3, r1
 8009f84:	4630      	mov	r0, r6
 8009f86:	4639      	mov	r1, r7
 8009f88:	f7f6 fd22 	bl	80009d0 <__aeabi_dcmplt>
 8009f8c:	2800      	cmp	r0, #0
 8009f8e:	f43f af1e 	beq.w	8009dce <_dtoa_r+0x466>
 8009f92:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8009f94:	1e7b      	subs	r3, r7, #1
 8009f96:	9314      	str	r3, [sp, #80]	; 0x50
 8009f98:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8009f9c:	2b30      	cmp	r3, #48	; 0x30
 8009f9e:	d0f8      	beq.n	8009f92 <_dtoa_r+0x62a>
 8009fa0:	46c3      	mov	fp, r8
 8009fa2:	e03b      	b.n	800a01c <_dtoa_r+0x6b4>
 8009fa4:	4b9e      	ldr	r3, [pc, #632]	; (800a220 <_dtoa_r+0x8b8>)
 8009fa6:	f7f6 faa1 	bl	80004ec <__aeabi_dmul>
 8009faa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009fae:	e7bc      	b.n	8009f2a <_dtoa_r+0x5c2>
 8009fb0:	9f03      	ldr	r7, [sp, #12]
 8009fb2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8009fb6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009fba:	4640      	mov	r0, r8
 8009fbc:	4649      	mov	r1, r9
 8009fbe:	f7f6 fbbf 	bl	8000740 <__aeabi_ddiv>
 8009fc2:	f7f6 fd43 	bl	8000a4c <__aeabi_d2iz>
 8009fc6:	4604      	mov	r4, r0
 8009fc8:	f7f6 fa26 	bl	8000418 <__aeabi_i2d>
 8009fcc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009fd0:	f7f6 fa8c 	bl	80004ec <__aeabi_dmul>
 8009fd4:	4602      	mov	r2, r0
 8009fd6:	460b      	mov	r3, r1
 8009fd8:	4640      	mov	r0, r8
 8009fda:	4649      	mov	r1, r9
 8009fdc:	f7f6 f8ce 	bl	800017c <__aeabi_dsub>
 8009fe0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8009fe4:	f807 6b01 	strb.w	r6, [r7], #1
 8009fe8:	9e03      	ldr	r6, [sp, #12]
 8009fea:	f8dd c020 	ldr.w	ip, [sp, #32]
 8009fee:	1bbe      	subs	r6, r7, r6
 8009ff0:	45b4      	cmp	ip, r6
 8009ff2:	4602      	mov	r2, r0
 8009ff4:	460b      	mov	r3, r1
 8009ff6:	d136      	bne.n	800a066 <_dtoa_r+0x6fe>
 8009ff8:	f7f6 f8c2 	bl	8000180 <__adddf3>
 8009ffc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a000:	4680      	mov	r8, r0
 800a002:	4689      	mov	r9, r1
 800a004:	f7f6 fd02 	bl	8000a0c <__aeabi_dcmpgt>
 800a008:	bb58      	cbnz	r0, 800a062 <_dtoa_r+0x6fa>
 800a00a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a00e:	4640      	mov	r0, r8
 800a010:	4649      	mov	r1, r9
 800a012:	f7f6 fcd3 	bl	80009bc <__aeabi_dcmpeq>
 800a016:	b108      	cbz	r0, 800a01c <_dtoa_r+0x6b4>
 800a018:	07e3      	lsls	r3, r4, #31
 800a01a:	d422      	bmi.n	800a062 <_dtoa_r+0x6fa>
 800a01c:	4651      	mov	r1, sl
 800a01e:	4628      	mov	r0, r5
 800a020:	f000 ff2e 	bl	800ae80 <_Bfree>
 800a024:	2300      	movs	r3, #0
 800a026:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a028:	703b      	strb	r3, [r7, #0]
 800a02a:	f10b 0301 	add.w	r3, fp, #1
 800a02e:	6013      	str	r3, [r2, #0]
 800a030:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a032:	2b00      	cmp	r3, #0
 800a034:	f43f ace6 	beq.w	8009a04 <_dtoa_r+0x9c>
 800a038:	601f      	str	r7, [r3, #0]
 800a03a:	e4e3      	b.n	8009a04 <_dtoa_r+0x9c>
 800a03c:	4627      	mov	r7, r4
 800a03e:	463b      	mov	r3, r7
 800a040:	461f      	mov	r7, r3
 800a042:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a046:	2a39      	cmp	r2, #57	; 0x39
 800a048:	d107      	bne.n	800a05a <_dtoa_r+0x6f2>
 800a04a:	9a03      	ldr	r2, [sp, #12]
 800a04c:	429a      	cmp	r2, r3
 800a04e:	d1f7      	bne.n	800a040 <_dtoa_r+0x6d8>
 800a050:	2230      	movs	r2, #48	; 0x30
 800a052:	9903      	ldr	r1, [sp, #12]
 800a054:	f108 0801 	add.w	r8, r8, #1
 800a058:	700a      	strb	r2, [r1, #0]
 800a05a:	781a      	ldrb	r2, [r3, #0]
 800a05c:	3201      	adds	r2, #1
 800a05e:	701a      	strb	r2, [r3, #0]
 800a060:	e79e      	b.n	8009fa0 <_dtoa_r+0x638>
 800a062:	46d8      	mov	r8, fp
 800a064:	e7eb      	b.n	800a03e <_dtoa_r+0x6d6>
 800a066:	2200      	movs	r2, #0
 800a068:	4b6d      	ldr	r3, [pc, #436]	; (800a220 <_dtoa_r+0x8b8>)
 800a06a:	f7f6 fa3f 	bl	80004ec <__aeabi_dmul>
 800a06e:	2200      	movs	r2, #0
 800a070:	2300      	movs	r3, #0
 800a072:	4680      	mov	r8, r0
 800a074:	4689      	mov	r9, r1
 800a076:	f7f6 fca1 	bl	80009bc <__aeabi_dcmpeq>
 800a07a:	2800      	cmp	r0, #0
 800a07c:	d09b      	beq.n	8009fb6 <_dtoa_r+0x64e>
 800a07e:	e7cd      	b.n	800a01c <_dtoa_r+0x6b4>
 800a080:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a082:	2a00      	cmp	r2, #0
 800a084:	f000 80c4 	beq.w	800a210 <_dtoa_r+0x8a8>
 800a088:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a08a:	2a01      	cmp	r2, #1
 800a08c:	f300 80a8 	bgt.w	800a1e0 <_dtoa_r+0x878>
 800a090:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a092:	2a00      	cmp	r2, #0
 800a094:	f000 80a0 	beq.w	800a1d8 <_dtoa_r+0x870>
 800a098:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a09c:	464f      	mov	r7, r9
 800a09e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a0a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a0a2:	2101      	movs	r1, #1
 800a0a4:	441a      	add	r2, r3
 800a0a6:	4628      	mov	r0, r5
 800a0a8:	4499      	add	r9, r3
 800a0aa:	9209      	str	r2, [sp, #36]	; 0x24
 800a0ac:	f000 ffe8 	bl	800b080 <__i2b>
 800a0b0:	4606      	mov	r6, r0
 800a0b2:	b15f      	cbz	r7, 800a0cc <_dtoa_r+0x764>
 800a0b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	dd08      	ble.n	800a0cc <_dtoa_r+0x764>
 800a0ba:	42bb      	cmp	r3, r7
 800a0bc:	bfa8      	it	ge
 800a0be:	463b      	movge	r3, r7
 800a0c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a0c2:	eba9 0903 	sub.w	r9, r9, r3
 800a0c6:	1aff      	subs	r7, r7, r3
 800a0c8:	1ad3      	subs	r3, r2, r3
 800a0ca:	9309      	str	r3, [sp, #36]	; 0x24
 800a0cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0ce:	b1f3      	cbz	r3, 800a10e <_dtoa_r+0x7a6>
 800a0d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	f000 80a0 	beq.w	800a218 <_dtoa_r+0x8b0>
 800a0d8:	2c00      	cmp	r4, #0
 800a0da:	dd10      	ble.n	800a0fe <_dtoa_r+0x796>
 800a0dc:	4631      	mov	r1, r6
 800a0de:	4622      	mov	r2, r4
 800a0e0:	4628      	mov	r0, r5
 800a0e2:	f001 f88b 	bl	800b1fc <__pow5mult>
 800a0e6:	4652      	mov	r2, sl
 800a0e8:	4601      	mov	r1, r0
 800a0ea:	4606      	mov	r6, r0
 800a0ec:	4628      	mov	r0, r5
 800a0ee:	f000 ffdd 	bl	800b0ac <__multiply>
 800a0f2:	4680      	mov	r8, r0
 800a0f4:	4651      	mov	r1, sl
 800a0f6:	4628      	mov	r0, r5
 800a0f8:	f000 fec2 	bl	800ae80 <_Bfree>
 800a0fc:	46c2      	mov	sl, r8
 800a0fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a100:	1b1a      	subs	r2, r3, r4
 800a102:	d004      	beq.n	800a10e <_dtoa_r+0x7a6>
 800a104:	4651      	mov	r1, sl
 800a106:	4628      	mov	r0, r5
 800a108:	f001 f878 	bl	800b1fc <__pow5mult>
 800a10c:	4682      	mov	sl, r0
 800a10e:	2101      	movs	r1, #1
 800a110:	4628      	mov	r0, r5
 800a112:	f000 ffb5 	bl	800b080 <__i2b>
 800a116:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a118:	4604      	mov	r4, r0
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	f340 8082 	ble.w	800a224 <_dtoa_r+0x8bc>
 800a120:	461a      	mov	r2, r3
 800a122:	4601      	mov	r1, r0
 800a124:	4628      	mov	r0, r5
 800a126:	f001 f869 	bl	800b1fc <__pow5mult>
 800a12a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a12c:	4604      	mov	r4, r0
 800a12e:	2b01      	cmp	r3, #1
 800a130:	dd7b      	ble.n	800a22a <_dtoa_r+0x8c2>
 800a132:	f04f 0800 	mov.w	r8, #0
 800a136:	6923      	ldr	r3, [r4, #16]
 800a138:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a13c:	6918      	ldr	r0, [r3, #16]
 800a13e:	f000 ff51 	bl	800afe4 <__hi0bits>
 800a142:	f1c0 0020 	rsb	r0, r0, #32
 800a146:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a148:	4418      	add	r0, r3
 800a14a:	f010 001f 	ands.w	r0, r0, #31
 800a14e:	f000 8092 	beq.w	800a276 <_dtoa_r+0x90e>
 800a152:	f1c0 0320 	rsb	r3, r0, #32
 800a156:	2b04      	cmp	r3, #4
 800a158:	f340 8085 	ble.w	800a266 <_dtoa_r+0x8fe>
 800a15c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a15e:	f1c0 001c 	rsb	r0, r0, #28
 800a162:	4403      	add	r3, r0
 800a164:	4481      	add	r9, r0
 800a166:	4407      	add	r7, r0
 800a168:	9309      	str	r3, [sp, #36]	; 0x24
 800a16a:	f1b9 0f00 	cmp.w	r9, #0
 800a16e:	dd05      	ble.n	800a17c <_dtoa_r+0x814>
 800a170:	4651      	mov	r1, sl
 800a172:	464a      	mov	r2, r9
 800a174:	4628      	mov	r0, r5
 800a176:	f001 f89b 	bl	800b2b0 <__lshift>
 800a17a:	4682      	mov	sl, r0
 800a17c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a17e:	2b00      	cmp	r3, #0
 800a180:	dd05      	ble.n	800a18e <_dtoa_r+0x826>
 800a182:	4621      	mov	r1, r4
 800a184:	461a      	mov	r2, r3
 800a186:	4628      	mov	r0, r5
 800a188:	f001 f892 	bl	800b2b0 <__lshift>
 800a18c:	4604      	mov	r4, r0
 800a18e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a190:	2b00      	cmp	r3, #0
 800a192:	d072      	beq.n	800a27a <_dtoa_r+0x912>
 800a194:	4621      	mov	r1, r4
 800a196:	4650      	mov	r0, sl
 800a198:	f001 f8f6 	bl	800b388 <__mcmp>
 800a19c:	2800      	cmp	r0, #0
 800a19e:	da6c      	bge.n	800a27a <_dtoa_r+0x912>
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	4651      	mov	r1, sl
 800a1a4:	220a      	movs	r2, #10
 800a1a6:	4628      	mov	r0, r5
 800a1a8:	f000 fe8c 	bl	800aec4 <__multadd>
 800a1ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a1ae:	4682      	mov	sl, r0
 800a1b0:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	f000 81ac 	beq.w	800a512 <_dtoa_r+0xbaa>
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	4631      	mov	r1, r6
 800a1be:	220a      	movs	r2, #10
 800a1c0:	4628      	mov	r0, r5
 800a1c2:	f000 fe7f 	bl	800aec4 <__multadd>
 800a1c6:	9b06      	ldr	r3, [sp, #24]
 800a1c8:	4606      	mov	r6, r0
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	f300 8093 	bgt.w	800a2f6 <_dtoa_r+0x98e>
 800a1d0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a1d2:	2b02      	cmp	r3, #2
 800a1d4:	dc59      	bgt.n	800a28a <_dtoa_r+0x922>
 800a1d6:	e08e      	b.n	800a2f6 <_dtoa_r+0x98e>
 800a1d8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a1da:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a1de:	e75d      	b.n	800a09c <_dtoa_r+0x734>
 800a1e0:	9b08      	ldr	r3, [sp, #32]
 800a1e2:	1e5c      	subs	r4, r3, #1
 800a1e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a1e6:	42a3      	cmp	r3, r4
 800a1e8:	bfbf      	itttt	lt
 800a1ea:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a1ec:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800a1ee:	1ae3      	sublt	r3, r4, r3
 800a1f0:	18d2      	addlt	r2, r2, r3
 800a1f2:	bfa8      	it	ge
 800a1f4:	1b1c      	subge	r4, r3, r4
 800a1f6:	9b08      	ldr	r3, [sp, #32]
 800a1f8:	bfbe      	ittt	lt
 800a1fa:	940a      	strlt	r4, [sp, #40]	; 0x28
 800a1fc:	920e      	strlt	r2, [sp, #56]	; 0x38
 800a1fe:	2400      	movlt	r4, #0
 800a200:	2b00      	cmp	r3, #0
 800a202:	bfb5      	itete	lt
 800a204:	eba9 0703 	sublt.w	r7, r9, r3
 800a208:	464f      	movge	r7, r9
 800a20a:	2300      	movlt	r3, #0
 800a20c:	9b08      	ldrge	r3, [sp, #32]
 800a20e:	e747      	b.n	800a0a0 <_dtoa_r+0x738>
 800a210:	464f      	mov	r7, r9
 800a212:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a214:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800a216:	e74c      	b.n	800a0b2 <_dtoa_r+0x74a>
 800a218:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a21a:	e773      	b.n	800a104 <_dtoa_r+0x79c>
 800a21c:	3fe00000 	.word	0x3fe00000
 800a220:	40240000 	.word	0x40240000
 800a224:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a226:	2b01      	cmp	r3, #1
 800a228:	dc18      	bgt.n	800a25c <_dtoa_r+0x8f4>
 800a22a:	9b04      	ldr	r3, [sp, #16]
 800a22c:	b9b3      	cbnz	r3, 800a25c <_dtoa_r+0x8f4>
 800a22e:	9b05      	ldr	r3, [sp, #20]
 800a230:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a234:	b993      	cbnz	r3, 800a25c <_dtoa_r+0x8f4>
 800a236:	9b05      	ldr	r3, [sp, #20]
 800a238:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a23c:	0d1b      	lsrs	r3, r3, #20
 800a23e:	051b      	lsls	r3, r3, #20
 800a240:	b17b      	cbz	r3, 800a262 <_dtoa_r+0x8fa>
 800a242:	f04f 0801 	mov.w	r8, #1
 800a246:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a248:	f109 0901 	add.w	r9, r9, #1
 800a24c:	3301      	adds	r3, #1
 800a24e:	9309      	str	r3, [sp, #36]	; 0x24
 800a250:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a252:	2b00      	cmp	r3, #0
 800a254:	f47f af6f 	bne.w	800a136 <_dtoa_r+0x7ce>
 800a258:	2001      	movs	r0, #1
 800a25a:	e774      	b.n	800a146 <_dtoa_r+0x7de>
 800a25c:	f04f 0800 	mov.w	r8, #0
 800a260:	e7f6      	b.n	800a250 <_dtoa_r+0x8e8>
 800a262:	4698      	mov	r8, r3
 800a264:	e7f4      	b.n	800a250 <_dtoa_r+0x8e8>
 800a266:	d080      	beq.n	800a16a <_dtoa_r+0x802>
 800a268:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a26a:	331c      	adds	r3, #28
 800a26c:	441a      	add	r2, r3
 800a26e:	4499      	add	r9, r3
 800a270:	441f      	add	r7, r3
 800a272:	9209      	str	r2, [sp, #36]	; 0x24
 800a274:	e779      	b.n	800a16a <_dtoa_r+0x802>
 800a276:	4603      	mov	r3, r0
 800a278:	e7f6      	b.n	800a268 <_dtoa_r+0x900>
 800a27a:	9b08      	ldr	r3, [sp, #32]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	dc34      	bgt.n	800a2ea <_dtoa_r+0x982>
 800a280:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a282:	2b02      	cmp	r3, #2
 800a284:	dd31      	ble.n	800a2ea <_dtoa_r+0x982>
 800a286:	9b08      	ldr	r3, [sp, #32]
 800a288:	9306      	str	r3, [sp, #24]
 800a28a:	9b06      	ldr	r3, [sp, #24]
 800a28c:	b963      	cbnz	r3, 800a2a8 <_dtoa_r+0x940>
 800a28e:	4621      	mov	r1, r4
 800a290:	2205      	movs	r2, #5
 800a292:	4628      	mov	r0, r5
 800a294:	f000 fe16 	bl	800aec4 <__multadd>
 800a298:	4601      	mov	r1, r0
 800a29a:	4604      	mov	r4, r0
 800a29c:	4650      	mov	r0, sl
 800a29e:	f001 f873 	bl	800b388 <__mcmp>
 800a2a2:	2800      	cmp	r0, #0
 800a2a4:	f73f adbf 	bgt.w	8009e26 <_dtoa_r+0x4be>
 800a2a8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a2aa:	9f03      	ldr	r7, [sp, #12]
 800a2ac:	ea6f 0b03 	mvn.w	fp, r3
 800a2b0:	f04f 0800 	mov.w	r8, #0
 800a2b4:	4621      	mov	r1, r4
 800a2b6:	4628      	mov	r0, r5
 800a2b8:	f000 fde2 	bl	800ae80 <_Bfree>
 800a2bc:	2e00      	cmp	r6, #0
 800a2be:	f43f aead 	beq.w	800a01c <_dtoa_r+0x6b4>
 800a2c2:	f1b8 0f00 	cmp.w	r8, #0
 800a2c6:	d005      	beq.n	800a2d4 <_dtoa_r+0x96c>
 800a2c8:	45b0      	cmp	r8, r6
 800a2ca:	d003      	beq.n	800a2d4 <_dtoa_r+0x96c>
 800a2cc:	4641      	mov	r1, r8
 800a2ce:	4628      	mov	r0, r5
 800a2d0:	f000 fdd6 	bl	800ae80 <_Bfree>
 800a2d4:	4631      	mov	r1, r6
 800a2d6:	4628      	mov	r0, r5
 800a2d8:	f000 fdd2 	bl	800ae80 <_Bfree>
 800a2dc:	e69e      	b.n	800a01c <_dtoa_r+0x6b4>
 800a2de:	2400      	movs	r4, #0
 800a2e0:	4626      	mov	r6, r4
 800a2e2:	e7e1      	b.n	800a2a8 <_dtoa_r+0x940>
 800a2e4:	46c3      	mov	fp, r8
 800a2e6:	4626      	mov	r6, r4
 800a2e8:	e59d      	b.n	8009e26 <_dtoa_r+0x4be>
 800a2ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	f000 80c8 	beq.w	800a482 <_dtoa_r+0xb1a>
 800a2f2:	9b08      	ldr	r3, [sp, #32]
 800a2f4:	9306      	str	r3, [sp, #24]
 800a2f6:	2f00      	cmp	r7, #0
 800a2f8:	dd05      	ble.n	800a306 <_dtoa_r+0x99e>
 800a2fa:	4631      	mov	r1, r6
 800a2fc:	463a      	mov	r2, r7
 800a2fe:	4628      	mov	r0, r5
 800a300:	f000 ffd6 	bl	800b2b0 <__lshift>
 800a304:	4606      	mov	r6, r0
 800a306:	f1b8 0f00 	cmp.w	r8, #0
 800a30a:	d05b      	beq.n	800a3c4 <_dtoa_r+0xa5c>
 800a30c:	4628      	mov	r0, r5
 800a30e:	6871      	ldr	r1, [r6, #4]
 800a310:	f000 fd76 	bl	800ae00 <_Balloc>
 800a314:	4607      	mov	r7, r0
 800a316:	b928      	cbnz	r0, 800a324 <_dtoa_r+0x9bc>
 800a318:	4602      	mov	r2, r0
 800a31a:	f240 21ef 	movw	r1, #751	; 0x2ef
 800a31e:	4b81      	ldr	r3, [pc, #516]	; (800a524 <_dtoa_r+0xbbc>)
 800a320:	f7ff bb36 	b.w	8009990 <_dtoa_r+0x28>
 800a324:	6932      	ldr	r2, [r6, #16]
 800a326:	f106 010c 	add.w	r1, r6, #12
 800a32a:	3202      	adds	r2, #2
 800a32c:	0092      	lsls	r2, r2, #2
 800a32e:	300c      	adds	r0, #12
 800a330:	f7ff fa75 	bl	800981e <memcpy>
 800a334:	2201      	movs	r2, #1
 800a336:	4639      	mov	r1, r7
 800a338:	4628      	mov	r0, r5
 800a33a:	f000 ffb9 	bl	800b2b0 <__lshift>
 800a33e:	46b0      	mov	r8, r6
 800a340:	4606      	mov	r6, r0
 800a342:	9b03      	ldr	r3, [sp, #12]
 800a344:	9a03      	ldr	r2, [sp, #12]
 800a346:	3301      	adds	r3, #1
 800a348:	9308      	str	r3, [sp, #32]
 800a34a:	9b06      	ldr	r3, [sp, #24]
 800a34c:	4413      	add	r3, r2
 800a34e:	930b      	str	r3, [sp, #44]	; 0x2c
 800a350:	9b04      	ldr	r3, [sp, #16]
 800a352:	f003 0301 	and.w	r3, r3, #1
 800a356:	930a      	str	r3, [sp, #40]	; 0x28
 800a358:	9b08      	ldr	r3, [sp, #32]
 800a35a:	4621      	mov	r1, r4
 800a35c:	3b01      	subs	r3, #1
 800a35e:	4650      	mov	r0, sl
 800a360:	9304      	str	r3, [sp, #16]
 800a362:	f7ff fa75 	bl	8009850 <quorem>
 800a366:	4641      	mov	r1, r8
 800a368:	9006      	str	r0, [sp, #24]
 800a36a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a36e:	4650      	mov	r0, sl
 800a370:	f001 f80a 	bl	800b388 <__mcmp>
 800a374:	4632      	mov	r2, r6
 800a376:	9009      	str	r0, [sp, #36]	; 0x24
 800a378:	4621      	mov	r1, r4
 800a37a:	4628      	mov	r0, r5
 800a37c:	f001 f820 	bl	800b3c0 <__mdiff>
 800a380:	68c2      	ldr	r2, [r0, #12]
 800a382:	4607      	mov	r7, r0
 800a384:	bb02      	cbnz	r2, 800a3c8 <_dtoa_r+0xa60>
 800a386:	4601      	mov	r1, r0
 800a388:	4650      	mov	r0, sl
 800a38a:	f000 fffd 	bl	800b388 <__mcmp>
 800a38e:	4602      	mov	r2, r0
 800a390:	4639      	mov	r1, r7
 800a392:	4628      	mov	r0, r5
 800a394:	920c      	str	r2, [sp, #48]	; 0x30
 800a396:	f000 fd73 	bl	800ae80 <_Bfree>
 800a39a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a39c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a39e:	9f08      	ldr	r7, [sp, #32]
 800a3a0:	ea43 0102 	orr.w	r1, r3, r2
 800a3a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3a6:	4319      	orrs	r1, r3
 800a3a8:	d110      	bne.n	800a3cc <_dtoa_r+0xa64>
 800a3aa:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a3ae:	d029      	beq.n	800a404 <_dtoa_r+0xa9c>
 800a3b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	dd02      	ble.n	800a3bc <_dtoa_r+0xa54>
 800a3b6:	9b06      	ldr	r3, [sp, #24]
 800a3b8:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800a3bc:	9b04      	ldr	r3, [sp, #16]
 800a3be:	f883 9000 	strb.w	r9, [r3]
 800a3c2:	e777      	b.n	800a2b4 <_dtoa_r+0x94c>
 800a3c4:	4630      	mov	r0, r6
 800a3c6:	e7ba      	b.n	800a33e <_dtoa_r+0x9d6>
 800a3c8:	2201      	movs	r2, #1
 800a3ca:	e7e1      	b.n	800a390 <_dtoa_r+0xa28>
 800a3cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	db04      	blt.n	800a3dc <_dtoa_r+0xa74>
 800a3d2:	9922      	ldr	r1, [sp, #136]	; 0x88
 800a3d4:	430b      	orrs	r3, r1
 800a3d6:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a3d8:	430b      	orrs	r3, r1
 800a3da:	d120      	bne.n	800a41e <_dtoa_r+0xab6>
 800a3dc:	2a00      	cmp	r2, #0
 800a3de:	dded      	ble.n	800a3bc <_dtoa_r+0xa54>
 800a3e0:	4651      	mov	r1, sl
 800a3e2:	2201      	movs	r2, #1
 800a3e4:	4628      	mov	r0, r5
 800a3e6:	f000 ff63 	bl	800b2b0 <__lshift>
 800a3ea:	4621      	mov	r1, r4
 800a3ec:	4682      	mov	sl, r0
 800a3ee:	f000 ffcb 	bl	800b388 <__mcmp>
 800a3f2:	2800      	cmp	r0, #0
 800a3f4:	dc03      	bgt.n	800a3fe <_dtoa_r+0xa96>
 800a3f6:	d1e1      	bne.n	800a3bc <_dtoa_r+0xa54>
 800a3f8:	f019 0f01 	tst.w	r9, #1
 800a3fc:	d0de      	beq.n	800a3bc <_dtoa_r+0xa54>
 800a3fe:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a402:	d1d8      	bne.n	800a3b6 <_dtoa_r+0xa4e>
 800a404:	2339      	movs	r3, #57	; 0x39
 800a406:	9a04      	ldr	r2, [sp, #16]
 800a408:	7013      	strb	r3, [r2, #0]
 800a40a:	463b      	mov	r3, r7
 800a40c:	461f      	mov	r7, r3
 800a40e:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800a412:	3b01      	subs	r3, #1
 800a414:	2a39      	cmp	r2, #57	; 0x39
 800a416:	d06b      	beq.n	800a4f0 <_dtoa_r+0xb88>
 800a418:	3201      	adds	r2, #1
 800a41a:	701a      	strb	r2, [r3, #0]
 800a41c:	e74a      	b.n	800a2b4 <_dtoa_r+0x94c>
 800a41e:	2a00      	cmp	r2, #0
 800a420:	dd07      	ble.n	800a432 <_dtoa_r+0xaca>
 800a422:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a426:	d0ed      	beq.n	800a404 <_dtoa_r+0xa9c>
 800a428:	9a04      	ldr	r2, [sp, #16]
 800a42a:	f109 0301 	add.w	r3, r9, #1
 800a42e:	7013      	strb	r3, [r2, #0]
 800a430:	e740      	b.n	800a2b4 <_dtoa_r+0x94c>
 800a432:	9b08      	ldr	r3, [sp, #32]
 800a434:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a436:	f803 9c01 	strb.w	r9, [r3, #-1]
 800a43a:	4293      	cmp	r3, r2
 800a43c:	d042      	beq.n	800a4c4 <_dtoa_r+0xb5c>
 800a43e:	4651      	mov	r1, sl
 800a440:	2300      	movs	r3, #0
 800a442:	220a      	movs	r2, #10
 800a444:	4628      	mov	r0, r5
 800a446:	f000 fd3d 	bl	800aec4 <__multadd>
 800a44a:	45b0      	cmp	r8, r6
 800a44c:	4682      	mov	sl, r0
 800a44e:	f04f 0300 	mov.w	r3, #0
 800a452:	f04f 020a 	mov.w	r2, #10
 800a456:	4641      	mov	r1, r8
 800a458:	4628      	mov	r0, r5
 800a45a:	d107      	bne.n	800a46c <_dtoa_r+0xb04>
 800a45c:	f000 fd32 	bl	800aec4 <__multadd>
 800a460:	4680      	mov	r8, r0
 800a462:	4606      	mov	r6, r0
 800a464:	9b08      	ldr	r3, [sp, #32]
 800a466:	3301      	adds	r3, #1
 800a468:	9308      	str	r3, [sp, #32]
 800a46a:	e775      	b.n	800a358 <_dtoa_r+0x9f0>
 800a46c:	f000 fd2a 	bl	800aec4 <__multadd>
 800a470:	4631      	mov	r1, r6
 800a472:	4680      	mov	r8, r0
 800a474:	2300      	movs	r3, #0
 800a476:	220a      	movs	r2, #10
 800a478:	4628      	mov	r0, r5
 800a47a:	f000 fd23 	bl	800aec4 <__multadd>
 800a47e:	4606      	mov	r6, r0
 800a480:	e7f0      	b.n	800a464 <_dtoa_r+0xafc>
 800a482:	9b08      	ldr	r3, [sp, #32]
 800a484:	9306      	str	r3, [sp, #24]
 800a486:	9f03      	ldr	r7, [sp, #12]
 800a488:	4621      	mov	r1, r4
 800a48a:	4650      	mov	r0, sl
 800a48c:	f7ff f9e0 	bl	8009850 <quorem>
 800a490:	9b03      	ldr	r3, [sp, #12]
 800a492:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a496:	f807 9b01 	strb.w	r9, [r7], #1
 800a49a:	1afa      	subs	r2, r7, r3
 800a49c:	9b06      	ldr	r3, [sp, #24]
 800a49e:	4293      	cmp	r3, r2
 800a4a0:	dd07      	ble.n	800a4b2 <_dtoa_r+0xb4a>
 800a4a2:	4651      	mov	r1, sl
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	220a      	movs	r2, #10
 800a4a8:	4628      	mov	r0, r5
 800a4aa:	f000 fd0b 	bl	800aec4 <__multadd>
 800a4ae:	4682      	mov	sl, r0
 800a4b0:	e7ea      	b.n	800a488 <_dtoa_r+0xb20>
 800a4b2:	9b06      	ldr	r3, [sp, #24]
 800a4b4:	f04f 0800 	mov.w	r8, #0
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	bfcc      	ite	gt
 800a4bc:	461f      	movgt	r7, r3
 800a4be:	2701      	movle	r7, #1
 800a4c0:	9b03      	ldr	r3, [sp, #12]
 800a4c2:	441f      	add	r7, r3
 800a4c4:	4651      	mov	r1, sl
 800a4c6:	2201      	movs	r2, #1
 800a4c8:	4628      	mov	r0, r5
 800a4ca:	f000 fef1 	bl	800b2b0 <__lshift>
 800a4ce:	4621      	mov	r1, r4
 800a4d0:	4682      	mov	sl, r0
 800a4d2:	f000 ff59 	bl	800b388 <__mcmp>
 800a4d6:	2800      	cmp	r0, #0
 800a4d8:	dc97      	bgt.n	800a40a <_dtoa_r+0xaa2>
 800a4da:	d102      	bne.n	800a4e2 <_dtoa_r+0xb7a>
 800a4dc:	f019 0f01 	tst.w	r9, #1
 800a4e0:	d193      	bne.n	800a40a <_dtoa_r+0xaa2>
 800a4e2:	463b      	mov	r3, r7
 800a4e4:	461f      	mov	r7, r3
 800a4e6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a4ea:	2a30      	cmp	r2, #48	; 0x30
 800a4ec:	d0fa      	beq.n	800a4e4 <_dtoa_r+0xb7c>
 800a4ee:	e6e1      	b.n	800a2b4 <_dtoa_r+0x94c>
 800a4f0:	9a03      	ldr	r2, [sp, #12]
 800a4f2:	429a      	cmp	r2, r3
 800a4f4:	d18a      	bne.n	800a40c <_dtoa_r+0xaa4>
 800a4f6:	2331      	movs	r3, #49	; 0x31
 800a4f8:	f10b 0b01 	add.w	fp, fp, #1
 800a4fc:	e797      	b.n	800a42e <_dtoa_r+0xac6>
 800a4fe:	4b0a      	ldr	r3, [pc, #40]	; (800a528 <_dtoa_r+0xbc0>)
 800a500:	f7ff ba9f 	b.w	8009a42 <_dtoa_r+0xda>
 800a504:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a506:	2b00      	cmp	r3, #0
 800a508:	f47f aa77 	bne.w	80099fa <_dtoa_r+0x92>
 800a50c:	4b07      	ldr	r3, [pc, #28]	; (800a52c <_dtoa_r+0xbc4>)
 800a50e:	f7ff ba98 	b.w	8009a42 <_dtoa_r+0xda>
 800a512:	9b06      	ldr	r3, [sp, #24]
 800a514:	2b00      	cmp	r3, #0
 800a516:	dcb6      	bgt.n	800a486 <_dtoa_r+0xb1e>
 800a518:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a51a:	2b02      	cmp	r3, #2
 800a51c:	f73f aeb5 	bgt.w	800a28a <_dtoa_r+0x922>
 800a520:	e7b1      	b.n	800a486 <_dtoa_r+0xb1e>
 800a522:	bf00      	nop
 800a524:	0800cde6 	.word	0x0800cde6
 800a528:	0800cd39 	.word	0x0800cd39
 800a52c:	0800cd6a 	.word	0x0800cd6a

0800a530 <_free_r>:
 800a530:	b538      	push	{r3, r4, r5, lr}
 800a532:	4605      	mov	r5, r0
 800a534:	2900      	cmp	r1, #0
 800a536:	d040      	beq.n	800a5ba <_free_r+0x8a>
 800a538:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a53c:	1f0c      	subs	r4, r1, #4
 800a53e:	2b00      	cmp	r3, #0
 800a540:	bfb8      	it	lt
 800a542:	18e4      	addlt	r4, r4, r3
 800a544:	f000 fc50 	bl	800ade8 <__malloc_lock>
 800a548:	4a1c      	ldr	r2, [pc, #112]	; (800a5bc <_free_r+0x8c>)
 800a54a:	6813      	ldr	r3, [r2, #0]
 800a54c:	b933      	cbnz	r3, 800a55c <_free_r+0x2c>
 800a54e:	6063      	str	r3, [r4, #4]
 800a550:	6014      	str	r4, [r2, #0]
 800a552:	4628      	mov	r0, r5
 800a554:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a558:	f000 bc4c 	b.w	800adf4 <__malloc_unlock>
 800a55c:	42a3      	cmp	r3, r4
 800a55e:	d908      	bls.n	800a572 <_free_r+0x42>
 800a560:	6820      	ldr	r0, [r4, #0]
 800a562:	1821      	adds	r1, r4, r0
 800a564:	428b      	cmp	r3, r1
 800a566:	bf01      	itttt	eq
 800a568:	6819      	ldreq	r1, [r3, #0]
 800a56a:	685b      	ldreq	r3, [r3, #4]
 800a56c:	1809      	addeq	r1, r1, r0
 800a56e:	6021      	streq	r1, [r4, #0]
 800a570:	e7ed      	b.n	800a54e <_free_r+0x1e>
 800a572:	461a      	mov	r2, r3
 800a574:	685b      	ldr	r3, [r3, #4]
 800a576:	b10b      	cbz	r3, 800a57c <_free_r+0x4c>
 800a578:	42a3      	cmp	r3, r4
 800a57a:	d9fa      	bls.n	800a572 <_free_r+0x42>
 800a57c:	6811      	ldr	r1, [r2, #0]
 800a57e:	1850      	adds	r0, r2, r1
 800a580:	42a0      	cmp	r0, r4
 800a582:	d10b      	bne.n	800a59c <_free_r+0x6c>
 800a584:	6820      	ldr	r0, [r4, #0]
 800a586:	4401      	add	r1, r0
 800a588:	1850      	adds	r0, r2, r1
 800a58a:	4283      	cmp	r3, r0
 800a58c:	6011      	str	r1, [r2, #0]
 800a58e:	d1e0      	bne.n	800a552 <_free_r+0x22>
 800a590:	6818      	ldr	r0, [r3, #0]
 800a592:	685b      	ldr	r3, [r3, #4]
 800a594:	4408      	add	r0, r1
 800a596:	6010      	str	r0, [r2, #0]
 800a598:	6053      	str	r3, [r2, #4]
 800a59a:	e7da      	b.n	800a552 <_free_r+0x22>
 800a59c:	d902      	bls.n	800a5a4 <_free_r+0x74>
 800a59e:	230c      	movs	r3, #12
 800a5a0:	602b      	str	r3, [r5, #0]
 800a5a2:	e7d6      	b.n	800a552 <_free_r+0x22>
 800a5a4:	6820      	ldr	r0, [r4, #0]
 800a5a6:	1821      	adds	r1, r4, r0
 800a5a8:	428b      	cmp	r3, r1
 800a5aa:	bf01      	itttt	eq
 800a5ac:	6819      	ldreq	r1, [r3, #0]
 800a5ae:	685b      	ldreq	r3, [r3, #4]
 800a5b0:	1809      	addeq	r1, r1, r0
 800a5b2:	6021      	streq	r1, [r4, #0]
 800a5b4:	6063      	str	r3, [r4, #4]
 800a5b6:	6054      	str	r4, [r2, #4]
 800a5b8:	e7cb      	b.n	800a552 <_free_r+0x22>
 800a5ba:	bd38      	pop	{r3, r4, r5, pc}
 800a5bc:	20002970 	.word	0x20002970

0800a5c0 <rshift>:
 800a5c0:	6903      	ldr	r3, [r0, #16]
 800a5c2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a5c6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a5ca:	f100 0414 	add.w	r4, r0, #20
 800a5ce:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a5d2:	dd46      	ble.n	800a662 <rshift+0xa2>
 800a5d4:	f011 011f 	ands.w	r1, r1, #31
 800a5d8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a5dc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a5e0:	d10c      	bne.n	800a5fc <rshift+0x3c>
 800a5e2:	4629      	mov	r1, r5
 800a5e4:	f100 0710 	add.w	r7, r0, #16
 800a5e8:	42b1      	cmp	r1, r6
 800a5ea:	d335      	bcc.n	800a658 <rshift+0x98>
 800a5ec:	1a9b      	subs	r3, r3, r2
 800a5ee:	009b      	lsls	r3, r3, #2
 800a5f0:	1eea      	subs	r2, r5, #3
 800a5f2:	4296      	cmp	r6, r2
 800a5f4:	bf38      	it	cc
 800a5f6:	2300      	movcc	r3, #0
 800a5f8:	4423      	add	r3, r4
 800a5fa:	e015      	b.n	800a628 <rshift+0x68>
 800a5fc:	46a1      	mov	r9, r4
 800a5fe:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a602:	f1c1 0820 	rsb	r8, r1, #32
 800a606:	40cf      	lsrs	r7, r1
 800a608:	f105 0e04 	add.w	lr, r5, #4
 800a60c:	4576      	cmp	r6, lr
 800a60e:	46f4      	mov	ip, lr
 800a610:	d816      	bhi.n	800a640 <rshift+0x80>
 800a612:	1a9a      	subs	r2, r3, r2
 800a614:	0092      	lsls	r2, r2, #2
 800a616:	3a04      	subs	r2, #4
 800a618:	3501      	adds	r5, #1
 800a61a:	42ae      	cmp	r6, r5
 800a61c:	bf38      	it	cc
 800a61e:	2200      	movcc	r2, #0
 800a620:	18a3      	adds	r3, r4, r2
 800a622:	50a7      	str	r7, [r4, r2]
 800a624:	b107      	cbz	r7, 800a628 <rshift+0x68>
 800a626:	3304      	adds	r3, #4
 800a628:	42a3      	cmp	r3, r4
 800a62a:	eba3 0204 	sub.w	r2, r3, r4
 800a62e:	bf08      	it	eq
 800a630:	2300      	moveq	r3, #0
 800a632:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a636:	6102      	str	r2, [r0, #16]
 800a638:	bf08      	it	eq
 800a63a:	6143      	streq	r3, [r0, #20]
 800a63c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a640:	f8dc c000 	ldr.w	ip, [ip]
 800a644:	fa0c fc08 	lsl.w	ip, ip, r8
 800a648:	ea4c 0707 	orr.w	r7, ip, r7
 800a64c:	f849 7b04 	str.w	r7, [r9], #4
 800a650:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a654:	40cf      	lsrs	r7, r1
 800a656:	e7d9      	b.n	800a60c <rshift+0x4c>
 800a658:	f851 cb04 	ldr.w	ip, [r1], #4
 800a65c:	f847 cf04 	str.w	ip, [r7, #4]!
 800a660:	e7c2      	b.n	800a5e8 <rshift+0x28>
 800a662:	4623      	mov	r3, r4
 800a664:	e7e0      	b.n	800a628 <rshift+0x68>

0800a666 <__hexdig_fun>:
 800a666:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a66a:	2b09      	cmp	r3, #9
 800a66c:	d802      	bhi.n	800a674 <__hexdig_fun+0xe>
 800a66e:	3820      	subs	r0, #32
 800a670:	b2c0      	uxtb	r0, r0
 800a672:	4770      	bx	lr
 800a674:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a678:	2b05      	cmp	r3, #5
 800a67a:	d801      	bhi.n	800a680 <__hexdig_fun+0x1a>
 800a67c:	3847      	subs	r0, #71	; 0x47
 800a67e:	e7f7      	b.n	800a670 <__hexdig_fun+0xa>
 800a680:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a684:	2b05      	cmp	r3, #5
 800a686:	d801      	bhi.n	800a68c <__hexdig_fun+0x26>
 800a688:	3827      	subs	r0, #39	; 0x27
 800a68a:	e7f1      	b.n	800a670 <__hexdig_fun+0xa>
 800a68c:	2000      	movs	r0, #0
 800a68e:	4770      	bx	lr

0800a690 <__gethex>:
 800a690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a694:	4681      	mov	r9, r0
 800a696:	468a      	mov	sl, r1
 800a698:	4617      	mov	r7, r2
 800a69a:	680a      	ldr	r2, [r1, #0]
 800a69c:	b085      	sub	sp, #20
 800a69e:	f102 0b02 	add.w	fp, r2, #2
 800a6a2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a6a6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a6aa:	9302      	str	r3, [sp, #8]
 800a6ac:	32fe      	adds	r2, #254	; 0xfe
 800a6ae:	eb02 030b 	add.w	r3, r2, fp
 800a6b2:	46d8      	mov	r8, fp
 800a6b4:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800a6b8:	9301      	str	r3, [sp, #4]
 800a6ba:	2830      	cmp	r0, #48	; 0x30
 800a6bc:	d0f7      	beq.n	800a6ae <__gethex+0x1e>
 800a6be:	f7ff ffd2 	bl	800a666 <__hexdig_fun>
 800a6c2:	4604      	mov	r4, r0
 800a6c4:	2800      	cmp	r0, #0
 800a6c6:	d138      	bne.n	800a73a <__gethex+0xaa>
 800a6c8:	2201      	movs	r2, #1
 800a6ca:	4640      	mov	r0, r8
 800a6cc:	49a7      	ldr	r1, [pc, #668]	; (800a96c <__gethex+0x2dc>)
 800a6ce:	f7fe fff6 	bl	80096be <strncmp>
 800a6d2:	4606      	mov	r6, r0
 800a6d4:	2800      	cmp	r0, #0
 800a6d6:	d169      	bne.n	800a7ac <__gethex+0x11c>
 800a6d8:	f898 0001 	ldrb.w	r0, [r8, #1]
 800a6dc:	465d      	mov	r5, fp
 800a6de:	f7ff ffc2 	bl	800a666 <__hexdig_fun>
 800a6e2:	2800      	cmp	r0, #0
 800a6e4:	d064      	beq.n	800a7b0 <__gethex+0x120>
 800a6e6:	465a      	mov	r2, fp
 800a6e8:	7810      	ldrb	r0, [r2, #0]
 800a6ea:	4690      	mov	r8, r2
 800a6ec:	2830      	cmp	r0, #48	; 0x30
 800a6ee:	f102 0201 	add.w	r2, r2, #1
 800a6f2:	d0f9      	beq.n	800a6e8 <__gethex+0x58>
 800a6f4:	f7ff ffb7 	bl	800a666 <__hexdig_fun>
 800a6f8:	2301      	movs	r3, #1
 800a6fa:	fab0 f480 	clz	r4, r0
 800a6fe:	465e      	mov	r6, fp
 800a700:	0964      	lsrs	r4, r4, #5
 800a702:	9301      	str	r3, [sp, #4]
 800a704:	4642      	mov	r2, r8
 800a706:	4615      	mov	r5, r2
 800a708:	7828      	ldrb	r0, [r5, #0]
 800a70a:	3201      	adds	r2, #1
 800a70c:	f7ff ffab 	bl	800a666 <__hexdig_fun>
 800a710:	2800      	cmp	r0, #0
 800a712:	d1f8      	bne.n	800a706 <__gethex+0x76>
 800a714:	2201      	movs	r2, #1
 800a716:	4628      	mov	r0, r5
 800a718:	4994      	ldr	r1, [pc, #592]	; (800a96c <__gethex+0x2dc>)
 800a71a:	f7fe ffd0 	bl	80096be <strncmp>
 800a71e:	b978      	cbnz	r0, 800a740 <__gethex+0xb0>
 800a720:	b946      	cbnz	r6, 800a734 <__gethex+0xa4>
 800a722:	1c6e      	adds	r6, r5, #1
 800a724:	4632      	mov	r2, r6
 800a726:	4615      	mov	r5, r2
 800a728:	7828      	ldrb	r0, [r5, #0]
 800a72a:	3201      	adds	r2, #1
 800a72c:	f7ff ff9b 	bl	800a666 <__hexdig_fun>
 800a730:	2800      	cmp	r0, #0
 800a732:	d1f8      	bne.n	800a726 <__gethex+0x96>
 800a734:	1b73      	subs	r3, r6, r5
 800a736:	009e      	lsls	r6, r3, #2
 800a738:	e004      	b.n	800a744 <__gethex+0xb4>
 800a73a:	2400      	movs	r4, #0
 800a73c:	4626      	mov	r6, r4
 800a73e:	e7e1      	b.n	800a704 <__gethex+0x74>
 800a740:	2e00      	cmp	r6, #0
 800a742:	d1f7      	bne.n	800a734 <__gethex+0xa4>
 800a744:	782b      	ldrb	r3, [r5, #0]
 800a746:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a74a:	2b50      	cmp	r3, #80	; 0x50
 800a74c:	d13d      	bne.n	800a7ca <__gethex+0x13a>
 800a74e:	786b      	ldrb	r3, [r5, #1]
 800a750:	2b2b      	cmp	r3, #43	; 0x2b
 800a752:	d02f      	beq.n	800a7b4 <__gethex+0x124>
 800a754:	2b2d      	cmp	r3, #45	; 0x2d
 800a756:	d031      	beq.n	800a7bc <__gethex+0x12c>
 800a758:	f04f 0b00 	mov.w	fp, #0
 800a75c:	1c69      	adds	r1, r5, #1
 800a75e:	7808      	ldrb	r0, [r1, #0]
 800a760:	f7ff ff81 	bl	800a666 <__hexdig_fun>
 800a764:	1e42      	subs	r2, r0, #1
 800a766:	b2d2      	uxtb	r2, r2
 800a768:	2a18      	cmp	r2, #24
 800a76a:	d82e      	bhi.n	800a7ca <__gethex+0x13a>
 800a76c:	f1a0 0210 	sub.w	r2, r0, #16
 800a770:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a774:	f7ff ff77 	bl	800a666 <__hexdig_fun>
 800a778:	f100 3cff 	add.w	ip, r0, #4294967295
 800a77c:	fa5f fc8c 	uxtb.w	ip, ip
 800a780:	f1bc 0f18 	cmp.w	ip, #24
 800a784:	d91d      	bls.n	800a7c2 <__gethex+0x132>
 800a786:	f1bb 0f00 	cmp.w	fp, #0
 800a78a:	d000      	beq.n	800a78e <__gethex+0xfe>
 800a78c:	4252      	negs	r2, r2
 800a78e:	4416      	add	r6, r2
 800a790:	f8ca 1000 	str.w	r1, [sl]
 800a794:	b1dc      	cbz	r4, 800a7ce <__gethex+0x13e>
 800a796:	9b01      	ldr	r3, [sp, #4]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	bf14      	ite	ne
 800a79c:	f04f 0800 	movne.w	r8, #0
 800a7a0:	f04f 0806 	moveq.w	r8, #6
 800a7a4:	4640      	mov	r0, r8
 800a7a6:	b005      	add	sp, #20
 800a7a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7ac:	4645      	mov	r5, r8
 800a7ae:	4626      	mov	r6, r4
 800a7b0:	2401      	movs	r4, #1
 800a7b2:	e7c7      	b.n	800a744 <__gethex+0xb4>
 800a7b4:	f04f 0b00 	mov.w	fp, #0
 800a7b8:	1ca9      	adds	r1, r5, #2
 800a7ba:	e7d0      	b.n	800a75e <__gethex+0xce>
 800a7bc:	f04f 0b01 	mov.w	fp, #1
 800a7c0:	e7fa      	b.n	800a7b8 <__gethex+0x128>
 800a7c2:	230a      	movs	r3, #10
 800a7c4:	fb03 0002 	mla	r0, r3, r2, r0
 800a7c8:	e7d0      	b.n	800a76c <__gethex+0xdc>
 800a7ca:	4629      	mov	r1, r5
 800a7cc:	e7e0      	b.n	800a790 <__gethex+0x100>
 800a7ce:	4621      	mov	r1, r4
 800a7d0:	eba5 0308 	sub.w	r3, r5, r8
 800a7d4:	3b01      	subs	r3, #1
 800a7d6:	2b07      	cmp	r3, #7
 800a7d8:	dc0a      	bgt.n	800a7f0 <__gethex+0x160>
 800a7da:	4648      	mov	r0, r9
 800a7dc:	f000 fb10 	bl	800ae00 <_Balloc>
 800a7e0:	4604      	mov	r4, r0
 800a7e2:	b940      	cbnz	r0, 800a7f6 <__gethex+0x166>
 800a7e4:	4602      	mov	r2, r0
 800a7e6:	21e4      	movs	r1, #228	; 0xe4
 800a7e8:	4b61      	ldr	r3, [pc, #388]	; (800a970 <__gethex+0x2e0>)
 800a7ea:	4862      	ldr	r0, [pc, #392]	; (800a974 <__gethex+0x2e4>)
 800a7ec:	f001 f9c4 	bl	800bb78 <__assert_func>
 800a7f0:	3101      	adds	r1, #1
 800a7f2:	105b      	asrs	r3, r3, #1
 800a7f4:	e7ef      	b.n	800a7d6 <__gethex+0x146>
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	469b      	mov	fp, r3
 800a7fa:	f100 0a14 	add.w	sl, r0, #20
 800a7fe:	f8cd a004 	str.w	sl, [sp, #4]
 800a802:	45a8      	cmp	r8, r5
 800a804:	d344      	bcc.n	800a890 <__gethex+0x200>
 800a806:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a80a:	4658      	mov	r0, fp
 800a80c:	f848 bb04 	str.w	fp, [r8], #4
 800a810:	eba8 080a 	sub.w	r8, r8, sl
 800a814:	ea4f 02a8 	mov.w	r2, r8, asr #2
 800a818:	6122      	str	r2, [r4, #16]
 800a81a:	ea4f 1842 	mov.w	r8, r2, lsl #5
 800a81e:	f000 fbe1 	bl	800afe4 <__hi0bits>
 800a822:	683d      	ldr	r5, [r7, #0]
 800a824:	eba8 0800 	sub.w	r8, r8, r0
 800a828:	45a8      	cmp	r8, r5
 800a82a:	dd59      	ble.n	800a8e0 <__gethex+0x250>
 800a82c:	eba8 0805 	sub.w	r8, r8, r5
 800a830:	4641      	mov	r1, r8
 800a832:	4620      	mov	r0, r4
 800a834:	f000 ff5f 	bl	800b6f6 <__any_on>
 800a838:	4683      	mov	fp, r0
 800a83a:	b1b8      	cbz	r0, 800a86c <__gethex+0x1dc>
 800a83c:	f04f 0b01 	mov.w	fp, #1
 800a840:	f108 33ff 	add.w	r3, r8, #4294967295
 800a844:	1159      	asrs	r1, r3, #5
 800a846:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a84a:	f003 021f 	and.w	r2, r3, #31
 800a84e:	fa0b f202 	lsl.w	r2, fp, r2
 800a852:	420a      	tst	r2, r1
 800a854:	d00a      	beq.n	800a86c <__gethex+0x1dc>
 800a856:	455b      	cmp	r3, fp
 800a858:	dd06      	ble.n	800a868 <__gethex+0x1d8>
 800a85a:	4620      	mov	r0, r4
 800a85c:	f1a8 0102 	sub.w	r1, r8, #2
 800a860:	f000 ff49 	bl	800b6f6 <__any_on>
 800a864:	2800      	cmp	r0, #0
 800a866:	d138      	bne.n	800a8da <__gethex+0x24a>
 800a868:	f04f 0b02 	mov.w	fp, #2
 800a86c:	4641      	mov	r1, r8
 800a86e:	4620      	mov	r0, r4
 800a870:	f7ff fea6 	bl	800a5c0 <rshift>
 800a874:	4446      	add	r6, r8
 800a876:	68bb      	ldr	r3, [r7, #8]
 800a878:	42b3      	cmp	r3, r6
 800a87a:	da41      	bge.n	800a900 <__gethex+0x270>
 800a87c:	4621      	mov	r1, r4
 800a87e:	4648      	mov	r0, r9
 800a880:	f000 fafe 	bl	800ae80 <_Bfree>
 800a884:	2300      	movs	r3, #0
 800a886:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a888:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800a88c:	6013      	str	r3, [r2, #0]
 800a88e:	e789      	b.n	800a7a4 <__gethex+0x114>
 800a890:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800a894:	2a2e      	cmp	r2, #46	; 0x2e
 800a896:	d014      	beq.n	800a8c2 <__gethex+0x232>
 800a898:	2b20      	cmp	r3, #32
 800a89a:	d106      	bne.n	800a8aa <__gethex+0x21a>
 800a89c:	9b01      	ldr	r3, [sp, #4]
 800a89e:	f843 bb04 	str.w	fp, [r3], #4
 800a8a2:	f04f 0b00 	mov.w	fp, #0
 800a8a6:	9301      	str	r3, [sp, #4]
 800a8a8:	465b      	mov	r3, fp
 800a8aa:	7828      	ldrb	r0, [r5, #0]
 800a8ac:	9303      	str	r3, [sp, #12]
 800a8ae:	f7ff feda 	bl	800a666 <__hexdig_fun>
 800a8b2:	9b03      	ldr	r3, [sp, #12]
 800a8b4:	f000 000f 	and.w	r0, r0, #15
 800a8b8:	4098      	lsls	r0, r3
 800a8ba:	ea4b 0b00 	orr.w	fp, fp, r0
 800a8be:	3304      	adds	r3, #4
 800a8c0:	e79f      	b.n	800a802 <__gethex+0x172>
 800a8c2:	45a8      	cmp	r8, r5
 800a8c4:	d8e8      	bhi.n	800a898 <__gethex+0x208>
 800a8c6:	2201      	movs	r2, #1
 800a8c8:	4628      	mov	r0, r5
 800a8ca:	4928      	ldr	r1, [pc, #160]	; (800a96c <__gethex+0x2dc>)
 800a8cc:	9303      	str	r3, [sp, #12]
 800a8ce:	f7fe fef6 	bl	80096be <strncmp>
 800a8d2:	9b03      	ldr	r3, [sp, #12]
 800a8d4:	2800      	cmp	r0, #0
 800a8d6:	d1df      	bne.n	800a898 <__gethex+0x208>
 800a8d8:	e793      	b.n	800a802 <__gethex+0x172>
 800a8da:	f04f 0b03 	mov.w	fp, #3
 800a8de:	e7c5      	b.n	800a86c <__gethex+0x1dc>
 800a8e0:	da0b      	bge.n	800a8fa <__gethex+0x26a>
 800a8e2:	eba5 0808 	sub.w	r8, r5, r8
 800a8e6:	4621      	mov	r1, r4
 800a8e8:	4642      	mov	r2, r8
 800a8ea:	4648      	mov	r0, r9
 800a8ec:	f000 fce0 	bl	800b2b0 <__lshift>
 800a8f0:	4604      	mov	r4, r0
 800a8f2:	eba6 0608 	sub.w	r6, r6, r8
 800a8f6:	f100 0a14 	add.w	sl, r0, #20
 800a8fa:	f04f 0b00 	mov.w	fp, #0
 800a8fe:	e7ba      	b.n	800a876 <__gethex+0x1e6>
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	42b3      	cmp	r3, r6
 800a904:	dd74      	ble.n	800a9f0 <__gethex+0x360>
 800a906:	1b9e      	subs	r6, r3, r6
 800a908:	42b5      	cmp	r5, r6
 800a90a:	dc35      	bgt.n	800a978 <__gethex+0x2e8>
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	2b02      	cmp	r3, #2
 800a910:	d023      	beq.n	800a95a <__gethex+0x2ca>
 800a912:	2b03      	cmp	r3, #3
 800a914:	d025      	beq.n	800a962 <__gethex+0x2d2>
 800a916:	2b01      	cmp	r3, #1
 800a918:	d115      	bne.n	800a946 <__gethex+0x2b6>
 800a91a:	42b5      	cmp	r5, r6
 800a91c:	d113      	bne.n	800a946 <__gethex+0x2b6>
 800a91e:	2d01      	cmp	r5, #1
 800a920:	d10b      	bne.n	800a93a <__gethex+0x2aa>
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	9a02      	ldr	r2, [sp, #8]
 800a926:	f04f 0862 	mov.w	r8, #98	; 0x62
 800a92a:	6013      	str	r3, [r2, #0]
 800a92c:	2301      	movs	r3, #1
 800a92e:	6123      	str	r3, [r4, #16]
 800a930:	f8ca 3000 	str.w	r3, [sl]
 800a934:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a936:	601c      	str	r4, [r3, #0]
 800a938:	e734      	b.n	800a7a4 <__gethex+0x114>
 800a93a:	4620      	mov	r0, r4
 800a93c:	1e69      	subs	r1, r5, #1
 800a93e:	f000 feda 	bl	800b6f6 <__any_on>
 800a942:	2800      	cmp	r0, #0
 800a944:	d1ed      	bne.n	800a922 <__gethex+0x292>
 800a946:	4621      	mov	r1, r4
 800a948:	4648      	mov	r0, r9
 800a94a:	f000 fa99 	bl	800ae80 <_Bfree>
 800a94e:	2300      	movs	r3, #0
 800a950:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a952:	f04f 0850 	mov.w	r8, #80	; 0x50
 800a956:	6013      	str	r3, [r2, #0]
 800a958:	e724      	b.n	800a7a4 <__gethex+0x114>
 800a95a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d1f2      	bne.n	800a946 <__gethex+0x2b6>
 800a960:	e7df      	b.n	800a922 <__gethex+0x292>
 800a962:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a964:	2b00      	cmp	r3, #0
 800a966:	d1dc      	bne.n	800a922 <__gethex+0x292>
 800a968:	e7ed      	b.n	800a946 <__gethex+0x2b6>
 800a96a:	bf00      	nop
 800a96c:	0800cbd1 	.word	0x0800cbd1
 800a970:	0800cde6 	.word	0x0800cde6
 800a974:	0800cdf7 	.word	0x0800cdf7
 800a978:	f106 38ff 	add.w	r8, r6, #4294967295
 800a97c:	f1bb 0f00 	cmp.w	fp, #0
 800a980:	d133      	bne.n	800a9ea <__gethex+0x35a>
 800a982:	f1b8 0f00 	cmp.w	r8, #0
 800a986:	d004      	beq.n	800a992 <__gethex+0x302>
 800a988:	4641      	mov	r1, r8
 800a98a:	4620      	mov	r0, r4
 800a98c:	f000 feb3 	bl	800b6f6 <__any_on>
 800a990:	4683      	mov	fp, r0
 800a992:	2301      	movs	r3, #1
 800a994:	ea4f 1268 	mov.w	r2, r8, asr #5
 800a998:	f008 081f 	and.w	r8, r8, #31
 800a99c:	fa03 f308 	lsl.w	r3, r3, r8
 800a9a0:	f04f 0802 	mov.w	r8, #2
 800a9a4:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a9a8:	4631      	mov	r1, r6
 800a9aa:	4213      	tst	r3, r2
 800a9ac:	4620      	mov	r0, r4
 800a9ae:	bf18      	it	ne
 800a9b0:	f04b 0b02 	orrne.w	fp, fp, #2
 800a9b4:	1bad      	subs	r5, r5, r6
 800a9b6:	f7ff fe03 	bl	800a5c0 <rshift>
 800a9ba:	687e      	ldr	r6, [r7, #4]
 800a9bc:	f1bb 0f00 	cmp.w	fp, #0
 800a9c0:	d04a      	beq.n	800aa58 <__gethex+0x3c8>
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	2b02      	cmp	r3, #2
 800a9c6:	d016      	beq.n	800a9f6 <__gethex+0x366>
 800a9c8:	2b03      	cmp	r3, #3
 800a9ca:	d018      	beq.n	800a9fe <__gethex+0x36e>
 800a9cc:	2b01      	cmp	r3, #1
 800a9ce:	d109      	bne.n	800a9e4 <__gethex+0x354>
 800a9d0:	f01b 0f02 	tst.w	fp, #2
 800a9d4:	d006      	beq.n	800a9e4 <__gethex+0x354>
 800a9d6:	f8da 3000 	ldr.w	r3, [sl]
 800a9da:	ea4b 0b03 	orr.w	fp, fp, r3
 800a9de:	f01b 0f01 	tst.w	fp, #1
 800a9e2:	d10f      	bne.n	800aa04 <__gethex+0x374>
 800a9e4:	f048 0810 	orr.w	r8, r8, #16
 800a9e8:	e036      	b.n	800aa58 <__gethex+0x3c8>
 800a9ea:	f04f 0b01 	mov.w	fp, #1
 800a9ee:	e7d0      	b.n	800a992 <__gethex+0x302>
 800a9f0:	f04f 0801 	mov.w	r8, #1
 800a9f4:	e7e2      	b.n	800a9bc <__gethex+0x32c>
 800a9f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a9f8:	f1c3 0301 	rsb	r3, r3, #1
 800a9fc:	930f      	str	r3, [sp, #60]	; 0x3c
 800a9fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d0ef      	beq.n	800a9e4 <__gethex+0x354>
 800aa04:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800aa08:	f104 0214 	add.w	r2, r4, #20
 800aa0c:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800aa10:	9301      	str	r3, [sp, #4]
 800aa12:	2300      	movs	r3, #0
 800aa14:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800aa18:	4694      	mov	ip, r2
 800aa1a:	f852 1b04 	ldr.w	r1, [r2], #4
 800aa1e:	f1b1 3fff 	cmp.w	r1, #4294967295
 800aa22:	d01e      	beq.n	800aa62 <__gethex+0x3d2>
 800aa24:	3101      	adds	r1, #1
 800aa26:	f8cc 1000 	str.w	r1, [ip]
 800aa2a:	f1b8 0f02 	cmp.w	r8, #2
 800aa2e:	f104 0214 	add.w	r2, r4, #20
 800aa32:	d13d      	bne.n	800aab0 <__gethex+0x420>
 800aa34:	683b      	ldr	r3, [r7, #0]
 800aa36:	3b01      	subs	r3, #1
 800aa38:	42ab      	cmp	r3, r5
 800aa3a:	d10b      	bne.n	800aa54 <__gethex+0x3c4>
 800aa3c:	2301      	movs	r3, #1
 800aa3e:	1169      	asrs	r1, r5, #5
 800aa40:	f005 051f 	and.w	r5, r5, #31
 800aa44:	fa03 f505 	lsl.w	r5, r3, r5
 800aa48:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800aa4c:	421d      	tst	r5, r3
 800aa4e:	bf18      	it	ne
 800aa50:	f04f 0801 	movne.w	r8, #1
 800aa54:	f048 0820 	orr.w	r8, r8, #32
 800aa58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aa5a:	601c      	str	r4, [r3, #0]
 800aa5c:	9b02      	ldr	r3, [sp, #8]
 800aa5e:	601e      	str	r6, [r3, #0]
 800aa60:	e6a0      	b.n	800a7a4 <__gethex+0x114>
 800aa62:	4290      	cmp	r0, r2
 800aa64:	f842 3c04 	str.w	r3, [r2, #-4]
 800aa68:	d8d6      	bhi.n	800aa18 <__gethex+0x388>
 800aa6a:	68a2      	ldr	r2, [r4, #8]
 800aa6c:	4593      	cmp	fp, r2
 800aa6e:	db17      	blt.n	800aaa0 <__gethex+0x410>
 800aa70:	6861      	ldr	r1, [r4, #4]
 800aa72:	4648      	mov	r0, r9
 800aa74:	3101      	adds	r1, #1
 800aa76:	f000 f9c3 	bl	800ae00 <_Balloc>
 800aa7a:	4682      	mov	sl, r0
 800aa7c:	b918      	cbnz	r0, 800aa86 <__gethex+0x3f6>
 800aa7e:	4602      	mov	r2, r0
 800aa80:	2184      	movs	r1, #132	; 0x84
 800aa82:	4b1a      	ldr	r3, [pc, #104]	; (800aaec <__gethex+0x45c>)
 800aa84:	e6b1      	b.n	800a7ea <__gethex+0x15a>
 800aa86:	6922      	ldr	r2, [r4, #16]
 800aa88:	f104 010c 	add.w	r1, r4, #12
 800aa8c:	3202      	adds	r2, #2
 800aa8e:	0092      	lsls	r2, r2, #2
 800aa90:	300c      	adds	r0, #12
 800aa92:	f7fe fec4 	bl	800981e <memcpy>
 800aa96:	4621      	mov	r1, r4
 800aa98:	4648      	mov	r0, r9
 800aa9a:	f000 f9f1 	bl	800ae80 <_Bfree>
 800aa9e:	4654      	mov	r4, sl
 800aaa0:	6922      	ldr	r2, [r4, #16]
 800aaa2:	1c51      	adds	r1, r2, #1
 800aaa4:	6121      	str	r1, [r4, #16]
 800aaa6:	2101      	movs	r1, #1
 800aaa8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800aaac:	6151      	str	r1, [r2, #20]
 800aaae:	e7bc      	b.n	800aa2a <__gethex+0x39a>
 800aab0:	6921      	ldr	r1, [r4, #16]
 800aab2:	4559      	cmp	r1, fp
 800aab4:	dd0b      	ble.n	800aace <__gethex+0x43e>
 800aab6:	2101      	movs	r1, #1
 800aab8:	4620      	mov	r0, r4
 800aaba:	f7ff fd81 	bl	800a5c0 <rshift>
 800aabe:	68bb      	ldr	r3, [r7, #8]
 800aac0:	3601      	adds	r6, #1
 800aac2:	42b3      	cmp	r3, r6
 800aac4:	f6ff aeda 	blt.w	800a87c <__gethex+0x1ec>
 800aac8:	f04f 0801 	mov.w	r8, #1
 800aacc:	e7c2      	b.n	800aa54 <__gethex+0x3c4>
 800aace:	f015 051f 	ands.w	r5, r5, #31
 800aad2:	d0f9      	beq.n	800aac8 <__gethex+0x438>
 800aad4:	9b01      	ldr	r3, [sp, #4]
 800aad6:	f1c5 0520 	rsb	r5, r5, #32
 800aada:	441a      	add	r2, r3
 800aadc:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800aae0:	f000 fa80 	bl	800afe4 <__hi0bits>
 800aae4:	42a8      	cmp	r0, r5
 800aae6:	dbe6      	blt.n	800aab6 <__gethex+0x426>
 800aae8:	e7ee      	b.n	800aac8 <__gethex+0x438>
 800aaea:	bf00      	nop
 800aaec:	0800cde6 	.word	0x0800cde6

0800aaf0 <L_shift>:
 800aaf0:	f1c2 0208 	rsb	r2, r2, #8
 800aaf4:	0092      	lsls	r2, r2, #2
 800aaf6:	b570      	push	{r4, r5, r6, lr}
 800aaf8:	f1c2 0620 	rsb	r6, r2, #32
 800aafc:	6843      	ldr	r3, [r0, #4]
 800aafe:	6804      	ldr	r4, [r0, #0]
 800ab00:	fa03 f506 	lsl.w	r5, r3, r6
 800ab04:	432c      	orrs	r4, r5
 800ab06:	40d3      	lsrs	r3, r2
 800ab08:	6004      	str	r4, [r0, #0]
 800ab0a:	f840 3f04 	str.w	r3, [r0, #4]!
 800ab0e:	4288      	cmp	r0, r1
 800ab10:	d3f4      	bcc.n	800aafc <L_shift+0xc>
 800ab12:	bd70      	pop	{r4, r5, r6, pc}

0800ab14 <__match>:
 800ab14:	b530      	push	{r4, r5, lr}
 800ab16:	6803      	ldr	r3, [r0, #0]
 800ab18:	3301      	adds	r3, #1
 800ab1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ab1e:	b914      	cbnz	r4, 800ab26 <__match+0x12>
 800ab20:	6003      	str	r3, [r0, #0]
 800ab22:	2001      	movs	r0, #1
 800ab24:	bd30      	pop	{r4, r5, pc}
 800ab26:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ab2a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800ab2e:	2d19      	cmp	r5, #25
 800ab30:	bf98      	it	ls
 800ab32:	3220      	addls	r2, #32
 800ab34:	42a2      	cmp	r2, r4
 800ab36:	d0f0      	beq.n	800ab1a <__match+0x6>
 800ab38:	2000      	movs	r0, #0
 800ab3a:	e7f3      	b.n	800ab24 <__match+0x10>

0800ab3c <__hexnan>:
 800ab3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab40:	2500      	movs	r5, #0
 800ab42:	680b      	ldr	r3, [r1, #0]
 800ab44:	4682      	mov	sl, r0
 800ab46:	115e      	asrs	r6, r3, #5
 800ab48:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ab4c:	f013 031f 	ands.w	r3, r3, #31
 800ab50:	bf18      	it	ne
 800ab52:	3604      	addne	r6, #4
 800ab54:	1f37      	subs	r7, r6, #4
 800ab56:	4690      	mov	r8, r2
 800ab58:	46b9      	mov	r9, r7
 800ab5a:	463c      	mov	r4, r7
 800ab5c:	46ab      	mov	fp, r5
 800ab5e:	b087      	sub	sp, #28
 800ab60:	6801      	ldr	r1, [r0, #0]
 800ab62:	9301      	str	r3, [sp, #4]
 800ab64:	f846 5c04 	str.w	r5, [r6, #-4]
 800ab68:	9502      	str	r5, [sp, #8]
 800ab6a:	784a      	ldrb	r2, [r1, #1]
 800ab6c:	1c4b      	adds	r3, r1, #1
 800ab6e:	9303      	str	r3, [sp, #12]
 800ab70:	b342      	cbz	r2, 800abc4 <__hexnan+0x88>
 800ab72:	4610      	mov	r0, r2
 800ab74:	9105      	str	r1, [sp, #20]
 800ab76:	9204      	str	r2, [sp, #16]
 800ab78:	f7ff fd75 	bl	800a666 <__hexdig_fun>
 800ab7c:	2800      	cmp	r0, #0
 800ab7e:	d14f      	bne.n	800ac20 <__hexnan+0xe4>
 800ab80:	9a04      	ldr	r2, [sp, #16]
 800ab82:	9905      	ldr	r1, [sp, #20]
 800ab84:	2a20      	cmp	r2, #32
 800ab86:	d818      	bhi.n	800abba <__hexnan+0x7e>
 800ab88:	9b02      	ldr	r3, [sp, #8]
 800ab8a:	459b      	cmp	fp, r3
 800ab8c:	dd13      	ble.n	800abb6 <__hexnan+0x7a>
 800ab8e:	454c      	cmp	r4, r9
 800ab90:	d206      	bcs.n	800aba0 <__hexnan+0x64>
 800ab92:	2d07      	cmp	r5, #7
 800ab94:	dc04      	bgt.n	800aba0 <__hexnan+0x64>
 800ab96:	462a      	mov	r2, r5
 800ab98:	4649      	mov	r1, r9
 800ab9a:	4620      	mov	r0, r4
 800ab9c:	f7ff ffa8 	bl	800aaf0 <L_shift>
 800aba0:	4544      	cmp	r4, r8
 800aba2:	d950      	bls.n	800ac46 <__hexnan+0x10a>
 800aba4:	2300      	movs	r3, #0
 800aba6:	f1a4 0904 	sub.w	r9, r4, #4
 800abaa:	f844 3c04 	str.w	r3, [r4, #-4]
 800abae:	461d      	mov	r5, r3
 800abb0:	464c      	mov	r4, r9
 800abb2:	f8cd b008 	str.w	fp, [sp, #8]
 800abb6:	9903      	ldr	r1, [sp, #12]
 800abb8:	e7d7      	b.n	800ab6a <__hexnan+0x2e>
 800abba:	2a29      	cmp	r2, #41	; 0x29
 800abbc:	d155      	bne.n	800ac6a <__hexnan+0x12e>
 800abbe:	3102      	adds	r1, #2
 800abc0:	f8ca 1000 	str.w	r1, [sl]
 800abc4:	f1bb 0f00 	cmp.w	fp, #0
 800abc8:	d04f      	beq.n	800ac6a <__hexnan+0x12e>
 800abca:	454c      	cmp	r4, r9
 800abcc:	d206      	bcs.n	800abdc <__hexnan+0xa0>
 800abce:	2d07      	cmp	r5, #7
 800abd0:	dc04      	bgt.n	800abdc <__hexnan+0xa0>
 800abd2:	462a      	mov	r2, r5
 800abd4:	4649      	mov	r1, r9
 800abd6:	4620      	mov	r0, r4
 800abd8:	f7ff ff8a 	bl	800aaf0 <L_shift>
 800abdc:	4544      	cmp	r4, r8
 800abde:	d934      	bls.n	800ac4a <__hexnan+0x10e>
 800abe0:	4623      	mov	r3, r4
 800abe2:	f1a8 0204 	sub.w	r2, r8, #4
 800abe6:	f853 1b04 	ldr.w	r1, [r3], #4
 800abea:	429f      	cmp	r7, r3
 800abec:	f842 1f04 	str.w	r1, [r2, #4]!
 800abf0:	d2f9      	bcs.n	800abe6 <__hexnan+0xaa>
 800abf2:	1b3b      	subs	r3, r7, r4
 800abf4:	f023 0303 	bic.w	r3, r3, #3
 800abf8:	3304      	adds	r3, #4
 800abfa:	3e03      	subs	r6, #3
 800abfc:	3401      	adds	r4, #1
 800abfe:	42a6      	cmp	r6, r4
 800ac00:	bf38      	it	cc
 800ac02:	2304      	movcc	r3, #4
 800ac04:	2200      	movs	r2, #0
 800ac06:	4443      	add	r3, r8
 800ac08:	f843 2b04 	str.w	r2, [r3], #4
 800ac0c:	429f      	cmp	r7, r3
 800ac0e:	d2fb      	bcs.n	800ac08 <__hexnan+0xcc>
 800ac10:	683b      	ldr	r3, [r7, #0]
 800ac12:	b91b      	cbnz	r3, 800ac1c <__hexnan+0xe0>
 800ac14:	4547      	cmp	r7, r8
 800ac16:	d126      	bne.n	800ac66 <__hexnan+0x12a>
 800ac18:	2301      	movs	r3, #1
 800ac1a:	603b      	str	r3, [r7, #0]
 800ac1c:	2005      	movs	r0, #5
 800ac1e:	e025      	b.n	800ac6c <__hexnan+0x130>
 800ac20:	3501      	adds	r5, #1
 800ac22:	2d08      	cmp	r5, #8
 800ac24:	f10b 0b01 	add.w	fp, fp, #1
 800ac28:	dd06      	ble.n	800ac38 <__hexnan+0xfc>
 800ac2a:	4544      	cmp	r4, r8
 800ac2c:	d9c3      	bls.n	800abb6 <__hexnan+0x7a>
 800ac2e:	2300      	movs	r3, #0
 800ac30:	2501      	movs	r5, #1
 800ac32:	f844 3c04 	str.w	r3, [r4, #-4]
 800ac36:	3c04      	subs	r4, #4
 800ac38:	6822      	ldr	r2, [r4, #0]
 800ac3a:	f000 000f 	and.w	r0, r0, #15
 800ac3e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800ac42:	6020      	str	r0, [r4, #0]
 800ac44:	e7b7      	b.n	800abb6 <__hexnan+0x7a>
 800ac46:	2508      	movs	r5, #8
 800ac48:	e7b5      	b.n	800abb6 <__hexnan+0x7a>
 800ac4a:	9b01      	ldr	r3, [sp, #4]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d0df      	beq.n	800ac10 <__hexnan+0xd4>
 800ac50:	f04f 32ff 	mov.w	r2, #4294967295
 800ac54:	f1c3 0320 	rsb	r3, r3, #32
 800ac58:	40da      	lsrs	r2, r3
 800ac5a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ac5e:	4013      	ands	r3, r2
 800ac60:	f846 3c04 	str.w	r3, [r6, #-4]
 800ac64:	e7d4      	b.n	800ac10 <__hexnan+0xd4>
 800ac66:	3f04      	subs	r7, #4
 800ac68:	e7d2      	b.n	800ac10 <__hexnan+0xd4>
 800ac6a:	2004      	movs	r0, #4
 800ac6c:	b007      	add	sp, #28
 800ac6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800ac74 <malloc>:
 800ac74:	4b02      	ldr	r3, [pc, #8]	; (800ac80 <malloc+0xc>)
 800ac76:	4601      	mov	r1, r0
 800ac78:	6818      	ldr	r0, [r3, #0]
 800ac7a:	f000 b823 	b.w	800acc4 <_malloc_r>
 800ac7e:	bf00      	nop
 800ac80:	200001dc 	.word	0x200001dc

0800ac84 <sbrk_aligned>:
 800ac84:	b570      	push	{r4, r5, r6, lr}
 800ac86:	4e0e      	ldr	r6, [pc, #56]	; (800acc0 <sbrk_aligned+0x3c>)
 800ac88:	460c      	mov	r4, r1
 800ac8a:	6831      	ldr	r1, [r6, #0]
 800ac8c:	4605      	mov	r5, r0
 800ac8e:	b911      	cbnz	r1, 800ac96 <sbrk_aligned+0x12>
 800ac90:	f000 ff62 	bl	800bb58 <_sbrk_r>
 800ac94:	6030      	str	r0, [r6, #0]
 800ac96:	4621      	mov	r1, r4
 800ac98:	4628      	mov	r0, r5
 800ac9a:	f000 ff5d 	bl	800bb58 <_sbrk_r>
 800ac9e:	1c43      	adds	r3, r0, #1
 800aca0:	d00a      	beq.n	800acb8 <sbrk_aligned+0x34>
 800aca2:	1cc4      	adds	r4, r0, #3
 800aca4:	f024 0403 	bic.w	r4, r4, #3
 800aca8:	42a0      	cmp	r0, r4
 800acaa:	d007      	beq.n	800acbc <sbrk_aligned+0x38>
 800acac:	1a21      	subs	r1, r4, r0
 800acae:	4628      	mov	r0, r5
 800acb0:	f000 ff52 	bl	800bb58 <_sbrk_r>
 800acb4:	3001      	adds	r0, #1
 800acb6:	d101      	bne.n	800acbc <sbrk_aligned+0x38>
 800acb8:	f04f 34ff 	mov.w	r4, #4294967295
 800acbc:	4620      	mov	r0, r4
 800acbe:	bd70      	pop	{r4, r5, r6, pc}
 800acc0:	20002974 	.word	0x20002974

0800acc4 <_malloc_r>:
 800acc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800acc8:	1ccd      	adds	r5, r1, #3
 800acca:	f025 0503 	bic.w	r5, r5, #3
 800acce:	3508      	adds	r5, #8
 800acd0:	2d0c      	cmp	r5, #12
 800acd2:	bf38      	it	cc
 800acd4:	250c      	movcc	r5, #12
 800acd6:	2d00      	cmp	r5, #0
 800acd8:	4607      	mov	r7, r0
 800acda:	db01      	blt.n	800ace0 <_malloc_r+0x1c>
 800acdc:	42a9      	cmp	r1, r5
 800acde:	d905      	bls.n	800acec <_malloc_r+0x28>
 800ace0:	230c      	movs	r3, #12
 800ace2:	2600      	movs	r6, #0
 800ace4:	603b      	str	r3, [r7, #0]
 800ace6:	4630      	mov	r0, r6
 800ace8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800acec:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800adc0 <_malloc_r+0xfc>
 800acf0:	f000 f87a 	bl	800ade8 <__malloc_lock>
 800acf4:	f8d8 3000 	ldr.w	r3, [r8]
 800acf8:	461c      	mov	r4, r3
 800acfa:	bb5c      	cbnz	r4, 800ad54 <_malloc_r+0x90>
 800acfc:	4629      	mov	r1, r5
 800acfe:	4638      	mov	r0, r7
 800ad00:	f7ff ffc0 	bl	800ac84 <sbrk_aligned>
 800ad04:	1c43      	adds	r3, r0, #1
 800ad06:	4604      	mov	r4, r0
 800ad08:	d155      	bne.n	800adb6 <_malloc_r+0xf2>
 800ad0a:	f8d8 4000 	ldr.w	r4, [r8]
 800ad0e:	4626      	mov	r6, r4
 800ad10:	2e00      	cmp	r6, #0
 800ad12:	d145      	bne.n	800ada0 <_malloc_r+0xdc>
 800ad14:	2c00      	cmp	r4, #0
 800ad16:	d048      	beq.n	800adaa <_malloc_r+0xe6>
 800ad18:	6823      	ldr	r3, [r4, #0]
 800ad1a:	4631      	mov	r1, r6
 800ad1c:	4638      	mov	r0, r7
 800ad1e:	eb04 0903 	add.w	r9, r4, r3
 800ad22:	f000 ff19 	bl	800bb58 <_sbrk_r>
 800ad26:	4581      	cmp	r9, r0
 800ad28:	d13f      	bne.n	800adaa <_malloc_r+0xe6>
 800ad2a:	6821      	ldr	r1, [r4, #0]
 800ad2c:	4638      	mov	r0, r7
 800ad2e:	1a6d      	subs	r5, r5, r1
 800ad30:	4629      	mov	r1, r5
 800ad32:	f7ff ffa7 	bl	800ac84 <sbrk_aligned>
 800ad36:	3001      	adds	r0, #1
 800ad38:	d037      	beq.n	800adaa <_malloc_r+0xe6>
 800ad3a:	6823      	ldr	r3, [r4, #0]
 800ad3c:	442b      	add	r3, r5
 800ad3e:	6023      	str	r3, [r4, #0]
 800ad40:	f8d8 3000 	ldr.w	r3, [r8]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d038      	beq.n	800adba <_malloc_r+0xf6>
 800ad48:	685a      	ldr	r2, [r3, #4]
 800ad4a:	42a2      	cmp	r2, r4
 800ad4c:	d12b      	bne.n	800ada6 <_malloc_r+0xe2>
 800ad4e:	2200      	movs	r2, #0
 800ad50:	605a      	str	r2, [r3, #4]
 800ad52:	e00f      	b.n	800ad74 <_malloc_r+0xb0>
 800ad54:	6822      	ldr	r2, [r4, #0]
 800ad56:	1b52      	subs	r2, r2, r5
 800ad58:	d41f      	bmi.n	800ad9a <_malloc_r+0xd6>
 800ad5a:	2a0b      	cmp	r2, #11
 800ad5c:	d917      	bls.n	800ad8e <_malloc_r+0xca>
 800ad5e:	1961      	adds	r1, r4, r5
 800ad60:	42a3      	cmp	r3, r4
 800ad62:	6025      	str	r5, [r4, #0]
 800ad64:	bf18      	it	ne
 800ad66:	6059      	strne	r1, [r3, #4]
 800ad68:	6863      	ldr	r3, [r4, #4]
 800ad6a:	bf08      	it	eq
 800ad6c:	f8c8 1000 	streq.w	r1, [r8]
 800ad70:	5162      	str	r2, [r4, r5]
 800ad72:	604b      	str	r3, [r1, #4]
 800ad74:	4638      	mov	r0, r7
 800ad76:	f104 060b 	add.w	r6, r4, #11
 800ad7a:	f000 f83b 	bl	800adf4 <__malloc_unlock>
 800ad7e:	f026 0607 	bic.w	r6, r6, #7
 800ad82:	1d23      	adds	r3, r4, #4
 800ad84:	1af2      	subs	r2, r6, r3
 800ad86:	d0ae      	beq.n	800ace6 <_malloc_r+0x22>
 800ad88:	1b9b      	subs	r3, r3, r6
 800ad8a:	50a3      	str	r3, [r4, r2]
 800ad8c:	e7ab      	b.n	800ace6 <_malloc_r+0x22>
 800ad8e:	42a3      	cmp	r3, r4
 800ad90:	6862      	ldr	r2, [r4, #4]
 800ad92:	d1dd      	bne.n	800ad50 <_malloc_r+0x8c>
 800ad94:	f8c8 2000 	str.w	r2, [r8]
 800ad98:	e7ec      	b.n	800ad74 <_malloc_r+0xb0>
 800ad9a:	4623      	mov	r3, r4
 800ad9c:	6864      	ldr	r4, [r4, #4]
 800ad9e:	e7ac      	b.n	800acfa <_malloc_r+0x36>
 800ada0:	4634      	mov	r4, r6
 800ada2:	6876      	ldr	r6, [r6, #4]
 800ada4:	e7b4      	b.n	800ad10 <_malloc_r+0x4c>
 800ada6:	4613      	mov	r3, r2
 800ada8:	e7cc      	b.n	800ad44 <_malloc_r+0x80>
 800adaa:	230c      	movs	r3, #12
 800adac:	4638      	mov	r0, r7
 800adae:	603b      	str	r3, [r7, #0]
 800adb0:	f000 f820 	bl	800adf4 <__malloc_unlock>
 800adb4:	e797      	b.n	800ace6 <_malloc_r+0x22>
 800adb6:	6025      	str	r5, [r4, #0]
 800adb8:	e7dc      	b.n	800ad74 <_malloc_r+0xb0>
 800adba:	605b      	str	r3, [r3, #4]
 800adbc:	deff      	udf	#255	; 0xff
 800adbe:	bf00      	nop
 800adc0:	20002970 	.word	0x20002970

0800adc4 <__ascii_mbtowc>:
 800adc4:	b082      	sub	sp, #8
 800adc6:	b901      	cbnz	r1, 800adca <__ascii_mbtowc+0x6>
 800adc8:	a901      	add	r1, sp, #4
 800adca:	b142      	cbz	r2, 800adde <__ascii_mbtowc+0x1a>
 800adcc:	b14b      	cbz	r3, 800ade2 <__ascii_mbtowc+0x1e>
 800adce:	7813      	ldrb	r3, [r2, #0]
 800add0:	600b      	str	r3, [r1, #0]
 800add2:	7812      	ldrb	r2, [r2, #0]
 800add4:	1e10      	subs	r0, r2, #0
 800add6:	bf18      	it	ne
 800add8:	2001      	movne	r0, #1
 800adda:	b002      	add	sp, #8
 800addc:	4770      	bx	lr
 800adde:	4610      	mov	r0, r2
 800ade0:	e7fb      	b.n	800adda <__ascii_mbtowc+0x16>
 800ade2:	f06f 0001 	mvn.w	r0, #1
 800ade6:	e7f8      	b.n	800adda <__ascii_mbtowc+0x16>

0800ade8 <__malloc_lock>:
 800ade8:	4801      	ldr	r0, [pc, #4]	; (800adf0 <__malloc_lock+0x8>)
 800adea:	f7fe bd08 	b.w	80097fe <__retarget_lock_acquire_recursive>
 800adee:	bf00      	nop
 800adf0:	2000296c 	.word	0x2000296c

0800adf4 <__malloc_unlock>:
 800adf4:	4801      	ldr	r0, [pc, #4]	; (800adfc <__malloc_unlock+0x8>)
 800adf6:	f7fe bd03 	b.w	8009800 <__retarget_lock_release_recursive>
 800adfa:	bf00      	nop
 800adfc:	2000296c 	.word	0x2000296c

0800ae00 <_Balloc>:
 800ae00:	b570      	push	{r4, r5, r6, lr}
 800ae02:	69c6      	ldr	r6, [r0, #28]
 800ae04:	4604      	mov	r4, r0
 800ae06:	460d      	mov	r5, r1
 800ae08:	b976      	cbnz	r6, 800ae28 <_Balloc+0x28>
 800ae0a:	2010      	movs	r0, #16
 800ae0c:	f7ff ff32 	bl	800ac74 <malloc>
 800ae10:	4602      	mov	r2, r0
 800ae12:	61e0      	str	r0, [r4, #28]
 800ae14:	b920      	cbnz	r0, 800ae20 <_Balloc+0x20>
 800ae16:	216b      	movs	r1, #107	; 0x6b
 800ae18:	4b17      	ldr	r3, [pc, #92]	; (800ae78 <_Balloc+0x78>)
 800ae1a:	4818      	ldr	r0, [pc, #96]	; (800ae7c <_Balloc+0x7c>)
 800ae1c:	f000 feac 	bl	800bb78 <__assert_func>
 800ae20:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ae24:	6006      	str	r6, [r0, #0]
 800ae26:	60c6      	str	r6, [r0, #12]
 800ae28:	69e6      	ldr	r6, [r4, #28]
 800ae2a:	68f3      	ldr	r3, [r6, #12]
 800ae2c:	b183      	cbz	r3, 800ae50 <_Balloc+0x50>
 800ae2e:	69e3      	ldr	r3, [r4, #28]
 800ae30:	68db      	ldr	r3, [r3, #12]
 800ae32:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ae36:	b9b8      	cbnz	r0, 800ae68 <_Balloc+0x68>
 800ae38:	2101      	movs	r1, #1
 800ae3a:	fa01 f605 	lsl.w	r6, r1, r5
 800ae3e:	1d72      	adds	r2, r6, #5
 800ae40:	4620      	mov	r0, r4
 800ae42:	0092      	lsls	r2, r2, #2
 800ae44:	f000 feb6 	bl	800bbb4 <_calloc_r>
 800ae48:	b160      	cbz	r0, 800ae64 <_Balloc+0x64>
 800ae4a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ae4e:	e00e      	b.n	800ae6e <_Balloc+0x6e>
 800ae50:	2221      	movs	r2, #33	; 0x21
 800ae52:	2104      	movs	r1, #4
 800ae54:	4620      	mov	r0, r4
 800ae56:	f000 fead 	bl	800bbb4 <_calloc_r>
 800ae5a:	69e3      	ldr	r3, [r4, #28]
 800ae5c:	60f0      	str	r0, [r6, #12]
 800ae5e:	68db      	ldr	r3, [r3, #12]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d1e4      	bne.n	800ae2e <_Balloc+0x2e>
 800ae64:	2000      	movs	r0, #0
 800ae66:	bd70      	pop	{r4, r5, r6, pc}
 800ae68:	6802      	ldr	r2, [r0, #0]
 800ae6a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ae6e:	2300      	movs	r3, #0
 800ae70:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ae74:	e7f7      	b.n	800ae66 <_Balloc+0x66>
 800ae76:	bf00      	nop
 800ae78:	0800cd77 	.word	0x0800cd77
 800ae7c:	0800ce57 	.word	0x0800ce57

0800ae80 <_Bfree>:
 800ae80:	b570      	push	{r4, r5, r6, lr}
 800ae82:	69c6      	ldr	r6, [r0, #28]
 800ae84:	4605      	mov	r5, r0
 800ae86:	460c      	mov	r4, r1
 800ae88:	b976      	cbnz	r6, 800aea8 <_Bfree+0x28>
 800ae8a:	2010      	movs	r0, #16
 800ae8c:	f7ff fef2 	bl	800ac74 <malloc>
 800ae90:	4602      	mov	r2, r0
 800ae92:	61e8      	str	r0, [r5, #28]
 800ae94:	b920      	cbnz	r0, 800aea0 <_Bfree+0x20>
 800ae96:	218f      	movs	r1, #143	; 0x8f
 800ae98:	4b08      	ldr	r3, [pc, #32]	; (800aebc <_Bfree+0x3c>)
 800ae9a:	4809      	ldr	r0, [pc, #36]	; (800aec0 <_Bfree+0x40>)
 800ae9c:	f000 fe6c 	bl	800bb78 <__assert_func>
 800aea0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aea4:	6006      	str	r6, [r0, #0]
 800aea6:	60c6      	str	r6, [r0, #12]
 800aea8:	b13c      	cbz	r4, 800aeba <_Bfree+0x3a>
 800aeaa:	69eb      	ldr	r3, [r5, #28]
 800aeac:	6862      	ldr	r2, [r4, #4]
 800aeae:	68db      	ldr	r3, [r3, #12]
 800aeb0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800aeb4:	6021      	str	r1, [r4, #0]
 800aeb6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800aeba:	bd70      	pop	{r4, r5, r6, pc}
 800aebc:	0800cd77 	.word	0x0800cd77
 800aec0:	0800ce57 	.word	0x0800ce57

0800aec4 <__multadd>:
 800aec4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aec8:	4607      	mov	r7, r0
 800aeca:	460c      	mov	r4, r1
 800aecc:	461e      	mov	r6, r3
 800aece:	2000      	movs	r0, #0
 800aed0:	690d      	ldr	r5, [r1, #16]
 800aed2:	f101 0c14 	add.w	ip, r1, #20
 800aed6:	f8dc 3000 	ldr.w	r3, [ip]
 800aeda:	3001      	adds	r0, #1
 800aedc:	b299      	uxth	r1, r3
 800aede:	fb02 6101 	mla	r1, r2, r1, r6
 800aee2:	0c1e      	lsrs	r6, r3, #16
 800aee4:	0c0b      	lsrs	r3, r1, #16
 800aee6:	fb02 3306 	mla	r3, r2, r6, r3
 800aeea:	b289      	uxth	r1, r1
 800aeec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800aef0:	4285      	cmp	r5, r0
 800aef2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800aef6:	f84c 1b04 	str.w	r1, [ip], #4
 800aefa:	dcec      	bgt.n	800aed6 <__multadd+0x12>
 800aefc:	b30e      	cbz	r6, 800af42 <__multadd+0x7e>
 800aefe:	68a3      	ldr	r3, [r4, #8]
 800af00:	42ab      	cmp	r3, r5
 800af02:	dc19      	bgt.n	800af38 <__multadd+0x74>
 800af04:	6861      	ldr	r1, [r4, #4]
 800af06:	4638      	mov	r0, r7
 800af08:	3101      	adds	r1, #1
 800af0a:	f7ff ff79 	bl	800ae00 <_Balloc>
 800af0e:	4680      	mov	r8, r0
 800af10:	b928      	cbnz	r0, 800af1e <__multadd+0x5a>
 800af12:	4602      	mov	r2, r0
 800af14:	21ba      	movs	r1, #186	; 0xba
 800af16:	4b0c      	ldr	r3, [pc, #48]	; (800af48 <__multadd+0x84>)
 800af18:	480c      	ldr	r0, [pc, #48]	; (800af4c <__multadd+0x88>)
 800af1a:	f000 fe2d 	bl	800bb78 <__assert_func>
 800af1e:	6922      	ldr	r2, [r4, #16]
 800af20:	f104 010c 	add.w	r1, r4, #12
 800af24:	3202      	adds	r2, #2
 800af26:	0092      	lsls	r2, r2, #2
 800af28:	300c      	adds	r0, #12
 800af2a:	f7fe fc78 	bl	800981e <memcpy>
 800af2e:	4621      	mov	r1, r4
 800af30:	4638      	mov	r0, r7
 800af32:	f7ff ffa5 	bl	800ae80 <_Bfree>
 800af36:	4644      	mov	r4, r8
 800af38:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800af3c:	3501      	adds	r5, #1
 800af3e:	615e      	str	r6, [r3, #20]
 800af40:	6125      	str	r5, [r4, #16]
 800af42:	4620      	mov	r0, r4
 800af44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af48:	0800cde6 	.word	0x0800cde6
 800af4c:	0800ce57 	.word	0x0800ce57

0800af50 <__s2b>:
 800af50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af54:	4615      	mov	r5, r2
 800af56:	2209      	movs	r2, #9
 800af58:	461f      	mov	r7, r3
 800af5a:	3308      	adds	r3, #8
 800af5c:	460c      	mov	r4, r1
 800af5e:	fb93 f3f2 	sdiv	r3, r3, r2
 800af62:	4606      	mov	r6, r0
 800af64:	2201      	movs	r2, #1
 800af66:	2100      	movs	r1, #0
 800af68:	429a      	cmp	r2, r3
 800af6a:	db09      	blt.n	800af80 <__s2b+0x30>
 800af6c:	4630      	mov	r0, r6
 800af6e:	f7ff ff47 	bl	800ae00 <_Balloc>
 800af72:	b940      	cbnz	r0, 800af86 <__s2b+0x36>
 800af74:	4602      	mov	r2, r0
 800af76:	21d3      	movs	r1, #211	; 0xd3
 800af78:	4b18      	ldr	r3, [pc, #96]	; (800afdc <__s2b+0x8c>)
 800af7a:	4819      	ldr	r0, [pc, #100]	; (800afe0 <__s2b+0x90>)
 800af7c:	f000 fdfc 	bl	800bb78 <__assert_func>
 800af80:	0052      	lsls	r2, r2, #1
 800af82:	3101      	adds	r1, #1
 800af84:	e7f0      	b.n	800af68 <__s2b+0x18>
 800af86:	9b08      	ldr	r3, [sp, #32]
 800af88:	2d09      	cmp	r5, #9
 800af8a:	6143      	str	r3, [r0, #20]
 800af8c:	f04f 0301 	mov.w	r3, #1
 800af90:	6103      	str	r3, [r0, #16]
 800af92:	dd16      	ble.n	800afc2 <__s2b+0x72>
 800af94:	f104 0909 	add.w	r9, r4, #9
 800af98:	46c8      	mov	r8, r9
 800af9a:	442c      	add	r4, r5
 800af9c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800afa0:	4601      	mov	r1, r0
 800afa2:	220a      	movs	r2, #10
 800afa4:	4630      	mov	r0, r6
 800afa6:	3b30      	subs	r3, #48	; 0x30
 800afa8:	f7ff ff8c 	bl	800aec4 <__multadd>
 800afac:	45a0      	cmp	r8, r4
 800afae:	d1f5      	bne.n	800af9c <__s2b+0x4c>
 800afb0:	f1a5 0408 	sub.w	r4, r5, #8
 800afb4:	444c      	add	r4, r9
 800afb6:	1b2d      	subs	r5, r5, r4
 800afb8:	1963      	adds	r3, r4, r5
 800afba:	42bb      	cmp	r3, r7
 800afbc:	db04      	blt.n	800afc8 <__s2b+0x78>
 800afbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800afc2:	2509      	movs	r5, #9
 800afc4:	340a      	adds	r4, #10
 800afc6:	e7f6      	b.n	800afb6 <__s2b+0x66>
 800afc8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800afcc:	4601      	mov	r1, r0
 800afce:	220a      	movs	r2, #10
 800afd0:	4630      	mov	r0, r6
 800afd2:	3b30      	subs	r3, #48	; 0x30
 800afd4:	f7ff ff76 	bl	800aec4 <__multadd>
 800afd8:	e7ee      	b.n	800afb8 <__s2b+0x68>
 800afda:	bf00      	nop
 800afdc:	0800cde6 	.word	0x0800cde6
 800afe0:	0800ce57 	.word	0x0800ce57

0800afe4 <__hi0bits>:
 800afe4:	0c02      	lsrs	r2, r0, #16
 800afe6:	0412      	lsls	r2, r2, #16
 800afe8:	4603      	mov	r3, r0
 800afea:	b9ca      	cbnz	r2, 800b020 <__hi0bits+0x3c>
 800afec:	0403      	lsls	r3, r0, #16
 800afee:	2010      	movs	r0, #16
 800aff0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800aff4:	bf04      	itt	eq
 800aff6:	021b      	lsleq	r3, r3, #8
 800aff8:	3008      	addeq	r0, #8
 800affa:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800affe:	bf04      	itt	eq
 800b000:	011b      	lsleq	r3, r3, #4
 800b002:	3004      	addeq	r0, #4
 800b004:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800b008:	bf04      	itt	eq
 800b00a:	009b      	lsleq	r3, r3, #2
 800b00c:	3002      	addeq	r0, #2
 800b00e:	2b00      	cmp	r3, #0
 800b010:	db05      	blt.n	800b01e <__hi0bits+0x3a>
 800b012:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800b016:	f100 0001 	add.w	r0, r0, #1
 800b01a:	bf08      	it	eq
 800b01c:	2020      	moveq	r0, #32
 800b01e:	4770      	bx	lr
 800b020:	2000      	movs	r0, #0
 800b022:	e7e5      	b.n	800aff0 <__hi0bits+0xc>

0800b024 <__lo0bits>:
 800b024:	6803      	ldr	r3, [r0, #0]
 800b026:	4602      	mov	r2, r0
 800b028:	f013 0007 	ands.w	r0, r3, #7
 800b02c:	d00b      	beq.n	800b046 <__lo0bits+0x22>
 800b02e:	07d9      	lsls	r1, r3, #31
 800b030:	d421      	bmi.n	800b076 <__lo0bits+0x52>
 800b032:	0798      	lsls	r0, r3, #30
 800b034:	bf49      	itett	mi
 800b036:	085b      	lsrmi	r3, r3, #1
 800b038:	089b      	lsrpl	r3, r3, #2
 800b03a:	2001      	movmi	r0, #1
 800b03c:	6013      	strmi	r3, [r2, #0]
 800b03e:	bf5c      	itt	pl
 800b040:	2002      	movpl	r0, #2
 800b042:	6013      	strpl	r3, [r2, #0]
 800b044:	4770      	bx	lr
 800b046:	b299      	uxth	r1, r3
 800b048:	b909      	cbnz	r1, 800b04e <__lo0bits+0x2a>
 800b04a:	2010      	movs	r0, #16
 800b04c:	0c1b      	lsrs	r3, r3, #16
 800b04e:	b2d9      	uxtb	r1, r3
 800b050:	b909      	cbnz	r1, 800b056 <__lo0bits+0x32>
 800b052:	3008      	adds	r0, #8
 800b054:	0a1b      	lsrs	r3, r3, #8
 800b056:	0719      	lsls	r1, r3, #28
 800b058:	bf04      	itt	eq
 800b05a:	091b      	lsreq	r3, r3, #4
 800b05c:	3004      	addeq	r0, #4
 800b05e:	0799      	lsls	r1, r3, #30
 800b060:	bf04      	itt	eq
 800b062:	089b      	lsreq	r3, r3, #2
 800b064:	3002      	addeq	r0, #2
 800b066:	07d9      	lsls	r1, r3, #31
 800b068:	d403      	bmi.n	800b072 <__lo0bits+0x4e>
 800b06a:	085b      	lsrs	r3, r3, #1
 800b06c:	f100 0001 	add.w	r0, r0, #1
 800b070:	d003      	beq.n	800b07a <__lo0bits+0x56>
 800b072:	6013      	str	r3, [r2, #0]
 800b074:	4770      	bx	lr
 800b076:	2000      	movs	r0, #0
 800b078:	4770      	bx	lr
 800b07a:	2020      	movs	r0, #32
 800b07c:	4770      	bx	lr
	...

0800b080 <__i2b>:
 800b080:	b510      	push	{r4, lr}
 800b082:	460c      	mov	r4, r1
 800b084:	2101      	movs	r1, #1
 800b086:	f7ff febb 	bl	800ae00 <_Balloc>
 800b08a:	4602      	mov	r2, r0
 800b08c:	b928      	cbnz	r0, 800b09a <__i2b+0x1a>
 800b08e:	f240 1145 	movw	r1, #325	; 0x145
 800b092:	4b04      	ldr	r3, [pc, #16]	; (800b0a4 <__i2b+0x24>)
 800b094:	4804      	ldr	r0, [pc, #16]	; (800b0a8 <__i2b+0x28>)
 800b096:	f000 fd6f 	bl	800bb78 <__assert_func>
 800b09a:	2301      	movs	r3, #1
 800b09c:	6144      	str	r4, [r0, #20]
 800b09e:	6103      	str	r3, [r0, #16]
 800b0a0:	bd10      	pop	{r4, pc}
 800b0a2:	bf00      	nop
 800b0a4:	0800cde6 	.word	0x0800cde6
 800b0a8:	0800ce57 	.word	0x0800ce57

0800b0ac <__multiply>:
 800b0ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0b0:	4691      	mov	r9, r2
 800b0b2:	690a      	ldr	r2, [r1, #16]
 800b0b4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b0b8:	460c      	mov	r4, r1
 800b0ba:	429a      	cmp	r2, r3
 800b0bc:	bfbe      	ittt	lt
 800b0be:	460b      	movlt	r3, r1
 800b0c0:	464c      	movlt	r4, r9
 800b0c2:	4699      	movlt	r9, r3
 800b0c4:	6927      	ldr	r7, [r4, #16]
 800b0c6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b0ca:	68a3      	ldr	r3, [r4, #8]
 800b0cc:	6861      	ldr	r1, [r4, #4]
 800b0ce:	eb07 060a 	add.w	r6, r7, sl
 800b0d2:	42b3      	cmp	r3, r6
 800b0d4:	b085      	sub	sp, #20
 800b0d6:	bfb8      	it	lt
 800b0d8:	3101      	addlt	r1, #1
 800b0da:	f7ff fe91 	bl	800ae00 <_Balloc>
 800b0de:	b930      	cbnz	r0, 800b0ee <__multiply+0x42>
 800b0e0:	4602      	mov	r2, r0
 800b0e2:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800b0e6:	4b43      	ldr	r3, [pc, #268]	; (800b1f4 <__multiply+0x148>)
 800b0e8:	4843      	ldr	r0, [pc, #268]	; (800b1f8 <__multiply+0x14c>)
 800b0ea:	f000 fd45 	bl	800bb78 <__assert_func>
 800b0ee:	f100 0514 	add.w	r5, r0, #20
 800b0f2:	462b      	mov	r3, r5
 800b0f4:	2200      	movs	r2, #0
 800b0f6:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b0fa:	4543      	cmp	r3, r8
 800b0fc:	d321      	bcc.n	800b142 <__multiply+0x96>
 800b0fe:	f104 0314 	add.w	r3, r4, #20
 800b102:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b106:	f109 0314 	add.w	r3, r9, #20
 800b10a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b10e:	9202      	str	r2, [sp, #8]
 800b110:	1b3a      	subs	r2, r7, r4
 800b112:	3a15      	subs	r2, #21
 800b114:	f022 0203 	bic.w	r2, r2, #3
 800b118:	3204      	adds	r2, #4
 800b11a:	f104 0115 	add.w	r1, r4, #21
 800b11e:	428f      	cmp	r7, r1
 800b120:	bf38      	it	cc
 800b122:	2204      	movcc	r2, #4
 800b124:	9201      	str	r2, [sp, #4]
 800b126:	9a02      	ldr	r2, [sp, #8]
 800b128:	9303      	str	r3, [sp, #12]
 800b12a:	429a      	cmp	r2, r3
 800b12c:	d80c      	bhi.n	800b148 <__multiply+0x9c>
 800b12e:	2e00      	cmp	r6, #0
 800b130:	dd03      	ble.n	800b13a <__multiply+0x8e>
 800b132:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b136:	2b00      	cmp	r3, #0
 800b138:	d05a      	beq.n	800b1f0 <__multiply+0x144>
 800b13a:	6106      	str	r6, [r0, #16]
 800b13c:	b005      	add	sp, #20
 800b13e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b142:	f843 2b04 	str.w	r2, [r3], #4
 800b146:	e7d8      	b.n	800b0fa <__multiply+0x4e>
 800b148:	f8b3 a000 	ldrh.w	sl, [r3]
 800b14c:	f1ba 0f00 	cmp.w	sl, #0
 800b150:	d023      	beq.n	800b19a <__multiply+0xee>
 800b152:	46a9      	mov	r9, r5
 800b154:	f04f 0c00 	mov.w	ip, #0
 800b158:	f104 0e14 	add.w	lr, r4, #20
 800b15c:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b160:	f8d9 1000 	ldr.w	r1, [r9]
 800b164:	fa1f fb82 	uxth.w	fp, r2
 800b168:	b289      	uxth	r1, r1
 800b16a:	fb0a 110b 	mla	r1, sl, fp, r1
 800b16e:	4461      	add	r1, ip
 800b170:	f8d9 c000 	ldr.w	ip, [r9]
 800b174:	0c12      	lsrs	r2, r2, #16
 800b176:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800b17a:	fb0a c202 	mla	r2, sl, r2, ip
 800b17e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b182:	b289      	uxth	r1, r1
 800b184:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b188:	4577      	cmp	r7, lr
 800b18a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b18e:	f849 1b04 	str.w	r1, [r9], #4
 800b192:	d8e3      	bhi.n	800b15c <__multiply+0xb0>
 800b194:	9a01      	ldr	r2, [sp, #4]
 800b196:	f845 c002 	str.w	ip, [r5, r2]
 800b19a:	9a03      	ldr	r2, [sp, #12]
 800b19c:	3304      	adds	r3, #4
 800b19e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b1a2:	f1b9 0f00 	cmp.w	r9, #0
 800b1a6:	d021      	beq.n	800b1ec <__multiply+0x140>
 800b1a8:	46ae      	mov	lr, r5
 800b1aa:	f04f 0a00 	mov.w	sl, #0
 800b1ae:	6829      	ldr	r1, [r5, #0]
 800b1b0:	f104 0c14 	add.w	ip, r4, #20
 800b1b4:	f8bc b000 	ldrh.w	fp, [ip]
 800b1b8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b1bc:	b289      	uxth	r1, r1
 800b1be:	fb09 220b 	mla	r2, r9, fp, r2
 800b1c2:	4452      	add	r2, sl
 800b1c4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b1c8:	f84e 1b04 	str.w	r1, [lr], #4
 800b1cc:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b1d0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b1d4:	f8be 1000 	ldrh.w	r1, [lr]
 800b1d8:	4567      	cmp	r7, ip
 800b1da:	fb09 110a 	mla	r1, r9, sl, r1
 800b1de:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800b1e2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b1e6:	d8e5      	bhi.n	800b1b4 <__multiply+0x108>
 800b1e8:	9a01      	ldr	r2, [sp, #4]
 800b1ea:	50a9      	str	r1, [r5, r2]
 800b1ec:	3504      	adds	r5, #4
 800b1ee:	e79a      	b.n	800b126 <__multiply+0x7a>
 800b1f0:	3e01      	subs	r6, #1
 800b1f2:	e79c      	b.n	800b12e <__multiply+0x82>
 800b1f4:	0800cde6 	.word	0x0800cde6
 800b1f8:	0800ce57 	.word	0x0800ce57

0800b1fc <__pow5mult>:
 800b1fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b200:	4615      	mov	r5, r2
 800b202:	f012 0203 	ands.w	r2, r2, #3
 800b206:	4606      	mov	r6, r0
 800b208:	460f      	mov	r7, r1
 800b20a:	d007      	beq.n	800b21c <__pow5mult+0x20>
 800b20c:	4c25      	ldr	r4, [pc, #148]	; (800b2a4 <__pow5mult+0xa8>)
 800b20e:	3a01      	subs	r2, #1
 800b210:	2300      	movs	r3, #0
 800b212:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b216:	f7ff fe55 	bl	800aec4 <__multadd>
 800b21a:	4607      	mov	r7, r0
 800b21c:	10ad      	asrs	r5, r5, #2
 800b21e:	d03d      	beq.n	800b29c <__pow5mult+0xa0>
 800b220:	69f4      	ldr	r4, [r6, #28]
 800b222:	b97c      	cbnz	r4, 800b244 <__pow5mult+0x48>
 800b224:	2010      	movs	r0, #16
 800b226:	f7ff fd25 	bl	800ac74 <malloc>
 800b22a:	4602      	mov	r2, r0
 800b22c:	61f0      	str	r0, [r6, #28]
 800b22e:	b928      	cbnz	r0, 800b23c <__pow5mult+0x40>
 800b230:	f240 11b3 	movw	r1, #435	; 0x1b3
 800b234:	4b1c      	ldr	r3, [pc, #112]	; (800b2a8 <__pow5mult+0xac>)
 800b236:	481d      	ldr	r0, [pc, #116]	; (800b2ac <__pow5mult+0xb0>)
 800b238:	f000 fc9e 	bl	800bb78 <__assert_func>
 800b23c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b240:	6004      	str	r4, [r0, #0]
 800b242:	60c4      	str	r4, [r0, #12]
 800b244:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800b248:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b24c:	b94c      	cbnz	r4, 800b262 <__pow5mult+0x66>
 800b24e:	f240 2171 	movw	r1, #625	; 0x271
 800b252:	4630      	mov	r0, r6
 800b254:	f7ff ff14 	bl	800b080 <__i2b>
 800b258:	2300      	movs	r3, #0
 800b25a:	4604      	mov	r4, r0
 800b25c:	f8c8 0008 	str.w	r0, [r8, #8]
 800b260:	6003      	str	r3, [r0, #0]
 800b262:	f04f 0900 	mov.w	r9, #0
 800b266:	07eb      	lsls	r3, r5, #31
 800b268:	d50a      	bpl.n	800b280 <__pow5mult+0x84>
 800b26a:	4639      	mov	r1, r7
 800b26c:	4622      	mov	r2, r4
 800b26e:	4630      	mov	r0, r6
 800b270:	f7ff ff1c 	bl	800b0ac <__multiply>
 800b274:	4680      	mov	r8, r0
 800b276:	4639      	mov	r1, r7
 800b278:	4630      	mov	r0, r6
 800b27a:	f7ff fe01 	bl	800ae80 <_Bfree>
 800b27e:	4647      	mov	r7, r8
 800b280:	106d      	asrs	r5, r5, #1
 800b282:	d00b      	beq.n	800b29c <__pow5mult+0xa0>
 800b284:	6820      	ldr	r0, [r4, #0]
 800b286:	b938      	cbnz	r0, 800b298 <__pow5mult+0x9c>
 800b288:	4622      	mov	r2, r4
 800b28a:	4621      	mov	r1, r4
 800b28c:	4630      	mov	r0, r6
 800b28e:	f7ff ff0d 	bl	800b0ac <__multiply>
 800b292:	6020      	str	r0, [r4, #0]
 800b294:	f8c0 9000 	str.w	r9, [r0]
 800b298:	4604      	mov	r4, r0
 800b29a:	e7e4      	b.n	800b266 <__pow5mult+0x6a>
 800b29c:	4638      	mov	r0, r7
 800b29e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b2a2:	bf00      	nop
 800b2a4:	0800cfa0 	.word	0x0800cfa0
 800b2a8:	0800cd77 	.word	0x0800cd77
 800b2ac:	0800ce57 	.word	0x0800ce57

0800b2b0 <__lshift>:
 800b2b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b2b4:	460c      	mov	r4, r1
 800b2b6:	4607      	mov	r7, r0
 800b2b8:	4691      	mov	r9, r2
 800b2ba:	6923      	ldr	r3, [r4, #16]
 800b2bc:	6849      	ldr	r1, [r1, #4]
 800b2be:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b2c2:	68a3      	ldr	r3, [r4, #8]
 800b2c4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b2c8:	f108 0601 	add.w	r6, r8, #1
 800b2cc:	42b3      	cmp	r3, r6
 800b2ce:	db0b      	blt.n	800b2e8 <__lshift+0x38>
 800b2d0:	4638      	mov	r0, r7
 800b2d2:	f7ff fd95 	bl	800ae00 <_Balloc>
 800b2d6:	4605      	mov	r5, r0
 800b2d8:	b948      	cbnz	r0, 800b2ee <__lshift+0x3e>
 800b2da:	4602      	mov	r2, r0
 800b2dc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800b2e0:	4b27      	ldr	r3, [pc, #156]	; (800b380 <__lshift+0xd0>)
 800b2e2:	4828      	ldr	r0, [pc, #160]	; (800b384 <__lshift+0xd4>)
 800b2e4:	f000 fc48 	bl	800bb78 <__assert_func>
 800b2e8:	3101      	adds	r1, #1
 800b2ea:	005b      	lsls	r3, r3, #1
 800b2ec:	e7ee      	b.n	800b2cc <__lshift+0x1c>
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	f100 0114 	add.w	r1, r0, #20
 800b2f4:	f100 0210 	add.w	r2, r0, #16
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	4553      	cmp	r3, sl
 800b2fc:	db33      	blt.n	800b366 <__lshift+0xb6>
 800b2fe:	6920      	ldr	r0, [r4, #16]
 800b300:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b304:	f104 0314 	add.w	r3, r4, #20
 800b308:	f019 091f 	ands.w	r9, r9, #31
 800b30c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b310:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b314:	d02b      	beq.n	800b36e <__lshift+0xbe>
 800b316:	468a      	mov	sl, r1
 800b318:	2200      	movs	r2, #0
 800b31a:	f1c9 0e20 	rsb	lr, r9, #32
 800b31e:	6818      	ldr	r0, [r3, #0]
 800b320:	fa00 f009 	lsl.w	r0, r0, r9
 800b324:	4310      	orrs	r0, r2
 800b326:	f84a 0b04 	str.w	r0, [sl], #4
 800b32a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b32e:	459c      	cmp	ip, r3
 800b330:	fa22 f20e 	lsr.w	r2, r2, lr
 800b334:	d8f3      	bhi.n	800b31e <__lshift+0x6e>
 800b336:	ebac 0304 	sub.w	r3, ip, r4
 800b33a:	3b15      	subs	r3, #21
 800b33c:	f023 0303 	bic.w	r3, r3, #3
 800b340:	3304      	adds	r3, #4
 800b342:	f104 0015 	add.w	r0, r4, #21
 800b346:	4584      	cmp	ip, r0
 800b348:	bf38      	it	cc
 800b34a:	2304      	movcc	r3, #4
 800b34c:	50ca      	str	r2, [r1, r3]
 800b34e:	b10a      	cbz	r2, 800b354 <__lshift+0xa4>
 800b350:	f108 0602 	add.w	r6, r8, #2
 800b354:	3e01      	subs	r6, #1
 800b356:	4638      	mov	r0, r7
 800b358:	4621      	mov	r1, r4
 800b35a:	612e      	str	r6, [r5, #16]
 800b35c:	f7ff fd90 	bl	800ae80 <_Bfree>
 800b360:	4628      	mov	r0, r5
 800b362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b366:	f842 0f04 	str.w	r0, [r2, #4]!
 800b36a:	3301      	adds	r3, #1
 800b36c:	e7c5      	b.n	800b2fa <__lshift+0x4a>
 800b36e:	3904      	subs	r1, #4
 800b370:	f853 2b04 	ldr.w	r2, [r3], #4
 800b374:	459c      	cmp	ip, r3
 800b376:	f841 2f04 	str.w	r2, [r1, #4]!
 800b37a:	d8f9      	bhi.n	800b370 <__lshift+0xc0>
 800b37c:	e7ea      	b.n	800b354 <__lshift+0xa4>
 800b37e:	bf00      	nop
 800b380:	0800cde6 	.word	0x0800cde6
 800b384:	0800ce57 	.word	0x0800ce57

0800b388 <__mcmp>:
 800b388:	4603      	mov	r3, r0
 800b38a:	690a      	ldr	r2, [r1, #16]
 800b38c:	6900      	ldr	r0, [r0, #16]
 800b38e:	b530      	push	{r4, r5, lr}
 800b390:	1a80      	subs	r0, r0, r2
 800b392:	d10d      	bne.n	800b3b0 <__mcmp+0x28>
 800b394:	3314      	adds	r3, #20
 800b396:	3114      	adds	r1, #20
 800b398:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b39c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b3a0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b3a4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b3a8:	4295      	cmp	r5, r2
 800b3aa:	d002      	beq.n	800b3b2 <__mcmp+0x2a>
 800b3ac:	d304      	bcc.n	800b3b8 <__mcmp+0x30>
 800b3ae:	2001      	movs	r0, #1
 800b3b0:	bd30      	pop	{r4, r5, pc}
 800b3b2:	42a3      	cmp	r3, r4
 800b3b4:	d3f4      	bcc.n	800b3a0 <__mcmp+0x18>
 800b3b6:	e7fb      	b.n	800b3b0 <__mcmp+0x28>
 800b3b8:	f04f 30ff 	mov.w	r0, #4294967295
 800b3bc:	e7f8      	b.n	800b3b0 <__mcmp+0x28>
	...

0800b3c0 <__mdiff>:
 800b3c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3c4:	460d      	mov	r5, r1
 800b3c6:	4607      	mov	r7, r0
 800b3c8:	4611      	mov	r1, r2
 800b3ca:	4628      	mov	r0, r5
 800b3cc:	4614      	mov	r4, r2
 800b3ce:	f7ff ffdb 	bl	800b388 <__mcmp>
 800b3d2:	1e06      	subs	r6, r0, #0
 800b3d4:	d111      	bne.n	800b3fa <__mdiff+0x3a>
 800b3d6:	4631      	mov	r1, r6
 800b3d8:	4638      	mov	r0, r7
 800b3da:	f7ff fd11 	bl	800ae00 <_Balloc>
 800b3de:	4602      	mov	r2, r0
 800b3e0:	b928      	cbnz	r0, 800b3ee <__mdiff+0x2e>
 800b3e2:	f240 2137 	movw	r1, #567	; 0x237
 800b3e6:	4b3a      	ldr	r3, [pc, #232]	; (800b4d0 <__mdiff+0x110>)
 800b3e8:	483a      	ldr	r0, [pc, #232]	; (800b4d4 <__mdiff+0x114>)
 800b3ea:	f000 fbc5 	bl	800bb78 <__assert_func>
 800b3ee:	2301      	movs	r3, #1
 800b3f0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800b3f4:	4610      	mov	r0, r2
 800b3f6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3fa:	bfa4      	itt	ge
 800b3fc:	4623      	movge	r3, r4
 800b3fe:	462c      	movge	r4, r5
 800b400:	4638      	mov	r0, r7
 800b402:	6861      	ldr	r1, [r4, #4]
 800b404:	bfa6      	itte	ge
 800b406:	461d      	movge	r5, r3
 800b408:	2600      	movge	r6, #0
 800b40a:	2601      	movlt	r6, #1
 800b40c:	f7ff fcf8 	bl	800ae00 <_Balloc>
 800b410:	4602      	mov	r2, r0
 800b412:	b918      	cbnz	r0, 800b41c <__mdiff+0x5c>
 800b414:	f240 2145 	movw	r1, #581	; 0x245
 800b418:	4b2d      	ldr	r3, [pc, #180]	; (800b4d0 <__mdiff+0x110>)
 800b41a:	e7e5      	b.n	800b3e8 <__mdiff+0x28>
 800b41c:	f102 0814 	add.w	r8, r2, #20
 800b420:	46c2      	mov	sl, r8
 800b422:	f04f 0c00 	mov.w	ip, #0
 800b426:	6927      	ldr	r7, [r4, #16]
 800b428:	60c6      	str	r6, [r0, #12]
 800b42a:	692e      	ldr	r6, [r5, #16]
 800b42c:	f104 0014 	add.w	r0, r4, #20
 800b430:	f105 0914 	add.w	r9, r5, #20
 800b434:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800b438:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b43c:	3410      	adds	r4, #16
 800b43e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800b442:	f859 3b04 	ldr.w	r3, [r9], #4
 800b446:	fa1f f18b 	uxth.w	r1, fp
 800b44a:	4461      	add	r1, ip
 800b44c:	fa1f fc83 	uxth.w	ip, r3
 800b450:	0c1b      	lsrs	r3, r3, #16
 800b452:	eba1 010c 	sub.w	r1, r1, ip
 800b456:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b45a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800b45e:	b289      	uxth	r1, r1
 800b460:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800b464:	454e      	cmp	r6, r9
 800b466:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800b46a:	f84a 1b04 	str.w	r1, [sl], #4
 800b46e:	d8e6      	bhi.n	800b43e <__mdiff+0x7e>
 800b470:	1b73      	subs	r3, r6, r5
 800b472:	3b15      	subs	r3, #21
 800b474:	f023 0303 	bic.w	r3, r3, #3
 800b478:	3515      	adds	r5, #21
 800b47a:	3304      	adds	r3, #4
 800b47c:	42ae      	cmp	r6, r5
 800b47e:	bf38      	it	cc
 800b480:	2304      	movcc	r3, #4
 800b482:	4418      	add	r0, r3
 800b484:	4443      	add	r3, r8
 800b486:	461e      	mov	r6, r3
 800b488:	4605      	mov	r5, r0
 800b48a:	4575      	cmp	r5, lr
 800b48c:	d30e      	bcc.n	800b4ac <__mdiff+0xec>
 800b48e:	f10e 0103 	add.w	r1, lr, #3
 800b492:	1a09      	subs	r1, r1, r0
 800b494:	f021 0103 	bic.w	r1, r1, #3
 800b498:	3803      	subs	r0, #3
 800b49a:	4586      	cmp	lr, r0
 800b49c:	bf38      	it	cc
 800b49e:	2100      	movcc	r1, #0
 800b4a0:	440b      	add	r3, r1
 800b4a2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b4a6:	b189      	cbz	r1, 800b4cc <__mdiff+0x10c>
 800b4a8:	6117      	str	r7, [r2, #16]
 800b4aa:	e7a3      	b.n	800b3f4 <__mdiff+0x34>
 800b4ac:	f855 8b04 	ldr.w	r8, [r5], #4
 800b4b0:	fa1f f188 	uxth.w	r1, r8
 800b4b4:	4461      	add	r1, ip
 800b4b6:	140c      	asrs	r4, r1, #16
 800b4b8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b4bc:	b289      	uxth	r1, r1
 800b4be:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b4c2:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800b4c6:	f846 1b04 	str.w	r1, [r6], #4
 800b4ca:	e7de      	b.n	800b48a <__mdiff+0xca>
 800b4cc:	3f01      	subs	r7, #1
 800b4ce:	e7e8      	b.n	800b4a2 <__mdiff+0xe2>
 800b4d0:	0800cde6 	.word	0x0800cde6
 800b4d4:	0800ce57 	.word	0x0800ce57

0800b4d8 <__ulp>:
 800b4d8:	4b0e      	ldr	r3, [pc, #56]	; (800b514 <__ulp+0x3c>)
 800b4da:	400b      	ands	r3, r1
 800b4dc:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	dc08      	bgt.n	800b4f6 <__ulp+0x1e>
 800b4e4:	425b      	negs	r3, r3
 800b4e6:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800b4ea:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b4ee:	da04      	bge.n	800b4fa <__ulp+0x22>
 800b4f0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b4f4:	4113      	asrs	r3, r2
 800b4f6:	2200      	movs	r2, #0
 800b4f8:	e008      	b.n	800b50c <__ulp+0x34>
 800b4fa:	f1a2 0314 	sub.w	r3, r2, #20
 800b4fe:	2b1e      	cmp	r3, #30
 800b500:	bfd6      	itet	le
 800b502:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800b506:	2201      	movgt	r2, #1
 800b508:	40da      	lsrle	r2, r3
 800b50a:	2300      	movs	r3, #0
 800b50c:	4619      	mov	r1, r3
 800b50e:	4610      	mov	r0, r2
 800b510:	4770      	bx	lr
 800b512:	bf00      	nop
 800b514:	7ff00000 	.word	0x7ff00000

0800b518 <__b2d>:
 800b518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b51a:	6905      	ldr	r5, [r0, #16]
 800b51c:	f100 0714 	add.w	r7, r0, #20
 800b520:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800b524:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800b528:	1f2e      	subs	r6, r5, #4
 800b52a:	4620      	mov	r0, r4
 800b52c:	f7ff fd5a 	bl	800afe4 <__hi0bits>
 800b530:	f1c0 0220 	rsb	r2, r0, #32
 800b534:	280a      	cmp	r0, #10
 800b536:	4603      	mov	r3, r0
 800b538:	f8df c068 	ldr.w	ip, [pc, #104]	; 800b5a4 <__b2d+0x8c>
 800b53c:	600a      	str	r2, [r1, #0]
 800b53e:	dc12      	bgt.n	800b566 <__b2d+0x4e>
 800b540:	f1c0 0e0b 	rsb	lr, r0, #11
 800b544:	fa24 f20e 	lsr.w	r2, r4, lr
 800b548:	42b7      	cmp	r7, r6
 800b54a:	ea42 010c 	orr.w	r1, r2, ip
 800b54e:	bf2c      	ite	cs
 800b550:	2200      	movcs	r2, #0
 800b552:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 800b556:	3315      	adds	r3, #21
 800b558:	fa04 f303 	lsl.w	r3, r4, r3
 800b55c:	fa22 f20e 	lsr.w	r2, r2, lr
 800b560:	431a      	orrs	r2, r3
 800b562:	4610      	mov	r0, r2
 800b564:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b566:	42b7      	cmp	r7, r6
 800b568:	bf2e      	itee	cs
 800b56a:	2200      	movcs	r2, #0
 800b56c:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 800b570:	f1a5 0608 	subcc.w	r6, r5, #8
 800b574:	3b0b      	subs	r3, #11
 800b576:	d012      	beq.n	800b59e <__b2d+0x86>
 800b578:	f1c3 0520 	rsb	r5, r3, #32
 800b57c:	fa22 f105 	lsr.w	r1, r2, r5
 800b580:	409c      	lsls	r4, r3
 800b582:	430c      	orrs	r4, r1
 800b584:	42be      	cmp	r6, r7
 800b586:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 800b58a:	bf94      	ite	ls
 800b58c:	2400      	movls	r4, #0
 800b58e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800b592:	409a      	lsls	r2, r3
 800b594:	40ec      	lsrs	r4, r5
 800b596:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800b59a:	4322      	orrs	r2, r4
 800b59c:	e7e1      	b.n	800b562 <__b2d+0x4a>
 800b59e:	ea44 010c 	orr.w	r1, r4, ip
 800b5a2:	e7de      	b.n	800b562 <__b2d+0x4a>
 800b5a4:	3ff00000 	.word	0x3ff00000

0800b5a8 <__d2b>:
 800b5a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b5aa:	2101      	movs	r1, #1
 800b5ac:	4617      	mov	r7, r2
 800b5ae:	461c      	mov	r4, r3
 800b5b0:	9e08      	ldr	r6, [sp, #32]
 800b5b2:	f7ff fc25 	bl	800ae00 <_Balloc>
 800b5b6:	4605      	mov	r5, r0
 800b5b8:	b930      	cbnz	r0, 800b5c8 <__d2b+0x20>
 800b5ba:	4602      	mov	r2, r0
 800b5bc:	f240 310f 	movw	r1, #783	; 0x30f
 800b5c0:	4b22      	ldr	r3, [pc, #136]	; (800b64c <__d2b+0xa4>)
 800b5c2:	4823      	ldr	r0, [pc, #140]	; (800b650 <__d2b+0xa8>)
 800b5c4:	f000 fad8 	bl	800bb78 <__assert_func>
 800b5c8:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800b5cc:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800b5d0:	bb24      	cbnz	r4, 800b61c <__d2b+0x74>
 800b5d2:	2f00      	cmp	r7, #0
 800b5d4:	9301      	str	r3, [sp, #4]
 800b5d6:	d026      	beq.n	800b626 <__d2b+0x7e>
 800b5d8:	4668      	mov	r0, sp
 800b5da:	9700      	str	r7, [sp, #0]
 800b5dc:	f7ff fd22 	bl	800b024 <__lo0bits>
 800b5e0:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b5e4:	b1e8      	cbz	r0, 800b622 <__d2b+0x7a>
 800b5e6:	f1c0 0320 	rsb	r3, r0, #32
 800b5ea:	fa02 f303 	lsl.w	r3, r2, r3
 800b5ee:	430b      	orrs	r3, r1
 800b5f0:	40c2      	lsrs	r2, r0
 800b5f2:	616b      	str	r3, [r5, #20]
 800b5f4:	9201      	str	r2, [sp, #4]
 800b5f6:	9b01      	ldr	r3, [sp, #4]
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	bf14      	ite	ne
 800b5fc:	2102      	movne	r1, #2
 800b5fe:	2101      	moveq	r1, #1
 800b600:	61ab      	str	r3, [r5, #24]
 800b602:	6129      	str	r1, [r5, #16]
 800b604:	b1bc      	cbz	r4, 800b636 <__d2b+0x8e>
 800b606:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800b60a:	4404      	add	r4, r0
 800b60c:	6034      	str	r4, [r6, #0]
 800b60e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b612:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b614:	6018      	str	r0, [r3, #0]
 800b616:	4628      	mov	r0, r5
 800b618:	b003      	add	sp, #12
 800b61a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b61c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b620:	e7d7      	b.n	800b5d2 <__d2b+0x2a>
 800b622:	6169      	str	r1, [r5, #20]
 800b624:	e7e7      	b.n	800b5f6 <__d2b+0x4e>
 800b626:	a801      	add	r0, sp, #4
 800b628:	f7ff fcfc 	bl	800b024 <__lo0bits>
 800b62c:	9b01      	ldr	r3, [sp, #4]
 800b62e:	2101      	movs	r1, #1
 800b630:	616b      	str	r3, [r5, #20]
 800b632:	3020      	adds	r0, #32
 800b634:	e7e5      	b.n	800b602 <__d2b+0x5a>
 800b636:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b63a:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800b63e:	6030      	str	r0, [r6, #0]
 800b640:	6918      	ldr	r0, [r3, #16]
 800b642:	f7ff fccf 	bl	800afe4 <__hi0bits>
 800b646:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800b64a:	e7e2      	b.n	800b612 <__d2b+0x6a>
 800b64c:	0800cde6 	.word	0x0800cde6
 800b650:	0800ce57 	.word	0x0800ce57

0800b654 <__ratio>:
 800b654:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b658:	4688      	mov	r8, r1
 800b65a:	4669      	mov	r1, sp
 800b65c:	4681      	mov	r9, r0
 800b65e:	f7ff ff5b 	bl	800b518 <__b2d>
 800b662:	460f      	mov	r7, r1
 800b664:	4604      	mov	r4, r0
 800b666:	460d      	mov	r5, r1
 800b668:	4640      	mov	r0, r8
 800b66a:	a901      	add	r1, sp, #4
 800b66c:	f7ff ff54 	bl	800b518 <__b2d>
 800b670:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b674:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b678:	468b      	mov	fp, r1
 800b67a:	eba3 0c02 	sub.w	ip, r3, r2
 800b67e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b682:	1a9b      	subs	r3, r3, r2
 800b684:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b688:	2b00      	cmp	r3, #0
 800b68a:	bfd5      	itete	le
 800b68c:	460a      	movle	r2, r1
 800b68e:	462a      	movgt	r2, r5
 800b690:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b694:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b698:	bfd8      	it	le
 800b69a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b69e:	465b      	mov	r3, fp
 800b6a0:	4602      	mov	r2, r0
 800b6a2:	4639      	mov	r1, r7
 800b6a4:	4620      	mov	r0, r4
 800b6a6:	f7f5 f84b 	bl	8000740 <__aeabi_ddiv>
 800b6aa:	b003      	add	sp, #12
 800b6ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b6b0 <__copybits>:
 800b6b0:	3901      	subs	r1, #1
 800b6b2:	b570      	push	{r4, r5, r6, lr}
 800b6b4:	1149      	asrs	r1, r1, #5
 800b6b6:	6914      	ldr	r4, [r2, #16]
 800b6b8:	3101      	adds	r1, #1
 800b6ba:	f102 0314 	add.w	r3, r2, #20
 800b6be:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b6c2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b6c6:	1f05      	subs	r5, r0, #4
 800b6c8:	42a3      	cmp	r3, r4
 800b6ca:	d30c      	bcc.n	800b6e6 <__copybits+0x36>
 800b6cc:	1aa3      	subs	r3, r4, r2
 800b6ce:	3b11      	subs	r3, #17
 800b6d0:	f023 0303 	bic.w	r3, r3, #3
 800b6d4:	3211      	adds	r2, #17
 800b6d6:	42a2      	cmp	r2, r4
 800b6d8:	bf88      	it	hi
 800b6da:	2300      	movhi	r3, #0
 800b6dc:	4418      	add	r0, r3
 800b6de:	2300      	movs	r3, #0
 800b6e0:	4288      	cmp	r0, r1
 800b6e2:	d305      	bcc.n	800b6f0 <__copybits+0x40>
 800b6e4:	bd70      	pop	{r4, r5, r6, pc}
 800b6e6:	f853 6b04 	ldr.w	r6, [r3], #4
 800b6ea:	f845 6f04 	str.w	r6, [r5, #4]!
 800b6ee:	e7eb      	b.n	800b6c8 <__copybits+0x18>
 800b6f0:	f840 3b04 	str.w	r3, [r0], #4
 800b6f4:	e7f4      	b.n	800b6e0 <__copybits+0x30>

0800b6f6 <__any_on>:
 800b6f6:	f100 0214 	add.w	r2, r0, #20
 800b6fa:	6900      	ldr	r0, [r0, #16]
 800b6fc:	114b      	asrs	r3, r1, #5
 800b6fe:	4298      	cmp	r0, r3
 800b700:	b510      	push	{r4, lr}
 800b702:	db11      	blt.n	800b728 <__any_on+0x32>
 800b704:	dd0a      	ble.n	800b71c <__any_on+0x26>
 800b706:	f011 011f 	ands.w	r1, r1, #31
 800b70a:	d007      	beq.n	800b71c <__any_on+0x26>
 800b70c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b710:	fa24 f001 	lsr.w	r0, r4, r1
 800b714:	fa00 f101 	lsl.w	r1, r0, r1
 800b718:	428c      	cmp	r4, r1
 800b71a:	d10b      	bne.n	800b734 <__any_on+0x3e>
 800b71c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b720:	4293      	cmp	r3, r2
 800b722:	d803      	bhi.n	800b72c <__any_on+0x36>
 800b724:	2000      	movs	r0, #0
 800b726:	bd10      	pop	{r4, pc}
 800b728:	4603      	mov	r3, r0
 800b72a:	e7f7      	b.n	800b71c <__any_on+0x26>
 800b72c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b730:	2900      	cmp	r1, #0
 800b732:	d0f5      	beq.n	800b720 <__any_on+0x2a>
 800b734:	2001      	movs	r0, #1
 800b736:	e7f6      	b.n	800b726 <__any_on+0x30>

0800b738 <__ascii_wctomb>:
 800b738:	4603      	mov	r3, r0
 800b73a:	4608      	mov	r0, r1
 800b73c:	b141      	cbz	r1, 800b750 <__ascii_wctomb+0x18>
 800b73e:	2aff      	cmp	r2, #255	; 0xff
 800b740:	d904      	bls.n	800b74c <__ascii_wctomb+0x14>
 800b742:	228a      	movs	r2, #138	; 0x8a
 800b744:	f04f 30ff 	mov.w	r0, #4294967295
 800b748:	601a      	str	r2, [r3, #0]
 800b74a:	4770      	bx	lr
 800b74c:	2001      	movs	r0, #1
 800b74e:	700a      	strb	r2, [r1, #0]
 800b750:	4770      	bx	lr

0800b752 <__ssputs_r>:
 800b752:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b756:	461f      	mov	r7, r3
 800b758:	688e      	ldr	r6, [r1, #8]
 800b75a:	4682      	mov	sl, r0
 800b75c:	42be      	cmp	r6, r7
 800b75e:	460c      	mov	r4, r1
 800b760:	4690      	mov	r8, r2
 800b762:	680b      	ldr	r3, [r1, #0]
 800b764:	d82c      	bhi.n	800b7c0 <__ssputs_r+0x6e>
 800b766:	898a      	ldrh	r2, [r1, #12]
 800b768:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b76c:	d026      	beq.n	800b7bc <__ssputs_r+0x6a>
 800b76e:	6965      	ldr	r5, [r4, #20]
 800b770:	6909      	ldr	r1, [r1, #16]
 800b772:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b776:	eba3 0901 	sub.w	r9, r3, r1
 800b77a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b77e:	1c7b      	adds	r3, r7, #1
 800b780:	444b      	add	r3, r9
 800b782:	106d      	asrs	r5, r5, #1
 800b784:	429d      	cmp	r5, r3
 800b786:	bf38      	it	cc
 800b788:	461d      	movcc	r5, r3
 800b78a:	0553      	lsls	r3, r2, #21
 800b78c:	d527      	bpl.n	800b7de <__ssputs_r+0x8c>
 800b78e:	4629      	mov	r1, r5
 800b790:	f7ff fa98 	bl	800acc4 <_malloc_r>
 800b794:	4606      	mov	r6, r0
 800b796:	b360      	cbz	r0, 800b7f2 <__ssputs_r+0xa0>
 800b798:	464a      	mov	r2, r9
 800b79a:	6921      	ldr	r1, [r4, #16]
 800b79c:	f7fe f83f 	bl	800981e <memcpy>
 800b7a0:	89a3      	ldrh	r3, [r4, #12]
 800b7a2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b7a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b7aa:	81a3      	strh	r3, [r4, #12]
 800b7ac:	6126      	str	r6, [r4, #16]
 800b7ae:	444e      	add	r6, r9
 800b7b0:	6026      	str	r6, [r4, #0]
 800b7b2:	463e      	mov	r6, r7
 800b7b4:	6165      	str	r5, [r4, #20]
 800b7b6:	eba5 0509 	sub.w	r5, r5, r9
 800b7ba:	60a5      	str	r5, [r4, #8]
 800b7bc:	42be      	cmp	r6, r7
 800b7be:	d900      	bls.n	800b7c2 <__ssputs_r+0x70>
 800b7c0:	463e      	mov	r6, r7
 800b7c2:	4632      	mov	r2, r6
 800b7c4:	4641      	mov	r1, r8
 800b7c6:	6820      	ldr	r0, [r4, #0]
 800b7c8:	f7fd ff57 	bl	800967a <memmove>
 800b7cc:	2000      	movs	r0, #0
 800b7ce:	68a3      	ldr	r3, [r4, #8]
 800b7d0:	1b9b      	subs	r3, r3, r6
 800b7d2:	60a3      	str	r3, [r4, #8]
 800b7d4:	6823      	ldr	r3, [r4, #0]
 800b7d6:	4433      	add	r3, r6
 800b7d8:	6023      	str	r3, [r4, #0]
 800b7da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7de:	462a      	mov	r2, r5
 800b7e0:	f000 f9fc 	bl	800bbdc <_realloc_r>
 800b7e4:	4606      	mov	r6, r0
 800b7e6:	2800      	cmp	r0, #0
 800b7e8:	d1e0      	bne.n	800b7ac <__ssputs_r+0x5a>
 800b7ea:	4650      	mov	r0, sl
 800b7ec:	6921      	ldr	r1, [r4, #16]
 800b7ee:	f7fe fe9f 	bl	800a530 <_free_r>
 800b7f2:	230c      	movs	r3, #12
 800b7f4:	f8ca 3000 	str.w	r3, [sl]
 800b7f8:	89a3      	ldrh	r3, [r4, #12]
 800b7fa:	f04f 30ff 	mov.w	r0, #4294967295
 800b7fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b802:	81a3      	strh	r3, [r4, #12]
 800b804:	e7e9      	b.n	800b7da <__ssputs_r+0x88>
	...

0800b808 <_svfiprintf_r>:
 800b808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b80c:	4698      	mov	r8, r3
 800b80e:	898b      	ldrh	r3, [r1, #12]
 800b810:	4607      	mov	r7, r0
 800b812:	061b      	lsls	r3, r3, #24
 800b814:	460d      	mov	r5, r1
 800b816:	4614      	mov	r4, r2
 800b818:	b09d      	sub	sp, #116	; 0x74
 800b81a:	d50e      	bpl.n	800b83a <_svfiprintf_r+0x32>
 800b81c:	690b      	ldr	r3, [r1, #16]
 800b81e:	b963      	cbnz	r3, 800b83a <_svfiprintf_r+0x32>
 800b820:	2140      	movs	r1, #64	; 0x40
 800b822:	f7ff fa4f 	bl	800acc4 <_malloc_r>
 800b826:	6028      	str	r0, [r5, #0]
 800b828:	6128      	str	r0, [r5, #16]
 800b82a:	b920      	cbnz	r0, 800b836 <_svfiprintf_r+0x2e>
 800b82c:	230c      	movs	r3, #12
 800b82e:	603b      	str	r3, [r7, #0]
 800b830:	f04f 30ff 	mov.w	r0, #4294967295
 800b834:	e0d0      	b.n	800b9d8 <_svfiprintf_r+0x1d0>
 800b836:	2340      	movs	r3, #64	; 0x40
 800b838:	616b      	str	r3, [r5, #20]
 800b83a:	2300      	movs	r3, #0
 800b83c:	9309      	str	r3, [sp, #36]	; 0x24
 800b83e:	2320      	movs	r3, #32
 800b840:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b844:	2330      	movs	r3, #48	; 0x30
 800b846:	f04f 0901 	mov.w	r9, #1
 800b84a:	f8cd 800c 	str.w	r8, [sp, #12]
 800b84e:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800b9f0 <_svfiprintf_r+0x1e8>
 800b852:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b856:	4623      	mov	r3, r4
 800b858:	469a      	mov	sl, r3
 800b85a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b85e:	b10a      	cbz	r2, 800b864 <_svfiprintf_r+0x5c>
 800b860:	2a25      	cmp	r2, #37	; 0x25
 800b862:	d1f9      	bne.n	800b858 <_svfiprintf_r+0x50>
 800b864:	ebba 0b04 	subs.w	fp, sl, r4
 800b868:	d00b      	beq.n	800b882 <_svfiprintf_r+0x7a>
 800b86a:	465b      	mov	r3, fp
 800b86c:	4622      	mov	r2, r4
 800b86e:	4629      	mov	r1, r5
 800b870:	4638      	mov	r0, r7
 800b872:	f7ff ff6e 	bl	800b752 <__ssputs_r>
 800b876:	3001      	adds	r0, #1
 800b878:	f000 80a9 	beq.w	800b9ce <_svfiprintf_r+0x1c6>
 800b87c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b87e:	445a      	add	r2, fp
 800b880:	9209      	str	r2, [sp, #36]	; 0x24
 800b882:	f89a 3000 	ldrb.w	r3, [sl]
 800b886:	2b00      	cmp	r3, #0
 800b888:	f000 80a1 	beq.w	800b9ce <_svfiprintf_r+0x1c6>
 800b88c:	2300      	movs	r3, #0
 800b88e:	f04f 32ff 	mov.w	r2, #4294967295
 800b892:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b896:	f10a 0a01 	add.w	sl, sl, #1
 800b89a:	9304      	str	r3, [sp, #16]
 800b89c:	9307      	str	r3, [sp, #28]
 800b89e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b8a2:	931a      	str	r3, [sp, #104]	; 0x68
 800b8a4:	4654      	mov	r4, sl
 800b8a6:	2205      	movs	r2, #5
 800b8a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8ac:	4850      	ldr	r0, [pc, #320]	; (800b9f0 <_svfiprintf_r+0x1e8>)
 800b8ae:	f7fd ffa8 	bl	8009802 <memchr>
 800b8b2:	9a04      	ldr	r2, [sp, #16]
 800b8b4:	b9d8      	cbnz	r0, 800b8ee <_svfiprintf_r+0xe6>
 800b8b6:	06d0      	lsls	r0, r2, #27
 800b8b8:	bf44      	itt	mi
 800b8ba:	2320      	movmi	r3, #32
 800b8bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b8c0:	0711      	lsls	r1, r2, #28
 800b8c2:	bf44      	itt	mi
 800b8c4:	232b      	movmi	r3, #43	; 0x2b
 800b8c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b8ca:	f89a 3000 	ldrb.w	r3, [sl]
 800b8ce:	2b2a      	cmp	r3, #42	; 0x2a
 800b8d0:	d015      	beq.n	800b8fe <_svfiprintf_r+0xf6>
 800b8d2:	4654      	mov	r4, sl
 800b8d4:	2000      	movs	r0, #0
 800b8d6:	f04f 0c0a 	mov.w	ip, #10
 800b8da:	9a07      	ldr	r2, [sp, #28]
 800b8dc:	4621      	mov	r1, r4
 800b8de:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b8e2:	3b30      	subs	r3, #48	; 0x30
 800b8e4:	2b09      	cmp	r3, #9
 800b8e6:	d94d      	bls.n	800b984 <_svfiprintf_r+0x17c>
 800b8e8:	b1b0      	cbz	r0, 800b918 <_svfiprintf_r+0x110>
 800b8ea:	9207      	str	r2, [sp, #28]
 800b8ec:	e014      	b.n	800b918 <_svfiprintf_r+0x110>
 800b8ee:	eba0 0308 	sub.w	r3, r0, r8
 800b8f2:	fa09 f303 	lsl.w	r3, r9, r3
 800b8f6:	4313      	orrs	r3, r2
 800b8f8:	46a2      	mov	sl, r4
 800b8fa:	9304      	str	r3, [sp, #16]
 800b8fc:	e7d2      	b.n	800b8a4 <_svfiprintf_r+0x9c>
 800b8fe:	9b03      	ldr	r3, [sp, #12]
 800b900:	1d19      	adds	r1, r3, #4
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	9103      	str	r1, [sp, #12]
 800b906:	2b00      	cmp	r3, #0
 800b908:	bfbb      	ittet	lt
 800b90a:	425b      	neglt	r3, r3
 800b90c:	f042 0202 	orrlt.w	r2, r2, #2
 800b910:	9307      	strge	r3, [sp, #28]
 800b912:	9307      	strlt	r3, [sp, #28]
 800b914:	bfb8      	it	lt
 800b916:	9204      	strlt	r2, [sp, #16]
 800b918:	7823      	ldrb	r3, [r4, #0]
 800b91a:	2b2e      	cmp	r3, #46	; 0x2e
 800b91c:	d10c      	bne.n	800b938 <_svfiprintf_r+0x130>
 800b91e:	7863      	ldrb	r3, [r4, #1]
 800b920:	2b2a      	cmp	r3, #42	; 0x2a
 800b922:	d134      	bne.n	800b98e <_svfiprintf_r+0x186>
 800b924:	9b03      	ldr	r3, [sp, #12]
 800b926:	3402      	adds	r4, #2
 800b928:	1d1a      	adds	r2, r3, #4
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	9203      	str	r2, [sp, #12]
 800b92e:	2b00      	cmp	r3, #0
 800b930:	bfb8      	it	lt
 800b932:	f04f 33ff 	movlt.w	r3, #4294967295
 800b936:	9305      	str	r3, [sp, #20]
 800b938:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800b9f4 <_svfiprintf_r+0x1ec>
 800b93c:	2203      	movs	r2, #3
 800b93e:	4650      	mov	r0, sl
 800b940:	7821      	ldrb	r1, [r4, #0]
 800b942:	f7fd ff5e 	bl	8009802 <memchr>
 800b946:	b138      	cbz	r0, 800b958 <_svfiprintf_r+0x150>
 800b948:	2240      	movs	r2, #64	; 0x40
 800b94a:	9b04      	ldr	r3, [sp, #16]
 800b94c:	eba0 000a 	sub.w	r0, r0, sl
 800b950:	4082      	lsls	r2, r0
 800b952:	4313      	orrs	r3, r2
 800b954:	3401      	adds	r4, #1
 800b956:	9304      	str	r3, [sp, #16]
 800b958:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b95c:	2206      	movs	r2, #6
 800b95e:	4826      	ldr	r0, [pc, #152]	; (800b9f8 <_svfiprintf_r+0x1f0>)
 800b960:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b964:	f7fd ff4d 	bl	8009802 <memchr>
 800b968:	2800      	cmp	r0, #0
 800b96a:	d038      	beq.n	800b9de <_svfiprintf_r+0x1d6>
 800b96c:	4b23      	ldr	r3, [pc, #140]	; (800b9fc <_svfiprintf_r+0x1f4>)
 800b96e:	bb1b      	cbnz	r3, 800b9b8 <_svfiprintf_r+0x1b0>
 800b970:	9b03      	ldr	r3, [sp, #12]
 800b972:	3307      	adds	r3, #7
 800b974:	f023 0307 	bic.w	r3, r3, #7
 800b978:	3308      	adds	r3, #8
 800b97a:	9303      	str	r3, [sp, #12]
 800b97c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b97e:	4433      	add	r3, r6
 800b980:	9309      	str	r3, [sp, #36]	; 0x24
 800b982:	e768      	b.n	800b856 <_svfiprintf_r+0x4e>
 800b984:	460c      	mov	r4, r1
 800b986:	2001      	movs	r0, #1
 800b988:	fb0c 3202 	mla	r2, ip, r2, r3
 800b98c:	e7a6      	b.n	800b8dc <_svfiprintf_r+0xd4>
 800b98e:	2300      	movs	r3, #0
 800b990:	f04f 0c0a 	mov.w	ip, #10
 800b994:	4619      	mov	r1, r3
 800b996:	3401      	adds	r4, #1
 800b998:	9305      	str	r3, [sp, #20]
 800b99a:	4620      	mov	r0, r4
 800b99c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b9a0:	3a30      	subs	r2, #48	; 0x30
 800b9a2:	2a09      	cmp	r2, #9
 800b9a4:	d903      	bls.n	800b9ae <_svfiprintf_r+0x1a6>
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d0c6      	beq.n	800b938 <_svfiprintf_r+0x130>
 800b9aa:	9105      	str	r1, [sp, #20]
 800b9ac:	e7c4      	b.n	800b938 <_svfiprintf_r+0x130>
 800b9ae:	4604      	mov	r4, r0
 800b9b0:	2301      	movs	r3, #1
 800b9b2:	fb0c 2101 	mla	r1, ip, r1, r2
 800b9b6:	e7f0      	b.n	800b99a <_svfiprintf_r+0x192>
 800b9b8:	ab03      	add	r3, sp, #12
 800b9ba:	9300      	str	r3, [sp, #0]
 800b9bc:	462a      	mov	r2, r5
 800b9be:	4638      	mov	r0, r7
 800b9c0:	4b0f      	ldr	r3, [pc, #60]	; (800ba00 <_svfiprintf_r+0x1f8>)
 800b9c2:	a904      	add	r1, sp, #16
 800b9c4:	f7fc ff64 	bl	8008890 <_printf_float>
 800b9c8:	1c42      	adds	r2, r0, #1
 800b9ca:	4606      	mov	r6, r0
 800b9cc:	d1d6      	bne.n	800b97c <_svfiprintf_r+0x174>
 800b9ce:	89ab      	ldrh	r3, [r5, #12]
 800b9d0:	065b      	lsls	r3, r3, #25
 800b9d2:	f53f af2d 	bmi.w	800b830 <_svfiprintf_r+0x28>
 800b9d6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b9d8:	b01d      	add	sp, #116	; 0x74
 800b9da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9de:	ab03      	add	r3, sp, #12
 800b9e0:	9300      	str	r3, [sp, #0]
 800b9e2:	462a      	mov	r2, r5
 800b9e4:	4638      	mov	r0, r7
 800b9e6:	4b06      	ldr	r3, [pc, #24]	; (800ba00 <_svfiprintf_r+0x1f8>)
 800b9e8:	a904      	add	r1, sp, #16
 800b9ea:	f7fd f9f1 	bl	8008dd0 <_printf_i>
 800b9ee:	e7eb      	b.n	800b9c8 <_svfiprintf_r+0x1c0>
 800b9f0:	0800cfac 	.word	0x0800cfac
 800b9f4:	0800cfb2 	.word	0x0800cfb2
 800b9f8:	0800cfb6 	.word	0x0800cfb6
 800b9fc:	08008891 	.word	0x08008891
 800ba00:	0800b753 	.word	0x0800b753

0800ba04 <__sflush_r>:
 800ba04:	898a      	ldrh	r2, [r1, #12]
 800ba06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba08:	4605      	mov	r5, r0
 800ba0a:	0710      	lsls	r0, r2, #28
 800ba0c:	460c      	mov	r4, r1
 800ba0e:	d457      	bmi.n	800bac0 <__sflush_r+0xbc>
 800ba10:	684b      	ldr	r3, [r1, #4]
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	dc04      	bgt.n	800ba20 <__sflush_r+0x1c>
 800ba16:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	dc01      	bgt.n	800ba20 <__sflush_r+0x1c>
 800ba1c:	2000      	movs	r0, #0
 800ba1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba20:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ba22:	2e00      	cmp	r6, #0
 800ba24:	d0fa      	beq.n	800ba1c <__sflush_r+0x18>
 800ba26:	2300      	movs	r3, #0
 800ba28:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ba2c:	682f      	ldr	r7, [r5, #0]
 800ba2e:	6a21      	ldr	r1, [r4, #32]
 800ba30:	602b      	str	r3, [r5, #0]
 800ba32:	d032      	beq.n	800ba9a <__sflush_r+0x96>
 800ba34:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ba36:	89a3      	ldrh	r3, [r4, #12]
 800ba38:	075a      	lsls	r2, r3, #29
 800ba3a:	d505      	bpl.n	800ba48 <__sflush_r+0x44>
 800ba3c:	6863      	ldr	r3, [r4, #4]
 800ba3e:	1ac0      	subs	r0, r0, r3
 800ba40:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ba42:	b10b      	cbz	r3, 800ba48 <__sflush_r+0x44>
 800ba44:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ba46:	1ac0      	subs	r0, r0, r3
 800ba48:	2300      	movs	r3, #0
 800ba4a:	4602      	mov	r2, r0
 800ba4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ba4e:	4628      	mov	r0, r5
 800ba50:	6a21      	ldr	r1, [r4, #32]
 800ba52:	47b0      	blx	r6
 800ba54:	1c43      	adds	r3, r0, #1
 800ba56:	89a3      	ldrh	r3, [r4, #12]
 800ba58:	d106      	bne.n	800ba68 <__sflush_r+0x64>
 800ba5a:	6829      	ldr	r1, [r5, #0]
 800ba5c:	291d      	cmp	r1, #29
 800ba5e:	d82b      	bhi.n	800bab8 <__sflush_r+0xb4>
 800ba60:	4a28      	ldr	r2, [pc, #160]	; (800bb04 <__sflush_r+0x100>)
 800ba62:	410a      	asrs	r2, r1
 800ba64:	07d6      	lsls	r6, r2, #31
 800ba66:	d427      	bmi.n	800bab8 <__sflush_r+0xb4>
 800ba68:	2200      	movs	r2, #0
 800ba6a:	6062      	str	r2, [r4, #4]
 800ba6c:	6922      	ldr	r2, [r4, #16]
 800ba6e:	04d9      	lsls	r1, r3, #19
 800ba70:	6022      	str	r2, [r4, #0]
 800ba72:	d504      	bpl.n	800ba7e <__sflush_r+0x7a>
 800ba74:	1c42      	adds	r2, r0, #1
 800ba76:	d101      	bne.n	800ba7c <__sflush_r+0x78>
 800ba78:	682b      	ldr	r3, [r5, #0]
 800ba7a:	b903      	cbnz	r3, 800ba7e <__sflush_r+0x7a>
 800ba7c:	6560      	str	r0, [r4, #84]	; 0x54
 800ba7e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ba80:	602f      	str	r7, [r5, #0]
 800ba82:	2900      	cmp	r1, #0
 800ba84:	d0ca      	beq.n	800ba1c <__sflush_r+0x18>
 800ba86:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ba8a:	4299      	cmp	r1, r3
 800ba8c:	d002      	beq.n	800ba94 <__sflush_r+0x90>
 800ba8e:	4628      	mov	r0, r5
 800ba90:	f7fe fd4e 	bl	800a530 <_free_r>
 800ba94:	2000      	movs	r0, #0
 800ba96:	6360      	str	r0, [r4, #52]	; 0x34
 800ba98:	e7c1      	b.n	800ba1e <__sflush_r+0x1a>
 800ba9a:	2301      	movs	r3, #1
 800ba9c:	4628      	mov	r0, r5
 800ba9e:	47b0      	blx	r6
 800baa0:	1c41      	adds	r1, r0, #1
 800baa2:	d1c8      	bne.n	800ba36 <__sflush_r+0x32>
 800baa4:	682b      	ldr	r3, [r5, #0]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d0c5      	beq.n	800ba36 <__sflush_r+0x32>
 800baaa:	2b1d      	cmp	r3, #29
 800baac:	d001      	beq.n	800bab2 <__sflush_r+0xae>
 800baae:	2b16      	cmp	r3, #22
 800bab0:	d101      	bne.n	800bab6 <__sflush_r+0xb2>
 800bab2:	602f      	str	r7, [r5, #0]
 800bab4:	e7b2      	b.n	800ba1c <__sflush_r+0x18>
 800bab6:	89a3      	ldrh	r3, [r4, #12]
 800bab8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800babc:	81a3      	strh	r3, [r4, #12]
 800babe:	e7ae      	b.n	800ba1e <__sflush_r+0x1a>
 800bac0:	690f      	ldr	r7, [r1, #16]
 800bac2:	2f00      	cmp	r7, #0
 800bac4:	d0aa      	beq.n	800ba1c <__sflush_r+0x18>
 800bac6:	0793      	lsls	r3, r2, #30
 800bac8:	bf18      	it	ne
 800baca:	2300      	movne	r3, #0
 800bacc:	680e      	ldr	r6, [r1, #0]
 800bace:	bf08      	it	eq
 800bad0:	694b      	ldreq	r3, [r1, #20]
 800bad2:	1bf6      	subs	r6, r6, r7
 800bad4:	600f      	str	r7, [r1, #0]
 800bad6:	608b      	str	r3, [r1, #8]
 800bad8:	2e00      	cmp	r6, #0
 800bada:	dd9f      	ble.n	800ba1c <__sflush_r+0x18>
 800badc:	4633      	mov	r3, r6
 800bade:	463a      	mov	r2, r7
 800bae0:	4628      	mov	r0, r5
 800bae2:	6a21      	ldr	r1, [r4, #32]
 800bae4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800bae8:	47e0      	blx	ip
 800baea:	2800      	cmp	r0, #0
 800baec:	dc06      	bgt.n	800bafc <__sflush_r+0xf8>
 800baee:	89a3      	ldrh	r3, [r4, #12]
 800baf0:	f04f 30ff 	mov.w	r0, #4294967295
 800baf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800baf8:	81a3      	strh	r3, [r4, #12]
 800bafa:	e790      	b.n	800ba1e <__sflush_r+0x1a>
 800bafc:	4407      	add	r7, r0
 800bafe:	1a36      	subs	r6, r6, r0
 800bb00:	e7ea      	b.n	800bad8 <__sflush_r+0xd4>
 800bb02:	bf00      	nop
 800bb04:	dfbffffe 	.word	0xdfbffffe

0800bb08 <_fflush_r>:
 800bb08:	b538      	push	{r3, r4, r5, lr}
 800bb0a:	690b      	ldr	r3, [r1, #16]
 800bb0c:	4605      	mov	r5, r0
 800bb0e:	460c      	mov	r4, r1
 800bb10:	b913      	cbnz	r3, 800bb18 <_fflush_r+0x10>
 800bb12:	2500      	movs	r5, #0
 800bb14:	4628      	mov	r0, r5
 800bb16:	bd38      	pop	{r3, r4, r5, pc}
 800bb18:	b118      	cbz	r0, 800bb22 <_fflush_r+0x1a>
 800bb1a:	6a03      	ldr	r3, [r0, #32]
 800bb1c:	b90b      	cbnz	r3, 800bb22 <_fflush_r+0x1a>
 800bb1e:	f7fd fd13 	bl	8009548 <__sinit>
 800bb22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d0f3      	beq.n	800bb12 <_fflush_r+0xa>
 800bb2a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bb2c:	07d0      	lsls	r0, r2, #31
 800bb2e:	d404      	bmi.n	800bb3a <_fflush_r+0x32>
 800bb30:	0599      	lsls	r1, r3, #22
 800bb32:	d402      	bmi.n	800bb3a <_fflush_r+0x32>
 800bb34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bb36:	f7fd fe62 	bl	80097fe <__retarget_lock_acquire_recursive>
 800bb3a:	4628      	mov	r0, r5
 800bb3c:	4621      	mov	r1, r4
 800bb3e:	f7ff ff61 	bl	800ba04 <__sflush_r>
 800bb42:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bb44:	4605      	mov	r5, r0
 800bb46:	07da      	lsls	r2, r3, #31
 800bb48:	d4e4      	bmi.n	800bb14 <_fflush_r+0xc>
 800bb4a:	89a3      	ldrh	r3, [r4, #12]
 800bb4c:	059b      	lsls	r3, r3, #22
 800bb4e:	d4e1      	bmi.n	800bb14 <_fflush_r+0xc>
 800bb50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bb52:	f7fd fe55 	bl	8009800 <__retarget_lock_release_recursive>
 800bb56:	e7dd      	b.n	800bb14 <_fflush_r+0xc>

0800bb58 <_sbrk_r>:
 800bb58:	b538      	push	{r3, r4, r5, lr}
 800bb5a:	2300      	movs	r3, #0
 800bb5c:	4d05      	ldr	r5, [pc, #20]	; (800bb74 <_sbrk_r+0x1c>)
 800bb5e:	4604      	mov	r4, r0
 800bb60:	4608      	mov	r0, r1
 800bb62:	602b      	str	r3, [r5, #0]
 800bb64:	f7f6 feae 	bl	80028c4 <_sbrk>
 800bb68:	1c43      	adds	r3, r0, #1
 800bb6a:	d102      	bne.n	800bb72 <_sbrk_r+0x1a>
 800bb6c:	682b      	ldr	r3, [r5, #0]
 800bb6e:	b103      	cbz	r3, 800bb72 <_sbrk_r+0x1a>
 800bb70:	6023      	str	r3, [r4, #0]
 800bb72:	bd38      	pop	{r3, r4, r5, pc}
 800bb74:	20002968 	.word	0x20002968

0800bb78 <__assert_func>:
 800bb78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bb7a:	4614      	mov	r4, r2
 800bb7c:	461a      	mov	r2, r3
 800bb7e:	4b09      	ldr	r3, [pc, #36]	; (800bba4 <__assert_func+0x2c>)
 800bb80:	4605      	mov	r5, r0
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	68d8      	ldr	r0, [r3, #12]
 800bb86:	b14c      	cbz	r4, 800bb9c <__assert_func+0x24>
 800bb88:	4b07      	ldr	r3, [pc, #28]	; (800bba8 <__assert_func+0x30>)
 800bb8a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bb8e:	9100      	str	r1, [sp, #0]
 800bb90:	462b      	mov	r3, r5
 800bb92:	4906      	ldr	r1, [pc, #24]	; (800bbac <__assert_func+0x34>)
 800bb94:	f000 f852 	bl	800bc3c <fiprintf>
 800bb98:	f000 f862 	bl	800bc60 <abort>
 800bb9c:	4b04      	ldr	r3, [pc, #16]	; (800bbb0 <__assert_func+0x38>)
 800bb9e:	461c      	mov	r4, r3
 800bba0:	e7f3      	b.n	800bb8a <__assert_func+0x12>
 800bba2:	bf00      	nop
 800bba4:	200001dc 	.word	0x200001dc
 800bba8:	0800cfbd 	.word	0x0800cfbd
 800bbac:	0800cfca 	.word	0x0800cfca
 800bbb0:	0800cff8 	.word	0x0800cff8

0800bbb4 <_calloc_r>:
 800bbb4:	b570      	push	{r4, r5, r6, lr}
 800bbb6:	fba1 5402 	umull	r5, r4, r1, r2
 800bbba:	b934      	cbnz	r4, 800bbca <_calloc_r+0x16>
 800bbbc:	4629      	mov	r1, r5
 800bbbe:	f7ff f881 	bl	800acc4 <_malloc_r>
 800bbc2:	4606      	mov	r6, r0
 800bbc4:	b928      	cbnz	r0, 800bbd2 <_calloc_r+0x1e>
 800bbc6:	4630      	mov	r0, r6
 800bbc8:	bd70      	pop	{r4, r5, r6, pc}
 800bbca:	220c      	movs	r2, #12
 800bbcc:	2600      	movs	r6, #0
 800bbce:	6002      	str	r2, [r0, #0]
 800bbd0:	e7f9      	b.n	800bbc6 <_calloc_r+0x12>
 800bbd2:	462a      	mov	r2, r5
 800bbd4:	4621      	mov	r1, r4
 800bbd6:	f7fd fd6a 	bl	80096ae <memset>
 800bbda:	e7f4      	b.n	800bbc6 <_calloc_r+0x12>

0800bbdc <_realloc_r>:
 800bbdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbe0:	4680      	mov	r8, r0
 800bbe2:	4614      	mov	r4, r2
 800bbe4:	460e      	mov	r6, r1
 800bbe6:	b921      	cbnz	r1, 800bbf2 <_realloc_r+0x16>
 800bbe8:	4611      	mov	r1, r2
 800bbea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bbee:	f7ff b869 	b.w	800acc4 <_malloc_r>
 800bbf2:	b92a      	cbnz	r2, 800bc00 <_realloc_r+0x24>
 800bbf4:	f7fe fc9c 	bl	800a530 <_free_r>
 800bbf8:	4625      	mov	r5, r4
 800bbfa:	4628      	mov	r0, r5
 800bbfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc00:	f000 f835 	bl	800bc6e <_malloc_usable_size_r>
 800bc04:	4284      	cmp	r4, r0
 800bc06:	4607      	mov	r7, r0
 800bc08:	d802      	bhi.n	800bc10 <_realloc_r+0x34>
 800bc0a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bc0e:	d812      	bhi.n	800bc36 <_realloc_r+0x5a>
 800bc10:	4621      	mov	r1, r4
 800bc12:	4640      	mov	r0, r8
 800bc14:	f7ff f856 	bl	800acc4 <_malloc_r>
 800bc18:	4605      	mov	r5, r0
 800bc1a:	2800      	cmp	r0, #0
 800bc1c:	d0ed      	beq.n	800bbfa <_realloc_r+0x1e>
 800bc1e:	42bc      	cmp	r4, r7
 800bc20:	4622      	mov	r2, r4
 800bc22:	4631      	mov	r1, r6
 800bc24:	bf28      	it	cs
 800bc26:	463a      	movcs	r2, r7
 800bc28:	f7fd fdf9 	bl	800981e <memcpy>
 800bc2c:	4631      	mov	r1, r6
 800bc2e:	4640      	mov	r0, r8
 800bc30:	f7fe fc7e 	bl	800a530 <_free_r>
 800bc34:	e7e1      	b.n	800bbfa <_realloc_r+0x1e>
 800bc36:	4635      	mov	r5, r6
 800bc38:	e7df      	b.n	800bbfa <_realloc_r+0x1e>
	...

0800bc3c <fiprintf>:
 800bc3c:	b40e      	push	{r1, r2, r3}
 800bc3e:	b503      	push	{r0, r1, lr}
 800bc40:	4601      	mov	r1, r0
 800bc42:	ab03      	add	r3, sp, #12
 800bc44:	4805      	ldr	r0, [pc, #20]	; (800bc5c <fiprintf+0x20>)
 800bc46:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc4a:	6800      	ldr	r0, [r0, #0]
 800bc4c:	9301      	str	r3, [sp, #4]
 800bc4e:	f000 f83d 	bl	800bccc <_vfiprintf_r>
 800bc52:	b002      	add	sp, #8
 800bc54:	f85d eb04 	ldr.w	lr, [sp], #4
 800bc58:	b003      	add	sp, #12
 800bc5a:	4770      	bx	lr
 800bc5c:	200001dc 	.word	0x200001dc

0800bc60 <abort>:
 800bc60:	2006      	movs	r0, #6
 800bc62:	b508      	push	{r3, lr}
 800bc64:	f000 fa0a 	bl	800c07c <raise>
 800bc68:	2001      	movs	r0, #1
 800bc6a:	f7f6 fdff 	bl	800286c <_exit>

0800bc6e <_malloc_usable_size_r>:
 800bc6e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc72:	1f18      	subs	r0, r3, #4
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	bfbc      	itt	lt
 800bc78:	580b      	ldrlt	r3, [r1, r0]
 800bc7a:	18c0      	addlt	r0, r0, r3
 800bc7c:	4770      	bx	lr

0800bc7e <__sfputc_r>:
 800bc7e:	6893      	ldr	r3, [r2, #8]
 800bc80:	b410      	push	{r4}
 800bc82:	3b01      	subs	r3, #1
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	6093      	str	r3, [r2, #8]
 800bc88:	da07      	bge.n	800bc9a <__sfputc_r+0x1c>
 800bc8a:	6994      	ldr	r4, [r2, #24]
 800bc8c:	42a3      	cmp	r3, r4
 800bc8e:	db01      	blt.n	800bc94 <__sfputc_r+0x16>
 800bc90:	290a      	cmp	r1, #10
 800bc92:	d102      	bne.n	800bc9a <__sfputc_r+0x1c>
 800bc94:	bc10      	pop	{r4}
 800bc96:	f000 b933 	b.w	800bf00 <__swbuf_r>
 800bc9a:	6813      	ldr	r3, [r2, #0]
 800bc9c:	1c58      	adds	r0, r3, #1
 800bc9e:	6010      	str	r0, [r2, #0]
 800bca0:	7019      	strb	r1, [r3, #0]
 800bca2:	4608      	mov	r0, r1
 800bca4:	bc10      	pop	{r4}
 800bca6:	4770      	bx	lr

0800bca8 <__sfputs_r>:
 800bca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcaa:	4606      	mov	r6, r0
 800bcac:	460f      	mov	r7, r1
 800bcae:	4614      	mov	r4, r2
 800bcb0:	18d5      	adds	r5, r2, r3
 800bcb2:	42ac      	cmp	r4, r5
 800bcb4:	d101      	bne.n	800bcba <__sfputs_r+0x12>
 800bcb6:	2000      	movs	r0, #0
 800bcb8:	e007      	b.n	800bcca <__sfputs_r+0x22>
 800bcba:	463a      	mov	r2, r7
 800bcbc:	4630      	mov	r0, r6
 800bcbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bcc2:	f7ff ffdc 	bl	800bc7e <__sfputc_r>
 800bcc6:	1c43      	adds	r3, r0, #1
 800bcc8:	d1f3      	bne.n	800bcb2 <__sfputs_r+0xa>
 800bcca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bccc <_vfiprintf_r>:
 800bccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcd0:	460d      	mov	r5, r1
 800bcd2:	4614      	mov	r4, r2
 800bcd4:	4698      	mov	r8, r3
 800bcd6:	4606      	mov	r6, r0
 800bcd8:	b09d      	sub	sp, #116	; 0x74
 800bcda:	b118      	cbz	r0, 800bce4 <_vfiprintf_r+0x18>
 800bcdc:	6a03      	ldr	r3, [r0, #32]
 800bcde:	b90b      	cbnz	r3, 800bce4 <_vfiprintf_r+0x18>
 800bce0:	f7fd fc32 	bl	8009548 <__sinit>
 800bce4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bce6:	07d9      	lsls	r1, r3, #31
 800bce8:	d405      	bmi.n	800bcf6 <_vfiprintf_r+0x2a>
 800bcea:	89ab      	ldrh	r3, [r5, #12]
 800bcec:	059a      	lsls	r2, r3, #22
 800bcee:	d402      	bmi.n	800bcf6 <_vfiprintf_r+0x2a>
 800bcf0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bcf2:	f7fd fd84 	bl	80097fe <__retarget_lock_acquire_recursive>
 800bcf6:	89ab      	ldrh	r3, [r5, #12]
 800bcf8:	071b      	lsls	r3, r3, #28
 800bcfa:	d501      	bpl.n	800bd00 <_vfiprintf_r+0x34>
 800bcfc:	692b      	ldr	r3, [r5, #16]
 800bcfe:	b99b      	cbnz	r3, 800bd28 <_vfiprintf_r+0x5c>
 800bd00:	4629      	mov	r1, r5
 800bd02:	4630      	mov	r0, r6
 800bd04:	f000 f93a 	bl	800bf7c <__swsetup_r>
 800bd08:	b170      	cbz	r0, 800bd28 <_vfiprintf_r+0x5c>
 800bd0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bd0c:	07dc      	lsls	r4, r3, #31
 800bd0e:	d504      	bpl.n	800bd1a <_vfiprintf_r+0x4e>
 800bd10:	f04f 30ff 	mov.w	r0, #4294967295
 800bd14:	b01d      	add	sp, #116	; 0x74
 800bd16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd1a:	89ab      	ldrh	r3, [r5, #12]
 800bd1c:	0598      	lsls	r0, r3, #22
 800bd1e:	d4f7      	bmi.n	800bd10 <_vfiprintf_r+0x44>
 800bd20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bd22:	f7fd fd6d 	bl	8009800 <__retarget_lock_release_recursive>
 800bd26:	e7f3      	b.n	800bd10 <_vfiprintf_r+0x44>
 800bd28:	2300      	movs	r3, #0
 800bd2a:	9309      	str	r3, [sp, #36]	; 0x24
 800bd2c:	2320      	movs	r3, #32
 800bd2e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bd32:	2330      	movs	r3, #48	; 0x30
 800bd34:	f04f 0901 	mov.w	r9, #1
 800bd38:	f8cd 800c 	str.w	r8, [sp, #12]
 800bd3c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800beec <_vfiprintf_r+0x220>
 800bd40:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bd44:	4623      	mov	r3, r4
 800bd46:	469a      	mov	sl, r3
 800bd48:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bd4c:	b10a      	cbz	r2, 800bd52 <_vfiprintf_r+0x86>
 800bd4e:	2a25      	cmp	r2, #37	; 0x25
 800bd50:	d1f9      	bne.n	800bd46 <_vfiprintf_r+0x7a>
 800bd52:	ebba 0b04 	subs.w	fp, sl, r4
 800bd56:	d00b      	beq.n	800bd70 <_vfiprintf_r+0xa4>
 800bd58:	465b      	mov	r3, fp
 800bd5a:	4622      	mov	r2, r4
 800bd5c:	4629      	mov	r1, r5
 800bd5e:	4630      	mov	r0, r6
 800bd60:	f7ff ffa2 	bl	800bca8 <__sfputs_r>
 800bd64:	3001      	adds	r0, #1
 800bd66:	f000 80a9 	beq.w	800bebc <_vfiprintf_r+0x1f0>
 800bd6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bd6c:	445a      	add	r2, fp
 800bd6e:	9209      	str	r2, [sp, #36]	; 0x24
 800bd70:	f89a 3000 	ldrb.w	r3, [sl]
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	f000 80a1 	beq.w	800bebc <_vfiprintf_r+0x1f0>
 800bd7a:	2300      	movs	r3, #0
 800bd7c:	f04f 32ff 	mov.w	r2, #4294967295
 800bd80:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bd84:	f10a 0a01 	add.w	sl, sl, #1
 800bd88:	9304      	str	r3, [sp, #16]
 800bd8a:	9307      	str	r3, [sp, #28]
 800bd8c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bd90:	931a      	str	r3, [sp, #104]	; 0x68
 800bd92:	4654      	mov	r4, sl
 800bd94:	2205      	movs	r2, #5
 800bd96:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd9a:	4854      	ldr	r0, [pc, #336]	; (800beec <_vfiprintf_r+0x220>)
 800bd9c:	f7fd fd31 	bl	8009802 <memchr>
 800bda0:	9a04      	ldr	r2, [sp, #16]
 800bda2:	b9d8      	cbnz	r0, 800bddc <_vfiprintf_r+0x110>
 800bda4:	06d1      	lsls	r1, r2, #27
 800bda6:	bf44      	itt	mi
 800bda8:	2320      	movmi	r3, #32
 800bdaa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bdae:	0713      	lsls	r3, r2, #28
 800bdb0:	bf44      	itt	mi
 800bdb2:	232b      	movmi	r3, #43	; 0x2b
 800bdb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bdb8:	f89a 3000 	ldrb.w	r3, [sl]
 800bdbc:	2b2a      	cmp	r3, #42	; 0x2a
 800bdbe:	d015      	beq.n	800bdec <_vfiprintf_r+0x120>
 800bdc0:	4654      	mov	r4, sl
 800bdc2:	2000      	movs	r0, #0
 800bdc4:	f04f 0c0a 	mov.w	ip, #10
 800bdc8:	9a07      	ldr	r2, [sp, #28]
 800bdca:	4621      	mov	r1, r4
 800bdcc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bdd0:	3b30      	subs	r3, #48	; 0x30
 800bdd2:	2b09      	cmp	r3, #9
 800bdd4:	d94d      	bls.n	800be72 <_vfiprintf_r+0x1a6>
 800bdd6:	b1b0      	cbz	r0, 800be06 <_vfiprintf_r+0x13a>
 800bdd8:	9207      	str	r2, [sp, #28]
 800bdda:	e014      	b.n	800be06 <_vfiprintf_r+0x13a>
 800bddc:	eba0 0308 	sub.w	r3, r0, r8
 800bde0:	fa09 f303 	lsl.w	r3, r9, r3
 800bde4:	4313      	orrs	r3, r2
 800bde6:	46a2      	mov	sl, r4
 800bde8:	9304      	str	r3, [sp, #16]
 800bdea:	e7d2      	b.n	800bd92 <_vfiprintf_r+0xc6>
 800bdec:	9b03      	ldr	r3, [sp, #12]
 800bdee:	1d19      	adds	r1, r3, #4
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	9103      	str	r1, [sp, #12]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	bfbb      	ittet	lt
 800bdf8:	425b      	neglt	r3, r3
 800bdfa:	f042 0202 	orrlt.w	r2, r2, #2
 800bdfe:	9307      	strge	r3, [sp, #28]
 800be00:	9307      	strlt	r3, [sp, #28]
 800be02:	bfb8      	it	lt
 800be04:	9204      	strlt	r2, [sp, #16]
 800be06:	7823      	ldrb	r3, [r4, #0]
 800be08:	2b2e      	cmp	r3, #46	; 0x2e
 800be0a:	d10c      	bne.n	800be26 <_vfiprintf_r+0x15a>
 800be0c:	7863      	ldrb	r3, [r4, #1]
 800be0e:	2b2a      	cmp	r3, #42	; 0x2a
 800be10:	d134      	bne.n	800be7c <_vfiprintf_r+0x1b0>
 800be12:	9b03      	ldr	r3, [sp, #12]
 800be14:	3402      	adds	r4, #2
 800be16:	1d1a      	adds	r2, r3, #4
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	9203      	str	r2, [sp, #12]
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	bfb8      	it	lt
 800be20:	f04f 33ff 	movlt.w	r3, #4294967295
 800be24:	9305      	str	r3, [sp, #20]
 800be26:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800bef0 <_vfiprintf_r+0x224>
 800be2a:	2203      	movs	r2, #3
 800be2c:	4650      	mov	r0, sl
 800be2e:	7821      	ldrb	r1, [r4, #0]
 800be30:	f7fd fce7 	bl	8009802 <memchr>
 800be34:	b138      	cbz	r0, 800be46 <_vfiprintf_r+0x17a>
 800be36:	2240      	movs	r2, #64	; 0x40
 800be38:	9b04      	ldr	r3, [sp, #16]
 800be3a:	eba0 000a 	sub.w	r0, r0, sl
 800be3e:	4082      	lsls	r2, r0
 800be40:	4313      	orrs	r3, r2
 800be42:	3401      	adds	r4, #1
 800be44:	9304      	str	r3, [sp, #16]
 800be46:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be4a:	2206      	movs	r2, #6
 800be4c:	4829      	ldr	r0, [pc, #164]	; (800bef4 <_vfiprintf_r+0x228>)
 800be4e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800be52:	f7fd fcd6 	bl	8009802 <memchr>
 800be56:	2800      	cmp	r0, #0
 800be58:	d03f      	beq.n	800beda <_vfiprintf_r+0x20e>
 800be5a:	4b27      	ldr	r3, [pc, #156]	; (800bef8 <_vfiprintf_r+0x22c>)
 800be5c:	bb1b      	cbnz	r3, 800bea6 <_vfiprintf_r+0x1da>
 800be5e:	9b03      	ldr	r3, [sp, #12]
 800be60:	3307      	adds	r3, #7
 800be62:	f023 0307 	bic.w	r3, r3, #7
 800be66:	3308      	adds	r3, #8
 800be68:	9303      	str	r3, [sp, #12]
 800be6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be6c:	443b      	add	r3, r7
 800be6e:	9309      	str	r3, [sp, #36]	; 0x24
 800be70:	e768      	b.n	800bd44 <_vfiprintf_r+0x78>
 800be72:	460c      	mov	r4, r1
 800be74:	2001      	movs	r0, #1
 800be76:	fb0c 3202 	mla	r2, ip, r2, r3
 800be7a:	e7a6      	b.n	800bdca <_vfiprintf_r+0xfe>
 800be7c:	2300      	movs	r3, #0
 800be7e:	f04f 0c0a 	mov.w	ip, #10
 800be82:	4619      	mov	r1, r3
 800be84:	3401      	adds	r4, #1
 800be86:	9305      	str	r3, [sp, #20]
 800be88:	4620      	mov	r0, r4
 800be8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800be8e:	3a30      	subs	r2, #48	; 0x30
 800be90:	2a09      	cmp	r2, #9
 800be92:	d903      	bls.n	800be9c <_vfiprintf_r+0x1d0>
 800be94:	2b00      	cmp	r3, #0
 800be96:	d0c6      	beq.n	800be26 <_vfiprintf_r+0x15a>
 800be98:	9105      	str	r1, [sp, #20]
 800be9a:	e7c4      	b.n	800be26 <_vfiprintf_r+0x15a>
 800be9c:	4604      	mov	r4, r0
 800be9e:	2301      	movs	r3, #1
 800bea0:	fb0c 2101 	mla	r1, ip, r1, r2
 800bea4:	e7f0      	b.n	800be88 <_vfiprintf_r+0x1bc>
 800bea6:	ab03      	add	r3, sp, #12
 800bea8:	9300      	str	r3, [sp, #0]
 800beaa:	462a      	mov	r2, r5
 800beac:	4630      	mov	r0, r6
 800beae:	4b13      	ldr	r3, [pc, #76]	; (800befc <_vfiprintf_r+0x230>)
 800beb0:	a904      	add	r1, sp, #16
 800beb2:	f7fc fced 	bl	8008890 <_printf_float>
 800beb6:	4607      	mov	r7, r0
 800beb8:	1c78      	adds	r0, r7, #1
 800beba:	d1d6      	bne.n	800be6a <_vfiprintf_r+0x19e>
 800bebc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bebe:	07d9      	lsls	r1, r3, #31
 800bec0:	d405      	bmi.n	800bece <_vfiprintf_r+0x202>
 800bec2:	89ab      	ldrh	r3, [r5, #12]
 800bec4:	059a      	lsls	r2, r3, #22
 800bec6:	d402      	bmi.n	800bece <_vfiprintf_r+0x202>
 800bec8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800beca:	f7fd fc99 	bl	8009800 <__retarget_lock_release_recursive>
 800bece:	89ab      	ldrh	r3, [r5, #12]
 800bed0:	065b      	lsls	r3, r3, #25
 800bed2:	f53f af1d 	bmi.w	800bd10 <_vfiprintf_r+0x44>
 800bed6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bed8:	e71c      	b.n	800bd14 <_vfiprintf_r+0x48>
 800beda:	ab03      	add	r3, sp, #12
 800bedc:	9300      	str	r3, [sp, #0]
 800bede:	462a      	mov	r2, r5
 800bee0:	4630      	mov	r0, r6
 800bee2:	4b06      	ldr	r3, [pc, #24]	; (800befc <_vfiprintf_r+0x230>)
 800bee4:	a904      	add	r1, sp, #16
 800bee6:	f7fc ff73 	bl	8008dd0 <_printf_i>
 800beea:	e7e4      	b.n	800beb6 <_vfiprintf_r+0x1ea>
 800beec:	0800cfac 	.word	0x0800cfac
 800bef0:	0800cfb2 	.word	0x0800cfb2
 800bef4:	0800cfb6 	.word	0x0800cfb6
 800bef8:	08008891 	.word	0x08008891
 800befc:	0800bca9 	.word	0x0800bca9

0800bf00 <__swbuf_r>:
 800bf00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf02:	460e      	mov	r6, r1
 800bf04:	4614      	mov	r4, r2
 800bf06:	4605      	mov	r5, r0
 800bf08:	b118      	cbz	r0, 800bf12 <__swbuf_r+0x12>
 800bf0a:	6a03      	ldr	r3, [r0, #32]
 800bf0c:	b90b      	cbnz	r3, 800bf12 <__swbuf_r+0x12>
 800bf0e:	f7fd fb1b 	bl	8009548 <__sinit>
 800bf12:	69a3      	ldr	r3, [r4, #24]
 800bf14:	60a3      	str	r3, [r4, #8]
 800bf16:	89a3      	ldrh	r3, [r4, #12]
 800bf18:	071a      	lsls	r2, r3, #28
 800bf1a:	d525      	bpl.n	800bf68 <__swbuf_r+0x68>
 800bf1c:	6923      	ldr	r3, [r4, #16]
 800bf1e:	b31b      	cbz	r3, 800bf68 <__swbuf_r+0x68>
 800bf20:	6823      	ldr	r3, [r4, #0]
 800bf22:	6922      	ldr	r2, [r4, #16]
 800bf24:	b2f6      	uxtb	r6, r6
 800bf26:	1a98      	subs	r0, r3, r2
 800bf28:	6963      	ldr	r3, [r4, #20]
 800bf2a:	4637      	mov	r7, r6
 800bf2c:	4283      	cmp	r3, r0
 800bf2e:	dc04      	bgt.n	800bf3a <__swbuf_r+0x3a>
 800bf30:	4621      	mov	r1, r4
 800bf32:	4628      	mov	r0, r5
 800bf34:	f7ff fde8 	bl	800bb08 <_fflush_r>
 800bf38:	b9e0      	cbnz	r0, 800bf74 <__swbuf_r+0x74>
 800bf3a:	68a3      	ldr	r3, [r4, #8]
 800bf3c:	3b01      	subs	r3, #1
 800bf3e:	60a3      	str	r3, [r4, #8]
 800bf40:	6823      	ldr	r3, [r4, #0]
 800bf42:	1c5a      	adds	r2, r3, #1
 800bf44:	6022      	str	r2, [r4, #0]
 800bf46:	701e      	strb	r6, [r3, #0]
 800bf48:	6962      	ldr	r2, [r4, #20]
 800bf4a:	1c43      	adds	r3, r0, #1
 800bf4c:	429a      	cmp	r2, r3
 800bf4e:	d004      	beq.n	800bf5a <__swbuf_r+0x5a>
 800bf50:	89a3      	ldrh	r3, [r4, #12]
 800bf52:	07db      	lsls	r3, r3, #31
 800bf54:	d506      	bpl.n	800bf64 <__swbuf_r+0x64>
 800bf56:	2e0a      	cmp	r6, #10
 800bf58:	d104      	bne.n	800bf64 <__swbuf_r+0x64>
 800bf5a:	4621      	mov	r1, r4
 800bf5c:	4628      	mov	r0, r5
 800bf5e:	f7ff fdd3 	bl	800bb08 <_fflush_r>
 800bf62:	b938      	cbnz	r0, 800bf74 <__swbuf_r+0x74>
 800bf64:	4638      	mov	r0, r7
 800bf66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf68:	4621      	mov	r1, r4
 800bf6a:	4628      	mov	r0, r5
 800bf6c:	f000 f806 	bl	800bf7c <__swsetup_r>
 800bf70:	2800      	cmp	r0, #0
 800bf72:	d0d5      	beq.n	800bf20 <__swbuf_r+0x20>
 800bf74:	f04f 37ff 	mov.w	r7, #4294967295
 800bf78:	e7f4      	b.n	800bf64 <__swbuf_r+0x64>
	...

0800bf7c <__swsetup_r>:
 800bf7c:	b538      	push	{r3, r4, r5, lr}
 800bf7e:	4b2a      	ldr	r3, [pc, #168]	; (800c028 <__swsetup_r+0xac>)
 800bf80:	4605      	mov	r5, r0
 800bf82:	6818      	ldr	r0, [r3, #0]
 800bf84:	460c      	mov	r4, r1
 800bf86:	b118      	cbz	r0, 800bf90 <__swsetup_r+0x14>
 800bf88:	6a03      	ldr	r3, [r0, #32]
 800bf8a:	b90b      	cbnz	r3, 800bf90 <__swsetup_r+0x14>
 800bf8c:	f7fd fadc 	bl	8009548 <__sinit>
 800bf90:	89a3      	ldrh	r3, [r4, #12]
 800bf92:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bf96:	0718      	lsls	r0, r3, #28
 800bf98:	d422      	bmi.n	800bfe0 <__swsetup_r+0x64>
 800bf9a:	06d9      	lsls	r1, r3, #27
 800bf9c:	d407      	bmi.n	800bfae <__swsetup_r+0x32>
 800bf9e:	2309      	movs	r3, #9
 800bfa0:	602b      	str	r3, [r5, #0]
 800bfa2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bfa6:	f04f 30ff 	mov.w	r0, #4294967295
 800bfaa:	81a3      	strh	r3, [r4, #12]
 800bfac:	e034      	b.n	800c018 <__swsetup_r+0x9c>
 800bfae:	0758      	lsls	r0, r3, #29
 800bfb0:	d512      	bpl.n	800bfd8 <__swsetup_r+0x5c>
 800bfb2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bfb4:	b141      	cbz	r1, 800bfc8 <__swsetup_r+0x4c>
 800bfb6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bfba:	4299      	cmp	r1, r3
 800bfbc:	d002      	beq.n	800bfc4 <__swsetup_r+0x48>
 800bfbe:	4628      	mov	r0, r5
 800bfc0:	f7fe fab6 	bl	800a530 <_free_r>
 800bfc4:	2300      	movs	r3, #0
 800bfc6:	6363      	str	r3, [r4, #52]	; 0x34
 800bfc8:	89a3      	ldrh	r3, [r4, #12]
 800bfca:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bfce:	81a3      	strh	r3, [r4, #12]
 800bfd0:	2300      	movs	r3, #0
 800bfd2:	6063      	str	r3, [r4, #4]
 800bfd4:	6923      	ldr	r3, [r4, #16]
 800bfd6:	6023      	str	r3, [r4, #0]
 800bfd8:	89a3      	ldrh	r3, [r4, #12]
 800bfda:	f043 0308 	orr.w	r3, r3, #8
 800bfde:	81a3      	strh	r3, [r4, #12]
 800bfe0:	6923      	ldr	r3, [r4, #16]
 800bfe2:	b94b      	cbnz	r3, 800bff8 <__swsetup_r+0x7c>
 800bfe4:	89a3      	ldrh	r3, [r4, #12]
 800bfe6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bfea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bfee:	d003      	beq.n	800bff8 <__swsetup_r+0x7c>
 800bff0:	4621      	mov	r1, r4
 800bff2:	4628      	mov	r0, r5
 800bff4:	f000 f883 	bl	800c0fe <__smakebuf_r>
 800bff8:	89a0      	ldrh	r0, [r4, #12]
 800bffa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bffe:	f010 0301 	ands.w	r3, r0, #1
 800c002:	d00a      	beq.n	800c01a <__swsetup_r+0x9e>
 800c004:	2300      	movs	r3, #0
 800c006:	60a3      	str	r3, [r4, #8]
 800c008:	6963      	ldr	r3, [r4, #20]
 800c00a:	425b      	negs	r3, r3
 800c00c:	61a3      	str	r3, [r4, #24]
 800c00e:	6923      	ldr	r3, [r4, #16]
 800c010:	b943      	cbnz	r3, 800c024 <__swsetup_r+0xa8>
 800c012:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c016:	d1c4      	bne.n	800bfa2 <__swsetup_r+0x26>
 800c018:	bd38      	pop	{r3, r4, r5, pc}
 800c01a:	0781      	lsls	r1, r0, #30
 800c01c:	bf58      	it	pl
 800c01e:	6963      	ldrpl	r3, [r4, #20]
 800c020:	60a3      	str	r3, [r4, #8]
 800c022:	e7f4      	b.n	800c00e <__swsetup_r+0x92>
 800c024:	2000      	movs	r0, #0
 800c026:	e7f7      	b.n	800c018 <__swsetup_r+0x9c>
 800c028:	200001dc 	.word	0x200001dc

0800c02c <_raise_r>:
 800c02c:	291f      	cmp	r1, #31
 800c02e:	b538      	push	{r3, r4, r5, lr}
 800c030:	4604      	mov	r4, r0
 800c032:	460d      	mov	r5, r1
 800c034:	d904      	bls.n	800c040 <_raise_r+0x14>
 800c036:	2316      	movs	r3, #22
 800c038:	6003      	str	r3, [r0, #0]
 800c03a:	f04f 30ff 	mov.w	r0, #4294967295
 800c03e:	bd38      	pop	{r3, r4, r5, pc}
 800c040:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800c042:	b112      	cbz	r2, 800c04a <_raise_r+0x1e>
 800c044:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c048:	b94b      	cbnz	r3, 800c05e <_raise_r+0x32>
 800c04a:	4620      	mov	r0, r4
 800c04c:	f000 f830 	bl	800c0b0 <_getpid_r>
 800c050:	462a      	mov	r2, r5
 800c052:	4601      	mov	r1, r0
 800c054:	4620      	mov	r0, r4
 800c056:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c05a:	f000 b817 	b.w	800c08c <_kill_r>
 800c05e:	2b01      	cmp	r3, #1
 800c060:	d00a      	beq.n	800c078 <_raise_r+0x4c>
 800c062:	1c59      	adds	r1, r3, #1
 800c064:	d103      	bne.n	800c06e <_raise_r+0x42>
 800c066:	2316      	movs	r3, #22
 800c068:	6003      	str	r3, [r0, #0]
 800c06a:	2001      	movs	r0, #1
 800c06c:	e7e7      	b.n	800c03e <_raise_r+0x12>
 800c06e:	2400      	movs	r4, #0
 800c070:	4628      	mov	r0, r5
 800c072:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c076:	4798      	blx	r3
 800c078:	2000      	movs	r0, #0
 800c07a:	e7e0      	b.n	800c03e <_raise_r+0x12>

0800c07c <raise>:
 800c07c:	4b02      	ldr	r3, [pc, #8]	; (800c088 <raise+0xc>)
 800c07e:	4601      	mov	r1, r0
 800c080:	6818      	ldr	r0, [r3, #0]
 800c082:	f7ff bfd3 	b.w	800c02c <_raise_r>
 800c086:	bf00      	nop
 800c088:	200001dc 	.word	0x200001dc

0800c08c <_kill_r>:
 800c08c:	b538      	push	{r3, r4, r5, lr}
 800c08e:	2300      	movs	r3, #0
 800c090:	4d06      	ldr	r5, [pc, #24]	; (800c0ac <_kill_r+0x20>)
 800c092:	4604      	mov	r4, r0
 800c094:	4608      	mov	r0, r1
 800c096:	4611      	mov	r1, r2
 800c098:	602b      	str	r3, [r5, #0]
 800c09a:	f7f6 fbdf 	bl	800285c <_kill>
 800c09e:	1c43      	adds	r3, r0, #1
 800c0a0:	d102      	bne.n	800c0a8 <_kill_r+0x1c>
 800c0a2:	682b      	ldr	r3, [r5, #0]
 800c0a4:	b103      	cbz	r3, 800c0a8 <_kill_r+0x1c>
 800c0a6:	6023      	str	r3, [r4, #0]
 800c0a8:	bd38      	pop	{r3, r4, r5, pc}
 800c0aa:	bf00      	nop
 800c0ac:	20002968 	.word	0x20002968

0800c0b0 <_getpid_r>:
 800c0b0:	f7f6 bbd2 	b.w	8002858 <_getpid>

0800c0b4 <__swhatbuf_r>:
 800c0b4:	b570      	push	{r4, r5, r6, lr}
 800c0b6:	460c      	mov	r4, r1
 800c0b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0bc:	4615      	mov	r5, r2
 800c0be:	2900      	cmp	r1, #0
 800c0c0:	461e      	mov	r6, r3
 800c0c2:	b096      	sub	sp, #88	; 0x58
 800c0c4:	da0c      	bge.n	800c0e0 <__swhatbuf_r+0x2c>
 800c0c6:	89a3      	ldrh	r3, [r4, #12]
 800c0c8:	2100      	movs	r1, #0
 800c0ca:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c0ce:	bf0c      	ite	eq
 800c0d0:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c0d4:	2340      	movne	r3, #64	; 0x40
 800c0d6:	2000      	movs	r0, #0
 800c0d8:	6031      	str	r1, [r6, #0]
 800c0da:	602b      	str	r3, [r5, #0]
 800c0dc:	b016      	add	sp, #88	; 0x58
 800c0de:	bd70      	pop	{r4, r5, r6, pc}
 800c0e0:	466a      	mov	r2, sp
 800c0e2:	f000 f849 	bl	800c178 <_fstat_r>
 800c0e6:	2800      	cmp	r0, #0
 800c0e8:	dbed      	blt.n	800c0c6 <__swhatbuf_r+0x12>
 800c0ea:	9901      	ldr	r1, [sp, #4]
 800c0ec:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c0f0:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c0f4:	4259      	negs	r1, r3
 800c0f6:	4159      	adcs	r1, r3
 800c0f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c0fc:	e7eb      	b.n	800c0d6 <__swhatbuf_r+0x22>

0800c0fe <__smakebuf_r>:
 800c0fe:	898b      	ldrh	r3, [r1, #12]
 800c100:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c102:	079d      	lsls	r5, r3, #30
 800c104:	4606      	mov	r6, r0
 800c106:	460c      	mov	r4, r1
 800c108:	d507      	bpl.n	800c11a <__smakebuf_r+0x1c>
 800c10a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c10e:	6023      	str	r3, [r4, #0]
 800c110:	6123      	str	r3, [r4, #16]
 800c112:	2301      	movs	r3, #1
 800c114:	6163      	str	r3, [r4, #20]
 800c116:	b002      	add	sp, #8
 800c118:	bd70      	pop	{r4, r5, r6, pc}
 800c11a:	466a      	mov	r2, sp
 800c11c:	ab01      	add	r3, sp, #4
 800c11e:	f7ff ffc9 	bl	800c0b4 <__swhatbuf_r>
 800c122:	9900      	ldr	r1, [sp, #0]
 800c124:	4605      	mov	r5, r0
 800c126:	4630      	mov	r0, r6
 800c128:	f7fe fdcc 	bl	800acc4 <_malloc_r>
 800c12c:	b948      	cbnz	r0, 800c142 <__smakebuf_r+0x44>
 800c12e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c132:	059a      	lsls	r2, r3, #22
 800c134:	d4ef      	bmi.n	800c116 <__smakebuf_r+0x18>
 800c136:	f023 0303 	bic.w	r3, r3, #3
 800c13a:	f043 0302 	orr.w	r3, r3, #2
 800c13e:	81a3      	strh	r3, [r4, #12]
 800c140:	e7e3      	b.n	800c10a <__smakebuf_r+0xc>
 800c142:	89a3      	ldrh	r3, [r4, #12]
 800c144:	6020      	str	r0, [r4, #0]
 800c146:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c14a:	81a3      	strh	r3, [r4, #12]
 800c14c:	9b00      	ldr	r3, [sp, #0]
 800c14e:	6120      	str	r0, [r4, #16]
 800c150:	6163      	str	r3, [r4, #20]
 800c152:	9b01      	ldr	r3, [sp, #4]
 800c154:	b15b      	cbz	r3, 800c16e <__smakebuf_r+0x70>
 800c156:	4630      	mov	r0, r6
 800c158:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c15c:	f000 f81e 	bl	800c19c <_isatty_r>
 800c160:	b128      	cbz	r0, 800c16e <__smakebuf_r+0x70>
 800c162:	89a3      	ldrh	r3, [r4, #12]
 800c164:	f023 0303 	bic.w	r3, r3, #3
 800c168:	f043 0301 	orr.w	r3, r3, #1
 800c16c:	81a3      	strh	r3, [r4, #12]
 800c16e:	89a3      	ldrh	r3, [r4, #12]
 800c170:	431d      	orrs	r5, r3
 800c172:	81a5      	strh	r5, [r4, #12]
 800c174:	e7cf      	b.n	800c116 <__smakebuf_r+0x18>
	...

0800c178 <_fstat_r>:
 800c178:	b538      	push	{r3, r4, r5, lr}
 800c17a:	2300      	movs	r3, #0
 800c17c:	4d06      	ldr	r5, [pc, #24]	; (800c198 <_fstat_r+0x20>)
 800c17e:	4604      	mov	r4, r0
 800c180:	4608      	mov	r0, r1
 800c182:	4611      	mov	r1, r2
 800c184:	602b      	str	r3, [r5, #0]
 800c186:	f7f6 fb94 	bl	80028b2 <_fstat>
 800c18a:	1c43      	adds	r3, r0, #1
 800c18c:	d102      	bne.n	800c194 <_fstat_r+0x1c>
 800c18e:	682b      	ldr	r3, [r5, #0]
 800c190:	b103      	cbz	r3, 800c194 <_fstat_r+0x1c>
 800c192:	6023      	str	r3, [r4, #0]
 800c194:	bd38      	pop	{r3, r4, r5, pc}
 800c196:	bf00      	nop
 800c198:	20002968 	.word	0x20002968

0800c19c <_isatty_r>:
 800c19c:	b538      	push	{r3, r4, r5, lr}
 800c19e:	2300      	movs	r3, #0
 800c1a0:	4d05      	ldr	r5, [pc, #20]	; (800c1b8 <_isatty_r+0x1c>)
 800c1a2:	4604      	mov	r4, r0
 800c1a4:	4608      	mov	r0, r1
 800c1a6:	602b      	str	r3, [r5, #0]
 800c1a8:	f7f6 fb88 	bl	80028bc <_isatty>
 800c1ac:	1c43      	adds	r3, r0, #1
 800c1ae:	d102      	bne.n	800c1b6 <_isatty_r+0x1a>
 800c1b0:	682b      	ldr	r3, [r5, #0]
 800c1b2:	b103      	cbz	r3, 800c1b6 <_isatty_r+0x1a>
 800c1b4:	6023      	str	r3, [r4, #0]
 800c1b6:	bd38      	pop	{r3, r4, r5, pc}
 800c1b8:	20002968 	.word	0x20002968

0800c1bc <_init>:
 800c1bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1be:	bf00      	nop
 800c1c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c1c2:	bc08      	pop	{r3}
 800c1c4:	469e      	mov	lr, r3
 800c1c6:	4770      	bx	lr

0800c1c8 <_fini>:
 800c1c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1ca:	bf00      	nop
 800c1cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c1ce:	bc08      	pop	{r3}
 800c1d0:	469e      	mov	lr, r3
 800c1d2:	4770      	bx	lr
