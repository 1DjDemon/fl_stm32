
fl_stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b81c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e04  0800b930  0800b930  0001b930  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c734  0800c734  000201ec  2**0
                  CONTENTS
  4 .ARM          00000000  0800c734  0800c734  000201ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c734  0800c734  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c734  0800c734  0001c734  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c738  0800c738  0001c738  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800c73c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000025c8  200001f0  0800c928  000201f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200027b8  0800c928  000227b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024344  00000000  00000000  00020215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000050ac  00000000  00000000  00044559  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00018c8b  00000000  00000000  00049605  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001730  00000000  00000000  00062290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001bb0  00000000  00000000  000639c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c907  00000000  00000000  00065570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002649e  00000000  00000000  00081e77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00098dfb  00000000  00000000  000a8315  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00141110  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005724  00000000  00000000  00141160  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f0 	.word	0x200001f0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b914 	.word	0x0800b914

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f4 	.word	0x200001f4
 800014c:	0800b914 	.word	0x0800b914

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2uiz>:
 8000a9c:	004a      	lsls	r2, r1, #1
 8000a9e:	d211      	bcs.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa4:	d211      	bcs.n	8000aca <__aeabi_d2uiz+0x2e>
 8000aa6:	d50d      	bpl.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d40e      	bmi.n	8000ad0 <__aeabi_d2uiz+0x34>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ace:	d102      	bne.n	8000ad6 <__aeabi_d2uiz+0x3a>
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad4:	4770      	bx	lr
 8000ad6:	f04f 0000 	mov.w	r0, #0
 8000ada:	4770      	bx	lr

08000adc <__aeabi_d2f>:
 8000adc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ae4:	bf24      	itt	cs
 8000ae6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aee:	d90d      	bls.n	8000b0c <__aeabi_d2f+0x30>
 8000af0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000af4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000afc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b04:	bf08      	it	eq
 8000b06:	f020 0001 	biceq.w	r0, r0, #1
 8000b0a:	4770      	bx	lr
 8000b0c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b10:	d121      	bne.n	8000b56 <__aeabi_d2f+0x7a>
 8000b12:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b16:	bfbc      	itt	lt
 8000b18:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	4770      	bxlt	lr
 8000b1e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b26:	f1c2 0218 	rsb	r2, r2, #24
 8000b2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b32:	fa20 f002 	lsr.w	r0, r0, r2
 8000b36:	bf18      	it	ne
 8000b38:	f040 0001 	orrne.w	r0, r0, #1
 8000b3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b48:	ea40 000c 	orr.w	r0, r0, ip
 8000b4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b54:	e7cc      	b.n	8000af0 <__aeabi_d2f+0x14>
 8000b56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5a:	d107      	bne.n	8000b6c <__aeabi_d2f+0x90>
 8000b5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b60:	bf1e      	ittt	ne
 8000b62:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b66:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b6a:	4770      	bxne	lr
 8000b6c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b70:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_frsub>:
 8000b7c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b80:	e002      	b.n	8000b88 <__addsf3>
 8000b82:	bf00      	nop

08000b84 <__aeabi_fsub>:
 8000b84:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b88 <__addsf3>:
 8000b88:	0042      	lsls	r2, r0, #1
 8000b8a:	bf1f      	itttt	ne
 8000b8c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b90:	ea92 0f03 	teqne	r2, r3
 8000b94:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b98:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b9c:	d06a      	beq.n	8000c74 <__addsf3+0xec>
 8000b9e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ba2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ba6:	bfc1      	itttt	gt
 8000ba8:	18d2      	addgt	r2, r2, r3
 8000baa:	4041      	eorgt	r1, r0
 8000bac:	4048      	eorgt	r0, r1
 8000bae:	4041      	eorgt	r1, r0
 8000bb0:	bfb8      	it	lt
 8000bb2:	425b      	neglt	r3, r3
 8000bb4:	2b19      	cmp	r3, #25
 8000bb6:	bf88      	it	hi
 8000bb8:	4770      	bxhi	lr
 8000bba:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bbe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bc2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bc6:	bf18      	it	ne
 8000bc8:	4240      	negne	r0, r0
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bd2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bd6:	bf18      	it	ne
 8000bd8:	4249      	negne	r1, r1
 8000bda:	ea92 0f03 	teq	r2, r3
 8000bde:	d03f      	beq.n	8000c60 <__addsf3+0xd8>
 8000be0:	f1a2 0201 	sub.w	r2, r2, #1
 8000be4:	fa41 fc03 	asr.w	ip, r1, r3
 8000be8:	eb10 000c 	adds.w	r0, r0, ip
 8000bec:	f1c3 0320 	rsb	r3, r3, #32
 8000bf0:	fa01 f103 	lsl.w	r1, r1, r3
 8000bf4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bf8:	d502      	bpl.n	8000c00 <__addsf3+0x78>
 8000bfa:	4249      	negs	r1, r1
 8000bfc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c00:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c04:	d313      	bcc.n	8000c2e <__addsf3+0xa6>
 8000c06:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c0a:	d306      	bcc.n	8000c1a <__addsf3+0x92>
 8000c0c:	0840      	lsrs	r0, r0, #1
 8000c0e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c12:	f102 0201 	add.w	r2, r2, #1
 8000c16:	2afe      	cmp	r2, #254	; 0xfe
 8000c18:	d251      	bcs.n	8000cbe <__addsf3+0x136>
 8000c1a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c1e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c22:	bf08      	it	eq
 8000c24:	f020 0001 	biceq.w	r0, r0, #1
 8000c28:	ea40 0003 	orr.w	r0, r0, r3
 8000c2c:	4770      	bx	lr
 8000c2e:	0049      	lsls	r1, r1, #1
 8000c30:	eb40 0000 	adc.w	r0, r0, r0
 8000c34:	3a01      	subs	r2, #1
 8000c36:	bf28      	it	cs
 8000c38:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c3c:	d2ed      	bcs.n	8000c1a <__addsf3+0x92>
 8000c3e:	fab0 fc80 	clz	ip, r0
 8000c42:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c46:	ebb2 020c 	subs.w	r2, r2, ip
 8000c4a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c4e:	bfaa      	itet	ge
 8000c50:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c54:	4252      	neglt	r2, r2
 8000c56:	4318      	orrge	r0, r3
 8000c58:	bfbc      	itt	lt
 8000c5a:	40d0      	lsrlt	r0, r2
 8000c5c:	4318      	orrlt	r0, r3
 8000c5e:	4770      	bx	lr
 8000c60:	f092 0f00 	teq	r2, #0
 8000c64:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c68:	bf06      	itte	eq
 8000c6a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c6e:	3201      	addeq	r2, #1
 8000c70:	3b01      	subne	r3, #1
 8000c72:	e7b5      	b.n	8000be0 <__addsf3+0x58>
 8000c74:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c7c:	bf18      	it	ne
 8000c7e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c82:	d021      	beq.n	8000cc8 <__addsf3+0x140>
 8000c84:	ea92 0f03 	teq	r2, r3
 8000c88:	d004      	beq.n	8000c94 <__addsf3+0x10c>
 8000c8a:	f092 0f00 	teq	r2, #0
 8000c8e:	bf08      	it	eq
 8000c90:	4608      	moveq	r0, r1
 8000c92:	4770      	bx	lr
 8000c94:	ea90 0f01 	teq	r0, r1
 8000c98:	bf1c      	itt	ne
 8000c9a:	2000      	movne	r0, #0
 8000c9c:	4770      	bxne	lr
 8000c9e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ca2:	d104      	bne.n	8000cae <__addsf3+0x126>
 8000ca4:	0040      	lsls	r0, r0, #1
 8000ca6:	bf28      	it	cs
 8000ca8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cac:	4770      	bx	lr
 8000cae:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cb2:	bf3c      	itt	cc
 8000cb4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cb8:	4770      	bxcc	lr
 8000cba:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cbe:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cc2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc6:	4770      	bx	lr
 8000cc8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ccc:	bf16      	itet	ne
 8000cce:	4608      	movne	r0, r1
 8000cd0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cd4:	4601      	movne	r1, r0
 8000cd6:	0242      	lsls	r2, r0, #9
 8000cd8:	bf06      	itte	eq
 8000cda:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cde:	ea90 0f01 	teqeq	r0, r1
 8000ce2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_ui2f>:
 8000ce8:	f04f 0300 	mov.w	r3, #0
 8000cec:	e004      	b.n	8000cf8 <__aeabi_i2f+0x8>
 8000cee:	bf00      	nop

08000cf0 <__aeabi_i2f>:
 8000cf0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cf4:	bf48      	it	mi
 8000cf6:	4240      	negmi	r0, r0
 8000cf8:	ea5f 0c00 	movs.w	ip, r0
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d04:	4601      	mov	r1, r0
 8000d06:	f04f 0000 	mov.w	r0, #0
 8000d0a:	e01c      	b.n	8000d46 <__aeabi_l2f+0x2a>

08000d0c <__aeabi_ul2f>:
 8000d0c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d10:	bf08      	it	eq
 8000d12:	4770      	bxeq	lr
 8000d14:	f04f 0300 	mov.w	r3, #0
 8000d18:	e00a      	b.n	8000d30 <__aeabi_l2f+0x14>
 8000d1a:	bf00      	nop

08000d1c <__aeabi_l2f>:
 8000d1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d20:	bf08      	it	eq
 8000d22:	4770      	bxeq	lr
 8000d24:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d28:	d502      	bpl.n	8000d30 <__aeabi_l2f+0x14>
 8000d2a:	4240      	negs	r0, r0
 8000d2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d30:	ea5f 0c01 	movs.w	ip, r1
 8000d34:	bf02      	ittt	eq
 8000d36:	4684      	moveq	ip, r0
 8000d38:	4601      	moveq	r1, r0
 8000d3a:	2000      	moveq	r0, #0
 8000d3c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d40:	bf08      	it	eq
 8000d42:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d46:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d4a:	fabc f28c 	clz	r2, ip
 8000d4e:	3a08      	subs	r2, #8
 8000d50:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d54:	db10      	blt.n	8000d78 <__aeabi_l2f+0x5c>
 8000d56:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d60:	f1c2 0220 	rsb	r2, r2, #32
 8000d64:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d68:	fa20 f202 	lsr.w	r2, r0, r2
 8000d6c:	eb43 0002 	adc.w	r0, r3, r2
 8000d70:	bf08      	it	eq
 8000d72:	f020 0001 	biceq.w	r0, r0, #1
 8000d76:	4770      	bx	lr
 8000d78:	f102 0220 	add.w	r2, r2, #32
 8000d7c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d80:	f1c2 0220 	rsb	r2, r2, #32
 8000d84:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d88:	fa21 f202 	lsr.w	r2, r1, r2
 8000d8c:	eb43 0002 	adc.w	r0, r3, r2
 8000d90:	bf08      	it	eq
 8000d92:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d96:	4770      	bx	lr

08000d98 <__aeabi_fmul>:
 8000d98:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d9c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000da0:	bf1e      	ittt	ne
 8000da2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000da6:	ea92 0f0c 	teqne	r2, ip
 8000daa:	ea93 0f0c 	teqne	r3, ip
 8000dae:	d06f      	beq.n	8000e90 <__aeabi_fmul+0xf8>
 8000db0:	441a      	add	r2, r3
 8000db2:	ea80 0c01 	eor.w	ip, r0, r1
 8000db6:	0240      	lsls	r0, r0, #9
 8000db8:	bf18      	it	ne
 8000dba:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dbe:	d01e      	beq.n	8000dfe <__aeabi_fmul+0x66>
 8000dc0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000dc4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dc8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000dcc:	fba0 3101 	umull	r3, r1, r0, r1
 8000dd0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dd4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dd8:	bf3e      	ittt	cc
 8000dda:	0049      	lslcc	r1, r1, #1
 8000ddc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000de0:	005b      	lslcc	r3, r3, #1
 8000de2:	ea40 0001 	orr.w	r0, r0, r1
 8000de6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dea:	2afd      	cmp	r2, #253	; 0xfd
 8000dec:	d81d      	bhi.n	8000e2a <__aeabi_fmul+0x92>
 8000dee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000df2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000df6:	bf08      	it	eq
 8000df8:	f020 0001 	biceq.w	r0, r0, #1
 8000dfc:	4770      	bx	lr
 8000dfe:	f090 0f00 	teq	r0, #0
 8000e02:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e06:	bf08      	it	eq
 8000e08:	0249      	lsleq	r1, r1, #9
 8000e0a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e0e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e12:	3a7f      	subs	r2, #127	; 0x7f
 8000e14:	bfc2      	ittt	gt
 8000e16:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e1a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e1e:	4770      	bxgt	lr
 8000e20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e24:	f04f 0300 	mov.w	r3, #0
 8000e28:	3a01      	subs	r2, #1
 8000e2a:	dc5d      	bgt.n	8000ee8 <__aeabi_fmul+0x150>
 8000e2c:	f112 0f19 	cmn.w	r2, #25
 8000e30:	bfdc      	itt	le
 8000e32:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e36:	4770      	bxle	lr
 8000e38:	f1c2 0200 	rsb	r2, r2, #0
 8000e3c:	0041      	lsls	r1, r0, #1
 8000e3e:	fa21 f102 	lsr.w	r1, r1, r2
 8000e42:	f1c2 0220 	rsb	r2, r2, #32
 8000e46:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e4a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e4e:	f140 0000 	adc.w	r0, r0, #0
 8000e52:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e56:	bf08      	it	eq
 8000e58:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e5c:	4770      	bx	lr
 8000e5e:	f092 0f00 	teq	r2, #0
 8000e62:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e66:	bf02      	ittt	eq
 8000e68:	0040      	lsleq	r0, r0, #1
 8000e6a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e6e:	3a01      	subeq	r2, #1
 8000e70:	d0f9      	beq.n	8000e66 <__aeabi_fmul+0xce>
 8000e72:	ea40 000c 	orr.w	r0, r0, ip
 8000e76:	f093 0f00 	teq	r3, #0
 8000e7a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e7e:	bf02      	ittt	eq
 8000e80:	0049      	lsleq	r1, r1, #1
 8000e82:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e86:	3b01      	subeq	r3, #1
 8000e88:	d0f9      	beq.n	8000e7e <__aeabi_fmul+0xe6>
 8000e8a:	ea41 010c 	orr.w	r1, r1, ip
 8000e8e:	e78f      	b.n	8000db0 <__aeabi_fmul+0x18>
 8000e90:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e94:	ea92 0f0c 	teq	r2, ip
 8000e98:	bf18      	it	ne
 8000e9a:	ea93 0f0c 	teqne	r3, ip
 8000e9e:	d00a      	beq.n	8000eb6 <__aeabi_fmul+0x11e>
 8000ea0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ea4:	bf18      	it	ne
 8000ea6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000eaa:	d1d8      	bne.n	8000e5e <__aeabi_fmul+0xc6>
 8000eac:	ea80 0001 	eor.w	r0, r0, r1
 8000eb0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000eb4:	4770      	bx	lr
 8000eb6:	f090 0f00 	teq	r0, #0
 8000eba:	bf17      	itett	ne
 8000ebc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ec0:	4608      	moveq	r0, r1
 8000ec2:	f091 0f00 	teqne	r1, #0
 8000ec6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eca:	d014      	beq.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ecc:	ea92 0f0c 	teq	r2, ip
 8000ed0:	d101      	bne.n	8000ed6 <__aeabi_fmul+0x13e>
 8000ed2:	0242      	lsls	r2, r0, #9
 8000ed4:	d10f      	bne.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ed6:	ea93 0f0c 	teq	r3, ip
 8000eda:	d103      	bne.n	8000ee4 <__aeabi_fmul+0x14c>
 8000edc:	024b      	lsls	r3, r1, #9
 8000ede:	bf18      	it	ne
 8000ee0:	4608      	movne	r0, r1
 8000ee2:	d108      	bne.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ee4:	ea80 0001 	eor.w	r0, r0, r1
 8000ee8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000eec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ef0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ef4:	4770      	bx	lr
 8000ef6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000efa:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000efe:	4770      	bx	lr

08000f00 <__aeabi_fdiv>:
 8000f00:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f04:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f08:	bf1e      	ittt	ne
 8000f0a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f0e:	ea92 0f0c 	teqne	r2, ip
 8000f12:	ea93 0f0c 	teqne	r3, ip
 8000f16:	d069      	beq.n	8000fec <__aeabi_fdiv+0xec>
 8000f18:	eba2 0203 	sub.w	r2, r2, r3
 8000f1c:	ea80 0c01 	eor.w	ip, r0, r1
 8000f20:	0249      	lsls	r1, r1, #9
 8000f22:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f26:	d037      	beq.n	8000f98 <__aeabi_fdiv+0x98>
 8000f28:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f2c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f30:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f34:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f38:	428b      	cmp	r3, r1
 8000f3a:	bf38      	it	cc
 8000f3c:	005b      	lslcc	r3, r3, #1
 8000f3e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f42:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f46:	428b      	cmp	r3, r1
 8000f48:	bf24      	itt	cs
 8000f4a:	1a5b      	subcs	r3, r3, r1
 8000f4c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f50:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f54:	bf24      	itt	cs
 8000f56:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f5a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f5e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f62:	bf24      	itt	cs
 8000f64:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f68:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f6c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f70:	bf24      	itt	cs
 8000f72:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f76:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f7a:	011b      	lsls	r3, r3, #4
 8000f7c:	bf18      	it	ne
 8000f7e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f82:	d1e0      	bne.n	8000f46 <__aeabi_fdiv+0x46>
 8000f84:	2afd      	cmp	r2, #253	; 0xfd
 8000f86:	f63f af50 	bhi.w	8000e2a <__aeabi_fmul+0x92>
 8000f8a:	428b      	cmp	r3, r1
 8000f8c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f90:	bf08      	it	eq
 8000f92:	f020 0001 	biceq.w	r0, r0, #1
 8000f96:	4770      	bx	lr
 8000f98:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f9c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fa0:	327f      	adds	r2, #127	; 0x7f
 8000fa2:	bfc2      	ittt	gt
 8000fa4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fa8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fac:	4770      	bxgt	lr
 8000fae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fb2:	f04f 0300 	mov.w	r3, #0
 8000fb6:	3a01      	subs	r2, #1
 8000fb8:	e737      	b.n	8000e2a <__aeabi_fmul+0x92>
 8000fba:	f092 0f00 	teq	r2, #0
 8000fbe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fc2:	bf02      	ittt	eq
 8000fc4:	0040      	lsleq	r0, r0, #1
 8000fc6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fca:	3a01      	subeq	r2, #1
 8000fcc:	d0f9      	beq.n	8000fc2 <__aeabi_fdiv+0xc2>
 8000fce:	ea40 000c 	orr.w	r0, r0, ip
 8000fd2:	f093 0f00 	teq	r3, #0
 8000fd6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fda:	bf02      	ittt	eq
 8000fdc:	0049      	lsleq	r1, r1, #1
 8000fde:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fe2:	3b01      	subeq	r3, #1
 8000fe4:	d0f9      	beq.n	8000fda <__aeabi_fdiv+0xda>
 8000fe6:	ea41 010c 	orr.w	r1, r1, ip
 8000fea:	e795      	b.n	8000f18 <__aeabi_fdiv+0x18>
 8000fec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ff0:	ea92 0f0c 	teq	r2, ip
 8000ff4:	d108      	bne.n	8001008 <__aeabi_fdiv+0x108>
 8000ff6:	0242      	lsls	r2, r0, #9
 8000ff8:	f47f af7d 	bne.w	8000ef6 <__aeabi_fmul+0x15e>
 8000ffc:	ea93 0f0c 	teq	r3, ip
 8001000:	f47f af70 	bne.w	8000ee4 <__aeabi_fmul+0x14c>
 8001004:	4608      	mov	r0, r1
 8001006:	e776      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001008:	ea93 0f0c 	teq	r3, ip
 800100c:	d104      	bne.n	8001018 <__aeabi_fdiv+0x118>
 800100e:	024b      	lsls	r3, r1, #9
 8001010:	f43f af4c 	beq.w	8000eac <__aeabi_fmul+0x114>
 8001014:	4608      	mov	r0, r1
 8001016:	e76e      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001018:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800101c:	bf18      	it	ne
 800101e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001022:	d1ca      	bne.n	8000fba <__aeabi_fdiv+0xba>
 8001024:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001028:	f47f af5c 	bne.w	8000ee4 <__aeabi_fmul+0x14c>
 800102c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001030:	f47f af3c 	bne.w	8000eac <__aeabi_fmul+0x114>
 8001034:	e75f      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001036:	bf00      	nop

08001038 <__gesf2>:
 8001038:	f04f 3cff 	mov.w	ip, #4294967295
 800103c:	e006      	b.n	800104c <__cmpsf2+0x4>
 800103e:	bf00      	nop

08001040 <__lesf2>:
 8001040:	f04f 0c01 	mov.w	ip, #1
 8001044:	e002      	b.n	800104c <__cmpsf2+0x4>
 8001046:	bf00      	nop

08001048 <__cmpsf2>:
 8001048:	f04f 0c01 	mov.w	ip, #1
 800104c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001050:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001054:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001058:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800105c:	bf18      	it	ne
 800105e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001062:	d011      	beq.n	8001088 <__cmpsf2+0x40>
 8001064:	b001      	add	sp, #4
 8001066:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800106a:	bf18      	it	ne
 800106c:	ea90 0f01 	teqne	r0, r1
 8001070:	bf58      	it	pl
 8001072:	ebb2 0003 	subspl.w	r0, r2, r3
 8001076:	bf88      	it	hi
 8001078:	17c8      	asrhi	r0, r1, #31
 800107a:	bf38      	it	cc
 800107c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001080:	bf18      	it	ne
 8001082:	f040 0001 	orrne.w	r0, r0, #1
 8001086:	4770      	bx	lr
 8001088:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800108c:	d102      	bne.n	8001094 <__cmpsf2+0x4c>
 800108e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001092:	d105      	bne.n	80010a0 <__cmpsf2+0x58>
 8001094:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001098:	d1e4      	bne.n	8001064 <__cmpsf2+0x1c>
 800109a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800109e:	d0e1      	beq.n	8001064 <__cmpsf2+0x1c>
 80010a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop

080010a8 <__aeabi_cfrcmple>:
 80010a8:	4684      	mov	ip, r0
 80010aa:	4608      	mov	r0, r1
 80010ac:	4661      	mov	r1, ip
 80010ae:	e7ff      	b.n	80010b0 <__aeabi_cfcmpeq>

080010b0 <__aeabi_cfcmpeq>:
 80010b0:	b50f      	push	{r0, r1, r2, r3, lr}
 80010b2:	f7ff ffc9 	bl	8001048 <__cmpsf2>
 80010b6:	2800      	cmp	r0, #0
 80010b8:	bf48      	it	mi
 80010ba:	f110 0f00 	cmnmi.w	r0, #0
 80010be:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010c0 <__aeabi_fcmpeq>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff fff4 	bl	80010b0 <__aeabi_cfcmpeq>
 80010c8:	bf0c      	ite	eq
 80010ca:	2001      	moveq	r0, #1
 80010cc:	2000      	movne	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmplt>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffea 	bl	80010b0 <__aeabi_cfcmpeq>
 80010dc:	bf34      	ite	cc
 80010de:	2001      	movcc	r0, #1
 80010e0:	2000      	movcs	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmple>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffe0 	bl	80010b0 <__aeabi_cfcmpeq>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpge>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffd2 	bl	80010a8 <__aeabi_cfrcmple>
 8001104:	bf94      	ite	ls
 8001106:	2001      	movls	r0, #1
 8001108:	2000      	movhi	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_fcmpgt>:
 8001110:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001114:	f7ff ffc8 	bl	80010a8 <__aeabi_cfrcmple>
 8001118:	bf34      	ite	cc
 800111a:	2001      	movcc	r0, #1
 800111c:	2000      	movcs	r0, #0
 800111e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001122:	bf00      	nop

08001124 <__aeabi_d2lz>:
 8001124:	b538      	push	{r3, r4, r5, lr}
 8001126:	4605      	mov	r5, r0
 8001128:	460c      	mov	r4, r1
 800112a:	2200      	movs	r2, #0
 800112c:	2300      	movs	r3, #0
 800112e:	4628      	mov	r0, r5
 8001130:	4621      	mov	r1, r4
 8001132:	f7ff fc4d 	bl	80009d0 <__aeabi_dcmplt>
 8001136:	b928      	cbnz	r0, 8001144 <__aeabi_d2lz+0x20>
 8001138:	4628      	mov	r0, r5
 800113a:	4621      	mov	r1, r4
 800113c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001140:	f000 b80a 	b.w	8001158 <__aeabi_d2ulz>
 8001144:	4628      	mov	r0, r5
 8001146:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 800114a:	f000 f805 	bl	8001158 <__aeabi_d2ulz>
 800114e:	4240      	negs	r0, r0
 8001150:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001154:	bd38      	pop	{r3, r4, r5, pc}
 8001156:	bf00      	nop

08001158 <__aeabi_d2ulz>:
 8001158:	b5d0      	push	{r4, r6, r7, lr}
 800115a:	2200      	movs	r2, #0
 800115c:	4b0b      	ldr	r3, [pc, #44]	; (800118c <__aeabi_d2ulz+0x34>)
 800115e:	4606      	mov	r6, r0
 8001160:	460f      	mov	r7, r1
 8001162:	f7ff f9c3 	bl	80004ec <__aeabi_dmul>
 8001166:	f7ff fc99 	bl	8000a9c <__aeabi_d2uiz>
 800116a:	4604      	mov	r4, r0
 800116c:	f7ff f944 	bl	80003f8 <__aeabi_ui2d>
 8001170:	2200      	movs	r2, #0
 8001172:	4b07      	ldr	r3, [pc, #28]	; (8001190 <__aeabi_d2ulz+0x38>)
 8001174:	f7ff f9ba 	bl	80004ec <__aeabi_dmul>
 8001178:	4602      	mov	r2, r0
 800117a:	460b      	mov	r3, r1
 800117c:	4630      	mov	r0, r6
 800117e:	4639      	mov	r1, r7
 8001180:	f7fe fffc 	bl	800017c <__aeabi_dsub>
 8001184:	f7ff fc8a 	bl	8000a9c <__aeabi_d2uiz>
 8001188:	4621      	mov	r1, r4
 800118a:	bdd0      	pop	{r4, r6, r7, pc}
 800118c:	3df00000 	.word	0x3df00000
 8001190:	41f00000 	.word	0x41f00000

08001194 <I2Cx_ReadData16>:
  status = HAL_I2C_Mem_Read(&hi2c2, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, 0x10000);
  return value;
}
//------------------------------------------------
static void I2Cx_ReadData16(uint16_t Addr, uint8_t Reg, uint16_t *Value)
{
 8001194:	b500      	push	{lr}
 8001196:	b085      	sub	sp, #20
  HAL_StatusTypeDef status = HAL_OK;
  status = HAL_I2C_Mem_Read(&hi2c2, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)Value, 2, 0x10000);
 8001198:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800119c:	9302      	str	r3, [sp, #8]
 800119e:	2302      	movs	r3, #2
 80011a0:	9301      	str	r3, [sp, #4]
 80011a2:	9200      	str	r2, [sp, #0]
 80011a4:	2301      	movs	r3, #1
 80011a6:	460a      	mov	r2, r1
 80011a8:	4601      	mov	r1, r0
 80011aa:	4803      	ldr	r0, [pc, #12]	; (80011b8 <I2Cx_ReadData16+0x24>)
 80011ac:	f002 fe7a 	bl	8003ea4 <HAL_I2C_Mem_Read>
}
 80011b0:	b005      	add	sp, #20
 80011b2:	f85d fb04 	ldr.w	pc, [sp], #4
 80011b6:	bf00      	nop
 80011b8:	20000554 	.word	0x20000554

080011bc <BME280_WriteReg>:
  HAL_StatusTypeDef status = HAL_OK;
  status = HAL_I2C_Mem_Read(&hi2c2, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)Value, 3, 0x10000);
}
//------------------------------------------------
void BME280_WriteReg(uint8_t Reg, uint8_t Value)
{
 80011bc:	b500      	push	{lr}
 80011be:	b087      	sub	sp, #28
 80011c0:	4602      	mov	r2, r0
  I2Cx_WriteData(BME280_ADDRESS, Reg, Value);
 80011c2:	f88d 1017 	strb.w	r1, [sp, #23]
  status = HAL_I2C_Mem_Write(&hi2c2, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, 0x10000);
 80011c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011ca:	9302      	str	r3, [sp, #8]
 80011cc:	2301      	movs	r3, #1
 80011ce:	9301      	str	r3, [sp, #4]
 80011d0:	f10d 0117 	add.w	r1, sp, #23
 80011d4:	9100      	str	r1, [sp, #0]
 80011d6:	21ec      	movs	r1, #236	; 0xec
 80011d8:	4802      	ldr	r0, [pc, #8]	; (80011e4 <BME280_WriteReg+0x28>)
 80011da:	f002 fdad 	bl	8003d38 <HAL_I2C_Mem_Write>
}
 80011de:	b007      	add	sp, #28
 80011e0:	f85d fb04 	ldr.w	pc, [sp], #4
 80011e4:	20000554 	.word	0x20000554

080011e8 <BME280_ReadReg>:
//------------------------------------------------
uint8_t BME280_ReadReg(uint8_t Reg)
{
 80011e8:	b500      	push	{lr}
 80011ea:	b087      	sub	sp, #28
 80011ec:	4602      	mov	r2, r0
  uint8_t value = 0;
 80011ee:	2300      	movs	r3, #0
 80011f0:	f88d 3017 	strb.w	r3, [sp, #23]
  status = HAL_I2C_Mem_Read(&hi2c2, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, 0x10000);
 80011f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011f8:	9302      	str	r3, [sp, #8]
 80011fa:	2301      	movs	r3, #1
 80011fc:	9301      	str	r3, [sp, #4]
 80011fe:	f10d 0117 	add.w	r1, sp, #23
 8001202:	9100      	str	r1, [sp, #0]
 8001204:	21ec      	movs	r1, #236	; 0xec
 8001206:	4804      	ldr	r0, [pc, #16]	; (8001218 <BME280_ReadReg+0x30>)
 8001208:	f002 fe4c 	bl	8003ea4 <HAL_I2C_Mem_Read>
  uint8_t res = I2Cx_ReadData(BME280_ADDRESS,Reg);
  return res;
}
 800120c:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8001210:	b007      	add	sp, #28
 8001212:	f85d fb04 	ldr.w	pc, [sp], #4
 8001216:	bf00      	nop
 8001218:	20000554 	.word	0x20000554

0800121c <BME280_ReadReg_U16>:
//------------------------------------------------
void BME280_ReadReg_U16(uint8_t Reg, uint16_t *Value)
{
 800121c:	b508      	push	{r3, lr}
 800121e:	460a      	mov	r2, r1
  I2Cx_ReadData16(BME280_ADDRESS,Reg,Value);
 8001220:	4601      	mov	r1, r0
 8001222:	20ec      	movs	r0, #236	; 0xec
 8001224:	f7ff ffb6 	bl	8001194 <I2Cx_ReadData16>
}
 8001228:	bd08      	pop	{r3, pc}

0800122a <BME280_ReadReg_S16>:
//------------------------------------------------
void BME280_ReadReg_S16(uint8_t Reg, int16_t *Value)
{
 800122a:	b508      	push	{r3, lr}
 800122c:	460a      	mov	r2, r1
  I2Cx_ReadData16(BME280_ADDRESS,Reg, (uint16_t*) Value);
 800122e:	4601      	mov	r1, r0
 8001230:	20ec      	movs	r0, #236	; 0xec
 8001232:	f7ff ffaf 	bl	8001194 <I2Cx_ReadData16>
}
 8001236:	bd08      	pop	{r3, pc}

08001238 <BME280_ReadReg_BE_U24>:
  I2Cx_ReadData24(BME280_ADDRESS,Reg,Value);
  *(uint32_t *) Value &= 0x00FFFFFF;
}
//------------------------------------------------
void BME280_ReadReg_BE_U24(uint8_t Reg, uint32_t *Value)
{
 8001238:	b510      	push	{r4, lr}
 800123a:	b084      	sub	sp, #16
 800123c:	4602      	mov	r2, r0
 800123e:	460c      	mov	r4, r1
  status = HAL_I2C_Mem_Read(&hi2c2, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)Value, 3, 0x10000);
 8001240:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001244:	9302      	str	r3, [sp, #8]
 8001246:	2303      	movs	r3, #3
 8001248:	9301      	str	r3, [sp, #4]
 800124a:	9100      	str	r1, [sp, #0]
 800124c:	2301      	movs	r3, #1
 800124e:	21ec      	movs	r1, #236	; 0xec
 8001250:	4807      	ldr	r0, [pc, #28]	; (8001270 <BME280_ReadReg_BE_U24+0x38>)
 8001252:	f002 fe27 	bl	8003ea4 <HAL_I2C_Mem_Read>
  I2Cx_ReadData24(BME280_ADDRESS,Reg,Value);
  *(uint32_t *) Value = be24toword(*(uint32_t *) Value) & 0x00FFFFFF;
 8001256:	6822      	ldr	r2, [r4, #0]
 8001258:	f3c2 4307 	ubfx	r3, r2, #16, #8
 800125c:	0411      	lsls	r1, r2, #16
 800125e:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
 8001262:	430b      	orrs	r3, r1
 8001264:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8001268:	4313      	orrs	r3, r2
 800126a:	6023      	str	r3, [r4, #0]
}
 800126c:	b004      	add	sp, #16
 800126e:	bd10      	pop	{r4, pc}
 8001270:	20000554 	.word	0x20000554

08001274 <BME280_ReadStatus>:
//------------------------------------------------
uint8_t BME280_ReadStatus(void)
{
 8001274:	b508      	push	{r3, lr}
  //clear unuset bits
  uint8_t res = BME280_ReadReg(BME280_REGISTER_STATUS)&0x09;
 8001276:	20f3      	movs	r0, #243	; 0xf3
 8001278:	f7ff ffb6 	bl	80011e8 <BME280_ReadReg>
  return res;
}
 800127c:	f000 0009 	and.w	r0, r0, #9
 8001280:	bd08      	pop	{r3, pc}
	...

08001284 <BME280_ReadCoefficients>:
//------------------------------------------------
void BME280_ReadCoefficients(void)
{
 8001284:	b538      	push	{r3, r4, r5, lr}
  BME280_ReadReg_U16(BME280_REGISTER_DIG_T1,&CalibData.dig_T1);
 8001286:	4c32      	ldr	r4, [pc, #200]	; (8001350 <BME280_ReadCoefficients+0xcc>)
 8001288:	4621      	mov	r1, r4
 800128a:	2088      	movs	r0, #136	; 0x88
 800128c:	f7ff ffc6 	bl	800121c <BME280_ReadReg_U16>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_T2,&CalibData.dig_T2);
 8001290:	1ca1      	adds	r1, r4, #2
 8001292:	208a      	movs	r0, #138	; 0x8a
 8001294:	f7ff ffc9 	bl	800122a <BME280_ReadReg_S16>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_T3,&CalibData.dig_T3);
 8001298:	1d21      	adds	r1, r4, #4
 800129a:	208c      	movs	r0, #140	; 0x8c
 800129c:	f7ff ffc5 	bl	800122a <BME280_ReadReg_S16>
  BME280_ReadReg_U16(BME280_REGISTER_DIG_P1,&CalibData.dig_P1);
 80012a0:	1da1      	adds	r1, r4, #6
 80012a2:	208e      	movs	r0, #142	; 0x8e
 80012a4:	f7ff ffba 	bl	800121c <BME280_ReadReg_U16>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P2,&CalibData.dig_P2);
 80012a8:	f104 0108 	add.w	r1, r4, #8
 80012ac:	2090      	movs	r0, #144	; 0x90
 80012ae:	f7ff ffbc 	bl	800122a <BME280_ReadReg_S16>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P3,&CalibData.dig_P3);
 80012b2:	f104 010a 	add.w	r1, r4, #10
 80012b6:	2092      	movs	r0, #146	; 0x92
 80012b8:	f7ff ffb7 	bl	800122a <BME280_ReadReg_S16>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P4,&CalibData.dig_P4);
 80012bc:	f104 010c 	add.w	r1, r4, #12
 80012c0:	2094      	movs	r0, #148	; 0x94
 80012c2:	f7ff ffb2 	bl	800122a <BME280_ReadReg_S16>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P5,&CalibData.dig_P5);
 80012c6:	f104 010e 	add.w	r1, r4, #14
 80012ca:	2096      	movs	r0, #150	; 0x96
 80012cc:	f7ff ffad 	bl	800122a <BME280_ReadReg_S16>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P6,&CalibData.dig_P6);
 80012d0:	f104 0110 	add.w	r1, r4, #16
 80012d4:	2098      	movs	r0, #152	; 0x98
 80012d6:	f7ff ffa8 	bl	800122a <BME280_ReadReg_S16>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P7,&CalibData.dig_P7);
 80012da:	f104 0112 	add.w	r1, r4, #18
 80012de:	209a      	movs	r0, #154	; 0x9a
 80012e0:	f7ff ffa3 	bl	800122a <BME280_ReadReg_S16>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P8,&CalibData.dig_P8);
 80012e4:	f104 0114 	add.w	r1, r4, #20
 80012e8:	209c      	movs	r0, #156	; 0x9c
 80012ea:	f7ff ff9e 	bl	800122a <BME280_ReadReg_S16>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P9,&CalibData.dig_P9);
 80012ee:	f104 0116 	add.w	r1, r4, #22
 80012f2:	209e      	movs	r0, #158	; 0x9e
 80012f4:	f7ff ff99 	bl	800122a <BME280_ReadReg_S16>
  CalibData.dig_H1 = BME280_ReadReg(BME280_REGISTER_DIG_H1);
 80012f8:	20a1      	movs	r0, #161	; 0xa1
 80012fa:	f7ff ff75 	bl	80011e8 <BME280_ReadReg>
 80012fe:	7620      	strb	r0, [r4, #24]
  BME280_ReadReg_S16(BME280_REGISTER_DIG_H2,&CalibData.dig_H2);
 8001300:	f104 011a 	add.w	r1, r4, #26
 8001304:	20e1      	movs	r0, #225	; 0xe1
 8001306:	f7ff ff90 	bl	800122a <BME280_ReadReg_S16>
  CalibData.dig_H3 = BME280_ReadReg(BME280_REGISTER_DIG_H3);
 800130a:	20e3      	movs	r0, #227	; 0xe3
 800130c:	f7ff ff6c 	bl	80011e8 <BME280_ReadReg>
 8001310:	7720      	strb	r0, [r4, #28]
  CalibData.dig_H4 = (BME280_ReadReg(BME280_REGISTER_DIG_H4) << 4) | (BME280_ReadReg(BME280_REGISTER_DIG_H4+1) & 0xF);
 8001312:	20e4      	movs	r0, #228	; 0xe4
 8001314:	f7ff ff68 	bl	80011e8 <BME280_ReadReg>
 8001318:	4605      	mov	r5, r0
 800131a:	20e5      	movs	r0, #229	; 0xe5
 800131c:	f7ff ff64 	bl	80011e8 <BME280_ReadReg>
 8001320:	f000 030f 	and.w	r3, r0, #15
 8001324:	ea43 1005 	orr.w	r0, r3, r5, lsl #4
 8001328:	83e0      	strh	r0, [r4, #30]
  CalibData.dig_H5 = (BME280_ReadReg(BME280_REGISTER_DIG_H5+1) << 4) | (BME280_ReadReg(BME280_REGISTER_DIG_H5) >> 4);
 800132a:	20e6      	movs	r0, #230	; 0xe6
 800132c:	f7ff ff5c 	bl	80011e8 <BME280_ReadReg>
 8001330:	4605      	mov	r5, r0
 8001332:	20e5      	movs	r0, #229	; 0xe5
 8001334:	f7ff ff58 	bl	80011e8 <BME280_ReadReg>
 8001338:	f3c0 1307 	ubfx	r3, r0, #4, #8
 800133c:	ea43 1005 	orr.w	r0, r3, r5, lsl #4
 8001340:	8420      	strh	r0, [r4, #32]
  CalibData.dig_H6 = (int8_t)BME280_ReadReg(BME280_REGISTER_DIG_H6);
 8001342:	20e7      	movs	r0, #231	; 0xe7
 8001344:	f7ff ff50 	bl	80011e8 <BME280_ReadReg>
 8001348:	f884 0022 	strb.w	r0, [r4, #34]	; 0x22
}
 800134c:	bd38      	pop	{r3, r4, r5, pc}
 800134e:	bf00      	nop
 8001350:	2000020c 	.word	0x2000020c

08001354 <BME280_SetStandby>:
//------------------------------------------------
void BME280_SetStandby(uint8_t tsb) {
 8001354:	b510      	push	{r4, lr}
 8001356:	4604      	mov	r4, r0
  uint8_t reg;
  reg = BME280_ReadReg(BME280_REG_CONFIG) & ~BME280_STBY_MSK;
 8001358:	20f5      	movs	r0, #245	; 0xf5
 800135a:	f7ff ff45 	bl	80011e8 <BME280_ReadReg>
  reg |= tsb & BME280_STBY_MSK;
 800135e:	f024 041f 	bic.w	r4, r4, #31
  reg = BME280_ReadReg(BME280_REG_CONFIG) & ~BME280_STBY_MSK;
 8001362:	f000 011f 	and.w	r1, r0, #31
  BME280_WriteReg(BME280_REG_CONFIG,reg);
 8001366:	4321      	orrs	r1, r4
 8001368:	20f5      	movs	r0, #245	; 0xf5
 800136a:	f7ff ff27 	bl	80011bc <BME280_WriteReg>
}
 800136e:	bd10      	pop	{r4, pc}

08001370 <BME280_SetFilter>:
//------------------------------------------------
  void BME280_SetFilter(uint8_t filter) {
 8001370:	b510      	push	{r4, lr}
 8001372:	4604      	mov	r4, r0
  uint8_t reg;
  reg = BME280_ReadReg(BME280_REG_CONFIG) & ~BME280_FILTER_MSK;
 8001374:	20f5      	movs	r0, #245	; 0xf5
 8001376:	f7ff ff37 	bl	80011e8 <BME280_ReadReg>
  reg |= filter & BME280_FILTER_MSK;
 800137a:	f004 041c 	and.w	r4, r4, #28
 800137e:	f000 01e3 	and.w	r1, r0, #227	; 0xe3
  BME280_WriteReg(BME280_REG_CONFIG,reg);
 8001382:	4321      	orrs	r1, r4
 8001384:	20f5      	movs	r0, #245	; 0xf5
 8001386:	f7ff ff19 	bl	80011bc <BME280_WriteReg>
}
 800138a:	bd10      	pop	{r4, pc}

0800138c <BME280_SetOversamplingTemper>:
//------------------------------------------------
void BME280_SetOversamplingTemper(uint8_t osrs)
{
 800138c:	b510      	push	{r4, lr}
 800138e:	4604      	mov	r4, r0
  uint8_t reg;
  reg = BME280_ReadReg(BME280_REG_CTRL_MEAS) & ~BME280_OSRS_T_MSK;
 8001390:	20f4      	movs	r0, #244	; 0xf4
 8001392:	f7ff ff29 	bl	80011e8 <BME280_ReadReg>
  reg |= osrs & BME280_OSRS_T_MSK;
 8001396:	f024 041f 	bic.w	r4, r4, #31
  reg = BME280_ReadReg(BME280_REG_CTRL_MEAS) & ~BME280_OSRS_T_MSK;
 800139a:	f000 011f 	and.w	r1, r0, #31
  BME280_WriteReg(BME280_REG_CTRL_MEAS,reg);
 800139e:	4321      	orrs	r1, r4
 80013a0:	20f4      	movs	r0, #244	; 0xf4
 80013a2:	f7ff ff0b 	bl	80011bc <BME280_WriteReg>
}
 80013a6:	bd10      	pop	{r4, pc}

080013a8 <BME280_SetOversamplingPressure>:
//------------------------------------------------
void BME280_SetOversamplingPressure(uint8_t osrs)
{
 80013a8:	b510      	push	{r4, lr}
 80013aa:	4604      	mov	r4, r0
  uint8_t reg;
  reg = BME280_ReadReg(BME280_REG_CTRL_MEAS) & ~BME280_OSRS_P_MSK;
 80013ac:	20f4      	movs	r0, #244	; 0xf4
 80013ae:	f7ff ff1b 	bl	80011e8 <BME280_ReadReg>
  reg |= osrs & BME280_OSRS_P_MSK;
 80013b2:	f004 041c 	and.w	r4, r4, #28
 80013b6:	f000 01e3 	and.w	r1, r0, #227	; 0xe3
  BME280_WriteReg(BME280_REG_CTRL_MEAS,reg);
 80013ba:	4321      	orrs	r1, r4
 80013bc:	20f4      	movs	r0, #244	; 0xf4
 80013be:	f7ff fefd 	bl	80011bc <BME280_WriteReg>
}
 80013c2:	bd10      	pop	{r4, pc}

080013c4 <BME280_SetOversamplingHum>:
//------------------------------------------------
void BME280_SetOversamplingHum(uint8_t osrs)
{
 80013c4:	b510      	push	{r4, lr}
 80013c6:	4604      	mov	r4, r0
  uint8_t reg;
  reg = BME280_ReadReg(BME280_REG_CTRL_HUM) & ~BME280_OSRS_H_MSK;
 80013c8:	20f2      	movs	r0, #242	; 0xf2
 80013ca:	f7ff ff0d 	bl	80011e8 <BME280_ReadReg>
  reg |= osrs & BME280_OSRS_H_MSK;
 80013ce:	f004 0407 	and.w	r4, r4, #7
 80013d2:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
  BME280_WriteReg(BME280_REG_CTRL_HUM,reg);
 80013d6:	4321      	orrs	r1, r4
 80013d8:	20f2      	movs	r0, #242	; 0xf2
 80013da:	f7ff feef 	bl	80011bc <BME280_WriteReg>
  //The 'ctrl_hum' register needs to be written
  //after changing 'ctrl_hum' for the changes to become effwctive.
  reg = BME280_ReadReg(BME280_REG_CTRL_MEAS);
 80013de:	20f4      	movs	r0, #244	; 0xf4
 80013e0:	f7ff ff02 	bl	80011e8 <BME280_ReadReg>
 80013e4:	4601      	mov	r1, r0
  BME280_WriteReg(BME280_REG_CTRL_MEAS,reg);
 80013e6:	20f4      	movs	r0, #244	; 0xf4
 80013e8:	f7ff fee8 	bl	80011bc <BME280_WriteReg>
}
 80013ec:	bd10      	pop	{r4, pc}

080013ee <BME280_SetMode>:
//------------------------------------------------
void BME280_SetMode(uint8_t mode) {
 80013ee:	b510      	push	{r4, lr}
 80013f0:	4604      	mov	r4, r0
  uint8_t reg;
  reg = BME280_ReadReg(BME280_REG_CTRL_MEAS) & ~BME280_MODE_MSK;
 80013f2:	20f4      	movs	r0, #244	; 0xf4
 80013f4:	f7ff fef8 	bl	80011e8 <BME280_ReadReg>
  reg |= mode & BME280_MODE_MSK;
 80013f8:	f004 0403 	and.w	r4, r4, #3
 80013fc:	f000 01fc 	and.w	r1, r0, #252	; 0xfc
  BME280_WriteReg(BME280_REG_CTRL_MEAS,reg);
 8001400:	4321      	orrs	r1, r4
 8001402:	20f4      	movs	r0, #244	; 0xf4
 8001404:	f7ff feda 	bl	80011bc <BME280_WriteReg>
}
 8001408:	bd10      	pop	{r4, pc}
	...

0800140c <BME280_ReadTemperature>:
//------------------------------------------------
float BME280_ReadTemperature(void)
{
 800140c:	b500      	push	{lr}
 800140e:	b083      	sub	sp, #12
  float temper_float = 0.0f;
	uint32_t temper_raw;
	int32_t val1, val2;
	BME280_ReadReg_BE_U24(BME280_REGISTER_TEMPDATA,&temper_raw);
 8001410:	a901      	add	r1, sp, #4
 8001412:	20fa      	movs	r0, #250	; 0xfa
 8001414:	f7ff ff10 	bl	8001238 <BME280_ReadReg_BE_U24>
	temper_raw >>= 4;
 8001418:	9801      	ldr	r0, [sp, #4]
	val1 = ((((temper_raw>>3) - ((int32_t)CalibData.dig_T1 <<1))) *
 800141a:	4911      	ldr	r1, [pc, #68]	; (8001460 <BME280_ReadTemperature+0x54>)
 800141c:	880a      	ldrh	r2, [r1, #0]
		((int32_t)CalibData.dig_T2)) >> 11;
	val2 = (((((temper_raw>>4) - ((int32_t)CalibData.dig_T1)) *
 800141e:	ebc2 2310 	rsb	r3, r2, r0, lsr #8
	val1 = ((((temper_raw>>3) - ((int32_t)CalibData.dig_T1 <<1))) *
 8001422:	0052      	lsls	r2, r2, #1
 8001424:	ebc2 12d0 	rsb	r2, r2, r0, lsr #7
		((int32_t)CalibData.dig_T2)) >> 11;
 8001428:	f9b1 0002 	ldrsh.w	r0, [r1, #2]
	val1 = ((((temper_raw>>3) - ((int32_t)CalibData.dig_T1 <<1))) *
 800142c:	fb00 f202 	mul.w	r2, r0, r2
	val2 = (((((temper_raw>>4) - ((int32_t)CalibData.dig_T1)) *
 8001430:	fb03 f003 	mul.w	r0, r3, r3
		((temper_raw>>4) - ((int32_t)CalibData.dig_T1))) >> 12) *
 8001434:	0b00      	lsrs	r0, r0, #12
		((int32_t)CalibData.dig_T3)) >> 14;
 8001436:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
		((temper_raw>>4) - ((int32_t)CalibData.dig_T1))) >> 12) *
 800143a:	fb03 f000 	mul.w	r0, r3, r0
		((int32_t)CalibData.dig_T3)) >> 14;
 800143e:	0b80      	lsrs	r0, r0, #14
	temper_int = val1 + val2;
 8001440:	eb00 20d2 	add.w	r0, r0, r2, lsr #11
 8001444:	4b07      	ldr	r3, [pc, #28]	; (8001464 <BME280_ReadTemperature+0x58>)
 8001446:	6018      	str	r0, [r3, #0]
	temper_float = ((temper_int * 5 + 128) >> 8);
 8001448:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800144c:	3080      	adds	r0, #128	; 0x80
 800144e:	1200      	asrs	r0, r0, #8
 8001450:	f7ff fc4e 	bl	8000cf0 <__aeabi_i2f>
	temper_float /= 100.0f;
 8001454:	4904      	ldr	r1, [pc, #16]	; (8001468 <BME280_ReadTemperature+0x5c>)
 8001456:	f7ff fd53 	bl	8000f00 <__aeabi_fdiv>
//	temper_float = temper_int / 5120.0;
  return temper_float;
}
 800145a:	b003      	add	sp, #12
 800145c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001460:	2000020c 	.word	0x2000020c
 8001464:	20000230 	.word	0x20000230
 8001468:	42c80000 	.word	0x42c80000
 800146c:	00000000 	.word	0x00000000

08001470 <BME280_ReadPressure>:
//------------------------------------------------
float BME280_ReadPressure(void)
{
 8001470:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001474:	b083      	sub	sp, #12
	float var1;
	float var2;
	float p;
	uint32_t t_fine;
	uint32_t press_raw;
	BME280_ReadTemperature(); // must be done first to get t_fine
 8001476:	f7ff ffc9 	bl	800140c <BME280_ReadTemperature>
	BME280_ReadReg_BE_U24(BME280_REGISTER_PRESSUREDATA,&press_raw);
 800147a:	a901      	add	r1, sp, #4
 800147c:	20f7      	movs	r0, #247	; 0xf7
 800147e:	f7ff fedb 	bl	8001238 <BME280_ReadReg_BE_U24>
	press_raw >>= 4;
	var1 = ((((float)t_fine)/2.0)-64000.0);
 8001482:	2000      	movs	r0, #0
 8001484:	f7ff fc30 	bl	8000ce8 <__aeabi_ui2f>
 8001488:	f7fe ffd8 	bl	800043c <__aeabi_f2d>
 800148c:	2200      	movs	r2, #0
 800148e:	4b8c      	ldr	r3, [pc, #560]	; (80016c0 <BME280_ReadPressure+0x250>)
 8001490:	f7ff f82c 	bl	80004ec <__aeabi_dmul>
 8001494:	2200      	movs	r2, #0
 8001496:	4b8b      	ldr	r3, [pc, #556]	; (80016c4 <BME280_ReadPressure+0x254>)
 8001498:	f7fe fe70 	bl	800017c <__aeabi_dsub>
 800149c:	f7ff fb1e 	bl	8000adc <__aeabi_d2f>
 80014a0:	4606      	mov	r6, r0
	var2 = var1 * var1 * ((float)CalibData.dig_P6) / 32768.0;
	var2 = var2 + var1 * ((float)CalibData.dig_P5) * 2.0;
	var2 = (var2/4.0)+(((float)CalibData.dig_P4) * 65536.0);
	var1 = (((float)CalibData.dig_P3) * var1 * var1 / 524288.0 + ((float)CalibData.dig_P2) * var1) / 524288.0;
 80014a2:	4f89      	ldr	r7, [pc, #548]	; (80016c8 <BME280_ReadPressure+0x258>)
 80014a4:	f9b7 000a 	ldrsh.w	r0, [r7, #10]
 80014a8:	f7ff fc22 	bl	8000cf0 <__aeabi_i2f>
 80014ac:	4631      	mov	r1, r6
 80014ae:	f7ff fc73 	bl	8000d98 <__aeabi_fmul>
 80014b2:	4631      	mov	r1, r6
 80014b4:	f7ff fc70 	bl	8000d98 <__aeabi_fmul>
 80014b8:	f7fe ffc0 	bl	800043c <__aeabi_f2d>
 80014bc:	2200      	movs	r2, #0
 80014be:	f04f 537b 	mov.w	r3, #1052770304	; 0x3ec00000
 80014c2:	f7ff f813 	bl	80004ec <__aeabi_dmul>
 80014c6:	4604      	mov	r4, r0
 80014c8:	460d      	mov	r5, r1
 80014ca:	f9b7 0008 	ldrsh.w	r0, [r7, #8]
 80014ce:	f7ff fc0f 	bl	8000cf0 <__aeabi_i2f>
 80014d2:	4631      	mov	r1, r6
 80014d4:	f7ff fc60 	bl	8000d98 <__aeabi_fmul>
 80014d8:	f7fe ffb0 	bl	800043c <__aeabi_f2d>
 80014dc:	4602      	mov	r2, r0
 80014de:	460b      	mov	r3, r1
 80014e0:	4620      	mov	r0, r4
 80014e2:	4629      	mov	r1, r5
 80014e4:	f7fe fe4c 	bl	8000180 <__adddf3>
 80014e8:	2200      	movs	r2, #0
 80014ea:	f04f 537b 	mov.w	r3, #1052770304	; 0x3ec00000
 80014ee:	f7fe fffd 	bl	80004ec <__aeabi_dmul>
 80014f2:	f7ff faf3 	bl	8000adc <__aeabi_d2f>
	var1 = (1.0 + var1 / 32768.0)*((float)CalibData.dig_P1);
 80014f6:	f7fe ffa1 	bl	800043c <__aeabi_f2d>
 80014fa:	2200      	movs	r2, #0
 80014fc:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8001500:	f7fe fff4 	bl	80004ec <__aeabi_dmul>
 8001504:	2200      	movs	r2, #0
 8001506:	4b71      	ldr	r3, [pc, #452]	; (80016cc <BME280_ReadPressure+0x25c>)
 8001508:	f7fe fe3a 	bl	8000180 <__adddf3>
 800150c:	4604      	mov	r4, r0
 800150e:	460d      	mov	r5, r1
 8001510:	88f8      	ldrh	r0, [r7, #6]
 8001512:	f7ff fbe9 	bl	8000ce8 <__aeabi_ui2f>
 8001516:	f7fe ff91 	bl	800043c <__aeabi_f2d>
 800151a:	4602      	mov	r2, r0
 800151c:	460b      	mov	r3, r1
 800151e:	4620      	mov	r0, r4
 8001520:	4629      	mov	r1, r5
 8001522:	f7fe ffe3 	bl	80004ec <__aeabi_dmul>
 8001526:	f7ff fad9 	bl	8000adc <__aeabi_d2f>
 800152a:	4605      	mov	r5, r0
	if (var1 == 0.0)
 800152c:	2100      	movs	r1, #0
 800152e:	f7ff fdc7 	bl	80010c0 <__aeabi_fcmpeq>
 8001532:	2800      	cmp	r0, #0
 8001534:	f040 80b7 	bne.w	80016a6 <BME280_ReadPressure+0x236>
	var2 = var1 * var1 * ((float)CalibData.dig_P6) / 32768.0;
 8001538:	463c      	mov	r4, r7
 800153a:	f9b7 0010 	ldrsh.w	r0, [r7, #16]
 800153e:	f7ff fbd7 	bl	8000cf0 <__aeabi_i2f>
 8001542:	4607      	mov	r7, r0
 8001544:	4631      	mov	r1, r6
 8001546:	4630      	mov	r0, r6
 8001548:	f7ff fc26 	bl	8000d98 <__aeabi_fmul>
 800154c:	4601      	mov	r1, r0
 800154e:	4638      	mov	r0, r7
 8001550:	f7ff fc22 	bl	8000d98 <__aeabi_fmul>
 8001554:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
 8001558:	f7ff fc1e 	bl	8000d98 <__aeabi_fmul>
	var2 = var2 + var1 * ((float)CalibData.dig_P5) * 2.0;
 800155c:	f7fe ff6e 	bl	800043c <__aeabi_f2d>
 8001560:	4680      	mov	r8, r0
 8001562:	4689      	mov	r9, r1
 8001564:	f9b4 000e 	ldrsh.w	r0, [r4, #14]
 8001568:	f7ff fbc2 	bl	8000cf0 <__aeabi_i2f>
 800156c:	4631      	mov	r1, r6
 800156e:	f7ff fc13 	bl	8000d98 <__aeabi_fmul>
 8001572:	f7fe ff63 	bl	800043c <__aeabi_f2d>
 8001576:	4602      	mov	r2, r0
 8001578:	460b      	mov	r3, r1
 800157a:	f7fe fe01 	bl	8000180 <__adddf3>
 800157e:	4602      	mov	r2, r0
 8001580:	460b      	mov	r3, r1
 8001582:	4640      	mov	r0, r8
 8001584:	4649      	mov	r1, r9
 8001586:	f7fe fdfb 	bl	8000180 <__adddf3>
 800158a:	4680      	mov	r8, r0
 800158c:	4689      	mov	r9, r1
	var2 = (var2/4.0)+(((float)CalibData.dig_P4) * 65536.0);
 800158e:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 8001592:	f7ff fbad 	bl	8000cf0 <__aeabi_i2f>
 8001596:	f7fe ff51 	bl	800043c <__aeabi_f2d>
 800159a:	2200      	movs	r2, #0
 800159c:	4b4c      	ldr	r3, [pc, #304]	; (80016d0 <BME280_ReadPressure+0x260>)
 800159e:	f7fe ffa5 	bl	80004ec <__aeabi_dmul>
 80015a2:	4606      	mov	r6, r0
 80015a4:	460f      	mov	r7, r1
	var2 = var2 + var1 * ((float)CalibData.dig_P5) * 2.0;
 80015a6:	4640      	mov	r0, r8
 80015a8:	4649      	mov	r1, r9
 80015aa:	f7ff fa97 	bl	8000adc <__aeabi_d2f>
	var2 = (var2/4.0)+(((float)CalibData.dig_P4) * 65536.0);
 80015ae:	f7fe ff45 	bl	800043c <__aeabi_f2d>
 80015b2:	2200      	movs	r2, #0
 80015b4:	4b47      	ldr	r3, [pc, #284]	; (80016d4 <BME280_ReadPressure+0x264>)
 80015b6:	f7fe ff99 	bl	80004ec <__aeabi_dmul>
 80015ba:	4602      	mov	r2, r0
 80015bc:	460b      	mov	r3, r1
 80015be:	4630      	mov	r0, r6
 80015c0:	4639      	mov	r1, r7
 80015c2:	f7fe fddd 	bl	8000180 <__adddf3>
 80015c6:	4606      	mov	r6, r0
 80015c8:	460f      	mov	r7, r1
	{
		return 0; // avoid exception caused by division by zero
	}
	p = (1048576.0 - ((float)press_raw));
 80015ca:	9801      	ldr	r0, [sp, #4]
 80015cc:	0900      	lsrs	r0, r0, #4
 80015ce:	f7ff fb8b 	bl	8000ce8 <__aeabi_ui2f>
 80015d2:	4601      	mov	r1, r0
 80015d4:	f04f 4093 	mov.w	r0, #1233125376	; 0x49800000
 80015d8:	f7ff fad4 	bl	8000b84 <__aeabi_fsub>
	p = ((p - (var2 / 4069.0)) * 6250.0 / var1);
 80015dc:	f7fe ff2e 	bl	800043c <__aeabi_f2d>
 80015e0:	4680      	mov	r8, r0
 80015e2:	4689      	mov	r9, r1
	var2 = (var2/4.0)+(((float)CalibData.dig_P4) * 65536.0);
 80015e4:	4630      	mov	r0, r6
 80015e6:	4639      	mov	r1, r7
 80015e8:	f7ff fa78 	bl	8000adc <__aeabi_d2f>
	p = ((p - (var2 / 4069.0)) * 6250.0 / var1);
 80015ec:	f7fe ff26 	bl	800043c <__aeabi_f2d>
 80015f0:	a32f      	add	r3, pc, #188	; (adr r3, 80016b0 <BME280_ReadPressure+0x240>)
 80015f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015f6:	f7ff f8a3 	bl	8000740 <__aeabi_ddiv>
 80015fa:	4602      	mov	r2, r0
 80015fc:	460b      	mov	r3, r1
 80015fe:	4640      	mov	r0, r8
 8001600:	4649      	mov	r1, r9
 8001602:	f7fe fdbb 	bl	800017c <__aeabi_dsub>
 8001606:	a32c      	add	r3, pc, #176	; (adr r3, 80016b8 <BME280_ReadPressure+0x248>)
 8001608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800160c:	f7fe ff6e 	bl	80004ec <__aeabi_dmul>
 8001610:	4606      	mov	r6, r0
 8001612:	460f      	mov	r7, r1
 8001614:	4628      	mov	r0, r5
 8001616:	f7fe ff11 	bl	800043c <__aeabi_f2d>
 800161a:	4602      	mov	r2, r0
 800161c:	460b      	mov	r3, r1
 800161e:	4630      	mov	r0, r6
 8001620:	4639      	mov	r1, r7
 8001622:	f7ff f88d 	bl	8000740 <__aeabi_ddiv>
 8001626:	f7ff fa59 	bl	8000adc <__aeabi_d2f>
 800162a:	4605      	mov	r5, r0
	var1 = ((float)CalibData.dig_P9) * p * p / 2147483648.0;
 800162c:	f9b4 0016 	ldrsh.w	r0, [r4, #22]
 8001630:	f7ff fb5e 	bl	8000cf0 <__aeabi_i2f>
 8001634:	4629      	mov	r1, r5
 8001636:	f7ff fbaf 	bl	8000d98 <__aeabi_fmul>
 800163a:	4629      	mov	r1, r5
 800163c:	f7ff fbac 	bl	8000d98 <__aeabi_fmul>
 8001640:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
 8001644:	f7ff fba8 	bl	8000d98 <__aeabi_fmul>
 8001648:	4606      	mov	r6, r0
	var2 = p * ((float)CalibData.dig_P8) / 32768.0;
 800164a:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 800164e:	f7ff fb4f 	bl	8000cf0 <__aeabi_i2f>
 8001652:	4629      	mov	r1, r5
 8001654:	f7ff fba0 	bl	8000d98 <__aeabi_fmul>
 8001658:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
 800165c:	f7ff fb9c 	bl	8000d98 <__aeabi_fmul>
 8001660:	4601      	mov	r1, r0
	p = p + (var1 + var2 + ((float)CalibData.dig_P7)) / 16.0;
 8001662:	4630      	mov	r0, r6
 8001664:	f7ff fa90 	bl	8000b88 <__addsf3>
 8001668:	4606      	mov	r6, r0
 800166a:	f9b4 0012 	ldrsh.w	r0, [r4, #18]
 800166e:	f7ff fb3f 	bl	8000cf0 <__aeabi_i2f>
 8001672:	4601      	mov	r1, r0
 8001674:	4630      	mov	r0, r6
 8001676:	f7ff fa87 	bl	8000b88 <__addsf3>
 800167a:	f7fe fedf 	bl	800043c <__aeabi_f2d>
 800167e:	2200      	movs	r2, #0
 8001680:	4b15      	ldr	r3, [pc, #84]	; (80016d8 <BME280_ReadPressure+0x268>)
 8001682:	f7fe ff33 	bl	80004ec <__aeabi_dmul>
 8001686:	4606      	mov	r6, r0
 8001688:	460f      	mov	r7, r1
 800168a:	4628      	mov	r0, r5
 800168c:	f7fe fed6 	bl	800043c <__aeabi_f2d>
 8001690:	4602      	mov	r2, r0
 8001692:	460b      	mov	r3, r1
 8001694:	4630      	mov	r0, r6
 8001696:	4639      	mov	r1, r7
 8001698:	f7fe fd72 	bl	8000180 <__adddf3>
 800169c:	f7ff fa1e 	bl	8000adc <__aeabi_d2f>
	return p;

}
 80016a0:	b003      	add	sp, #12
 80016a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return 0; // avoid exception caused by division by zero
 80016a6:	2000      	movs	r0, #0
 80016a8:	e7fa      	b.n	80016a0 <BME280_ReadPressure+0x230>
 80016aa:	bf00      	nop
 80016ac:	f3af 8000 	nop.w
 80016b0:	00000000 	.word	0x00000000
 80016b4:	40afca00 	.word	0x40afca00
 80016b8:	00000000 	.word	0x00000000
 80016bc:	40b86a00 	.word	0x40b86a00
 80016c0:	3fe00000 	.word	0x3fe00000
 80016c4:	40ef4000 	.word	0x40ef4000
 80016c8:	2000020c 	.word	0x2000020c
 80016cc:	3ff00000 	.word	0x3ff00000
 80016d0:	40f00000 	.word	0x40f00000
 80016d4:	3fd00000 	.word	0x3fd00000
 80016d8:	3fb00000 	.word	0x3fb00000

080016dc <BME280_Init>:
	att = 44330.0 * (1.0 - pow(atm / seaLevel, 0.1903));
  return att;
}
//------------------------------------------------
void BME280_Init(void)
{
 80016dc:	b508      	push	{r3, lr}

	BME280_WriteReg(BME280_REG_SOFTRESET,BME280_SOFTRESET_VALUE);
 80016de:	21b6      	movs	r1, #182	; 0xb6
 80016e0:	20e0      	movs	r0, #224	; 0xe0
 80016e2:	f7ff fd6b 	bl	80011bc <BME280_WriteReg>
	while (BME280_ReadStatus() & BME280_STATUS_IM_UPDATE) ;
 80016e6:	f7ff fdc5 	bl	8001274 <BME280_ReadStatus>
 80016ea:	f010 0f01 	tst.w	r0, #1
 80016ee:	d1fa      	bne.n	80016e6 <BME280_Init+0xa>
	BME280_ReadCoefficients();
 80016f0:	f7ff fdc8 	bl	8001284 <BME280_ReadCoefficients>
	BME280_SetStandby(BME280_STBY_1000);
 80016f4:	20a0      	movs	r0, #160	; 0xa0
 80016f6:	f7ff fe2d 	bl	8001354 <BME280_SetStandby>
	BME280_SetFilter(BME280_FILTER_4);
 80016fa:	2008      	movs	r0, #8
 80016fc:	f7ff fe38 	bl	8001370 <BME280_SetFilter>
	BME280_SetOversamplingTemper(BME280_OSRS_T_x4);
 8001700:	2060      	movs	r0, #96	; 0x60
 8001702:	f7ff fe43 	bl	800138c <BME280_SetOversamplingTemper>
	BME280_SetOversamplingPressure(BME280_OSRS_P_x2);
 8001706:	2008      	movs	r0, #8
 8001708:	f7ff fe4e 	bl	80013a8 <BME280_SetOversamplingPressure>
	BME280_SetOversamplingHum(BME280_OSRS_H_x1);
 800170c:	2001      	movs	r0, #1
 800170e:	f7ff fe59 	bl	80013c4 <BME280_SetOversamplingHum>

	BME280_SetMode(BME280_MODE_NORMAL);
 8001712:	2003      	movs	r0, #3
 8001714:	f7ff fe6b 	bl	80013ee <BME280_SetMode>
}
 8001718:	bd08      	pop	{r3, pc}

0800171a <display_Init>:
/* Private function prototypes -----------------------------------------------*/


/* Private user code ---------------------------------------------------------*/
void display_Init(void)
{
 800171a:	b508      	push	{r3, lr}
	ssd1306_Init();
 800171c:	f001 fa02 	bl	8002b24 <ssd1306_Init>
	osDelay(1000);
 8001720:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001724:	f004 fe22 	bl	800636c <osDelay>

}
 8001728:	bd08      	pop	{r3, pc}
	...

0800172c <display_start_screen>:
	ssd1306_UpdateScreen();

}

void display_start_screen (void)
{
 800172c:	b570      	push	{r4, r5, r6, lr}
 800172e:	b084      	sub	sp, #16
	ssd1306_SetCursor(2,0);
 8001730:	2100      	movs	r1, #0
 8001732:	2002      	movs	r0, #2
 8001734:	f001 f9d6 	bl	8002ae4 <ssd1306_SetCursor>
	sprintf((char*)Message,	"%02d:%02d:%02d %02d.%02d.%02d   ", timedata.hour,
																timedata.min,
 8001738:	4a36      	ldr	r2, [pc, #216]	; (8001814 <display_start_screen+0xe8>)
	sprintf((char*)Message,	"%02d:%02d:%02d %02d.%02d.%02d   ", timedata.hour,
 800173a:	4c37      	ldr	r4, [pc, #220]	; (8001818 <display_start_screen+0xec>)
																timedata.sec,
																timedata.date,
																timedata.month,
																timedata.year - 2000);
 800173c:	88d3      	ldrh	r3, [r2, #6]
	sprintf((char*)Message,	"%02d:%02d:%02d %02d.%02d.%02d   ", timedata.hour,
 800173e:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 8001742:	9303      	str	r3, [sp, #12]
 8001744:	7913      	ldrb	r3, [r2, #4]
 8001746:	9302      	str	r3, [sp, #8]
 8001748:	78d3      	ldrb	r3, [r2, #3]
 800174a:	9301      	str	r3, [sp, #4]
 800174c:	7813      	ldrb	r3, [r2, #0]
 800174e:	9300      	str	r3, [sp, #0]
 8001750:	7853      	ldrb	r3, [r2, #1]
 8001752:	7892      	ldrb	r2, [r2, #2]
 8001754:	4931      	ldr	r1, [pc, #196]	; (800181c <display_start_screen+0xf0>)
 8001756:	4620      	mov	r0, r4
 8001758:	f006 fb18 	bl	8007d8c <siprintf>
	ssd1306_WriteString((char*)Message, Font_7x10, White);
 800175c:	4d30      	ldr	r5, [pc, #192]	; (8001820 <display_start_screen+0xf4>)
 800175e:	2301      	movs	r3, #1
 8001760:	e895 0006 	ldmia.w	r5, {r1, r2}
 8001764:	4620      	mov	r0, r4
 8001766:	f001 f9a3 	bl	8002ab0 <ssd1306_WriteString>
	//ssd1306_Line(2, 17, 24, 17, White);

	ssd1306_SetCursor(2, 12);
 800176a:	210c      	movs	r1, #12
 800176c:	2002      	movs	r0, #2
 800176e:	f001 f9b9 	bl	8002ae4 <ssd1306_SetCursor>
	sprintf((char*)Message,	"T= %.2fC      ", BME280_sensor.temperature);
 8001772:	4e2c      	ldr	r6, [pc, #176]	; (8001824 <display_start_screen+0xf8>)
 8001774:	6830      	ldr	r0, [r6, #0]
 8001776:	f7fe fe61 	bl	800043c <__aeabi_f2d>
 800177a:	4602      	mov	r2, r0
 800177c:	460b      	mov	r3, r1
 800177e:	492a      	ldr	r1, [pc, #168]	; (8001828 <display_start_screen+0xfc>)
 8001780:	4620      	mov	r0, r4
 8001782:	f006 fb03 	bl	8007d8c <siprintf>
	ssd1306_WriteString((char*)Message, Font_7x10, White);
 8001786:	2301      	movs	r3, #1
 8001788:	e895 0006 	ldmia.w	r5, {r1, r2}
 800178c:	4620      	mov	r0, r4
 800178e:	f001 f98f 	bl	8002ab0 <ssd1306_WriteString>
	ssd1306_SetCursor(2, 24);
 8001792:	2118      	movs	r1, #24
 8001794:	2002      	movs	r0, #2
 8001796:	f001 f9a5 	bl	8002ae4 <ssd1306_SetCursor>

	sprintf((char*)Message,	"P= %.2fkPa      ", BME280_sensor.pressure/1000);
 800179a:	4924      	ldr	r1, [pc, #144]	; (800182c <display_start_screen+0x100>)
 800179c:	6870      	ldr	r0, [r6, #4]
 800179e:	f7ff fbaf 	bl	8000f00 <__aeabi_fdiv>
 80017a2:	f7fe fe4b 	bl	800043c <__aeabi_f2d>
 80017a6:	4602      	mov	r2, r0
 80017a8:	460b      	mov	r3, r1
 80017aa:	4921      	ldr	r1, [pc, #132]	; (8001830 <display_start_screen+0x104>)
 80017ac:	4620      	mov	r0, r4
 80017ae:	f006 faed 	bl	8007d8c <siprintf>
	ssd1306_WriteString((char*)Message, Font_7x10, White);
 80017b2:	2301      	movs	r3, #1
 80017b4:	e895 0006 	ldmia.w	r5, {r1, r2}
 80017b8:	4620      	mov	r0, r4
 80017ba:	f001 f979 	bl	8002ab0 <ssd1306_WriteString>
	ssd1306_SetCursor(2, 36);
 80017be:	2124      	movs	r1, #36	; 0x24
 80017c0:	2002      	movs	r0, #2
 80017c2:	f001 f98f 	bl	8002ae4 <ssd1306_SetCursor>
	sprintf((char*)Message,	"K= %02d %02d %02d     ", button_get_clicks_count (&button), (GPIOA->IDR & 0x20)>>5, global_tick);
 80017c6:	481b      	ldr	r0, [pc, #108]	; (8001834 <display_start_screen+0x108>)
 80017c8:	f000 f850 	bl	800186c <button_get_clicks_count>
 80017cc:	4602      	mov	r2, r0
 80017ce:	4b1a      	ldr	r3, [pc, #104]	; (8001838 <display_start_screen+0x10c>)
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	491a      	ldr	r1, [pc, #104]	; (800183c <display_start_screen+0x110>)
 80017d4:	6809      	ldr	r1, [r1, #0]
 80017d6:	9100      	str	r1, [sp, #0]
 80017d8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80017dc:	4918      	ldr	r1, [pc, #96]	; (8001840 <display_start_screen+0x114>)
 80017de:	4620      	mov	r0, r4
 80017e0:	f006 fad4 	bl	8007d8c <siprintf>
	ssd1306_WriteString((char*)Message, Font_7x10, White);
 80017e4:	2301      	movs	r3, #1
 80017e6:	e895 0006 	ldmia.w	r5, {r1, r2}
 80017ea:	4620      	mov	r0, r4
 80017ec:	f001 f960 	bl	8002ab0 <ssd1306_WriteString>
	ssd1306_SetCursor(2, 48);
 80017f0:	2130      	movs	r1, #48	; 0x30
 80017f2:	2002      	movs	r0, #2
 80017f4:	f001 f976 	bl	8002ae4 <ssd1306_SetCursor>
	sprintf((char*)Message,	"E= %02d    ", Enc_Counter);
 80017f8:	4b12      	ldr	r3, [pc, #72]	; (8001844 <display_start_screen+0x118>)
 80017fa:	781a      	ldrb	r2, [r3, #0]
 80017fc:	4912      	ldr	r1, [pc, #72]	; (8001848 <display_start_screen+0x11c>)
 80017fe:	4620      	mov	r0, r4
 8001800:	f006 fac4 	bl	8007d8c <siprintf>
	ssd1306_WriteString((char*)Message, Font_7x10, White);
 8001804:	2301      	movs	r3, #1
 8001806:	e895 0006 	ldmia.w	r5, {r1, r2}
 800180a:	4620      	mov	r0, r4
 800180c:	f001 f950 	bl	8002ab0 <ssd1306_WriteString>

}
 8001810:	b004      	add	sp, #16
 8001812:	bd70      	pop	{r4, r5, r6, pc}
 8001814:	200005a8 	.word	0x200005a8
 8001818:	20000234 	.word	0x20000234
 800181c:	0800b9f4 	.word	0x0800b9f4
 8001820:	20000004 	.word	0x20000004
 8001824:	200005b0 	.word	0x200005b0
 8001828:	0800ba18 	.word	0x0800ba18
 800182c:	447a0000 	.word	0x447a0000
 8001830:	0800ba28 	.word	0x0800ba28
 8001834:	20000278 	.word	0x20000278
 8001838:	40010800 	.word	0x40010800
 800183c:	2000028c 	.word	0x2000028c
 8001840:	0800ba3c 	.word	0x0800ba3c
 8001844:	20000274 	.word	0x20000274
 8001848:	0800ba54 	.word	0x0800ba54

0800184c <display_handle>:
{
 800184c:	b508      	push	{r3, lr}
	display_start_screen();
 800184e:	f7ff ff6d 	bl	800172c <display_start_screen>
	ssd1306_UpdateScreen();
 8001852:	f001 f893 	bl	800297c <ssd1306_UpdateScreen>
}
 8001856:	bd08      	pop	{r3, pc}

08001858 <button_has_clicks>:

button_status_t button_has_clicks (button_t *_button)
{
  button_status_t status = BUTTON_NO;

  if (get_state(MANY_CLICKS) != 0)
 8001858:	4b03      	ldr	r3, [pc, #12]	; (8001868 <button_has_clicks+0x10>)
 800185a:	8898      	ldrh	r0, [r3, #4]
 800185c:	f080 0080 	eor.w	r0, r0, #128	; 0x80
  {
    status = BUTTON_YES;
  }

  return status;
}
 8001860:	f3c0 10c0 	ubfx	r0, r0, #7, #1
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	20000278 	.word	0x20000278

0800186c <button_get_clicks_count>:
uint8_t button_get_clicks_count (button_t *_button)
{
//  reset_state(MANY_CLICKS);
//  set_state(CLICKS_COUNTER_RESET);
  return _button->_clicks_counter;
}
 800186c:	7980      	ldrb	r0, [r0, #6]
 800186e:	4770      	bx	lr

08001870 <encoder_init>:

  return status;
}

void encoder_init	(void)
{
 8001870:	b510      	push	{r4, lr}
	HAL_TIM_Encoder_MspInit(&htim3);
 8001872:	4c12      	ldr	r4, [pc, #72]	; (80018bc <encoder_init+0x4c>)
 8001874:	4620      	mov	r0, r4
 8001876:	f000 fceb 	bl	8002250 <HAL_TIM_Encoder_MspInit>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 800187a:	213c      	movs	r1, #60	; 0x3c
 800187c:	4620      	mov	r0, r4
 800187e:	f004 f996 	bl	8005bae <HAL_TIM_Encoder_Start>
	osDelay(100);
 8001882:	2064      	movs	r0, #100	; 0x64
 8001884:	f004 fd72 	bl	800636c <osDelay>

	button._type             = BUTTON_NORM_OPEN;
 8001888:	4b0d      	ldr	r3, [pc, #52]	; (80018c0 <encoder_init+0x50>)
 800188a:	2200      	movs	r2, #0
 800188c:	701a      	strb	r2, [r3, #0]
	button._pulling_mode     = BUTTON_PULL_UP;
 800188e:	705a      	strb	r2, [r3, #1]

	button._debounce_timeout = 30;
 8001890:	211e      	movs	r1, #30
 8001892:	71d9      	strb	r1, [r3, #7]
	button._click_timeout    = 400;
 8001894:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8001898:	8119      	strh	r1, [r3, #8]
	button._hold_timeout     = 500;
 800189a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800189e:	8159      	strh	r1, [r3, #10]
	button._step_timeout     = 350;
 80018a0:	f44f 71af 	mov.w	r1, #350	; 0x15e
 80018a4:	8199      	strh	r1, [r3, #12]
	button._idle_timeout     = 1000;
 80018a6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80018aa:	81d9      	strh	r1, [r3, #14]
	button._timer            = global_tick;
 80018ac:	4905      	ldr	r1, [pc, #20]	; (80018c4 <encoder_init+0x54>)
 80018ae:	6809      	ldr	r1, [r1, #0]
 80018b0:	6119      	str	r1, [r3, #16]

	button._state            = 0;
 80018b2:	709a      	strb	r2, [r3, #2]
	button._previous_state   = 0;
 80018b4:	70da      	strb	r2, [r3, #3]

	button._status           = 0;
 80018b6:	809a      	strh	r2, [r3, #4]

	button._clicks_counter   = 0;
 80018b8:	719a      	strb	r2, [r3, #6]

}
 80018ba:	bd10      	pop	{r4, pc}
 80018bc:	20000608 	.word	0x20000608
 80018c0:	20000278 	.word	0x20000278
 80018c4:	2000028c 	.word	0x2000028c

080018c8 <button_timer_tick>:


void button_timer_tick (void)
{
	global_tick += 1U;
 80018c8:	4a02      	ldr	r2, [pc, #8]	; (80018d4 <button_timer_tick+0xc>)
 80018ca:	6813      	ldr	r3, [r2, #0]
 80018cc:	3301      	adds	r3, #1
 80018ce:	6013      	str	r3, [r2, #0]
}
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	2000028c 	.word	0x2000028c

080018d8 <encoder_handling>:

void encoder_handling (void)
{
 80018d8:	b410      	push	{r4}
	//Обработка энкодера
	Enc_Counter = (TIM3->CNT)/2;;
 80018da:	4b5a      	ldr	r3, [pc, #360]	; (8001a44 <encoder_handling+0x16c>)
 80018dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018de:	085b      	lsrs	r3, r3, #1
 80018e0:	4a59      	ldr	r2, [pc, #356]	; (8001a48 <encoder_handling+0x170>)
 80018e2:	7013      	strb	r3, [r2, #0]
	//Обработка кнопки
	if ((GPIOA->IDR & 0x20) != (uint32_t)GPIO_PIN_RESET)
 80018e4:	4b59      	ldr	r3, [pc, #356]	; (8001a4c <encoder_handling+0x174>)
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	f013 0f20 	tst.w	r3, #32
 80018ec:	d017      	beq.n	800191e <encoder_handling+0x46>
	{
		button._state = button._type ^ button._pulling_mode ^ 0x00U;
 80018ee:	4a58      	ldr	r2, [pc, #352]	; (8001a50 <encoder_handling+0x178>)
 80018f0:	7811      	ldrb	r1, [r2, #0]
 80018f2:	7853      	ldrb	r3, [r2, #1]
 80018f4:	404b      	eors	r3, r1
 80018f6:	4a56      	ldr	r2, [pc, #344]	; (8001a50 <encoder_handling+0x178>)
 80018f8:	7093      	strb	r3, [r2, #2]
		button._state = button._type ^ button._pulling_mode ^ 0x01U;
	}


	// Обработка нажатия
	if ((button._state) && !(button._previous_state))
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d06c      	beq.n	80019d8 <encoder_handling+0x100>
 80018fe:	78d2      	ldrb	r2, [r2, #3]
 8001900:	2a00      	cmp	r2, #0
 8001902:	d14b      	bne.n	800199c <encoder_handling+0xc4>
	{
		if (get_state(DEBOUNCE_PROCESS) == 0U)
 8001904:	4a52      	ldr	r2, [pc, #328]	; (8001a50 <encoder_handling+0x178>)
 8001906:	8892      	ldrh	r2, [r2, #4]
 8001908:	f012 0f01 	tst.w	r2, #1
 800190c:	d10e      	bne.n	800192c <encoder_handling+0x54>
		{
		  set_state(DEBOUNCE_PROCESS);
 800190e:	4950      	ldr	r1, [pc, #320]	; (8001a50 <encoder_handling+0x178>)
 8001910:	f042 0201 	orr.w	r2, r2, #1
 8001914:	808a      	strh	r2, [r1, #4]
		  button._timer = global_tick;
 8001916:	4a4f      	ldr	r2, [pc, #316]	; (8001a54 <encoder_handling+0x17c>)
 8001918:	6812      	ldr	r2, [r2, #0]
 800191a:	610a      	str	r2, [r1, #16]
 800191c:	e064      	b.n	80019e8 <encoder_handling+0x110>
		button._state = button._type ^ button._pulling_mode ^ 0x01U;
 800191e:	4a4c      	ldr	r2, [pc, #304]	; (8001a50 <encoder_handling+0x178>)
 8001920:	7813      	ldrb	r3, [r2, #0]
 8001922:	7852      	ldrb	r2, [r2, #1]
 8001924:	4053      	eors	r3, r2
 8001926:	f083 0301 	eor.w	r3, r3, #1
 800192a:	e7e4      	b.n	80018f6 <encoder_handling+0x1e>
		}
		else
		{
		  if (timeout_passed(_debounce_timeout))
 800192c:	4949      	ldr	r1, [pc, #292]	; (8001a54 <encoder_handling+0x17c>)
 800192e:	6809      	ldr	r1, [r1, #0]
 8001930:	4847      	ldr	r0, [pc, #284]	; (8001a50 <encoder_handling+0x178>)
 8001932:	6904      	ldr	r4, [r0, #16]
 8001934:	1b09      	subs	r1, r1, r4
 8001936:	79c0      	ldrb	r0, [r0, #7]
 8001938:	4281      	cmp	r1, r0
 800193a:	d355      	bcc.n	80019e8 <encoder_handling+0x110>
		  {
			button._previous_state = 0x01U;
 800193c:	4944      	ldr	r1, [pc, #272]	; (8001a50 <encoder_handling+0x178>)
 800193e:	2001      	movs	r0, #1
 8001940:	70c8      	strb	r0, [r1, #3]
			set_state(PRESSED);
			set_state(CLICK_PROCESS);
 8001942:	f042 0212 	orr.w	r2, r2, #18
 8001946:	808a      	strh	r2, [r1, #4]

	    button._timer = global_tick;
	  }

	  // Удержание
	  if ((button._previous_state) && (button._state))
 8001948:	e02f      	b.n	80019aa <encoder_handling+0xd2>
	    button._previous_state = 0x00U;
 800194a:	4a41      	ldr	r2, [pc, #260]	; (8001a50 <encoder_handling+0x178>)
 800194c:	2000      	movs	r0, #0
 800194e:	70d0      	strb	r0, [r2, #3]
	    if (get_state(CLICK_PROCESS) != 0U)
 8001950:	f011 0f02 	tst.w	r1, #2
 8001954:	d007      	beq.n	8001966 <encoder_handling+0x8e>
	      reset_state(CLICK_PROCESS);
 8001956:	f021 0103 	bic.w	r1, r1, #3
 800195a:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 800195e:	8091      	strh	r1, [r2, #4]
	      button._clicks_counter++;
 8001960:	7991      	ldrb	r1, [r2, #6]
 8001962:	3101      	adds	r1, #1
 8001964:	7191      	strb	r1, [r2, #6]
	    reset_state(HOLDING_PROCESS);
 8001966:	493a      	ldr	r1, [pc, #232]	; (8001a50 <encoder_handling+0x178>)
 8001968:	888a      	ldrh	r2, [r1, #4]
 800196a:	f022 0218 	bic.w	r2, r2, #24
 800196e:	f042 0220 	orr.w	r2, r2, #32
 8001972:	808a      	strh	r2, [r1, #4]
	    button._timer = global_tick;
 8001974:	4a37      	ldr	r2, [pc, #220]	; (8001a54 <encoder_handling+0x17c>)
 8001976:	6812      	ldr	r2, [r2, #0]
 8001978:	610a      	str	r2, [r1, #16]
 800197a:	e035      	b.n	80019e8 <encoder_handling+0x110>
	  }

	  // Удержание "с инкрементацией" (для пошагового изменения величин)
	  if (get_state(HOLDING_PROCESS) != 0U)
	  {
	    if (timeout_passed(_step_timeout))
 800197c:	4935      	ldr	r1, [pc, #212]	; (8001a54 <encoder_handling+0x17c>)
 800197e:	6809      	ldr	r1, [r1, #0]
 8001980:	4833      	ldr	r0, [pc, #204]	; (8001a50 <encoder_handling+0x178>)
 8001982:	6904      	ldr	r4, [r0, #16]
 8001984:	1b09      	subs	r1, r1, r4
 8001986:	8980      	ldrh	r0, [r0, #12]
 8001988:	4281      	cmp	r1, r0
 800198a:	d332      	bcc.n	80019f2 <encoder_handling+0x11a>
	    {
	      set_state(INCREMENTING_HOLD);
 800198c:	4930      	ldr	r1, [pc, #192]	; (8001a50 <encoder_handling+0x178>)
 800198e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001992:	808a      	strh	r2, [r1, #4]
	      button._timer = global_tick;
 8001994:	4a2f      	ldr	r2, [pc, #188]	; (8001a54 <encoder_handling+0x17c>)
 8001996:	6812      	ldr	r2, [r2, #0]
 8001998:	610a      	str	r2, [r1, #16]
 800199a:	e02a      	b.n	80019f2 <encoder_handling+0x11a>
		reset_state(DEBOUNCE_PROCESS);
 800199c:	4a2c      	ldr	r2, [pc, #176]	; (8001a50 <encoder_handling+0x178>)
 800199e:	8891      	ldrh	r1, [r2, #4]
 80019a0:	f021 0101 	bic.w	r1, r1, #1
 80019a4:	8091      	strh	r1, [r2, #4]
	  if ((button._previous_state) && (button._state))
 80019a6:	78d2      	ldrb	r2, [r2, #3]
 80019a8:	b1f2      	cbz	r2, 80019e8 <encoder_handling+0x110>
	    if (timeout_passed(_hold_timeout))
 80019aa:	4a2a      	ldr	r2, [pc, #168]	; (8001a54 <encoder_handling+0x17c>)
 80019ac:	6812      	ldr	r2, [r2, #0]
 80019ae:	4928      	ldr	r1, [pc, #160]	; (8001a50 <encoder_handling+0x178>)
 80019b0:	6908      	ldr	r0, [r1, #16]
 80019b2:	1a12      	subs	r2, r2, r0
 80019b4:	8949      	ldrh	r1, [r1, #10]
 80019b6:	428a      	cmp	r2, r1
 80019b8:	d316      	bcc.n	80019e8 <encoder_handling+0x110>
	      if (get_state(HOLDING_PROCESS) == 0U)
 80019ba:	4a25      	ldr	r2, [pc, #148]	; (8001a50 <encoder_handling+0x178>)
 80019bc:	8892      	ldrh	r2, [r2, #4]
 80019be:	f012 0f08 	tst.w	r2, #8
 80019c2:	d1db      	bne.n	800197c <encoder_handling+0xa4>
	        reset_state(CLICK_PROCESS);
 80019c4:	4922      	ldr	r1, [pc, #136]	; (8001a50 <encoder_handling+0x178>)
 80019c6:	f022 0202 	bic.w	r2, r2, #2
 80019ca:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 80019ce:	808a      	strh	r2, [r1, #4]
	        button._timer = global_tick;
 80019d0:	4a20      	ldr	r2, [pc, #128]	; (8001a54 <encoder_handling+0x17c>)
 80019d2:	6812      	ldr	r2, [r2, #0]
 80019d4:	610a      	str	r2, [r1, #16]
 80019d6:	e007      	b.n	80019e8 <encoder_handling+0x110>
		reset_state(DEBOUNCE_PROCESS);
 80019d8:	4a1d      	ldr	r2, [pc, #116]	; (8001a50 <encoder_handling+0x178>)
 80019da:	8891      	ldrh	r1, [r2, #4]
 80019dc:	f021 0001 	bic.w	r0, r1, #1
 80019e0:	8090      	strh	r0, [r2, #4]
	  if (!(button._state) && (button._previous_state))
 80019e2:	78d2      	ldrb	r2, [r2, #3]
 80019e4:	2a00      	cmp	r2, #0
 80019e6:	d1b0      	bne.n	800194a <encoder_handling+0x72>
	  if (get_state(HOLDING_PROCESS) != 0U)
 80019e8:	4a19      	ldr	r2, [pc, #100]	; (8001a50 <encoder_handling+0x178>)
 80019ea:	8892      	ldrh	r2, [r2, #4]
 80019ec:	f012 0f08 	tst.w	r2, #8
 80019f0:	d1c4      	bne.n	800197c <encoder_handling+0xa4>
	    }
	  }

	  // Многократное нажатие
	  if (timeout_passed(_click_timeout))
 80019f2:	4a18      	ldr	r2, [pc, #96]	; (8001a54 <encoder_handling+0x17c>)
 80019f4:	6812      	ldr	r2, [r2, #0]
 80019f6:	4816      	ldr	r0, [pc, #88]	; (8001a50 <encoder_handling+0x178>)
 80019f8:	6901      	ldr	r1, [r0, #16]
 80019fa:	1a52      	subs	r2, r2, r1
 80019fc:	8900      	ldrh	r0, [r0, #8]
 80019fe:	4282      	cmp	r2, r0
 8001a00:	d308      	bcc.n	8001a14 <encoder_handling+0x13c>
	  {
	    if ((button._clicks_counter > 0U) && (button._state == 0U))
 8001a02:	4a13      	ldr	r2, [pc, #76]	; (8001a50 <encoder_handling+0x178>)
 8001a04:	7992      	ldrb	r2, [r2, #6]
 8001a06:	b12a      	cbz	r2, 8001a14 <encoder_handling+0x13c>
 8001a08:	b923      	cbnz	r3, 8001a14 <encoder_handling+0x13c>
	    {
	      set_state(MANY_CLICKS);
 8001a0a:	4a11      	ldr	r2, [pc, #68]	; (8001a50 <encoder_handling+0x178>)
 8001a0c:	8893      	ldrh	r3, [r2, #4]
 8001a0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a12:	8093      	strh	r3, [r2, #4]
	    }
	  }

	  // Сброс многократного нажатия
	  if (get_state(CLICKS_COUNTER_RESET) != 0U)
 8001a14:	4b0e      	ldr	r3, [pc, #56]	; (8001a50 <encoder_handling+0x178>)
 8001a16:	889a      	ldrh	r2, [r3, #4]
 8001a18:	f412 7f80 	tst.w	r2, #256	; 0x100
 8001a1c:	d004      	beq.n	8001a28 <encoder_handling+0x150>
	  {
	    reset_state(CLICKS_COUNTER_RESET);
	    reset_state(MANY_CLICKS);
 8001a1e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8001a22:	809a      	strh	r2, [r3, #4]
	    button._clicks_counter = 0U;
 8001a24:	2200      	movs	r2, #0
 8001a26:	719a      	strb	r2, [r3, #6]
	  }

	  // Сброс необработанных состояний
	  if (timeout_passed(_idle_timeout))
 8001a28:	4b0a      	ldr	r3, [pc, #40]	; (8001a54 <encoder_handling+0x17c>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	1a5b      	subs	r3, r3, r1
 8001a2e:	4a08      	ldr	r2, [pc, #32]	; (8001a50 <encoder_handling+0x178>)
 8001a30:	89d2      	ldrh	r2, [r2, #14]
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d303      	bcc.n	8001a3e <encoder_handling+0x166>
	  {
	    button._status = 0;
 8001a36:	4b06      	ldr	r3, [pc, #24]	; (8001a50 <encoder_handling+0x178>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	809a      	strh	r2, [r3, #4]
	    button._clicks_counter = 0U;
 8001a3c:	719a      	strb	r2, [r3, #6]
	  }

}
 8001a3e:	bc10      	pop	{r4}
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	40000400 	.word	0x40000400
 8001a48:	20000274 	.word	0x20000274
 8001a4c:	40010800 	.word	0x40010800
 8001a50:	20000278 	.word	0x20000278
 8001a54:	2000028c 	.word	0x2000028c

08001a58 <keyboard_handling>:

void keyboard_handling(void)
{
 8001a58:	b508      	push	{r3, lr}
	if (button_has_clicks (&button) == BUTTON_YES)
 8001a5a:	480b      	ldr	r0, [pc, #44]	; (8001a88 <keyboard_handling+0x30>)
 8001a5c:	f7ff fefc 	bl	8001858 <button_has_clicks>
 8001a60:	b918      	cbnz	r0, 8001a6a <keyboard_handling+0x12>
  return _button->_clicks_counter;
 8001a62:	4b09      	ldr	r3, [pc, #36]	; (8001a88 <keyboard_handling+0x30>)
	  {
	    switch (button_get_clicks_count (&button))
 8001a64:	799b      	ldrb	r3, [r3, #6]
 8001a66:	2b05      	cmp	r3, #5
 8001a68:	d000      	beq.n	8001a6c <keyboard_handling+0x14>
	      default:                          break;
	    }
	  }


}
 8001a6a:	bd08      	pop	{r3, pc}
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001a6c:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001a70:	4906      	ldr	r1, [pc, #24]	; (8001a8c <keyboard_handling+0x34>)
 8001a72:	68ca      	ldr	r2, [r1, #12]
 8001a74:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001a78:	4b05      	ldr	r3, [pc, #20]	; (8001a90 <keyboard_handling+0x38>)
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	60cb      	str	r3, [r1, #12]
 8001a7e:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001a82:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8001a84:	e7fd      	b.n	8001a82 <keyboard_handling+0x2a>
 8001a86:	bf00      	nop
 8001a88:	20000278 	.word	0x20000278
 8001a8c:	e000ed00 	.word	0xe000ed00
 8001a90:	05fa0004 	.word	0x05fa0004

08001a94 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001a94:	b508      	push	{r3, lr}
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001a96:	2401      	movs	r4, #1
 8001a98:	4620      	mov	r0, r4
 8001a9a:	f004 fc67 	bl	800636c <osDelay>
  for(;;)
 8001a9e:	e7fb      	b.n	8001a98 <StartDefaultTask+0x4>

08001aa0 <StartUARTTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUARTTask */
void StartUARTTask(void const * argument)
{
 8001aa0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN StartUARTTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001aa2:	2401      	movs	r4, #1
 8001aa4:	4620      	mov	r0, r4
 8001aa6:	f004 fc61 	bl	800636c <osDelay>
  for(;;)
 8001aaa:	e7fb      	b.n	8001aa4 <StartUARTTask+0x4>

08001aac <StartdispleyTask>:
{
 8001aac:	b508      	push	{r3, lr}
	display_Init();
 8001aae:	f7ff fe34 	bl	800171a <display_Init>
		osDelay(500);
 8001ab2:	f44f 74fa 	mov.w	r4, #500	; 0x1f4
		display_handle();
 8001ab6:	f7ff fec9 	bl	800184c <display_handle>
		osDelay(500);
 8001aba:	4620      	mov	r0, r4
 8001abc:	f004 fc56 	bl	800636c <osDelay>
	for(;;)
 8001ac0:	e7f9      	b.n	8001ab6 <StartdispleyTask+0xa>

08001ac2 <StartencodetTask>:
{
 8001ac2:	b508      	push	{r3, lr}
	encoder_init();
 8001ac4:	f7ff fed4 	bl	8001870 <encoder_init>
		  osDelay(1);
 8001ac8:	2401      	movs	r4, #1
		encoder_handling();
 8001aca:	f7ff ff05 	bl	80018d8 <encoder_handling>
		keyboard_handling();
 8001ace:	f7ff ffc3 	bl	8001a58 <keyboard_handling>
		  osDelay(1);
 8001ad2:	4620      	mov	r0, r4
 8001ad4:	f004 fc4a 	bl	800636c <osDelay>
	for(;;)
 8001ad8:	e7f7      	b.n	8001aca <StartencodetTask+0x8>
	...

08001adc <StartGPSTask>:
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
	sprintf((char*)Message, "T %02d:%02d:%02d", 12, 12, 12);
 8001ae0:	4d26      	ldr	r5, [pc, #152]	; (8001b7c <StartGPSTask+0xa0>)
 8001ae2:	4c27      	ldr	r4, [pc, #156]	; (8001b80 <StartGPSTask+0xa4>)
 8001ae4:	220c      	movs	r2, #12
 8001ae6:	9200      	str	r2, [sp, #0]
 8001ae8:	4613      	mov	r3, r2
 8001aea:	4629      	mov	r1, r5
 8001aec:	4620      	mov	r0, r4
 8001aee:	f006 f94d 	bl	8007d8c <siprintf>
	osDelay(1000);
 8001af2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001af6:	f004 fc39 	bl	800636c <osDelay>
	sprintf((char*)Message, "T %02d:%02d:%02d", GpsState.Hour, GpsState.Minute, GpsState.Second);
 8001afa:	4a22      	ldr	r2, [pc, #136]	; (8001b84 <StartGPSTask+0xa8>)
 8001afc:	f892 3189 	ldrb.w	r3, [r2, #393]	; 0x189
 8001b00:	9300      	str	r3, [sp, #0]
 8001b02:	f892 3188 	ldrb.w	r3, [r2, #392]	; 0x188
 8001b06:	f892 2187 	ldrb.w	r2, [r2, #391]	; 0x187
 8001b0a:	4629      	mov	r1, r5
 8001b0c:	4620      	mov	r0, r4
 8001b0e:	f006 f93d 	bl	8007d8c <siprintf>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001b12:	4f1d      	ldr	r7, [pc, #116]	; (8001b88 <StartGPSTask+0xac>)
 8001b14:	f44f 5600 	mov.w	r6, #8192	; 0x2000
	  osDelay(1000);
 8001b18:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8001b1c:	e015      	b.n	8001b4a <StartGPSTask+0x6e>
		 sprintf((char*)Message, "T %02d:%02d:%02d", GpsState.Hour, GpsState.Minute, GpsState.Second);
 8001b1e:	f895 3189 	ldrb.w	r3, [r5, #393]	; 0x189
 8001b22:	9300      	str	r3, [sp, #0]
 8001b24:	f895 3188 	ldrb.w	r3, [r5, #392]	; 0x188
 8001b28:	f895 2187 	ldrb.w	r2, [r5, #391]	; 0x187
 8001b2c:	4913      	ldr	r1, [pc, #76]	; (8001b7c <StartGPSTask+0xa0>)
 8001b2e:	4814      	ldr	r0, [pc, #80]	; (8001b80 <StartGPSTask+0xa4>)
 8001b30:	f006 f92c 	bl	8007d8c <siprintf>
	  osDelay(1000);
 8001b34:	4620      	mov	r0, r4
 8001b36:	f004 fc19 	bl	800636c <osDelay>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	4631      	mov	r1, r6
 8001b3e:	4638      	mov	r0, r7
 8001b40:	f001 fa90 	bl	8003064 <HAL_GPIO_WritePin>
	  osDelay(1000);
 8001b44:	4620      	mov	r0, r4
 8001b46:	f004 fc11 	bl	800636c <osDelay>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	4631      	mov	r1, r6
 8001b4e:	4638      	mov	r0, r7
 8001b50:	f001 fa88 	bl	8003064 <HAL_GPIO_WritePin>
	  NEO6_Task(&GpsState);
 8001b54:	4d0b      	ldr	r5, [pc, #44]	; (8001b84 <StartGPSTask+0xa8>)
 8001b56:	4628      	mov	r0, r5
 8001b58:	f000 fecb 	bl	80028f2 <NEO6_Task>
	  osDelay(1000);
 8001b5c:	4620      	mov	r0, r4
 8001b5e:	f004 fc05 	bl	800636c <osDelay>
	  if(NEO6_IsFix(&GpsState))
 8001b62:	4628      	mov	r0, r5
 8001b64:	f000 fec2 	bl	80028ec <NEO6_IsFix>
 8001b68:	2800      	cmp	r0, #0
 8001b6a:	d1d8      	bne.n	8001b1e <StartGPSTask+0x42>
		  sprintf((char*)Message, "No Fix\n\r");
 8001b6c:	4a04      	ldr	r2, [pc, #16]	; (8001b80 <StartGPSTask+0xa4>)
 8001b6e:	4b07      	ldr	r3, [pc, #28]	; (8001b8c <StartGPSTask+0xb0>)
 8001b70:	cb03      	ldmia	r3!, {r0, r1}
 8001b72:	6010      	str	r0, [r2, #0]
 8001b74:	6051      	str	r1, [r2, #4]
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	7213      	strb	r3, [r2, #8]
 8001b7a:	e7db      	b.n	8001b34 <StartGPSTask+0x58>
 8001b7c:	0800baac 	.word	0x0800baac
 8001b80:	20000234 	.word	0x20000234
 8001b84:	200006e8 	.word	0x200006e8
 8001b88:	40011000 	.word	0x40011000
 8001b8c:	0800bac0 	.word	0x0800bac0

08001b90 <StartRTCTask>:
{
 8001b90:	b508      	push	{r3, lr}
	rtc_Init();
 8001b92:	f000 f9fd 	bl	8001f90 <rtc_Init>
    osDelay(100);
 8001b96:	2464      	movs	r4, #100	; 0x64
	  rtc_handle();
 8001b98:	f000 fa0c 	bl	8001fb4 <rtc_handle>
    osDelay(100);
 8001b9c:	4620      	mov	r0, r4
 8001b9e:	f004 fbe5 	bl	800636c <osDelay>
  for(;;)
 8001ba2:	e7f9      	b.n	8001b98 <StartRTCTask+0x8>

08001ba4 <StartSensorTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSensorTask */
void StartSensorTask(void const * argument)
{
 8001ba4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN StartSensorTask */
  /* Infinite loop */

	sensors_Init();
 8001ba6:	f000 fa1d 	bl	8001fe4 <sensors_Init>

  for(;;)
  {
	  sensors_Handle();
	  osDelay(1000);
 8001baa:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
	  sensors_Handle();
 8001bae:	f000 fa25 	bl	8001ffc <sensors_Handle>
	  osDelay(1000);
 8001bb2:	4620      	mov	r0, r4
 8001bb4:	f004 fbda 	bl	800636c <osDelay>
  for(;;)
 8001bb8:	e7f9      	b.n	8001bae <StartSensorTask+0xa>
	...

08001bbc <vApplicationGetIdleTaskMemory>:
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001bbc:	4b03      	ldr	r3, [pc, #12]	; (8001bcc <vApplicationGetIdleTaskMemory+0x10>)
 8001bbe:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001bc0:	4b03      	ldr	r3, [pc, #12]	; (8001bd0 <vApplicationGetIdleTaskMemory+0x14>)
 8001bc2:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001bc4:	2380      	movs	r3, #128	; 0x80
 8001bc6:	6013      	str	r3, [r2, #0]
}
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	200004ac 	.word	0x200004ac
 8001bd0:	200002ac 	.word	0x200002ac

08001bd4 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 8001bd4:	b510      	push	{r4, lr}
 8001bd6:	b0b2      	sub	sp, #200	; 0xc8
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001bd8:	4c3f      	ldr	r4, [pc, #252]	; (8001cd8 <MX_FREERTOS_Init+0x104>)
 8001bda:	f10d 0cac 	add.w	ip, sp, #172	; 0xac
 8001bde:	46a6      	mov	lr, r4
 8001be0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8001be4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001be8:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8001bec:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001bf0:	2100      	movs	r1, #0
 8001bf2:	a82b      	add	r0, sp, #172	; 0xac
 8001bf4:	f004 fb85 	bl	8006302 <osThreadCreate>
 8001bf8:	4b38      	ldr	r3, [pc, #224]	; (8001cdc <MX_FREERTOS_Init+0x108>)
 8001bfa:	6018      	str	r0, [r3, #0]
  osThreadDef(displeyTask, StartdispleyTask, osPriorityLow, 0, 512);
 8001bfc:	f10d 0c90 	add.w	ip, sp, #144	; 0x90
 8001c00:	f104 0e1c 	add.w	lr, r4, #28
 8001c04:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8001c08:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001c0c:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8001c10:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
  displeyTaskHandle = osThreadCreate(osThread(displeyTask), NULL);
 8001c14:	2100      	movs	r1, #0
 8001c16:	a824      	add	r0, sp, #144	; 0x90
 8001c18:	f004 fb73 	bl	8006302 <osThreadCreate>
 8001c1c:	4b30      	ldr	r3, [pc, #192]	; (8001ce0 <MX_FREERTOS_Init+0x10c>)
 8001c1e:	6018      	str	r0, [r3, #0]
  osThreadDef(encodetTask, StartencodetTask, osPriorityLow, 0, 128);
 8001c20:	f10d 0c74 	add.w	ip, sp, #116	; 0x74
 8001c24:	f104 0e38 	add.w	lr, r4, #56	; 0x38
 8001c28:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8001c2c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001c30:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8001c34:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
  encodetTaskHandle = osThreadCreate(osThread(encodetTask), NULL);
 8001c38:	2100      	movs	r1, #0
 8001c3a:	a81d      	add	r0, sp, #116	; 0x74
 8001c3c:	f004 fb61 	bl	8006302 <osThreadCreate>
 8001c40:	4b28      	ldr	r3, [pc, #160]	; (8001ce4 <MX_FREERTOS_Init+0x110>)
 8001c42:	6018      	str	r0, [r3, #0]
  osThreadDef(gpsTask, StartGPSTask, osPriorityLow, 0, 128);
 8001c44:	f10d 0c58 	add.w	ip, sp, #88	; 0x58
 8001c48:	f104 0e54 	add.w	lr, r4, #84	; 0x54
 8001c4c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8001c50:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001c54:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8001c58:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
  gpsTaskHandle = osThreadCreate(osThread(gpsTask), NULL);
 8001c5c:	2100      	movs	r1, #0
 8001c5e:	a816      	add	r0, sp, #88	; 0x58
 8001c60:	f004 fb4f 	bl	8006302 <osThreadCreate>
 8001c64:	4b20      	ldr	r3, [pc, #128]	; (8001ce8 <MX_FREERTOS_Init+0x114>)
 8001c66:	6018      	str	r0, [r3, #0]
  osThreadDef(rtcTask, StartRTCTask, osPriorityLow, 0, 128);
 8001c68:	f10d 0c3c 	add.w	ip, sp, #60	; 0x3c
 8001c6c:	f104 0e70 	add.w	lr, r4, #112	; 0x70
 8001c70:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8001c74:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001c78:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8001c7c:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
  rtcTaskHandle = osThreadCreate(osThread(rtcTask), NULL);
 8001c80:	2100      	movs	r1, #0
 8001c82:	a80f      	add	r0, sp, #60	; 0x3c
 8001c84:	f004 fb3d 	bl	8006302 <osThreadCreate>
 8001c88:	4b18      	ldr	r3, [pc, #96]	; (8001cec <MX_FREERTOS_Init+0x118>)
 8001c8a:	6018      	str	r0, [r3, #0]
  osThreadDef(UARTTask, StartUARTTask, osPriorityIdle, 0, 128);
 8001c8c:	f10d 0c20 	add.w	ip, sp, #32
 8001c90:	f104 0e8c 	add.w	lr, r4, #140	; 0x8c
 8001c94:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8001c98:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001c9c:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8001ca0:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
  UARTTaskHandle = osThreadCreate(osThread(UARTTask), NULL);
 8001ca4:	2100      	movs	r1, #0
 8001ca6:	a808      	add	r0, sp, #32
 8001ca8:	f004 fb2b 	bl	8006302 <osThreadCreate>
 8001cac:	4b10      	ldr	r3, [pc, #64]	; (8001cf0 <MX_FREERTOS_Init+0x11c>)
 8001cae:	6018      	str	r0, [r3, #0]
  osThreadDef(sensorsTask, StartSensorTask, osPriorityIdle, 0, 128);
 8001cb0:	f10d 0e04 	add.w	lr, sp, #4
 8001cb4:	f104 0ca8 	add.w	ip, r4, #168	; 0xa8
 8001cb8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001cbc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8001cc0:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8001cc4:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
  sensorsTaskHandle = osThreadCreate(osThread(sensorsTask), NULL);
 8001cc8:	2100      	movs	r1, #0
 8001cca:	a801      	add	r0, sp, #4
 8001ccc:	f004 fb19 	bl	8006302 <osThreadCreate>
 8001cd0:	4b08      	ldr	r3, [pc, #32]	; (8001cf4 <MX_FREERTOS_Init+0x120>)
 8001cd2:	6018      	str	r0, [r3, #0]
}
 8001cd4:	b032      	add	sp, #200	; 0xc8
 8001cd6:	bd10      	pop	{r4, pc}
 8001cd8:	0800b930 	.word	0x0800b930
 8001cdc:	20000294 	.word	0x20000294
 8001ce0:	20000298 	.word	0x20000298
 8001ce4:	2000029c 	.word	0x2000029c
 8001ce8:	200002a0 	.word	0x200002a0
 8001cec:	200002a4 	.word	0x200002a4
 8001cf0:	20000290 	.word	0x20000290
 8001cf4:	200002a8 	.word	0x200002a8

08001cf8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001cf8:	b530      	push	{r4, r5, lr}
 8001cfa:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cfc:	2400      	movs	r4, #0
 8001cfe:	9404      	str	r4, [sp, #16]
 8001d00:	9405      	str	r4, [sp, #20]
 8001d02:	9406      	str	r4, [sp, #24]
 8001d04:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d06:	4b20      	ldr	r3, [pc, #128]	; (8001d88 <MX_GPIO_Init+0x90>)
 8001d08:	699a      	ldr	r2, [r3, #24]
 8001d0a:	f042 0210 	orr.w	r2, r2, #16
 8001d0e:	619a      	str	r2, [r3, #24]
 8001d10:	699a      	ldr	r2, [r3, #24]
 8001d12:	f002 0210 	and.w	r2, r2, #16
 8001d16:	9200      	str	r2, [sp, #0]
 8001d18:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d1a:	699a      	ldr	r2, [r3, #24]
 8001d1c:	f042 0220 	orr.w	r2, r2, #32
 8001d20:	619a      	str	r2, [r3, #24]
 8001d22:	699a      	ldr	r2, [r3, #24]
 8001d24:	f002 0220 	and.w	r2, r2, #32
 8001d28:	9201      	str	r2, [sp, #4]
 8001d2a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d2c:	699a      	ldr	r2, [r3, #24]
 8001d2e:	f042 0204 	orr.w	r2, r2, #4
 8001d32:	619a      	str	r2, [r3, #24]
 8001d34:	699a      	ldr	r2, [r3, #24]
 8001d36:	f002 0204 	and.w	r2, r2, #4
 8001d3a:	9202      	str	r2, [sp, #8]
 8001d3c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d3e:	699a      	ldr	r2, [r3, #24]
 8001d40:	f042 0208 	orr.w	r2, r2, #8
 8001d44:	619a      	str	r2, [r3, #24]
 8001d46:	699b      	ldr	r3, [r3, #24]
 8001d48:	f003 0308 	and.w	r3, r3, #8
 8001d4c:	9303      	str	r3, [sp, #12]
 8001d4e:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001d50:	4d0e      	ldr	r5, [pc, #56]	; (8001d8c <MX_GPIO_Init+0x94>)
 8001d52:	4622      	mov	r2, r4
 8001d54:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d58:	4628      	mov	r0, r5
 8001d5a:	f001 f983 	bl	8003064 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001d5e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d62:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d64:	2301      	movs	r3, #1
 8001d66:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d68:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001d6a:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d6c:	a904      	add	r1, sp, #16
 8001d6e:	4628      	mov	r0, r5
 8001d70:	f001 f83e 	bl	8002df0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001d74:	2320      	movs	r3, #32
 8001d76:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d78:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7a:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d7c:	a904      	add	r1, sp, #16
 8001d7e:	4804      	ldr	r0, [pc, #16]	; (8001d90 <MX_GPIO_Init+0x98>)
 8001d80:	f001 f836 	bl	8002df0 <HAL_GPIO_Init>

}
 8001d84:	b009      	add	sp, #36	; 0x24
 8001d86:	bd30      	pop	{r4, r5, pc}
 8001d88:	40021000 	.word	0x40021000
 8001d8c:	40011000 	.word	0x40011000
 8001d90:	40010800 	.word	0x40010800

08001d94 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001d94:	b508      	push	{r3, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001d96:	480b      	ldr	r0, [pc, #44]	; (8001dc4 <MX_I2C1_Init+0x30>)
 8001d98:	4b0b      	ldr	r3, [pc, #44]	; (8001dc8 <MX_I2C1_Init+0x34>)
 8001d9a:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001d9c:	4b0b      	ldr	r3, [pc, #44]	; (8001dcc <MX_I2C1_Init+0x38>)
 8001d9e:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001da0:	2300      	movs	r3, #0
 8001da2:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001da4:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001da6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001daa:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001dac:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001dae:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001db0:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001db2:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001db4:	f001 fbd8 	bl	8003568 <HAL_I2C_Init>
 8001db8:	b900      	cbnz	r0, 8001dbc <MX_I2C1_Init+0x28>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001dba:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001dbc:	f000 f8e6 	bl	8001f8c <Error_Handler>
}
 8001dc0:	e7fb      	b.n	8001dba <MX_I2C1_Init+0x26>
 8001dc2:	bf00      	nop
 8001dc4:	20000500 	.word	0x20000500
 8001dc8:	40005400 	.word	0x40005400
 8001dcc:	00061a80 	.word	0x00061a80

08001dd0 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001dd0:	b508      	push	{r3, lr}
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001dd2:	480b      	ldr	r0, [pc, #44]	; (8001e00 <MX_I2C2_Init+0x30>)
 8001dd4:	4b0b      	ldr	r3, [pc, #44]	; (8001e04 <MX_I2C2_Init+0x34>)
 8001dd6:	6003      	str	r3, [r0, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001dd8:	4b0b      	ldr	r3, [pc, #44]	; (8001e08 <MX_I2C2_Init+0x38>)
 8001dda:	6043      	str	r3, [r0, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	6083      	str	r3, [r0, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001de0:	60c3      	str	r3, [r0, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001de2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001de6:	6102      	str	r2, [r0, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001de8:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001dea:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001dec:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001dee:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001df0:	f001 fbba 	bl	8003568 <HAL_I2C_Init>
 8001df4:	b900      	cbnz	r0, 8001df8 <MX_I2C2_Init+0x28>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001df6:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001df8:	f000 f8c8 	bl	8001f8c <Error_Handler>
}
 8001dfc:	e7fb      	b.n	8001df6 <MX_I2C2_Init+0x26>
 8001dfe:	bf00      	nop
 8001e00:	20000554 	.word	0x20000554
 8001e04:	40005800 	.word	0x40005800
 8001e08:	000186a0 	.word	0x000186a0

08001e0c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001e0c:	b510      	push	{r4, lr}
 8001e0e:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e10:	2300      	movs	r3, #0
 8001e12:	9304      	str	r3, [sp, #16]
 8001e14:	9305      	str	r3, [sp, #20]
 8001e16:	9306      	str	r3, [sp, #24]
 8001e18:	9307      	str	r3, [sp, #28]
  if(i2cHandle->Instance==I2C1)
 8001e1a:	6803      	ldr	r3, [r0, #0]
 8001e1c:	4a2a      	ldr	r2, [pc, #168]	; (8001ec8 <HAL_I2C_MspInit+0xbc>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d004      	beq.n	8001e2c <HAL_I2C_MspInit+0x20>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
  else if(i2cHandle->Instance==I2C2)
 8001e22:	4a2a      	ldr	r2, [pc, #168]	; (8001ecc <HAL_I2C_MspInit+0xc0>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d02f      	beq.n	8001e88 <HAL_I2C_MspInit+0x7c>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001e28:	b008      	add	sp, #32
 8001e2a:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e2c:	4c28      	ldr	r4, [pc, #160]	; (8001ed0 <HAL_I2C_MspInit+0xc4>)
 8001e2e:	69a3      	ldr	r3, [r4, #24]
 8001e30:	f043 0308 	orr.w	r3, r3, #8
 8001e34:	61a3      	str	r3, [r4, #24]
 8001e36:	69a3      	ldr	r3, [r4, #24]
 8001e38:	f003 0308 	and.w	r3, r3, #8
 8001e3c:	9300      	str	r3, [sp, #0]
 8001e3e:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e40:	23c0      	movs	r3, #192	; 0xc0
 8001e42:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e44:	2312      	movs	r3, #18
 8001e46:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e48:	2303      	movs	r3, #3
 8001e4a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e4c:	a904      	add	r1, sp, #16
 8001e4e:	4821      	ldr	r0, [pc, #132]	; (8001ed4 <HAL_I2C_MspInit+0xc8>)
 8001e50:	f000 ffce 	bl	8002df0 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e54:	69e3      	ldr	r3, [r4, #28]
 8001e56:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e5a:	61e3      	str	r3, [r4, #28]
 8001e5c:	69e3      	ldr	r3, [r4, #28]
 8001e5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e62:	9301      	str	r3, [sp, #4]
 8001e64:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8001e66:	2200      	movs	r2, #0
 8001e68:	2105      	movs	r1, #5
 8001e6a:	201f      	movs	r0, #31
 8001e6c:	f000 ff08 	bl	8002c80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001e70:	201f      	movs	r0, #31
 8001e72:	f000 ff3b 	bl	8002cec <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8001e76:	2200      	movs	r2, #0
 8001e78:	2105      	movs	r1, #5
 8001e7a:	2020      	movs	r0, #32
 8001e7c:	f000 ff00 	bl	8002c80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001e80:	2020      	movs	r0, #32
 8001e82:	f000 ff33 	bl	8002cec <HAL_NVIC_EnableIRQ>
 8001e86:	e7cf      	b.n	8001e28 <HAL_I2C_MspInit+0x1c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e88:	4c11      	ldr	r4, [pc, #68]	; (8001ed0 <HAL_I2C_MspInit+0xc4>)
 8001e8a:	69a3      	ldr	r3, [r4, #24]
 8001e8c:	f043 0308 	orr.w	r3, r3, #8
 8001e90:	61a3      	str	r3, [r4, #24]
 8001e92:	69a3      	ldr	r3, [r4, #24]
 8001e94:	f003 0308 	and.w	r3, r3, #8
 8001e98:	9302      	str	r3, [sp, #8]
 8001e9a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001e9c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001ea0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ea2:	2312      	movs	r3, #18
 8001ea4:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eaa:	a904      	add	r1, sp, #16
 8001eac:	4809      	ldr	r0, [pc, #36]	; (8001ed4 <HAL_I2C_MspInit+0xc8>)
 8001eae:	f000 ff9f 	bl	8002df0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001eb2:	69e3      	ldr	r3, [r4, #28]
 8001eb4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001eb8:	61e3      	str	r3, [r4, #28]
 8001eba:	69e3      	ldr	r3, [r4, #28]
 8001ebc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ec0:	9303      	str	r3, [sp, #12]
 8001ec2:	9b03      	ldr	r3, [sp, #12]
}
 8001ec4:	e7b0      	b.n	8001e28 <HAL_I2C_MspInit+0x1c>
 8001ec6:	bf00      	nop
 8001ec8:	40005400 	.word	0x40005400
 8001ecc:	40005800 	.word	0x40005800
 8001ed0:	40021000 	.word	0x40021000
 8001ed4:	40010c00 	.word	0x40010c00

08001ed8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ed8:	b500      	push	{lr}
 8001eda:	b091      	sub	sp, #68	; 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001edc:	2300      	movs	r3, #0
 8001ede:	9308      	str	r3, [sp, #32]
 8001ee0:	9309      	str	r3, [sp, #36]	; 0x24
 8001ee2:	930b      	str	r3, [sp, #44]	; 0x2c
 8001ee4:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ee6:	9301      	str	r3, [sp, #4]
 8001ee8:	9302      	str	r3, [sp, #8]
 8001eea:	9303      	str	r3, [sp, #12]
 8001eec:	9304      	str	r3, [sp, #16]
 8001eee:	9305      	str	r3, [sp, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ef4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ef8:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001efa:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001efc:	2202      	movs	r2, #2
 8001efe:	920d      	str	r2, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f00:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001f02:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001f06:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f08:	a806      	add	r0, sp, #24
 8001f0a:	f003 f941 	bl	8005190 <HAL_RCC_OscConfig>
 8001f0e:	b980      	cbnz	r0, 8001f32 <SystemClock_Config+0x5a>
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f10:	230f      	movs	r3, #15
 8001f12:	9301      	str	r3, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f14:	2102      	movs	r1, #2
 8001f16:	9102      	str	r1, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001f1c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f20:	9204      	str	r2, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f22:	9305      	str	r3, [sp, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001f24:	a801      	add	r0, sp, #4
 8001f26:	f003 fb73 	bl	8005610 <HAL_RCC_ClockConfig>
 8001f2a:	b920      	cbnz	r0, 8001f36 <SystemClock_Config+0x5e>
  {
    Error_Handler();
  }
}
 8001f2c:	b011      	add	sp, #68	; 0x44
 8001f2e:	f85d fb04 	ldr.w	pc, [sp], #4
  __ASM volatile ("cpsid i" : : : "memory");
 8001f32:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f34:	e7fe      	b.n	8001f34 <SystemClock_Config+0x5c>
 8001f36:	b672      	cpsid	i
 8001f38:	e7fe      	b.n	8001f38 <SystemClock_Config+0x60>

08001f3a <main>:
{
 8001f3a:	b508      	push	{r3, lr}
  HAL_Init();
 8001f3c:	f000 fe56 	bl	8002bec <HAL_Init>
  SystemClock_Config();
 8001f40:	f7ff ffca 	bl	8001ed8 <SystemClock_Config>
  MX_GPIO_Init();
 8001f44:	f7ff fed8 	bl	8001cf8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001f48:	f7ff ff24 	bl	8001d94 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001f4c:	f7ff ff40 	bl	8001dd0 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8001f50:	f000 f9b4 	bl	80022bc <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001f54:	f000 f9cc 	bl	80022f0 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8001f58:	f000 f946 	bl	80021e8 <MX_TIM3_Init>
  MX_FREERTOS_Init();
 8001f5c:	f7ff fe3a 	bl	8001bd4 <MX_FREERTOS_Init>
  osKernelStart();
 8001f60:	f004 f9ca 	bl	80062f8 <osKernelStart>
  while (1)
 8001f64:	e7fe      	b.n	8001f64 <main+0x2a>
	...

08001f68 <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM4) {
 8001f68:	6802      	ldr	r2, [r0, #0]
 8001f6a:	4b07      	ldr	r3, [pc, #28]	; (8001f88 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d000      	beq.n	8001f72 <HAL_TIM_PeriodElapsedCallback+0xa>
 8001f70:	4770      	bx	lr
{
 8001f72:	b510      	push	{r4, lr}
 8001f74:	4604      	mov	r4, r0
    HAL_IncTick();
 8001f76:	f000 fe4b 	bl	8002c10 <HAL_IncTick>
  if (htim->Instance == TIM4)
 8001f7a:	6822      	ldr	r2, [r4, #0]
 8001f7c:	4b02      	ldr	r3, [pc, #8]	; (8001f88 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	d101      	bne.n	8001f86 <HAL_TIM_PeriodElapsedCallback+0x1e>
	  button_timer_tick();
 8001f82:	f7ff fca1 	bl	80018c8 <button_timer_tick>
}
 8001f86:	bd10      	pop	{r4, pc}
 8001f88:	40000800 	.word	0x40000800

08001f8c <Error_Handler>:
 8001f8c:	b672      	cpsid	i
  while (1)
 8001f8e:	e7fe      	b.n	8001f8e <Error_Handler+0x2>

08001f90 <rtc_Init>:
/* Private function prototypes -----------------------------------------------*/


/* Private user code ---------------------------------------------------------*/
void rtc_Init(void)
{
 8001f90:	b508      	push	{r3, lr}
	timedata.sec	= 0;
 8001f92:	4b06      	ldr	r3, [pc, #24]	; (8001fac <rtc_Init+0x1c>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	701a      	strb	r2, [r3, #0]
	timedata.min	= 0;
 8001f98:	705a      	strb	r2, [r3, #1]
	timedata.hour	= 0;
 8001f9a:	709a      	strb	r2, [r3, #2]

	timedata.date	= 0;
 8001f9c:	70da      	strb	r2, [r3, #3]
	timedata.month	= 0;
 8001f9e:	711a      	strb	r2, [r3, #4]
	timedata.year	= 0;
 8001fa0:	80da      	strh	r2, [r3, #6]

	DS1307_Init(&hi2c2);
 8001fa2:	4803      	ldr	r0, [pc, #12]	; (8001fb0 <rtc_Init+0x20>)
 8001fa4:	f000 fa98 	bl	80024d8 <DS1307_Init>
//		DS1307_SetYear(2024);
////		DS1307_SetDayOfWeek(4);
//		DS1307_SetHour(17);
//		DS1307_SetMinute(6);
//		DS1307_SetSecond(00);
}
 8001fa8:	bd08      	pop	{r3, pc}
 8001faa:	bf00      	nop
 8001fac:	200005a8 	.word	0x200005a8
 8001fb0:	20000554 	.word	0x20000554

08001fb4 <rtc_handle>:

void rtc_handle (void)
{
 8001fb4:	b510      	push	{r4, lr}
	timedata.sec	= DS1307_GetSecond();
 8001fb6:	f000 fad2 	bl	800255e <DS1307_GetSecond>
 8001fba:	4c09      	ldr	r4, [pc, #36]	; (8001fe0 <rtc_handle+0x2c>)
 8001fbc:	7020      	strb	r0, [r4, #0]
	timedata.min	= DS1307_GetMinute();
 8001fbe:	f000 fac7 	bl	8002550 <DS1307_GetMinute>
 8001fc2:	7060      	strb	r0, [r4, #1]
	timedata.hour	= DS1307_GetHour();
 8001fc4:	f000 fabb 	bl	800253e <DS1307_GetHour>
 8001fc8:	70a0      	strb	r0, [r4, #2]

	timedata.date	= DS1307_GetDate();
 8001fca:	f000 fa98 	bl	80024fe <DS1307_GetDate>
 8001fce:	70e0      	strb	r0, [r4, #3]
	timedata.month	= DS1307_GetMonth();
 8001fd0:	f000 fa9c 	bl	800250c <DS1307_GetMonth>
 8001fd4:	7120      	strb	r0, [r4, #4]
	timedata.year	= DS1307_GetYear();
 8001fd6:	f000 faa0 	bl	800251a <DS1307_GetYear>
 8001fda:	80e0      	strh	r0, [r4, #6]
}
 8001fdc:	bd10      	pop	{r4, pc}
 8001fde:	bf00      	nop
 8001fe0:	200005a8 	.word	0x200005a8

08001fe4 <sensors_Init>:
/* Private function prototypes -----------------------------------------------*/


/* Private user code ---------------------------------------------------------*/
void sensors_Init(void)
{
 8001fe4:	b508      	push	{r3, lr}
	BME280_sensor.temperature = 0.0f;
 8001fe6:	4b04      	ldr	r3, [pc, #16]	; (8001ff8 <sensors_Init+0x14>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	601a      	str	r2, [r3, #0]
	BME280_sensor.pressure = 0.0f;
 8001fec:	605a      	str	r2, [r3, #4]
	BME280_sensor.humidity = 0.0f;
 8001fee:	609a      	str	r2, [r3, #8]
	BME280_Init();
 8001ff0:	f7ff fb74 	bl	80016dc <BME280_Init>
}
 8001ff4:	bd08      	pop	{r3, pc}
 8001ff6:	bf00      	nop
 8001ff8:	200005b0 	.word	0x200005b0

08001ffc <sensors_Handle>:

void sensors_Handle(void)
{
 8001ffc:	b510      	push	{r4, lr}
	BME280_sensor.temperature = BME280_ReadTemperature();
 8001ffe:	f7ff fa05 	bl	800140c <BME280_ReadTemperature>
 8002002:	4c03      	ldr	r4, [pc, #12]	; (8002010 <sensors_Handle+0x14>)
 8002004:	6020      	str	r0, [r4, #0]
	BME280_sensor.pressure = BME280_ReadPressure();
 8002006:	f7ff fa33 	bl	8001470 <BME280_ReadPressure>
 800200a:	6060      	str	r0, [r4, #4]

}
 800200c:	bd10      	pop	{r4, pc}
 800200e:	bf00      	nop
 8002010:	200005b0 	.word	0x200005b0

08002014 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002014:	b500      	push	{lr}
 8002016:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002018:	4b11      	ldr	r3, [pc, #68]	; (8002060 <HAL_MspInit+0x4c>)
 800201a:	699a      	ldr	r2, [r3, #24]
 800201c:	f042 0201 	orr.w	r2, r2, #1
 8002020:	619a      	str	r2, [r3, #24]
 8002022:	699a      	ldr	r2, [r3, #24]
 8002024:	f002 0201 	and.w	r2, r2, #1
 8002028:	9200      	str	r2, [sp, #0]
 800202a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800202c:	69da      	ldr	r2, [r3, #28]
 800202e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002032:	61da      	str	r2, [r3, #28]
 8002034:	69db      	ldr	r3, [r3, #28]
 8002036:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800203a:	9301      	str	r3, [sp, #4]
 800203c:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800203e:	2200      	movs	r2, #0
 8002040:	210f      	movs	r1, #15
 8002042:	f06f 0001 	mvn.w	r0, #1
 8002046:	f000 fe1b 	bl	8002c80 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800204a:	4a06      	ldr	r2, [pc, #24]	; (8002064 <HAL_MspInit+0x50>)
 800204c:	6853      	ldr	r3, [r2, #4]
 800204e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002052:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002056:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002058:	b003      	add	sp, #12
 800205a:	f85d fb04 	ldr.w	pc, [sp], #4
 800205e:	bf00      	nop
 8002060:	40021000 	.word	0x40021000
 8002064:	40010000 	.word	0x40010000

08002068 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002068:	b500      	push	{lr}
 800206a:	b089      	sub	sp, #36	; 0x24
 800206c:	4601      	mov	r1, r0
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 800206e:	2200      	movs	r2, #0
 8002070:	201e      	movs	r0, #30
 8002072:	f000 fe05 	bl	8002c80 <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002076:	201e      	movs	r0, #30
 8002078:	f000 fe38 	bl	8002cec <HAL_NVIC_EnableIRQ>

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 800207c:	4b15      	ldr	r3, [pc, #84]	; (80020d4 <HAL_InitTick+0x6c>)
 800207e:	69da      	ldr	r2, [r3, #28]
 8002080:	f042 0204 	orr.w	r2, r2, #4
 8002084:	61da      	str	r2, [r3, #28]
 8002086:	69db      	ldr	r3, [r3, #28]
 8002088:	f003 0304 	and.w	r3, r3, #4
 800208c:	9301      	str	r3, [sp, #4]
 800208e:	9b01      	ldr	r3, [sp, #4]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002090:	a902      	add	r1, sp, #8
 8002092:	a803      	add	r0, sp, #12
 8002094:	f003 fb94 	bl	80057c0 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002098:	f003 fb72 	bl	8005780 <HAL_RCC_GetPCLK1Freq>
 800209c:	4603      	mov	r3, r0
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 800209e:	480e      	ldr	r0, [pc, #56]	; (80020d8 <HAL_InitTick+0x70>)
 80020a0:	4a0e      	ldr	r2, [pc, #56]	; (80020dc <HAL_InitTick+0x74>)
 80020a2:	6002      	str	r2, [r0, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80020a4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80020a8:	60c2      	str	r2, [r0, #12]
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80020aa:	005b      	lsls	r3, r3, #1
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80020ac:	4a0c      	ldr	r2, [pc, #48]	; (80020e0 <HAL_InitTick+0x78>)
 80020ae:	fba2 2303 	umull	r2, r3, r2, r3
 80020b2:	0c9b      	lsrs	r3, r3, #18
 80020b4:	3b01      	subs	r3, #1
  htim4.Init.Prescaler = uwPrescalerValue;
 80020b6:	6043      	str	r3, [r0, #4]
  htim4.Init.ClockDivision = 0;
 80020b8:	2300      	movs	r3, #0
 80020ba:	6103      	str	r3, [r0, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020bc:	6083      	str	r3, [r0, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 80020be:	f003 fce3 	bl	8005a88 <HAL_TIM_Base_Init>
 80020c2:	b118      	cbz	r0, 80020cc <HAL_InitTick+0x64>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
  }

  /* Return function status */
  return HAL_ERROR;
 80020c4:	2001      	movs	r0, #1
}
 80020c6:	b009      	add	sp, #36	; 0x24
 80020c8:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_TIM_Base_Start_IT(&htim4);
 80020cc:	4802      	ldr	r0, [pc, #8]	; (80020d8 <HAL_InitTick+0x70>)
 80020ce:	f003 fb97 	bl	8005800 <HAL_TIM_Base_Start_IT>
 80020d2:	e7f8      	b.n	80020c6 <HAL_InitTick+0x5e>
 80020d4:	40021000 	.word	0x40021000
 80020d8:	200005bc 	.word	0x200005bc
 80020dc:	40000800 	.word	0x40000800
 80020e0:	431bde83 	.word	0x431bde83

080020e4 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020e4:	e7fe      	b.n	80020e4 <NMI_Handler>

080020e6 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020e6:	e7fe      	b.n	80020e6 <HardFault_Handler>

080020e8 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020e8:	e7fe      	b.n	80020e8 <MemManage_Handler>

080020ea <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020ea:	e7fe      	b.n	80020ea <BusFault_Handler>

080020ec <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020ec:	e7fe      	b.n	80020ec <UsageFault_Handler>

080020ee <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020ee:	4770      	bx	lr

080020f0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80020f0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80020f2:	4802      	ldr	r0, [pc, #8]	; (80020fc <TIM4_IRQHandler+0xc>)
 80020f4:	f003 fbbc 	bl	8005870 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80020f8:	bd08      	pop	{r3, pc}
 80020fa:	bf00      	nop
 80020fc:	200005bc 	.word	0x200005bc

08002100 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002100:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002102:	4802      	ldr	r0, [pc, #8]	; (800210c <I2C1_EV_IRQHandler+0xc>)
 8002104:	f002 fa14 	bl	8004530 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002108:	bd08      	pop	{r3, pc}
 800210a:	bf00      	nop
 800210c:	20000500 	.word	0x20000500

08002110 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002110:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002112:	4802      	ldr	r0, [pc, #8]	; (800211c <I2C1_ER_IRQHandler+0xc>)
 8002114:	f002 ff5c 	bl	8004fd0 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002118:	bd08      	pop	{r3, pc}
 800211a:	bf00      	nop
 800211c:	20000500 	.word	0x20000500

08002120 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002120:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002122:	4802      	ldr	r0, [pc, #8]	; (800212c <USART1_IRQHandler+0xc>)
 8002124:	f003 ff6a 	bl	8005ffc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002128:	bd08      	pop	{r3, pc}
 800212a:	bf00      	nop
 800212c:	20000650 	.word	0x20000650

08002130 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8002130:	2001      	movs	r0, #1
 8002132:	4770      	bx	lr

08002134 <_kill>:

int _kill(int pid, int sig)
{
 8002134:	b508      	push	{r3, lr}
	errno = EINVAL;
 8002136:	f004 ff5d 	bl	8006ff4 <__errno>
 800213a:	2316      	movs	r3, #22
 800213c:	6003      	str	r3, [r0, #0]
	return -1;
}
 800213e:	f04f 30ff 	mov.w	r0, #4294967295
 8002142:	bd08      	pop	{r3, pc}

08002144 <_exit>:

void _exit (int status)
{
 8002144:	b508      	push	{r3, lr}
	errno = EINVAL;
 8002146:	f004 ff55 	bl	8006ff4 <__errno>
 800214a:	2316      	movs	r3, #22
 800214c:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 800214e:	e7fe      	b.n	800214e <_exit+0xa>

08002150 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002150:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002152:	1e16      	subs	r6, r2, #0
 8002154:	dd07      	ble.n	8002166 <_read+0x16>
 8002156:	460c      	mov	r4, r1
 8002158:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 800215a:	f3af 8000 	nop.w
 800215e:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002162:	42a5      	cmp	r5, r4
 8002164:	d1f9      	bne.n	800215a <_read+0xa>
	}

return len;
}
 8002166:	4630      	mov	r0, r6
 8002168:	bd70      	pop	{r4, r5, r6, pc}

0800216a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800216a:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800216c:	1e16      	subs	r6, r2, #0
 800216e:	dd07      	ble.n	8002180 <_write+0x16>
 8002170:	460c      	mov	r4, r1
 8002172:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 8002174:	f814 0b01 	ldrb.w	r0, [r4], #1
 8002178:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800217c:	42a5      	cmp	r5, r4
 800217e:	d1f9      	bne.n	8002174 <_write+0xa>
	}
	return len;
}
 8002180:	4630      	mov	r0, r6
 8002182:	bd70      	pop	{r4, r5, r6, pc}

08002184 <_close>:

int _close(int file)
{
	return -1;
}
 8002184:	f04f 30ff 	mov.w	r0, #4294967295
 8002188:	4770      	bx	lr

0800218a <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800218a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800218e:	604b      	str	r3, [r1, #4]
	return 0;
}
 8002190:	2000      	movs	r0, #0
 8002192:	4770      	bx	lr

08002194 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8002194:	2001      	movs	r0, #1
 8002196:	4770      	bx	lr

08002198 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8002198:	2000      	movs	r0, #0
 800219a:	4770      	bx	lr

0800219c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800219c:	b508      	push	{r3, lr}
 800219e:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021a0:	4a0c      	ldr	r2, [pc, #48]	; (80021d4 <_sbrk+0x38>)
 80021a2:	6812      	ldr	r2, [r2, #0]
 80021a4:	b152      	cbz	r2, 80021bc <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021a6:	4a0b      	ldr	r2, [pc, #44]	; (80021d4 <_sbrk+0x38>)
 80021a8:	6810      	ldr	r0, [r2, #0]
 80021aa:	4403      	add	r3, r0
 80021ac:	4a0a      	ldr	r2, [pc, #40]	; (80021d8 <_sbrk+0x3c>)
 80021ae:	490b      	ldr	r1, [pc, #44]	; (80021dc <_sbrk+0x40>)
 80021b0:	1a52      	subs	r2, r2, r1
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d806      	bhi.n	80021c4 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80021b6:	4a07      	ldr	r2, [pc, #28]	; (80021d4 <_sbrk+0x38>)
 80021b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 80021ba:	bd08      	pop	{r3, pc}
    __sbrk_heap_end = &_end;
 80021bc:	4a05      	ldr	r2, [pc, #20]	; (80021d4 <_sbrk+0x38>)
 80021be:	4908      	ldr	r1, [pc, #32]	; (80021e0 <_sbrk+0x44>)
 80021c0:	6011      	str	r1, [r2, #0]
 80021c2:	e7f0      	b.n	80021a6 <_sbrk+0xa>
    errno = ENOMEM;
 80021c4:	f004 ff16 	bl	8006ff4 <__errno>
 80021c8:	230c      	movs	r3, #12
 80021ca:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80021cc:	f04f 30ff 	mov.w	r0, #4294967295
 80021d0:	e7f3      	b.n	80021ba <_sbrk+0x1e>
 80021d2:	bf00      	nop
 80021d4:	20000604 	.word	0x20000604
 80021d8:	20005000 	.word	0x20005000
 80021dc:	00000400 	.word	0x00000400
 80021e0:	200027b8 	.word	0x200027b8

080021e4 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021e4:	4770      	bx	lr
	...

080021e8 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80021e8:	b500      	push	{lr}
 80021ea:	b08d      	sub	sp, #52	; 0x34

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80021ec:	2300      	movs	r3, #0
 80021ee:	9306      	str	r3, [sp, #24]
 80021f0:	930a      	str	r3, [sp, #40]	; 0x28
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021f2:	9301      	str	r3, [sp, #4]
 80021f4:	9302      	str	r3, [sp, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80021f6:	4814      	ldr	r0, [pc, #80]	; (8002248 <MX_TIM3_Init+0x60>)
 80021f8:	4a14      	ldr	r2, [pc, #80]	; (800224c <MX_TIM3_Init+0x64>)
 80021fa:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 0;
 80021fc:	6043      	str	r3, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021fe:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 1000;
 8002200:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002204:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002206:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002208:	6183      	str	r3, [r0, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800220a:	2301      	movs	r3, #1
 800220c:	9303      	str	r3, [sp, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 800220e:	2102      	movs	r1, #2
 8002210:	9104      	str	r1, [sp, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002212:	9305      	str	r3, [sp, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC1Filter = 6;
 8002214:	2206      	movs	r2, #6
 8002216:	9207      	str	r2, [sp, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8002218:	9108      	str	r1, [sp, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800221a:	9309      	str	r3, [sp, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC2Filter = 6;
 800221c:	920b      	str	r2, [sp, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800221e:	a903      	add	r1, sp, #12
 8002220:	f003 fc5e 	bl	8005ae0 <HAL_TIM_Encoder_Init>
 8002224:	b950      	cbnz	r0, 800223c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002226:	2300      	movs	r3, #0
 8002228:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800222a:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800222c:	a901      	add	r1, sp, #4
 800222e:	4806      	ldr	r0, [pc, #24]	; (8002248 <MX_TIM3_Init+0x60>)
 8002230:	f003 fd8e 	bl	8005d50 <HAL_TIMEx_MasterConfigSynchronization>
 8002234:	b928      	cbnz	r0, 8002242 <MX_TIM3_Init+0x5a>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002236:	b00d      	add	sp, #52	; 0x34
 8002238:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800223c:	f7ff fea6 	bl	8001f8c <Error_Handler>
 8002240:	e7f1      	b.n	8002226 <MX_TIM3_Init+0x3e>
    Error_Handler();
 8002242:	f7ff fea3 	bl	8001f8c <Error_Handler>
}
 8002246:	e7f6      	b.n	8002236 <MX_TIM3_Init+0x4e>
 8002248:	20000608 	.word	0x20000608
 800224c:	40000400 	.word	0x40000400

08002250 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002250:	b500      	push	{lr}
 8002252:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002254:	2300      	movs	r3, #0
 8002256:	9302      	str	r3, [sp, #8]
 8002258:	9303      	str	r3, [sp, #12]
 800225a:	9304      	str	r3, [sp, #16]
 800225c:	9305      	str	r3, [sp, #20]
  if(tim_encoderHandle->Instance==TIM3)
 800225e:	6802      	ldr	r2, [r0, #0]
 8002260:	4b13      	ldr	r3, [pc, #76]	; (80022b0 <HAL_TIM_Encoder_MspInit+0x60>)
 8002262:	429a      	cmp	r2, r3
 8002264:	d002      	beq.n	800226c <HAL_TIM_Encoder_MspInit+0x1c>
  /* USER CODE BEGIN TIM3_MspInit 1 */
    HAL_TIM_Encoder_Start_IT(&htim3,TIM_CHANNEL_2);

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002266:	b007      	add	sp, #28
 8002268:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM3_CLK_ENABLE();
 800226c:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 8002270:	69da      	ldr	r2, [r3, #28]
 8002272:	f042 0202 	orr.w	r2, r2, #2
 8002276:	61da      	str	r2, [r3, #28]
 8002278:	69da      	ldr	r2, [r3, #28]
 800227a:	f002 0202 	and.w	r2, r2, #2
 800227e:	9200      	str	r2, [sp, #0]
 8002280:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002282:	699a      	ldr	r2, [r3, #24]
 8002284:	f042 0204 	orr.w	r2, r2, #4
 8002288:	619a      	str	r2, [r3, #24]
 800228a:	699b      	ldr	r3, [r3, #24]
 800228c:	f003 0304 	and.w	r3, r3, #4
 8002290:	9301      	str	r3, [sp, #4]
 8002292:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002294:	23c0      	movs	r3, #192	; 0xc0
 8002296:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002298:	2301      	movs	r3, #1
 800229a:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800229c:	a902      	add	r1, sp, #8
 800229e:	4805      	ldr	r0, [pc, #20]	; (80022b4 <HAL_TIM_Encoder_MspInit+0x64>)
 80022a0:	f000 fda6 	bl	8002df0 <HAL_GPIO_Init>
    HAL_TIM_Encoder_Start_IT(&htim3,TIM_CHANNEL_2);
 80022a4:	2104      	movs	r1, #4
 80022a6:	4804      	ldr	r0, [pc, #16]	; (80022b8 <HAL_TIM_Encoder_MspInit+0x68>)
 80022a8:	f003 fcdf 	bl	8005c6a <HAL_TIM_Encoder_Start_IT>
}
 80022ac:	e7db      	b.n	8002266 <HAL_TIM_Encoder_MspInit+0x16>
 80022ae:	bf00      	nop
 80022b0:	40000400 	.word	0x40000400
 80022b4:	40010800 	.word	0x40010800
 80022b8:	20000608 	.word	0x20000608

080022bc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80022bc:	b508      	push	{r3, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80022be:	480a      	ldr	r0, [pc, #40]	; (80022e8 <MX_USART1_UART_Init+0x2c>)
 80022c0:	4b0a      	ldr	r3, [pc, #40]	; (80022ec <MX_USART1_UART_Init+0x30>)
 80022c2:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 9600;
 80022c4:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80022c8:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80022ca:	2300      	movs	r3, #0
 80022cc:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80022ce:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80022d0:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80022d2:	220c      	movs	r2, #12
 80022d4:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022d6:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80022d8:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80022da:	f003 fde3 	bl	8005ea4 <HAL_UART_Init>
 80022de:	b900      	cbnz	r0, 80022e2 <MX_USART1_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80022e0:	bd08      	pop	{r3, pc}
    Error_Handler();
 80022e2:	f7ff fe53 	bl	8001f8c <Error_Handler>
}
 80022e6:	e7fb      	b.n	80022e0 <MX_USART1_UART_Init+0x24>
 80022e8:	20000650 	.word	0x20000650
 80022ec:	40013800 	.word	0x40013800

080022f0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80022f0:	b508      	push	{r3, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80022f2:	480a      	ldr	r0, [pc, #40]	; (800231c <MX_USART2_UART_Init+0x2c>)
 80022f4:	4b0a      	ldr	r3, [pc, #40]	; (8002320 <MX_USART2_UART_Init+0x30>)
 80022f6:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 80022f8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80022fc:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80022fe:	2300      	movs	r3, #0
 8002300:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002302:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002304:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002306:	220c      	movs	r2, #12
 8002308:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800230a:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800230c:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800230e:	f003 fdc9 	bl	8005ea4 <HAL_UART_Init>
 8002312:	b900      	cbnz	r0, 8002316 <MX_USART2_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002314:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002316:	f7ff fe39 	bl	8001f8c <Error_Handler>
}
 800231a:	e7fb      	b.n	8002314 <MX_USART2_UART_Init+0x24>
 800231c:	20000698 	.word	0x20000698
 8002320:	40004400 	.word	0x40004400

08002324 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002324:	b530      	push	{r4, r5, lr}
 8002326:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002328:	2300      	movs	r3, #0
 800232a:	9304      	str	r3, [sp, #16]
 800232c:	9305      	str	r3, [sp, #20]
 800232e:	9306      	str	r3, [sp, #24]
 8002330:	9307      	str	r3, [sp, #28]
  if(uartHandle->Instance==USART1)
 8002332:	6803      	ldr	r3, [r0, #0]
 8002334:	4a30      	ldr	r2, [pc, #192]	; (80023f8 <HAL_UART_MspInit+0xd4>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d004      	beq.n	8002344 <HAL_UART_MspInit+0x20>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(uartHandle->Instance==USART2)
 800233a:	4a30      	ldr	r2, [pc, #192]	; (80023fc <HAL_UART_MspInit+0xd8>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d033      	beq.n	80023a8 <HAL_UART_MspInit+0x84>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002340:	b009      	add	sp, #36	; 0x24
 8002342:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8002344:	4b2e      	ldr	r3, [pc, #184]	; (8002400 <HAL_UART_MspInit+0xdc>)
 8002346:	699a      	ldr	r2, [r3, #24]
 8002348:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800234c:	619a      	str	r2, [r3, #24]
 800234e:	699a      	ldr	r2, [r3, #24]
 8002350:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002354:	9200      	str	r2, [sp, #0]
 8002356:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002358:	699a      	ldr	r2, [r3, #24]
 800235a:	f042 0204 	orr.w	r2, r2, #4
 800235e:	619a      	str	r2, [r3, #24]
 8002360:	699b      	ldr	r3, [r3, #24]
 8002362:	f003 0304 	and.w	r3, r3, #4
 8002366:	9301      	str	r3, [sp, #4]
 8002368:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800236a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800236e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002370:	2302      	movs	r3, #2
 8002372:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002374:	2303      	movs	r3, #3
 8002376:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002378:	4d22      	ldr	r5, [pc, #136]	; (8002404 <HAL_UART_MspInit+0xe0>)
 800237a:	a904      	add	r1, sp, #16
 800237c:	4628      	mov	r0, r5
 800237e:	f000 fd37 	bl	8002df0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002382:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002386:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002388:	2400      	movs	r4, #0
 800238a:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800238c:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800238e:	a904      	add	r1, sp, #16
 8002390:	4628      	mov	r0, r5
 8002392:	f000 fd2d 	bl	8002df0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002396:	4622      	mov	r2, r4
 8002398:	2105      	movs	r1, #5
 800239a:	2025      	movs	r0, #37	; 0x25
 800239c:	f000 fc70 	bl	8002c80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80023a0:	2025      	movs	r0, #37	; 0x25
 80023a2:	f000 fca3 	bl	8002cec <HAL_NVIC_EnableIRQ>
 80023a6:	e7cb      	b.n	8002340 <HAL_UART_MspInit+0x1c>
    __HAL_RCC_USART2_CLK_ENABLE();
 80023a8:	4b15      	ldr	r3, [pc, #84]	; (8002400 <HAL_UART_MspInit+0xdc>)
 80023aa:	69da      	ldr	r2, [r3, #28]
 80023ac:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80023b0:	61da      	str	r2, [r3, #28]
 80023b2:	69da      	ldr	r2, [r3, #28]
 80023b4:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80023b8:	9202      	str	r2, [sp, #8]
 80023ba:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023bc:	699a      	ldr	r2, [r3, #24]
 80023be:	f042 0204 	orr.w	r2, r2, #4
 80023c2:	619a      	str	r2, [r3, #24]
 80023c4:	699b      	ldr	r3, [r3, #24]
 80023c6:	f003 0304 	and.w	r3, r3, #4
 80023ca:	9303      	str	r3, [sp, #12]
 80023cc:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80023ce:	2304      	movs	r3, #4
 80023d0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023d2:	2302      	movs	r3, #2
 80023d4:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023d6:	2303      	movs	r3, #3
 80023d8:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023da:	4c0a      	ldr	r4, [pc, #40]	; (8002404 <HAL_UART_MspInit+0xe0>)
 80023dc:	a904      	add	r1, sp, #16
 80023de:	4620      	mov	r0, r4
 80023e0:	f000 fd06 	bl	8002df0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80023e4:	2308      	movs	r3, #8
 80023e6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023e8:	2300      	movs	r3, #0
 80023ea:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ec:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023ee:	a904      	add	r1, sp, #16
 80023f0:	4620      	mov	r0, r4
 80023f2:	f000 fcfd 	bl	8002df0 <HAL_GPIO_Init>
}
 80023f6:	e7a3      	b.n	8002340 <HAL_UART_MspInit+0x1c>
 80023f8:	40013800 	.word	0x40013800
 80023fc:	40004400 	.word	0x40004400
 8002400:	40021000 	.word	0x40021000
 8002404:	40010800 	.word	0x40010800

08002408 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002408:	f7ff feec 	bl	80021e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800240c:	480b      	ldr	r0, [pc, #44]	; (800243c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800240e:	490c      	ldr	r1, [pc, #48]	; (8002440 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002410:	4a0c      	ldr	r2, [pc, #48]	; (8002444 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002412:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002414:	e002      	b.n	800241c <LoopCopyDataInit>

08002416 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002416:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002418:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800241a:	3304      	adds	r3, #4

0800241c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800241c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800241e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002420:	d3f9      	bcc.n	8002416 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002422:	4a09      	ldr	r2, [pc, #36]	; (8002448 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002424:	4c09      	ldr	r4, [pc, #36]	; (800244c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002426:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002428:	e001      	b.n	800242e <LoopFillZerobss>

0800242a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800242a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800242c:	3204      	adds	r2, #4

0800242e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800242e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002430:	d3fb      	bcc.n	800242a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002432:	f004 fde5 	bl	8007000 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002436:	f7ff fd80 	bl	8001f3a <main>
  bx lr
 800243a:	4770      	bx	lr
  ldr r0, =_sdata
 800243c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002440:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8002444:	0800c73c 	.word	0x0800c73c
  ldr r2, =_sbss
 8002448:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 800244c:	200027b8 	.word	0x200027b8

08002450 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002450:	e7fe      	b.n	8002450 <ADC1_2_IRQHandler>
	...

08002454 <DS1307_SetRegByte>:
/**
 * @brief Sets the byte in the designated DS1307 register to value.
 * @param regAddr Register address to write.
 * @param val Value to set, 0 to 255.
 */
void DS1307_SetRegByte(uint8_t regAddr, uint8_t val) {
 8002454:	b500      	push	{lr}
 8002456:	b085      	sub	sp, #20
	uint8_t bytes[2] = { regAddr, val };
 8002458:	f88d 000c 	strb.w	r0, [sp, #12]
 800245c:	f88d 100d 	strb.w	r1, [sp, #13]
	HAL_I2C_Master_Transmit(_ds1307_ui2c, DS1307_I2C_ADDR << 1, bytes, 2, DS1307_TIMEOUT);
 8002460:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002464:	9300      	str	r3, [sp, #0]
 8002466:	2302      	movs	r3, #2
 8002468:	aa03      	add	r2, sp, #12
 800246a:	21d0      	movs	r1, #208	; 0xd0
 800246c:	4803      	ldr	r0, [pc, #12]	; (800247c <DS1307_SetRegByte+0x28>)
 800246e:	6800      	ldr	r0, [r0, #0]
 8002470:	f001 f93c 	bl	80036ec <HAL_I2C_Master_Transmit>
}
 8002474:	b005      	add	sp, #20
 8002476:	f85d fb04 	ldr.w	pc, [sp], #4
 800247a:	bf00      	nop
 800247c:	200006e0 	.word	0x200006e0

08002480 <DS1307_GetRegByte>:
/**
 * @brief Gets the byte in the designated DS1307 register.
 * @param regAddr Register address to read.
 * @return Value stored in the register, 0 to 255.
 */
uint8_t DS1307_GetRegByte(uint8_t regAddr) {
 8002480:	b530      	push	{r4, r5, lr}
 8002482:	b087      	sub	sp, #28
 8002484:	f88d 000f 	strb.w	r0, [sp, #15]
	uint8_t val;
	HAL_I2C_Master_Transmit(_ds1307_ui2c, DS1307_I2C_ADDR << 1, &regAddr, 1, DS1307_TIMEOUT);
 8002488:	4c0b      	ldr	r4, [pc, #44]	; (80024b8 <DS1307_GetRegByte+0x38>)
 800248a:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 800248e:	9500      	str	r5, [sp, #0]
 8002490:	2301      	movs	r3, #1
 8002492:	f10d 020f 	add.w	r2, sp, #15
 8002496:	21d0      	movs	r1, #208	; 0xd0
 8002498:	6820      	ldr	r0, [r4, #0]
 800249a:	f001 f927 	bl	80036ec <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_ds1307_ui2c, DS1307_I2C_ADDR << 1, &val, 1, DS1307_TIMEOUT);
 800249e:	9500      	str	r5, [sp, #0]
 80024a0:	2301      	movs	r3, #1
 80024a2:	f10d 0217 	add.w	r2, sp, #23
 80024a6:	21d0      	movs	r1, #208	; 0xd0
 80024a8:	6820      	ldr	r0, [r4, #0]
 80024aa:	f001 fa23 	bl	80038f4 <HAL_I2C_Master_Receive>
	return val;
}
 80024ae:	f89d 0017 	ldrb.w	r0, [sp, #23]
 80024b2:	b007      	add	sp, #28
 80024b4:	bd30      	pop	{r4, r5, pc}
 80024b6:	bf00      	nop
 80024b8:	200006e0 	.word	0x200006e0

080024bc <DS1307_SetClockHalt>:
void DS1307_SetClockHalt(uint8_t halt) {
 80024bc:	b510      	push	{r4, lr}
	uint8_t ch = (halt ? 1 << 7 : 0);
 80024be:	1e04      	subs	r4, r0, #0
 80024c0:	bf18      	it	ne
 80024c2:	2480      	movne	r4, #128	; 0x80
	DS1307_SetRegByte(DS1307_REG_SECOND, ch | (DS1307_GetRegByte(DS1307_REG_SECOND) & 0x7f));
 80024c4:	2000      	movs	r0, #0
 80024c6:	f7ff ffdb 	bl	8002480 <DS1307_GetRegByte>
 80024ca:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 80024ce:	4321      	orrs	r1, r4
 80024d0:	2000      	movs	r0, #0
 80024d2:	f7ff ffbf 	bl	8002454 <DS1307_SetRegByte>
}
 80024d6:	bd10      	pop	{r4, pc}

080024d8 <DS1307_Init>:
void DS1307_Init(I2C_HandleTypeDef *hi2c) {
 80024d8:	b508      	push	{r3, lr}
	_ds1307_ui2c = hi2c;
 80024da:	4b03      	ldr	r3, [pc, #12]	; (80024e8 <DS1307_Init+0x10>)
 80024dc:	6018      	str	r0, [r3, #0]
	DS1307_SetClockHalt(0);
 80024de:	2000      	movs	r0, #0
 80024e0:	f7ff ffec 	bl	80024bc <DS1307_SetClockHalt>
}
 80024e4:	bd08      	pop	{r3, pc}
 80024e6:	bf00      	nop
 80024e8:	200006e0 	.word	0x200006e0

080024ec <DS1307_DecodeBCD>:
 * @brief Decodes the raw binary value stored in registers to decimal format.
 * @param bin Binary-coded decimal value retrieved from register, 0 to 255.
 * @return Decoded decimal value.
 */
uint8_t DS1307_DecodeBCD(uint8_t bin) {
	return (((bin & 0xf0) >> 4) * 10) + (bin & 0x0f);
 80024ec:	0903      	lsrs	r3, r0, #4
 80024ee:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80024f2:	f000 000f 	and.w	r0, r0, #15
 80024f6:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 80024fa:	b2c0      	uxtb	r0, r0
 80024fc:	4770      	bx	lr

080024fe <DS1307_GetDate>:
uint8_t DS1307_GetDate(void) {
 80024fe:	b508      	push	{r3, lr}
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_DATE));
 8002500:	2004      	movs	r0, #4
 8002502:	f7ff ffbd 	bl	8002480 <DS1307_GetRegByte>
 8002506:	f7ff fff1 	bl	80024ec <DS1307_DecodeBCD>
}
 800250a:	bd08      	pop	{r3, pc}

0800250c <DS1307_GetMonth>:
uint8_t DS1307_GetMonth(void) {
 800250c:	b508      	push	{r3, lr}
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_MONTH));
 800250e:	2005      	movs	r0, #5
 8002510:	f7ff ffb6 	bl	8002480 <DS1307_GetRegByte>
 8002514:	f7ff ffea 	bl	80024ec <DS1307_DecodeBCD>
}
 8002518:	bd08      	pop	{r3, pc}

0800251a <DS1307_GetYear>:
uint16_t DS1307_GetYear(void) {
 800251a:	b510      	push	{r4, lr}
	uint16_t cen = DS1307_GetRegByte(DS1307_REG_CENT) * 100;
 800251c:	2010      	movs	r0, #16
 800251e:	f7ff ffaf 	bl	8002480 <DS1307_GetRegByte>
 8002522:	4604      	mov	r4, r0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_YEAR)) + cen;
 8002524:	2006      	movs	r0, #6
 8002526:	f7ff ffab 	bl	8002480 <DS1307_GetRegByte>
 800252a:	f7ff ffdf 	bl	80024ec <DS1307_DecodeBCD>
	uint16_t cen = DS1307_GetRegByte(DS1307_REG_CENT) * 100;
 800252e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8002532:	eb04 0484 	add.w	r4, r4, r4, lsl #2
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_YEAR)) + cen;
 8002536:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
 800253a:	b280      	uxth	r0, r0
 800253c:	bd10      	pop	{r4, pc}

0800253e <DS1307_GetHour>:
uint8_t DS1307_GetHour(void) {
 800253e:	b508      	push	{r3, lr}
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_HOUR) & 0x3f);
 8002540:	2002      	movs	r0, #2
 8002542:	f7ff ff9d 	bl	8002480 <DS1307_GetRegByte>
 8002546:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800254a:	f7ff ffcf 	bl	80024ec <DS1307_DecodeBCD>
}
 800254e:	bd08      	pop	{r3, pc}

08002550 <DS1307_GetMinute>:
uint8_t DS1307_GetMinute(void) {
 8002550:	b508      	push	{r3, lr}
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_MINUTE));
 8002552:	2001      	movs	r0, #1
 8002554:	f7ff ff94 	bl	8002480 <DS1307_GetRegByte>
 8002558:	f7ff ffc8 	bl	80024ec <DS1307_DecodeBCD>
}
 800255c:	bd08      	pop	{r3, pc}

0800255e <DS1307_GetSecond>:
uint8_t DS1307_GetSecond(void) {
 800255e:	b508      	push	{r3, lr}
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_SECOND) & 0x7f);
 8002560:	2000      	movs	r0, #0
 8002562:	f7ff ff8d 	bl	8002480 <DS1307_GetRegByte>
 8002566:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800256a:	f7ff ffbf 	bl	80024ec <DS1307_DecodeBCD>
}
 800256e:	bd08      	pop	{r3, pc}

08002570 <strtoke>:
/*
 * Behaves like strtok() except that it returns empty tokens also.
 * Found on https://stackoverflow.com/questions/42315585/split-string-into-tokens-in-c-when-there-are-2-delimiters-in-a-row
 */
char* strtoke(char *str, const char *delim)
{
 8002570:	b510      	push	{r4, lr}
  static char *start = NULL; /* stores string str for consecutive calls */
  char *token = NULL; /* found token */
  /* assign new start in case */
  if (str) start = str;
 8002572:	4604      	mov	r4, r0
 8002574:	b150      	cbz	r0, 800258c <strtoke+0x1c>
  /* check whether text to parse left */
  if (!start) return NULL;
  /* remember current start as found token */
  token = start;
  /* find next occurrence of delim */
  start = strpbrk(start, delim);
 8002576:	4620      	mov	r0, r4
 8002578:	f005 fc28 	bl	8007dcc <strpbrk>
  /* replace delim with terminator and move start to follower */
  if (start) *start++ = '\0';
 800257c:	b160      	cbz	r0, 8002598 <strtoke+0x28>
 800257e:	1c41      	adds	r1, r0, #1
 8002580:	4a08      	ldr	r2, [pc, #32]	; (80025a4 <strtoke+0x34>)
 8002582:	6011      	str	r1, [r2, #0]
 8002584:	2200      	movs	r2, #0
 8002586:	7002      	strb	r2, [r0, #0]
 8002588:	4620      	mov	r0, r4
  /* done */
  return token;
}
 800258a:	bd10      	pop	{r4, pc}
  if (!start) return NULL;
 800258c:	4b05      	ldr	r3, [pc, #20]	; (80025a4 <strtoke+0x34>)
 800258e:	681c      	ldr	r4, [r3, #0]
 8002590:	2c00      	cmp	r4, #0
 8002592:	d1f0      	bne.n	8002576 <strtoke+0x6>
 8002594:	4620      	mov	r0, r4
 8002596:	e7f8      	b.n	800258a <strtoke+0x1a>
  start = strpbrk(start, delim);
 8002598:	4b02      	ldr	r3, [pc, #8]	; (80025a4 <strtoke+0x34>)
 800259a:	2200      	movs	r2, #0
 800259c:	601a      	str	r2, [r3, #0]
 800259e:	4620      	mov	r0, r4
 80025a0:	e7f3      	b.n	800258a <strtoke+0x1a>
 80025a2:	bf00      	nop
 80025a4:	200008d0 	.word	0x200008d0

080025a8 <NEO6_GetCharFromBuffer>:
	HAL_UART_Receive_IT(GpsStateHandler->neo6_huart, (uint8_t*)&UartReceivedChar, 1);
}

int NEO6_GetCharFromBuffer(NEO6_State *GpsStateHandler)
{
	if(GpsStateHandler->UartBufferHead == GpsStateHandler->UartBufferTail)
 80025a8:	f890 3105 	ldrb.w	r3, [r0, #261]	; 0x105
 80025ac:	f890 2104 	ldrb.w	r2, [r0, #260]	; 0x104
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d00a      	beq.n	80025ca <NEO6_GetCharFromBuffer+0x22>
	{
		return -1; // error - no char to return
	}
	GpsStateHandler->UartBufferTail = (GpsStateHandler->UartBufferTail + 1) % GPS_UART_BUFFER_SIZE;
 80025b4:	3301      	adds	r3, #1
 80025b6:	425a      	negs	r2, r3
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	b2d2      	uxtb	r2, r2
 80025bc:	bf58      	it	pl
 80025be:	4253      	negpl	r3, r2
 80025c0:	f880 3105 	strb.w	r3, [r0, #261]	; 0x105

	return GpsStateHandler->UartBuffer[GpsStateHandler->UartBufferTail];
 80025c4:	4418      	add	r0, r3
 80025c6:	7900      	ldrb	r0, [r0, #4]
 80025c8:	4770      	bx	lr
		return -1; // error - no char to return
 80025ca:	f04f 30ff 	mov.w	r0, #4294967295
}
 80025ce:	4770      	bx	lr

080025d0 <NEO6_GetLineFromBuffer>:

int NEO6_GetLineFromBuffer(NEO6_State *GpsStateHandler)
{
 80025d0:	b538      	push	{r3, r4, r5, lr}
	char TempChar;
	char* LinePointer = (char*)GpsStateHandler->WorkingBuffer;
	if(GpsStateHandler->UartBufferLines)
 80025d2:	f890 3106 	ldrb.w	r3, [r0, #262]	; 0x106
 80025d6:	b1a3      	cbz	r3, 8002602 <NEO6_GetLineFromBuffer+0x32>
 80025d8:	4604      	mov	r4, r0
	char* LinePointer = (char*)GpsStateHandler->WorkingBuffer;
 80025da:	f200 1507 	addw	r5, r0, #263	; 0x107
 80025de:	e001      	b.n	80025e4 <NEO6_GetLineFromBuffer+0x14>
		{
			if(TempChar == 13)
			{
				break;
			}
			*LinePointer = TempChar;
 80025e0:	f805 0b01 	strb.w	r0, [r5], #1
		while((TempChar = NEO6_GetCharFromBuffer(GpsStateHandler)))
 80025e4:	4620      	mov	r0, r4
 80025e6:	f7ff ffdf 	bl	80025a8 <NEO6_GetCharFromBuffer>
 80025ea:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 80025ee:	d001      	beq.n	80025f4 <NEO6_GetLineFromBuffer+0x24>
			if(TempChar == 13)
 80025f0:	280d      	cmp	r0, #13
 80025f2:	d1f5      	bne.n	80025e0 <NEO6_GetLineFromBuffer+0x10>
			LinePointer++;
		}
		*LinePointer = 0; // end of cstring
 80025f4:	2300      	movs	r3, #0
 80025f6:	702b      	strb	r3, [r5, #0]
		GpsStateHandler->UartBufferLines--; // decrement line counter
 80025f8:	f894 3106 	ldrb.w	r3, [r4, #262]	; 0x106
 80025fc:	3b01      	subs	r3, #1
 80025fe:	f884 3106 	strb.w	r3, [r4, #262]	; 0x106
	}
	return 0;
}
 8002602:	2000      	movs	r0, #0
 8002604:	bd38      	pop	{r3, r4, r5, pc}
	...

08002608 <NEO6_ParseGPRMC>:

//
// Recommended minimum specific GPS/Transit data
//
void NEO6_ParseGPRMC(NEO6_State *GpsStateHandler)
{
 8002608:	b538      	push	{r3, r4, r5, lr}
 800260a:	4604      	mov	r4, r0

	char *ParsePoiner;
	uint32_t Temp;

	// Time of FIX
	ParsePoiner = strtoke(NULL, ",");
 800260c:	493f      	ldr	r1, [pc, #252]	; (800270c <NEO6_ParseGPRMC+0x104>)
 800260e:	2000      	movs	r0, #0
 8002610:	f7ff ffae 	bl	8002570 <strtoke>
	if(strlen(ParsePoiner) > 0)
 8002614:	7803      	ldrb	r3, [r0, #0]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d132      	bne.n	8002680 <NEO6_ParseGPRMC+0x78>
		GpsStateHandler->Second = Temp % 100;
		GpsStateHandler->Minute = (Temp / 100) % 100;
		GpsStateHandler->Hour = (Temp / 10000) % 100;
	}
	// Navigation receiver warning A = OK, V = warning
	ParsePoiner = strtoke(NULL, ",");
 800261a:	4d3c      	ldr	r5, [pc, #240]	; (800270c <NEO6_ParseGPRMC+0x104>)
 800261c:	4629      	mov	r1, r5
 800261e:	2000      	movs	r0, #0
 8002620:	f7ff ffa6 	bl	8002570 <strtoke>
	// Latitude
	ParsePoiner = strtoke(NULL, ",");
 8002624:	4629      	mov	r1, r5
 8002626:	2000      	movs	r0, #0
 8002628:	f7ff ffa2 	bl	8002570 <strtoke>
	if(strlen(ParsePoiner) > 0)
 800262c:	7803      	ldrb	r3, [r0, #0]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d144      	bne.n	80026bc <NEO6_ParseGPRMC+0xb4>
	{
		GpsStateHandler->Latitude = atof(ParsePoiner);
	}
	// Latitude Direction
	ParsePoiner = strtoke(NULL, ",");
 8002632:	4936      	ldr	r1, [pc, #216]	; (800270c <NEO6_ParseGPRMC+0x104>)
 8002634:	2000      	movs	r0, #0
 8002636:	f7ff ff9b 	bl	8002570 <strtoke>
	if(strlen(ParsePoiner) > 0)
 800263a:	7803      	ldrb	r3, [r0, #0]
 800263c:	b10b      	cbz	r3, 8002642 <NEO6_ParseGPRMC+0x3a>
	{
		GpsStateHandler->LatitudeDirection = *ParsePoiner;
 800263e:	f884 3198 	strb.w	r3, [r4, #408]	; 0x198
	}
	// Longnitude
	ParsePoiner = strtoke(NULL, ",");
 8002642:	4932      	ldr	r1, [pc, #200]	; (800270c <NEO6_ParseGPRMC+0x104>)
 8002644:	2000      	movs	r0, #0
 8002646:	f7ff ff93 	bl	8002570 <strtoke>
	if(strlen(ParsePoiner) > 0)
 800264a:	7803      	ldrb	r3, [r0, #0]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d13a      	bne.n	80026c6 <NEO6_ParseGPRMC+0xbe>
	{
		GpsStateHandler->Longitude = atof(ParsePoiner);
	}
	// Longnitude Direction
	ParsePoiner = strtoke(NULL, ",");
 8002650:	492e      	ldr	r1, [pc, #184]	; (800270c <NEO6_ParseGPRMC+0x104>)
 8002652:	2000      	movs	r0, #0
 8002654:	f7ff ff8c 	bl	8002570 <strtoke>
	if(strlen(ParsePoiner) > 0)
 8002658:	7803      	ldrb	r3, [r0, #0]
 800265a:	b10b      	cbz	r3, 8002660 <NEO6_ParseGPRMC+0x58>
	{
		GpsStateHandler->LongitudeDirection = *ParsePoiner;
 800265c:	f884 31a8 	strb.w	r3, [r4, #424]	; 0x1a8
	}
	// Speed over ground, Knots
	ParsePoiner = strtoke(NULL, ",");
 8002660:	4d2a      	ldr	r5, [pc, #168]	; (800270c <NEO6_ParseGPRMC+0x104>)
 8002662:	4629      	mov	r1, r5
 8002664:	2000      	movs	r0, #0
 8002666:	f7ff ff83 	bl	8002570 <strtoke>
	// Course Made Good, True
	ParsePoiner = strtoke(NULL, ",");
 800266a:	4629      	mov	r1, r5
 800266c:	2000      	movs	r0, #0
 800266e:	f7ff ff7f 	bl	8002570 <strtoke>
	// Date of fix
	ParsePoiner = strtoke(NULL, ",");
 8002672:	4629      	mov	r1, r5
 8002674:	2000      	movs	r0, #0
 8002676:	f7ff ff7b 	bl	8002570 <strtoke>
	if(strlen(ParsePoiner) > 0)
 800267a:	7803      	ldrb	r3, [r0, #0]
 800267c:	bb43      	cbnz	r3, 80026d0 <NEO6_ParseGPRMC+0xc8>
		Temp = atoi(ParsePoiner);
		GpsStateHandler->Year = Temp % 100;
		GpsStateHandler->Month = (Temp / 100) % 100;
		GpsStateHandler->Day = (Temp / 10000) % 100;
	}
}
 800267e:	bd38      	pop	{r3, r4, r5, pc}
		Temp = atoi(ParsePoiner);
 8002680:	f004 fcb3 	bl	8006fea <atoi>
		GpsStateHandler->Second = Temp % 100;
 8002684:	4b22      	ldr	r3, [pc, #136]	; (8002710 <NEO6_ParseGPRMC+0x108>)
 8002686:	fba3 1200 	umull	r1, r2, r3, r0
 800268a:	0952      	lsrs	r2, r2, #5
 800268c:	2164      	movs	r1, #100	; 0x64
 800268e:	fb01 0512 	mls	r5, r1, r2, r0
 8002692:	f884 5189 	strb.w	r5, [r4, #393]	; 0x189
		GpsStateHandler->Minute = (Temp / 100) % 100;
 8002696:	fba3 c502 	umull	ip, r5, r3, r2
 800269a:	096d      	lsrs	r5, r5, #5
 800269c:	fb01 2215 	mls	r2, r1, r5, r2
 80026a0:	f884 2188 	strb.w	r2, [r4, #392]	; 0x188
		GpsStateHandler->Hour = (Temp / 10000) % 100;
 80026a4:	4a1b      	ldr	r2, [pc, #108]	; (8002714 <NEO6_ParseGPRMC+0x10c>)
 80026a6:	fba2 2000 	umull	r2, r0, r2, r0
 80026aa:	0b40      	lsrs	r0, r0, #13
 80026ac:	fba3 2300 	umull	r2, r3, r3, r0
 80026b0:	095b      	lsrs	r3, r3, #5
 80026b2:	fb01 0013 	mls	r0, r1, r3, r0
 80026b6:	f884 0187 	strb.w	r0, [r4, #391]	; 0x187
 80026ba:	e7ae      	b.n	800261a <NEO6_ParseGPRMC+0x12>
		GpsStateHandler->Latitude = atof(ParsePoiner);
 80026bc:	f004 fc92 	bl	8006fe4 <atof>
 80026c0:	e9c4 0164 	strd	r0, r1, [r4, #400]	; 0x190
 80026c4:	e7b5      	b.n	8002632 <NEO6_ParseGPRMC+0x2a>
		GpsStateHandler->Longitude = atof(ParsePoiner);
 80026c6:	f004 fc8d 	bl	8006fe4 <atof>
 80026ca:	e9c4 0168 	strd	r0, r1, [r4, #416]	; 0x1a0
 80026ce:	e7bf      	b.n	8002650 <NEO6_ParseGPRMC+0x48>
		Temp = atoi(ParsePoiner);
 80026d0:	f004 fc8b 	bl	8006fea <atoi>
		GpsStateHandler->Year = Temp % 100;
 80026d4:	4b0e      	ldr	r3, [pc, #56]	; (8002710 <NEO6_ParseGPRMC+0x108>)
 80026d6:	fba3 1200 	umull	r1, r2, r3, r0
 80026da:	0952      	lsrs	r2, r2, #5
 80026dc:	2164      	movs	r1, #100	; 0x64
 80026de:	fb01 0512 	mls	r5, r1, r2, r0
 80026e2:	f884 518c 	strb.w	r5, [r4, #396]	; 0x18c
		GpsStateHandler->Month = (Temp / 100) % 100;
 80026e6:	fba3 c502 	umull	ip, r5, r3, r2
 80026ea:	096d      	lsrs	r5, r5, #5
 80026ec:	fb01 2215 	mls	r2, r1, r5, r2
 80026f0:	f884 218b 	strb.w	r2, [r4, #395]	; 0x18b
		GpsStateHandler->Day = (Temp / 10000) % 100;
 80026f4:	4a07      	ldr	r2, [pc, #28]	; (8002714 <NEO6_ParseGPRMC+0x10c>)
 80026f6:	fba2 2000 	umull	r2, r0, r2, r0
 80026fa:	0b40      	lsrs	r0, r0, #13
 80026fc:	fba3 2300 	umull	r2, r3, r3, r0
 8002700:	095b      	lsrs	r3, r3, #5
 8002702:	fb01 0013 	mls	r0, r1, r3, r0
 8002706:	f884 018a 	strb.w	r0, [r4, #394]	; 0x18a
}
 800270a:	e7b8      	b.n	800267e <NEO6_ParseGPRMC+0x76>
 800270c:	0800bae4 	.word	0x0800bae4
 8002710:	51eb851f 	.word	0x51eb851f
 8002714:	d1b71759 	.word	0xd1b71759

08002718 <NEO6_ParseGPVTG>:

//
//	Track Made Good and Ground Speed.
//
void NEO6_ParseGPVTG(NEO6_State *GpsStateHandler)
{
 8002718:	b538      	push	{r3, r4, r5, lr}
 800271a:	4605      	mov	r5, r0
	// eg2. $GPVTG,054.7,T,034.4,M,005.5,N,010.2,K

	char *ParsePoiner;

	// True track made good
	ParsePoiner = strtoke(NULL, ",");
 800271c:	4c16      	ldr	r4, [pc, #88]	; (8002778 <NEO6_ParseGPVTG+0x60>)
 800271e:	4621      	mov	r1, r4
 8002720:	2000      	movs	r0, #0
 8002722:	f7ff ff25 	bl	8002570 <strtoke>
	ParsePoiner = strtoke(NULL, ",");
 8002726:	4621      	mov	r1, r4
 8002728:	2000      	movs	r0, #0
 800272a:	f7ff ff21 	bl	8002570 <strtoke>
	// Magnetic track made good
	ParsePoiner = strtoke(NULL, ",");
 800272e:	4621      	mov	r1, r4
 8002730:	2000      	movs	r0, #0
 8002732:	f7ff ff1d 	bl	8002570 <strtoke>
	ParsePoiner = strtoke(NULL, ",");
 8002736:	4621      	mov	r1, r4
 8002738:	2000      	movs	r0, #0
 800273a:	f7ff ff19 	bl	8002570 <strtoke>
	// Ground speed, knots
	ParsePoiner = strtoke(NULL, ",");
 800273e:	4621      	mov	r1, r4
 8002740:	2000      	movs	r0, #0
 8002742:	f7ff ff15 	bl	8002570 <strtoke>
	if(strlen(ParsePoiner) > 0)
 8002746:	7803      	ldrb	r3, [r0, #0]
 8002748:	b95b      	cbnz	r3, 8002762 <NEO6_ParseGPVTG+0x4a>
	{
		GpsStateHandler->SpeedKnots = atof(ParsePoiner);
	}
	ParsePoiner = strtoke(NULL, ",");
 800274a:	4c0b      	ldr	r4, [pc, #44]	; (8002778 <NEO6_ParseGPVTG+0x60>)
 800274c:	4621      	mov	r1, r4
 800274e:	2000      	movs	r0, #0
 8002750:	f7ff ff0e 	bl	8002570 <strtoke>
	// Ground speed, Kilometers per hour
	ParsePoiner = strtoke(NULL, ",");
 8002754:	4621      	mov	r1, r4
 8002756:	2000      	movs	r0, #0
 8002758:	f7ff ff0a 	bl	8002570 <strtoke>
	if(strlen(ParsePoiner) > 0)
 800275c:	7803      	ldrb	r3, [r0, #0]
 800275e:	b92b      	cbnz	r3, 800276c <NEO6_ParseGPVTG+0x54>
	{
		GpsStateHandler->SpeedKilometers = atof(ParsePoiner);
	}
}
 8002760:	bd38      	pop	{r3, r4, r5, pc}
		GpsStateHandler->SpeedKnots = atof(ParsePoiner);
 8002762:	f004 fc3f 	bl	8006fe4 <atof>
 8002766:	e9c5 016e 	strd	r0, r1, [r5, #440]	; 0x1b8
 800276a:	e7ee      	b.n	800274a <NEO6_ParseGPVTG+0x32>
		GpsStateHandler->SpeedKilometers = atof(ParsePoiner);
 800276c:	f004 fc3a 	bl	8006fe4 <atof>
 8002770:	e9c5 0170 	strd	r0, r1, [r5, #448]	; 0x1c0
}
 8002774:	e7f4      	b.n	8002760 <NEO6_ParseGPVTG+0x48>
 8002776:	bf00      	nop
 8002778:	0800bae4 	.word	0x0800bae4

0800277c <NEO6_ParseGPGGA>:

//
//	Global Positioning System Fix Data
//
void NEO6_ParseGPGGA(NEO6_State *GpsStateHandler)
{
 800277c:	b538      	push	{r3, r4, r5, lr}
 800277e:	4605      	mov	r5, r0
	// eg. $GPGGA,212846.00,5025.81511,N,01639.92090,E,1,04,4.72,281.1,M,42.0,M,,*5F

	char *ParsePoiner;

	// UTC of Position
	ParsePoiner = strtoke(NULL, ",");
 8002780:	4c1d      	ldr	r4, [pc, #116]	; (80027f8 <NEO6_ParseGPGGA+0x7c>)
 8002782:	4621      	mov	r1, r4
 8002784:	2000      	movs	r0, #0
 8002786:	f7ff fef3 	bl	8002570 <strtoke>
	// Latitude
	ParsePoiner = strtoke(NULL, ",");
 800278a:	4621      	mov	r1, r4
 800278c:	2000      	movs	r0, #0
 800278e:	f7ff feef 	bl	8002570 <strtoke>
	// N or S
	ParsePoiner = strtoke(NULL, ",");
 8002792:	4621      	mov	r1, r4
 8002794:	2000      	movs	r0, #0
 8002796:	f7ff feeb 	bl	8002570 <strtoke>
	// Longitude
	ParsePoiner = strtoke(NULL, ",");
 800279a:	4621      	mov	r1, r4
 800279c:	2000      	movs	r0, #0
 800279e:	f7ff fee7 	bl	8002570 <strtoke>
	// E or W
	ParsePoiner = strtoke(NULL, ",");
 80027a2:	4621      	mov	r1, r4
 80027a4:	2000      	movs	r0, #0
 80027a6:	f7ff fee3 	bl	8002570 <strtoke>
	// GPS quality indicator (0=invalid; 1=GPS fix; 2=Diff. GPS fix)
	ParsePoiner = strtoke(NULL, ",");
 80027aa:	4621      	mov	r1, r4
 80027ac:	2000      	movs	r0, #0
 80027ae:	f7ff fedf 	bl	8002570 <strtoke>
	if(strlen(ParsePoiner) > 0)
 80027b2:	7803      	ldrb	r3, [r0, #0]
 80027b4:	b98b      	cbnz	r3, 80027da <NEO6_ParseGPGGA+0x5e>
	{
		GpsStateHandler->Quality = atoi(ParsePoiner);
	}
	// Number of satellites in use [not those in view]
	ParsePoiner = strtoke(NULL, ",");
 80027b6:	4910      	ldr	r1, [pc, #64]	; (80027f8 <NEO6_ParseGPGGA+0x7c>)
 80027b8:	2000      	movs	r0, #0
 80027ba:	f7ff fed9 	bl	8002570 <strtoke>
	if(strlen(ParsePoiner) > 0)
 80027be:	7803      	ldrb	r3, [r0, #0]
 80027c0:	b983      	cbnz	r3, 80027e4 <NEO6_ParseGPGGA+0x68>
	{
		GpsStateHandler->SatelitesNumber = atoi(ParsePoiner);
	}
	// Horizontal dilution of position
	ParsePoiner = strtoke(NULL, ",");
 80027c2:	4c0d      	ldr	r4, [pc, #52]	; (80027f8 <NEO6_ParseGPGGA+0x7c>)
 80027c4:	4621      	mov	r1, r4
 80027c6:	2000      	movs	r0, #0
 80027c8:	f7ff fed2 	bl	8002570 <strtoke>
	// Antenna altitude above/below mean sea level (geoid)
	ParsePoiner = strtoke(NULL, ",");
 80027cc:	4621      	mov	r1, r4
 80027ce:	2000      	movs	r0, #0
 80027d0:	f7ff fece 	bl	8002570 <strtoke>
	if(strlen(ParsePoiner) > 0)
 80027d4:	7803      	ldrb	r3, [r0, #0]
 80027d6:	b953      	cbnz	r3, 80027ee <NEO6_ParseGPGGA+0x72>
	{
		GpsStateHandler->Altitude = atof(ParsePoiner);
	}
}
 80027d8:	bd38      	pop	{r3, r4, r5, pc}
		GpsStateHandler->Quality = atoi(ParsePoiner);
 80027da:	f004 fc06 	bl	8006fea <atoi>
 80027de:	f885 01c9 	strb.w	r0, [r5, #457]	; 0x1c9
 80027e2:	e7e8      	b.n	80027b6 <NEO6_ParseGPGGA+0x3a>
		GpsStateHandler->SatelitesNumber = atoi(ParsePoiner);
 80027e4:	f004 fc01 	bl	8006fea <atoi>
 80027e8:	f885 01c8 	strb.w	r0, [r5, #456]	; 0x1c8
 80027ec:	e7e9      	b.n	80027c2 <NEO6_ParseGPGGA+0x46>
		GpsStateHandler->Altitude = atof(ParsePoiner);
 80027ee:	f004 fbf9 	bl	8006fe4 <atof>
 80027f2:	e9c5 016c 	strd	r0, r1, [r5, #432]	; 0x1b0
}
 80027f6:	e7ef      	b.n	80027d8 <NEO6_ParseGPGGA+0x5c>
 80027f8:	0800bae4 	.word	0x0800bae4

080027fc <NEO6_ParseGPGSA>:

//
//	GPS DOP and active satellites
//
void NEO6_ParseGPGSA(NEO6_State *GpsStateHandler)
{
 80027fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027fe:	4607      	mov	r7, r0
	// eg2. $GPGSA,A,3,19,28,14,18,27,22,31,39,,,,,1.7,1.0,1.3*35

	char *ParsePoiner;

	// Mode
	ParsePoiner = strtoke(NULL, ",");
 8002800:	4c1e      	ldr	r4, [pc, #120]	; (800287c <NEO6_ParseGPGSA+0x80>)
 8002802:	4621      	mov	r1, r4
 8002804:	2000      	movs	r0, #0
 8002806:	f7ff feb3 	bl	8002570 <strtoke>
	// 2D/3D Fix
	ParsePoiner = strtoke(NULL, ",");
 800280a:	4621      	mov	r1, r4
 800280c:	2000      	movs	r0, #0
 800280e:	f7ff feaf 	bl	8002570 <strtoke>
	if(strlen(ParsePoiner) > 0)
 8002812:	7803      	ldrb	r3, [r0, #0]
 8002814:	b9eb      	cbnz	r3, 8002852 <NEO6_ParseGPGSA+0x56>
{
 8002816:	240c      	movs	r4, #12
		GpsStateHandler->FixMode = atoi(ParsePoiner);
	}
	// IDs of SVs used in position fix (null for unused fields)
	for(uint8_t i=0; i < 12; i++)
	{
		ParsePoiner = strtoke(NULL, ",");
 8002818:	4e18      	ldr	r6, [pc, #96]	; (800287c <NEO6_ParseGPGSA+0x80>)
 800281a:	2500      	movs	r5, #0
 800281c:	4631      	mov	r1, r6
 800281e:	4628      	mov	r0, r5
 8002820:	f7ff fea6 	bl	8002570 <strtoke>
	for(uint8_t i=0; i < 12; i++)
 8002824:	1e63      	subs	r3, r4, #1
 8002826:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 800282a:	d1f7      	bne.n	800281c <NEO6_ParseGPGSA+0x20>
	}
	// PDOP
	ParsePoiner = strtoke(NULL, ",");
 800282c:	4913      	ldr	r1, [pc, #76]	; (800287c <NEO6_ParseGPGSA+0x80>)
 800282e:	2000      	movs	r0, #0
 8002830:	f7ff fe9e 	bl	8002570 <strtoke>
	if(strlen(ParsePoiner) > 0)
 8002834:	7803      	ldrb	r3, [r0, #0]
 8002836:	b98b      	cbnz	r3, 800285c <NEO6_ParseGPGSA+0x60>
	{
		GpsStateHandler->Dop = atof(ParsePoiner);
	}
	// HDOP
	ParsePoiner = strtoke(NULL, ",");
 8002838:	4910      	ldr	r1, [pc, #64]	; (800287c <NEO6_ParseGPGSA+0x80>)
 800283a:	2000      	movs	r0, #0
 800283c:	f7ff fe98 	bl	8002570 <strtoke>
	if(strlen(ParsePoiner) > 0)
 8002840:	7803      	ldrb	r3, [r0, #0]
 8002842:	b983      	cbnz	r3, 8002866 <NEO6_ParseGPGSA+0x6a>
	{
		GpsStateHandler->Hdop = atof(ParsePoiner);
	}
	// VDOP
	ParsePoiner = strtoke(NULL, ",");
 8002844:	490d      	ldr	r1, [pc, #52]	; (800287c <NEO6_ParseGPGSA+0x80>)
 8002846:	2000      	movs	r0, #0
 8002848:	f7ff fe92 	bl	8002570 <strtoke>
	if(strlen(ParsePoiner) > 0)
 800284c:	7803      	ldrb	r3, [r0, #0]
 800284e:	b97b      	cbnz	r3, 8002870 <NEO6_ParseGPGSA+0x74>
	{
		GpsStateHandler->Vdop = atof(ParsePoiner);
	}
}
 8002850:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		GpsStateHandler->FixMode = atoi(ParsePoiner);
 8002852:	f004 fbca 	bl	8006fea <atoi>
 8002856:	f887 01ca 	strb.w	r0, [r7, #458]	; 0x1ca
 800285a:	e7dc      	b.n	8002816 <NEO6_ParseGPGSA+0x1a>
		GpsStateHandler->Dop = atof(ParsePoiner);
 800285c:	f004 fbc2 	bl	8006fe4 <atof>
 8002860:	e9c7 0174 	strd	r0, r1, [r7, #464]	; 0x1d0
 8002864:	e7e8      	b.n	8002838 <NEO6_ParseGPGSA+0x3c>
		GpsStateHandler->Hdop = atof(ParsePoiner);
 8002866:	f004 fbbd 	bl	8006fe4 <atof>
 800286a:	e9c7 0176 	strd	r0, r1, [r7, #472]	; 0x1d8
 800286e:	e7e9      	b.n	8002844 <NEO6_ParseGPGSA+0x48>
		GpsStateHandler->Vdop = atof(ParsePoiner);
 8002870:	f004 fbb8 	bl	8006fe4 <atof>
 8002874:	e9c7 0178 	strd	r0, r1, [r7, #480]	; 0x1e0
}
 8002878:	e7ea      	b.n	8002850 <NEO6_ParseGPGSA+0x54>
 800287a:	bf00      	nop
 800287c:	0800bae4 	.word	0x0800bae4

08002880 <NEO6_ParseLine>:
	// Could be good for minimal system for LoRa device
}


void NEO6_ParseLine(NEO6_State *GpsStateHandler)
{
 8002880:	b538      	push	{r3, r4, r5, lr}
 8002882:	4604      	mov	r4, r0
	// Nice website with NMEA commuincates description
	//	http://aprs.gids.nl/nmea
	//

	// Header
	char* ParsePoiner = strtoke((char*)GpsStateHandler->WorkingBuffer, ",");
 8002884:	4914      	ldr	r1, [pc, #80]	; (80028d8 <NEO6_ParseLine+0x58>)
 8002886:	f200 1007 	addw	r0, r0, #263	; 0x107
 800288a:	f7ff fe71 	bl	8002570 <strtoke>
 800288e:	4605      	mov	r5, r0

	if(strcmp(ParsePoiner, "$GPRMC") == 0) NEO6_ParseGPRMC(GpsStateHandler);
 8002890:	4912      	ldr	r1, [pc, #72]	; (80028dc <NEO6_ParseLine+0x5c>)
 8002892:	f7fd fc5d 	bl	8000150 <strcmp>
 8002896:	b190      	cbz	r0, 80028be <NEO6_ParseLine+0x3e>
	else if(strcmp(ParsePoiner, "$GPVTG") == 0) NEO6_ParseGPVTG(GpsStateHandler);
 8002898:	4911      	ldr	r1, [pc, #68]	; (80028e0 <NEO6_ParseLine+0x60>)
 800289a:	4628      	mov	r0, r5
 800289c:	f7fd fc58 	bl	8000150 <strcmp>
 80028a0:	b188      	cbz	r0, 80028c6 <NEO6_ParseLine+0x46>
	else if(strcmp(ParsePoiner, "$GPGGA") == 0) NEO6_ParseGPGGA(GpsStateHandler);
 80028a2:	4910      	ldr	r1, [pc, #64]	; (80028e4 <NEO6_ParseLine+0x64>)
 80028a4:	4628      	mov	r0, r5
 80028a6:	f7fd fc53 	bl	8000150 <strcmp>
 80028aa:	b180      	cbz	r0, 80028ce <NEO6_ParseLine+0x4e>
	else if(strcmp(ParsePoiner, "$GPGSA") == 0) NEO6_ParseGPGSA(GpsStateHandler);
 80028ac:	490e      	ldr	r1, [pc, #56]	; (80028e8 <NEO6_ParseLine+0x68>)
 80028ae:	4628      	mov	r0, r5
 80028b0:	f7fd fc4e 	bl	8000150 <strcmp>
 80028b4:	b930      	cbnz	r0, 80028c4 <NEO6_ParseLine+0x44>
 80028b6:	4620      	mov	r0, r4
 80028b8:	f7ff ffa0 	bl	80027fc <NEO6_ParseGPGSA>
//	else if(strcmp(ParsePoiner, "$GPGSV") == 0) NEO6_ParseGPGSV(GpsStateHandler);
//	else if(strcmp(ParsePoiner, "$GPGLL") == 0) NEO6_ParseGPGLL(GpsStateHandler);
}
 80028bc:	e002      	b.n	80028c4 <NEO6_ParseLine+0x44>
	if(strcmp(ParsePoiner, "$GPRMC") == 0) NEO6_ParseGPRMC(GpsStateHandler);
 80028be:	4620      	mov	r0, r4
 80028c0:	f7ff fea2 	bl	8002608 <NEO6_ParseGPRMC>
}
 80028c4:	bd38      	pop	{r3, r4, r5, pc}
	else if(strcmp(ParsePoiner, "$GPVTG") == 0) NEO6_ParseGPVTG(GpsStateHandler);
 80028c6:	4620      	mov	r0, r4
 80028c8:	f7ff ff26 	bl	8002718 <NEO6_ParseGPVTG>
 80028cc:	e7fa      	b.n	80028c4 <NEO6_ParseLine+0x44>
	else if(strcmp(ParsePoiner, "$GPGGA") == 0) NEO6_ParseGPGGA(GpsStateHandler);
 80028ce:	4620      	mov	r0, r4
 80028d0:	f7ff ff54 	bl	800277c <NEO6_ParseGPGGA>
 80028d4:	e7f6      	b.n	80028c4 <NEO6_ParseLine+0x44>
 80028d6:	bf00      	nop
 80028d8:	0800bae4 	.word	0x0800bae4
 80028dc:	0800bae8 	.word	0x0800bae8
 80028e0:	0800baf0 	.word	0x0800baf0
 80028e4:	0800baf8 	.word	0x0800baf8
 80028e8:	0800bb00 	.word	0x0800bb00

080028ec <NEO6_IsFix>:

uint8_t NEO6_IsFix(NEO6_State *GpsStateHandler)
{
	return GpsStateHandler->Quality;
}
 80028ec:	f890 01c9 	ldrb.w	r0, [r0, #457]	; 0x1c9
 80028f0:	4770      	bx	lr

080028f2 <NEO6_Task>:

void NEO6_Task(NEO6_State *GpsStateHandler)
{
	if(GpsStateHandler->UartBufferLines)
 80028f2:	f890 3106 	ldrb.w	r3, [r0, #262]	; 0x106
 80028f6:	b903      	cbnz	r3, 80028fa <NEO6_Task+0x8>
 80028f8:	4770      	bx	lr
{
 80028fa:	b510      	push	{r4, lr}
 80028fc:	4604      	mov	r4, r0
	{
		NEO6_GetLineFromBuffer(GpsStateHandler);
 80028fe:	f7ff fe67 	bl	80025d0 <NEO6_GetLineFromBuffer>
		NEO6_ParseLine(GpsStateHandler);
 8002902:	4620      	mov	r0, r4
 8002904:	f7ff ffbc 	bl	8002880 <NEO6_ParseLine>
	}
}
 8002908:	bd10      	pop	{r4, pc}
	...

0800290c <ssd1306_WriteCommand>:
void ssd1306_Reset(void) {
    /* for I2C - do nothing */
}

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 800290c:	b500      	push	{lr}
 800290e:	b087      	sub	sp, #28
 8002910:	f88d 0017 	strb.w	r0, [sp, #23]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8002914:	f04f 33ff 	mov.w	r3, #4294967295
 8002918:	9302      	str	r3, [sp, #8]
 800291a:	2301      	movs	r3, #1
 800291c:	9301      	str	r3, [sp, #4]
 800291e:	f10d 0217 	add.w	r2, sp, #23
 8002922:	9200      	str	r2, [sp, #0]
 8002924:	2200      	movs	r2, #0
 8002926:	2178      	movs	r1, #120	; 0x78
 8002928:	4802      	ldr	r0, [pc, #8]	; (8002934 <ssd1306_WriteCommand+0x28>)
 800292a:	f001 fa05 	bl	8003d38 <HAL_I2C_Mem_Write>
}
 800292e:	b007      	add	sp, #28
 8002930:	f85d fb04 	ldr.w	pc, [sp], #4
 8002934:	20000500 	.word	0x20000500

08002938 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8002938:	b500      	push	{lr}
 800293a:	b085      	sub	sp, #20
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800293c:	f04f 33ff 	mov.w	r3, #4294967295
 8002940:	9302      	str	r3, [sp, #8]
 8002942:	b289      	uxth	r1, r1
 8002944:	9101      	str	r1, [sp, #4]
 8002946:	9000      	str	r0, [sp, #0]
 8002948:	2301      	movs	r3, #1
 800294a:	2240      	movs	r2, #64	; 0x40
 800294c:	2178      	movs	r1, #120	; 0x78
 800294e:	4803      	ldr	r0, [pc, #12]	; (800295c <ssd1306_WriteData+0x24>)
 8002950:	f001 f9f2 	bl	8003d38 <HAL_I2C_Mem_Write>
}
 8002954:	b005      	add	sp, #20
 8002956:	f85d fb04 	ldr.w	pc, [sp], #4
 800295a:	bf00      	nop
 800295c:	20000500 	.word	0x20000500

08002960 <ssd1306_Fill>:
    
    SSD1306.Initialized = 1;
}

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8002960:	b508      	push	{r3, lr}
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8002962:	2800      	cmp	r0, #0
 8002964:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002968:	bf0c      	ite	eq
 800296a:	2100      	moveq	r1, #0
 800296c:	21ff      	movne	r1, #255	; 0xff
 800296e:	4802      	ldr	r0, [pc, #8]	; (8002978 <ssd1306_Fill+0x18>)
 8002970:	f004 fb92 	bl	8007098 <memset>
}
 8002974:	bd08      	pop	{r3, pc}
 8002976:	bf00      	nop
 8002978:	200008dc 	.word	0x200008dc

0800297c <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 800297c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002980:	4d0c      	ldr	r5, [pc, #48]	; (80029b4 <ssd1306_UpdateScreen+0x38>)
void ssd1306_UpdateScreen(void) {
 8002982:	24b0      	movs	r4, #176	; 0xb0
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8002984:	f04f 0800 	mov.w	r8, #0
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8002988:	2710      	movs	r7, #16
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 800298a:	2680      	movs	r6, #128	; 0x80
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 800298c:	4620      	mov	r0, r4
 800298e:	f7ff ffbd 	bl	800290c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8002992:	4640      	mov	r0, r8
 8002994:	f7ff ffba 	bl	800290c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8002998:	4638      	mov	r0, r7
 800299a:	f7ff ffb7 	bl	800290c <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 800299e:	4631      	mov	r1, r6
 80029a0:	4628      	mov	r0, r5
 80029a2:	f7ff ffc9 	bl	8002938 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80029a6:	3401      	adds	r4, #1
 80029a8:	b2e4      	uxtb	r4, r4
 80029aa:	3580      	adds	r5, #128	; 0x80
 80029ac:	2cb8      	cmp	r4, #184	; 0xb8
 80029ae:	d1ed      	bne.n	800298c <ssd1306_UpdateScreen+0x10>
    }
}
 80029b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80029b4:	200008dc 	.word	0x200008dc

080029b8 <ssd1306_DrawPixel>:
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80029b8:	f010 0f80 	tst.w	r0, #128	; 0x80
 80029bc:	d10f      	bne.n	80029de <ssd1306_DrawPixel+0x26>
 80029be:	293f      	cmp	r1, #63	; 0x3f
 80029c0:	d80d      	bhi.n	80029de <ssd1306_DrawPixel+0x26>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80029c2:	2a01      	cmp	r2, #1
 80029c4:	d00c      	beq.n	80029e0 <ssd1306_DrawPixel+0x28>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80029c6:	08cb      	lsrs	r3, r1, #3
 80029c8:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
 80029cc:	4a0b      	ldr	r2, [pc, #44]	; (80029fc <ssd1306_DrawPixel+0x44>)
 80029ce:	f001 0107 	and.w	r1, r1, #7
 80029d2:	2301      	movs	r3, #1
 80029d4:	408b      	lsls	r3, r1
 80029d6:	5c11      	ldrb	r1, [r2, r0]
 80029d8:	ea21 0103 	bic.w	r1, r1, r3
 80029dc:	5411      	strb	r1, [r2, r0]
    }
}
 80029de:	4770      	bx	lr
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80029e0:	08cb      	lsrs	r3, r1, #3
 80029e2:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
 80029e6:	4a05      	ldr	r2, [pc, #20]	; (80029fc <ssd1306_DrawPixel+0x44>)
 80029e8:	f001 0107 	and.w	r1, r1, #7
 80029ec:	2301      	movs	r3, #1
 80029ee:	fa03 f101 	lsl.w	r1, r3, r1
 80029f2:	5c13      	ldrb	r3, [r2, r0]
 80029f4:	4319      	orrs	r1, r3
 80029f6:	5411      	strb	r1, [r2, r0]
 80029f8:	4770      	bx	lr
 80029fa:	bf00      	nop
 80029fc:	200008dc 	.word	0x200008dc

08002a00 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8002a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a04:	b085      	sub	sp, #20
 8002a06:	9001      	str	r0, [sp, #4]
 8002a08:	ac04      	add	r4, sp, #16
 8002a0a:	e904 0006 	stmdb	r4, {r1, r2}
 8002a0e:	461f      	mov	r7, r3
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8002a10:	f1a0 0320 	sub.w	r3, r0, #32
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	2b5e      	cmp	r3, #94	; 0x5e
 8002a18:	d83f      	bhi.n	8002a9a <ssd1306_WriteChar+0x9a>
 8002a1a:	f89d 6008 	ldrb.w	r6, [sp, #8]
        return 0;
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8002a1e:	4b23      	ldr	r3, [pc, #140]	; (8002aac <ssd1306_WriteChar+0xac>)
 8002a20:	f8b3 9000 	ldrh.w	r9, [r3]
 8002a24:	eb09 0306 	add.w	r3, r9, r6
 8002a28:	2b80      	cmp	r3, #128	; 0x80
 8002a2a:	dc3a      	bgt.n	8002aa2 <ssd1306_WriteChar+0xa2>
 8002a2c:	f89d 2009 	ldrb.w	r2, [sp, #9]
 8002a30:	9200      	str	r2, [sp, #0]
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8002a32:	4b1e      	ldr	r3, [pc, #120]	; (8002aac <ssd1306_WriteChar+0xac>)
 8002a34:	885d      	ldrh	r5, [r3, #2]
 8002a36:	18ab      	adds	r3, r5, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8002a38:	2b40      	cmp	r3, #64	; 0x40
 8002a3a:	dc34      	bgt.n	8002aa6 <ssd1306_WriteChar+0xa6>
        // Not enough space on current line
        return 0;
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8002a3c:	b342      	cbz	r2, 8002a90 <ssd1306_WriteChar+0x90>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8002a3e:	f1a0 0a20 	sub.w	sl, r0, #32
 8002a42:	fb02 fa0a 	mul.w	sl, r2, sl
 8002a46:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
 8002a4a:	b2ed      	uxtb	r5, r5
    for(i = 0; i < Font.FontHeight; i++) {
 8002a4c:	f04f 0b00 	mov.w	fp, #0
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8002a50:	9b03      	ldr	r3, [sp, #12]
 8002a52:	f833 800a 	ldrh.w	r8, [r3, sl]
        for(j = 0; j < Font.FontWidth; j++) {
 8002a56:	b196      	cbz	r6, 8002a7e <ssd1306_WriteChar+0x7e>
 8002a58:	2400      	movs	r4, #0
            if((b << j) & 0x8000)  {
 8002a5a:	fa08 f304 	lsl.w	r3, r8, r4
 8002a5e:	f413 4f00 	tst.w	r3, #32768	; 0x8000
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8002a62:	eb09 0004 	add.w	r0, r9, r4
 8002a66:	bf12      	itee	ne
 8002a68:	463a      	movne	r2, r7
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002a6a:	fab7 f287 	clzeq	r2, r7
 8002a6e:	0952      	lsreq	r2, r2, #5
 8002a70:	4629      	mov	r1, r5
 8002a72:	b2c0      	uxtb	r0, r0
 8002a74:	f7ff ffa0 	bl	80029b8 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8002a78:	3401      	adds	r4, #1
 8002a7a:	42b4      	cmp	r4, r6
 8002a7c:	d1ed      	bne.n	8002a5a <ssd1306_WriteChar+0x5a>
    for(i = 0; i < Font.FontHeight; i++) {
 8002a7e:	f10b 0b01 	add.w	fp, fp, #1
 8002a82:	f10a 0a02 	add.w	sl, sl, #2
 8002a86:	3501      	adds	r5, #1
 8002a88:	b2ed      	uxtb	r5, r5
 8002a8a:	9b00      	ldr	r3, [sp, #0]
 8002a8c:	455b      	cmp	r3, fp
 8002a8e:	d1df      	bne.n	8002a50 <ssd1306_WriteChar+0x50>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8002a90:	444e      	add	r6, r9
 8002a92:	4b06      	ldr	r3, [pc, #24]	; (8002aac <ssd1306_WriteChar+0xac>)
 8002a94:	801e      	strh	r6, [r3, #0]
    
    // Return written char for validation
    return ch;
 8002a96:	9801      	ldr	r0, [sp, #4]
 8002a98:	e000      	b.n	8002a9c <ssd1306_WriteChar+0x9c>
        return 0;
 8002a9a:	2000      	movs	r0, #0
}
 8002a9c:	b005      	add	sp, #20
 8002a9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return 0;
 8002aa2:	2000      	movs	r0, #0
 8002aa4:	e7fa      	b.n	8002a9c <ssd1306_WriteChar+0x9c>
 8002aa6:	2000      	movs	r0, #0
 8002aa8:	e7f8      	b.n	8002a9c <ssd1306_WriteChar+0x9c>
 8002aaa:	bf00      	nop
 8002aac:	200008d4 	.word	0x200008d4

08002ab0 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8002ab0:	b570      	push	{r4, r5, r6, lr}
 8002ab2:	b082      	sub	sp, #8
 8002ab4:	4604      	mov	r4, r0
 8002ab6:	a802      	add	r0, sp, #8
 8002ab8:	e900 0006 	stmdb	r0, {r1, r2}
    while (*str) {
 8002abc:	7820      	ldrb	r0, [r4, #0]
 8002abe:	b170      	cbz	r0, 8002ade <ssd1306_WriteString+0x2e>
 8002ac0:	461e      	mov	r6, r3
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8002ac2:	466d      	mov	r5, sp
 8002ac4:	4633      	mov	r3, r6
 8002ac6:	e895 0006 	ldmia.w	r5, {r1, r2}
 8002aca:	f7ff ff99 	bl	8002a00 <ssd1306_WriteChar>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	7820      	ldrb	r0, [r4, #0]
 8002ad2:	4282      	cmp	r2, r0
 8002ad4:	d103      	bne.n	8002ade <ssd1306_WriteString+0x2e>
    while (*str) {
 8002ad6:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8002ada:	2800      	cmp	r0, #0
 8002adc:	d1f2      	bne.n	8002ac4 <ssd1306_WriteString+0x14>
        str++;
    }
    
    // Everything ok
    return *str;
}
 8002ade:	b002      	add	sp, #8
 8002ae0:	bd70      	pop	{r4, r5, r6, pc}
	...

08002ae4 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
    SSD1306.CurrentX = x;
 8002ae4:	4b01      	ldr	r3, [pc, #4]	; (8002aec <ssd1306_SetCursor+0x8>)
 8002ae6:	8018      	strh	r0, [r3, #0]
    SSD1306.CurrentY = y;
 8002ae8:	8059      	strh	r1, [r3, #2]
}
 8002aea:	4770      	bx	lr
 8002aec:	200008d4 	.word	0x200008d4

08002af0 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8002af0:	b510      	push	{r4, lr}
 8002af2:	4604      	mov	r4, r0
    const uint8_t kSetContrastControlRegister = 0x81;
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8002af4:	2081      	movs	r0, #129	; 0x81
 8002af6:	f7ff ff09 	bl	800290c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8002afa:	4620      	mov	r0, r4
 8002afc:	f7ff ff06 	bl	800290c <ssd1306_WriteCommand>
}
 8002b00:	bd10      	pop	{r4, pc}
	...

08002b04 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8002b04:	b508      	push	{r3, lr}
 8002b06:	4602      	mov	r2, r0
    uint8_t value;
    if (on) {
 8002b08:	4603      	mov	r3, r0
        value = 0xAF;   // Display on
        SSD1306.DisplayOn = 1;
    } else {
        value = 0xAE;   // Display off
 8002b0a:	2800      	cmp	r0, #0
 8002b0c:	bf13      	iteet	ne
 8002b0e:	20af      	movne	r0, #175	; 0xaf
 8002b10:	20ae      	moveq	r0, #174	; 0xae
 8002b12:	4613      	moveq	r3, r2
 8002b14:	2301      	movne	r3, #1
 8002b16:	4a02      	ldr	r2, [pc, #8]	; (8002b20 <ssd1306_SetDisplayOn+0x1c>)
 8002b18:	7153      	strb	r3, [r2, #5]
        SSD1306.DisplayOn = 0;
    }
    ssd1306_WriteCommand(value);
 8002b1a:	f7ff fef7 	bl	800290c <ssd1306_WriteCommand>
}
 8002b1e:	bd08      	pop	{r3, pc}
 8002b20:	200008d4 	.word	0x200008d4

08002b24 <ssd1306_Init>:
void ssd1306_Init(void) {
 8002b24:	b508      	push	{r3, lr}
    HAL_Delay(100);
 8002b26:	2064      	movs	r0, #100	; 0x64
 8002b28:	f000 f884 	bl	8002c34 <HAL_Delay>
    ssd1306_SetDisplayOn(0); //display off
 8002b2c:	2000      	movs	r0, #0
 8002b2e:	f7ff ffe9 	bl	8002b04 <ssd1306_SetDisplayOn>
    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8002b32:	2020      	movs	r0, #32
 8002b34:	f7ff feea 	bl	800290c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8002b38:	2000      	movs	r0, #0
 8002b3a:	f7ff fee7 	bl	800290c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002b3e:	20b0      	movs	r0, #176	; 0xb0
 8002b40:	f7ff fee4 	bl	800290c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8002b44:	20c8      	movs	r0, #200	; 0xc8
 8002b46:	f7ff fee1 	bl	800290c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //---set low column address
 8002b4a:	2000      	movs	r0, #0
 8002b4c:	f7ff fede 	bl	800290c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8002b50:	2010      	movs	r0, #16
 8002b52:	f7ff fedb 	bl	800290c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8002b56:	2040      	movs	r0, #64	; 0x40
 8002b58:	f7ff fed8 	bl	800290c <ssd1306_WriteCommand>
    ssd1306_SetContrast(0xFF);
 8002b5c:	20ff      	movs	r0, #255	; 0xff
 8002b5e:	f7ff ffc7 	bl	8002af0 <ssd1306_SetContrast>
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8002b62:	20a1      	movs	r0, #161	; 0xa1
 8002b64:	f7ff fed2 	bl	800290c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xA6); //--set normal color
 8002b68:	20a6      	movs	r0, #166	; 0xa6
 8002b6a:	f7ff fecf 	bl	800290c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8002b6e:	20a8      	movs	r0, #168	; 0xa8
 8002b70:	f7ff fecc 	bl	800290c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); //
 8002b74:	203f      	movs	r0, #63	; 0x3f
 8002b76:	f7ff fec9 	bl	800290c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002b7a:	20a4      	movs	r0, #164	; 0xa4
 8002b7c:	f7ff fec6 	bl	800290c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8002b80:	20d3      	movs	r0, #211	; 0xd3
 8002b82:	f7ff fec3 	bl	800290c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8002b86:	2000      	movs	r0, #0
 8002b88:	f7ff fec0 	bl	800290c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8002b8c:	20d5      	movs	r0, #213	; 0xd5
 8002b8e:	f7ff febd 	bl	800290c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8002b92:	20f0      	movs	r0, #240	; 0xf0
 8002b94:	f7ff feba 	bl	800290c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8002b98:	20d9      	movs	r0, #217	; 0xd9
 8002b9a:	f7ff feb7 	bl	800290c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8002b9e:	2022      	movs	r0, #34	; 0x22
 8002ba0:	f7ff feb4 	bl	800290c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8002ba4:	20da      	movs	r0, #218	; 0xda
 8002ba6:	f7ff feb1 	bl	800290c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
 8002baa:	2012      	movs	r0, #18
 8002bac:	f7ff feae 	bl	800290c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xDB); //--set vcomh
 8002bb0:	20db      	movs	r0, #219	; 0xdb
 8002bb2:	f7ff feab 	bl	800290c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8002bb6:	2020      	movs	r0, #32
 8002bb8:	f7ff fea8 	bl	800290c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8002bbc:	208d      	movs	r0, #141	; 0x8d
 8002bbe:	f7ff fea5 	bl	800290c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8002bc2:	2014      	movs	r0, #20
 8002bc4:	f7ff fea2 	bl	800290c <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8002bc8:	2001      	movs	r0, #1
 8002bca:	f7ff ff9b 	bl	8002b04 <ssd1306_SetDisplayOn>
    ssd1306_Fill(Black);
 8002bce:	2000      	movs	r0, #0
 8002bd0:	f7ff fec6 	bl	8002960 <ssd1306_Fill>
    ssd1306_UpdateScreen();
 8002bd4:	f7ff fed2 	bl	800297c <ssd1306_UpdateScreen>
    SSD1306.CurrentX = 0;
 8002bd8:	4b03      	ldr	r3, [pc, #12]	; (8002be8 <ssd1306_Init+0xc4>)
 8002bda:	2200      	movs	r2, #0
 8002bdc:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8002bde:	805a      	strh	r2, [r3, #2]
    SSD1306.Initialized = 1;
 8002be0:	2201      	movs	r2, #1
 8002be2:	711a      	strb	r2, [r3, #4]
}
 8002be4:	bd08      	pop	{r3, pc}
 8002be6:	bf00      	nop
 8002be8:	200008d4 	.word	0x200008d4

08002bec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002bec:	b508      	push	{r3, lr}
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002bee:	4a07      	ldr	r2, [pc, #28]	; (8002c0c <HAL_Init+0x20>)
 8002bf0:	6813      	ldr	r3, [r2, #0]
 8002bf2:	f043 0310 	orr.w	r3, r3, #16
 8002bf6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002bf8:	2003      	movs	r0, #3
 8002bfa:	f000 f82f 	bl	8002c5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002bfe:	200f      	movs	r0, #15
 8002c00:	f7ff fa32 	bl	8002068 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c04:	f7ff fa06 	bl	8002014 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8002c08:	2000      	movs	r0, #0
 8002c0a:	bd08      	pop	{r3, pc}
 8002c0c:	40022000 	.word	0x40022000

08002c10 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002c10:	4a03      	ldr	r2, [pc, #12]	; (8002c20 <HAL_IncTick+0x10>)
 8002c12:	6811      	ldr	r1, [r2, #0]
 8002c14:	4b03      	ldr	r3, [pc, #12]	; (8002c24 <HAL_IncTick+0x14>)
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	440b      	add	r3, r1
 8002c1a:	6013      	str	r3, [r2, #0]
}
 8002c1c:	4770      	bx	lr
 8002c1e:	bf00      	nop
 8002c20:	20000cdc 	.word	0x20000cdc
 8002c24:	2000000c 	.word	0x2000000c

08002c28 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002c28:	4b01      	ldr	r3, [pc, #4]	; (8002c30 <HAL_GetTick+0x8>)
 8002c2a:	6818      	ldr	r0, [r3, #0]
}
 8002c2c:	4770      	bx	lr
 8002c2e:	bf00      	nop
 8002c30:	20000cdc 	.word	0x20000cdc

08002c34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c34:	b538      	push	{r3, r4, r5, lr}
 8002c36:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002c38:	f7ff fff6 	bl	8002c28 <HAL_GetTick>
 8002c3c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c3e:	f1b4 3fff 	cmp.w	r4, #4294967295
 8002c42:	d002      	beq.n	8002c4a <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c44:	4b04      	ldr	r3, [pc, #16]	; (8002c58 <HAL_Delay+0x24>)
 8002c46:	781b      	ldrb	r3, [r3, #0]
 8002c48:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c4a:	f7ff ffed 	bl	8002c28 <HAL_GetTick>
 8002c4e:	1b40      	subs	r0, r0, r5
 8002c50:	42a0      	cmp	r0, r4
 8002c52:	d3fa      	bcc.n	8002c4a <HAL_Delay+0x16>
  {
  }
}
 8002c54:	bd38      	pop	{r3, r4, r5, pc}
 8002c56:	bf00      	nop
 8002c58:	2000000c 	.word	0x2000000c

08002c5c <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c5c:	4907      	ldr	r1, [pc, #28]	; (8002c7c <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002c5e:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002c60:	0203      	lsls	r3, r0, #8
 8002c62:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c66:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002c6a:	0412      	lsls	r2, r2, #16
 8002c6c:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8002c78:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002c7a:	4770      	bx	lr
 8002c7c:	e000ed00 	.word	0xe000ed00

08002c80 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c80:	b500      	push	{lr}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c82:	4b18      	ldr	r3, [pc, #96]	; (8002ce4 <HAL_NVIC_SetPriority+0x64>)
 8002c84:	68db      	ldr	r3, [r3, #12]
 8002c86:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c8a:	f1c3 0c07 	rsb	ip, r3, #7
 8002c8e:	f1bc 0f04 	cmp.w	ip, #4
 8002c92:	bf28      	it	cs
 8002c94:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c98:	f103 0e04 	add.w	lr, r3, #4
 8002c9c:	f1be 0f06 	cmp.w	lr, #6
 8002ca0:	bf8c      	ite	hi
 8002ca2:	3b03      	subhi	r3, #3
 8002ca4:	2300      	movls	r3, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ca6:	f04f 3eff 	mov.w	lr, #4294967295
 8002caa:	fa0e fc0c 	lsl.w	ip, lr, ip
 8002cae:	ea21 010c 	bic.w	r1, r1, ip
 8002cb2:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cb4:	fa0e f303 	lsl.w	r3, lr, r3
 8002cb8:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cbc:	4311      	orrs	r1, r2
  if ((int32_t)(IRQn) >= 0)
 8002cbe:	2800      	cmp	r0, #0
 8002cc0:	db09      	blt.n	8002cd6 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cc2:	0109      	lsls	r1, r1, #4
 8002cc4:	b2c9      	uxtb	r1, r1
 8002cc6:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8002cca:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8002cce:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002cd2:	f85d fb04 	ldr.w	pc, [sp], #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cd6:	f000 000f 	and.w	r0, r0, #15
 8002cda:	0109      	lsls	r1, r1, #4
 8002cdc:	b2c9      	uxtb	r1, r1
 8002cde:	4b02      	ldr	r3, [pc, #8]	; (8002ce8 <HAL_NVIC_SetPriority+0x68>)
 8002ce0:	5419      	strb	r1, [r3, r0]
 8002ce2:	e7f6      	b.n	8002cd2 <HAL_NVIC_SetPriority+0x52>
 8002ce4:	e000ed00 	.word	0xe000ed00
 8002ce8:	e000ed14 	.word	0xe000ed14

08002cec <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002cec:	2800      	cmp	r0, #0
 8002cee:	db08      	blt.n	8002d02 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cf0:	0942      	lsrs	r2, r0, #5
 8002cf2:	f000 001f 	and.w	r0, r0, #31
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	fa03 f000 	lsl.w	r0, r3, r0
 8002cfc:	4b01      	ldr	r3, [pc, #4]	; (8002d04 <HAL_NVIC_EnableIRQ+0x18>)
 8002cfe:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002d02:	4770      	bx	lr
 8002d04:	e000e100 	.word	0xe000e100

08002d08 <HAL_DMA_Abort>:
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d08:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d006      	beq.n	8002d20 <HAL_DMA_Abort+0x18>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d12:	2304      	movs	r3, #4
 8002d14:	6383      	str	r3, [r0, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d16:	2300      	movs	r3, #0
 8002d18:	f880 3020 	strb.w	r3, [r0, #32]
    
    return HAL_ERROR;
 8002d1c:	2001      	movs	r0, #1
 8002d1e:	4770      	bx	lr
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d20:	6802      	ldr	r2, [r0, #0]
 8002d22:	6813      	ldr	r3, [r2, #0]
 8002d24:	f023 030e 	bic.w	r3, r3, #14
 8002d28:	6013      	str	r3, [r2, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002d2a:	6802      	ldr	r2, [r0, #0]
 8002d2c:	6813      	ldr	r3, [r2, #0]
 8002d2e:	f023 0301 	bic.w	r3, r3, #1
 8002d32:	6013      	str	r3, [r2, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002d34:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8002d36:	2201      	movs	r2, #1
 8002d38:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3e:	604b      	str	r3, [r1, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002d40:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002d44:	2300      	movs	r3, #0
 8002d46:	f880 3020 	strb.w	r3, [r0, #32]
  
  return status; 
 8002d4a:	4618      	mov	r0, r3
}
 8002d4c:	4770      	bx	lr
	...

08002d50 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002d50:	b508      	push	{r3, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002d52:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	d003      	beq.n	8002d64 <HAL_DMA_Abort_IT+0x14>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d5c:	2304      	movs	r3, #4
 8002d5e:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 8002d60:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    } 
  }
  return status;
}
 8002d62:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d64:	6802      	ldr	r2, [r0, #0]
 8002d66:	6813      	ldr	r3, [r2, #0]
 8002d68:	f023 030e 	bic.w	r3, r3, #14
 8002d6c:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8002d6e:	6802      	ldr	r2, [r0, #0]
 8002d70:	6813      	ldr	r3, [r2, #0]
 8002d72:	f023 0301 	bic.w	r3, r3, #1
 8002d76:	6013      	str	r3, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002d78:	6803      	ldr	r3, [r0, #0]
 8002d7a:	4a19      	ldr	r2, [pc, #100]	; (8002de0 <HAL_DMA_Abort_IT+0x90>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d013      	beq.n	8002da8 <HAL_DMA_Abort_IT+0x58>
 8002d80:	3214      	adds	r2, #20
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d01e      	beq.n	8002dc4 <HAL_DMA_Abort_IT+0x74>
 8002d86:	3214      	adds	r2, #20
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d01d      	beq.n	8002dc8 <HAL_DMA_Abort_IT+0x78>
 8002d8c:	3214      	adds	r2, #20
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d01d      	beq.n	8002dce <HAL_DMA_Abort_IT+0x7e>
 8002d92:	3214      	adds	r2, #20
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d01d      	beq.n	8002dd4 <HAL_DMA_Abort_IT+0x84>
 8002d98:	3214      	adds	r2, #20
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	bf0c      	ite	eq
 8002d9e:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 8002da2:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 8002da6:	e000      	b.n	8002daa <HAL_DMA_Abort_IT+0x5a>
 8002da8:	2301      	movs	r3, #1
 8002daa:	4a0e      	ldr	r2, [pc, #56]	; (8002de4 <HAL_DMA_Abort_IT+0x94>)
 8002dac:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8002dae:	2301      	movs	r3, #1
 8002db0:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8002db4:	2300      	movs	r3, #0
 8002db6:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8002dba:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002dbc:	b16b      	cbz	r3, 8002dda <HAL_DMA_Abort_IT+0x8a>
      hdma->XferAbortCallback(hdma);
 8002dbe:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8002dc0:	2000      	movs	r0, #0
 8002dc2:	e7ce      	b.n	8002d62 <HAL_DMA_Abort_IT+0x12>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002dc4:	2310      	movs	r3, #16
 8002dc6:	e7f0      	b.n	8002daa <HAL_DMA_Abort_IT+0x5a>
 8002dc8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002dcc:	e7ed      	b.n	8002daa <HAL_DMA_Abort_IT+0x5a>
 8002dce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002dd2:	e7ea      	b.n	8002daa <HAL_DMA_Abort_IT+0x5a>
 8002dd4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002dd8:	e7e7      	b.n	8002daa <HAL_DMA_Abort_IT+0x5a>
  HAL_StatusTypeDef status = HAL_OK;
 8002dda:	2000      	movs	r0, #0
 8002ddc:	e7c1      	b.n	8002d62 <HAL_DMA_Abort_IT+0x12>
 8002dde:	bf00      	nop
 8002de0:	40020008 	.word	0x40020008
 8002de4:	40020000 	.word	0x40020000

08002de8 <HAL_DMA_GetState>:
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
  /* Return DMA handle state */
  return hdma->State;
 8002de8:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
}
 8002dec:	4770      	bx	lr
	...

08002df0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002df4:	b083      	sub	sp, #12
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002df6:	f8d1 9000 	ldr.w	r9, [r1]
 8002dfa:	f1b9 0f00 	cmp.w	r9, #0
 8002dfe:	f000 811f 	beq.w	8003040 <HAL_GPIO_Init+0x250>
 8002e02:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 8002e04:	4613      	mov	r3, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002e06:	4e90      	ldr	r6, [pc, #576]	; (8003048 <HAL_GPIO_Init+0x258>)
        {
          SET_BIT(EXTI->IMR, iocurrent);
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002e08:	4c90      	ldr	r4, [pc, #576]	; (800304c <HAL_GPIO_Init+0x25c>)
      switch (GPIO_Init->Mode)
 8002e0a:	4d91      	ldr	r5, [pc, #580]	; (8003050 <HAL_GPIO_Init+0x260>)
 8002e0c:	f8df e244 	ldr.w	lr, [pc, #580]	; 8003054 <HAL_GPIO_Init+0x264>
 8002e10:	4694      	mov	ip, r2
 8002e12:	e0ba      	b.n	8002f8a <HAL_GPIO_Init+0x19a>
 8002e14:	f04f 0c00 	mov.w	ip, #0
 8002e18:	e025      	b.n	8002e66 <HAL_GPIO_Init+0x76>
 8002e1a:	45a9      	cmp	r9, r5
 8002e1c:	d00f      	beq.n	8002e3e <HAL_GPIO_Init+0x4e>
 8002e1e:	d906      	bls.n	8002e2e <HAL_GPIO_Init+0x3e>
 8002e20:	45f1      	cmp	r9, lr
 8002e22:	d00c      	beq.n	8002e3e <HAL_GPIO_Init+0x4e>
 8002e24:	f8df a230 	ldr.w	sl, [pc, #560]	; 8003058 <HAL_GPIO_Init+0x268>
 8002e28:	45d1      	cmp	r9, sl
 8002e2a:	d008      	beq.n	8002e3e <HAL_GPIO_Init+0x4e>
 8002e2c:	e01b      	b.n	8002e66 <HAL_GPIO_Init+0x76>
 8002e2e:	f8df a22c 	ldr.w	sl, [pc, #556]	; 800305c <HAL_GPIO_Init+0x26c>
 8002e32:	45d1      	cmp	r9, sl
 8002e34:	d003      	beq.n	8002e3e <HAL_GPIO_Init+0x4e>
 8002e36:	f50a 2a70 	add.w	sl, sl, #983040	; 0xf0000
 8002e3a:	45d1      	cmp	r9, sl
 8002e3c:	d10f      	bne.n	8002e5e <HAL_GPIO_Init+0x6e>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002e3e:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8002e42:	f1bc 0f00 	cmp.w	ip, #0
 8002e46:	f000 80ef 	beq.w	8003028 <HAL_GPIO_Init+0x238>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002e4a:	f1bc 0f01 	cmp.w	ip, #1
            GPIOx->BSRR = ioposition;
 8002e4e:	bf0c      	ite	eq
 8002e50:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8002e54:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002e58:	f04f 0c08 	mov.w	ip, #8
 8002e5c:	e003      	b.n	8002e66 <HAL_GPIO_Init+0x76>
      switch (GPIO_Init->Mode)
 8002e5e:	f5aa 1a80 	sub.w	sl, sl, #1048576	; 0x100000
 8002e62:	45d1      	cmp	r9, sl
 8002e64:	d0eb      	beq.n	8002e3e <HAL_GPIO_Init+0x4e>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002e66:	2fff      	cmp	r7, #255	; 0xff
 8002e68:	bf99      	ittee	ls
 8002e6a:	4681      	movls	r9, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002e6c:	4692      	movls	sl, r2
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002e6e:	f100 0904 	addhi.w	r9, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002e72:	f1a2 0a20 	subhi.w	sl, r2, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002e76:	f8d9 8000 	ldr.w	r8, [r9]
 8002e7a:	f04f 0b0f 	mov.w	fp, #15
 8002e7e:	fa0b fb0a 	lsl.w	fp, fp, sl
 8002e82:	ea28 080b 	bic.w	r8, r8, fp
 8002e86:	fa0c fa0a 	lsl.w	sl, ip, sl
 8002e8a:	ea48 080a 	orr.w	r8, r8, sl
 8002e8e:	f8c9 8000 	str.w	r8, [r9]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e92:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8002e96:	f018 5f80 	tst.w	r8, #268435456	; 0x10000000
 8002e9a:	d06f      	beq.n	8002f7c <HAL_GPIO_Init+0x18c>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002e9c:	f8d6 8018 	ldr.w	r8, [r6, #24]
 8002ea0:	f048 0801 	orr.w	r8, r8, #1
 8002ea4:	f8c6 8018 	str.w	r8, [r6, #24]
 8002ea8:	f8d6 8018 	ldr.w	r8, [r6, #24]
 8002eac:	f008 0801 	and.w	r8, r8, #1
 8002eb0:	f8cd 8004 	str.w	r8, [sp, #4]
 8002eb4:	f8dd 8004 	ldr.w	r8, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8002eb8:	f023 0803 	bic.w	r8, r3, #3
 8002ebc:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8002ec0:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
 8002ec4:	f8d8 a008 	ldr.w	sl, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002ec8:	f003 0903 	and.w	r9, r3, #3
 8002ecc:	ea4f 0b89 	mov.w	fp, r9, lsl #2
 8002ed0:	f04f 090f 	mov.w	r9, #15
 8002ed4:	fa09 f90b 	lsl.w	r9, r9, fp
 8002ed8:	ea2a 0a09 	bic.w	sl, sl, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002edc:	f8df 9180 	ldr.w	r9, [pc, #384]	; 8003060 <HAL_GPIO_Init+0x270>
 8002ee0:	4548      	cmp	r0, r9
 8002ee2:	f000 80a4 	beq.w	800302e <HAL_GPIO_Init+0x23e>
 8002ee6:	f509 6980 	add.w	r9, r9, #1024	; 0x400
 8002eea:	4548      	cmp	r0, r9
 8002eec:	f000 80a2 	beq.w	8003034 <HAL_GPIO_Init+0x244>
 8002ef0:	f509 6980 	add.w	r9, r9, #1024	; 0x400
 8002ef4:	4548      	cmp	r0, r9
 8002ef6:	f000 80a0 	beq.w	800303a <HAL_GPIO_Init+0x24a>
 8002efa:	f509 6980 	add.w	r9, r9, #1024	; 0x400
 8002efe:	4548      	cmp	r0, r9
 8002f00:	bf0c      	ite	eq
 8002f02:	f04f 0903 	moveq.w	r9, #3
 8002f06:	f04f 0904 	movne.w	r9, #4
 8002f0a:	fa09 f90b 	lsl.w	r9, r9, fp
 8002f0e:	ea49 090a 	orr.w	r9, r9, sl
        AFIO->EXTICR[position >> 2u] = temp;
 8002f12:	f8c8 9008 	str.w	r9, [r8, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f16:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8002f1a:	f418 1f80 	tst.w	r8, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8002f1e:	f8d4 8008 	ldr.w	r8, [r4, #8]
 8002f22:	bf14      	ite	ne
 8002f24:	ea48 0807 	orrne.w	r8, r8, r7
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002f28:	ea28 0807 	biceq.w	r8, r8, r7
 8002f2c:	f8c4 8008 	str.w	r8, [r4, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f30:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8002f34:	f418 1f00 	tst.w	r8, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8002f38:	f8d4 800c 	ldr.w	r8, [r4, #12]
 8002f3c:	bf14      	ite	ne
 8002f3e:	ea48 0807 	orrne.w	r8, r8, r7
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002f42:	ea28 0807 	biceq.w	r8, r8, r7
 8002f46:	f8c4 800c 	str.w	r8, [r4, #12]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002f4a:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8002f4e:	f418 3f00 	tst.w	r8, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8002f52:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8002f56:	bf14      	ite	ne
 8002f58:	ea48 0807 	orrne.w	r8, r8, r7
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002f5c:	ea28 0807 	biceq.w	r8, r8, r7
 8002f60:	f8c4 8004 	str.w	r8, [r4, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002f64:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8002f68:	f418 3f80 	tst.w	r8, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8002f6c:	f8d4 8000 	ldr.w	r8, [r4]
 8002f70:	bf14      	ite	ne
 8002f72:	ea48 0707 	orrne.w	r7, r8, r7
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002f76:	ea28 0707 	biceq.w	r7, r8, r7
 8002f7a:	6027      	str	r7, [r4, #0]
        }
      }
    }

	position++;
 8002f7c:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f7e:	f8d1 9000 	ldr.w	r9, [r1]
 8002f82:	3204      	adds	r2, #4
 8002f84:	fa39 f703 	lsrs.w	r7, r9, r3
 8002f88:	d05a      	beq.n	8003040 <HAL_GPIO_Init+0x250>
    ioposition = (0x01uL << position);
 8002f8a:	f04f 0801 	mov.w	r8, #1
 8002f8e:	fa08 f803 	lsl.w	r8, r8, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f92:	ea08 0709 	and.w	r7, r8, r9
    if (iocurrent == ioposition)
 8002f96:	ea38 0909 	bics.w	r9, r8, r9
 8002f9a:	d1ef      	bne.n	8002f7c <HAL_GPIO_Init+0x18c>
      switch (GPIO_Init->Mode)
 8002f9c:	f8d1 9004 	ldr.w	r9, [r1, #4]
 8002fa0:	f1b9 0f12 	cmp.w	r9, #18
 8002fa4:	f63f af39 	bhi.w	8002e1a <HAL_GPIO_Init+0x2a>
 8002fa8:	f1b9 0f12 	cmp.w	r9, #18
 8002fac:	f63f af5b 	bhi.w	8002e66 <HAL_GPIO_Init+0x76>
 8002fb0:	f20f 0a04 	addw	sl, pc, #4
 8002fb4:	f85a f029 	ldr.w	pc, [sl, r9, lsl #2]
 8002fb8:	08002e3f 	.word	0x08002e3f
 8002fbc:	08003005 	.word	0x08003005
 8002fc0:	08003015 	.word	0x08003015
 8002fc4:	08002e15 	.word	0x08002e15
 8002fc8:	08002e67 	.word	0x08002e67
 8002fcc:	08002e67 	.word	0x08002e67
 8002fd0:	08002e67 	.word	0x08002e67
 8002fd4:	08002e67 	.word	0x08002e67
 8002fd8:	08002e67 	.word	0x08002e67
 8002fdc:	08002e67 	.word	0x08002e67
 8002fe0:	08002e67 	.word	0x08002e67
 8002fe4:	08002e67 	.word	0x08002e67
 8002fe8:	08002e67 	.word	0x08002e67
 8002fec:	08002e67 	.word	0x08002e67
 8002ff0:	08002e67 	.word	0x08002e67
 8002ff4:	08002e67 	.word	0x08002e67
 8002ff8:	08002e67 	.word	0x08002e67
 8002ffc:	0800300b 	.word	0x0800300b
 8003000:	0800301f 	.word	0x0800301f
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003004:	f8d1 c00c 	ldr.w	ip, [r1, #12]
          break;
 8003008:	e72d      	b.n	8002e66 <HAL_GPIO_Init+0x76>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800300a:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 800300e:	f10c 0c04 	add.w	ip, ip, #4
          break;
 8003012:	e728      	b.n	8002e66 <HAL_GPIO_Init+0x76>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003014:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 8003018:	f10c 0c08 	add.w	ip, ip, #8
          break;
 800301c:	e723      	b.n	8002e66 <HAL_GPIO_Init+0x76>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800301e:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 8003022:	f10c 0c0c 	add.w	ip, ip, #12
          break;
 8003026:	e71e      	b.n	8002e66 <HAL_GPIO_Init+0x76>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003028:	f04f 0c04 	mov.w	ip, #4
 800302c:	e71b      	b.n	8002e66 <HAL_GPIO_Init+0x76>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800302e:	f04f 0900 	mov.w	r9, #0
 8003032:	e76a      	b.n	8002f0a <HAL_GPIO_Init+0x11a>
 8003034:	f04f 0901 	mov.w	r9, #1
 8003038:	e767      	b.n	8002f0a <HAL_GPIO_Init+0x11a>
 800303a:	f04f 0902 	mov.w	r9, #2
 800303e:	e764      	b.n	8002f0a <HAL_GPIO_Init+0x11a>
  }
}
 8003040:	b003      	add	sp, #12
 8003042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003046:	bf00      	nop
 8003048:	40021000 	.word	0x40021000
 800304c:	40010400 	.word	0x40010400
 8003050:	10220000 	.word	0x10220000
 8003054:	10310000 	.word	0x10310000
 8003058:	10320000 	.word	0x10320000
 800305c:	10120000 	.word	0x10120000
 8003060:	40010800 	.word	0x40010800

08003064 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003064:	b10a      	cbz	r2, 800306a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003066:	6101      	str	r1, [r0, #16]
 8003068:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800306a:	0409      	lsls	r1, r1, #16
 800306c:	6101      	str	r1, [r0, #16]
  }
}
 800306e:	4770      	bx	lr

08003070 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003070:	6803      	ldr	r3, [r0, #0]
 8003072:	695a      	ldr	r2, [r3, #20]
 8003074:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8003078:	d101      	bne.n	800307e <I2C_IsAcknowledgeFailed+0xe>
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_ERROR;
  }
  return HAL_OK;
 800307a:	2000      	movs	r0, #0
}
 800307c:	4770      	bx	lr
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800307e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003082:	615a      	str	r2, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8003084:	2300      	movs	r3, #0
 8003086:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003088:	2220      	movs	r2, #32
 800308a:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800308e:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003092:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8003094:	f042 0204 	orr.w	r2, r2, #4
 8003098:	6402      	str	r2, [r0, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 800309a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    return HAL_ERROR;
 800309e:	2001      	movs	r0, #1
 80030a0:	4770      	bx	lr

080030a2 <I2C_WaitOnFlagUntilTimeout>:
{
 80030a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80030a6:	4605      	mov	r5, r0
 80030a8:	460c      	mov	r4, r1
 80030aa:	4616      	mov	r6, r2
 80030ac:	461f      	mov	r7, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030ae:	f3c1 4807 	ubfx	r8, r1, #16, #8
 80030b2:	f1b8 0f01 	cmp.w	r8, #1
 80030b6:	682b      	ldr	r3, [r5, #0]
 80030b8:	bf0c      	ite	eq
 80030ba:	695b      	ldreq	r3, [r3, #20]
 80030bc:	699b      	ldrne	r3, [r3, #24]
 80030be:	ea24 0c03 	bic.w	ip, r4, r3
 80030c2:	fa1f fc8c 	uxth.w	ip, ip
 80030c6:	fabc fc8c 	clz	ip, ip
 80030ca:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80030ce:	4566      	cmp	r6, ip
 80030d0:	d127      	bne.n	8003122 <I2C_WaitOnFlagUntilTimeout+0x80>
    if (Timeout != HAL_MAX_DELAY)
 80030d2:	f1b7 3fff 	cmp.w	r7, #4294967295
 80030d6:	d0ec      	beq.n	80030b2 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030d8:	f7ff fda6 	bl	8002c28 <HAL_GetTick>
 80030dc:	9b06      	ldr	r3, [sp, #24]
 80030de:	1ac0      	subs	r0, r0, r3
 80030e0:	42b8      	cmp	r0, r7
 80030e2:	d801      	bhi.n	80030e8 <I2C_WaitOnFlagUntilTimeout+0x46>
 80030e4:	2f00      	cmp	r7, #0
 80030e6:	d1e4      	bne.n	80030b2 <I2C_WaitOnFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80030e8:	f1b8 0f01 	cmp.w	r8, #1
 80030ec:	682b      	ldr	r3, [r5, #0]
 80030ee:	bf0c      	ite	eq
 80030f0:	695b      	ldreq	r3, [r3, #20]
 80030f2:	699b      	ldrne	r3, [r3, #24]
 80030f4:	ea24 0303 	bic.w	r3, r4, r3
 80030f8:	b29b      	uxth	r3, r3
 80030fa:	fab3 f383 	clz	r3, r3
 80030fe:	095b      	lsrs	r3, r3, #5
 8003100:	429e      	cmp	r6, r3
 8003102:	d1d6      	bne.n	80030b2 <I2C_WaitOnFlagUntilTimeout+0x10>
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003104:	2300      	movs	r3, #0
 8003106:	632b      	str	r3, [r5, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003108:	2220      	movs	r2, #32
 800310a:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800310e:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003112:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8003114:	f042 0220 	orr.w	r2, r2, #32
 8003118:	642a      	str	r2, [r5, #64]	; 0x40
          __HAL_UNLOCK(hi2c);
 800311a:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
          return HAL_ERROR;
 800311e:	2001      	movs	r0, #1
 8003120:	e000      	b.n	8003124 <I2C_WaitOnFlagUntilTimeout+0x82>
  return HAL_OK;
 8003122:	2000      	movs	r0, #0
}
 8003124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003128 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8003128:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800312c:	4605      	mov	r5, r0
 800312e:	460e      	mov	r6, r1
 8003130:	4617      	mov	r7, r2
 8003132:	4699      	mov	r9, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003134:	f3c1 4807 	ubfx	r8, r1, #16, #8
 8003138:	f1b8 0f01 	cmp.w	r8, #1
 800313c:	682b      	ldr	r3, [r5, #0]
 800313e:	bf0c      	ite	eq
 8003140:	695c      	ldreq	r4, [r3, #20]
 8003142:	699c      	ldrne	r4, [r3, #24]
 8003144:	ea26 0404 	bic.w	r4, r6, r4
 8003148:	b2a4      	uxth	r4, r4
 800314a:	3c00      	subs	r4, #0
 800314c:	bf18      	it	ne
 800314e:	2401      	movne	r4, #1
 8003150:	2c00      	cmp	r4, #0
 8003152:	d044      	beq.n	80031de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003154:	682b      	ldr	r3, [r5, #0]
 8003156:	695a      	ldr	r2, [r3, #20]
 8003158:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800315c:	d127      	bne.n	80031ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
    if (Timeout != HAL_MAX_DELAY)
 800315e:	f1b7 3fff 	cmp.w	r7, #4294967295
 8003162:	d0e9      	beq.n	8003138 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003164:	f7ff fd60 	bl	8002c28 <HAL_GetTick>
 8003168:	eba0 0009 	sub.w	r0, r0, r9
 800316c:	42b8      	cmp	r0, r7
 800316e:	d801      	bhi.n	8003174 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4c>
 8003170:	2f00      	cmp	r7, #0
 8003172:	d1e1      	bne.n	8003138 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003174:	f1b8 0f01 	cmp.w	r8, #1
 8003178:	682b      	ldr	r3, [r5, #0]
 800317a:	bf0c      	ite	eq
 800317c:	695b      	ldreq	r3, [r3, #20]
 800317e:	699b      	ldrne	r3, [r3, #24]
 8003180:	ea26 0303 	bic.w	r3, r6, r3
 8003184:	b29b      	uxth	r3, r3
 8003186:	3b00      	subs	r3, #0
 8003188:	bf18      	it	ne
 800318a:	2301      	movne	r3, #1
 800318c:	2b00      	cmp	r3, #0
 800318e:	d0d3      	beq.n	8003138 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003190:	2300      	movs	r3, #0
 8003192:	632b      	str	r3, [r5, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003194:	2220      	movs	r2, #32
 8003196:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800319a:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800319e:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80031a0:	f042 0220 	orr.w	r2, r2, #32
 80031a4:	642a      	str	r2, [r5, #64]	; 0x40
          __HAL_UNLOCK(hi2c);
 80031a6:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
          return HAL_ERROR;
 80031aa:	2001      	movs	r0, #1
 80031ac:	e015      	b.n	80031da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb2>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031b4:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031b6:	682b      	ldr	r3, [r5, #0]
 80031b8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80031bc:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 80031be:	2300      	movs	r3, #0
 80031c0:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80031c2:	2220      	movs	r2, #32
 80031c4:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031c8:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80031cc:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80031ce:	f042 0204 	orr.w	r2, r2, #4
 80031d2:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80031d4:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 80031d8:	2001      	movs	r0, #1
}
 80031da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  return HAL_OK;
 80031de:	2000      	movs	r0, #0
 80031e0:	e7fb      	b.n	80031da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb2>

080031e2 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 80031e2:	b570      	push	{r4, r5, r6, lr}
 80031e4:	4604      	mov	r4, r0
 80031e6:	460d      	mov	r5, r1
 80031e8:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031ea:	6823      	ldr	r3, [r4, #0]
 80031ec:	695b      	ldr	r3, [r3, #20]
 80031ee:	f013 0f80 	tst.w	r3, #128	; 0x80
 80031f2:	d121      	bne.n	8003238 <I2C_WaitOnTXEFlagUntilTimeout+0x56>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80031f4:	4620      	mov	r0, r4
 80031f6:	f7ff ff3b 	bl	8003070 <I2C_IsAcknowledgeFailed>
 80031fa:	b9f8      	cbnz	r0, 800323c <I2C_WaitOnTXEFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 80031fc:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003200:	d0f3      	beq.n	80031ea <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003202:	f7ff fd11 	bl	8002c28 <HAL_GetTick>
 8003206:	1b80      	subs	r0, r0, r6
 8003208:	42a8      	cmp	r0, r5
 800320a:	d801      	bhi.n	8003210 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 800320c:	2d00      	cmp	r5, #0
 800320e:	d1ec      	bne.n	80031ea <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003210:	6823      	ldr	r3, [r4, #0]
 8003212:	695b      	ldr	r3, [r3, #20]
 8003214:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003218:	d1e7      	bne.n	80031ea <I2C_WaitOnTXEFlagUntilTimeout+0x8>
          hi2c->PreviousState       = I2C_STATE_NONE;
 800321a:	2300      	movs	r3, #0
 800321c:	6323      	str	r3, [r4, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800321e:	2220      	movs	r2, #32
 8003220:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003224:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003228:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800322a:	f042 0220 	orr.w	r2, r2, #32
 800322e:	6422      	str	r2, [r4, #64]	; 0x40
          __HAL_UNLOCK(hi2c);
 8003230:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_ERROR;
 8003234:	2001      	movs	r0, #1
 8003236:	e000      	b.n	800323a <I2C_WaitOnTXEFlagUntilTimeout+0x58>
  return HAL_OK;
 8003238:	2000      	movs	r0, #0
}
 800323a:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800323c:	2001      	movs	r0, #1
 800323e:	e7fc      	b.n	800323a <I2C_WaitOnTXEFlagUntilTimeout+0x58>

08003240 <I2C_RequestMemoryWrite>:
{
 8003240:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003244:	b085      	sub	sp, #20
 8003246:	4604      	mov	r4, r0
 8003248:	460d      	mov	r5, r1
 800324a:	4691      	mov	r9, r2
 800324c:	461f      	mov	r7, r3
 800324e:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8003252:	9e0d      	ldr	r6, [sp, #52]	; 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003254:	6803      	ldr	r3, [r0, #0]
 8003256:	6819      	ldr	r1, [r3, #0]
 8003258:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800325c:	6019      	str	r1, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800325e:	9600      	str	r6, [sp, #0]
 8003260:	4643      	mov	r3, r8
 8003262:	2200      	movs	r2, #0
 8003264:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003268:	f7ff ff1b 	bl	80030a2 <I2C_WaitOnFlagUntilTimeout>
 800326c:	b970      	cbnz	r0, 800328c <I2C_RequestMemoryWrite+0x4c>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800326e:	6823      	ldr	r3, [r4, #0]
 8003270:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8003274:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003276:	4633      	mov	r3, r6
 8003278:	4642      	mov	r2, r8
 800327a:	4928      	ldr	r1, [pc, #160]	; (800331c <I2C_RequestMemoryWrite+0xdc>)
 800327c:	4620      	mov	r0, r4
 800327e:	f7ff ff53 	bl	8003128 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003282:	b168      	cbz	r0, 80032a0 <I2C_RequestMemoryWrite+0x60>
    return HAL_ERROR;
 8003284:	2001      	movs	r0, #1
}
 8003286:	b005      	add	sp, #20
 8003288:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800328c:	6823      	ldr	r3, [r4, #0]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003294:	d040      	beq.n	8003318 <I2C_RequestMemoryWrite+0xd8>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003296:	f44f 7300 	mov.w	r3, #512	; 0x200
 800329a:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 800329c:	2003      	movs	r0, #3
 800329e:	e7f2      	b.n	8003286 <I2C_RequestMemoryWrite+0x46>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032a0:	2300      	movs	r3, #0
 80032a2:	9303      	str	r3, [sp, #12]
 80032a4:	6823      	ldr	r3, [r4, #0]
 80032a6:	695a      	ldr	r2, [r3, #20]
 80032a8:	9203      	str	r2, [sp, #12]
 80032aa:	699b      	ldr	r3, [r3, #24]
 80032ac:	9303      	str	r3, [sp, #12]
 80032ae:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032b0:	4632      	mov	r2, r6
 80032b2:	4641      	mov	r1, r8
 80032b4:	4620      	mov	r0, r4
 80032b6:	f7ff ff94 	bl	80031e2 <I2C_WaitOnTXEFlagUntilTimeout>
 80032ba:	b930      	cbnz	r0, 80032ca <I2C_RequestMemoryWrite+0x8a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80032bc:	2f01      	cmp	r7, #1
 80032be:	d110      	bne.n	80032e2 <I2C_RequestMemoryWrite+0xa2>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80032c0:	6823      	ldr	r3, [r4, #0]
 80032c2:	fa5f f689 	uxtb.w	r6, r9
 80032c6:	611e      	str	r6, [r3, #16]
 80032c8:	e7dd      	b.n	8003286 <I2C_RequestMemoryWrite+0x46>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80032cc:	2b04      	cmp	r3, #4
 80032ce:	d001      	beq.n	80032d4 <I2C_RequestMemoryWrite+0x94>
    return HAL_ERROR;
 80032d0:	2001      	movs	r0, #1
 80032d2:	e7d8      	b.n	8003286 <I2C_RequestMemoryWrite+0x46>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032d4:	6822      	ldr	r2, [r4, #0]
 80032d6:	6813      	ldr	r3, [r2, #0]
 80032d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032dc:	6013      	str	r3, [r2, #0]
    return HAL_ERROR;
 80032de:	2001      	movs	r0, #1
 80032e0:	e7d1      	b.n	8003286 <I2C_RequestMemoryWrite+0x46>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80032e2:	6823      	ldr	r3, [r4, #0]
 80032e4:	ea4f 2219 	mov.w	r2, r9, lsr #8
 80032e8:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032ea:	4632      	mov	r2, r6
 80032ec:	4641      	mov	r1, r8
 80032ee:	4620      	mov	r0, r4
 80032f0:	f7ff ff77 	bl	80031e2 <I2C_WaitOnTXEFlagUntilTimeout>
 80032f4:	b920      	cbnz	r0, 8003300 <I2C_RequestMemoryWrite+0xc0>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80032f6:	6823      	ldr	r3, [r4, #0]
 80032f8:	fa5f f689 	uxtb.w	r6, r9
 80032fc:	611e      	str	r6, [r3, #16]
 80032fe:	e7c2      	b.n	8003286 <I2C_RequestMemoryWrite+0x46>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003300:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003302:	2b04      	cmp	r3, #4
 8003304:	d001      	beq.n	800330a <I2C_RequestMemoryWrite+0xca>
      return HAL_ERROR;
 8003306:	2001      	movs	r0, #1
 8003308:	e7bd      	b.n	8003286 <I2C_RequestMemoryWrite+0x46>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800330a:	6822      	ldr	r2, [r4, #0]
 800330c:	6813      	ldr	r3, [r2, #0]
 800330e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003312:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 8003314:	2001      	movs	r0, #1
 8003316:	e7b6      	b.n	8003286 <I2C_RequestMemoryWrite+0x46>
    return HAL_TIMEOUT;
 8003318:	2003      	movs	r0, #3
 800331a:	e7b4      	b.n	8003286 <I2C_RequestMemoryWrite+0x46>
 800331c:	00010002 	.word	0x00010002

08003320 <I2C_RequestMemoryRead>:
{
 8003320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003324:	b084      	sub	sp, #16
 8003326:	4604      	mov	r4, r0
 8003328:	460d      	mov	r5, r1
 800332a:	4616      	mov	r6, r2
 800332c:	4699      	mov	r9, r3
 800332e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8003330:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003334:	6802      	ldr	r2, [r0, #0]
 8003336:	6813      	ldr	r3, [r2, #0]
 8003338:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800333c:	6013      	str	r3, [r2, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800333e:	6803      	ldr	r3, [r0, #0]
 8003340:	6819      	ldr	r1, [r3, #0]
 8003342:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8003346:	6019      	str	r1, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003348:	f8cd 8000 	str.w	r8, [sp]
 800334c:	463b      	mov	r3, r7
 800334e:	2200      	movs	r2, #0
 8003350:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003354:	f7ff fea5 	bl	80030a2 <I2C_WaitOnFlagUntilTimeout>
 8003358:	b980      	cbnz	r0, 800337c <I2C_RequestMemoryRead+0x5c>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800335a:	fa5f fa85 	uxtb.w	sl, r5
 800335e:	6823      	ldr	r3, [r4, #0]
 8003360:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8003364:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003366:	4643      	mov	r3, r8
 8003368:	463a      	mov	r2, r7
 800336a:	4945      	ldr	r1, [pc, #276]	; (8003480 <I2C_RequestMemoryRead+0x160>)
 800336c:	4620      	mov	r0, r4
 800336e:	f7ff fedb 	bl	8003128 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003372:	b168      	cbz	r0, 8003390 <I2C_RequestMemoryRead+0x70>
    return HAL_ERROR;
 8003374:	2001      	movs	r0, #1
}
 8003376:	b004      	add	sp, #16
 8003378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800337c:	6823      	ldr	r3, [r4, #0]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003384:	d077      	beq.n	8003476 <I2C_RequestMemoryRead+0x156>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003386:	f44f 7300 	mov.w	r3, #512	; 0x200
 800338a:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 800338c:	2003      	movs	r0, #3
 800338e:	e7f2      	b.n	8003376 <I2C_RequestMemoryRead+0x56>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003390:	2300      	movs	r3, #0
 8003392:	9303      	str	r3, [sp, #12]
 8003394:	6823      	ldr	r3, [r4, #0]
 8003396:	695a      	ldr	r2, [r3, #20]
 8003398:	9203      	str	r2, [sp, #12]
 800339a:	699b      	ldr	r3, [r3, #24]
 800339c:	9303      	str	r3, [sp, #12]
 800339e:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033a0:	4642      	mov	r2, r8
 80033a2:	4639      	mov	r1, r7
 80033a4:	4620      	mov	r0, r4
 80033a6:	f7ff ff1c 	bl	80031e2 <I2C_WaitOnTXEFlagUntilTimeout>
 80033aa:	b988      	cbnz	r0, 80033d0 <I2C_RequestMemoryRead+0xb0>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80033ac:	f1b9 0f01 	cmp.w	r9, #1
 80033b0:	d11a      	bne.n	80033e8 <I2C_RequestMemoryRead+0xc8>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80033b2:	6823      	ldr	r3, [r4, #0]
 80033b4:	b2f6      	uxtb	r6, r6
 80033b6:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033b8:	4642      	mov	r2, r8
 80033ba:	4639      	mov	r1, r7
 80033bc:	4620      	mov	r0, r4
 80033be:	f7ff ff10 	bl	80031e2 <I2C_WaitOnTXEFlagUntilTimeout>
 80033c2:	2800      	cmp	r0, #0
 80033c4:	d030      	beq.n	8003428 <I2C_RequestMemoryRead+0x108>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80033c8:	2b04      	cmp	r3, #4
 80033ca:	d026      	beq.n	800341a <I2C_RequestMemoryRead+0xfa>
    return HAL_ERROR;
 80033cc:	2001      	movs	r0, #1
 80033ce:	e7d2      	b.n	8003376 <I2C_RequestMemoryRead+0x56>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80033d2:	2b04      	cmp	r3, #4
 80033d4:	d001      	beq.n	80033da <I2C_RequestMemoryRead+0xba>
    return HAL_ERROR;
 80033d6:	2001      	movs	r0, #1
 80033d8:	e7cd      	b.n	8003376 <I2C_RequestMemoryRead+0x56>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033da:	6822      	ldr	r2, [r4, #0]
 80033dc:	6813      	ldr	r3, [r2, #0]
 80033de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80033e2:	6013      	str	r3, [r2, #0]
    return HAL_ERROR;
 80033e4:	2001      	movs	r0, #1
 80033e6:	e7c6      	b.n	8003376 <I2C_RequestMemoryRead+0x56>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80033e8:	6823      	ldr	r3, [r4, #0]
 80033ea:	0a32      	lsrs	r2, r6, #8
 80033ec:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033ee:	4642      	mov	r2, r8
 80033f0:	4639      	mov	r1, r7
 80033f2:	4620      	mov	r0, r4
 80033f4:	f7ff fef5 	bl	80031e2 <I2C_WaitOnTXEFlagUntilTimeout>
 80033f8:	b918      	cbnz	r0, 8003402 <I2C_RequestMemoryRead+0xe2>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80033fa:	6823      	ldr	r3, [r4, #0]
 80033fc:	b2f6      	uxtb	r6, r6
 80033fe:	611e      	str	r6, [r3, #16]
 8003400:	e7da      	b.n	80033b8 <I2C_RequestMemoryRead+0x98>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003402:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003404:	2b04      	cmp	r3, #4
 8003406:	d001      	beq.n	800340c <I2C_RequestMemoryRead+0xec>
      return HAL_ERROR;
 8003408:	2001      	movs	r0, #1
 800340a:	e7b4      	b.n	8003376 <I2C_RequestMemoryRead+0x56>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800340c:	6822      	ldr	r2, [r4, #0]
 800340e:	6813      	ldr	r3, [r2, #0]
 8003410:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003414:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 8003416:	2001      	movs	r0, #1
 8003418:	e7ad      	b.n	8003376 <I2C_RequestMemoryRead+0x56>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800341a:	6822      	ldr	r2, [r4, #0]
 800341c:	6813      	ldr	r3, [r2, #0]
 800341e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003422:	6013      	str	r3, [r2, #0]
    return HAL_ERROR;
 8003424:	2001      	movs	r0, #1
 8003426:	e7a6      	b.n	8003376 <I2C_RequestMemoryRead+0x56>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003428:	6822      	ldr	r2, [r4, #0]
 800342a:	6813      	ldr	r3, [r2, #0]
 800342c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003430:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003432:	f8cd 8000 	str.w	r8, [sp]
 8003436:	463b      	mov	r3, r7
 8003438:	2200      	movs	r2, #0
 800343a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800343e:	4620      	mov	r0, r4
 8003440:	f7ff fe2f 	bl	80030a2 <I2C_WaitOnFlagUntilTimeout>
 8003444:	b968      	cbnz	r0, 8003462 <I2C_RequestMemoryRead+0x142>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003446:	6822      	ldr	r2, [r4, #0]
 8003448:	f04a 0301 	orr.w	r3, sl, #1
 800344c:	6113      	str	r3, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800344e:	4643      	mov	r3, r8
 8003450:	463a      	mov	r2, r7
 8003452:	490b      	ldr	r1, [pc, #44]	; (8003480 <I2C_RequestMemoryRead+0x160>)
 8003454:	4620      	mov	r0, r4
 8003456:	f7ff fe67 	bl	8003128 <I2C_WaitOnMasterAddressFlagUntilTimeout>
    return HAL_TIMEOUT;
 800345a:	3800      	subs	r0, #0
 800345c:	bf18      	it	ne
 800345e:	2001      	movne	r0, #1
 8003460:	e789      	b.n	8003376 <I2C_RequestMemoryRead+0x56>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003462:	6823      	ldr	r3, [r4, #0]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f413 7f80 	tst.w	r3, #256	; 0x100
 800346a:	d006      	beq.n	800347a <I2C_RequestMemoryRead+0x15a>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800346c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003470:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8003472:	2003      	movs	r0, #3
 8003474:	e77f      	b.n	8003376 <I2C_RequestMemoryRead+0x56>
    return HAL_TIMEOUT;
 8003476:	2003      	movs	r0, #3
 8003478:	e77d      	b.n	8003376 <I2C_RequestMemoryRead+0x56>
    return HAL_TIMEOUT;
 800347a:	2003      	movs	r0, #3
 800347c:	e77b      	b.n	8003376 <I2C_RequestMemoryRead+0x56>
 800347e:	bf00      	nop
 8003480:	00010002 	.word	0x00010002

08003484 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8003484:	b570      	push	{r4, r5, r6, lr}
 8003486:	4604      	mov	r4, r0
 8003488:	460d      	mov	r5, r1
 800348a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800348c:	6823      	ldr	r3, [r4, #0]
 800348e:	695b      	ldr	r3, [r3, #20]
 8003490:	f013 0f04 	tst.w	r3, #4
 8003494:	d121      	bne.n	80034da <I2C_WaitOnBTFFlagUntilTimeout+0x56>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003496:	4620      	mov	r0, r4
 8003498:	f7ff fdea 	bl	8003070 <I2C_IsAcknowledgeFailed>
 800349c:	b9f8      	cbnz	r0, 80034de <I2C_WaitOnBTFFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 800349e:	f1b5 3fff 	cmp.w	r5, #4294967295
 80034a2:	d0f3      	beq.n	800348c <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034a4:	f7ff fbc0 	bl	8002c28 <HAL_GetTick>
 80034a8:	1b80      	subs	r0, r0, r6
 80034aa:	42a8      	cmp	r0, r5
 80034ac:	d801      	bhi.n	80034b2 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 80034ae:	2d00      	cmp	r5, #0
 80034b0:	d1ec      	bne.n	800348c <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80034b2:	6823      	ldr	r3, [r4, #0]
 80034b4:	695b      	ldr	r3, [r3, #20]
 80034b6:	f013 0f04 	tst.w	r3, #4
 80034ba:	d1e7      	bne.n	800348c <I2C_WaitOnBTFFlagUntilTimeout+0x8>
          hi2c->PreviousState       = I2C_STATE_NONE;
 80034bc:	2300      	movs	r3, #0
 80034be:	6323      	str	r3, [r4, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80034c0:	2220      	movs	r2, #32
 80034c2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034c6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034ca:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80034cc:	f042 0220 	orr.w	r2, r2, #32
 80034d0:	6422      	str	r2, [r4, #64]	; 0x40
          __HAL_UNLOCK(hi2c);
 80034d2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_ERROR;
 80034d6:	2001      	movs	r0, #1
 80034d8:	e000      	b.n	80034dc <I2C_WaitOnBTFFlagUntilTimeout+0x58>
  return HAL_OK;
 80034da:	2000      	movs	r0, #0
}
 80034dc:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80034de:	2001      	movs	r0, #1
 80034e0:	e7fc      	b.n	80034dc <I2C_WaitOnBTFFlagUntilTimeout+0x58>

080034e2 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 80034e2:	b570      	push	{r4, r5, r6, lr}
 80034e4:	4604      	mov	r4, r0
 80034e6:	460d      	mov	r5, r1
 80034e8:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80034ea:	6803      	ldr	r3, [r0, #0]
 80034ec:	695a      	ldr	r2, [r3, #20]
 80034ee:	f012 0f40 	tst.w	r2, #64	; 0x40
 80034f2:	d01b      	beq.n	800352c <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
  return HAL_OK;
 80034f4:	2000      	movs	r0, #0
 80034f6:	e00e      	b.n	8003516 <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034f8:	f06f 0210 	mvn.w	r2, #16
 80034fc:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 80034fe:	2300      	movs	r3, #0
 8003500:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003502:	2220      	movs	r2, #32
 8003504:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003508:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800350c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800350e:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8003510:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      return HAL_ERROR;
 8003514:	2001      	movs	r0, #1
}
 8003516:	bd70      	pop	{r4, r5, r6, pc}
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003518:	6823      	ldr	r3, [r4, #0]
 800351a:	695b      	ldr	r3, [r3, #20]
 800351c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003520:	d010      	beq.n	8003544 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003522:	6823      	ldr	r3, [r4, #0]
 8003524:	6958      	ldr	r0, [r3, #20]
 8003526:	f010 0f40 	tst.w	r0, #64	; 0x40
 800352a:	d11a      	bne.n	8003562 <I2C_WaitOnRXNEFlagUntilTimeout+0x80>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800352c:	6958      	ldr	r0, [r3, #20]
 800352e:	f010 0f10 	tst.w	r0, #16
 8003532:	d1e1      	bne.n	80034f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003534:	f7ff fb78 	bl	8002c28 <HAL_GetTick>
 8003538:	1b80      	subs	r0, r0, r6
 800353a:	42a8      	cmp	r0, r5
 800353c:	d8ec      	bhi.n	8003518 <I2C_WaitOnRXNEFlagUntilTimeout+0x36>
 800353e:	2d00      	cmp	r5, #0
 8003540:	d1ef      	bne.n	8003522 <I2C_WaitOnRXNEFlagUntilTimeout+0x40>
 8003542:	e7e9      	b.n	8003518 <I2C_WaitOnRXNEFlagUntilTimeout+0x36>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003544:	2300      	movs	r3, #0
 8003546:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003548:	2220      	movs	r2, #32
 800354a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800354e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003552:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003554:	f042 0220 	orr.w	r2, r2, #32
 8003558:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800355a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 800355e:	2001      	movs	r0, #1
 8003560:	e7d9      	b.n	8003516 <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
  return HAL_OK;
 8003562:	2000      	movs	r0, #0
 8003564:	e7d7      	b.n	8003516 <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
	...

08003568 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8003568:	2800      	cmp	r0, #0
 800356a:	f000 80b1 	beq.w	80036d0 <HAL_I2C_Init+0x168>
{
 800356e:	b538      	push	{r3, r4, r5, lr}
 8003570:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003572:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003576:	2b00      	cmp	r3, #0
 8003578:	d074      	beq.n	8003664 <HAL_I2C_Init+0xfc>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800357a:	2324      	movs	r3, #36	; 0x24
 800357c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8003580:	6822      	ldr	r2, [r4, #0]
 8003582:	6813      	ldr	r3, [r2, #0]
 8003584:	f023 0301 	bic.w	r3, r3, #1
 8003588:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800358a:	6822      	ldr	r2, [r4, #0]
 800358c:	6813      	ldr	r3, [r2, #0]
 800358e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003592:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003594:	6822      	ldr	r2, [r4, #0]
 8003596:	6813      	ldr	r3, [r2, #0]
 8003598:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800359c:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800359e:	f002 f8ef 	bl	8005780 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80035a2:	6862      	ldr	r2, [r4, #4]
 80035a4:	4b4c      	ldr	r3, [pc, #304]	; (80036d8 <HAL_I2C_Init+0x170>)
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d861      	bhi.n	800366e <HAL_I2C_Init+0x106>
 80035aa:	4b4c      	ldr	r3, [pc, #304]	; (80036dc <HAL_I2C_Init+0x174>)
 80035ac:	4298      	cmp	r0, r3
 80035ae:	f240 8091 	bls.w	80036d4 <HAL_I2C_Init+0x16c>
  freqrange = I2C_FREQRANGE(pclk1);
 80035b2:	494b      	ldr	r1, [pc, #300]	; (80036e0 <HAL_I2C_Init+0x178>)
 80035b4:	fba1 3100 	umull	r3, r1, r1, r0
 80035b8:	0c8b      	lsrs	r3, r1, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80035ba:	6825      	ldr	r5, [r4, #0]
 80035bc:	686a      	ldr	r2, [r5, #4]
 80035be:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80035c2:	ea42 4291 	orr.w	r2, r2, r1, lsr #18
 80035c6:	606a      	str	r2, [r5, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80035c8:	6821      	ldr	r1, [r4, #0]
 80035ca:	6a0a      	ldr	r2, [r1, #32]
 80035cc:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80035d0:	4d41      	ldr	r5, [pc, #260]	; (80036d8 <HAL_I2C_Init+0x170>)
 80035d2:	f8d4 c004 	ldr.w	ip, [r4, #4]
 80035d6:	45ac      	cmp	ip, r5
 80035d8:	d84e      	bhi.n	8003678 <HAL_I2C_Init+0x110>
 80035da:	3301      	adds	r3, #1
 80035dc:	4313      	orrs	r3, r2
 80035de:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80035e0:	6821      	ldr	r1, [r4, #0]
 80035e2:	69ca      	ldr	r2, [r1, #28]
 80035e4:	f422 424f 	bic.w	r2, r2, #52992	; 0xcf00
 80035e8:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80035ec:	6865      	ldr	r5, [r4, #4]
 80035ee:	4b3a      	ldr	r3, [pc, #232]	; (80036d8 <HAL_I2C_Init+0x170>)
 80035f0:	429d      	cmp	r5, r3
 80035f2:	d84b      	bhi.n	800368c <HAL_I2C_Init+0x124>
 80035f4:	1e43      	subs	r3, r0, #1
 80035f6:	006d      	lsls	r5, r5, #1
 80035f8:	fbb3 f3f5 	udiv	r3, r3, r5
 80035fc:	3301      	adds	r3, #1
 80035fe:	f640 70fc 	movw	r0, #4092	; 0xffc
 8003602:	4203      	tst	r3, r0
 8003604:	d05e      	beq.n	80036c4 <HAL_I2C_Init+0x15c>
 8003606:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800360a:	4313      	orrs	r3, r2
 800360c:	61cb      	str	r3, [r1, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800360e:	6821      	ldr	r1, [r4, #0]
 8003610:	680a      	ldr	r2, [r1, #0]
 8003612:	69e3      	ldr	r3, [r4, #28]
 8003614:	6a20      	ldr	r0, [r4, #32]
 8003616:	4303      	orrs	r3, r0
 8003618:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800361c:	4313      	orrs	r3, r2
 800361e:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003620:	6821      	ldr	r1, [r4, #0]
 8003622:	688a      	ldr	r2, [r1, #8]
 8003624:	6923      	ldr	r3, [r4, #16]
 8003626:	68e0      	ldr	r0, [r4, #12]
 8003628:	4303      	orrs	r3, r0
 800362a:	f422 4203 	bic.w	r2, r2, #33536	; 0x8300
 800362e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003632:	4313      	orrs	r3, r2
 8003634:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003636:	6821      	ldr	r1, [r4, #0]
 8003638:	68ca      	ldr	r2, [r1, #12]
 800363a:	6963      	ldr	r3, [r4, #20]
 800363c:	69a0      	ldr	r0, [r4, #24]
 800363e:	4303      	orrs	r3, r0
 8003640:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003644:	4313      	orrs	r3, r2
 8003646:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 8003648:	6822      	ldr	r2, [r4, #0]
 800364a:	6813      	ldr	r3, [r2, #0]
 800364c:	f043 0301 	orr.w	r3, r3, #1
 8003650:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003652:	2000      	movs	r0, #0
 8003654:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003656:	2320      	movs	r3, #32
 8003658:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800365c:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800365e:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 8003662:	bd38      	pop	{r3, r4, r5, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8003664:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8003668:	f7fe fbd0 	bl	8001e0c <HAL_I2C_MspInit>
 800366c:	e785      	b.n	800357a <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800366e:	4b1d      	ldr	r3, [pc, #116]	; (80036e4 <HAL_I2C_Init+0x17c>)
 8003670:	4298      	cmp	r0, r3
 8003672:	d89e      	bhi.n	80035b2 <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8003674:	2001      	movs	r0, #1
 8003676:	e7f4      	b.n	8003662 <HAL_I2C_Init+0xfa>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003678:	f44f 7596 	mov.w	r5, #300	; 0x12c
 800367c:	fb05 f303 	mul.w	r3, r5, r3
 8003680:	4d19      	ldr	r5, [pc, #100]	; (80036e8 <HAL_I2C_Init+0x180>)
 8003682:	fba5 5303 	umull	r5, r3, r5, r3
 8003686:	099b      	lsrs	r3, r3, #6
 8003688:	3301      	adds	r3, #1
 800368a:	e7a7      	b.n	80035dc <HAL_I2C_Init+0x74>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800368c:	68a3      	ldr	r3, [r4, #8]
 800368e:	b95b      	cbnz	r3, 80036a8 <HAL_I2C_Init+0x140>
 8003690:	3801      	subs	r0, #1
 8003692:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8003696:	fbb0 f3f3 	udiv	r3, r0, r3
 800369a:	3301      	adds	r3, #1
 800369c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036a0:	b193      	cbz	r3, 80036c8 <HAL_I2C_Init+0x160>
 80036a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036a6:	e7b0      	b.n	800360a <HAL_I2C_Init+0xa2>
 80036a8:	3801      	subs	r0, #1
 80036aa:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 80036ae:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80036b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80036b6:	3301      	adds	r3, #1
 80036b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036bc:	b133      	cbz	r3, 80036cc <HAL_I2C_Init+0x164>
 80036be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80036c2:	e7a2      	b.n	800360a <HAL_I2C_Init+0xa2>
 80036c4:	2304      	movs	r3, #4
 80036c6:	e7a0      	b.n	800360a <HAL_I2C_Init+0xa2>
 80036c8:	2301      	movs	r3, #1
 80036ca:	e79e      	b.n	800360a <HAL_I2C_Init+0xa2>
 80036cc:	2301      	movs	r3, #1
 80036ce:	e79c      	b.n	800360a <HAL_I2C_Init+0xa2>
    return HAL_ERROR;
 80036d0:	2001      	movs	r0, #1
}
 80036d2:	4770      	bx	lr
    return HAL_ERROR;
 80036d4:	2001      	movs	r0, #1
 80036d6:	e7c4      	b.n	8003662 <HAL_I2C_Init+0xfa>
 80036d8:	000186a0 	.word	0x000186a0
 80036dc:	001e847f 	.word	0x001e847f
 80036e0:	431bde83 	.word	0x431bde83
 80036e4:	003d08ff 	.word	0x003d08ff
 80036e8:	10624dd3 	.word	0x10624dd3

080036ec <HAL_I2C_Master_Transmit>:
{
 80036ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80036f0:	b085      	sub	sp, #20
 80036f2:	4604      	mov	r4, r0
 80036f4:	460f      	mov	r7, r1
 80036f6:	4691      	mov	r9, r2
 80036f8:	4698      	mov	r8, r3
 80036fa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 80036fc:	f7ff fa94 	bl	8002c28 <HAL_GetTick>
 8003700:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003702:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 8003706:	b2c0      	uxtb	r0, r0
 8003708:	2820      	cmp	r0, #32
 800370a:	d004      	beq.n	8003716 <HAL_I2C_Master_Transmit+0x2a>
    return HAL_BUSY;
 800370c:	2702      	movs	r7, #2
}
 800370e:	4638      	mov	r0, r7
 8003710:	b005      	add	sp, #20
 8003712:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003716:	9500      	str	r5, [sp, #0]
 8003718:	2319      	movs	r3, #25
 800371a:	2201      	movs	r2, #1
 800371c:	4971      	ldr	r1, [pc, #452]	; (80038e4 <HAL_I2C_Master_Transmit+0x1f8>)
 800371e:	4620      	mov	r0, r4
 8003720:	f7ff fcbf 	bl	80030a2 <I2C_WaitOnFlagUntilTimeout>
 8003724:	2800      	cmp	r0, #0
 8003726:	f040 80d7 	bne.w	80038d8 <HAL_I2C_Master_Transmit+0x1ec>
    __HAL_LOCK(hi2c);
 800372a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800372e:	2b01      	cmp	r3, #1
 8003730:	f000 80d4 	beq.w	80038dc <HAL_I2C_Master_Transmit+0x1f0>
 8003734:	2301      	movs	r3, #1
 8003736:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800373a:	6823      	ldr	r3, [r4, #0]
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	f012 0f01 	tst.w	r2, #1
 8003742:	d103      	bne.n	800374c <HAL_I2C_Master_Transmit+0x60>
      __HAL_I2C_ENABLE(hi2c);
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	f042 0201 	orr.w	r2, r2, #1
 800374a:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800374c:	6822      	ldr	r2, [r4, #0]
 800374e:	6813      	ldr	r3, [r2, #0]
 8003750:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003754:	6013      	str	r3, [r2, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003756:	2321      	movs	r3, #33	; 0x21
 8003758:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800375c:	2310      	movs	r3, #16
 800375e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003762:	2300      	movs	r3, #0
 8003764:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8003766:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 800376a:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800376e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003770:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003772:	4b5d      	ldr	r3, [pc, #372]	; (80038e8 <HAL_I2C_Master_Transmit+0x1fc>)
 8003774:	62e3      	str	r3, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003776:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003778:	2b08      	cmp	r3, #8
 800377a:	d00d      	beq.n	8003798 <HAL_I2C_Master_Transmit+0xac>
 800377c:	2b01      	cmp	r3, #1
 800377e:	d00b      	beq.n	8003798 <HAL_I2C_Master_Transmit+0xac>
 8003780:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003784:	d008      	beq.n	8003798 <HAL_I2C_Master_Transmit+0xac>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003786:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003788:	2b12      	cmp	r3, #18
 800378a:	d10a      	bne.n	80037a2 <HAL_I2C_Master_Transmit+0xb6>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800378c:	6822      	ldr	r2, [r4, #0]
 800378e:	6813      	ldr	r3, [r2, #0]
 8003790:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003794:	6013      	str	r3, [r2, #0]
 8003796:	e004      	b.n	80037a2 <HAL_I2C_Master_Transmit+0xb6>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003798:	6822      	ldr	r2, [r4, #0]
 800379a:	6813      	ldr	r3, [r2, #0]
 800379c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037a0:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80037a2:	9500      	str	r5, [sp, #0]
 80037a4:	4633      	mov	r3, r6
 80037a6:	2200      	movs	r2, #0
 80037a8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80037ac:	4620      	mov	r0, r4
 80037ae:	f7ff fc78 	bl	80030a2 <I2C_WaitOnFlagUntilTimeout>
 80037b2:	b9d0      	cbnz	r0, 80037ea <HAL_I2C_Master_Transmit+0xfe>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80037b4:	6923      	ldr	r3, [r4, #16]
 80037b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80037ba:	d120      	bne.n	80037fe <HAL_I2C_Master_Transmit+0x112>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80037bc:	6823      	ldr	r3, [r4, #0]
 80037be:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
 80037c2:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80037c4:	462b      	mov	r3, r5
 80037c6:	4632      	mov	r2, r6
 80037c8:	4948      	ldr	r1, [pc, #288]	; (80038ec <HAL_I2C_Master_Transmit+0x200>)
 80037ca:	4620      	mov	r0, r4
 80037cc:	f7ff fcac 	bl	8003128 <I2C_WaitOnMasterAddressFlagUntilTimeout>
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80037d0:	4607      	mov	r7, r0
 80037d2:	2800      	cmp	r0, #0
 80037d4:	f040 8084 	bne.w	80038e0 <HAL_I2C_Master_Transmit+0x1f4>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037d8:	2300      	movs	r3, #0
 80037da:	9303      	str	r3, [sp, #12]
 80037dc:	6823      	ldr	r3, [r4, #0]
 80037de:	695a      	ldr	r2, [r3, #20]
 80037e0:	9203      	str	r2, [sp, #12]
 80037e2:	699b      	ldr	r3, [r3, #24]
 80037e4:	9303      	str	r3, [sp, #12]
 80037e6:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 80037e8:	e02f      	b.n	800384a <HAL_I2C_Master_Transmit+0x15e>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80037ea:	6823      	ldr	r3, [r4, #0]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f413 7f80 	tst.w	r3, #256	; 0x100
 80037f2:	d002      	beq.n	80037fa <HAL_I2C_Master_Transmit+0x10e>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80037f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80037f8:	6423      	str	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 80037fa:	2701      	movs	r7, #1
 80037fc:	e787      	b.n	800370e <HAL_I2C_Master_Transmit+0x22>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80037fe:	6822      	ldr	r2, [r4, #0]
 8003800:	11fb      	asrs	r3, r7, #7
 8003802:	f003 0306 	and.w	r3, r3, #6
 8003806:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 800380a:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800380c:	462b      	mov	r3, r5
 800380e:	4632      	mov	r2, r6
 8003810:	4937      	ldr	r1, [pc, #220]	; (80038f0 <HAL_I2C_Master_Transmit+0x204>)
 8003812:	4620      	mov	r0, r4
 8003814:	f7ff fc88 	bl	8003128 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003818:	2800      	cmp	r0, #0
 800381a:	d1ee      	bne.n	80037fa <HAL_I2C_Master_Transmit+0x10e>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800381c:	6823      	ldr	r3, [r4, #0]
 800381e:	b2ff      	uxtb	r7, r7
 8003820:	611f      	str	r7, [r3, #16]
 8003822:	e7cf      	b.n	80037c4 <HAL_I2C_Master_Transmit+0xd8>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003824:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003826:	2b04      	cmp	r3, #4
 8003828:	d001      	beq.n	800382e <HAL_I2C_Master_Transmit+0x142>
        return HAL_ERROR;
 800382a:	2701      	movs	r7, #1
 800382c:	e76f      	b.n	800370e <HAL_I2C_Master_Transmit+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800382e:	6822      	ldr	r2, [r4, #0]
 8003830:	6813      	ldr	r3, [r2, #0]
 8003832:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003836:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 8003838:	2701      	movs	r7, #1
 800383a:	e768      	b.n	800370e <HAL_I2C_Master_Transmit+0x22>
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800383c:	462a      	mov	r2, r5
 800383e:	4631      	mov	r1, r6
 8003840:	4620      	mov	r0, r4
 8003842:	f7ff fe1f 	bl	8003484 <I2C_WaitOnBTFFlagUntilTimeout>
 8003846:	2800      	cmp	r0, #0
 8003848:	d12c      	bne.n	80038a4 <HAL_I2C_Master_Transmit+0x1b8>
    while (hi2c->XferSize > 0U)
 800384a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800384c:	2b00      	cmp	r3, #0
 800384e:	d035      	beq.n	80038bc <HAL_I2C_Master_Transmit+0x1d0>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003850:	462a      	mov	r2, r5
 8003852:	4631      	mov	r1, r6
 8003854:	4620      	mov	r0, r4
 8003856:	f7ff fcc4 	bl	80031e2 <I2C_WaitOnTXEFlagUntilTimeout>
 800385a:	2800      	cmp	r0, #0
 800385c:	d1e2      	bne.n	8003824 <HAL_I2C_Master_Transmit+0x138>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800385e:	6823      	ldr	r3, [r4, #0]
 8003860:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003862:	7812      	ldrb	r2, [r2, #0]
 8003864:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003866:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003868:	1c53      	adds	r3, r2, #1
 800386a:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800386c:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 800386e:	3901      	subs	r1, #1
 8003870:	b289      	uxth	r1, r1
 8003872:	8561      	strh	r1, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003874:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 8003876:	3901      	subs	r1, #1
 8003878:	b289      	uxth	r1, r1
 800387a:	8521      	strh	r1, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800387c:	6823      	ldr	r3, [r4, #0]
 800387e:	6958      	ldr	r0, [r3, #20]
 8003880:	f010 0f04 	tst.w	r0, #4
 8003884:	d0da      	beq.n	800383c <HAL_I2C_Master_Transmit+0x150>
 8003886:	2900      	cmp	r1, #0
 8003888:	d0d8      	beq.n	800383c <HAL_I2C_Master_Transmit+0x150>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800388a:	7852      	ldrb	r2, [r2, #1]
 800388c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800388e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003890:	3301      	adds	r3, #1
 8003892:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8003894:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003896:	3b01      	subs	r3, #1
 8003898:	b29b      	uxth	r3, r3
 800389a:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 800389c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800389e:	3b01      	subs	r3, #1
 80038a0:	8523      	strh	r3, [r4, #40]	; 0x28
 80038a2:	e7cb      	b.n	800383c <HAL_I2C_Master_Transmit+0x150>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80038a6:	2b04      	cmp	r3, #4
 80038a8:	d001      	beq.n	80038ae <HAL_I2C_Master_Transmit+0x1c2>
        return HAL_ERROR;
 80038aa:	2701      	movs	r7, #1
 80038ac:	e72f      	b.n	800370e <HAL_I2C_Master_Transmit+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038ae:	6822      	ldr	r2, [r4, #0]
 80038b0:	6813      	ldr	r3, [r2, #0]
 80038b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80038b6:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 80038b8:	2701      	movs	r7, #1
 80038ba:	e728      	b.n	800370e <HAL_I2C_Master_Transmit+0x22>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038bc:	6822      	ldr	r2, [r4, #0]
 80038be:	6813      	ldr	r3, [r2, #0]
 80038c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80038c4:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80038c6:	2320      	movs	r3, #32
 80038c8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80038cc:	2300      	movs	r3, #0
 80038ce:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 80038d2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 80038d6:	e71a      	b.n	800370e <HAL_I2C_Master_Transmit+0x22>
      return HAL_BUSY;
 80038d8:	2702      	movs	r7, #2
 80038da:	e718      	b.n	800370e <HAL_I2C_Master_Transmit+0x22>
    __HAL_LOCK(hi2c);
 80038dc:	2702      	movs	r7, #2
 80038de:	e716      	b.n	800370e <HAL_I2C_Master_Transmit+0x22>
      return HAL_ERROR;
 80038e0:	2701      	movs	r7, #1
 80038e2:	e714      	b.n	800370e <HAL_I2C_Master_Transmit+0x22>
 80038e4:	00100002 	.word	0x00100002
 80038e8:	ffff0000 	.word	0xffff0000
 80038ec:	00010002 	.word	0x00010002
 80038f0:	00010008 	.word	0x00010008

080038f4 <HAL_I2C_Master_Receive>:
{
 80038f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038f8:	b088      	sub	sp, #32
 80038fa:	4604      	mov	r4, r0
 80038fc:	460f      	mov	r7, r1
 80038fe:	4691      	mov	r9, r2
 8003900:	4698      	mov	r8, r3
 8003902:	9e10      	ldr	r6, [sp, #64]	; 0x40
  __IO uint32_t count = 0U;
 8003904:	2300      	movs	r3, #0
 8003906:	9307      	str	r3, [sp, #28]
  uint32_t tickstart = HAL_GetTick();
 8003908:	f7ff f98e 	bl	8002c28 <HAL_GetTick>
 800390c:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800390e:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 8003912:	b2c0      	uxtb	r0, r0
 8003914:	2820      	cmp	r0, #32
 8003916:	d004      	beq.n	8003922 <HAL_I2C_Master_Receive+0x2e>
    return HAL_BUSY;
 8003918:	2702      	movs	r7, #2
}
 800391a:	4638      	mov	r0, r7
 800391c:	b008      	add	sp, #32
 800391e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003922:	9500      	str	r5, [sp, #0]
 8003924:	2319      	movs	r3, #25
 8003926:	2201      	movs	r2, #1
 8003928:	498a      	ldr	r1, [pc, #552]	; (8003b54 <HAL_I2C_Master_Receive+0x260>)
 800392a:	4620      	mov	r0, r4
 800392c:	f7ff fbb9 	bl	80030a2 <I2C_WaitOnFlagUntilTimeout>
 8003930:	2800      	cmp	r0, #0
 8003932:	f040 81f2 	bne.w	8003d1a <HAL_I2C_Master_Receive+0x426>
    __HAL_LOCK(hi2c);
 8003936:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800393a:	2b01      	cmp	r3, #1
 800393c:	f000 81ef 	beq.w	8003d1e <HAL_I2C_Master_Receive+0x42a>
 8003940:	2301      	movs	r3, #1
 8003942:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003946:	6823      	ldr	r3, [r4, #0]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	f012 0f01 	tst.w	r2, #1
 800394e:	d103      	bne.n	8003958 <HAL_I2C_Master_Receive+0x64>
      __HAL_I2C_ENABLE(hi2c);
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	f042 0201 	orr.w	r2, r2, #1
 8003956:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003958:	6822      	ldr	r2, [r4, #0]
 800395a:	6813      	ldr	r3, [r2, #0]
 800395c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003960:	6013      	str	r3, [r2, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003962:	2322      	movs	r3, #34	; 0x22
 8003964:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003968:	2310      	movs	r3, #16
 800396a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800396e:	2300      	movs	r3, #0
 8003970:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8003972:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003976:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800397a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800397c:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800397e:	4b76      	ldr	r3, [pc, #472]	; (8003b58 <HAL_I2C_Master_Receive+0x264>)
 8003980:	62e3      	str	r3, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003982:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003984:	6821      	ldr	r1, [r4, #0]
 8003986:	680b      	ldr	r3, [r1, #0]
 8003988:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800398c:	600b      	str	r3, [r1, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800398e:	2a08      	cmp	r2, #8
 8003990:	d00d      	beq.n	80039ae <HAL_I2C_Master_Receive+0xba>
 8003992:	2a01      	cmp	r2, #1
 8003994:	d00b      	beq.n	80039ae <HAL_I2C_Master_Receive+0xba>
 8003996:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 800399a:	d008      	beq.n	80039ae <HAL_I2C_Master_Receive+0xba>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800399c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800399e:	2b11      	cmp	r3, #17
 80039a0:	d10a      	bne.n	80039b8 <HAL_I2C_Master_Receive+0xc4>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039a2:	6822      	ldr	r2, [r4, #0]
 80039a4:	6813      	ldr	r3, [r2, #0]
 80039a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039aa:	6013      	str	r3, [r2, #0]
 80039ac:	e004      	b.n	80039b8 <HAL_I2C_Master_Receive+0xc4>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039ae:	6822      	ldr	r2, [r4, #0]
 80039b0:	6813      	ldr	r3, [r2, #0]
 80039b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039b6:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80039b8:	9500      	str	r5, [sp, #0]
 80039ba:	4633      	mov	r3, r6
 80039bc:	2200      	movs	r2, #0
 80039be:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80039c2:	4620      	mov	r0, r4
 80039c4:	f7ff fb6d 	bl	80030a2 <I2C_WaitOnFlagUntilTimeout>
 80039c8:	bb58      	cbnz	r0, 8003a22 <HAL_I2C_Master_Receive+0x12e>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80039ca:	6923      	ldr	r3, [r4, #16]
 80039cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039d0:	d130      	bne.n	8003a34 <HAL_I2C_Master_Receive+0x140>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80039d2:	6823      	ldr	r3, [r4, #0]
 80039d4:	f047 0701 	orr.w	r7, r7, #1
 80039d8:	b2ff      	uxtb	r7, r7
 80039da:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80039dc:	462b      	mov	r3, r5
 80039de:	4632      	mov	r2, r6
 80039e0:	495e      	ldr	r1, [pc, #376]	; (8003b5c <HAL_I2C_Master_Receive+0x268>)
 80039e2:	4620      	mov	r0, r4
 80039e4:	f7ff fba0 	bl	8003128 <I2C_WaitOnMasterAddressFlagUntilTimeout>
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80039e8:	4607      	mov	r7, r0
 80039ea:	2800      	cmp	r0, #0
 80039ec:	f040 8199 	bne.w	8003d22 <HAL_I2C_Master_Receive+0x42e>
    if (hi2c->XferSize == 0U)
 80039f0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d15c      	bne.n	8003ab0 <HAL_I2C_Master_Receive+0x1bc>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039f6:	9302      	str	r3, [sp, #8]
 80039f8:	6823      	ldr	r3, [r4, #0]
 80039fa:	695a      	ldr	r2, [r3, #20]
 80039fc:	9202      	str	r2, [sp, #8]
 80039fe:	699a      	ldr	r2, [r3, #24]
 8003a00:	9202      	str	r2, [sp, #8]
 8003a02:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a0a:	601a      	str	r2, [r3, #0]
    while (hi2c->XferSize > 0U)
 8003a0c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	f000 817a 	beq.w	8003d08 <HAL_I2C_Master_Receive+0x414>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a14:	f8df 8148 	ldr.w	r8, [pc, #328]	; 8003b60 <HAL_I2C_Master_Receive+0x26c>
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003a18:	f8df a148 	ldr.w	sl, [pc, #328]	; 8003b64 <HAL_I2C_Master_Receive+0x270>
 8003a1c:	f8df 9148 	ldr.w	r9, [pc, #328]	; 8003b68 <HAL_I2C_Master_Receive+0x274>
 8003a20:	e138      	b.n	8003c94 <HAL_I2C_Master_Receive+0x3a0>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a22:	6823      	ldr	r3, [r4, #0]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003a2a:	d012      	beq.n	8003a52 <HAL_I2C_Master_Receive+0x15e>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a30:	6423      	str	r3, [r4, #64]	; 0x40
 8003a32:	e00e      	b.n	8003a52 <HAL_I2C_Master_Receive+0x15e>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003a34:	ea4f 18e7 	mov.w	r8, r7, asr #7
 8003a38:	f008 0806 	and.w	r8, r8, #6
 8003a3c:	6823      	ldr	r3, [r4, #0]
 8003a3e:	f048 02f0 	orr.w	r2, r8, #240	; 0xf0
 8003a42:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003a44:	462b      	mov	r3, r5
 8003a46:	4632      	mov	r2, r6
 8003a48:	4948      	ldr	r1, [pc, #288]	; (8003b6c <HAL_I2C_Master_Receive+0x278>)
 8003a4a:	4620      	mov	r0, r4
 8003a4c:	f7ff fb6c 	bl	8003128 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a50:	b108      	cbz	r0, 8003a56 <HAL_I2C_Master_Receive+0x162>
      return HAL_ERROR;
 8003a52:	2701      	movs	r7, #1
 8003a54:	e761      	b.n	800391a <HAL_I2C_Master_Receive+0x26>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003a56:	6823      	ldr	r3, [r4, #0]
 8003a58:	b2ff      	uxtb	r7, r7
 8003a5a:	611f      	str	r7, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a5c:	462b      	mov	r3, r5
 8003a5e:	4632      	mov	r2, r6
 8003a60:	493e      	ldr	r1, [pc, #248]	; (8003b5c <HAL_I2C_Master_Receive+0x268>)
 8003a62:	4620      	mov	r0, r4
 8003a64:	f7ff fb60 	bl	8003128 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a68:	2800      	cmp	r0, #0
 8003a6a:	d1f2      	bne.n	8003a52 <HAL_I2C_Master_Receive+0x15e>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	9206      	str	r2, [sp, #24]
 8003a70:	6823      	ldr	r3, [r4, #0]
 8003a72:	6959      	ldr	r1, [r3, #20]
 8003a74:	9106      	str	r1, [sp, #24]
 8003a76:	6999      	ldr	r1, [r3, #24]
 8003a78:	9106      	str	r1, [sp, #24]
 8003a7a:	9906      	ldr	r1, [sp, #24]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a7c:	6819      	ldr	r1, [r3, #0]
 8003a7e:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8003a82:	6019      	str	r1, [r3, #0]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a84:	9500      	str	r5, [sp, #0]
 8003a86:	4633      	mov	r3, r6
 8003a88:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003a8c:	4620      	mov	r0, r4
 8003a8e:	f7ff fb08 	bl	80030a2 <I2C_WaitOnFlagUntilTimeout>
 8003a92:	b920      	cbnz	r0, 8003a9e <HAL_I2C_Master_Receive+0x1aa>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003a94:	6822      	ldr	r2, [r4, #0]
 8003a96:	f048 03f1 	orr.w	r3, r8, #241	; 0xf1
 8003a9a:	6113      	str	r3, [r2, #16]
 8003a9c:	e79e      	b.n	80039dc <HAL_I2C_Master_Receive+0xe8>
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a9e:	6823      	ldr	r3, [r4, #0]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003aa6:	d0d4      	beq.n	8003a52 <HAL_I2C_Master_Receive+0x15e>
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003aa8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003aac:	6423      	str	r3, [r4, #64]	; 0x40
 8003aae:	e7d0      	b.n	8003a52 <HAL_I2C_Master_Receive+0x15e>
    else if (hi2c->XferSize == 1U)
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d00f      	beq.n	8003ad4 <HAL_I2C_Master_Receive+0x1e0>
    else if (hi2c->XferSize == 2U)
 8003ab4:	2b02      	cmp	r3, #2
 8003ab6:	d021      	beq.n	8003afc <HAL_I2C_Master_Receive+0x208>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ab8:	6822      	ldr	r2, [r4, #0]
 8003aba:	6813      	ldr	r3, [r2, #0]
 8003abc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ac0:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	9305      	str	r3, [sp, #20]
 8003ac6:	6823      	ldr	r3, [r4, #0]
 8003ac8:	695a      	ldr	r2, [r3, #20]
 8003aca:	9205      	str	r2, [sp, #20]
 8003acc:	699b      	ldr	r3, [r3, #24]
 8003ace:	9305      	str	r3, [sp, #20]
 8003ad0:	9b05      	ldr	r3, [sp, #20]
 8003ad2:	e79b      	b.n	8003a0c <HAL_I2C_Master_Receive+0x118>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ad4:	6822      	ldr	r2, [r4, #0]
 8003ad6:	6813      	ldr	r3, [r2, #0]
 8003ad8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003adc:	6013      	str	r3, [r2, #0]
 8003ade:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	9303      	str	r3, [sp, #12]
 8003ae4:	6823      	ldr	r3, [r4, #0]
 8003ae6:	695a      	ldr	r2, [r3, #20]
 8003ae8:	9203      	str	r2, [sp, #12]
 8003aea:	699a      	ldr	r2, [r3, #24]
 8003aec:	9203      	str	r2, [sp, #12]
 8003aee:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003af6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003af8:	b662      	cpsie	i
}
 8003afa:	e787      	b.n	8003a0c <HAL_I2C_Master_Receive+0x118>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003afc:	6822      	ldr	r2, [r4, #0]
 8003afe:	6813      	ldr	r3, [r2, #0]
 8003b00:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003b04:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003b06:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b08:	2300      	movs	r3, #0
 8003b0a:	9304      	str	r3, [sp, #16]
 8003b0c:	6823      	ldr	r3, [r4, #0]
 8003b0e:	695a      	ldr	r2, [r3, #20]
 8003b10:	9204      	str	r2, [sp, #16]
 8003b12:	699a      	ldr	r2, [r3, #24]
 8003b14:	9204      	str	r2, [sp, #16]
 8003b16:	9a04      	ldr	r2, [sp, #16]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b1e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003b20:	b662      	cpsie	i
}
 8003b22:	e773      	b.n	8003a0c <HAL_I2C_Master_Receive+0x118>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b24:	462a      	mov	r2, r5
 8003b26:	4631      	mov	r1, r6
 8003b28:	4620      	mov	r0, r4
 8003b2a:	f7ff fcda 	bl	80034e2 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003b2e:	2800      	cmp	r0, #0
 8003b30:	f040 80f9 	bne.w	8003d26 <HAL_I2C_Master_Receive+0x432>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b34:	6823      	ldr	r3, [r4, #0]
 8003b36:	691a      	ldr	r2, [r3, #16]
 8003b38:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003b3a:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8003b3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003b3e:	3301      	adds	r3, #1
 8003b40:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8003b42:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003b44:	3b01      	subs	r3, #1
 8003b46:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8003b48:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003b4a:	3b01      	subs	r3, #1
 8003b4c:	b29b      	uxth	r3, r3
 8003b4e:	8563      	strh	r3, [r4, #42]	; 0x2a
 8003b50:	e09d      	b.n	8003c8e <HAL_I2C_Master_Receive+0x39a>
 8003b52:	bf00      	nop
 8003b54:	00100002 	.word	0x00100002
 8003b58:	ffff0000 	.word	0xffff0000
 8003b5c:	00010002 	.word	0x00010002
 8003b60:	00010004 	.word	0x00010004
 8003b64:	20000000 	.word	0x20000000
 8003b68:	14f8b589 	.word	0x14f8b589
 8003b6c:	00010008 	.word	0x00010008
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b70:	9500      	str	r5, [sp, #0]
 8003b72:	4633      	mov	r3, r6
 8003b74:	2200      	movs	r2, #0
 8003b76:	4641      	mov	r1, r8
 8003b78:	4620      	mov	r0, r4
 8003b7a:	f7ff fa92 	bl	80030a2 <I2C_WaitOnFlagUntilTimeout>
 8003b7e:	2800      	cmp	r0, #0
 8003b80:	f040 80d5 	bne.w	8003d2e <HAL_I2C_Master_Receive+0x43a>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b84:	6822      	ldr	r2, [r4, #0]
 8003b86:	6813      	ldr	r3, [r2, #0]
 8003b88:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b8c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003b8e:	b672      	cpsid	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b90:	6823      	ldr	r3, [r4, #0]
 8003b92:	691a      	ldr	r2, [r3, #16]
 8003b94:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003b96:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8003b98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003b9a:	3301      	adds	r3, #1
 8003b9c:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8003b9e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003ba0:	3b01      	subs	r3, #1
 8003ba2:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8003ba4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003ba6:	3b01      	subs	r3, #1
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	8563      	strh	r3, [r4, #42]	; 0x2a
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003bac:	f8da 3000 	ldr.w	r3, [sl]
 8003bb0:	08db      	lsrs	r3, r3, #3
 8003bb2:	fba9 2303 	umull	r2, r3, r9, r3
 8003bb6:	0a1b      	lsrs	r3, r3, #8
 8003bb8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003bbc:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8003bc0:	9307      	str	r3, [sp, #28]
            count--;
 8003bc2:	9907      	ldr	r1, [sp, #28]
 8003bc4:	3901      	subs	r1, #1
 8003bc6:	9107      	str	r1, [sp, #28]
            if (count == 0U)
 8003bc8:	9b07      	ldr	r3, [sp, #28]
 8003bca:	b333      	cbz	r3, 8003c1a <HAL_I2C_Master_Receive+0x326>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003bcc:	6823      	ldr	r3, [r4, #0]
 8003bce:	695a      	ldr	r2, [r3, #20]
 8003bd0:	f012 0f04 	tst.w	r2, #4
 8003bd4:	d0f5      	beq.n	8003bc2 <HAL_I2C_Master_Receive+0x2ce>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bdc:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bde:	6823      	ldr	r3, [r4, #0]
 8003be0:	691a      	ldr	r2, [r3, #16]
 8003be2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003be4:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8003be6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003be8:	3301      	adds	r3, #1
 8003bea:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8003bec:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003bee:	3b01      	subs	r3, #1
 8003bf0:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8003bf2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003bf4:	3b01      	subs	r3, #1
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	8563      	strh	r3, [r4, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003bfa:	b662      	cpsie	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bfc:	6823      	ldr	r3, [r4, #0]
 8003bfe:	691a      	ldr	r2, [r3, #16]
 8003c00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003c02:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8003c04:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003c06:	3301      	adds	r3, #1
 8003c08:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8003c0a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003c0c:	3b01      	subs	r3, #1
 8003c0e:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8003c10:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003c12:	3b01      	subs	r3, #1
 8003c14:	b29b      	uxth	r3, r3
 8003c16:	8563      	strh	r3, [r4, #42]	; 0x2a
 8003c18:	e039      	b.n	8003c8e <HAL_I2C_Master_Receive+0x39a>
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003c1a:	6323      	str	r3, [r4, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003c1c:	2220      	movs	r2, #32
 8003c1e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c22:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c26:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003c28:	f042 0220 	orr.w	r2, r2, #32
 8003c2c:	6422      	str	r2, [r4, #64]	; 0x40
 8003c2e:	b662      	cpsie	i
              __HAL_UNLOCK(hi2c);
 8003c30:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
              return HAL_ERROR;
 8003c34:	2701      	movs	r7, #1
 8003c36:	e670      	b.n	800391a <HAL_I2C_Master_Receive+0x26>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c38:	462a      	mov	r2, r5
 8003c3a:	4631      	mov	r1, r6
 8003c3c:	4620      	mov	r0, r4
 8003c3e:	f7ff fc50 	bl	80034e2 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003c42:	2800      	cmp	r0, #0
 8003c44:	d175      	bne.n	8003d32 <HAL_I2C_Master_Receive+0x43e>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c46:	6823      	ldr	r3, [r4, #0]
 8003c48:	691a      	ldr	r2, [r3, #16]
 8003c4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003c4c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003c4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003c50:	3301      	adds	r3, #1
 8003c52:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8003c54:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003c56:	3b01      	subs	r3, #1
 8003c58:	b29b      	uxth	r3, r3
 8003c5a:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8003c5c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003c5e:	3a01      	subs	r2, #1
 8003c60:	b292      	uxth	r2, r2
 8003c62:	8562      	strh	r2, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003c64:	6822      	ldr	r2, [r4, #0]
 8003c66:	6951      	ldr	r1, [r2, #20]
 8003c68:	f011 0f04 	tst.w	r1, #4
 8003c6c:	d00f      	beq.n	8003c8e <HAL_I2C_Master_Receive+0x39a>
          if (hi2c->XferSize == 3U)
 8003c6e:	2b03      	cmp	r3, #3
 8003c70:	d045      	beq.n	8003cfe <HAL_I2C_Master_Receive+0x40a>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c72:	6823      	ldr	r3, [r4, #0]
 8003c74:	691a      	ldr	r2, [r3, #16]
 8003c76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003c78:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8003c7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003c7c:	3301      	adds	r3, #1
 8003c7e:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8003c80:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003c82:	3b01      	subs	r3, #1
 8003c84:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8003c86:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003c88:	3b01      	subs	r3, #1
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003c8e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d039      	beq.n	8003d08 <HAL_I2C_Master_Receive+0x414>
      if (hi2c->XferSize <= 3U)
 8003c94:	2b03      	cmp	r3, #3
 8003c96:	d8cf      	bhi.n	8003c38 <HAL_I2C_Master_Receive+0x344>
        if (hi2c->XferSize == 1U)
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	f43f af43 	beq.w	8003b24 <HAL_I2C_Master_Receive+0x230>
        else if (hi2c->XferSize == 2U)
 8003c9e:	2b02      	cmp	r3, #2
 8003ca0:	f47f af66 	bne.w	8003b70 <HAL_I2C_Master_Receive+0x27c>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ca4:	9500      	str	r5, [sp, #0]
 8003ca6:	4633      	mov	r3, r6
 8003ca8:	2200      	movs	r2, #0
 8003caa:	4641      	mov	r1, r8
 8003cac:	4620      	mov	r0, r4
 8003cae:	f7ff f9f8 	bl	80030a2 <I2C_WaitOnFlagUntilTimeout>
 8003cb2:	2800      	cmp	r0, #0
 8003cb4:	d139      	bne.n	8003d2a <HAL_I2C_Master_Receive+0x436>
  __ASM volatile ("cpsid i" : : : "memory");
 8003cb6:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cb8:	6822      	ldr	r2, [r4, #0]
 8003cba:	6813      	ldr	r3, [r2, #0]
 8003cbc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003cc0:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cc2:	6823      	ldr	r3, [r4, #0]
 8003cc4:	691a      	ldr	r2, [r3, #16]
 8003cc6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003cc8:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8003cca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003ccc:	3301      	adds	r3, #1
 8003cce:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8003cd0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003cd2:	3b01      	subs	r3, #1
 8003cd4:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8003cd6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003cd8:	3b01      	subs	r3, #1
 8003cda:	b29b      	uxth	r3, r3
 8003cdc:	8563      	strh	r3, [r4, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003cde:	b662      	cpsie	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ce0:	6823      	ldr	r3, [r4, #0]
 8003ce2:	691a      	ldr	r2, [r3, #16]
 8003ce4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003ce6:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8003ce8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003cea:	3301      	adds	r3, #1
 8003cec:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8003cee:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003cf0:	3b01      	subs	r3, #1
 8003cf2:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8003cf4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003cf6:	3b01      	subs	r3, #1
 8003cf8:	b29b      	uxth	r3, r3
 8003cfa:	8563      	strh	r3, [r4, #42]	; 0x2a
 8003cfc:	e7c7      	b.n	8003c8e <HAL_I2C_Master_Receive+0x39a>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cfe:	6813      	ldr	r3, [r2, #0]
 8003d00:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d04:	6013      	str	r3, [r2, #0]
 8003d06:	e7b4      	b.n	8003c72 <HAL_I2C_Master_Receive+0x37e>
    hi2c->State = HAL_I2C_STATE_READY;
 8003d08:	2320      	movs	r3, #32
 8003d0a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8003d14:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8003d18:	e5ff      	b.n	800391a <HAL_I2C_Master_Receive+0x26>
      return HAL_BUSY;
 8003d1a:	2702      	movs	r7, #2
 8003d1c:	e5fd      	b.n	800391a <HAL_I2C_Master_Receive+0x26>
    __HAL_LOCK(hi2c);
 8003d1e:	2702      	movs	r7, #2
 8003d20:	e5fb      	b.n	800391a <HAL_I2C_Master_Receive+0x26>
      return HAL_ERROR;
 8003d22:	2701      	movs	r7, #1
 8003d24:	e5f9      	b.n	800391a <HAL_I2C_Master_Receive+0x26>
            return HAL_ERROR;
 8003d26:	2701      	movs	r7, #1
 8003d28:	e5f7      	b.n	800391a <HAL_I2C_Master_Receive+0x26>
            return HAL_ERROR;
 8003d2a:	2701      	movs	r7, #1
 8003d2c:	e5f5      	b.n	800391a <HAL_I2C_Master_Receive+0x26>
            return HAL_ERROR;
 8003d2e:	2701      	movs	r7, #1
 8003d30:	e5f3      	b.n	800391a <HAL_I2C_Master_Receive+0x26>
          return HAL_ERROR;
 8003d32:	2701      	movs	r7, #1
 8003d34:	e5f1      	b.n	800391a <HAL_I2C_Master_Receive+0x26>
 8003d36:	bf00      	nop

08003d38 <HAL_I2C_Mem_Write>:
{
 8003d38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003d3c:	b083      	sub	sp, #12
 8003d3e:	4604      	mov	r4, r0
 8003d40:	460f      	mov	r7, r1
 8003d42:	4690      	mov	r8, r2
 8003d44:	4699      	mov	r9, r3
 8003d46:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 8003d48:	f7fe ff6e 	bl	8002c28 <HAL_GetTick>
 8003d4c:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d4e:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 8003d52:	b2c0      	uxtb	r0, r0
 8003d54:	2820      	cmp	r0, #32
 8003d56:	d003      	beq.n	8003d60 <HAL_I2C_Mem_Write+0x28>
    return HAL_BUSY;
 8003d58:	2002      	movs	r0, #2
}
 8003d5a:	b003      	add	sp, #12
 8003d5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d60:	9500      	str	r5, [sp, #0]
 8003d62:	2319      	movs	r3, #25
 8003d64:	2201      	movs	r2, #1
 8003d66:	494d      	ldr	r1, [pc, #308]	; (8003e9c <HAL_I2C_Mem_Write+0x164>)
 8003d68:	4620      	mov	r0, r4
 8003d6a:	f7ff f99a 	bl	80030a2 <I2C_WaitOnFlagUntilTimeout>
 8003d6e:	2800      	cmp	r0, #0
 8003d70:	f040 808d 	bne.w	8003e8e <HAL_I2C_Mem_Write+0x156>
    __HAL_LOCK(hi2c);
 8003d74:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	f000 808a 	beq.w	8003e92 <HAL_I2C_Mem_Write+0x15a>
 8003d7e:	2301      	movs	r3, #1
 8003d80:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d84:	6823      	ldr	r3, [r4, #0]
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	f012 0f01 	tst.w	r2, #1
 8003d8c:	d103      	bne.n	8003d96 <HAL_I2C_Mem_Write+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	f042 0201 	orr.w	r2, r2, #1
 8003d94:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d96:	6822      	ldr	r2, [r4, #0]
 8003d98:	6813      	ldr	r3, [r2, #0]
 8003d9a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d9e:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003da0:	2321      	movs	r3, #33	; 0x21
 8003da2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003da6:	2340      	movs	r3, #64	; 0x40
 8003da8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003dac:	2300      	movs	r3, #0
 8003dae:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8003db0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003db2:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003db4:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8003db8:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003dba:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003dbc:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003dbe:	4b38      	ldr	r3, [pc, #224]	; (8003ea0 <HAL_I2C_Mem_Write+0x168>)
 8003dc0:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003dc2:	9501      	str	r5, [sp, #4]
 8003dc4:	9600      	str	r6, [sp, #0]
 8003dc6:	464b      	mov	r3, r9
 8003dc8:	4642      	mov	r2, r8
 8003dca:	4639      	mov	r1, r7
 8003dcc:	4620      	mov	r0, r4
 8003dce:	f7ff fa37 	bl	8003240 <I2C_RequestMemoryWrite>
 8003dd2:	2800      	cmp	r0, #0
 8003dd4:	d15f      	bne.n	8003e96 <HAL_I2C_Mem_Write+0x15e>
    while (hi2c->XferSize > 0U)
 8003dd6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003dd8:	b9d3      	cbnz	r3, 8003e10 <HAL_I2C_Mem_Write+0xd8>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003dda:	462a      	mov	r2, r5
 8003ddc:	4631      	mov	r1, r6
 8003dde:	4620      	mov	r0, r4
 8003de0:	f7ff fb50 	bl	8003484 <I2C_WaitOnBTFFlagUntilTimeout>
 8003de4:	2800      	cmp	r0, #0
 8003de6:	d044      	beq.n	8003e72 <HAL_I2C_Mem_Write+0x13a>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003de8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003dea:	2b04      	cmp	r3, #4
 8003dec:	d03a      	beq.n	8003e64 <HAL_I2C_Mem_Write+0x12c>
      return HAL_ERROR;
 8003dee:	2001      	movs	r0, #1
 8003df0:	e7b3      	b.n	8003d5a <HAL_I2C_Mem_Write+0x22>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003df2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003df4:	2b04      	cmp	r3, #4
 8003df6:	d001      	beq.n	8003dfc <HAL_I2C_Mem_Write+0xc4>
        return HAL_ERROR;
 8003df8:	2001      	movs	r0, #1
 8003dfa:	e7ae      	b.n	8003d5a <HAL_I2C_Mem_Write+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dfc:	6822      	ldr	r2, [r4, #0]
 8003dfe:	6813      	ldr	r3, [r2, #0]
 8003e00:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e04:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 8003e06:	2001      	movs	r0, #1
 8003e08:	e7a7      	b.n	8003d5a <HAL_I2C_Mem_Write+0x22>
    while (hi2c->XferSize > 0U)
 8003e0a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d0e4      	beq.n	8003dda <HAL_I2C_Mem_Write+0xa2>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e10:	462a      	mov	r2, r5
 8003e12:	4631      	mov	r1, r6
 8003e14:	4620      	mov	r0, r4
 8003e16:	f7ff f9e4 	bl	80031e2 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e1a:	2800      	cmp	r0, #0
 8003e1c:	d1e9      	bne.n	8003df2 <HAL_I2C_Mem_Write+0xba>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e1e:	6823      	ldr	r3, [r4, #0]
 8003e20:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003e22:	7812      	ldrb	r2, [r2, #0]
 8003e24:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003e26:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003e28:	1c43      	adds	r3, r0, #1
 8003e2a:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8003e2c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003e2e:	3b01      	subs	r3, #1
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8003e34:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8003e36:	3901      	subs	r1, #1
 8003e38:	b289      	uxth	r1, r1
 8003e3a:	8561      	strh	r1, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003e3c:	6822      	ldr	r2, [r4, #0]
 8003e3e:	6951      	ldr	r1, [r2, #20]
 8003e40:	f011 0f04 	tst.w	r1, #4
 8003e44:	d0e1      	beq.n	8003e0a <HAL_I2C_Mem_Write+0xd2>
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d0c7      	beq.n	8003dda <HAL_I2C_Mem_Write+0xa2>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e4a:	7843      	ldrb	r3, [r0, #1]
 8003e4c:	6113      	str	r3, [r2, #16]
        hi2c->pBuffPtr++;
 8003e4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003e50:	3301      	adds	r3, #1
 8003e52:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8003e54:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003e56:	3b01      	subs	r3, #1
 8003e58:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8003e5a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003e5c:	3b01      	subs	r3, #1
 8003e5e:	b29b      	uxth	r3, r3
 8003e60:	8563      	strh	r3, [r4, #42]	; 0x2a
 8003e62:	e7d2      	b.n	8003e0a <HAL_I2C_Mem_Write+0xd2>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e64:	6822      	ldr	r2, [r4, #0]
 8003e66:	6813      	ldr	r3, [r2, #0]
 8003e68:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e6c:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 8003e6e:	2001      	movs	r0, #1
 8003e70:	e773      	b.n	8003d5a <HAL_I2C_Mem_Write+0x22>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e72:	6822      	ldr	r2, [r4, #0]
 8003e74:	6813      	ldr	r3, [r2, #0]
 8003e76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e7a:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8003e7c:	2320      	movs	r3, #32
 8003e7e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e82:	2300      	movs	r3, #0
 8003e84:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8003e88:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8003e8c:	e765      	b.n	8003d5a <HAL_I2C_Mem_Write+0x22>
      return HAL_BUSY;
 8003e8e:	2002      	movs	r0, #2
 8003e90:	e763      	b.n	8003d5a <HAL_I2C_Mem_Write+0x22>
    __HAL_LOCK(hi2c);
 8003e92:	2002      	movs	r0, #2
 8003e94:	e761      	b.n	8003d5a <HAL_I2C_Mem_Write+0x22>
      return HAL_ERROR;
 8003e96:	2001      	movs	r0, #1
 8003e98:	e75f      	b.n	8003d5a <HAL_I2C_Mem_Write+0x22>
 8003e9a:	bf00      	nop
 8003e9c:	00100002 	.word	0x00100002
 8003ea0:	ffff0000 	.word	0xffff0000

08003ea4 <HAL_I2C_Mem_Read>:
{
 8003ea4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ea8:	b088      	sub	sp, #32
 8003eaa:	4604      	mov	r4, r0
 8003eac:	460f      	mov	r7, r1
 8003eae:	4690      	mov	r8, r2
 8003eb0:	4699      	mov	r9, r3
 8003eb2:	9e12      	ldr	r6, [sp, #72]	; 0x48
  __IO uint32_t count = 0U;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	9307      	str	r3, [sp, #28]
  uint32_t tickstart = HAL_GetTick();
 8003eb8:	f7fe feb6 	bl	8002c28 <HAL_GetTick>
 8003ebc:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ebe:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 8003ec2:	b2c0      	uxtb	r0, r0
 8003ec4:	2820      	cmp	r0, #32
 8003ec6:	d004      	beq.n	8003ed2 <HAL_I2C_Mem_Read+0x2e>
    return HAL_BUSY;
 8003ec8:	2702      	movs	r7, #2
}
 8003eca:	4638      	mov	r0, r7
 8003ecc:	b008      	add	sp, #32
 8003ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ed2:	9500      	str	r5, [sp, #0]
 8003ed4:	2319      	movs	r3, #25
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	4983      	ldr	r1, [pc, #524]	; (80040e8 <HAL_I2C_Mem_Read+0x244>)
 8003eda:	4620      	mov	r0, r4
 8003edc:	f7ff f8e1 	bl	80030a2 <I2C_WaitOnFlagUntilTimeout>
 8003ee0:	2800      	cmp	r0, #0
 8003ee2:	f040 8172 	bne.w	80041ca <HAL_I2C_Mem_Read+0x326>
    __HAL_LOCK(hi2c);
 8003ee6:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	f000 816f 	beq.w	80041ce <HAL_I2C_Mem_Read+0x32a>
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ef6:	6823      	ldr	r3, [r4, #0]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	f012 0f01 	tst.w	r2, #1
 8003efe:	d103      	bne.n	8003f08 <HAL_I2C_Mem_Read+0x64>
      __HAL_I2C_ENABLE(hi2c);
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	f042 0201 	orr.w	r2, r2, #1
 8003f06:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f08:	6822      	ldr	r2, [r4, #0]
 8003f0a:	6813      	ldr	r3, [r2, #0]
 8003f0c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f10:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003f12:	2322      	movs	r3, #34	; 0x22
 8003f14:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003f18:	2340      	movs	r3, #64	; 0x40
 8003f1a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8003f22:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003f24:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003f26:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8003f2a:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f2c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003f2e:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f30:	4b6e      	ldr	r3, [pc, #440]	; (80040ec <HAL_I2C_Mem_Read+0x248>)
 8003f32:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003f34:	9501      	str	r5, [sp, #4]
 8003f36:	9600      	str	r6, [sp, #0]
 8003f38:	464b      	mov	r3, r9
 8003f3a:	4642      	mov	r2, r8
 8003f3c:	4639      	mov	r1, r7
 8003f3e:	4620      	mov	r0, r4
 8003f40:	f7ff f9ee 	bl	8003320 <I2C_RequestMemoryRead>
 8003f44:	4607      	mov	r7, r0
 8003f46:	2800      	cmp	r0, #0
 8003f48:	f040 8143 	bne.w	80041d2 <HAL_I2C_Mem_Read+0x32e>
    if (hi2c->XferSize == 0U)
 8003f4c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003f4e:	b9ab      	cbnz	r3, 8003f7c <HAL_I2C_Mem_Read+0xd8>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f50:	9303      	str	r3, [sp, #12]
 8003f52:	6823      	ldr	r3, [r4, #0]
 8003f54:	695a      	ldr	r2, [r3, #20]
 8003f56:	9203      	str	r2, [sp, #12]
 8003f58:	699a      	ldr	r2, [r3, #24]
 8003f5a:	9203      	str	r2, [sp, #12]
 8003f5c:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f64:	601a      	str	r2, [r3, #0]
    while (hi2c->XferSize > 0U)
 8003f66:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	f000 8125 	beq.w	80041b8 <HAL_I2C_Mem_Read+0x314>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f6e:	f8df 8180 	ldr.w	r8, [pc, #384]	; 80040f0 <HAL_I2C_Mem_Read+0x24c>
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003f72:	f8df a180 	ldr.w	sl, [pc, #384]	; 80040f4 <HAL_I2C_Mem_Read+0x250>
 8003f76:	f8df 9180 	ldr.w	r9, [pc, #384]	; 80040f8 <HAL_I2C_Mem_Read+0x254>
 8003f7a:	e0e8      	b.n	800414e <HAL_I2C_Mem_Read+0x2aa>
    else if (hi2c->XferSize == 1U)
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d00f      	beq.n	8003fa0 <HAL_I2C_Mem_Read+0xfc>
    else if (hi2c->XferSize == 2U)
 8003f80:	2b02      	cmp	r3, #2
 8003f82:	d021      	beq.n	8003fc8 <HAL_I2C_Mem_Read+0x124>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f84:	6822      	ldr	r2, [r4, #0]
 8003f86:	6813      	ldr	r3, [r2, #0]
 8003f88:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003f8c:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f8e:	2300      	movs	r3, #0
 8003f90:	9306      	str	r3, [sp, #24]
 8003f92:	6823      	ldr	r3, [r4, #0]
 8003f94:	695a      	ldr	r2, [r3, #20]
 8003f96:	9206      	str	r2, [sp, #24]
 8003f98:	699b      	ldr	r3, [r3, #24]
 8003f9a:	9306      	str	r3, [sp, #24]
 8003f9c:	9b06      	ldr	r3, [sp, #24]
 8003f9e:	e7e2      	b.n	8003f66 <HAL_I2C_Mem_Read+0xc2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fa0:	6822      	ldr	r2, [r4, #0]
 8003fa2:	6813      	ldr	r3, [r2, #0]
 8003fa4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003fa8:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003faa:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fac:	2300      	movs	r3, #0
 8003fae:	9304      	str	r3, [sp, #16]
 8003fb0:	6823      	ldr	r3, [r4, #0]
 8003fb2:	695a      	ldr	r2, [r3, #20]
 8003fb4:	9204      	str	r2, [sp, #16]
 8003fb6:	699a      	ldr	r2, [r3, #24]
 8003fb8:	9204      	str	r2, [sp, #16]
 8003fba:	9a04      	ldr	r2, [sp, #16]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fc2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003fc4:	b662      	cpsie	i
}
 8003fc6:	e7ce      	b.n	8003f66 <HAL_I2C_Mem_Read+0xc2>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003fc8:	6822      	ldr	r2, [r4, #0]
 8003fca:	6813      	ldr	r3, [r2, #0]
 8003fcc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003fd0:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003fd2:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	9305      	str	r3, [sp, #20]
 8003fd8:	6823      	ldr	r3, [r4, #0]
 8003fda:	695a      	ldr	r2, [r3, #20]
 8003fdc:	9205      	str	r2, [sp, #20]
 8003fde:	699a      	ldr	r2, [r3, #24]
 8003fe0:	9205      	str	r2, [sp, #20]
 8003fe2:	9a05      	ldr	r2, [sp, #20]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fea:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003fec:	b662      	cpsie	i
}
 8003fee:	e7ba      	b.n	8003f66 <HAL_I2C_Mem_Read+0xc2>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ff0:	462a      	mov	r2, r5
 8003ff2:	4631      	mov	r1, r6
 8003ff4:	4620      	mov	r0, r4
 8003ff6:	f7ff fa74 	bl	80034e2 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003ffa:	2800      	cmp	r0, #0
 8003ffc:	f040 80eb 	bne.w	80041d6 <HAL_I2C_Mem_Read+0x332>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004000:	6823      	ldr	r3, [r4, #0]
 8004002:	691a      	ldr	r2, [r3, #16]
 8004004:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004006:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8004008:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800400a:	3301      	adds	r3, #1
 800400c:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800400e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004010:	3b01      	subs	r3, #1
 8004012:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8004014:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004016:	3b01      	subs	r3, #1
 8004018:	b29b      	uxth	r3, r3
 800401a:	8563      	strh	r3, [r4, #42]	; 0x2a
 800401c:	e094      	b.n	8004148 <HAL_I2C_Mem_Read+0x2a4>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800401e:	9500      	str	r5, [sp, #0]
 8004020:	4633      	mov	r3, r6
 8004022:	2200      	movs	r2, #0
 8004024:	4641      	mov	r1, r8
 8004026:	4620      	mov	r0, r4
 8004028:	f7ff f83b 	bl	80030a2 <I2C_WaitOnFlagUntilTimeout>
 800402c:	2800      	cmp	r0, #0
 800402e:	f040 80d6 	bne.w	80041de <HAL_I2C_Mem_Read+0x33a>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004032:	6822      	ldr	r2, [r4, #0]
 8004034:	6813      	ldr	r3, [r2, #0]
 8004036:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800403a:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800403c:	b672      	cpsid	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800403e:	6823      	ldr	r3, [r4, #0]
 8004040:	691a      	ldr	r2, [r3, #16]
 8004042:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004044:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8004046:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004048:	3301      	adds	r3, #1
 800404a:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800404c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800404e:	3b01      	subs	r3, #1
 8004050:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8004052:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004054:	3b01      	subs	r3, #1
 8004056:	b29b      	uxth	r3, r3
 8004058:	8563      	strh	r3, [r4, #42]	; 0x2a
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800405a:	f8da 3000 	ldr.w	r3, [sl]
 800405e:	08db      	lsrs	r3, r3, #3
 8004060:	fba9 2303 	umull	r2, r3, r9, r3
 8004064:	0a1b      	lsrs	r3, r3, #8
 8004066:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800406a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800406e:	9307      	str	r3, [sp, #28]
            count--;
 8004070:	9b07      	ldr	r3, [sp, #28]
 8004072:	3b01      	subs	r3, #1
 8004074:	9307      	str	r3, [sp, #28]
            if (count == 0U)
 8004076:	9b07      	ldr	r3, [sp, #28]
 8004078:	b333      	cbz	r3, 80040c8 <HAL_I2C_Mem_Read+0x224>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800407a:	6823      	ldr	r3, [r4, #0]
 800407c:	695a      	ldr	r2, [r3, #20]
 800407e:	f012 0f04 	tst.w	r2, #4
 8004082:	d0f5      	beq.n	8004070 <HAL_I2C_Mem_Read+0x1cc>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800408a:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800408c:	6823      	ldr	r3, [r4, #0]
 800408e:	691a      	ldr	r2, [r3, #16]
 8004090:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004092:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8004094:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004096:	3301      	adds	r3, #1
 8004098:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800409a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800409c:	3b01      	subs	r3, #1
 800409e:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80040a0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80040a2:	3b01      	subs	r3, #1
 80040a4:	b29b      	uxth	r3, r3
 80040a6:	8563      	strh	r3, [r4, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80040a8:	b662      	cpsie	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040aa:	6823      	ldr	r3, [r4, #0]
 80040ac:	691a      	ldr	r2, [r3, #16]
 80040ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80040b0:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80040b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80040b4:	3301      	adds	r3, #1
 80040b6:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80040b8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80040ba:	3b01      	subs	r3, #1
 80040bc:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80040be:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80040c0:	3b01      	subs	r3, #1
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	8563      	strh	r3, [r4, #42]	; 0x2a
 80040c6:	e03f      	b.n	8004148 <HAL_I2C_Mem_Read+0x2a4>
              hi2c->PreviousState       = I2C_STATE_NONE;
 80040c8:	6323      	str	r3, [r4, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80040ca:	2220      	movs	r2, #32
 80040cc:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040d0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040d4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80040d6:	f042 0220 	orr.w	r2, r2, #32
 80040da:	6422      	str	r2, [r4, #64]	; 0x40
 80040dc:	b662      	cpsie	i
              __HAL_UNLOCK(hi2c);
 80040de:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
              return HAL_ERROR;
 80040e2:	2701      	movs	r7, #1
 80040e4:	e6f1      	b.n	8003eca <HAL_I2C_Mem_Read+0x26>
 80040e6:	bf00      	nop
 80040e8:	00100002 	.word	0x00100002
 80040ec:	ffff0000 	.word	0xffff0000
 80040f0:	00010004 	.word	0x00010004
 80040f4:	20000000 	.word	0x20000000
 80040f8:	14f8b589 	.word	0x14f8b589
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040fc:	462a      	mov	r2, r5
 80040fe:	4631      	mov	r1, r6
 8004100:	4620      	mov	r0, r4
 8004102:	f7ff f9ee 	bl	80034e2 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004106:	2800      	cmp	r0, #0
 8004108:	d16b      	bne.n	80041e2 <HAL_I2C_Mem_Read+0x33e>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800410a:	6823      	ldr	r3, [r4, #0]
 800410c:	691a      	ldr	r2, [r3, #16]
 800410e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004110:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004112:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004114:	1c53      	adds	r3, r2, #1
 8004116:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8004118:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800411a:	3b01      	subs	r3, #1
 800411c:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 800411e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004120:	3b01      	subs	r3, #1
 8004122:	b29b      	uxth	r3, r3
 8004124:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004126:	6823      	ldr	r3, [r4, #0]
 8004128:	6959      	ldr	r1, [r3, #20]
 800412a:	f011 0f04 	tst.w	r1, #4
 800412e:	d00b      	beq.n	8004148 <HAL_I2C_Mem_Read+0x2a4>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004130:	691b      	ldr	r3, [r3, #16]
 8004132:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 8004134:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004136:	3301      	adds	r3, #1
 8004138:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800413a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800413c:	3b01      	subs	r3, #1
 800413e:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8004140:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004142:	3b01      	subs	r3, #1
 8004144:	b29b      	uxth	r3, r3
 8004146:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004148:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800414a:	2b00      	cmp	r3, #0
 800414c:	d034      	beq.n	80041b8 <HAL_I2C_Mem_Read+0x314>
      if (hi2c->XferSize <= 3U)
 800414e:	2b03      	cmp	r3, #3
 8004150:	d8d4      	bhi.n	80040fc <HAL_I2C_Mem_Read+0x258>
        if (hi2c->XferSize == 1U)
 8004152:	2b01      	cmp	r3, #1
 8004154:	f43f af4c 	beq.w	8003ff0 <HAL_I2C_Mem_Read+0x14c>
        else if (hi2c->XferSize == 2U)
 8004158:	2b02      	cmp	r3, #2
 800415a:	f47f af60 	bne.w	800401e <HAL_I2C_Mem_Read+0x17a>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800415e:	9500      	str	r5, [sp, #0]
 8004160:	4633      	mov	r3, r6
 8004162:	2200      	movs	r2, #0
 8004164:	4641      	mov	r1, r8
 8004166:	4620      	mov	r0, r4
 8004168:	f7fe ff9b 	bl	80030a2 <I2C_WaitOnFlagUntilTimeout>
 800416c:	2800      	cmp	r0, #0
 800416e:	d134      	bne.n	80041da <HAL_I2C_Mem_Read+0x336>
  __ASM volatile ("cpsid i" : : : "memory");
 8004170:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004172:	6822      	ldr	r2, [r4, #0]
 8004174:	6813      	ldr	r3, [r2, #0]
 8004176:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800417a:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800417c:	6823      	ldr	r3, [r4, #0]
 800417e:	691a      	ldr	r2, [r3, #16]
 8004180:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004182:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8004184:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004186:	3301      	adds	r3, #1
 8004188:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800418a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800418c:	3b01      	subs	r3, #1
 800418e:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8004190:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004192:	3b01      	subs	r3, #1
 8004194:	b29b      	uxth	r3, r3
 8004196:	8563      	strh	r3, [r4, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004198:	b662      	cpsie	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800419a:	6823      	ldr	r3, [r4, #0]
 800419c:	691a      	ldr	r2, [r3, #16]
 800419e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80041a0:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80041a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80041a4:	3301      	adds	r3, #1
 80041a6:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80041a8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80041aa:	3b01      	subs	r3, #1
 80041ac:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80041ae:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80041b0:	3b01      	subs	r3, #1
 80041b2:	b29b      	uxth	r3, r3
 80041b4:	8563      	strh	r3, [r4, #42]	; 0x2a
 80041b6:	e7c7      	b.n	8004148 <HAL_I2C_Mem_Read+0x2a4>
    hi2c->State = HAL_I2C_STATE_READY;
 80041b8:	2320      	movs	r3, #32
 80041ba:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80041be:	2300      	movs	r3, #0
 80041c0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 80041c4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 80041c8:	e67f      	b.n	8003eca <HAL_I2C_Mem_Read+0x26>
      return HAL_BUSY;
 80041ca:	2702      	movs	r7, #2
 80041cc:	e67d      	b.n	8003eca <HAL_I2C_Mem_Read+0x26>
    __HAL_LOCK(hi2c);
 80041ce:	2702      	movs	r7, #2
 80041d0:	e67b      	b.n	8003eca <HAL_I2C_Mem_Read+0x26>
      return HAL_ERROR;
 80041d2:	2701      	movs	r7, #1
 80041d4:	e679      	b.n	8003eca <HAL_I2C_Mem_Read+0x26>
            return HAL_ERROR;
 80041d6:	2701      	movs	r7, #1
 80041d8:	e677      	b.n	8003eca <HAL_I2C_Mem_Read+0x26>
            return HAL_ERROR;
 80041da:	2701      	movs	r7, #1
 80041dc:	e675      	b.n	8003eca <HAL_I2C_Mem_Read+0x26>
            return HAL_ERROR;
 80041de:	2701      	movs	r7, #1
 80041e0:	e673      	b.n	8003eca <HAL_I2C_Mem_Read+0x26>
          return HAL_ERROR;
 80041e2:	2701      	movs	r7, #1
 80041e4:	e671      	b.n	8003eca <HAL_I2C_Mem_Read+0x26>
 80041e6:	bf00      	nop

080041e8 <HAL_I2C_MasterTxCpltCallback>:
}
 80041e8:	4770      	bx	lr

080041ea <HAL_I2C_MasterRxCpltCallback>:
}
 80041ea:	4770      	bx	lr

080041ec <HAL_I2C_SlaveTxCpltCallback>:
}
 80041ec:	4770      	bx	lr

080041ee <HAL_I2C_SlaveRxCpltCallback>:
}
 80041ee:	4770      	bx	lr

080041f0 <HAL_I2C_AddrCallback>:
}
 80041f0:	4770      	bx	lr

080041f2 <HAL_I2C_ListenCpltCallback>:
}
 80041f2:	4770      	bx	lr

080041f4 <HAL_I2C_MemTxCpltCallback>:
}
 80041f4:	4770      	bx	lr

080041f6 <I2C_MemoryTransmit_TXE_BTF>:
{
 80041f6:	b508      	push	{r3, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80041f8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
  if (hi2c->EventCount == 0U)
 80041fc:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80041fe:	b99a      	cbnz	r2, 8004228 <I2C_MemoryTransmit_TXE_BTF+0x32>
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004200:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8004202:	2b01      	cmp	r3, #1
 8004204:	d008      	beq.n	8004218 <I2C_MemoryTransmit_TXE_BTF+0x22>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004206:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8004208:	6802      	ldr	r2, [r0, #0]
 800420a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800420e:	6113      	str	r3, [r2, #16]
      hi2c->EventCount++;
 8004210:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8004212:	3301      	adds	r3, #1
 8004214:	6503      	str	r3, [r0, #80]	; 0x50
}
 8004216:	bd08      	pop	{r3, pc}
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004218:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800421a:	6802      	ldr	r2, [r0, #0]
 800421c:	b2db      	uxtb	r3, r3
 800421e:	6113      	str	r3, [r2, #16]
      hi2c->EventCount += 2U;
 8004220:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8004222:	3302      	adds	r3, #2
 8004224:	6503      	str	r3, [r0, #80]	; 0x50
 8004226:	e7f6      	b.n	8004216 <I2C_MemoryTransmit_TXE_BTF+0x20>
 8004228:	b2db      	uxtb	r3, r3
  else if (hi2c->EventCount == 1U)
 800422a:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800422c:	2a01      	cmp	r2, #1
 800422e:	d00b      	beq.n	8004248 <I2C_MemoryTransmit_TXE_BTF+0x52>
  else if (hi2c->EventCount == 2U)
 8004230:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8004232:	2a02      	cmp	r2, #2
 8004234:	d13f      	bne.n	80042b6 <I2C_MemoryTransmit_TXE_BTF+0xc0>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004236:	2b22      	cmp	r3, #34	; 0x22
 8004238:	d00e      	beq.n	8004258 <I2C_MemoryTransmit_TXE_BTF+0x62>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800423a:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 800423c:	b292      	uxth	r2, r2
 800423e:	b302      	cbz	r2, 8004282 <I2C_MemoryTransmit_TXE_BTF+0x8c>
 8004240:	2b21      	cmp	r3, #33	; 0x21
 8004242:	d012      	beq.n	800426a <I2C_MemoryTransmit_TXE_BTF+0x74>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004244:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8004246:	e7e6      	b.n	8004216 <I2C_MemoryTransmit_TXE_BTF+0x20>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004248:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800424a:	6802      	ldr	r2, [r0, #0]
 800424c:	b2db      	uxtb	r3, r3
 800424e:	6113      	str	r3, [r2, #16]
    hi2c->EventCount++;
 8004250:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8004252:	3301      	adds	r3, #1
 8004254:	6503      	str	r3, [r0, #80]	; 0x50
 8004256:	e7de      	b.n	8004216 <I2C_MemoryTransmit_TXE_BTF+0x20>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004258:	6802      	ldr	r2, [r0, #0]
 800425a:	6813      	ldr	r3, [r2, #0]
 800425c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004260:	6013      	str	r3, [r2, #0]
      hi2c->EventCount++;
 8004262:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8004264:	3301      	adds	r3, #1
 8004266:	6503      	str	r3, [r0, #80]	; 0x50
 8004268:	e7d5      	b.n	8004216 <I2C_MemoryTransmit_TXE_BTF+0x20>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800426a:	6803      	ldr	r3, [r0, #0]
 800426c:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800426e:	7812      	ldrb	r2, [r2, #0]
 8004270:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004272:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004274:	3301      	adds	r3, #1
 8004276:	6243      	str	r3, [r0, #36]	; 0x24
      hi2c->XferCount--;
 8004278:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800427a:	3b01      	subs	r3, #1
 800427c:	b29b      	uxth	r3, r3
 800427e:	8543      	strh	r3, [r0, #42]	; 0x2a
 8004280:	e7c9      	b.n	8004216 <I2C_MemoryTransmit_TXE_BTF+0x20>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004282:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8004284:	b292      	uxth	r2, r2
 8004286:	2a00      	cmp	r2, #0
 8004288:	d1c5      	bne.n	8004216 <I2C_MemoryTransmit_TXE_BTF+0x20>
 800428a:	2b21      	cmp	r3, #33	; 0x21
 800428c:	d1c3      	bne.n	8004216 <I2C_MemoryTransmit_TXE_BTF+0x20>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800428e:	6802      	ldr	r2, [r0, #0]
 8004290:	6853      	ldr	r3, [r2, #4]
 8004292:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004296:	6053      	str	r3, [r2, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004298:	6802      	ldr	r2, [r0, #0]
 800429a:	6813      	ldr	r3, [r2, #0]
 800429c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80042a0:	6013      	str	r3, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80042a2:	2300      	movs	r3, #0
 80042a4:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80042a6:	2220      	movs	r2, #32
 80042a8:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80042ac:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80042b0:	f7ff ffa0 	bl	80041f4 <HAL_I2C_MemTxCpltCallback>
 80042b4:	e7af      	b.n	8004216 <I2C_MemoryTransmit_TXE_BTF+0x20>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80042b6:	6803      	ldr	r3, [r0, #0]
 80042b8:	695a      	ldr	r2, [r3, #20]
 80042ba:	f012 0f80 	tst.w	r2, #128	; 0x80
 80042be:	d0aa      	beq.n	8004216 <I2C_MemoryTransmit_TXE_BTF+0x20>
    hi2c->Instance->DR = 0x00U;
 80042c0:	2200      	movs	r2, #0
 80042c2:	611a      	str	r2, [r3, #16]
}
 80042c4:	e7a7      	b.n	8004216 <I2C_MemoryTransmit_TXE_BTF+0x20>

080042c6 <HAL_I2C_MemRxCpltCallback>:
}
 80042c6:	4770      	bx	lr

080042c8 <HAL_I2C_ErrorCallback>:
}
 80042c8:	4770      	bx	lr

080042ca <HAL_I2C_AbortCpltCallback>:
}
 80042ca:	4770      	bx	lr

080042cc <I2C_DMAAbort>:
{
 80042cc:	b500      	push	{lr}
 80042ce:	b083      	sub	sp, #12
  __IO uint32_t count = 0U;
 80042d0:	2300      	movs	r3, #0
 80042d2:	9301      	str	r3, [sp, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80042d4:	6a40      	ldr	r0, [r0, #36]	; 0x24
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80042d6:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 80042da:	b2d2      	uxtb	r2, r2
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80042dc:	4b32      	ldr	r3, [pc, #200]	; (80043a8 <I2C_DMAAbort+0xdc>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	08db      	lsrs	r3, r3, #3
 80042e2:	4932      	ldr	r1, [pc, #200]	; (80043ac <I2C_DMAAbort+0xe0>)
 80042e4:	fba1 1303 	umull	r1, r3, r1, r3
 80042e8:	0a1b      	lsrs	r3, r3, #8
 80042ea:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80042ee:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80042f2:	9301      	str	r3, [sp, #4]
    if (count == 0U)
 80042f4:	9b01      	ldr	r3, [sp, #4]
 80042f6:	b143      	cbz	r3, 800430a <I2C_DMAAbort+0x3e>
    count--;
 80042f8:	9b01      	ldr	r3, [sp, #4]
 80042fa:	3b01      	subs	r3, #1
 80042fc:	9301      	str	r3, [sp, #4]
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80042fe:	6803      	ldr	r3, [r0, #0]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f413 7f00 	tst.w	r3, #512	; 0x200
 8004306:	d1f5      	bne.n	80042f4 <I2C_DMAAbort+0x28>
 8004308:	e003      	b.n	8004312 <I2C_DMAAbort+0x46>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800430a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800430c:	f043 0320 	orr.w	r3, r3, #32
 8004310:	6403      	str	r3, [r0, #64]	; 0x40
  if (hi2c->hdmatx != NULL)
 8004312:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004314:	b10b      	cbz	r3, 800431a <I2C_DMAAbort+0x4e>
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004316:	2100      	movs	r1, #0
 8004318:	6299      	str	r1, [r3, #40]	; 0x28
  if (hi2c->hdmarx != NULL)
 800431a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800431c:	b10b      	cbz	r3, 8004322 <I2C_DMAAbort+0x56>
    hi2c->hdmarx->XferCpltCallback = NULL;
 800431e:	2100      	movs	r1, #0
 8004320:	6299      	str	r1, [r3, #40]	; 0x28
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004322:	6801      	ldr	r1, [r0, #0]
 8004324:	680b      	ldr	r3, [r1, #0]
 8004326:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800432a:	600b      	str	r3, [r1, #0]
  hi2c->XferCount = 0U;
 800432c:	2300      	movs	r3, #0
 800432e:	8543      	strh	r3, [r0, #42]	; 0x2a
  if (hi2c->hdmatx != NULL)
 8004330:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004332:	b10b      	cbz	r3, 8004338 <I2C_DMAAbort+0x6c>
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004334:	2100      	movs	r1, #0
 8004336:	6359      	str	r1, [r3, #52]	; 0x34
  if (hi2c->hdmarx != NULL)
 8004338:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800433a:	b10b      	cbz	r3, 8004340 <I2C_DMAAbort+0x74>
    hi2c->hdmarx->XferAbortCallback = NULL;
 800433c:	2100      	movs	r1, #0
 800433e:	6359      	str	r1, [r3, #52]	; 0x34
  __HAL_I2C_DISABLE(hi2c);
 8004340:	6801      	ldr	r1, [r0, #0]
 8004342:	680b      	ldr	r3, [r1, #0]
 8004344:	f023 0301 	bic.w	r3, r3, #1
 8004348:	600b      	str	r3, [r1, #0]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800434a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800434e:	b2db      	uxtb	r3, r3
 8004350:	2b60      	cmp	r3, #96	; 0x60
 8004352:	d00e      	beq.n	8004372 <I2C_DMAAbort+0xa6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004354:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8004358:	2a28      	cmp	r2, #40	; 0x28
 800435a:	d014      	beq.n	8004386 <I2C_DMAAbort+0xba>
      hi2c->State = HAL_I2C_STATE_READY;
 800435c:	2320      	movs	r3, #32
 800435e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004362:	2300      	movs	r3, #0
 8004364:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004368:	f7ff ffae 	bl	80042c8 <HAL_I2C_ErrorCallback>
}
 800436c:	b003      	add	sp, #12
 800436e:	f85d fb04 	ldr.w	pc, [sp], #4
    hi2c->State         = HAL_I2C_STATE_READY;
 8004372:	2320      	movs	r3, #32
 8004374:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004378:	2300      	movs	r3, #0
 800437a:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800437e:	6403      	str	r3, [r0, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 8004380:	f7ff ffa3 	bl	80042ca <HAL_I2C_AbortCpltCallback>
 8004384:	e7f2      	b.n	800436c <I2C_DMAAbort+0xa0>
      __HAL_I2C_ENABLE(hi2c);
 8004386:	6802      	ldr	r2, [r0, #0]
 8004388:	6813      	ldr	r3, [r2, #0]
 800438a:	f043 0301 	orr.w	r3, r3, #1
 800438e:	6013      	str	r3, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004390:	6802      	ldr	r2, [r0, #0]
 8004392:	6813      	ldr	r3, [r2, #0]
 8004394:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004398:	6013      	str	r3, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800439a:	2300      	movs	r3, #0
 800439c:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800439e:	2328      	movs	r3, #40	; 0x28
 80043a0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 80043a4:	e7e0      	b.n	8004368 <I2C_DMAAbort+0x9c>
 80043a6:	bf00      	nop
 80043a8:	20000000 	.word	0x20000000
 80043ac:	14f8b589 	.word	0x14f8b589

080043b0 <I2C_ITError>:
{
 80043b0:	b510      	push	{r4, lr}
 80043b2:	4604      	mov	r4, r0
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80043b4:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 80043b8:	b2d2      	uxtb	r2, r2
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80043ba:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80043be:	b2db      	uxtb	r3, r3
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80043c0:	2b10      	cmp	r3, #16
 80043c2:	d036      	beq.n	8004432 <I2C_ITError+0x82>
 80043c4:	2b40      	cmp	r3, #64	; 0x40
 80043c6:	d034      	beq.n	8004432 <I2C_ITError+0x82>
  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80043c8:	f002 0328 	and.w	r3, r2, #40	; 0x28
 80043cc:	2b28      	cmp	r3, #40	; 0x28
 80043ce:	d03d      	beq.n	800444c <I2C_ITError+0x9c>
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80043d0:	6823      	ldr	r3, [r4, #0]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80043d8:	d107      	bne.n	80043ea <I2C_ITError+0x3a>
 80043da:	2a60      	cmp	r2, #96	; 0x60
 80043dc:	d005      	beq.n	80043ea <I2C_ITError+0x3a>
      hi2c->State = HAL_I2C_STATE_READY;
 80043de:	2320      	movs	r3, #32
 80043e0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80043e4:	2300      	movs	r3, #0
 80043e6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->PreviousState = I2C_STATE_NONE;
 80043ea:	2300      	movs	r3, #0
 80043ec:	6323      	str	r3, [r4, #48]	; 0x30
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80043ee:	6823      	ldr	r3, [r4, #0]
 80043f0:	685a      	ldr	r2, [r3, #4]
 80043f2:	f412 6f00 	tst.w	r2, #2048	; 0x800
 80043f6:	d04d      	beq.n	8004494 <I2C_ITError+0xe4>
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80043f8:	685a      	ldr	r2, [r3, #4]
 80043fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043fe:	605a      	str	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004400:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8004402:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 8004406:	b2db      	uxtb	r3, r3
 8004408:	2b01      	cmp	r3, #1
 800440a:	d025      	beq.n	8004458 <I2C_ITError+0xa8>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800440c:	4b46      	ldr	r3, [pc, #280]	; (8004528 <I2C_ITError+0x178>)
 800440e:	6353      	str	r3, [r2, #52]	; 0x34
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004410:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8004412:	f7fe fc9d 	bl	8002d50 <HAL_DMA_Abort_IT>
 8004416:	2800      	cmp	r0, #0
 8004418:	d04e      	beq.n	80044b8 <I2C_ITError+0x108>
        __HAL_I2C_DISABLE(hi2c);
 800441a:	6822      	ldr	r2, [r4, #0]
 800441c:	6813      	ldr	r3, [r2, #0]
 800441e:	f023 0301 	bic.w	r3, r3, #1
 8004422:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8004424:	2320      	movs	r3, #32
 8004426:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800442a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800442c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800442e:	4798      	blx	r3
 8004430:	e042      	b.n	80044b8 <I2C_ITError+0x108>
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004432:	2a22      	cmp	r2, #34	; 0x22
 8004434:	d1c8      	bne.n	80043c8 <I2C_ITError+0x18>
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004436:	6822      	ldr	r2, [r4, #0]
 8004438:	6813      	ldr	r3, [r2, #0]
 800443a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800443e:	6013      	str	r3, [r2, #0]
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004440:	6823      	ldr	r3, [r4, #0]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8004448:	d0c9      	beq.n	80043de <I2C_ITError+0x2e>
 800444a:	e7ce      	b.n	80043ea <I2C_ITError+0x3a>
    hi2c->PreviousState = I2C_STATE_NONE;
 800444c:	2300      	movs	r3, #0
 800444e:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004450:	2328      	movs	r3, #40	; 0x28
 8004452:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 8004456:	e7ca      	b.n	80043ee <I2C_ITError+0x3e>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004458:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800445a:	4a33      	ldr	r2, [pc, #204]	; (8004528 <I2C_ITError+0x178>)
 800445c:	635a      	str	r2, [r3, #52]	; 0x34
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800445e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004460:	f7fe fc76 	bl	8002d50 <HAL_DMA_Abort_IT>
 8004464:	b340      	cbz	r0, 80044b8 <I2C_ITError+0x108>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004466:	6823      	ldr	r3, [r4, #0]
 8004468:	695a      	ldr	r2, [r3, #20]
 800446a:	f012 0f40 	tst.w	r2, #64	; 0x40
 800446e:	d005      	beq.n	800447c <I2C_ITError+0xcc>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004470:	691a      	ldr	r2, [r3, #16]
 8004472:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004474:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8004476:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004478:	3301      	adds	r3, #1
 800447a:	6263      	str	r3, [r4, #36]	; 0x24
        __HAL_I2C_DISABLE(hi2c);
 800447c:	6822      	ldr	r2, [r4, #0]
 800447e:	6813      	ldr	r3, [r2, #0]
 8004480:	f023 0301 	bic.w	r3, r3, #1
 8004484:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8004486:	2320      	movs	r3, #32
 8004488:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800448c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800448e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004490:	4798      	blx	r3
 8004492:	e011      	b.n	80044b8 <I2C_ITError+0x108>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004494:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8004498:	b2d2      	uxtb	r2, r2
 800449a:	2a60      	cmp	r2, #96	; 0x60
 800449c:	d01f      	beq.n	80044de <I2C_ITError+0x12e>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800449e:	695a      	ldr	r2, [r3, #20]
 80044a0:	f012 0f40 	tst.w	r2, #64	; 0x40
 80044a4:	d005      	beq.n	80044b2 <I2C_ITError+0x102>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044a6:	691a      	ldr	r2, [r3, #16]
 80044a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80044aa:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80044ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80044ae:	3301      	adds	r3, #1
 80044b0:	6263      	str	r3, [r4, #36]	; 0x24
    HAL_I2C_ErrorCallback(hi2c);
 80044b2:	4620      	mov	r0, r4
 80044b4:	f7ff ff08 	bl	80042c8 <HAL_I2C_ErrorCallback>
  CurrentError = hi2c->ErrorCode;
 80044b8:	6c23      	ldr	r3, [r4, #64]	; 0x40
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80044ba:	f013 0f0f 	tst.w	r3, #15
 80044be:	d004      	beq.n	80044ca <I2C_ITError+0x11a>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80044c0:	6822      	ldr	r2, [r4, #0]
 80044c2:	6853      	ldr	r3, [r2, #4]
 80044c4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80044c8:	6053      	str	r3, [r2, #4]
  CurrentState = hi2c->State;
 80044ca:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80044ce:	b2db      	uxtb	r3, r3
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80044d0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80044d2:	f012 0f04 	tst.w	r2, #4
 80044d6:	d001      	beq.n	80044dc <I2C_ITError+0x12c>
 80044d8:	2b28      	cmp	r3, #40	; 0x28
 80044da:	d018      	beq.n	800450e <I2C_ITError+0x15e>
}
 80044dc:	bd10      	pop	{r4, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 80044de:	2220      	movs	r2, #32
 80044e0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044e4:	2200      	movs	r2, #0
 80044e6:	6422      	str	r2, [r4, #64]	; 0x40
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80044e8:	695a      	ldr	r2, [r3, #20]
 80044ea:	f012 0f40 	tst.w	r2, #64	; 0x40
 80044ee:	d005      	beq.n	80044fc <I2C_ITError+0x14c>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044f0:	691a      	ldr	r2, [r3, #16]
 80044f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80044f4:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80044f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80044f8:	3301      	adds	r3, #1
 80044fa:	6263      	str	r3, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE(hi2c);
 80044fc:	6822      	ldr	r2, [r4, #0]
 80044fe:	6813      	ldr	r3, [r2, #0]
 8004500:	f023 0301 	bic.w	r3, r3, #1
 8004504:	6013      	str	r3, [r2, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 8004506:	4620      	mov	r0, r4
 8004508:	f7ff fedf 	bl	80042ca <HAL_I2C_AbortCpltCallback>
 800450c:	e7d4      	b.n	80044b8 <I2C_ITError+0x108>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800450e:	4b07      	ldr	r3, [pc, #28]	; (800452c <I2C_ITError+0x17c>)
 8004510:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004512:	2300      	movs	r3, #0
 8004514:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004516:	2220      	movs	r2, #32
 8004518:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800451c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 8004520:	4620      	mov	r0, r4
 8004522:	f7ff fe66 	bl	80041f2 <HAL_I2C_ListenCpltCallback>
}
 8004526:	e7d9      	b.n	80044dc <I2C_ITError+0x12c>
 8004528:	080042cd 	.word	0x080042cd
 800452c:	ffff0000 	.word	0xffff0000

08004530 <HAL_I2C_EV_IRQHandler>:
{
 8004530:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004532:	b08f      	sub	sp, #60	; 0x3c
 8004534:	4604      	mov	r4, r0
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004536:	6803      	ldr	r3, [r0, #0]
 8004538:	6858      	ldr	r0, [r3, #4]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800453a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800453c:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8004540:	b2d2      	uxtb	r2, r2
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004542:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 8004546:	b2c9      	uxtb	r1, r1
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004548:	2a10      	cmp	r2, #16
 800454a:	d024      	beq.n	8004596 <HAL_I2C_EV_IRQHandler+0x66>
 800454c:	2a40      	cmp	r2, #64	; 0x40
 800454e:	d022      	beq.n	8004596 <HAL_I2C_EV_IRQHandler+0x66>
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004550:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004552:	2a00      	cmp	r2, #0
 8004554:	f000 83bb 	beq.w	8004cce <HAL_I2C_EV_IRQHandler+0x79e>
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004558:	695a      	ldr	r2, [r3, #20]
  uint32_t sr2itflags               = 0U;
 800455a:	2500      	movs	r5, #0
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800455c:	f012 0f02 	tst.w	r2, #2
 8004560:	f000 83cc 	beq.w	8004cfc <HAL_I2C_EV_IRQHandler+0x7cc>
 8004564:	f410 7f00 	tst.w	r0, #512	; 0x200
 8004568:	f000 83ce 	beq.w	8004d08 <HAL_I2C_EV_IRQHandler+0x7d8>
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800456c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800456e:	b102      	cbz	r2, 8004572 <HAL_I2C_EV_IRQHandler+0x42>
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004570:	699d      	ldr	r5, [r3, #24]
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004572:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8004576:	f002 0228 	and.w	r2, r2, #40	; 0x28
 800457a:	2a28      	cmp	r2, #40	; 0x28
 800457c:	f000 83aa 	beq.w	8004cd4 <HAL_I2C_EV_IRQHandler+0x7a4>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004580:	2200      	movs	r2, #0
 8004582:	920c      	str	r2, [sp, #48]	; 0x30
 8004584:	6959      	ldr	r1, [r3, #20]
 8004586:	910c      	str	r1, [sp, #48]	; 0x30
 8004588:	699b      	ldr	r3, [r3, #24]
 800458a:	930c      	str	r3, [sp, #48]	; 0x30
 800458c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800458e:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
}
 8004592:	b00f      	add	sp, #60	; 0x3c
 8004594:	bdf0      	pop	{r4, r5, r6, r7, pc}
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004596:	699f      	ldr	r7, [r3, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004598:	695d      	ldr	r5, [r3, #20]
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800459a:	f015 0f01 	tst.w	r5, #1
 800459e:	d11d      	bne.n	80045dc <HAL_I2C_EV_IRQHandler+0xac>
 80045a0:	f5b6 0f2a 	cmp.w	r6, #11141120	; 0xaa0000
 80045a4:	d0f5      	beq.n	8004592 <HAL_I2C_EV_IRQHandler+0x62>
 80045a6:	f1b6 4f2a 	cmp.w	r6, #2852126720	; 0xaa000000
 80045aa:	d0f2      	beq.n	8004592 <HAL_I2C_EV_IRQHandler+0x62>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80045ac:	f015 0f08 	tst.w	r5, #8
 80045b0:	d01b      	beq.n	80045ea <HAL_I2C_EV_IRQHandler+0xba>
 80045b2:	f410 7f00 	tst.w	r0, #512	; 0x200
 80045b6:	f000 8183 	beq.w	80048c0 <HAL_I2C_EV_IRQHandler+0x390>
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80045ba:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80045bc:	b2d2      	uxtb	r2, r2
 80045be:	611a      	str	r2, [r3, #16]
  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80045c0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	f000 8085 	beq.w	80046d2 <HAL_I2C_EV_IRQHandler+0x1a2>
 80045c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	f000 8081 	beq.w	80046d2 <HAL_I2C_EV_IRQHandler+0x1a2>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80045d0:	6822      	ldr	r2, [r4, #0]
 80045d2:	6853      	ldr	r3, [r2, #4]
 80045d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80045d8:	6053      	str	r3, [r2, #4]
 80045da:	e7da      	b.n	8004592 <HAL_I2C_EV_IRQHandler+0x62>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80045dc:	f410 7f00 	tst.w	r0, #512	; 0x200
 80045e0:	d11d      	bne.n	800461e <HAL_I2C_EV_IRQHandler+0xee>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80045e2:	f015 0f08 	tst.w	r5, #8
 80045e6:	f040 816b 	bne.w	80048c0 <HAL_I2C_EV_IRQHandler+0x390>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80045ea:	f015 0f02 	tst.w	r5, #2
 80045ee:	f000 8167 	beq.w	80048c0 <HAL_I2C_EV_IRQHandler+0x390>
 80045f2:	f410 7f00 	tst.w	r0, #512	; 0x200
 80045f6:	f000 8163 	beq.w	80048c0 <HAL_I2C_EV_IRQHandler+0x390>
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80045fa:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 80045fe:	b2d1      	uxtb	r1, r2
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004600:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004602:	6b25      	ldr	r5, [r4, #48]	; 0x30
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004604:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8004608:	b2d2      	uxtb	r2, r2
 800460a:	2a22      	cmp	r2, #34	; 0x22
 800460c:	d06a      	beq.n	80046e4 <HAL_I2C_EV_IRQHandler+0x1b4>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800460e:	2200      	movs	r2, #0
 8004610:	920a      	str	r2, [sp, #40]	; 0x28
 8004612:	695a      	ldr	r2, [r3, #20]
 8004614:	920a      	str	r2, [sp, #40]	; 0x28
 8004616:	699b      	ldr	r3, [r3, #24]
 8004618:	930a      	str	r3, [sp, #40]	; 0x28
 800461a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800461c:	e7b9      	b.n	8004592 <HAL_I2C_EV_IRQHandler+0x62>
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800461e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004620:	f5b2 0f2a 	cmp.w	r2, #11141120	; 0xaa0000
 8004624:	d01a      	beq.n	800465c <HAL_I2C_EV_IRQHandler+0x12c>
  }
  /* else if user set XferOptions to I2C_OTHER_AND_LAST_FRAME */
  /* it request implicitly to generate a restart condition    */
  /* then generate a stop condition at the end of transfer    */
  /* set XferOptions to I2C_FIRST_AND_LAST_FRAME              */
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004626:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004628:	f1b2 4f2a 	cmp.w	r2, #2852126720	; 0xaa000000
  {
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800462c:	bf04      	itt	eq
 800462e:	2208      	moveq	r2, #8
 8004630:	62e2      	streq	r2, [r4, #44]	; 0x2c
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004632:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8004636:	b2d2      	uxtb	r2, r2
 8004638:	2a40      	cmp	r2, #64	; 0x40
 800463a:	d012      	beq.n	8004662 <HAL_I2C_EV_IRQHandler+0x132>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800463c:	6922      	ldr	r2, [r4, #16]
 800463e:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8004642:	d01b      	beq.n	800467c <HAL_I2C_EV_IRQHandler+0x14c>
      if (hi2c->EventCount == 0U)
 8004644:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8004646:	2a00      	cmp	r2, #0
 8004648:	d136      	bne.n	80046b8 <HAL_I2C_EV_IRQHandler+0x188>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800464a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800464c:	f3c2 12c8 	ubfx	r2, r2, #7, #9
 8004650:	f002 0206 	and.w	r2, r2, #6
 8004654:	f042 02f0 	orr.w	r2, r2, #240	; 0xf0
 8004658:	611a      	str	r2, [r3, #16]
 800465a:	e79a      	b.n	8004592 <HAL_I2C_EV_IRQHandler+0x62>
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800465c:	2201      	movs	r2, #1
 800465e:	62e2      	str	r2, [r4, #44]	; 0x2c
 8004660:	e7e7      	b.n	8004632 <HAL_I2C_EV_IRQHandler+0x102>
    if (hi2c->EventCount == 0U)
 8004662:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8004664:	b922      	cbnz	r2, 8004670 <HAL_I2C_EV_IRQHandler+0x140>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004666:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004668:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800466c:	611a      	str	r2, [r3, #16]
 800466e:	e790      	b.n	8004592 <HAL_I2C_EV_IRQHandler+0x62>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004670:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004672:	f042 0201 	orr.w	r2, r2, #1
 8004676:	b2d2      	uxtb	r2, r2
 8004678:	611a      	str	r2, [r3, #16]
 800467a:	e78a      	b.n	8004592 <HAL_I2C_EV_IRQHandler+0x62>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800467c:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8004680:	b2d2      	uxtb	r2, r2
 8004682:	2a21      	cmp	r2, #33	; 0x21
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004684:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004686:	bf0e      	itee	eq
 8004688:	f002 02fe 	andeq.w	r2, r2, #254	; 0xfe
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800468c:	f042 0201 	orrne.w	r2, r2, #1
 8004690:	b2d2      	uxtbne	r2, r2
 8004692:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004694:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004696:	b13b      	cbz	r3, 80046a8 <HAL_I2C_EV_IRQHandler+0x178>
 8004698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800469a:	b12b      	cbz	r3, 80046a8 <HAL_I2C_EV_IRQHandler+0x178>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800469c:	6822      	ldr	r2, [r4, #0]
 800469e:	6853      	ldr	r3, [r2, #4]
 80046a0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80046a4:	6053      	str	r3, [r2, #4]
 80046a6:	e774      	b.n	8004592 <HAL_I2C_EV_IRQHandler+0x62>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80046a8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	f43f af71 	beq.w	8004592 <HAL_I2C_EV_IRQHandler+0x62>
 80046b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d1f2      	bne.n	800469c <HAL_I2C_EV_IRQHandler+0x16c>
 80046b6:	e76c      	b.n	8004592 <HAL_I2C_EV_IRQHandler+0x62>
      else if (hi2c->EventCount == 1U)
 80046b8:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80046ba:	2a01      	cmp	r2, #1
 80046bc:	f47f af69 	bne.w	8004592 <HAL_I2C_EV_IRQHandler+0x62>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80046c0:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80046c2:	f3c2 12c8 	ubfx	r2, r2, #7, #9
 80046c6:	f002 0206 	and.w	r2, r2, #6
 80046ca:	f042 02f1 	orr.w	r2, r2, #241	; 0xf1
 80046ce:	611a      	str	r2, [r3, #16]
 80046d0:	e75f      	b.n	8004592 <HAL_I2C_EV_IRQHandler+0x62>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80046d2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	f43f af5c 	beq.w	8004592 <HAL_I2C_EV_IRQHandler+0x62>
 80046da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046dc:	2b00      	cmp	r3, #0
 80046de:	f47f af77 	bne.w	80045d0 <HAL_I2C_EV_IRQHandler+0xa0>
 80046e2:	e756      	b.n	8004592 <HAL_I2C_EV_IRQHandler+0x62>
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80046e4:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80046e6:	b90a      	cbnz	r2, 80046ec <HAL_I2C_EV_IRQHandler+0x1bc>
 80046e8:	2940      	cmp	r1, #64	; 0x40
 80046ea:	d015      	beq.n	8004718 <HAL_I2C_EV_IRQHandler+0x1e8>
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80046ec:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80046ee:	b91a      	cbnz	r2, 80046f8 <HAL_I2C_EV_IRQHandler+0x1c8>
 80046f0:	6922      	ldr	r2, [r4, #16]
 80046f2:	f5b2 4f40 	cmp.w	r2, #49152	; 0xc000
 80046f6:	d016      	beq.n	8004726 <HAL_I2C_EV_IRQHandler+0x1f6>
      if (hi2c->XferCount == 0U)
 80046f8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80046fa:	b292      	uxth	r2, r2
 80046fc:	bb12      	cbnz	r2, 8004744 <HAL_I2C_EV_IRQHandler+0x214>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046fe:	9202      	str	r2, [sp, #8]
 8004700:	695a      	ldr	r2, [r3, #20]
 8004702:	9202      	str	r2, [sp, #8]
 8004704:	699a      	ldr	r2, [r3, #24]
 8004706:	9202      	str	r2, [sp, #8]
 8004708:	9a02      	ldr	r2, [sp, #8]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004710:	601a      	str	r2, [r3, #0]
      hi2c->EventCount = 0U;
 8004712:	2300      	movs	r3, #0
 8004714:	6523      	str	r3, [r4, #80]	; 0x50
 8004716:	e73c      	b.n	8004592 <HAL_I2C_EV_IRQHandler+0x62>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004718:	9200      	str	r2, [sp, #0]
 800471a:	695a      	ldr	r2, [r3, #20]
 800471c:	9200      	str	r2, [sp, #0]
 800471e:	699b      	ldr	r3, [r3, #24]
 8004720:	9300      	str	r3, [sp, #0]
 8004722:	9b00      	ldr	r3, [sp, #0]
 8004724:	e735      	b.n	8004592 <HAL_I2C_EV_IRQHandler+0x62>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004726:	2200      	movs	r2, #0
 8004728:	9201      	str	r2, [sp, #4]
 800472a:	695a      	ldr	r2, [r3, #20]
 800472c:	9201      	str	r2, [sp, #4]
 800472e:	699a      	ldr	r2, [r3, #24]
 8004730:	9201      	str	r2, [sp, #4]
 8004732:	9a01      	ldr	r2, [sp, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800473a:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800473c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800473e:	3301      	adds	r3, #1
 8004740:	6523      	str	r3, [r4, #80]	; 0x50
 8004742:	e726      	b.n	8004592 <HAL_I2C_EV_IRQHandler+0x62>
      else if (hi2c->XferCount == 1U)
 8004744:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004746:	b292      	uxth	r2, r2
 8004748:	2a01      	cmp	r2, #1
 800474a:	d025      	beq.n	8004798 <HAL_I2C_EV_IRQHandler+0x268>
      else if (hi2c->XferCount == 2U)
 800474c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800474e:	b292      	uxth	r2, r2
 8004750:	2a02      	cmp	r2, #2
 8004752:	d079      	beq.n	8004848 <HAL_I2C_EV_IRQHandler+0x318>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800475a:	601a      	str	r2, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800475c:	6823      	ldr	r3, [r4, #0]
 800475e:	685a      	ldr	r2, [r3, #4]
 8004760:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8004764:	d00f      	beq.n	8004786 <HAL_I2C_EV_IRQHandler+0x256>
 8004766:	f510 3f80 	cmn.w	r0, #65536	; 0x10000
 800476a:	d008      	beq.n	800477e <HAL_I2C_EV_IRQHandler+0x24e>
 800476c:	3801      	subs	r0, #1
 800476e:	281f      	cmp	r0, #31
 8004770:	d809      	bhi.n	8004786 <HAL_I2C_EV_IRQHandler+0x256>
 8004772:	4a99      	ldr	r2, [pc, #612]	; (80049d8 <HAL_I2C_EV_IRQHandler+0x4a8>)
 8004774:	fa22 f000 	lsr.w	r0, r2, r0
 8004778:	f010 0f01 	tst.w	r0, #1
 800477c:	d003      	beq.n	8004786 <HAL_I2C_EV_IRQHandler+0x256>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800477e:	685a      	ldr	r2, [r3, #4]
 8004780:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004784:	605a      	str	r2, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004786:	2300      	movs	r3, #0
 8004788:	9309      	str	r3, [sp, #36]	; 0x24
 800478a:	6823      	ldr	r3, [r4, #0]
 800478c:	695a      	ldr	r2, [r3, #20]
 800478e:	9209      	str	r2, [sp, #36]	; 0x24
 8004790:	699b      	ldr	r3, [r3, #24]
 8004792:	9309      	str	r3, [sp, #36]	; 0x24
 8004794:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004796:	e7bc      	b.n	8004712 <HAL_I2C_EV_IRQHandler+0x1e2>
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004798:	f510 3f80 	cmn.w	r0, #65536	; 0x10000
 800479c:	d01a      	beq.n	80047d4 <HAL_I2C_EV_IRQHandler+0x2a4>
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800479e:	2808      	cmp	r0, #8
 80047a0:	d03c      	beq.n	800481c <HAL_I2C_EV_IRQHandler+0x2ec>
 80047a2:	2820      	cmp	r0, #32
 80047a4:	d03a      	beq.n	800481c <HAL_I2C_EV_IRQHandler+0x2ec>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80047a6:	2d12      	cmp	r5, #18
 80047a8:	d036      	beq.n	8004818 <HAL_I2C_EV_IRQHandler+0x2e8>
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80047aa:	2810      	cmp	r0, #16
 80047ac:	d847      	bhi.n	800483e <HAL_I2C_EV_IRQHandler+0x30e>
 80047ae:	4a8b      	ldr	r2, [pc, #556]	; (80049dc <HAL_I2C_EV_IRQHandler+0x4ac>)
 80047b0:	fa22 f000 	lsr.w	r0, r2, r0
 80047b4:	f010 0f01 	tst.w	r0, #1
 80047b8:	d041      	beq.n	800483e <HAL_I2C_EV_IRQHandler+0x30e>
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80047c0:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047c2:	2300      	movs	r3, #0
 80047c4:	9305      	str	r3, [sp, #20]
 80047c6:	6823      	ldr	r3, [r4, #0]
 80047c8:	695a      	ldr	r2, [r3, #20]
 80047ca:	9205      	str	r2, [sp, #20]
 80047cc:	699b      	ldr	r3, [r3, #24]
 80047ce:	9305      	str	r3, [sp, #20]
 80047d0:	9b05      	ldr	r3, [sp, #20]
 80047d2:	e79e      	b.n	8004712 <HAL_I2C_EV_IRQHandler+0x1e2>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047da:	601a      	str	r2, [r3, #0]
          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80047dc:	6823      	ldr	r3, [r4, #0]
 80047de:	685a      	ldr	r2, [r3, #4]
 80047e0:	f412 6f00 	tst.w	r2, #2048	; 0x800
 80047e4:	d00c      	beq.n	8004800 <HAL_I2C_EV_IRQHandler+0x2d0>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047ec:	601a      	str	r2, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047ee:	2300      	movs	r3, #0
 80047f0:	9303      	str	r3, [sp, #12]
 80047f2:	6823      	ldr	r3, [r4, #0]
 80047f4:	695a      	ldr	r2, [r3, #20]
 80047f6:	9203      	str	r2, [sp, #12]
 80047f8:	699b      	ldr	r3, [r3, #24]
 80047fa:	9303      	str	r3, [sp, #12]
 80047fc:	9b03      	ldr	r3, [sp, #12]
 80047fe:	e788      	b.n	8004712 <HAL_I2C_EV_IRQHandler+0x1e2>
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004800:	2200      	movs	r2, #0
 8004802:	9204      	str	r2, [sp, #16]
 8004804:	695a      	ldr	r2, [r3, #20]
 8004806:	9204      	str	r2, [sp, #16]
 8004808:	699a      	ldr	r2, [r3, #24]
 800480a:	9204      	str	r2, [sp, #16]
 800480c:	9a04      	ldr	r2, [sp, #16]
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004814:	601a      	str	r2, [r3, #0]
 8004816:	e77c      	b.n	8004712 <HAL_I2C_EV_IRQHandler+0x1e2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004818:	2801      	cmp	r0, #1
 800481a:	d010      	beq.n	800483e <HAL_I2C_EV_IRQHandler+0x30e>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004822:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004824:	2300      	movs	r3, #0
 8004826:	9306      	str	r3, [sp, #24]
 8004828:	6823      	ldr	r3, [r4, #0]
 800482a:	695a      	ldr	r2, [r3, #20]
 800482c:	9206      	str	r2, [sp, #24]
 800482e:	699a      	ldr	r2, [r3, #24]
 8004830:	9206      	str	r2, [sp, #24]
 8004832:	9a06      	ldr	r2, [sp, #24]
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800483a:	601a      	str	r2, [r3, #0]
 800483c:	e769      	b.n	8004712 <HAL_I2C_EV_IRQHandler+0x1e2>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004844:	601a      	str	r2, [r3, #0]
 8004846:	e7bc      	b.n	80047c2 <HAL_I2C_EV_IRQHandler+0x292>
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004848:	2810      	cmp	r0, #16
 800484a:	d828      	bhi.n	800489e <HAL_I2C_EV_IRQHandler+0x36e>
 800484c:	4a63      	ldr	r2, [pc, #396]	; (80049dc <HAL_I2C_EV_IRQHandler+0x4ac>)
 800484e:	40c2      	lsrs	r2, r0
 8004850:	f012 0f01 	tst.w	r2, #1
 8004854:	d023      	beq.n	800489e <HAL_I2C_EV_IRQHandler+0x36e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800485c:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800485e:	2300      	movs	r3, #0
 8004860:	9308      	str	r3, [sp, #32]
 8004862:	6823      	ldr	r3, [r4, #0]
 8004864:	695a      	ldr	r2, [r3, #20]
 8004866:	9208      	str	r2, [sp, #32]
 8004868:	699b      	ldr	r3, [r3, #24]
 800486a:	9308      	str	r3, [sp, #32]
 800486c:	9b08      	ldr	r3, [sp, #32]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800486e:	6823      	ldr	r3, [r4, #0]
 8004870:	685a      	ldr	r2, [r3, #4]
 8004872:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8004876:	f43f af4c 	beq.w	8004712 <HAL_I2C_EV_IRQHandler+0x1e2>
 800487a:	f510 3f80 	cmn.w	r0, #65536	; 0x10000
 800487e:	d009      	beq.n	8004894 <HAL_I2C_EV_IRQHandler+0x364>
 8004880:	3801      	subs	r0, #1
 8004882:	281f      	cmp	r0, #31
 8004884:	f63f af45 	bhi.w	8004712 <HAL_I2C_EV_IRQHandler+0x1e2>
 8004888:	4a53      	ldr	r2, [pc, #332]	; (80049d8 <HAL_I2C_EV_IRQHandler+0x4a8>)
 800488a:	40c2      	lsrs	r2, r0
 800488c:	f012 0f01 	tst.w	r2, #1
 8004890:	f43f af3f 	beq.w	8004712 <HAL_I2C_EV_IRQHandler+0x1e2>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004894:	685a      	ldr	r2, [r3, #4]
 8004896:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800489a:	605a      	str	r2, [r3, #4]
 800489c:	e739      	b.n	8004712 <HAL_I2C_EV_IRQHandler+0x1e2>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048a4:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048a6:	2300      	movs	r3, #0
 80048a8:	9307      	str	r3, [sp, #28]
 80048aa:	6823      	ldr	r3, [r4, #0]
 80048ac:	695a      	ldr	r2, [r3, #20]
 80048ae:	9207      	str	r2, [sp, #28]
 80048b0:	699a      	ldr	r2, [r3, #24]
 80048b2:	9207      	str	r2, [sp, #28]
 80048b4:	9a07      	ldr	r2, [sp, #28]
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048bc:	601a      	str	r2, [r3, #0]
 80048be:	e7d6      	b.n	800486e <HAL_I2C_EV_IRQHandler+0x33e>
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80048c0:	f017 0f04 	tst.w	r7, #4
 80048c4:	f000 80d9 	beq.w	8004a7a <HAL_I2C_EV_IRQHandler+0x54a>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80048c8:	685e      	ldr	r6, [r3, #4]
 80048ca:	f416 6f00 	tst.w	r6, #2048	; 0x800
 80048ce:	f47f ae60 	bne.w	8004592 <HAL_I2C_EV_IRQHandler+0x62>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80048d2:	f015 0f80 	tst.w	r5, #128	; 0x80
 80048d6:	d06e      	beq.n	80049b6 <HAL_I2C_EV_IRQHandler+0x486>
 80048d8:	f410 6f80 	tst.w	r0, #1024	; 0x400
 80048dc:	d06b      	beq.n	80049b6 <HAL_I2C_EV_IRQHandler+0x486>
 80048de:	f015 0f04 	tst.w	r5, #4
 80048e2:	d16c      	bne.n	80049be <HAL_I2C_EV_IRQHandler+0x48e>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80048e4:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 80048e8:	b2d2      	uxtb	r2, r2
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80048ea:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
 80048ee:	b2c9      	uxtb	r1, r1
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80048f0:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80048f2:	8d20      	ldrh	r0, [r4, #40]	; 0x28
 80048f4:	2800      	cmp	r0, #0
 80048f6:	d140      	bne.n	800497a <HAL_I2C_EV_IRQHandler+0x44a>
 80048f8:	2a21      	cmp	r2, #33	; 0x21
 80048fa:	d006      	beq.n	800490a <HAL_I2C_EV_IRQHandler+0x3da>
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80048fc:	2940      	cmp	r1, #64	; 0x40
 80048fe:	f47f ae48 	bne.w	8004592 <HAL_I2C_EV_IRQHandler+0x62>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004902:	2a22      	cmp	r2, #34	; 0x22
 8004904:	f47f ae45 	bne.w	8004592 <HAL_I2C_EV_IRQHandler+0x62>
 8004908:	e039      	b.n	800497e <HAL_I2C_EV_IRQHandler+0x44e>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800490a:	2d08      	cmp	r5, #8
 800490c:	d004      	beq.n	8004918 <HAL_I2C_EV_IRQHandler+0x3e8>
 800490e:	2d20      	cmp	r5, #32
 8004910:	d002      	beq.n	8004918 <HAL_I2C_EV_IRQHandler+0x3e8>
 8004912:	f515 3f80 	cmn.w	r5, #65536	; 0x10000
 8004916:	d119      	bne.n	800494c <HAL_I2C_EV_IRQHandler+0x41c>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004918:	685a      	ldr	r2, [r3, #4]
 800491a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800491e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004920:	6822      	ldr	r2, [r4, #0]
 8004922:	6813      	ldr	r3, [r2, #0]
 8004924:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004928:	6013      	str	r3, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800492a:	2300      	movs	r3, #0
 800492c:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800492e:	2320      	movs	r3, #32
 8004930:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004934:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8004938:	b2db      	uxtb	r3, r3
 800493a:	2b40      	cmp	r3, #64	; 0x40
 800493c:	d016      	beq.n	800496c <HAL_I2C_EV_IRQHandler+0x43c>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800493e:	2300      	movs	r3, #0
 8004940:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004944:	4620      	mov	r0, r4
 8004946:	f7ff fc4f 	bl	80041e8 <HAL_I2C_MasterTxCpltCallback>
 800494a:	e622      	b.n	8004592 <HAL_I2C_EV_IRQHandler+0x62>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800494c:	685a      	ldr	r2, [r3, #4]
 800494e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004952:	605a      	str	r2, [r3, #4]
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004954:	2311      	movs	r3, #17
 8004956:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004958:	2300      	movs	r3, #0
 800495a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800495e:	2320      	movs	r3, #32
 8004960:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004964:	4620      	mov	r0, r4
 8004966:	f7ff fc3f 	bl	80041e8 <HAL_I2C_MasterTxCpltCallback>
 800496a:	e612      	b.n	8004592 <HAL_I2C_EV_IRQHandler+0x62>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800496c:	2300      	movs	r3, #0
 800496e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004972:	4620      	mov	r0, r4
 8004974:	f7ff fc3e 	bl	80041f4 <HAL_I2C_MemTxCpltCallback>
 8004978:	e60b      	b.n	8004592 <HAL_I2C_EV_IRQHandler+0x62>
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800497a:	2a21      	cmp	r2, #33	; 0x21
 800497c:	d1be      	bne.n	80048fc <HAL_I2C_EV_IRQHandler+0x3cc>
    if (hi2c->XferCount == 0U)
 800497e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004980:	b292      	uxth	r2, r2
 8004982:	b922      	cbnz	r2, 800498e <HAL_I2C_EV_IRQHandler+0x45e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004984:	685a      	ldr	r2, [r3, #4]
 8004986:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800498a:	605a      	str	r2, [r3, #4]
 800498c:	e601      	b.n	8004592 <HAL_I2C_EV_IRQHandler+0x62>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800498e:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8004992:	b2d2      	uxtb	r2, r2
 8004994:	2a40      	cmp	r2, #64	; 0x40
 8004996:	d00a      	beq.n	80049ae <HAL_I2C_EV_IRQHandler+0x47e>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004998:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800499a:	7812      	ldrb	r2, [r2, #0]
 800499c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800499e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80049a0:	3301      	adds	r3, #1
 80049a2:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 80049a4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80049a6:	3b01      	subs	r3, #1
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	8563      	strh	r3, [r4, #42]	; 0x2a
 80049ac:	e5f1      	b.n	8004592 <HAL_I2C_EV_IRQHandler+0x62>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80049ae:	4620      	mov	r0, r4
 80049b0:	f7ff fc21 	bl	80041f6 <I2C_MemoryTransmit_TXE_BTF>
 80049b4:	e5ed      	b.n	8004592 <HAL_I2C_EV_IRQHandler+0x62>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80049b6:	f015 0f04 	tst.w	r5, #4
 80049ba:	f43f adea 	beq.w	8004592 <HAL_I2C_EV_IRQHandler+0x62>
 80049be:	f410 7f00 	tst.w	r0, #512	; 0x200
 80049c2:	f43f ade6 	beq.w	8004592 <HAL_I2C_EV_IRQHandler+0x62>
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80049c6:	2921      	cmp	r1, #33	; 0x21
 80049c8:	d00a      	beq.n	80049e0 <HAL_I2C_EV_IRQHandler+0x4b0>
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80049ca:	2a40      	cmp	r2, #64	; 0x40
 80049cc:	f47f ade1 	bne.w	8004592 <HAL_I2C_EV_IRQHandler+0x62>
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80049d0:	4620      	mov	r0, r4
 80049d2:	f7ff fc10 	bl	80041f6 <I2C_MemoryTransmit_TXE_BTF>
 80049d6:	e5dc      	b.n	8004592 <HAL_I2C_EV_IRQHandler+0x62>
 80049d8:	80008081 	.word	0x80008081
 80049dc:	00010014 	.word	0x00010014
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80049e0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80049e2:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 80049e6:	b2d2      	uxtb	r2, r2
 80049e8:	2a21      	cmp	r2, #33	; 0x21
 80049ea:	f47f add2 	bne.w	8004592 <HAL_I2C_EV_IRQHandler+0x62>
    if (hi2c->XferCount != 0U)
 80049ee:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80049f0:	b292      	uxth	r2, r2
 80049f2:	b152      	cbz	r2, 8004a0a <HAL_I2C_EV_IRQHandler+0x4da>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80049f4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80049f6:	7812      	ldrb	r2, [r2, #0]
 80049f8:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80049fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80049fc:	3301      	adds	r3, #1
 80049fe:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8004a00:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004a02:	3b01      	subs	r3, #1
 8004a04:	b29b      	uxth	r3, r3
 8004a06:	8563      	strh	r3, [r4, #42]	; 0x2a
 8004a08:	e5c3      	b.n	8004592 <HAL_I2C_EV_IRQHandler+0x62>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004a0a:	2908      	cmp	r1, #8
 8004a0c:	d004      	beq.n	8004a18 <HAL_I2C_EV_IRQHandler+0x4e8>
 8004a0e:	2920      	cmp	r1, #32
 8004a10:	d002      	beq.n	8004a18 <HAL_I2C_EV_IRQHandler+0x4e8>
 8004a12:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 8004a16:	d119      	bne.n	8004a4c <HAL_I2C_EV_IRQHandler+0x51c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a18:	685a      	ldr	r2, [r3, #4]
 8004a1a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004a1e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a20:	6822      	ldr	r2, [r4, #0]
 8004a22:	6813      	ldr	r3, [r2, #0]
 8004a24:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004a28:	6013      	str	r3, [r2, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004a2e:	2320      	movs	r3, #32
 8004a30:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004a34:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8004a38:	b2db      	uxtb	r3, r3
 8004a3a:	2b40      	cmp	r3, #64	; 0x40
 8004a3c:	d016      	beq.n	8004a6c <HAL_I2C_EV_IRQHandler+0x53c>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004a44:	4620      	mov	r0, r4
 8004a46:	f7ff fbcf 	bl	80041e8 <HAL_I2C_MasterTxCpltCallback>
 8004a4a:	e5a2      	b.n	8004592 <HAL_I2C_EV_IRQHandler+0x62>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a4c:	685a      	ldr	r2, [r3, #4]
 8004a4e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004a52:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004a54:	2311      	movs	r3, #17
 8004a56:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004a5e:	2320      	movs	r3, #32
 8004a60:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004a64:	4620      	mov	r0, r4
 8004a66:	f7ff fbbf 	bl	80041e8 <HAL_I2C_MasterTxCpltCallback>
 8004a6a:	e592      	b.n	8004592 <HAL_I2C_EV_IRQHandler+0x62>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004a72:	4620      	mov	r0, r4
 8004a74:	f7ff fbbe 	bl	80041f4 <HAL_I2C_MemTxCpltCallback>
 8004a78:	e58b      	b.n	8004592 <HAL_I2C_EV_IRQHandler+0x62>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004a7a:	685a      	ldr	r2, [r3, #4]
 8004a7c:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8004a80:	f47f ad87 	bne.w	8004592 <HAL_I2C_EV_IRQHandler+0x62>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004a84:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004a88:	f000 808f 	beq.w	8004baa <HAL_I2C_EV_IRQHandler+0x67a>
 8004a8c:	f410 6f80 	tst.w	r0, #1024	; 0x400
 8004a90:	f000 808b 	beq.w	8004baa <HAL_I2C_EV_IRQHandler+0x67a>
 8004a94:	f015 0f04 	tst.w	r5, #4
 8004a98:	f040 808b 	bne.w	8004bb2 <HAL_I2C_EV_IRQHandler+0x682>
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004a9c:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8004aa0:	b2d2      	uxtb	r2, r2
 8004aa2:	2a22      	cmp	r2, #34	; 0x22
 8004aa4:	f47f ad75 	bne.w	8004592 <HAL_I2C_EV_IRQHandler+0x62>
    tmp = hi2c->XferCount;
 8004aa8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004aaa:	b292      	uxth	r2, r2
    if (tmp > 3U)
 8004aac:	2a03      	cmp	r2, #3
 8004aae:	d914      	bls.n	8004ada <HAL_I2C_EV_IRQHandler+0x5aa>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ab0:	691a      	ldr	r2, [r3, #16]
 8004ab2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004ab4:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8004ab6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004ab8:	3301      	adds	r3, #1
 8004aba:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8004abc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004abe:	3b01      	subs	r3, #1
 8004ac0:	b29b      	uxth	r3, r3
 8004ac2:	8563      	strh	r3, [r4, #42]	; 0x2a
      if (hi2c->XferCount == (uint16_t)3)
 8004ac4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	2b03      	cmp	r3, #3
 8004aca:	f47f ad62 	bne.w	8004592 <HAL_I2C_EV_IRQHandler+0x62>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004ace:	6822      	ldr	r2, [r4, #0]
 8004ad0:	6853      	ldr	r3, [r2, #4]
 8004ad2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ad6:	6053      	str	r3, [r2, #4]
 8004ad8:	e55b      	b.n	8004592 <HAL_I2C_EV_IRQHandler+0x62>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004ada:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004adc:	2902      	cmp	r1, #2
 8004ade:	d001      	beq.n	8004ae4 <HAL_I2C_EV_IRQHandler+0x5b4>
 8004ae0:	2a01      	cmp	r2, #1
 8004ae2:	d904      	bls.n	8004aee <HAL_I2C_EV_IRQHandler+0x5be>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004ae4:	685a      	ldr	r2, [r3, #4]
 8004ae6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004aea:	605a      	str	r2, [r3, #4]
 8004aec:	e551      	b.n	8004592 <HAL_I2C_EV_IRQHandler+0x62>
  __IO uint32_t count = 0U;
 8004aee:	2200      	movs	r2, #0
 8004af0:	920b      	str	r2, [sp, #44]	; 0x2c
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004af2:	4aa2      	ldr	r2, [pc, #648]	; (8004d7c <HAL_I2C_EV_IRQHandler+0x84c>)
 8004af4:	6812      	ldr	r2, [r2, #0]
 8004af6:	f246 11a8 	movw	r1, #25000	; 0x61a8
 8004afa:	fbb2 f2f1 	udiv	r2, r2, r1
 8004afe:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8004b02:	920b      	str	r2, [sp, #44]	; 0x2c
    count--;
 8004b04:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004b06:	3a01      	subs	r2, #1
 8004b08:	920b      	str	r2, [sp, #44]	; 0x2c
    if (count == 0U)
 8004b0a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004b0c:	b342      	cbz	r2, 8004b60 <HAL_I2C_EV_IRQHandler+0x630>
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	f412 7f00 	tst.w	r2, #512	; 0x200
 8004b14:	d1f6      	bne.n	8004b04 <HAL_I2C_EV_IRQHandler+0x5d4>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b1c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004b1e:	6822      	ldr	r2, [r4, #0]
 8004b20:	6853      	ldr	r3, [r2, #4]
 8004b22:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004b26:	6053      	str	r3, [r2, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b28:	6823      	ldr	r3, [r4, #0]
 8004b2a:	691a      	ldr	r2, [r3, #16]
 8004b2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004b2e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004b30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004b32:	3301      	adds	r3, #1
 8004b34:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8004b36:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004b38:	3b01      	subs	r3, #1
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004b3e:	2320      	movs	r3, #32
 8004b40:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004b44:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8004b48:	b2db      	uxtb	r3, r3
 8004b4a:	2b40      	cmp	r3, #64	; 0x40
 8004b4c:	d025      	beq.n	8004b9a <HAL_I2C_EV_IRQHandler+0x66a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004b54:	2312      	movs	r3, #18
 8004b56:	6323      	str	r3, [r4, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004b58:	4620      	mov	r0, r4
 8004b5a:	f7ff fb46 	bl	80041ea <HAL_I2C_MasterRxCpltCallback>
 8004b5e:	e518      	b.n	8004592 <HAL_I2C_EV_IRQHandler+0x62>
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b60:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004b62:	f042 0220 	orr.w	r2, r2, #32
 8004b66:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004b68:	685a      	ldr	r2, [r3, #4]
 8004b6a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004b6e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b70:	6823      	ldr	r3, [r4, #0]
 8004b72:	691a      	ldr	r2, [r3, #16]
 8004b74:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004b76:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004b78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004b7a:	3301      	adds	r3, #1
 8004b7c:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8004b7e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004b80:	3b01      	subs	r3, #1
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004b86:	2320      	movs	r3, #32
 8004b88:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004b92:	4620      	mov	r0, r4
 8004b94:	f7ff fb98 	bl	80042c8 <HAL_I2C_ErrorCallback>
 8004b98:	e4fb      	b.n	8004592 <HAL_I2C_EV_IRQHandler+0x62>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004ba0:	6323      	str	r3, [r4, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004ba2:	4620      	mov	r0, r4
 8004ba4:	f7ff fb8f 	bl	80042c6 <HAL_I2C_MemRxCpltCallback>
 8004ba8:	e4f3      	b.n	8004592 <HAL_I2C_EV_IRQHandler+0x62>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004baa:	f015 0f04 	tst.w	r5, #4
 8004bae:	f43f acf0 	beq.w	8004592 <HAL_I2C_EV_IRQHandler+0x62>
 8004bb2:	f410 7f00 	tst.w	r0, #512	; 0x200
 8004bb6:	f43f acec 	beq.w	8004592 <HAL_I2C_EV_IRQHandler+0x62>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004bba:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  if (hi2c->XferCount == 4U)
 8004bbc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004bbe:	b292      	uxth	r2, r2
 8004bc0:	2a04      	cmp	r2, #4
 8004bc2:	d012      	beq.n	8004bea <HAL_I2C_EV_IRQHandler+0x6ba>
  else if (hi2c->XferCount == 3U)
 8004bc4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004bc6:	b292      	uxth	r2, r2
 8004bc8:	2a03      	cmp	r2, #3
 8004bca:	d01e      	beq.n	8004c0a <HAL_I2C_EV_IRQHandler+0x6da>
  else if (hi2c->XferCount == 2U)
 8004bcc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004bce:	b292      	uxth	r2, r2
 8004bd0:	2a02      	cmp	r2, #2
 8004bd2:	d033      	beq.n	8004c3c <HAL_I2C_EV_IRQHandler+0x70c>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bd4:	691a      	ldr	r2, [r3, #16]
 8004bd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004bd8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004bda:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004bdc:	3301      	adds	r3, #1
 8004bde:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8004be0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004be2:	3b01      	subs	r3, #1
 8004be4:	b29b      	uxth	r3, r3
 8004be6:	8563      	strh	r3, [r4, #42]	; 0x2a
 8004be8:	e4d3      	b.n	8004592 <HAL_I2C_EV_IRQHandler+0x62>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004bea:	685a      	ldr	r2, [r3, #4]
 8004bec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bf0:	605a      	str	r2, [r3, #4]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bf2:	6823      	ldr	r3, [r4, #0]
 8004bf4:	691a      	ldr	r2, [r3, #16]
 8004bf6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004bf8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004bfa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004bfc:	3301      	adds	r3, #1
 8004bfe:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8004c00:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004c02:	3b01      	subs	r3, #1
 8004c04:	b29b      	uxth	r3, r3
 8004c06:	8563      	strh	r3, [r4, #42]	; 0x2a
 8004c08:	e4c3      	b.n	8004592 <HAL_I2C_EV_IRQHandler+0x62>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004c0a:	685a      	ldr	r2, [r3, #4]
 8004c0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c10:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004c12:	2904      	cmp	r1, #4
 8004c14:	d006      	beq.n	8004c24 <HAL_I2C_EV_IRQHandler+0x6f4>
 8004c16:	2902      	cmp	r1, #2
 8004c18:	d004      	beq.n	8004c24 <HAL_I2C_EV_IRQHandler+0x6f4>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c1a:	6822      	ldr	r2, [r4, #0]
 8004c1c:	6813      	ldr	r3, [r2, #0]
 8004c1e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c22:	6013      	str	r3, [r2, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c24:	6823      	ldr	r3, [r4, #0]
 8004c26:	691a      	ldr	r2, [r3, #16]
 8004c28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c2a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004c2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c2e:	3301      	adds	r3, #1
 8004c30:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8004c32:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004c34:	3b01      	subs	r3, #1
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	8563      	strh	r3, [r4, #42]	; 0x2a
 8004c3a:	e4aa      	b.n	8004592 <HAL_I2C_EV_IRQHandler+0x62>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004c3c:	2901      	cmp	r1, #1
 8004c3e:	d00a      	beq.n	8004c56 <HAL_I2C_EV_IRQHandler+0x726>
 8004c40:	2910      	cmp	r1, #16
 8004c42:	d008      	beq.n	8004c56 <HAL_I2C_EV_IRQHandler+0x726>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004c44:	2904      	cmp	r1, #4
 8004c46:	d035      	beq.n	8004cb4 <HAL_I2C_EV_IRQHandler+0x784>
 8004c48:	2902      	cmp	r1, #2
 8004c4a:	d033      	beq.n	8004cb4 <HAL_I2C_EV_IRQHandler+0x784>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c4c:	681a      	ldr	r2, [r3, #0]
 8004c4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c52:	601a      	str	r2, [r3, #0]
 8004c54:	e003      	b.n	8004c5e <HAL_I2C_EV_IRQHandler+0x72e>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c5c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c5e:	6823      	ldr	r3, [r4, #0]
 8004c60:	691a      	ldr	r2, [r3, #16]
 8004c62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c64:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004c66:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004c68:	1c53      	adds	r3, r2, #1
 8004c6a:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8004c6c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004c6e:	3b01      	subs	r3, #1
 8004c70:	b29b      	uxth	r3, r3
 8004c72:	8563      	strh	r3, [r4, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c74:	6823      	ldr	r3, [r4, #0]
 8004c76:	691b      	ldr	r3, [r3, #16]
 8004c78:	7053      	strb	r3, [r2, #1]
    hi2c->pBuffPtr++;
 8004c7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c7c:	3301      	adds	r3, #1
 8004c7e:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8004c80:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004c82:	3b01      	subs	r3, #1
 8004c84:	b29b      	uxth	r3, r3
 8004c86:	8563      	strh	r3, [r4, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004c88:	6822      	ldr	r2, [r4, #0]
 8004c8a:	6853      	ldr	r3, [r2, #4]
 8004c8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c90:	6053      	str	r3, [r2, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004c92:	2320      	movs	r3, #32
 8004c94:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004c98:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8004c9c:	b2db      	uxtb	r3, r3
 8004c9e:	2b40      	cmp	r3, #64	; 0x40
 8004ca0:	d00d      	beq.n	8004cbe <HAL_I2C_EV_IRQHandler+0x78e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004ca8:	2312      	movs	r3, #18
 8004caa:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004cac:	4620      	mov	r0, r4
 8004cae:	f7ff fa9c 	bl	80041ea <HAL_I2C_MasterRxCpltCallback>
 8004cb2:	e46e      	b.n	8004592 <HAL_I2C_EV_IRQHandler+0x62>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cb4:	681a      	ldr	r2, [r3, #0]
 8004cb6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004cba:	601a      	str	r2, [r3, #0]
 8004cbc:	e7cf      	b.n	8004c5e <HAL_I2C_EV_IRQHandler+0x72e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004cc4:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004cc6:	4620      	mov	r0, r4
 8004cc8:	f7ff fafd 	bl	80042c6 <HAL_I2C_MemRxCpltCallback>
 8004ccc:	e461      	b.n	8004592 <HAL_I2C_EV_IRQHandler+0x62>
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004cce:	699d      	ldr	r5, [r3, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004cd0:	695a      	ldr	r2, [r3, #20]
 8004cd2:	e443      	b.n	800455c <HAL_I2C_EV_IRQHandler+0x2c>
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004cd4:	685a      	ldr	r2, [r3, #4]
 8004cd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cda:	605a      	str	r2, [r3, #4]
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004cdc:	f085 0104 	eor.w	r1, r5, #4
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004ce0:	f3c1 0180 	ubfx	r1, r1, #2, #1
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004ce4:	f015 0f80 	tst.w	r5, #128	; 0x80
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004ce8:	bf0c      	ite	eq
 8004cea:	89a2      	ldrheq	r2, [r4, #12]
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004cec:	8b22      	ldrhne	r2, [r4, #24]
    __HAL_UNLOCK(hi2c);
 8004cee:	2300      	movs	r3, #0
 8004cf0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004cf4:	4620      	mov	r0, r4
 8004cf6:	f7ff fa7b 	bl	80041f0 <HAL_I2C_AddrCallback>
 8004cfa:	e44a      	b.n	8004592 <HAL_I2C_EV_IRQHandler+0x62>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004cfc:	f012 0f10 	tst.w	r2, #16
 8004d00:	d002      	beq.n	8004d08 <HAL_I2C_EV_IRQHandler+0x7d8>
 8004d02:	f410 7f00 	tst.w	r0, #512	; 0x200
 8004d06:	d13b      	bne.n	8004d80 <HAL_I2C_EV_IRQHandler+0x850>
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004d08:	f001 01f7 	and.w	r1, r1, #247	; 0xf7
 8004d0c:	2921      	cmp	r1, #33	; 0x21
 8004d0e:	f000 80f6 	beq.w	8004efe <HAL_I2C_EV_IRQHandler+0x9ce>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004d12:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004d16:	f000 813d 	beq.w	8004f94 <HAL_I2C_EV_IRQHandler+0xa64>
 8004d1a:	f410 6f80 	tst.w	r0, #1024	; 0x400
 8004d1e:	f000 8139 	beq.w	8004f94 <HAL_I2C_EV_IRQHandler+0xa64>
 8004d22:	f012 0f04 	tst.w	r2, #4
 8004d26:	f040 8139 	bne.w	8004f9c <HAL_I2C_EV_IRQHandler+0xa6c>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004d2a:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8004d2e:	b2d1      	uxtb	r1, r2
  if (hi2c->XferCount != 0U)
 8004d30:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004d32:	b292      	uxth	r2, r2
 8004d34:	2a00      	cmp	r2, #0
 8004d36:	f43f ac2c 	beq.w	8004592 <HAL_I2C_EV_IRQHandler+0x62>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d3a:	691a      	ldr	r2, [r3, #16]
 8004d3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d3e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004d40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d42:	3301      	adds	r3, #1
 8004d44:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8004d46:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004d48:	3b01      	subs	r3, #1
 8004d4a:	b29b      	uxth	r3, r3
 8004d4c:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004d4e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004d50:	b29b      	uxth	r3, r3
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	f47f ac1d 	bne.w	8004592 <HAL_I2C_EV_IRQHandler+0x62>
 8004d58:	292a      	cmp	r1, #42	; 0x2a
 8004d5a:	f47f ac1a 	bne.w	8004592 <HAL_I2C_EV_IRQHandler+0x62>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004d5e:	6822      	ldr	r2, [r4, #0]
 8004d60:	6853      	ldr	r3, [r2, #4]
 8004d62:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d66:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004d68:	2322      	movs	r3, #34	; 0x22
 8004d6a:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004d6c:	2328      	movs	r3, #40	; 0x28
 8004d6e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004d72:	4620      	mov	r0, r4
 8004d74:	f7ff fa3b 	bl	80041ee <HAL_I2C_SlaveRxCpltCallback>
 8004d78:	e40b      	b.n	8004592 <HAL_I2C_EV_IRQHandler+0x62>
 8004d7a:	bf00      	nop
 8004d7c:	20000000 	.word	0x20000000
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004d80:	f894 503d 	ldrb.w	r5, [r4, #61]	; 0x3d
 8004d84:	b2ed      	uxtb	r5, r5
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d86:	685a      	ldr	r2, [r3, #4]
 8004d88:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004d8c:	605a      	str	r2, [r3, #4]
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004d8e:	2300      	movs	r3, #0
 8004d90:	930d      	str	r3, [sp, #52]	; 0x34
 8004d92:	6823      	ldr	r3, [r4, #0]
 8004d94:	695a      	ldr	r2, [r3, #20]
 8004d96:	920d      	str	r2, [sp, #52]	; 0x34
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	f042 0201 	orr.w	r2, r2, #1
 8004d9e:	601a      	str	r2, [r3, #0]
 8004da0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004da2:	6822      	ldr	r2, [r4, #0]
 8004da4:	6813      	ldr	r3, [r2, #0]
 8004da6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004daa:	6013      	str	r3, [r2, #0]
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004dac:	6823      	ldr	r3, [r4, #0]
 8004dae:	685a      	ldr	r2, [r3, #4]
 8004db0:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8004db4:	d038      	beq.n	8004e28 <HAL_I2C_EV_IRQHandler+0x8f8>
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004db6:	f005 02f7 	and.w	r2, r5, #247	; 0xf7
 8004dba:	2a22      	cmp	r2, #34	; 0x22
 8004dbc:	d01f      	beq.n	8004dfe <HAL_I2C_EV_IRQHandler+0x8ce>
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8004dbe:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8004dc0:	6812      	ldr	r2, [r2, #0]
 8004dc2:	6852      	ldr	r2, [r2, #4]
 8004dc4:	b292      	uxth	r2, r2
 8004dc6:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 8004dc8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004dca:	b292      	uxth	r2, r2
 8004dcc:	b11a      	cbz	r2, 8004dd6 <HAL_I2C_EV_IRQHandler+0x8a6>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004dce:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004dd0:	f042 0204 	orr.w	r2, r2, #4
 8004dd4:	6422      	str	r2, [r4, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004dd6:	685a      	ldr	r2, [r3, #4]
 8004dd8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ddc:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004dde:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8004de0:	f7fe f802 	bl	8002de8 <HAL_DMA_GetState>
 8004de4:	2801      	cmp	r0, #1
 8004de6:	d01f      	beq.n	8004e28 <HAL_I2C_EV_IRQHandler+0x8f8>
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004de8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004dea:	4a77      	ldr	r2, [pc, #476]	; (8004fc8 <HAL_I2C_EV_IRQHandler+0xa98>)
 8004dec:	635a      	str	r2, [r3, #52]	; 0x34
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004dee:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8004df0:	f7fd ffae 	bl	8002d50 <HAL_DMA_Abort_IT>
 8004df4:	b1c0      	cbz	r0, 8004e28 <HAL_I2C_EV_IRQHandler+0x8f8>
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004df6:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8004df8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004dfa:	4798      	blx	r3
 8004dfc:	e014      	b.n	8004e28 <HAL_I2C_EV_IRQHandler+0x8f8>
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8004dfe:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004e00:	6812      	ldr	r2, [r2, #0]
 8004e02:	6852      	ldr	r2, [r2, #4]
 8004e04:	b292      	uxth	r2, r2
 8004e06:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 8004e08:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004e0a:	b292      	uxth	r2, r2
 8004e0c:	b11a      	cbz	r2, 8004e16 <HAL_I2C_EV_IRQHandler+0x8e6>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004e0e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004e10:	f042 0204 	orr.w	r2, r2, #4
 8004e14:	6422      	str	r2, [r4, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004e16:	685a      	ldr	r2, [r3, #4]
 8004e18:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e1c:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004e1e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004e20:	f7fd ffe2 	bl	8002de8 <HAL_DMA_GetState>
 8004e24:	2801      	cmp	r0, #1
 8004e26:	d142      	bne.n	8004eae <HAL_I2C_EV_IRQHandler+0x97e>
  if (hi2c->XferCount != 0U)
 8004e28:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004e2a:	b29b      	uxth	r3, r3
 8004e2c:	b323      	cbz	r3, 8004e78 <HAL_I2C_EV_IRQHandler+0x948>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004e2e:	6823      	ldr	r3, [r4, #0]
 8004e30:	695a      	ldr	r2, [r3, #20]
 8004e32:	f012 0f04 	tst.w	r2, #4
 8004e36:	d009      	beq.n	8004e4c <HAL_I2C_EV_IRQHandler+0x91c>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e38:	691a      	ldr	r2, [r3, #16]
 8004e3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004e3c:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8004e3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004e40:	3301      	adds	r3, #1
 8004e42:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8004e44:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004e46:	3b01      	subs	r3, #1
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004e4c:	6823      	ldr	r3, [r4, #0]
 8004e4e:	695a      	ldr	r2, [r3, #20]
 8004e50:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004e54:	d009      	beq.n	8004e6a <HAL_I2C_EV_IRQHandler+0x93a>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e56:	691a      	ldr	r2, [r3, #16]
 8004e58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004e5a:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8004e5c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004e5e:	3301      	adds	r3, #1
 8004e60:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8004e62:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004e64:	3b01      	subs	r3, #1
 8004e66:	b29b      	uxth	r3, r3
 8004e68:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->XferCount != 0U)
 8004e6a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004e6c:	b29b      	uxth	r3, r3
 8004e6e:	b11b      	cbz	r3, 8004e78 <HAL_I2C_EV_IRQHandler+0x948>
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004e70:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004e72:	f043 0304 	orr.w	r3, r3, #4
 8004e76:	6423      	str	r3, [r4, #64]	; 0x40
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004e78:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004e7a:	bb23      	cbnz	r3, 8004ec6 <HAL_I2C_EV_IRQHandler+0x996>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004e7c:	2d2a      	cmp	r5, #42	; 0x2a
 8004e7e:	d027      	beq.n	8004ed0 <HAL_I2C_EV_IRQHandler+0x9a0>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004e80:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8004e84:	b2db      	uxtb	r3, r3
 8004e86:	2b28      	cmp	r3, #40	; 0x28
 8004e88:	d02b      	beq.n	8004ee2 <HAL_I2C_EV_IRQHandler+0x9b2>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004e8a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004e8c:	2b22      	cmp	r3, #34	; 0x22
 8004e8e:	d002      	beq.n	8004e96 <HAL_I2C_EV_IRQHandler+0x966>
 8004e90:	2d22      	cmp	r5, #34	; 0x22
 8004e92:	f47f ab7e 	bne.w	8004592 <HAL_I2C_EV_IRQHandler+0x62>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004e96:	2300      	movs	r3, #0
 8004e98:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004e9a:	2220      	movs	r2, #32
 8004e9c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ea0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004ea4:	4620      	mov	r0, r4
 8004ea6:	f7ff f9a2 	bl	80041ee <HAL_I2C_SlaveRxCpltCallback>
 8004eaa:	f7ff bb72 	b.w	8004592 <HAL_I2C_EV_IRQHandler+0x62>
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004eae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004eb0:	4a45      	ldr	r2, [pc, #276]	; (8004fc8 <HAL_I2C_EV_IRQHandler+0xa98>)
 8004eb2:	635a      	str	r2, [r3, #52]	; 0x34
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004eb4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004eb6:	f7fd ff4b 	bl	8002d50 <HAL_DMA_Abort_IT>
 8004eba:	2800      	cmp	r0, #0
 8004ebc:	d0b4      	beq.n	8004e28 <HAL_I2C_EV_IRQHandler+0x8f8>
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004ebe:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004ec0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004ec2:	4798      	blx	r3
 8004ec4:	e7b0      	b.n	8004e28 <HAL_I2C_EV_IRQHandler+0x8f8>
    I2C_ITError(hi2c);
 8004ec6:	4620      	mov	r0, r4
 8004ec8:	f7ff fa72 	bl	80043b0 <I2C_ITError>
 8004ecc:	f7ff bb61 	b.w	8004592 <HAL_I2C_EV_IRQHandler+0x62>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004ed4:	2328      	movs	r3, #40	; 0x28
 8004ed6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004eda:	4620      	mov	r0, r4
 8004edc:	f7ff f987 	bl	80041ee <HAL_I2C_SlaveRxCpltCallback>
 8004ee0:	e7ce      	b.n	8004e80 <HAL_I2C_EV_IRQHandler+0x950>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004ee2:	4b3a      	ldr	r3, [pc, #232]	; (8004fcc <HAL_I2C_EV_IRQHandler+0xa9c>)
 8004ee4:	62e3      	str	r3, [r4, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004eea:	2220      	movs	r2, #32
 8004eec:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ef0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004ef4:	4620      	mov	r0, r4
 8004ef6:	f7ff f97c 	bl	80041f2 <HAL_I2C_ListenCpltCallback>
 8004efa:	f7ff bb4a 	b.w	8004592 <HAL_I2C_EV_IRQHandler+0x62>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004efe:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004f02:	d02e      	beq.n	8004f62 <HAL_I2C_EV_IRQHandler+0xa32>
 8004f04:	f410 6f80 	tst.w	r0, #1024	; 0x400
 8004f08:	d02b      	beq.n	8004f62 <HAL_I2C_EV_IRQHandler+0xa32>
 8004f0a:	f012 0f04 	tst.w	r2, #4
 8004f0e:	d12c      	bne.n	8004f6a <HAL_I2C_EV_IRQHandler+0xa3a>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004f10:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8004f14:	b2d1      	uxtb	r1, r2
  if (hi2c->XferCount != 0U)
 8004f16:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004f18:	b292      	uxth	r2, r2
 8004f1a:	2a00      	cmp	r2, #0
 8004f1c:	f43f ab39 	beq.w	8004592 <HAL_I2C_EV_IRQHandler+0x62>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f20:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004f22:	7812      	ldrb	r2, [r2, #0]
 8004f24:	611a      	str	r2, [r3, #16]
    hi2c->pBuffPtr++;
 8004f26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f28:	3301      	adds	r3, #1
 8004f2a:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8004f2c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004f2e:	3b01      	subs	r3, #1
 8004f30:	b29b      	uxth	r3, r3
 8004f32:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004f34:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004f36:	b29b      	uxth	r3, r3
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	f47f ab2a 	bne.w	8004592 <HAL_I2C_EV_IRQHandler+0x62>
 8004f3e:	2929      	cmp	r1, #41	; 0x29
 8004f40:	f47f ab27 	bne.w	8004592 <HAL_I2C_EV_IRQHandler+0x62>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004f44:	6822      	ldr	r2, [r4, #0]
 8004f46:	6853      	ldr	r3, [r2, #4]
 8004f48:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f4c:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004f4e:	2321      	movs	r3, #33	; 0x21
 8004f50:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004f52:	2328      	movs	r3, #40	; 0x28
 8004f54:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004f58:	4620      	mov	r0, r4
 8004f5a:	f7ff f947 	bl	80041ec <HAL_I2C_SlaveTxCpltCallback>
 8004f5e:	f7ff bb18 	b.w	8004592 <HAL_I2C_EV_IRQHandler+0x62>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004f62:	f012 0f04 	tst.w	r2, #4
 8004f66:	f43f ab14 	beq.w	8004592 <HAL_I2C_EV_IRQHandler+0x62>
 8004f6a:	f410 7f00 	tst.w	r0, #512	; 0x200
 8004f6e:	f43f ab10 	beq.w	8004592 <HAL_I2C_EV_IRQHandler+0x62>
  if (hi2c->XferCount != 0U)
 8004f72:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004f74:	b292      	uxth	r2, r2
 8004f76:	2a00      	cmp	r2, #0
 8004f78:	f43f ab0b 	beq.w	8004592 <HAL_I2C_EV_IRQHandler+0x62>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f7c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004f7e:	7812      	ldrb	r2, [r2, #0]
 8004f80:	611a      	str	r2, [r3, #16]
    hi2c->pBuffPtr++;
 8004f82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f84:	3301      	adds	r3, #1
 8004f86:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8004f88:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004f8a:	3b01      	subs	r3, #1
 8004f8c:	b29b      	uxth	r3, r3
 8004f8e:	8563      	strh	r3, [r4, #42]	; 0x2a
 8004f90:	f7ff baff 	b.w	8004592 <HAL_I2C_EV_IRQHandler+0x62>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004f94:	f012 0f04 	tst.w	r2, #4
 8004f98:	f43f aafb 	beq.w	8004592 <HAL_I2C_EV_IRQHandler+0x62>
 8004f9c:	f410 7f00 	tst.w	r0, #512	; 0x200
 8004fa0:	f43f aaf7 	beq.w	8004592 <HAL_I2C_EV_IRQHandler+0x62>
  if (hi2c->XferCount != 0U)
 8004fa4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004fa6:	b292      	uxth	r2, r2
 8004fa8:	2a00      	cmp	r2, #0
 8004faa:	f43f aaf2 	beq.w	8004592 <HAL_I2C_EV_IRQHandler+0x62>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fae:	691a      	ldr	r2, [r3, #16]
 8004fb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004fb2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004fb4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004fb6:	3301      	adds	r3, #1
 8004fb8:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8004fba:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004fbc:	3b01      	subs	r3, #1
 8004fbe:	b29b      	uxth	r3, r3
 8004fc0:	8563      	strh	r3, [r4, #42]	; 0x2a
      }
 8004fc2:	f7ff bae6 	b.w	8004592 <HAL_I2C_EV_IRQHandler+0x62>
 8004fc6:	bf00      	nop
 8004fc8:	080042cd 	.word	0x080042cd
 8004fcc:	ffff0000 	.word	0xffff0000

08004fd0 <HAL_I2C_ER_IRQHandler>:
{
 8004fd0:	b570      	push	{r4, r5, r6, lr}
 8004fd2:	4604      	mov	r4, r0
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8004fd4:	6803      	ldr	r3, [r0, #0]
 8004fd6:	695d      	ldr	r5, [r3, #20]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8004fd8:	685a      	ldr	r2, [r3, #4]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004fda:	f890 103e 	ldrb.w	r1, [r0, #62]	; 0x3e
 8004fde:	b2c9      	uxtb	r1, r1
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004fe0:	f415 7f80 	tst.w	r5, #256	; 0x100
 8004fe4:	d012      	beq.n	800500c <HAL_I2C_ER_IRQHandler+0x3c>
 8004fe6:	f412 7f80 	tst.w	r2, #256	; 0x100
 8004fea:	d00f      	beq.n	800500c <HAL_I2C_ER_IRQHandler+0x3c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004fec:	f46f 7080 	mvn.w	r0, #256	; 0x100
 8004ff0:	6158      	str	r0, [r3, #20]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8004ff2:	6820      	ldr	r0, [r4, #0]
 8004ff4:	6803      	ldr	r3, [r0, #0]
 8004ff6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ffa:	6003      	str	r3, [r0, #0]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004ffc:	f415 7f00 	tst.w	r5, #512	; 0x200
 8005000:	d122      	bne.n	8005048 <HAL_I2C_ER_IRQHandler+0x78>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005002:	f415 6f80 	tst.w	r5, #1024	; 0x400
 8005006:	d152      	bne.n	80050ae <HAL_I2C_ER_IRQHandler+0xde>
    error |= HAL_I2C_ERROR_BERR;
 8005008:	2601      	movs	r6, #1
 800500a:	e0b5      	b.n	8005178 <HAL_I2C_ER_IRQHandler+0x1a8>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800500c:	f415 7f00 	tst.w	r5, #512	; 0x200
 8005010:	d01c      	beq.n	800504c <HAL_I2C_ER_IRQHandler+0x7c>
 8005012:	f412 7f80 	tst.w	r2, #256	; 0x100
 8005016:	d105      	bne.n	8005024 <HAL_I2C_ER_IRQHandler+0x54>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005018:	f415 6f80 	tst.w	r5, #1024	; 0x400
 800501c:	f040 80b3 	bne.w	8005186 <HAL_I2C_ER_IRQHandler+0x1b6>
 8005020:	2600      	movs	r6, #0
 8005022:	e0a9      	b.n	8005178 <HAL_I2C_ER_IRQHandler+0x1a8>
 8005024:	2600      	movs	r6, #0
    error |= HAL_I2C_ERROR_ARLO;
 8005026:	f046 0602 	orr.w	r6, r6, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800502a:	6823      	ldr	r3, [r4, #0]
 800502c:	f46f 7000 	mvn.w	r0, #512	; 0x200
 8005030:	6158      	str	r0, [r3, #20]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005032:	f415 6f80 	tst.w	r5, #1024	; 0x400
 8005036:	d113      	bne.n	8005060 <HAL_I2C_ER_IRQHandler+0x90>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005038:	f415 6f00 	tst.w	r5, #2048	; 0x800
 800503c:	d030      	beq.n	80050a0 <HAL_I2C_ER_IRQHandler+0xd0>
 800503e:	f412 7f80 	tst.w	r2, #256	; 0x100
 8005042:	f000 809d 	beq.w	8005180 <HAL_I2C_ER_IRQHandler+0x1b0>
 8005046:	e025      	b.n	8005094 <HAL_I2C_ER_IRQHandler+0xc4>
    error |= HAL_I2C_ERROR_BERR;
 8005048:	2601      	movs	r6, #1
 800504a:	e7ec      	b.n	8005026 <HAL_I2C_ER_IRQHandler+0x56>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800504c:	f415 6f80 	tst.w	r5, #1024	; 0x400
 8005050:	f000 8091 	beq.w	8005176 <HAL_I2C_ER_IRQHandler+0x1a6>
 8005054:	f412 7f80 	tst.w	r2, #256	; 0x100
 8005058:	d101      	bne.n	800505e <HAL_I2C_ER_IRQHandler+0x8e>
 800505a:	2600      	movs	r6, #0
 800505c:	e090      	b.n	8005180 <HAL_I2C_ER_IRQHandler+0x1b0>
 800505e:	2600      	movs	r6, #0
    tmp2 = hi2c->XferCount;
 8005060:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005062:	b29b      	uxth	r3, r3
    tmp3 = hi2c->State;
 8005064:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8005068:	b2d2      	uxtb	r2, r2
    tmp4 = hi2c->PreviousState;
 800506a:	6b20      	ldr	r0, [r4, #48]	; 0x30
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800506c:	2920      	cmp	r1, #32
 800506e:	d020      	beq.n	80050b2 <HAL_I2C_ER_IRQHandler+0xe2>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005070:	6823      	ldr	r3, [r4, #0]
 8005072:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005076:	615a      	str	r2, [r3, #20]
      error |= HAL_I2C_ERROR_AF;
 8005078:	f046 0604 	orr.w	r6, r6, #4
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800507c:	2910      	cmp	r1, #16
 800507e:	d001      	beq.n	8005084 <HAL_I2C_ER_IRQHandler+0xb4>
 8005080:	2940      	cmp	r1, #64	; 0x40
 8005082:	d104      	bne.n	800508e <HAL_I2C_ER_IRQHandler+0xbe>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005084:	6822      	ldr	r2, [r4, #0]
 8005086:	6813      	ldr	r3, [r2, #0]
 8005088:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800508c:	6013      	str	r3, [r2, #0]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800508e:	f415 6f00 	tst.w	r5, #2048	; 0x800
 8005092:	d005      	beq.n	80050a0 <HAL_I2C_ER_IRQHandler+0xd0>
    error |= HAL_I2C_ERROR_OVR;
 8005094:	f046 0608 	orr.w	r6, r6, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005098:	6823      	ldr	r3, [r4, #0]
 800509a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800509e:	615a      	str	r2, [r3, #20]
    hi2c->ErrorCode |= error;
 80050a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80050a2:	431e      	orrs	r6, r3
 80050a4:	6426      	str	r6, [r4, #64]	; 0x40
    I2C_ITError(hi2c);
 80050a6:	4620      	mov	r0, r4
 80050a8:	f7ff f982 	bl	80043b0 <I2C_ITError>
}
 80050ac:	e06a      	b.n	8005184 <HAL_I2C_ER_IRQHandler+0x1b4>
    error |= HAL_I2C_ERROR_BERR;
 80050ae:	2601      	movs	r6, #1
 80050b0:	e7d6      	b.n	8005060 <HAL_I2C_ER_IRQHandler+0x90>
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80050b2:	b92b      	cbnz	r3, 80050c0 <HAL_I2C_ER_IRQHandler+0xf0>
 80050b4:	f002 03f7 	and.w	r3, r2, #247	; 0xf7
 80050b8:	2b21      	cmp	r3, #33	; 0x21
 80050ba:	d00a      	beq.n	80050d2 <HAL_I2C_ER_IRQHandler+0x102>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80050bc:	2a28      	cmp	r2, #40	; 0x28
 80050be:	d006      	beq.n	80050ce <HAL_I2C_ER_IRQHandler+0xfe>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80050c0:	6823      	ldr	r3, [r4, #0]
 80050c2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80050c6:	615a      	str	r2, [r3, #20]
      error |= HAL_I2C_ERROR_AF;
 80050c8:	f046 0604 	orr.w	r6, r6, #4
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80050cc:	e7df      	b.n	800508e <HAL_I2C_ER_IRQHandler+0xbe>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80050ce:	2821      	cmp	r0, #33	; 0x21
 80050d0:	d1f6      	bne.n	80050c0 <HAL_I2C_ER_IRQHandler+0xf0>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80050d2:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80050d6:	b2db      	uxtb	r3, r3
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80050d8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80050da:	2a08      	cmp	r2, #8
 80050dc:	d001      	beq.n	80050e2 <HAL_I2C_ER_IRQHandler+0x112>
 80050de:	2a20      	cmp	r2, #32
 80050e0:	d101      	bne.n	80050e6 <HAL_I2C_ER_IRQHandler+0x116>
 80050e2:	2b28      	cmp	r3, #40	; 0x28
 80050e4:	d009      	beq.n	80050fa <HAL_I2C_ER_IRQHandler+0x12a>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80050e6:	2b21      	cmp	r3, #33	; 0x21
 80050e8:	d022      	beq.n	8005130 <HAL_I2C_ER_IRQHandler+0x160>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80050ea:	6823      	ldr	r3, [r4, #0]
 80050ec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80050f0:	615a      	str	r2, [r3, #20]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80050f2:	f415 6f00 	tst.w	r5, #2048	; 0x800
 80050f6:	d043      	beq.n	8005180 <HAL_I2C_ER_IRQHandler+0x1b0>
 80050f8:	e7cc      	b.n	8005094 <HAL_I2C_ER_IRQHandler+0xc4>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80050fa:	4b24      	ldr	r3, [pc, #144]	; (800518c <HAL_I2C_ER_IRQHandler+0x1bc>)
 80050fc:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80050fe:	6822      	ldr	r2, [r4, #0]
 8005100:	6853      	ldr	r3, [r2, #4]
 8005102:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005106:	6053      	str	r3, [r2, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005108:	6823      	ldr	r3, [r4, #0]
 800510a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800510e:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005110:	6822      	ldr	r2, [r4, #0]
 8005112:	6813      	ldr	r3, [r2, #0]
 8005114:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005118:	6013      	str	r3, [r2, #0]
    hi2c->PreviousState = I2C_STATE_NONE;
 800511a:	2300      	movs	r3, #0
 800511c:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800511e:	2220      	movs	r2, #32
 8005120:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005124:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 8005128:	4620      	mov	r0, r4
 800512a:	f7ff f862 	bl	80041f2 <HAL_I2C_ListenCpltCallback>
 800512e:	e7e0      	b.n	80050f2 <HAL_I2C_ER_IRQHandler+0x122>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005130:	4b16      	ldr	r3, [pc, #88]	; (800518c <HAL_I2C_ER_IRQHandler+0x1bc>)
 8005132:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005134:	2321      	movs	r3, #33	; 0x21
 8005136:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005138:	2320      	movs	r3, #32
 800513a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800513e:	2300      	movs	r3, #0
 8005140:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005144:	6822      	ldr	r2, [r4, #0]
 8005146:	6853      	ldr	r3, [r2, #4]
 8005148:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800514c:	6053      	str	r3, [r2, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800514e:	6823      	ldr	r3, [r4, #0]
 8005150:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005154:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005156:	6822      	ldr	r2, [r4, #0]
 8005158:	6813      	ldr	r3, [r2, #0]
 800515a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800515e:	6013      	str	r3, [r2, #0]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8005160:	6823      	ldr	r3, [r4, #0]
 8005162:	695a      	ldr	r2, [r3, #20]
 8005164:	f012 0f80 	tst.w	r2, #128	; 0x80
    hi2c->Instance->DR = 0x00U;
 8005168:	bf1c      	itt	ne
 800516a:	2200      	movne	r2, #0
 800516c:	611a      	strne	r2, [r3, #16]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800516e:	4620      	mov	r0, r4
 8005170:	f7ff f83c 	bl	80041ec <HAL_I2C_SlaveTxCpltCallback>
 8005174:	e7bd      	b.n	80050f2 <HAL_I2C_ER_IRQHandler+0x122>
 8005176:	2600      	movs	r6, #0
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005178:	f415 6f00 	tst.w	r5, #2048	; 0x800
 800517c:	f47f af5f 	bne.w	800503e <HAL_I2C_ER_IRQHandler+0x6e>
  if (error != HAL_I2C_ERROR_NONE)
 8005180:	2e00      	cmp	r6, #0
 8005182:	d18d      	bne.n	80050a0 <HAL_I2C_ER_IRQHandler+0xd0>
}
 8005184:	bd70      	pop	{r4, r5, r6, pc}
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005186:	2600      	movs	r6, #0
 8005188:	e7fa      	b.n	8005180 <HAL_I2C_ER_IRQHandler+0x1b0>
 800518a:	bf00      	nop
 800518c:	ffff0000 	.word	0xffff0000

08005190 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005190:	2800      	cmp	r0, #0
 8005192:	f000 8201 	beq.w	8005598 <HAL_RCC_OscConfig+0x408>
{
 8005196:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800519a:	b082      	sub	sp, #8
 800519c:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800519e:	6803      	ldr	r3, [r0, #0]
 80051a0:	f013 0f01 	tst.w	r3, #1
 80051a4:	d02c      	beq.n	8005200 <HAL_RCC_OscConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80051a6:	4b9f      	ldr	r3, [pc, #636]	; (8005424 <HAL_RCC_OscConfig+0x294>)
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	f003 030c 	and.w	r3, r3, #12
 80051ae:	2b04      	cmp	r3, #4
 80051b0:	d01d      	beq.n	80051ee <HAL_RCC_OscConfig+0x5e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80051b2:	4b9c      	ldr	r3, [pc, #624]	; (8005424 <HAL_RCC_OscConfig+0x294>)
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	f003 030c 	and.w	r3, r3, #12
 80051ba:	2b08      	cmp	r3, #8
 80051bc:	d012      	beq.n	80051e4 <HAL_RCC_OscConfig+0x54>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80051be:	6863      	ldr	r3, [r4, #4]
 80051c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051c4:	d041      	beq.n	800524a <HAL_RCC_OscConfig+0xba>
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d155      	bne.n	8005276 <HAL_RCC_OscConfig+0xe6>
 80051ca:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80051ce:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80051d8:	601a      	str	r2, [r3, #0]
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80051e0:	601a      	str	r2, [r3, #0]
 80051e2:	e037      	b.n	8005254 <HAL_RCC_OscConfig+0xc4>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80051e4:	4b8f      	ldr	r3, [pc, #572]	; (8005424 <HAL_RCC_OscConfig+0x294>)
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80051ec:	d0e7      	beq.n	80051be <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051ee:	4b8d      	ldr	r3, [pc, #564]	; (8005424 <HAL_RCC_OscConfig+0x294>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80051f6:	d003      	beq.n	8005200 <HAL_RCC_OscConfig+0x70>
 80051f8:	6863      	ldr	r3, [r4, #4]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	f000 81ce 	beq.w	800559c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005200:	6823      	ldr	r3, [r4, #0]
 8005202:	f013 0f02 	tst.w	r3, #2
 8005206:	d075      	beq.n	80052f4 <HAL_RCC_OscConfig+0x164>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005208:	4b86      	ldr	r3, [pc, #536]	; (8005424 <HAL_RCC_OscConfig+0x294>)
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	f013 0f0c 	tst.w	r3, #12
 8005210:	d05f      	beq.n	80052d2 <HAL_RCC_OscConfig+0x142>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005212:	4b84      	ldr	r3, [pc, #528]	; (8005424 <HAL_RCC_OscConfig+0x294>)
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	f003 030c 	and.w	r3, r3, #12
 800521a:	2b08      	cmp	r3, #8
 800521c:	d054      	beq.n	80052c8 <HAL_RCC_OscConfig+0x138>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800521e:	6923      	ldr	r3, [r4, #16]
 8005220:	2b00      	cmp	r3, #0
 8005222:	f000 808a 	beq.w	800533a <HAL_RCC_OscConfig+0x1aa>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005226:	4b80      	ldr	r3, [pc, #512]	; (8005428 <HAL_RCC_OscConfig+0x298>)
 8005228:	2201      	movs	r2, #1
 800522a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800522c:	f7fd fcfc 	bl	8002c28 <HAL_GetTick>
 8005230:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005232:	4e7c      	ldr	r6, [pc, #496]	; (8005424 <HAL_RCC_OscConfig+0x294>)
 8005234:	6833      	ldr	r3, [r6, #0]
 8005236:	f013 0f02 	tst.w	r3, #2
 800523a:	d175      	bne.n	8005328 <HAL_RCC_OscConfig+0x198>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800523c:	f7fd fcf4 	bl	8002c28 <HAL_GetTick>
 8005240:	1b40      	subs	r0, r0, r5
 8005242:	2802      	cmp	r0, #2
 8005244:	d9f6      	bls.n	8005234 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_TIMEOUT;
 8005246:	2003      	movs	r0, #3
 8005248:	e1ad      	b.n	80055a6 <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800524a:	4a76      	ldr	r2, [pc, #472]	; (8005424 <HAL_RCC_OscConfig+0x294>)
 800524c:	6813      	ldr	r3, [r2, #0]
 800524e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005252:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005254:	6863      	ldr	r3, [r4, #4]
 8005256:	b343      	cbz	r3, 80052aa <HAL_RCC_OscConfig+0x11a>
        tickstart = HAL_GetTick();
 8005258:	f7fd fce6 	bl	8002c28 <HAL_GetTick>
 800525c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800525e:	4e71      	ldr	r6, [pc, #452]	; (8005424 <HAL_RCC_OscConfig+0x294>)
 8005260:	6833      	ldr	r3, [r6, #0]
 8005262:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8005266:	d1cb      	bne.n	8005200 <HAL_RCC_OscConfig+0x70>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005268:	f7fd fcde 	bl	8002c28 <HAL_GetTick>
 800526c:	1b40      	subs	r0, r0, r5
 800526e:	2864      	cmp	r0, #100	; 0x64
 8005270:	d9f6      	bls.n	8005260 <HAL_RCC_OscConfig+0xd0>
            return HAL_TIMEOUT;
 8005272:	2003      	movs	r0, #3
 8005274:	e197      	b.n	80055a6 <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005276:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800527a:	d009      	beq.n	8005290 <HAL_RCC_OscConfig+0x100>
 800527c:	4b69      	ldr	r3, [pc, #420]	; (8005424 <HAL_RCC_OscConfig+0x294>)
 800527e:	681a      	ldr	r2, [r3, #0]
 8005280:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005284:	601a      	str	r2, [r3, #0]
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800528c:	601a      	str	r2, [r3, #0]
 800528e:	e7e1      	b.n	8005254 <HAL_RCC_OscConfig+0xc4>
 8005290:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005294:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800529e:	601a      	str	r2, [r3, #0]
 80052a0:	681a      	ldr	r2, [r3, #0]
 80052a2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80052a6:	601a      	str	r2, [r3, #0]
 80052a8:	e7d4      	b.n	8005254 <HAL_RCC_OscConfig+0xc4>
        tickstart = HAL_GetTick();
 80052aa:	f7fd fcbd 	bl	8002c28 <HAL_GetTick>
 80052ae:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052b0:	4e5c      	ldr	r6, [pc, #368]	; (8005424 <HAL_RCC_OscConfig+0x294>)
 80052b2:	6833      	ldr	r3, [r6, #0]
 80052b4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80052b8:	d0a2      	beq.n	8005200 <HAL_RCC_OscConfig+0x70>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80052ba:	f7fd fcb5 	bl	8002c28 <HAL_GetTick>
 80052be:	1b40      	subs	r0, r0, r5
 80052c0:	2864      	cmp	r0, #100	; 0x64
 80052c2:	d9f6      	bls.n	80052b2 <HAL_RCC_OscConfig+0x122>
            return HAL_TIMEOUT;
 80052c4:	2003      	movs	r0, #3
 80052c6:	e16e      	b.n	80055a6 <HAL_RCC_OscConfig+0x416>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80052c8:	4b56      	ldr	r3, [pc, #344]	; (8005424 <HAL_RCC_OscConfig+0x294>)
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80052d0:	d1a5      	bne.n	800521e <HAL_RCC_OscConfig+0x8e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80052d2:	4b54      	ldr	r3, [pc, #336]	; (8005424 <HAL_RCC_OscConfig+0x294>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f013 0f02 	tst.w	r3, #2
 80052da:	d003      	beq.n	80052e4 <HAL_RCC_OscConfig+0x154>
 80052dc:	6923      	ldr	r3, [r4, #16]
 80052de:	2b01      	cmp	r3, #1
 80052e0:	f040 815e 	bne.w	80055a0 <HAL_RCC_OscConfig+0x410>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052e4:	4a4f      	ldr	r2, [pc, #316]	; (8005424 <HAL_RCC_OscConfig+0x294>)
 80052e6:	6813      	ldr	r3, [r2, #0]
 80052e8:	6961      	ldr	r1, [r4, #20]
 80052ea:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80052ee:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80052f2:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80052f4:	6823      	ldr	r3, [r4, #0]
 80052f6:	f013 0f08 	tst.w	r3, #8
 80052fa:	d03d      	beq.n	8005378 <HAL_RCC_OscConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80052fc:	69a3      	ldr	r3, [r4, #24]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d066      	beq.n	80053d0 <HAL_RCC_OscConfig+0x240>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005302:	4b49      	ldr	r3, [pc, #292]	; (8005428 <HAL_RCC_OscConfig+0x298>)
 8005304:	2201      	movs	r2, #1
 8005306:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800530a:	f7fd fc8d 	bl	8002c28 <HAL_GetTick>
 800530e:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005310:	4e44      	ldr	r6, [pc, #272]	; (8005424 <HAL_RCC_OscConfig+0x294>)
 8005312:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005314:	f013 0f02 	tst.w	r3, #2
 8005318:	d121      	bne.n	800535e <HAL_RCC_OscConfig+0x1ce>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800531a:	f7fd fc85 	bl	8002c28 <HAL_GetTick>
 800531e:	1b40      	subs	r0, r0, r5
 8005320:	2802      	cmp	r0, #2
 8005322:	d9f6      	bls.n	8005312 <HAL_RCC_OscConfig+0x182>
        {
          return HAL_TIMEOUT;
 8005324:	2003      	movs	r0, #3
 8005326:	e13e      	b.n	80055a6 <HAL_RCC_OscConfig+0x416>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005328:	4a3e      	ldr	r2, [pc, #248]	; (8005424 <HAL_RCC_OscConfig+0x294>)
 800532a:	6813      	ldr	r3, [r2, #0]
 800532c:	6961      	ldr	r1, [r4, #20]
 800532e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005332:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005336:	6013      	str	r3, [r2, #0]
 8005338:	e7dc      	b.n	80052f4 <HAL_RCC_OscConfig+0x164>
        __HAL_RCC_HSI_DISABLE();
 800533a:	4b3b      	ldr	r3, [pc, #236]	; (8005428 <HAL_RCC_OscConfig+0x298>)
 800533c:	2200      	movs	r2, #0
 800533e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8005340:	f7fd fc72 	bl	8002c28 <HAL_GetTick>
 8005344:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005346:	4e37      	ldr	r6, [pc, #220]	; (8005424 <HAL_RCC_OscConfig+0x294>)
 8005348:	6833      	ldr	r3, [r6, #0]
 800534a:	f013 0f02 	tst.w	r3, #2
 800534e:	d0d1      	beq.n	80052f4 <HAL_RCC_OscConfig+0x164>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005350:	f7fd fc6a 	bl	8002c28 <HAL_GetTick>
 8005354:	1b40      	subs	r0, r0, r5
 8005356:	2802      	cmp	r0, #2
 8005358:	d9f6      	bls.n	8005348 <HAL_RCC_OscConfig+0x1b8>
            return HAL_TIMEOUT;
 800535a:	2003      	movs	r0, #3
 800535c:	e123      	b.n	80055a6 <HAL_RCC_OscConfig+0x416>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800535e:	4b33      	ldr	r3, [pc, #204]	; (800542c <HAL_RCC_OscConfig+0x29c>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a33      	ldr	r2, [pc, #204]	; (8005430 <HAL_RCC_OscConfig+0x2a0>)
 8005364:	fba2 2303 	umull	r2, r3, r2, r3
 8005368:	0a5b      	lsrs	r3, r3, #9
 800536a:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 800536c:	bf00      	nop
  }
  while (Delay --);
 800536e:	9b01      	ldr	r3, [sp, #4]
 8005370:	1e5a      	subs	r2, r3, #1
 8005372:	9201      	str	r2, [sp, #4]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d1f9      	bne.n	800536c <HAL_RCC_OscConfig+0x1dc>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005378:	6823      	ldr	r3, [r4, #0]
 800537a:	f013 0f04 	tst.w	r3, #4
 800537e:	f000 809b 	beq.w	80054b8 <HAL_RCC_OscConfig+0x328>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005382:	4b28      	ldr	r3, [pc, #160]	; (8005424 <HAL_RCC_OscConfig+0x294>)
 8005384:	69db      	ldr	r3, [r3, #28]
 8005386:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800538a:	d134      	bne.n	80053f6 <HAL_RCC_OscConfig+0x266>
      __HAL_RCC_PWR_CLK_ENABLE();
 800538c:	4b25      	ldr	r3, [pc, #148]	; (8005424 <HAL_RCC_OscConfig+0x294>)
 800538e:	69da      	ldr	r2, [r3, #28]
 8005390:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005394:	61da      	str	r2, [r3, #28]
 8005396:	69db      	ldr	r3, [r3, #28]
 8005398:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800539c:	9300      	str	r3, [sp, #0]
 800539e:	9b00      	ldr	r3, [sp, #0]
      pwrclkchanged = SET;
 80053a0:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053a2:	4b24      	ldr	r3, [pc, #144]	; (8005434 <HAL_RCC_OscConfig+0x2a4>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f413 7f80 	tst.w	r3, #256	; 0x100
 80053aa:	d026      	beq.n	80053fa <HAL_RCC_OscConfig+0x26a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80053ac:	68e3      	ldr	r3, [r4, #12]
 80053ae:	2b01      	cmp	r3, #1
 80053b0:	d042      	beq.n	8005438 <HAL_RCC_OscConfig+0x2a8>
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d158      	bne.n	8005468 <HAL_RCC_OscConfig+0x2d8>
 80053b6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80053ba:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80053be:	6a1a      	ldr	r2, [r3, #32]
 80053c0:	f022 0201 	bic.w	r2, r2, #1
 80053c4:	621a      	str	r2, [r3, #32]
 80053c6:	6a1a      	ldr	r2, [r3, #32]
 80053c8:	f022 0204 	bic.w	r2, r2, #4
 80053cc:	621a      	str	r2, [r3, #32]
 80053ce:	e038      	b.n	8005442 <HAL_RCC_OscConfig+0x2b2>
      __HAL_RCC_LSI_DISABLE();
 80053d0:	4b15      	ldr	r3, [pc, #84]	; (8005428 <HAL_RCC_OscConfig+0x298>)
 80053d2:	2200      	movs	r2, #0
 80053d4:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 80053d8:	f7fd fc26 	bl	8002c28 <HAL_GetTick>
 80053dc:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80053de:	4e11      	ldr	r6, [pc, #68]	; (8005424 <HAL_RCC_OscConfig+0x294>)
 80053e0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80053e2:	f013 0f02 	tst.w	r3, #2
 80053e6:	d0c7      	beq.n	8005378 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80053e8:	f7fd fc1e 	bl	8002c28 <HAL_GetTick>
 80053ec:	1b40      	subs	r0, r0, r5
 80053ee:	2802      	cmp	r0, #2
 80053f0:	d9f6      	bls.n	80053e0 <HAL_RCC_OscConfig+0x250>
          return HAL_TIMEOUT;
 80053f2:	2003      	movs	r0, #3
 80053f4:	e0d7      	b.n	80055a6 <HAL_RCC_OscConfig+0x416>
    FlagStatus       pwrclkchanged = RESET;
 80053f6:	2500      	movs	r5, #0
 80053f8:	e7d3      	b.n	80053a2 <HAL_RCC_OscConfig+0x212>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80053fa:	4a0e      	ldr	r2, [pc, #56]	; (8005434 <HAL_RCC_OscConfig+0x2a4>)
 80053fc:	6813      	ldr	r3, [r2, #0]
 80053fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005402:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8005404:	f7fd fc10 	bl	8002c28 <HAL_GetTick>
 8005408:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800540a:	4f0a      	ldr	r7, [pc, #40]	; (8005434 <HAL_RCC_OscConfig+0x2a4>)
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005412:	d1cb      	bne.n	80053ac <HAL_RCC_OscConfig+0x21c>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005414:	f7fd fc08 	bl	8002c28 <HAL_GetTick>
 8005418:	1b80      	subs	r0, r0, r6
 800541a:	2864      	cmp	r0, #100	; 0x64
 800541c:	d9f6      	bls.n	800540c <HAL_RCC_OscConfig+0x27c>
          return HAL_TIMEOUT;
 800541e:	2003      	movs	r0, #3
 8005420:	e0c1      	b.n	80055a6 <HAL_RCC_OscConfig+0x416>
 8005422:	bf00      	nop
 8005424:	40021000 	.word	0x40021000
 8005428:	42420000 	.word	0x42420000
 800542c:	20000000 	.word	0x20000000
 8005430:	10624dd3 	.word	0x10624dd3
 8005434:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005438:	4a5e      	ldr	r2, [pc, #376]	; (80055b4 <HAL_RCC_OscConfig+0x424>)
 800543a:	6a13      	ldr	r3, [r2, #32]
 800543c:	f043 0301 	orr.w	r3, r3, #1
 8005440:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005442:	68e3      	ldr	r3, [r4, #12]
 8005444:	b333      	cbz	r3, 8005494 <HAL_RCC_OscConfig+0x304>
      tickstart = HAL_GetTick();
 8005446:	f7fd fbef 	bl	8002c28 <HAL_GetTick>
 800544a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800544c:	4f59      	ldr	r7, [pc, #356]	; (80055b4 <HAL_RCC_OscConfig+0x424>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800544e:	f241 3888 	movw	r8, #5000	; 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005452:	6a3b      	ldr	r3, [r7, #32]
 8005454:	f013 0f02 	tst.w	r3, #2
 8005458:	d12d      	bne.n	80054b6 <HAL_RCC_OscConfig+0x326>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800545a:	f7fd fbe5 	bl	8002c28 <HAL_GetTick>
 800545e:	1b80      	subs	r0, r0, r6
 8005460:	4540      	cmp	r0, r8
 8005462:	d9f6      	bls.n	8005452 <HAL_RCC_OscConfig+0x2c2>
          return HAL_TIMEOUT;
 8005464:	2003      	movs	r0, #3
 8005466:	e09e      	b.n	80055a6 <HAL_RCC_OscConfig+0x416>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005468:	2b05      	cmp	r3, #5
 800546a:	d009      	beq.n	8005480 <HAL_RCC_OscConfig+0x2f0>
 800546c:	4b51      	ldr	r3, [pc, #324]	; (80055b4 <HAL_RCC_OscConfig+0x424>)
 800546e:	6a1a      	ldr	r2, [r3, #32]
 8005470:	f022 0201 	bic.w	r2, r2, #1
 8005474:	621a      	str	r2, [r3, #32]
 8005476:	6a1a      	ldr	r2, [r3, #32]
 8005478:	f022 0204 	bic.w	r2, r2, #4
 800547c:	621a      	str	r2, [r3, #32]
 800547e:	e7e0      	b.n	8005442 <HAL_RCC_OscConfig+0x2b2>
 8005480:	4b4c      	ldr	r3, [pc, #304]	; (80055b4 <HAL_RCC_OscConfig+0x424>)
 8005482:	6a1a      	ldr	r2, [r3, #32]
 8005484:	f042 0204 	orr.w	r2, r2, #4
 8005488:	621a      	str	r2, [r3, #32]
 800548a:	6a1a      	ldr	r2, [r3, #32]
 800548c:	f042 0201 	orr.w	r2, r2, #1
 8005490:	621a      	str	r2, [r3, #32]
 8005492:	e7d6      	b.n	8005442 <HAL_RCC_OscConfig+0x2b2>
      tickstart = HAL_GetTick();
 8005494:	f7fd fbc8 	bl	8002c28 <HAL_GetTick>
 8005498:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800549a:	4f46      	ldr	r7, [pc, #280]	; (80055b4 <HAL_RCC_OscConfig+0x424>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800549c:	f241 3888 	movw	r8, #5000	; 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80054a0:	6a3b      	ldr	r3, [r7, #32]
 80054a2:	f013 0f02 	tst.w	r3, #2
 80054a6:	d006      	beq.n	80054b6 <HAL_RCC_OscConfig+0x326>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054a8:	f7fd fbbe 	bl	8002c28 <HAL_GetTick>
 80054ac:	1b80      	subs	r0, r0, r6
 80054ae:	4540      	cmp	r0, r8
 80054b0:	d9f6      	bls.n	80054a0 <HAL_RCC_OscConfig+0x310>
          return HAL_TIMEOUT;
 80054b2:	2003      	movs	r0, #3
 80054b4:	e077      	b.n	80055a6 <HAL_RCC_OscConfig+0x416>
    if (pwrclkchanged == SET)
 80054b6:	b9e5      	cbnz	r5, 80054f2 <HAL_RCC_OscConfig+0x362>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80054b8:	69e3      	ldr	r3, [r4, #28]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d072      	beq.n	80055a4 <HAL_RCC_OscConfig+0x414>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80054be:	4a3d      	ldr	r2, [pc, #244]	; (80055b4 <HAL_RCC_OscConfig+0x424>)
 80054c0:	6852      	ldr	r2, [r2, #4]
 80054c2:	f002 020c 	and.w	r2, r2, #12
 80054c6:	2a08      	cmp	r2, #8
 80054c8:	d056      	beq.n	8005578 <HAL_RCC_OscConfig+0x3e8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80054ca:	2b02      	cmp	r3, #2
 80054cc:	d017      	beq.n	80054fe <HAL_RCC_OscConfig+0x36e>
        __HAL_RCC_PLL_DISABLE();
 80054ce:	4b3a      	ldr	r3, [pc, #232]	; (80055b8 <HAL_RCC_OscConfig+0x428>)
 80054d0:	2200      	movs	r2, #0
 80054d2:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 80054d4:	f7fd fba8 	bl	8002c28 <HAL_GetTick>
 80054d8:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80054da:	4d36      	ldr	r5, [pc, #216]	; (80055b4 <HAL_RCC_OscConfig+0x424>)
 80054dc:	682b      	ldr	r3, [r5, #0]
 80054de:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80054e2:	d047      	beq.n	8005574 <HAL_RCC_OscConfig+0x3e4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054e4:	f7fd fba0 	bl	8002c28 <HAL_GetTick>
 80054e8:	1b00      	subs	r0, r0, r4
 80054ea:	2802      	cmp	r0, #2
 80054ec:	d9f6      	bls.n	80054dc <HAL_RCC_OscConfig+0x34c>
            return HAL_TIMEOUT;
 80054ee:	2003      	movs	r0, #3
 80054f0:	e059      	b.n	80055a6 <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_PWR_CLK_DISABLE();
 80054f2:	4a30      	ldr	r2, [pc, #192]	; (80055b4 <HAL_RCC_OscConfig+0x424>)
 80054f4:	69d3      	ldr	r3, [r2, #28]
 80054f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054fa:	61d3      	str	r3, [r2, #28]
 80054fc:	e7dc      	b.n	80054b8 <HAL_RCC_OscConfig+0x328>
        __HAL_RCC_PLL_DISABLE();
 80054fe:	4b2e      	ldr	r3, [pc, #184]	; (80055b8 <HAL_RCC_OscConfig+0x428>)
 8005500:	2200      	movs	r2, #0
 8005502:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8005504:	f7fd fb90 	bl	8002c28 <HAL_GetTick>
 8005508:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800550a:	4e2a      	ldr	r6, [pc, #168]	; (80055b4 <HAL_RCC_OscConfig+0x424>)
 800550c:	6833      	ldr	r3, [r6, #0]
 800550e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8005512:	d006      	beq.n	8005522 <HAL_RCC_OscConfig+0x392>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005514:	f7fd fb88 	bl	8002c28 <HAL_GetTick>
 8005518:	1b40      	subs	r0, r0, r5
 800551a:	2802      	cmp	r0, #2
 800551c:	d9f6      	bls.n	800550c <HAL_RCC_OscConfig+0x37c>
            return HAL_TIMEOUT;
 800551e:	2003      	movs	r0, #3
 8005520:	e041      	b.n	80055a6 <HAL_RCC_OscConfig+0x416>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005522:	6a23      	ldr	r3, [r4, #32]
 8005524:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005528:	d01a      	beq.n	8005560 <HAL_RCC_OscConfig+0x3d0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800552a:	4922      	ldr	r1, [pc, #136]	; (80055b4 <HAL_RCC_OscConfig+0x424>)
 800552c:	684a      	ldr	r2, [r1, #4]
 800552e:	6a23      	ldr	r3, [r4, #32]
 8005530:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005532:	4303      	orrs	r3, r0
 8005534:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8005538:	4313      	orrs	r3, r2
 800553a:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 800553c:	4b1e      	ldr	r3, [pc, #120]	; (80055b8 <HAL_RCC_OscConfig+0x428>)
 800553e:	2201      	movs	r2, #1
 8005540:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8005542:	f7fd fb71 	bl	8002c28 <HAL_GetTick>
 8005546:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005548:	4d1a      	ldr	r5, [pc, #104]	; (80055b4 <HAL_RCC_OscConfig+0x424>)
 800554a:	682b      	ldr	r3, [r5, #0]
 800554c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8005550:	d10e      	bne.n	8005570 <HAL_RCC_OscConfig+0x3e0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005552:	f7fd fb69 	bl	8002c28 <HAL_GetTick>
 8005556:	1b00      	subs	r0, r0, r4
 8005558:	2802      	cmp	r0, #2
 800555a:	d9f6      	bls.n	800554a <HAL_RCC_OscConfig+0x3ba>
            return HAL_TIMEOUT;
 800555c:	2003      	movs	r0, #3
 800555e:	e022      	b.n	80055a6 <HAL_RCC_OscConfig+0x416>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005560:	4a14      	ldr	r2, [pc, #80]	; (80055b4 <HAL_RCC_OscConfig+0x424>)
 8005562:	6853      	ldr	r3, [r2, #4]
 8005564:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005568:	68a1      	ldr	r1, [r4, #8]
 800556a:	430b      	orrs	r3, r1
 800556c:	6053      	str	r3, [r2, #4]
 800556e:	e7dc      	b.n	800552a <HAL_RCC_OscConfig+0x39a>
  return HAL_OK;
 8005570:	2000      	movs	r0, #0
 8005572:	e018      	b.n	80055a6 <HAL_RCC_OscConfig+0x416>
 8005574:	2000      	movs	r0, #0
 8005576:	e016      	b.n	80055a6 <HAL_RCC_OscConfig+0x416>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005578:	2b01      	cmp	r3, #1
 800557a:	d017      	beq.n	80055ac <HAL_RCC_OscConfig+0x41c>
        pll_config = RCC->CFGR;
 800557c:	4b0d      	ldr	r3, [pc, #52]	; (80055b4 <HAL_RCC_OscConfig+0x424>)
 800557e:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005580:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8005584:	6a22      	ldr	r2, [r4, #32]
 8005586:	4291      	cmp	r1, r2
 8005588:	d112      	bne.n	80055b0 <HAL_RCC_OscConfig+0x420>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800558a:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800558e:	6a60      	ldr	r0, [r4, #36]	; 0x24
        return HAL_ERROR;
 8005590:	1a18      	subs	r0, r3, r0
 8005592:	bf18      	it	ne
 8005594:	2001      	movne	r0, #1
 8005596:	e006      	b.n	80055a6 <HAL_RCC_OscConfig+0x416>
    return HAL_ERROR;
 8005598:	2001      	movs	r0, #1
}
 800559a:	4770      	bx	lr
        return HAL_ERROR;
 800559c:	2001      	movs	r0, #1
 800559e:	e002      	b.n	80055a6 <HAL_RCC_OscConfig+0x416>
        return HAL_ERROR;
 80055a0:	2001      	movs	r0, #1
 80055a2:	e000      	b.n	80055a6 <HAL_RCC_OscConfig+0x416>
  return HAL_OK;
 80055a4:	2000      	movs	r0, #0
}
 80055a6:	b002      	add	sp, #8
 80055a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_ERROR;
 80055ac:	2001      	movs	r0, #1
 80055ae:	e7fa      	b.n	80055a6 <HAL_RCC_OscConfig+0x416>
          return HAL_ERROR;
 80055b0:	2001      	movs	r0, #1
 80055b2:	e7f8      	b.n	80055a6 <HAL_RCC_OscConfig+0x416>
 80055b4:	40021000 	.word	0x40021000
 80055b8:	42420000 	.word	0x42420000

080055bc <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 80055bc:	4b0f      	ldr	r3, [pc, #60]	; (80055fc <HAL_RCC_GetSysClockFreq+0x40>)
 80055be:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80055c0:	f003 020c 	and.w	r2, r3, #12
 80055c4:	2a08      	cmp	r2, #8
 80055c6:	d001      	beq.n	80055cc <HAL_RCC_GetSysClockFreq+0x10>
      sysclockfreq = HSE_VALUE;
 80055c8:	480d      	ldr	r0, [pc, #52]	; (8005600 <HAL_RCC_GetSysClockFreq+0x44>)
}
 80055ca:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80055cc:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80055d0:	490c      	ldr	r1, [pc, #48]	; (8005604 <HAL_RCC_GetSysClockFreq+0x48>)
 80055d2:	5c88      	ldrb	r0, [r1, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80055d4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80055d8:	d00b      	beq.n	80055f2 <HAL_RCC_GetSysClockFreq+0x36>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80055da:	4b08      	ldr	r3, [pc, #32]	; (80055fc <HAL_RCC_GetSysClockFreq+0x40>)
 80055dc:	685b      	ldr	r3, [r3, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80055de:	4a08      	ldr	r2, [pc, #32]	; (8005600 <HAL_RCC_GetSysClockFreq+0x44>)
 80055e0:	fb02 f000 	mul.w	r0, r2, r0
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80055e4:	f3c3 4340 	ubfx	r3, r3, #17, #1
 80055e8:	4a07      	ldr	r2, [pc, #28]	; (8005608 <HAL_RCC_GetSysClockFreq+0x4c>)
 80055ea:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80055ec:	fbb0 f0f3 	udiv	r0, r0, r3
 80055f0:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80055f2:	4b06      	ldr	r3, [pc, #24]	; (800560c <HAL_RCC_GetSysClockFreq+0x50>)
 80055f4:	fb03 f000 	mul.w	r0, r3, r0
 80055f8:	4770      	bx	lr
 80055fa:	bf00      	nop
 80055fc:	40021000 	.word	0x40021000
 8005600:	007a1200 	.word	0x007a1200
 8005604:	0800c274 	.word	0x0800c274
 8005608:	0800c284 	.word	0x0800c284
 800560c:	003d0900 	.word	0x003d0900

08005610 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8005610:	2800      	cmp	r0, #0
 8005612:	f000 80a2 	beq.w	800575a <HAL_RCC_ClockConfig+0x14a>
{
 8005616:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800561a:	460d      	mov	r5, r1
 800561c:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800561e:	4b53      	ldr	r3, [pc, #332]	; (800576c <HAL_RCC_ClockConfig+0x15c>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f003 0307 	and.w	r3, r3, #7
 8005626:	428b      	cmp	r3, r1
 8005628:	d20b      	bcs.n	8005642 <HAL_RCC_ClockConfig+0x32>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800562a:	4a50      	ldr	r2, [pc, #320]	; (800576c <HAL_RCC_ClockConfig+0x15c>)
 800562c:	6813      	ldr	r3, [r2, #0]
 800562e:	f023 0307 	bic.w	r3, r3, #7
 8005632:	430b      	orrs	r3, r1
 8005634:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005636:	6813      	ldr	r3, [r2, #0]
 8005638:	f003 0307 	and.w	r3, r3, #7
 800563c:	428b      	cmp	r3, r1
 800563e:	f040 808e 	bne.w	800575e <HAL_RCC_ClockConfig+0x14e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005642:	6823      	ldr	r3, [r4, #0]
 8005644:	f013 0f02 	tst.w	r3, #2
 8005648:	d017      	beq.n	800567a <HAL_RCC_ClockConfig+0x6a>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800564a:	f013 0f04 	tst.w	r3, #4
 800564e:	d004      	beq.n	800565a <HAL_RCC_ClockConfig+0x4a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005650:	4a47      	ldr	r2, [pc, #284]	; (8005770 <HAL_RCC_ClockConfig+0x160>)
 8005652:	6853      	ldr	r3, [r2, #4]
 8005654:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005658:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800565a:	6823      	ldr	r3, [r4, #0]
 800565c:	f013 0f08 	tst.w	r3, #8
 8005660:	d004      	beq.n	800566c <HAL_RCC_ClockConfig+0x5c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005662:	4a43      	ldr	r2, [pc, #268]	; (8005770 <HAL_RCC_ClockConfig+0x160>)
 8005664:	6853      	ldr	r3, [r2, #4]
 8005666:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800566a:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800566c:	4a40      	ldr	r2, [pc, #256]	; (8005770 <HAL_RCC_ClockConfig+0x160>)
 800566e:	6853      	ldr	r3, [r2, #4]
 8005670:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005674:	68a1      	ldr	r1, [r4, #8]
 8005676:	430b      	orrs	r3, r1
 8005678:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800567a:	6823      	ldr	r3, [r4, #0]
 800567c:	f013 0f01 	tst.w	r3, #1
 8005680:	d031      	beq.n	80056e6 <HAL_RCC_ClockConfig+0xd6>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005682:	6862      	ldr	r2, [r4, #4]
 8005684:	2a01      	cmp	r2, #1
 8005686:	d020      	beq.n	80056ca <HAL_RCC_ClockConfig+0xba>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005688:	2a02      	cmp	r2, #2
 800568a:	d025      	beq.n	80056d8 <HAL_RCC_ClockConfig+0xc8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800568c:	4b38      	ldr	r3, [pc, #224]	; (8005770 <HAL_RCC_ClockConfig+0x160>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f013 0f02 	tst.w	r3, #2
 8005694:	d065      	beq.n	8005762 <HAL_RCC_ClockConfig+0x152>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005696:	4936      	ldr	r1, [pc, #216]	; (8005770 <HAL_RCC_ClockConfig+0x160>)
 8005698:	684b      	ldr	r3, [r1, #4]
 800569a:	f023 0303 	bic.w	r3, r3, #3
 800569e:	4313      	orrs	r3, r2
 80056a0:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 80056a2:	f7fd fac1 	bl	8002c28 <HAL_GetTick>
 80056a6:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056a8:	4f31      	ldr	r7, [pc, #196]	; (8005770 <HAL_RCC_ClockConfig+0x160>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056aa:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	f003 030c 	and.w	r3, r3, #12
 80056b4:	6862      	ldr	r2, [r4, #4]
 80056b6:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80056ba:	d014      	beq.n	80056e6 <HAL_RCC_ClockConfig+0xd6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056bc:	f7fd fab4 	bl	8002c28 <HAL_GetTick>
 80056c0:	1b80      	subs	r0, r0, r6
 80056c2:	4540      	cmp	r0, r8
 80056c4:	d9f3      	bls.n	80056ae <HAL_RCC_ClockConfig+0x9e>
        return HAL_TIMEOUT;
 80056c6:	2003      	movs	r0, #3
 80056c8:	e045      	b.n	8005756 <HAL_RCC_ClockConfig+0x146>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056ca:	4b29      	ldr	r3, [pc, #164]	; (8005770 <HAL_RCC_ClockConfig+0x160>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80056d2:	d1e0      	bne.n	8005696 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 80056d4:	2001      	movs	r0, #1
 80056d6:	e03e      	b.n	8005756 <HAL_RCC_ClockConfig+0x146>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056d8:	4b25      	ldr	r3, [pc, #148]	; (8005770 <HAL_RCC_ClockConfig+0x160>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80056e0:	d1d9      	bne.n	8005696 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 80056e2:	2001      	movs	r0, #1
 80056e4:	e037      	b.n	8005756 <HAL_RCC_ClockConfig+0x146>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80056e6:	4b21      	ldr	r3, [pc, #132]	; (800576c <HAL_RCC_ClockConfig+0x15c>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f003 0307 	and.w	r3, r3, #7
 80056ee:	42ab      	cmp	r3, r5
 80056f0:	d90a      	bls.n	8005708 <HAL_RCC_ClockConfig+0xf8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056f2:	4a1e      	ldr	r2, [pc, #120]	; (800576c <HAL_RCC_ClockConfig+0x15c>)
 80056f4:	6813      	ldr	r3, [r2, #0]
 80056f6:	f023 0307 	bic.w	r3, r3, #7
 80056fa:	432b      	orrs	r3, r5
 80056fc:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80056fe:	6813      	ldr	r3, [r2, #0]
 8005700:	f003 0307 	and.w	r3, r3, #7
 8005704:	42ab      	cmp	r3, r5
 8005706:	d12e      	bne.n	8005766 <HAL_RCC_ClockConfig+0x156>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005708:	6823      	ldr	r3, [r4, #0]
 800570a:	f013 0f04 	tst.w	r3, #4
 800570e:	d006      	beq.n	800571e <HAL_RCC_ClockConfig+0x10e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005710:	4a17      	ldr	r2, [pc, #92]	; (8005770 <HAL_RCC_ClockConfig+0x160>)
 8005712:	6853      	ldr	r3, [r2, #4]
 8005714:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005718:	68e1      	ldr	r1, [r4, #12]
 800571a:	430b      	orrs	r3, r1
 800571c:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800571e:	6823      	ldr	r3, [r4, #0]
 8005720:	f013 0f08 	tst.w	r3, #8
 8005724:	d007      	beq.n	8005736 <HAL_RCC_ClockConfig+0x126>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005726:	4a12      	ldr	r2, [pc, #72]	; (8005770 <HAL_RCC_ClockConfig+0x160>)
 8005728:	6853      	ldr	r3, [r2, #4]
 800572a:	6921      	ldr	r1, [r4, #16]
 800572c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8005730:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005734:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005736:	f7ff ff41 	bl	80055bc <HAL_RCC_GetSysClockFreq>
 800573a:	4b0d      	ldr	r3, [pc, #52]	; (8005770 <HAL_RCC_ClockConfig+0x160>)
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005742:	4a0c      	ldr	r2, [pc, #48]	; (8005774 <HAL_RCC_ClockConfig+0x164>)
 8005744:	5cd3      	ldrb	r3, [r2, r3]
 8005746:	40d8      	lsrs	r0, r3
 8005748:	4b0b      	ldr	r3, [pc, #44]	; (8005778 <HAL_RCC_ClockConfig+0x168>)
 800574a:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 800574c:	4b0b      	ldr	r3, [pc, #44]	; (800577c <HAL_RCC_ClockConfig+0x16c>)
 800574e:	6818      	ldr	r0, [r3, #0]
 8005750:	f7fc fc8a 	bl	8002068 <HAL_InitTick>
  return HAL_OK;
 8005754:	2000      	movs	r0, #0
}
 8005756:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 800575a:	2001      	movs	r0, #1
}
 800575c:	4770      	bx	lr
    return HAL_ERROR;
 800575e:	2001      	movs	r0, #1
 8005760:	e7f9      	b.n	8005756 <HAL_RCC_ClockConfig+0x146>
        return HAL_ERROR;
 8005762:	2001      	movs	r0, #1
 8005764:	e7f7      	b.n	8005756 <HAL_RCC_ClockConfig+0x146>
    return HAL_ERROR;
 8005766:	2001      	movs	r0, #1
 8005768:	e7f5      	b.n	8005756 <HAL_RCC_ClockConfig+0x146>
 800576a:	bf00      	nop
 800576c:	40022000 	.word	0x40022000
 8005770:	40021000 	.word	0x40021000
 8005774:	0800bacc 	.word	0x0800bacc
 8005778:	20000000 	.word	0x20000000
 800577c:	20000010 	.word	0x20000010

08005780 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005780:	4b04      	ldr	r3, [pc, #16]	; (8005794 <HAL_RCC_GetPCLK1Freq+0x14>)
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8005788:	4a03      	ldr	r2, [pc, #12]	; (8005798 <HAL_RCC_GetPCLK1Freq+0x18>)
 800578a:	5cd3      	ldrb	r3, [r2, r3]
 800578c:	4a03      	ldr	r2, [pc, #12]	; (800579c <HAL_RCC_GetPCLK1Freq+0x1c>)
 800578e:	6810      	ldr	r0, [r2, #0]
}
 8005790:	40d8      	lsrs	r0, r3
 8005792:	4770      	bx	lr
 8005794:	40021000 	.word	0x40021000
 8005798:	0800badc 	.word	0x0800badc
 800579c:	20000000 	.word	0x20000000

080057a0 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80057a0:	4b04      	ldr	r3, [pc, #16]	; (80057b4 <HAL_RCC_GetPCLK2Freq+0x14>)
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80057a8:	4a03      	ldr	r2, [pc, #12]	; (80057b8 <HAL_RCC_GetPCLK2Freq+0x18>)
 80057aa:	5cd3      	ldrb	r3, [r2, r3]
 80057ac:	4a03      	ldr	r2, [pc, #12]	; (80057bc <HAL_RCC_GetPCLK2Freq+0x1c>)
 80057ae:	6810      	ldr	r0, [r2, #0]
}
 80057b0:	40d8      	lsrs	r0, r3
 80057b2:	4770      	bx	lr
 80057b4:	40021000 	.word	0x40021000
 80057b8:	0800badc 	.word	0x0800badc
 80057bc:	20000000 	.word	0x20000000

080057c0 <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80057c0:	230f      	movs	r3, #15
 80057c2:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80057c4:	4b0b      	ldr	r3, [pc, #44]	; (80057f4 <HAL_RCC_GetClockConfig+0x34>)
 80057c6:	685a      	ldr	r2, [r3, #4]
 80057c8:	f002 0203 	and.w	r2, r2, #3
 80057cc:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80057ce:	685a      	ldr	r2, [r3, #4]
 80057d0:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80057d4:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80057d6:	685a      	ldr	r2, [r3, #4]
 80057d8:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80057dc:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	08db      	lsrs	r3, r3, #3
 80057e2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80057e6:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80057e8:	4b03      	ldr	r3, [pc, #12]	; (80057f8 <HAL_RCC_GetClockConfig+0x38>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f003 0307 	and.w	r3, r3, #7
 80057f0:	600b      	str	r3, [r1, #0]
}
 80057f2:	4770      	bx	lr
 80057f4:	40021000 	.word	0x40021000
 80057f8:	40022000 	.word	0x40022000

080057fc <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80057fc:	4770      	bx	lr
	...

08005800 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005800:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005804:	b2db      	uxtb	r3, r3
 8005806:	2b01      	cmp	r3, #1
 8005808:	d127      	bne.n	800585a <HAL_TIM_Base_Start_IT+0x5a>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800580a:	2302      	movs	r3, #2
 800580c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005810:	6802      	ldr	r2, [r0, #0]
 8005812:	68d3      	ldr	r3, [r2, #12]
 8005814:	f043 0301 	orr.w	r3, r3, #1
 8005818:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800581a:	6803      	ldr	r3, [r0, #0]
 800581c:	4a11      	ldr	r2, [pc, #68]	; (8005864 <HAL_TIM_Base_Start_IT+0x64>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d010      	beq.n	8005844 <HAL_TIM_Base_Start_IT+0x44>
 8005822:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005826:	d00d      	beq.n	8005844 <HAL_TIM_Base_Start_IT+0x44>
 8005828:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800582c:	4293      	cmp	r3, r2
 800582e:	d009      	beq.n	8005844 <HAL_TIM_Base_Start_IT+0x44>
 8005830:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005834:	4293      	cmp	r3, r2
 8005836:	d005      	beq.n	8005844 <HAL_TIM_Base_Start_IT+0x44>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	f042 0201 	orr.w	r2, r2, #1
 800583e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005840:	2000      	movs	r0, #0
 8005842:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005844:	689a      	ldr	r2, [r3, #8]
 8005846:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800584a:	2a06      	cmp	r2, #6
 800584c:	d007      	beq.n	800585e <HAL_TIM_Base_Start_IT+0x5e>
      __HAL_TIM_ENABLE(htim);
 800584e:	681a      	ldr	r2, [r3, #0]
 8005850:	f042 0201 	orr.w	r2, r2, #1
 8005854:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8005856:	2000      	movs	r0, #0
 8005858:	4770      	bx	lr
    return HAL_ERROR;
 800585a:	2001      	movs	r0, #1
 800585c:	4770      	bx	lr
  return HAL_OK;
 800585e:	2000      	movs	r0, #0
}
 8005860:	4770      	bx	lr
 8005862:	bf00      	nop
 8005864:	40012c00 	.word	0x40012c00

08005868 <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005868:	4770      	bx	lr

0800586a <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800586a:	4770      	bx	lr

0800586c <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800586c:	4770      	bx	lr

0800586e <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800586e:	4770      	bx	lr

08005870 <HAL_TIM_IRQHandler>:
{
 8005870:	b510      	push	{r4, lr}
 8005872:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005874:	6803      	ldr	r3, [r0, #0]
 8005876:	691a      	ldr	r2, [r3, #16]
 8005878:	f012 0f02 	tst.w	r2, #2
 800587c:	d011      	beq.n	80058a2 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800587e:	68da      	ldr	r2, [r3, #12]
 8005880:	f012 0f02 	tst.w	r2, #2
 8005884:	d00d      	beq.n	80058a2 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005886:	f06f 0202 	mvn.w	r2, #2
 800588a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800588c:	2301      	movs	r3, #1
 800588e:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005890:	6803      	ldr	r3, [r0, #0]
 8005892:	699b      	ldr	r3, [r3, #24]
 8005894:	f013 0f03 	tst.w	r3, #3
 8005898:	d070      	beq.n	800597c <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 800589a:	f7ff ffe6 	bl	800586a <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800589e:	2300      	movs	r3, #0
 80058a0:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80058a2:	6823      	ldr	r3, [r4, #0]
 80058a4:	691a      	ldr	r2, [r3, #16]
 80058a6:	f012 0f04 	tst.w	r2, #4
 80058aa:	d012      	beq.n	80058d2 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80058ac:	68da      	ldr	r2, [r3, #12]
 80058ae:	f012 0f04 	tst.w	r2, #4
 80058b2:	d00e      	beq.n	80058d2 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80058b4:	f06f 0204 	mvn.w	r2, #4
 80058b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80058ba:	2302      	movs	r3, #2
 80058bc:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80058be:	6823      	ldr	r3, [r4, #0]
 80058c0:	699b      	ldr	r3, [r3, #24]
 80058c2:	f413 7f40 	tst.w	r3, #768	; 0x300
 80058c6:	d05f      	beq.n	8005988 <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 80058c8:	4620      	mov	r0, r4
 80058ca:	f7ff ffce 	bl	800586a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058ce:	2300      	movs	r3, #0
 80058d0:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80058d2:	6823      	ldr	r3, [r4, #0]
 80058d4:	691a      	ldr	r2, [r3, #16]
 80058d6:	f012 0f08 	tst.w	r2, #8
 80058da:	d012      	beq.n	8005902 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80058dc:	68da      	ldr	r2, [r3, #12]
 80058de:	f012 0f08 	tst.w	r2, #8
 80058e2:	d00e      	beq.n	8005902 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80058e4:	f06f 0208 	mvn.w	r2, #8
 80058e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80058ea:	2304      	movs	r3, #4
 80058ec:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80058ee:	6823      	ldr	r3, [r4, #0]
 80058f0:	69db      	ldr	r3, [r3, #28]
 80058f2:	f013 0f03 	tst.w	r3, #3
 80058f6:	d04e      	beq.n	8005996 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 80058f8:	4620      	mov	r0, r4
 80058fa:	f7ff ffb6 	bl	800586a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058fe:	2300      	movs	r3, #0
 8005900:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005902:	6823      	ldr	r3, [r4, #0]
 8005904:	691a      	ldr	r2, [r3, #16]
 8005906:	f012 0f10 	tst.w	r2, #16
 800590a:	d012      	beq.n	8005932 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800590c:	68da      	ldr	r2, [r3, #12]
 800590e:	f012 0f10 	tst.w	r2, #16
 8005912:	d00e      	beq.n	8005932 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005914:	f06f 0210 	mvn.w	r2, #16
 8005918:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800591a:	2308      	movs	r3, #8
 800591c:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800591e:	6823      	ldr	r3, [r4, #0]
 8005920:	69db      	ldr	r3, [r3, #28]
 8005922:	f413 7f40 	tst.w	r3, #768	; 0x300
 8005926:	d03d      	beq.n	80059a4 <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 8005928:	4620      	mov	r0, r4
 800592a:	f7ff ff9e 	bl	800586a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800592e:	2300      	movs	r3, #0
 8005930:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005932:	6823      	ldr	r3, [r4, #0]
 8005934:	691a      	ldr	r2, [r3, #16]
 8005936:	f012 0f01 	tst.w	r2, #1
 800593a:	d003      	beq.n	8005944 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800593c:	68da      	ldr	r2, [r3, #12]
 800593e:	f012 0f01 	tst.w	r2, #1
 8005942:	d136      	bne.n	80059b2 <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005944:	6823      	ldr	r3, [r4, #0]
 8005946:	691a      	ldr	r2, [r3, #16]
 8005948:	f012 0f80 	tst.w	r2, #128	; 0x80
 800594c:	d003      	beq.n	8005956 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800594e:	68da      	ldr	r2, [r3, #12]
 8005950:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005954:	d134      	bne.n	80059c0 <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005956:	6823      	ldr	r3, [r4, #0]
 8005958:	691a      	ldr	r2, [r3, #16]
 800595a:	f012 0f40 	tst.w	r2, #64	; 0x40
 800595e:	d003      	beq.n	8005968 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005960:	68da      	ldr	r2, [r3, #12]
 8005962:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005966:	d132      	bne.n	80059ce <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005968:	6823      	ldr	r3, [r4, #0]
 800596a:	691a      	ldr	r2, [r3, #16]
 800596c:	f012 0f20 	tst.w	r2, #32
 8005970:	d003      	beq.n	800597a <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005972:	68da      	ldr	r2, [r3, #12]
 8005974:	f012 0f20 	tst.w	r2, #32
 8005978:	d130      	bne.n	80059dc <HAL_TIM_IRQHandler+0x16c>
}
 800597a:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800597c:	f7ff ff74 	bl	8005868 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005980:	4620      	mov	r0, r4
 8005982:	f7ff ff73 	bl	800586c <HAL_TIM_PWM_PulseFinishedCallback>
 8005986:	e78a      	b.n	800589e <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005988:	4620      	mov	r0, r4
 800598a:	f7ff ff6d 	bl	8005868 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800598e:	4620      	mov	r0, r4
 8005990:	f7ff ff6c 	bl	800586c <HAL_TIM_PWM_PulseFinishedCallback>
 8005994:	e79b      	b.n	80058ce <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005996:	4620      	mov	r0, r4
 8005998:	f7ff ff66 	bl	8005868 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800599c:	4620      	mov	r0, r4
 800599e:	f7ff ff65 	bl	800586c <HAL_TIM_PWM_PulseFinishedCallback>
 80059a2:	e7ac      	b.n	80058fe <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059a4:	4620      	mov	r0, r4
 80059a6:	f7ff ff5f 	bl	8005868 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059aa:	4620      	mov	r0, r4
 80059ac:	f7ff ff5e 	bl	800586c <HAL_TIM_PWM_PulseFinishedCallback>
 80059b0:	e7bd      	b.n	800592e <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80059b2:	f06f 0201 	mvn.w	r2, #1
 80059b6:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80059b8:	4620      	mov	r0, r4
 80059ba:	f7fc fad5 	bl	8001f68 <HAL_TIM_PeriodElapsedCallback>
 80059be:	e7c1      	b.n	8005944 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80059c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80059c4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80059c6:	4620      	mov	r0, r4
 80059c8:	f000 f9f7 	bl	8005dba <HAL_TIMEx_BreakCallback>
 80059cc:	e7c3      	b.n	8005956 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80059ce:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80059d2:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80059d4:	4620      	mov	r0, r4
 80059d6:	f7ff ff4a 	bl	800586e <HAL_TIM_TriggerCallback>
 80059da:	e7c5      	b.n	8005968 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80059dc:	f06f 0220 	mvn.w	r2, #32
 80059e0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80059e2:	4620      	mov	r0, r4
 80059e4:	f000 f9e8 	bl	8005db8 <HAL_TIMEx_CommutCallback>
}
 80059e8:	e7c7      	b.n	800597a <HAL_TIM_IRQHandler+0x10a>
	...

080059ec <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80059ec:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059ee:	4a25      	ldr	r2, [pc, #148]	; (8005a84 <TIM_Base_SetConfig+0x98>)
 80059f0:	4290      	cmp	r0, r2
 80059f2:	d014      	beq.n	8005a1e <TIM_Base_SetConfig+0x32>
 80059f4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80059f8:	d02b      	beq.n	8005a52 <TIM_Base_SetConfig+0x66>
 80059fa:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80059fe:	4290      	cmp	r0, r2
 8005a00:	d022      	beq.n	8005a48 <TIM_Base_SetConfig+0x5c>
 8005a02:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005a06:	4290      	cmp	r0, r2
 8005a08:	d037      	beq.n	8005a7a <TIM_Base_SetConfig+0x8e>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a0e:	694a      	ldr	r2, [r1, #20]
 8005a10:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8005a12:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a14:	688b      	ldr	r3, [r1, #8]
 8005a16:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a18:	680b      	ldr	r3, [r1, #0]
 8005a1a:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a1c:	e02a      	b.n	8005a74 <TIM_Base_SetConfig+0x88>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005a22:	684a      	ldr	r2, [r1, #4]
 8005a24:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a2a:	68ca      	ldr	r2, [r1, #12]
 8005a2c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a32:	694a      	ldr	r2, [r1, #20]
 8005a34:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8005a36:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a38:	688b      	ldr	r3, [r1, #8]
 8005a3a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005a3c:	680b      	ldr	r3, [r1, #0]
 8005a3e:	6283      	str	r3, [r0, #40]	; 0x28
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a40:	690a      	ldr	r2, [r1, #16]
 8005a42:	4b10      	ldr	r3, [pc, #64]	; (8005a84 <TIM_Base_SetConfig+0x98>)
 8005a44:	631a      	str	r2, [r3, #48]	; 0x30
 8005a46:	e015      	b.n	8005a74 <TIM_Base_SetConfig+0x88>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005a4c:	684a      	ldr	r2, [r1, #4]
 8005a4e:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a50:	e003      	b.n	8005a5a <TIM_Base_SetConfig+0x6e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005a56:	684a      	ldr	r2, [r1, #4]
 8005a58:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a5e:	68ca      	ldr	r2, [r1, #12]
 8005a60:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a66:	694a      	ldr	r2, [r1, #20]
 8005a68:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8005a6a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a6c:	688b      	ldr	r3, [r1, #8]
 8005a6e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005a70:	680b      	ldr	r3, [r1, #0]
 8005a72:	6283      	str	r3, [r0, #40]	; 0x28
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a74:	2301      	movs	r3, #1
 8005a76:	6143      	str	r3, [r0, #20]
}
 8005a78:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005a7e:	684a      	ldr	r2, [r1, #4]
 8005a80:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a82:	e7ea      	b.n	8005a5a <TIM_Base_SetConfig+0x6e>
 8005a84:	40012c00 	.word	0x40012c00

08005a88 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8005a88:	b340      	cbz	r0, 8005adc <HAL_TIM_Base_Init+0x54>
{
 8005a8a:	b510      	push	{r4, lr}
 8005a8c:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8005a8e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005a92:	b1f3      	cbz	r3, 8005ad2 <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8005a94:	2302      	movs	r3, #2
 8005a96:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a9a:	4621      	mov	r1, r4
 8005a9c:	f851 0b04 	ldr.w	r0, [r1], #4
 8005aa0:	f7ff ffa4 	bl	80059ec <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005aaa:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8005aae:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8005ab2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8005ab6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005aba:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005abe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ac2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8005ac6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8005aca:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8005ace:	2000      	movs	r0, #0
}
 8005ad0:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8005ad2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8005ad6:	f7ff fe91 	bl	80057fc <HAL_TIM_Base_MspInit>
 8005ada:	e7db      	b.n	8005a94 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8005adc:	2001      	movs	r0, #1
}
 8005ade:	4770      	bx	lr

08005ae0 <HAL_TIM_Encoder_Init>:
  if (htim == NULL)
 8005ae0:	2800      	cmp	r0, #0
 8005ae2:	d053      	beq.n	8005b8c <HAL_TIM_Encoder_Init+0xac>
{
 8005ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ae6:	460d      	mov	r5, r1
 8005ae8:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8005aea:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d047      	beq.n	8005b82 <HAL_TIM_Encoder_Init+0xa2>
  htim->State = HAL_TIM_STATE_BUSY;
 8005af2:	2302      	movs	r3, #2
 8005af4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005af8:	6822      	ldr	r2, [r4, #0]
 8005afa:	6893      	ldr	r3, [r2, #8]
 8005afc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b00:	f023 0307 	bic.w	r3, r3, #7
 8005b04:	6093      	str	r3, [r2, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b06:	4621      	mov	r1, r4
 8005b08:	f851 0b04 	ldr.w	r0, [r1], #4
 8005b0c:	f7ff ff6e 	bl	80059ec <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 8005b10:	6820      	ldr	r0, [r4, #0]
 8005b12:	6886      	ldr	r6, [r0, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 8005b14:	6983      	ldr	r3, [r0, #24]
  tmpccer = htim->Instance->CCER;
 8005b16:	6a07      	ldr	r7, [r0, #32]
  tmpsmcr |= sConfig->EncoderMode;
 8005b18:	682a      	ldr	r2, [r5, #0]
 8005b1a:	4316      	orrs	r6, r2
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005b1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b20:	f023 0303 	bic.w	r3, r3, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005b24:	69aa      	ldr	r2, [r5, #24]
 8005b26:	68a9      	ldr	r1, [r5, #8]
 8005b28:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 8005b2c:	430b      	orrs	r3, r1
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005b2e:	f423 427c 	bic.w	r2, r3, #64512	; 0xfc00
 8005b32:	f022 02fc 	bic.w	r2, r2, #252	; 0xfc
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005b36:	69e9      	ldr	r1, [r5, #28]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005b38:	692b      	ldr	r3, [r5, #16]
 8005b3a:	011b      	lsls	r3, r3, #4
 8005b3c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005b40:	68e9      	ldr	r1, [r5, #12]
 8005b42:	430b      	orrs	r3, r1
 8005b44:	6a29      	ldr	r1, [r5, #32]
 8005b46:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 8005b4a:	4313      	orrs	r3, r2
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005b4c:	f027 0222 	bic.w	r2, r7, #34	; 0x22
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005b50:	6969      	ldr	r1, [r5, #20]
 8005b52:	686f      	ldr	r7, [r5, #4]
 8005b54:	ea47 1701 	orr.w	r7, r7, r1, lsl #4
 8005b58:	4317      	orrs	r7, r2
  htim->Instance->SMCR = tmpsmcr;
 8005b5a:	6086      	str	r6, [r0, #8]
  htim->Instance->CCMR1 = tmpccmr1;
 8005b5c:	6822      	ldr	r2, [r4, #0]
 8005b5e:	6193      	str	r3, [r2, #24]
  htim->Instance->CCER = tmpccer;
 8005b60:	6823      	ldr	r3, [r4, #0]
 8005b62:	621f      	str	r7, [r3, #32]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b64:	2301      	movs	r3, #1
 8005b66:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005b6a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005b6e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005b72:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005b76:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  htim->State = HAL_TIM_STATE_READY;
 8005b7a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8005b7e:	2000      	movs	r0, #0
}
 8005b80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    htim->Lock = HAL_UNLOCKED;
 8005b82:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 8005b86:	f7fc fb63 	bl	8002250 <HAL_TIM_Encoder_MspInit>
 8005b8a:	e7b2      	b.n	8005af2 <HAL_TIM_Encoder_Init+0x12>
    return HAL_ERROR;
 8005b8c:	2001      	movs	r0, #1
}
 8005b8e:	4770      	bx	lr

08005b90 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005b90:	f001 011f 	and.w	r1, r1, #31

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005b94:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005b96:	f04f 0c01 	mov.w	ip, #1
 8005b9a:	fa0c fc01 	lsl.w	ip, ip, r1
  TIMx->CCER &= ~tmp;
 8005b9e:	ea23 030c 	bic.w	r3, r3, ip
 8005ba2:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005ba4:	6a03      	ldr	r3, [r0, #32]
 8005ba6:	408a      	lsls	r2, r1
 8005ba8:	431a      	orrs	r2, r3
 8005baa:	6202      	str	r2, [r0, #32]
}
 8005bac:	4770      	bx	lr

08005bae <HAL_TIM_Encoder_Start>:
{
 8005bae:	b510      	push	{r4, lr}
 8005bb0:	4604      	mov	r4, r0
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005bb2:	f890 003e 	ldrb.w	r0, [r0, #62]	; 0x3e
 8005bb6:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005bb8:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005bbc:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 8005bc0:	b2d2      	uxtb	r2, r2
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005bc2:	f894 c043 	ldrb.w	ip, [r4, #67]	; 0x43
  if (Channel == TIM_CHANNEL_1)
 8005bc6:	b991      	cbnz	r1, 8005bee <HAL_TIM_Encoder_Start+0x40>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005bc8:	2801      	cmp	r0, #1
 8005bca:	d142      	bne.n	8005c52 <HAL_TIM_Encoder_Start+0xa4>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005bcc:	2a01      	cmp	r2, #1
 8005bce:	d141      	bne.n	8005c54 <HAL_TIM_Encoder_Start+0xa6>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bd0:	2302      	movs	r3, #2
 8005bd2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bd6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005bda:	6820      	ldr	r0, [r4, #0]
 8005bdc:	f7ff ffd8 	bl	8005b90 <TIM_CCxChannelCmd>
  __HAL_TIM_ENABLE(htim);
 8005be0:	6822      	ldr	r2, [r4, #0]
 8005be2:	6813      	ldr	r3, [r2, #0]
 8005be4:	f043 0301 	orr.w	r3, r3, #1
 8005be8:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8005bea:	2000      	movs	r0, #0
 8005bec:	e032      	b.n	8005c54 <HAL_TIM_Encoder_Start+0xa6>
 8005bee:	b2db      	uxtb	r3, r3
 8005bf0:	fa5f fc8c 	uxtb.w	ip, ip
 8005bf4:	468e      	mov	lr, r1
  else if (Channel == TIM_CHANNEL_2)
 8005bf6:	2904      	cmp	r1, #4
 8005bf8:	d01b      	beq.n	8005c32 <HAL_TIM_Encoder_Start+0x84>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005bfa:	2801      	cmp	r0, #1
 8005bfc:	d12f      	bne.n	8005c5e <HAL_TIM_Encoder_Start+0xb0>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005bfe:	2b01      	cmp	r3, #1
 8005c00:	d128      	bne.n	8005c54 <HAL_TIM_Encoder_Start+0xa6>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005c02:	2a01      	cmp	r2, #1
 8005c04:	d12d      	bne.n	8005c62 <HAL_TIM_Encoder_Start+0xb4>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005c06:	f1bc 0f01 	cmp.w	ip, #1
 8005c0a:	d12c      	bne.n	8005c66 <HAL_TIM_Encoder_Start+0xb8>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c0c:	2302      	movs	r3, #2
 8005c0e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c12:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c16:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c1a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005c1e:	2100      	movs	r1, #0
 8005c20:	6820      	ldr	r0, [r4, #0]
 8005c22:	f7ff ffb5 	bl	8005b90 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005c26:	2201      	movs	r2, #1
 8005c28:	2104      	movs	r1, #4
 8005c2a:	6820      	ldr	r0, [r4, #0]
 8005c2c:	f7ff ffb0 	bl	8005b90 <TIM_CCxChannelCmd>
      break;
 8005c30:	e7d6      	b.n	8005be0 <HAL_TIM_Encoder_Start+0x32>
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005c32:	2b01      	cmp	r3, #1
 8005c34:	d10f      	bne.n	8005c56 <HAL_TIM_Encoder_Start+0xa8>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005c36:	f1bc 0f01 	cmp.w	ip, #1
 8005c3a:	d10e      	bne.n	8005c5a <HAL_TIM_Encoder_Start+0xac>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c3c:	2302      	movs	r3, #2
 8005c3e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005c46:	2201      	movs	r2, #1
 8005c48:	2104      	movs	r1, #4
 8005c4a:	6820      	ldr	r0, [r4, #0]
 8005c4c:	f7ff ffa0 	bl	8005b90 <TIM_CCxChannelCmd>
      break;
 8005c50:	e7c6      	b.n	8005be0 <HAL_TIM_Encoder_Start+0x32>
      return HAL_ERROR;
 8005c52:	2001      	movs	r0, #1
}
 8005c54:	bd10      	pop	{r4, pc}
      return HAL_ERROR;
 8005c56:	2001      	movs	r0, #1
 8005c58:	e7fc      	b.n	8005c54 <HAL_TIM_Encoder_Start+0xa6>
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	e7fa      	b.n	8005c54 <HAL_TIM_Encoder_Start+0xa6>
      return HAL_ERROR;
 8005c5e:	2001      	movs	r0, #1
 8005c60:	e7f8      	b.n	8005c54 <HAL_TIM_Encoder_Start+0xa6>
 8005c62:	4618      	mov	r0, r3
 8005c64:	e7f6      	b.n	8005c54 <HAL_TIM_Encoder_Start+0xa6>
 8005c66:	4610      	mov	r0, r2
 8005c68:	e7f4      	b.n	8005c54 <HAL_TIM_Encoder_Start+0xa6>

08005c6a <HAL_TIM_Encoder_Start_IT>:
{
 8005c6a:	b510      	push	{r4, lr}
 8005c6c:	4604      	mov	r4, r0
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005c6e:	f890 003e 	ldrb.w	r0, [r0, #62]	; 0x3e
 8005c72:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005c74:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005c78:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 8005c7c:	b2d2      	uxtb	r2, r2
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005c7e:	f894 c043 	ldrb.w	ip, [r4, #67]	; 0x43
  if (Channel == TIM_CHANNEL_1)
 8005c82:	b9b9      	cbnz	r1, 8005cb4 <HAL_TIM_Encoder_Start_IT+0x4a>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005c84:	2801      	cmp	r0, #1
 8005c86:	d156      	bne.n	8005d36 <HAL_TIM_Encoder_Start_IT+0xcc>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005c88:	2a01      	cmp	r2, #1
 8005c8a:	d155      	bne.n	8005d38 <HAL_TIM_Encoder_Start_IT+0xce>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c8c:	2302      	movs	r3, #2
 8005c8e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c92:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005c96:	6820      	ldr	r0, [r4, #0]
 8005c98:	f7ff ff7a 	bl	8005b90 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005c9c:	6822      	ldr	r2, [r4, #0]
 8005c9e:	68d3      	ldr	r3, [r2, #12]
 8005ca0:	f043 0302 	orr.w	r3, r3, #2
 8005ca4:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_ENABLE(htim);
 8005ca6:	6822      	ldr	r2, [r4, #0]
 8005ca8:	6813      	ldr	r3, [r2, #0]
 8005caa:	f043 0301 	orr.w	r3, r3, #1
 8005cae:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8005cb0:	2000      	movs	r0, #0
 8005cb2:	e041      	b.n	8005d38 <HAL_TIM_Encoder_Start_IT+0xce>
 8005cb4:	b2db      	uxtb	r3, r3
 8005cb6:	fa5f fc8c 	uxtb.w	ip, ip
 8005cba:	468e      	mov	lr, r1
  else if (Channel == TIM_CHANNEL_2)
 8005cbc:	2904      	cmp	r1, #4
 8005cbe:	d025      	beq.n	8005d0c <HAL_TIM_Encoder_Start_IT+0xa2>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005cc0:	2801      	cmp	r0, #1
 8005cc2:	d13e      	bne.n	8005d42 <HAL_TIM_Encoder_Start_IT+0xd8>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	d137      	bne.n	8005d38 <HAL_TIM_Encoder_Start_IT+0xce>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005cc8:	2a01      	cmp	r2, #1
 8005cca:	d13c      	bne.n	8005d46 <HAL_TIM_Encoder_Start_IT+0xdc>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005ccc:	f1bc 0f01 	cmp.w	ip, #1
 8005cd0:	d13b      	bne.n	8005d4a <HAL_TIM_Encoder_Start_IT+0xe0>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cd2:	2302      	movs	r3, #2
 8005cd4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cd8:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cdc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ce0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005ce4:	2100      	movs	r1, #0
 8005ce6:	6820      	ldr	r0, [r4, #0]
 8005ce8:	f7ff ff52 	bl	8005b90 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005cec:	2201      	movs	r2, #1
 8005cee:	2104      	movs	r1, #4
 8005cf0:	6820      	ldr	r0, [r4, #0]
 8005cf2:	f7ff ff4d 	bl	8005b90 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005cf6:	6822      	ldr	r2, [r4, #0]
 8005cf8:	68d3      	ldr	r3, [r2, #12]
 8005cfa:	f043 0302 	orr.w	r3, r3, #2
 8005cfe:	60d3      	str	r3, [r2, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005d00:	6822      	ldr	r2, [r4, #0]
 8005d02:	68d3      	ldr	r3, [r2, #12]
 8005d04:	f043 0304 	orr.w	r3, r3, #4
 8005d08:	60d3      	str	r3, [r2, #12]
      break;
 8005d0a:	e7cc      	b.n	8005ca6 <HAL_TIM_Encoder_Start_IT+0x3c>
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005d0c:	2b01      	cmp	r3, #1
 8005d0e:	d114      	bne.n	8005d3a <HAL_TIM_Encoder_Start_IT+0xd0>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005d10:	f1bc 0f01 	cmp.w	ip, #1
 8005d14:	d113      	bne.n	8005d3e <HAL_TIM_Encoder_Start_IT+0xd4>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d16:	2302      	movs	r3, #2
 8005d18:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005d20:	2201      	movs	r2, #1
 8005d22:	2104      	movs	r1, #4
 8005d24:	6820      	ldr	r0, [r4, #0]
 8005d26:	f7ff ff33 	bl	8005b90 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005d2a:	6822      	ldr	r2, [r4, #0]
 8005d2c:	68d3      	ldr	r3, [r2, #12]
 8005d2e:	f043 0304 	orr.w	r3, r3, #4
 8005d32:	60d3      	str	r3, [r2, #12]
      break;
 8005d34:	e7b7      	b.n	8005ca6 <HAL_TIM_Encoder_Start_IT+0x3c>
      return HAL_ERROR;
 8005d36:	2001      	movs	r0, #1
}
 8005d38:	bd10      	pop	{r4, pc}
      return HAL_ERROR;
 8005d3a:	2001      	movs	r0, #1
 8005d3c:	e7fc      	b.n	8005d38 <HAL_TIM_Encoder_Start_IT+0xce>
 8005d3e:	4618      	mov	r0, r3
 8005d40:	e7fa      	b.n	8005d38 <HAL_TIM_Encoder_Start_IT+0xce>
      return HAL_ERROR;
 8005d42:	2001      	movs	r0, #1
 8005d44:	e7f8      	b.n	8005d38 <HAL_TIM_Encoder_Start_IT+0xce>
 8005d46:	4618      	mov	r0, r3
 8005d48:	e7f6      	b.n	8005d38 <HAL_TIM_Encoder_Start_IT+0xce>
 8005d4a:	4610      	mov	r0, r2
 8005d4c:	e7f4      	b.n	8005d38 <HAL_TIM_Encoder_Start_IT+0xce>
	...

08005d50 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d50:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005d54:	2b01      	cmp	r3, #1
 8005d56:	d02b      	beq.n	8005db0 <HAL_TIMEx_MasterConfigSynchronization+0x60>
{
 8005d58:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d60:	2302      	movs	r3, #2
 8005d62:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d66:	6804      	ldr	r4, [r0, #0]
 8005d68:	6863      	ldr	r3, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d6a:	68a2      	ldr	r2, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d70:	680d      	ldr	r5, [r1, #0]
 8005d72:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d74:	6063      	str	r3, [r4, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d76:	6803      	ldr	r3, [r0, #0]
 8005d78:	4c0e      	ldr	r4, [pc, #56]	; (8005db4 <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 8005d7a:	42a3      	cmp	r3, r4
 8005d7c:	d00a      	beq.n	8005d94 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8005d7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d82:	d007      	beq.n	8005d94 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8005d84:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 8005d88:	42a3      	cmp	r3, r4
 8005d8a:	d003      	beq.n	8005d94 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8005d8c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8005d90:	42a3      	cmp	r3, r4
 8005d92:	d104      	bne.n	8005d9e <HAL_TIMEx_MasterConfigSynchronization+0x4e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d98:	6849      	ldr	r1, [r1, #4]
 8005d9a:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d9c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d9e:	2301      	movs	r3, #1
 8005da0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005da4:	2300      	movs	r3, #0
 8005da6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8005daa:	4618      	mov	r0, r3
}
 8005dac:	bc30      	pop	{r4, r5}
 8005dae:	4770      	bx	lr
  __HAL_LOCK(htim);
 8005db0:	2002      	movs	r0, #2
}
 8005db2:	4770      	bx	lr
 8005db4:	40012c00 	.word	0x40012c00

08005db8 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005db8:	4770      	bx	lr

08005dba <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005dba:	4770      	bx	lr

08005dbc <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005dbc:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dbe:	f102 030c 	add.w	r3, r2, #12
 8005dc2:	e853 3f00 	ldrex	r3, [r3]
 8005dc6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dca:	320c      	adds	r2, #12
 8005dcc:	e842 3100 	strex	r1, r3, [r2]
 8005dd0:	2900      	cmp	r1, #0
 8005dd2:	d1f3      	bne.n	8005dbc <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dd4:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dd6:	f102 0314 	add.w	r3, r2, #20
 8005dda:	e853 3f00 	ldrex	r3, [r3]
 8005dde:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005de2:	3214      	adds	r2, #20
 8005de4:	e842 3100 	strex	r1, r3, [r2]
 8005de8:	2900      	cmp	r1, #0
 8005dea:	d1f3      	bne.n	8005dd4 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005dec:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8005dee:	2b01      	cmp	r3, #1
 8005df0:	d005      	beq.n	8005dfe <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005df2:	2320      	movs	r3, #32
 8005df4:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005df8:	2300      	movs	r3, #0
 8005dfa:	6303      	str	r3, [r0, #48]	; 0x30
}
 8005dfc:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dfe:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e00:	f102 030c 	add.w	r3, r2, #12
 8005e04:	e853 3f00 	ldrex	r3, [r3]
 8005e08:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e0c:	320c      	adds	r2, #12
 8005e0e:	e842 3100 	strex	r1, r3, [r2]
 8005e12:	2900      	cmp	r1, #0
 8005e14:	d1f3      	bne.n	8005dfe <UART_EndRxTransfer+0x42>
 8005e16:	e7ec      	b.n	8005df2 <UART_EndRxTransfer+0x36>

08005e18 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e18:	b510      	push	{r4, lr}
 8005e1a:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e1c:	6802      	ldr	r2, [r0, #0]
 8005e1e:	6913      	ldr	r3, [r2, #16]
 8005e20:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005e24:	68c1      	ldr	r1, [r0, #12]
 8005e26:	430b      	orrs	r3, r1
 8005e28:	6113      	str	r3, [r2, #16]
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
  MODIFY_REG(huart->Instance->CR1,
 8005e2a:	6801      	ldr	r1, [r0, #0]
 8005e2c:	68ca      	ldr	r2, [r1, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005e2e:	6883      	ldr	r3, [r0, #8]
 8005e30:	6900      	ldr	r0, [r0, #16]
 8005e32:	4303      	orrs	r3, r0
 8005e34:	6960      	ldr	r0, [r4, #20]
 8005e36:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8005e38:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8005e3c:	f022 020c 	bic.w	r2, r2, #12
 8005e40:	4313      	orrs	r3, r2
 8005e42:	60cb      	str	r3, [r1, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005e44:	6822      	ldr	r2, [r4, #0]
 8005e46:	6953      	ldr	r3, [r2, #20]
 8005e48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e4c:	69a1      	ldr	r1, [r4, #24]
 8005e4e:	430b      	orrs	r3, r1
 8005e50:	6153      	str	r3, [r2, #20]


  if(huart->Instance == USART1)
 8005e52:	6822      	ldr	r2, [r4, #0]
 8005e54:	4b11      	ldr	r3, [pc, #68]	; (8005e9c <UART_SetConfig+0x84>)
 8005e56:	429a      	cmp	r2, r3
 8005e58:	d01b      	beq.n	8005e92 <UART_SetConfig+0x7a>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005e5a:	f7ff fc91 	bl	8005780 <HAL_RCC_GetPCLK1Freq>
 8005e5e:	4603      	mov	r3, r0
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005e60:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005e64:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005e68:	6862      	ldr	r2, [r4, #4]
 8005e6a:	0092      	lsls	r2, r2, #2
 8005e6c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e70:	6820      	ldr	r0, [r4, #0]
 8005e72:	490b      	ldr	r1, [pc, #44]	; (8005ea0 <UART_SetConfig+0x88>)
 8005e74:	fba1 4203 	umull	r4, r2, r1, r3
 8005e78:	0952      	lsrs	r2, r2, #5
 8005e7a:	2464      	movs	r4, #100	; 0x64
 8005e7c:	fb04 3312 	mls	r3, r4, r2, r3
 8005e80:	011b      	lsls	r3, r3, #4
 8005e82:	3332      	adds	r3, #50	; 0x32
 8005e84:	fba1 1303 	umull	r1, r3, r1, r3
 8005e88:	0112      	lsls	r2, r2, #4
 8005e8a:	eb02 1353 	add.w	r3, r2, r3, lsr #5
 8005e8e:	6083      	str	r3, [r0, #8]
#endif /* USART_CR1_OVER8 */
}
 8005e90:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK2Freq();
 8005e92:	f7ff fc85 	bl	80057a0 <HAL_RCC_GetPCLK2Freq>
 8005e96:	4603      	mov	r3, r0
 8005e98:	e7e2      	b.n	8005e60 <UART_SetConfig+0x48>
 8005e9a:	bf00      	nop
 8005e9c:	40013800 	.word	0x40013800
 8005ea0:	51eb851f 	.word	0x51eb851f

08005ea4 <HAL_UART_Init>:
  if (huart == NULL)
 8005ea4:	b360      	cbz	r0, 8005f00 <HAL_UART_Init+0x5c>
{
 8005ea6:	b510      	push	{r4, lr}
 8005ea8:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8005eaa:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8005eae:	b313      	cbz	r3, 8005ef6 <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 8005eb0:	2324      	movs	r3, #36	; 0x24
 8005eb2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UART_DISABLE(huart);
 8005eb6:	6822      	ldr	r2, [r4, #0]
 8005eb8:	68d3      	ldr	r3, [r2, #12]
 8005eba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ebe:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8005ec0:	4620      	mov	r0, r4
 8005ec2:	f7ff ffa9 	bl	8005e18 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ec6:	6822      	ldr	r2, [r4, #0]
 8005ec8:	6913      	ldr	r3, [r2, #16]
 8005eca:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8005ece:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ed0:	6822      	ldr	r2, [r4, #0]
 8005ed2:	6953      	ldr	r3, [r2, #20]
 8005ed4:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8005ed8:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8005eda:	6822      	ldr	r2, [r4, #0]
 8005edc:	68d3      	ldr	r3, [r2, #12]
 8005ede:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005ee2:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ee4:	2000      	movs	r0, #0
 8005ee6:	6460      	str	r0, [r4, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005ee8:	2320      	movs	r3, #32
 8005eea:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005eee:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ef2:	6360      	str	r0, [r4, #52]	; 0x34
}
 8005ef4:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8005ef6:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_UART_MspInit(huart);
 8005efa:	f7fc fa13 	bl	8002324 <HAL_UART_MspInit>
 8005efe:	e7d7      	b.n	8005eb0 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8005f00:	2001      	movs	r0, #1
}
 8005f02:	4770      	bx	lr

08005f04 <HAL_UART_TxCpltCallback>:
}
 8005f04:	4770      	bx	lr

08005f06 <HAL_UART_RxCpltCallback>:
}
 8005f06:	4770      	bx	lr

08005f08 <HAL_UART_ErrorCallback>:
}
 8005f08:	4770      	bx	lr

08005f0a <UART_DMAAbortOnError>:
{
 8005f0a:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f0c:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8005f0e:	2300      	movs	r3, #0
 8005f10:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005f12:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8005f14:	f7ff fff8 	bl	8005f08 <HAL_UART_ErrorCallback>
}
 8005f18:	bd08      	pop	{r3, pc}

08005f1a <HAL_UARTEx_RxEventCallback>:
}
 8005f1a:	4770      	bx	lr

08005f1c <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005f1c:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 8005f20:	b2db      	uxtb	r3, r3
 8005f22:	2b22      	cmp	r3, #34	; 0x22
 8005f24:	d11e      	bne.n	8005f64 <UART_Receive_IT+0x48>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f26:	6883      	ldr	r3, [r0, #8]
 8005f28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f2c:	d006      	beq.n	8005f3c <UART_Receive_IT+0x20>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005f2e:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005f30:	b183      	cbz	r3, 8005f54 <UART_Receive_IT+0x38>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005f32:	6803      	ldr	r3, [r0, #0]
 8005f34:	685b      	ldr	r3, [r3, #4]
 8005f36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f3a:	e01b      	b.n	8005f74 <UART_Receive_IT+0x58>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f3c:	6903      	ldr	r3, [r0, #16]
 8005f3e:	b9ab      	cbnz	r3, 8005f6c <UART_Receive_IT+0x50>
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005f40:	6a82      	ldr	r2, [r0, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005f42:	6803      	ldr	r3, [r0, #0]
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f4a:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 8005f4c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005f4e:	3302      	adds	r3, #2
 8005f50:	6283      	str	r3, [r0, #40]	; 0x28
 8005f52:	e013      	b.n	8005f7c <UART_Receive_IT+0x60>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005f54:	6903      	ldr	r3, [r0, #16]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d1eb      	bne.n	8005f32 <UART_Receive_IT+0x16>
 8005f5a:	e008      	b.n	8005f6e <UART_Receive_IT+0x52>
        HAL_UART_RxCpltCallback(huart);
 8005f5c:	f7ff ffd3 	bl	8005f06 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 8005f60:	2000      	movs	r0, #0
 8005f62:	e048      	b.n	8005ff6 <UART_Receive_IT+0xda>
    return HAL_BUSY;
 8005f64:	2002      	movs	r0, #2
 8005f66:	4770      	bx	lr
    return HAL_OK;
 8005f68:	2000      	movs	r0, #0
}
 8005f6a:	4770      	bx	lr
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005f6c:	6a82      	ldr	r2, [r0, #40]	; 0x28
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005f6e:	6803      	ldr	r3, [r0, #0]
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	b2db      	uxtb	r3, r3
 8005f74:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 8005f76:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005f78:	3301      	adds	r3, #1
 8005f7a:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8005f7c:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8005f7e:	3b01      	subs	r3, #1
 8005f80:	b29b      	uxth	r3, r3
 8005f82:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d1ef      	bne.n	8005f68 <UART_Receive_IT+0x4c>
{
 8005f88:	b500      	push	{lr}
 8005f8a:	b083      	sub	sp, #12
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005f8c:	6802      	ldr	r2, [r0, #0]
 8005f8e:	68d3      	ldr	r3, [r2, #12]
 8005f90:	f023 0320 	bic.w	r3, r3, #32
 8005f94:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005f96:	6802      	ldr	r2, [r0, #0]
 8005f98:	68d3      	ldr	r3, [r2, #12]
 8005f9a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f9e:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005fa0:	6802      	ldr	r2, [r0, #0]
 8005fa2:	6953      	ldr	r3, [r2, #20]
 8005fa4:	f023 0301 	bic.w	r3, r3, #1
 8005fa8:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8005faa:	2320      	movs	r3, #32
 8005fac:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	6343      	str	r3, [r0, #52]	; 0x34
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fb4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8005fb6:	2b01      	cmp	r3, #1
 8005fb8:	d1d0      	bne.n	8005f5c <UART_Receive_IT+0x40>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	6303      	str	r3, [r0, #48]	; 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fbe:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fc0:	f102 030c 	add.w	r3, r2, #12
 8005fc4:	e853 3f00 	ldrex	r3, [r3]
 8005fc8:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fcc:	320c      	adds	r2, #12
 8005fce:	e842 3100 	strex	r1, r3, [r2]
 8005fd2:	2900      	cmp	r1, #0
 8005fd4:	d1f3      	bne.n	8005fbe <UART_Receive_IT+0xa2>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005fd6:	6803      	ldr	r3, [r0, #0]
 8005fd8:	681a      	ldr	r2, [r3, #0]
 8005fda:	f012 0f10 	tst.w	r2, #16
 8005fde:	d006      	beq.n	8005fee <UART_Receive_IT+0xd2>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	9201      	str	r2, [sp, #4]
 8005fe4:	681a      	ldr	r2, [r3, #0]
 8005fe6:	9201      	str	r2, [sp, #4]
 8005fe8:	685b      	ldr	r3, [r3, #4]
 8005fea:	9301      	str	r3, [sp, #4]
 8005fec:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005fee:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8005ff0:	f7ff ff93 	bl	8005f1a <HAL_UARTEx_RxEventCallback>
      return HAL_OK;
 8005ff4:	2000      	movs	r0, #0
}
 8005ff6:	b003      	add	sp, #12
 8005ff8:	f85d fb04 	ldr.w	pc, [sp], #4

08005ffc <HAL_UART_IRQHandler>:
{
 8005ffc:	b510      	push	{r4, lr}
 8005ffe:	b082      	sub	sp, #8
 8006000:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006002:	6802      	ldr	r2, [r0, #0]
 8006004:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006006:	68d1      	ldr	r1, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006008:	6950      	ldr	r0, [r2, #20]
  if (errorflags == RESET)
 800600a:	f013 0f0f 	tst.w	r3, #15
 800600e:	d109      	bne.n	8006024 <HAL_UART_IRQHandler+0x28>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006010:	f013 0f20 	tst.w	r3, #32
 8006014:	d00d      	beq.n	8006032 <HAL_UART_IRQHandler+0x36>
 8006016:	f011 0f20 	tst.w	r1, #32
 800601a:	d00a      	beq.n	8006032 <HAL_UART_IRQHandler+0x36>
      UART_Receive_IT(huart);
 800601c:	4620      	mov	r0, r4
 800601e:	f7ff ff7d 	bl	8005f1c <UART_Receive_IT>
      return;
 8006022:	e017      	b.n	8006054 <HAL_UART_IRQHandler+0x58>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006024:	f000 0001 	and.w	r0, r0, #1
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006028:	f401 7c90 	and.w	ip, r1, #288	; 0x120
 800602c:	ea5c 0c00 	orrs.w	ip, ip, r0
 8006030:	d112      	bne.n	8006058 <HAL_UART_IRQHandler+0x5c>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006032:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8006034:	2801      	cmp	r0, #1
 8006036:	d07f      	beq.n	8006138 <HAL_UART_IRQHandler+0x13c>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006038:	f013 0f80 	tst.w	r3, #128	; 0x80
 800603c:	d003      	beq.n	8006046 <HAL_UART_IRQHandler+0x4a>
 800603e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8006042:	f040 8119 	bne.w	8006278 <HAL_UART_IRQHandler+0x27c>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006046:	f013 0f40 	tst.w	r3, #64	; 0x40
 800604a:	d003      	beq.n	8006054 <HAL_UART_IRQHandler+0x58>
 800604c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8006050:	f040 813f 	bne.w	80062d2 <HAL_UART_IRQHandler+0x2d6>
}
 8006054:	b002      	add	sp, #8
 8006056:	bd10      	pop	{r4, pc}
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006058:	f013 0f01 	tst.w	r3, #1
 800605c:	d006      	beq.n	800606c <HAL_UART_IRQHandler+0x70>
 800605e:	f411 7f80 	tst.w	r1, #256	; 0x100
 8006062:	d003      	beq.n	800606c <HAL_UART_IRQHandler+0x70>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006064:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8006066:	f042 0201 	orr.w	r2, r2, #1
 800606a:	6462      	str	r2, [r4, #68]	; 0x44
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800606c:	f013 0f04 	tst.w	r3, #4
 8006070:	d02f      	beq.n	80060d2 <HAL_UART_IRQHandler+0xd6>
 8006072:	b158      	cbz	r0, 800608c <HAL_UART_IRQHandler+0x90>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006074:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8006076:	f042 0202 	orr.w	r2, r2, #2
 800607a:	6462      	str	r2, [r4, #68]	; 0x44
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800607c:	f013 0f02 	tst.w	r3, #2
 8006080:	f000 8132 	beq.w	80062e8 <HAL_UART_IRQHandler+0x2ec>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006084:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8006086:	f042 0204 	orr.w	r2, r2, #4
 800608a:	6462      	str	r2, [r4, #68]	; 0x44
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800608c:	f013 0f08 	tst.w	r3, #8
 8006090:	d007      	beq.n	80060a2 <HAL_UART_IRQHandler+0xa6>
 8006092:	f001 0220 	and.w	r2, r1, #32
 8006096:	4302      	orrs	r2, r0
 8006098:	d003      	beq.n	80060a2 <HAL_UART_IRQHandler+0xa6>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800609a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800609c:	f042 0208 	orr.w	r2, r2, #8
 80060a0:	6462      	str	r2, [r4, #68]	; 0x44
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80060a2:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80060a4:	2a00      	cmp	r2, #0
 80060a6:	d0d5      	beq.n	8006054 <HAL_UART_IRQHandler+0x58>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80060a8:	f013 0f20 	tst.w	r3, #32
 80060ac:	d002      	beq.n	80060b4 <HAL_UART_IRQHandler+0xb8>
 80060ae:	f011 0f20 	tst.w	r1, #32
 80060b2:	d114      	bne.n	80060de <HAL_UART_IRQHandler+0xe2>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80060b4:	6823      	ldr	r3, [r4, #0]
 80060b6:	695a      	ldr	r2, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80060b8:	6c63      	ldr	r3, [r4, #68]	; 0x44
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80060ba:	f002 0240 	and.w	r2, r2, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80060be:	f003 0308 	and.w	r3, r3, #8
 80060c2:	4313      	orrs	r3, r2
 80060c4:	d10f      	bne.n	80060e6 <HAL_UART_IRQHandler+0xea>
        HAL_UART_ErrorCallback(huart);
 80060c6:	4620      	mov	r0, r4
 80060c8:	f7ff ff1e 	bl	8005f08 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060cc:	2300      	movs	r3, #0
 80060ce:	6463      	str	r3, [r4, #68]	; 0x44
 80060d0:	e7c0      	b.n	8006054 <HAL_UART_IRQHandler+0x58>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80060d2:	f013 0f02 	tst.w	r3, #2
 80060d6:	d0d9      	beq.n	800608c <HAL_UART_IRQHandler+0x90>
 80060d8:	2800      	cmp	r0, #0
 80060da:	d0d7      	beq.n	800608c <HAL_UART_IRQHandler+0x90>
 80060dc:	e7d2      	b.n	8006084 <HAL_UART_IRQHandler+0x88>
        UART_Receive_IT(huart);
 80060de:	4620      	mov	r0, r4
 80060e0:	f7ff ff1c 	bl	8005f1c <UART_Receive_IT>
 80060e4:	e7e6      	b.n	80060b4 <HAL_UART_IRQHandler+0xb8>
        UART_EndRxTransfer(huart);
 80060e6:	4620      	mov	r0, r4
 80060e8:	f7ff fe68 	bl	8005dbc <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060ec:	6823      	ldr	r3, [r4, #0]
 80060ee:	695b      	ldr	r3, [r3, #20]
 80060f0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80060f4:	d01c      	beq.n	8006130 <HAL_UART_IRQHandler+0x134>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80060f6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060f8:	f102 0314 	add.w	r3, r2, #20
 80060fc:	e853 3f00 	ldrex	r3, [r3]
 8006100:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006104:	3214      	adds	r2, #20
 8006106:	e842 3100 	strex	r1, r3, [r2]
 800610a:	2900      	cmp	r1, #0
 800610c:	d1f3      	bne.n	80060f6 <HAL_UART_IRQHandler+0xfa>
          if (huart->hdmarx != NULL)
 800610e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006110:	b153      	cbz	r3, 8006128 <HAL_UART_IRQHandler+0x12c>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006112:	4a78      	ldr	r2, [pc, #480]	; (80062f4 <HAL_UART_IRQHandler+0x2f8>)
 8006114:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006116:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8006118:	f7fc fe1a 	bl	8002d50 <HAL_DMA_Abort_IT>
 800611c:	2800      	cmp	r0, #0
 800611e:	d099      	beq.n	8006054 <HAL_UART_IRQHandler+0x58>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006120:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8006122:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006124:	4798      	blx	r3
 8006126:	e795      	b.n	8006054 <HAL_UART_IRQHandler+0x58>
            HAL_UART_ErrorCallback(huart);
 8006128:	4620      	mov	r0, r4
 800612a:	f7ff feed 	bl	8005f08 <HAL_UART_ErrorCallback>
 800612e:	e791      	b.n	8006054 <HAL_UART_IRQHandler+0x58>
          HAL_UART_ErrorCallback(huart);
 8006130:	4620      	mov	r0, r4
 8006132:	f7ff fee9 	bl	8005f08 <HAL_UART_ErrorCallback>
 8006136:	e78d      	b.n	8006054 <HAL_UART_IRQHandler+0x58>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006138:	f013 0f10 	tst.w	r3, #16
 800613c:	f43f af7c 	beq.w	8006038 <HAL_UART_IRQHandler+0x3c>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006140:	f011 0f10 	tst.w	r1, #16
 8006144:	f43f af78 	beq.w	8006038 <HAL_UART_IRQHandler+0x3c>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006148:	2300      	movs	r3, #0
 800614a:	9301      	str	r3, [sp, #4]
 800614c:	6813      	ldr	r3, [r2, #0]
 800614e:	9301      	str	r3, [sp, #4]
 8006150:	6853      	ldr	r3, [r2, #4]
 8006152:	9301      	str	r3, [sp, #4]
 8006154:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006156:	6953      	ldr	r3, [r2, #20]
 8006158:	f013 0f40 	tst.w	r3, #64	; 0x40
 800615c:	d050      	beq.n	8006200 <HAL_UART_IRQHandler+0x204>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800615e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8006160:	6813      	ldr	r3, [r2, #0]
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 8006166:	2b00      	cmp	r3, #0
 8006168:	f43f af74 	beq.w	8006054 <HAL_UART_IRQHandler+0x58>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800616c:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 800616e:	4299      	cmp	r1, r3
 8006170:	f67f af70 	bls.w	8006054 <HAL_UART_IRQHandler+0x58>
        huart->RxXferCount = nb_remaining_rx_data;
 8006174:	85e3      	strh	r3, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006176:	6993      	ldr	r3, [r2, #24]
 8006178:	2b20      	cmp	r3, #32
 800617a:	d037      	beq.n	80061ec <HAL_UART_IRQHandler+0x1f0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800617c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800617e:	f102 030c 	add.w	r3, r2, #12
 8006182:	e853 3f00 	ldrex	r3, [r3]
 8006186:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800618a:	320c      	adds	r2, #12
 800618c:	e842 3100 	strex	r1, r3, [r2]
 8006190:	2900      	cmp	r1, #0
 8006192:	d1f3      	bne.n	800617c <HAL_UART_IRQHandler+0x180>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006194:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006196:	f102 0314 	add.w	r3, r2, #20
 800619a:	e853 3f00 	ldrex	r3, [r3]
 800619e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061a2:	3214      	adds	r2, #20
 80061a4:	e842 3100 	strex	r1, r3, [r2]
 80061a8:	2900      	cmp	r1, #0
 80061aa:	d1f3      	bne.n	8006194 <HAL_UART_IRQHandler+0x198>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061ac:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ae:	f102 0314 	add.w	r3, r2, #20
 80061b2:	e853 3f00 	ldrex	r3, [r3]
 80061b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ba:	3214      	adds	r2, #20
 80061bc:	e842 3100 	strex	r1, r3, [r2]
 80061c0:	2900      	cmp	r1, #0
 80061c2:	d1f3      	bne.n	80061ac <HAL_UART_IRQHandler+0x1b0>
          huart->RxState = HAL_UART_STATE_READY;
 80061c4:	2320      	movs	r3, #32
 80061c6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061ca:	2300      	movs	r3, #0
 80061cc:	6323      	str	r3, [r4, #48]	; 0x30
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061ce:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061d0:	f102 030c 	add.w	r3, r2, #12
 80061d4:	e853 3f00 	ldrex	r3, [r3]
 80061d8:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061dc:	320c      	adds	r2, #12
 80061de:	e842 3100 	strex	r1, r3, [r2]
 80061e2:	2900      	cmp	r1, #0
 80061e4:	d1f3      	bne.n	80061ce <HAL_UART_IRQHandler+0x1d2>
          (void)HAL_DMA_Abort(huart->hdmarx);
 80061e6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80061e8:	f7fc fd8e 	bl	8002d08 <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80061ec:	2302      	movs	r3, #2
 80061ee:	6363      	str	r3, [r4, #52]	; 0x34
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80061f0:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80061f2:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80061f4:	1ac9      	subs	r1, r1, r3
 80061f6:	b289      	uxth	r1, r1
 80061f8:	4620      	mov	r0, r4
 80061fa:	f7ff fe8e 	bl	8005f1a <HAL_UARTEx_RxEventCallback>
 80061fe:	e729      	b.n	8006054 <HAL_UART_IRQHandler+0x58>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006200:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8006202:	b29a      	uxth	r2, r3
      if ((huart->RxXferCount > 0U)
 8006204:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8006206:	b29b      	uxth	r3, r3
 8006208:	2b00      	cmp	r3, #0
 800620a:	f43f af23 	beq.w	8006054 <HAL_UART_IRQHandler+0x58>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800620e:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 8006210:	1a9b      	subs	r3, r3, r2
 8006212:	b299      	uxth	r1, r3
          && (nb_rx_data > 0U))
 8006214:	2900      	cmp	r1, #0
 8006216:	f43f af1d 	beq.w	8006054 <HAL_UART_IRQHandler+0x58>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800621a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800621c:	f102 030c 	add.w	r3, r2, #12
 8006220:	e853 3f00 	ldrex	r3, [r3]
 8006224:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006228:	320c      	adds	r2, #12
 800622a:	e842 3000 	strex	r0, r3, [r2]
 800622e:	2800      	cmp	r0, #0
 8006230:	d1f3      	bne.n	800621a <HAL_UART_IRQHandler+0x21e>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006232:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006234:	f102 0314 	add.w	r3, r2, #20
 8006238:	e853 3f00 	ldrex	r3, [r3]
 800623c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006240:	3214      	adds	r2, #20
 8006242:	e842 3000 	strex	r0, r3, [r2]
 8006246:	2800      	cmp	r0, #0
 8006248:	d1f3      	bne.n	8006232 <HAL_UART_IRQHandler+0x236>
        huart->RxState = HAL_UART_STATE_READY;
 800624a:	2320      	movs	r3, #32
 800624c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006250:	2300      	movs	r3, #0
 8006252:	6323      	str	r3, [r4, #48]	; 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006254:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006256:	f102 030c 	add.w	r3, r2, #12
 800625a:	e853 3f00 	ldrex	r3, [r3]
 800625e:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006262:	320c      	adds	r2, #12
 8006264:	e842 3000 	strex	r0, r3, [r2]
 8006268:	2800      	cmp	r0, #0
 800626a:	d1f3      	bne.n	8006254 <HAL_UART_IRQHandler+0x258>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800626c:	2302      	movs	r3, #2
 800626e:	6363      	str	r3, [r4, #52]	; 0x34
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006270:	4620      	mov	r0, r4
 8006272:	f7ff fe52 	bl	8005f1a <HAL_UARTEx_RxEventCallback>
 8006276:	e6ed      	b.n	8006054 <HAL_UART_IRQHandler+0x58>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006278:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800627c:	b2db      	uxtb	r3, r3
 800627e:	2b21      	cmp	r3, #33	; 0x21
 8006280:	f47f aee8 	bne.w	8006054 <HAL_UART_IRQHandler+0x58>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006284:	68a3      	ldr	r3, [r4, #8]
 8006286:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800628a:	d016      	beq.n	80062ba <HAL_UART_IRQHandler+0x2be>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800628c:	6a23      	ldr	r3, [r4, #32]
 800628e:	1c59      	adds	r1, r3, #1
 8006290:	6221      	str	r1, [r4, #32]
 8006292:	781b      	ldrb	r3, [r3, #0]
 8006294:	6053      	str	r3, [r2, #4]
    if (--huart->TxXferCount == 0U)
 8006296:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8006298:	3b01      	subs	r3, #1
 800629a:	b29b      	uxth	r3, r3
 800629c:	84e3      	strh	r3, [r4, #38]	; 0x26
 800629e:	2b00      	cmp	r3, #0
 80062a0:	f47f aed8 	bne.w	8006054 <HAL_UART_IRQHandler+0x58>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80062a4:	6822      	ldr	r2, [r4, #0]
 80062a6:	68d3      	ldr	r3, [r2, #12]
 80062a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062ac:	60d3      	str	r3, [r2, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80062ae:	6822      	ldr	r2, [r4, #0]
 80062b0:	68d3      	ldr	r3, [r2, #12]
 80062b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80062b6:	60d3      	str	r3, [r2, #12]
 80062b8:	e6cc      	b.n	8006054 <HAL_UART_IRQHandler+0x58>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062ba:	6923      	ldr	r3, [r4, #16]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d1e5      	bne.n	800628c <HAL_UART_IRQHandler+0x290>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80062c0:	6a23      	ldr	r3, [r4, #32]
 80062c2:	881b      	ldrh	r3, [r3, #0]
 80062c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062c8:	6053      	str	r3, [r2, #4]
      huart->pTxBuffPtr += 2U;
 80062ca:	6a23      	ldr	r3, [r4, #32]
 80062cc:	3302      	adds	r3, #2
 80062ce:	6223      	str	r3, [r4, #32]
 80062d0:	e7e1      	b.n	8006296 <HAL_UART_IRQHandler+0x29a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80062d2:	68d3      	ldr	r3, [r2, #12]
 80062d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062d8:	60d3      	str	r3, [r2, #12]
  huart->gState = HAL_UART_STATE_READY;
 80062da:	2320      	movs	r3, #32
 80062dc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  HAL_UART_TxCpltCallback(huart);
 80062e0:	4620      	mov	r0, r4
 80062e2:	f7ff fe0f 	bl	8005f04 <HAL_UART_TxCpltCallback>
  return HAL_OK;
 80062e6:	e6b5      	b.n	8006054 <HAL_UART_IRQHandler+0x58>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80062e8:	f013 0f08 	tst.w	r3, #8
 80062ec:	f47f aed5 	bne.w	800609a <HAL_UART_IRQHandler+0x9e>
 80062f0:	e6d7      	b.n	80060a2 <HAL_UART_IRQHandler+0xa6>
 80062f2:	bf00      	nop
 80062f4:	08005f0b 	.word	0x08005f0b

080062f8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80062f8:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 80062fa:	f000 fa65 	bl	80067c8 <vTaskStartScheduler>
  
  return osOK;
}
 80062fe:	2000      	movs	r0, #0
 8006300:	bd08      	pop	{r3, pc}

08006302 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006302:	b570      	push	{r4, r5, r6, lr}
 8006304:	b086      	sub	sp, #24
 8006306:	4684      	mov	ip, r0
 8006308:	460b      	mov	r3, r1
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800630a:	6944      	ldr	r4, [r0, #20]
 800630c:	b1bc      	cbz	r4, 800633e <osThreadCreate+0x3c>
 800630e:	6985      	ldr	r5, [r0, #24]
 8006310:	b1ad      	cbz	r5, 800633e <osThreadCreate+0x3c>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006312:	6840      	ldr	r0, [r0, #4]
 8006314:	f8dc 1000 	ldr.w	r1, [ip]
 8006318:	f8dc 2010 	ldr.w	r2, [ip, #16]
 800631c:	f9bc c008 	ldrsh.w	ip, [ip, #8]
  if (priority != osPriorityError) {
 8006320:	f1bc 0f84 	cmp.w	ip, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 8006324:	bf14      	ite	ne
 8006326:	f10c 0603 	addne.w	r6, ip, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800632a:	2600      	moveq	r6, #0
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800632c:	9502      	str	r5, [sp, #8]
 800632e:	9401      	str	r4, [sp, #4]
 8006330:	9600      	str	r6, [sp, #0]
 8006332:	f000 f9dd 	bl	80066f0 <xTaskCreateStatic>
 8006336:	9005      	str	r0, [sp, #20]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006338:	9805      	ldr	r0, [sp, #20]
}
 800633a:	b006      	add	sp, #24
 800633c:	bd70      	pop	{r4, r5, r6, pc}
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800633e:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8006342:	f8dc 1000 	ldr.w	r1, [ip]
 8006346:	f8bc 2010 	ldrh.w	r2, [ip, #16]
 800634a:	f9bc c008 	ldrsh.w	ip, [ip, #8]
  if (priority != osPriorityError) {
 800634e:	f1bc 0f84 	cmp.w	ip, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 8006352:	bf14      	ite	ne
 8006354:	f10c 0403 	addne.w	r4, ip, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006358:	2400      	moveq	r4, #0
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800635a:	ad05      	add	r5, sp, #20
 800635c:	9501      	str	r5, [sp, #4]
 800635e:	9400      	str	r4, [sp, #0]
 8006360:	f000 fa00 	bl	8006764 <xTaskCreate>
 8006364:	2801      	cmp	r0, #1
 8006366:	d0e7      	beq.n	8006338 <osThreadCreate+0x36>
      return NULL;
 8006368:	2000      	movs	r0, #0
 800636a:	e7e6      	b.n	800633a <osThreadCreate+0x38>

0800636c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800636c:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800636e:	2801      	cmp	r0, #1
 8006370:	bf38      	it	cc
 8006372:	2001      	movcc	r0, #1
 8006374:	f000 fb86 	bl	8006a84 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006378:	2000      	movs	r0, #0
 800637a:	bd08      	pop	{r3, pc}

0800637c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800637c:	f100 0308 	add.w	r3, r0, #8
 8006380:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006382:	f04f 32ff 	mov.w	r2, #4294967295
 8006386:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006388:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800638a:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800638c:	2300      	movs	r3, #0
 800638e:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006390:	4770      	bx	lr

08006392 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8006392:	2300      	movs	r3, #0
 8006394:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006396:	4770      	bx	lr

08006398 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8006398:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800639a:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800639c:	689a      	ldr	r2, [r3, #8]
 800639e:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80063a0:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80063a2:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80063a4:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 80063a6:	6803      	ldr	r3, [r0, #0]
 80063a8:	3301      	adds	r3, #1
 80063aa:	6003      	str	r3, [r0, #0]
}
 80063ac:	4770      	bx	lr

080063ae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80063ae:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80063b0:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80063b2:	f1b5 3fff 	cmp.w	r5, #4294967295
 80063b6:	d011      	beq.n	80063dc <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80063b8:	f100 0308 	add.w	r3, r0, #8
 80063bc:	461c      	mov	r4, r3
 80063be:	685b      	ldr	r3, [r3, #4]
 80063c0:	681a      	ldr	r2, [r3, #0]
 80063c2:	42aa      	cmp	r2, r5
 80063c4:	d9fa      	bls.n	80063bc <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80063c6:	6863      	ldr	r3, [r4, #4]
 80063c8:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80063ca:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80063cc:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80063ce:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80063d0:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 80063d2:	6803      	ldr	r3, [r0, #0]
 80063d4:	3301      	adds	r3, #1
 80063d6:	6003      	str	r3, [r0, #0]
}
 80063d8:	bc30      	pop	{r4, r5}
 80063da:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 80063dc:	6904      	ldr	r4, [r0, #16]
 80063de:	e7f2      	b.n	80063c6 <vListInsert+0x18>

080063e0 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80063e0:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80063e2:	6841      	ldr	r1, [r0, #4]
 80063e4:	6882      	ldr	r2, [r0, #8]
 80063e6:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80063e8:	6841      	ldr	r1, [r0, #4]
 80063ea:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80063ec:	685a      	ldr	r2, [r3, #4]
 80063ee:	4282      	cmp	r2, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80063f0:	bf04      	itt	eq
 80063f2:	6882      	ldreq	r2, [r0, #8]
 80063f4:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80063f6:	2200      	movs	r2, #0
 80063f8:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80063fa:	681a      	ldr	r2, [r3, #0]
 80063fc:	3a01      	subs	r2, #1
 80063fe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006400:	6818      	ldr	r0, [r3, #0]
}
 8006402:	4770      	bx	lr

08006404 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006404:	4b08      	ldr	r3, [pc, #32]	; (8006428 <prvResetNextTaskUnblockTime+0x24>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	b923      	cbnz	r3, 8006416 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800640c:	4b07      	ldr	r3, [pc, #28]	; (800642c <prvResetNextTaskUnblockTime+0x28>)
 800640e:	f04f 32ff 	mov.w	r2, #4294967295
 8006412:	601a      	str	r2, [r3, #0]
 8006414:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006416:	4b04      	ldr	r3, [pc, #16]	; (8006428 <prvResetNextTaskUnblockTime+0x24>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800641c:	68db      	ldr	r3, [r3, #12]
 800641e:	685a      	ldr	r2, [r3, #4]
 8006420:	4b02      	ldr	r3, [pc, #8]	; (800642c <prvResetNextTaskUnblockTime+0x28>)
 8006422:	601a      	str	r2, [r3, #0]
	}
}
 8006424:	4770      	bx	lr
 8006426:	bf00      	nop
 8006428:	20000ce4 	.word	0x20000ce4
 800642c:	20000db8 	.word	0x20000db8

08006430 <prvInitialiseNewTask>:
{
 8006430:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006434:	4606      	mov	r6, r0
 8006436:	461f      	mov	r7, r3
 8006438:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 800643c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800643e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8006442:	3a01      	subs	r2, #1
 8006444:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8006446:	eb05 0582 	add.w	r5, r5, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800644a:	f025 0507 	bic.w	r5, r5, #7
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800644e:	f101 3cff 	add.w	ip, r1, #4294967295
 8006452:	f104 0e33 	add.w	lr, r4, #51	; 0x33
 8006456:	310f      	adds	r1, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006458:	f81c 2f01 	ldrb.w	r2, [ip, #1]!
 800645c:	f80e 2f01 	strb.w	r2, [lr, #1]!
		if( pcName[ x ] == 0x00 )
 8006460:	b10a      	cbz	r2, 8006466 <prvInitialiseNewTask+0x36>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006462:	458c      	cmp	ip, r1
 8006464:	d1f8      	bne.n	8006458 <prvInitialiseNewTask+0x28>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006466:	f04f 0a00 	mov.w	sl, #0
 800646a:	f884 a043 	strb.w	sl, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800646e:	9b08      	ldr	r3, [sp, #32]
 8006470:	2b06      	cmp	r3, #6
 8006472:	bf28      	it	cs
 8006474:	2306      	movcs	r3, #6
 8006476:	4699      	mov	r9, r3
	pxNewTCB->uxPriority = uxPriority;
 8006478:	62e3      	str	r3, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800647a:	6463      	str	r3, [r4, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800647c:	f8c4 a048 	str.w	sl, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006480:	1d20      	adds	r0, r4, #4
 8006482:	f7ff ff86 	bl	8006392 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006486:	f104 0018 	add.w	r0, r4, #24
 800648a:	f7ff ff82 	bl	8006392 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800648e:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006490:	f1c9 0307 	rsb	r3, r9, #7
 8006494:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006496:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 8006498:	f8c4 a04c 	str.w	sl, [r4, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800649c:	f884 a050 	strb.w	sl, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80064a0:	463a      	mov	r2, r7
 80064a2:	4631      	mov	r1, r6
 80064a4:	4628      	mov	r0, r5
 80064a6:	f000 fb8d 	bl	8006bc4 <pxPortInitialiseStack>
 80064aa:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 80064ac:	f1b8 0f00 	cmp.w	r8, #0
 80064b0:	d001      	beq.n	80064b6 <prvInitialiseNewTask+0x86>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80064b2:	f8c8 4000 	str.w	r4, [r8]
}
 80064b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

080064bc <prvAddNewTaskToReadyList>:
{
 80064bc:	b570      	push	{r4, r5, r6, lr}
 80064be:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80064c0:	f000 fba8 	bl	8006c14 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 80064c4:	4a2f      	ldr	r2, [pc, #188]	; (8006584 <prvAddNewTaskToReadyList+0xc8>)
 80064c6:	6813      	ldr	r3, [r2, #0]
 80064c8:	3301      	adds	r3, #1
 80064ca:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80064cc:	4b2e      	ldr	r3, [pc, #184]	; (8006588 <prvAddNewTaskToReadyList+0xcc>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d033      	beq.n	800653c <prvAddNewTaskToReadyList+0x80>
			if( xSchedulerRunning == pdFALSE )
 80064d4:	4b2d      	ldr	r3, [pc, #180]	; (800658c <prvAddNewTaskToReadyList+0xd0>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	b93b      	cbnz	r3, 80064ea <prvAddNewTaskToReadyList+0x2e>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80064da:	4b2b      	ldr	r3, [pc, #172]	; (8006588 <prvAddNewTaskToReadyList+0xcc>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064e0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80064e2:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 80064e4:	bf9c      	itt	ls
 80064e6:	4b28      	ldrls	r3, [pc, #160]	; (8006588 <prvAddNewTaskToReadyList+0xcc>)
 80064e8:	601c      	strls	r4, [r3, #0]
		uxTaskNumber++;
 80064ea:	4a29      	ldr	r2, [pc, #164]	; (8006590 <prvAddNewTaskToReadyList+0xd4>)
 80064ec:	6813      	ldr	r3, [r2, #0]
 80064ee:	3301      	adds	r3, #1
 80064f0:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80064f2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80064f4:	4a27      	ldr	r2, [pc, #156]	; (8006594 <prvAddNewTaskToReadyList+0xd8>)
 80064f6:	6811      	ldr	r1, [r2, #0]
 80064f8:	2301      	movs	r3, #1
 80064fa:	4083      	lsls	r3, r0
 80064fc:	430b      	orrs	r3, r1
 80064fe:	6013      	str	r3, [r2, #0]
 8006500:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006504:	1d21      	adds	r1, r4, #4
 8006506:	4b24      	ldr	r3, [pc, #144]	; (8006598 <prvAddNewTaskToReadyList+0xdc>)
 8006508:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800650c:	f7ff ff44 	bl	8006398 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8006510:	f000 fba2 	bl	8006c58 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8006514:	4b1d      	ldr	r3, [pc, #116]	; (800658c <prvAddNewTaskToReadyList+0xd0>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	b17b      	cbz	r3, 800653a <prvAddNewTaskToReadyList+0x7e>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800651a:	4b1b      	ldr	r3, [pc, #108]	; (8006588 <prvAddNewTaskToReadyList+0xcc>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006520:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006522:	429a      	cmp	r2, r3
 8006524:	d209      	bcs.n	800653a <prvAddNewTaskToReadyList+0x7e>
			taskYIELD_IF_USING_PREEMPTION();
 8006526:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800652a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800652e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006532:	f3bf 8f4f 	dsb	sy
 8006536:	f3bf 8f6f 	isb	sy
}
 800653a:	bd70      	pop	{r4, r5, r6, pc}
			pxCurrentTCB = pxNewTCB;
 800653c:	4b12      	ldr	r3, [pc, #72]	; (8006588 <prvAddNewTaskToReadyList+0xcc>)
 800653e:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006540:	6813      	ldr	r3, [r2, #0]
 8006542:	2b01      	cmp	r3, #1
 8006544:	d1d1      	bne.n	80064ea <prvAddNewTaskToReadyList+0x2e>
 8006546:	4d14      	ldr	r5, [pc, #80]	; (8006598 <prvAddNewTaskToReadyList+0xdc>)
 8006548:	f105 068c 	add.w	r6, r5, #140	; 0x8c
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800654c:	4628      	mov	r0, r5
 800654e:	f7ff ff15 	bl	800637c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006552:	3514      	adds	r5, #20
 8006554:	42b5      	cmp	r5, r6
 8006556:	d1f9      	bne.n	800654c <prvAddNewTaskToReadyList+0x90>
	vListInitialise( &xDelayedTaskList1 );
 8006558:	4e10      	ldr	r6, [pc, #64]	; (800659c <prvAddNewTaskToReadyList+0xe0>)
 800655a:	4630      	mov	r0, r6
 800655c:	f7ff ff0e 	bl	800637c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006560:	4d0f      	ldr	r5, [pc, #60]	; (80065a0 <prvAddNewTaskToReadyList+0xe4>)
 8006562:	4628      	mov	r0, r5
 8006564:	f7ff ff0a 	bl	800637c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006568:	480e      	ldr	r0, [pc, #56]	; (80065a4 <prvAddNewTaskToReadyList+0xe8>)
 800656a:	f7ff ff07 	bl	800637c <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 800656e:	480e      	ldr	r0, [pc, #56]	; (80065a8 <prvAddNewTaskToReadyList+0xec>)
 8006570:	f7ff ff04 	bl	800637c <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8006574:	480d      	ldr	r0, [pc, #52]	; (80065ac <prvAddNewTaskToReadyList+0xf0>)
 8006576:	f7ff ff01 	bl	800637c <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 800657a:	4b0d      	ldr	r3, [pc, #52]	; (80065b0 <prvAddNewTaskToReadyList+0xf4>)
 800657c:	601e      	str	r6, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800657e:	4b0d      	ldr	r3, [pc, #52]	; (80065b4 <prvAddNewTaskToReadyList+0xf8>)
 8006580:	601d      	str	r5, [r3, #0]
}
 8006582:	e7b2      	b.n	80064ea <prvAddNewTaskToReadyList+0x2e>
 8006584:	20000d78 	.word	0x20000d78
 8006588:	20000ce0 	.word	0x20000ce0
 800658c:	20000dd4 	.word	0x20000dd4
 8006590:	20000d88 	.word	0x20000d88
 8006594:	20000d8c 	.word	0x20000d8c
 8006598:	20000cec 	.word	0x20000cec
 800659c:	20000d90 	.word	0x20000d90
 80065a0:	20000da4 	.word	0x20000da4
 80065a4:	20000dc0 	.word	0x20000dc0
 80065a8:	20000dec 	.word	0x20000dec
 80065ac:	20000dd8 	.word	0x20000dd8
 80065b0:	20000ce4 	.word	0x20000ce4
 80065b4:	20000ce8 	.word	0x20000ce8

080065b8 <prvDeleteTCB>:
	{
 80065b8:	b510      	push	{r4, lr}
 80065ba:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80065bc:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 80065c0:	b163      	cbz	r3, 80065dc <prvDeleteTCB+0x24>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80065c2:	2b01      	cmp	r3, #1
 80065c4:	d011      	beq.n	80065ea <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80065c6:	2b02      	cmp	r3, #2
 80065c8:	d00e      	beq.n	80065e8 <prvDeleteTCB+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80065ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ce:	f383 8811 	msr	BASEPRI, r3
 80065d2:	f3bf 8f6f 	isb	sy
 80065d6:	f3bf 8f4f 	dsb	sy
 80065da:	e7fe      	b.n	80065da <prvDeleteTCB+0x22>
				vPortFree( pxTCB->pxStack );
 80065dc:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80065de:	f000 fccb 	bl	8006f78 <vPortFree>
				vPortFree( pxTCB );
 80065e2:	4620      	mov	r0, r4
 80065e4:	f000 fcc8 	bl	8006f78 <vPortFree>
	}
 80065e8:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 80065ea:	f000 fcc5 	bl	8006f78 <vPortFree>
 80065ee:	e7fb      	b.n	80065e8 <prvDeleteTCB+0x30>

080065f0 <prvIdleTask>:
{
 80065f0:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80065f2:	4c15      	ldr	r4, [pc, #84]	; (8006648 <prvIdleTask+0x58>)
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80065f4:	4f15      	ldr	r7, [pc, #84]	; (800664c <prvIdleTask+0x5c>)
				--uxCurrentNumberOfTasks;
 80065f6:	4e16      	ldr	r6, [pc, #88]	; (8006650 <prvIdleTask+0x60>)
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80065f8:	f8df 8058 	ldr.w	r8, [pc, #88]	; 8006654 <prvIdleTask+0x64>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80065fc:	6823      	ldr	r3, [r4, #0]
 80065fe:	b1a3      	cbz	r3, 800662a <prvIdleTask+0x3a>
			taskENTER_CRITICAL();
 8006600:	f000 fb08 	bl	8006c14 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006608:	1d28      	adds	r0, r5, #4
 800660a:	f7ff fee9 	bl	80063e0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800660e:	6833      	ldr	r3, [r6, #0]
 8006610:	3b01      	subs	r3, #1
 8006612:	6033      	str	r3, [r6, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006614:	6823      	ldr	r3, [r4, #0]
 8006616:	3b01      	subs	r3, #1
 8006618:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 800661a:	f000 fb1d 	bl	8006c58 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 800661e:	4628      	mov	r0, r5
 8006620:	f7ff ffca 	bl	80065b8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006624:	6823      	ldr	r3, [r4, #0]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d1ea      	bne.n	8006600 <prvIdleTask+0x10>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800662a:	f8d8 3000 	ldr.w	r3, [r8]
 800662e:	2b01      	cmp	r3, #1
 8006630:	d9e4      	bls.n	80065fc <prvIdleTask+0xc>
				taskYIELD();
 8006632:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006636:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800663a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800663e:	f3bf 8f4f 	dsb	sy
 8006642:	f3bf 8f6f 	isb	sy
 8006646:	e7d9      	b.n	80065fc <prvIdleTask+0xc>
 8006648:	20000d7c 	.word	0x20000d7c
 800664c:	20000dec 	.word	0x20000dec
 8006650:	20000d78 	.word	0x20000d78
 8006654:	20000cec 	.word	0x20000cec

08006658 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006658:	b570      	push	{r4, r5, r6, lr}
 800665a:	4604      	mov	r4, r0
 800665c:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800665e:	4b1d      	ldr	r3, [pc, #116]	; (80066d4 <prvAddCurrentTaskToDelayedList+0x7c>)
 8006660:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006662:	4b1d      	ldr	r3, [pc, #116]	; (80066d8 <prvAddCurrentTaskToDelayedList+0x80>)
 8006664:	6818      	ldr	r0, [r3, #0]
 8006666:	3004      	adds	r0, #4
 8006668:	f7ff feba 	bl	80063e0 <uxListRemove>
 800666c:	b948      	cbnz	r0, 8006682 <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800666e:	4b1a      	ldr	r3, [pc, #104]	; (80066d8 <prvAddCurrentTaskToDelayedList+0x80>)
 8006670:	681a      	ldr	r2, [r3, #0]
 8006672:	491a      	ldr	r1, [pc, #104]	; (80066dc <prvAddCurrentTaskToDelayedList+0x84>)
 8006674:	680b      	ldr	r3, [r1, #0]
 8006676:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 8006678:	2201      	movs	r2, #1
 800667a:	4082      	lsls	r2, r0
 800667c:	ea23 0302 	bic.w	r3, r3, r2
 8006680:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006682:	f1b4 3fff 	cmp.w	r4, #4294967295
 8006686:	d00d      	beq.n	80066a4 <prvAddCurrentTaskToDelayedList+0x4c>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006688:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800668a:	4b13      	ldr	r3, [pc, #76]	; (80066d8 <prvAddCurrentTaskToDelayedList+0x80>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8006690:	42a6      	cmp	r6, r4
 8006692:	d910      	bls.n	80066b6 <prvAddCurrentTaskToDelayedList+0x5e>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006694:	4b12      	ldr	r3, [pc, #72]	; (80066e0 <prvAddCurrentTaskToDelayedList+0x88>)
 8006696:	6818      	ldr	r0, [r3, #0]
 8006698:	4b0f      	ldr	r3, [pc, #60]	; (80066d8 <prvAddCurrentTaskToDelayedList+0x80>)
 800669a:	6819      	ldr	r1, [r3, #0]
 800669c:	3104      	adds	r1, #4
 800669e:	f7ff fe86 	bl	80063ae <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80066a2:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80066a4:	2d00      	cmp	r5, #0
 80066a6:	d0ef      	beq.n	8006688 <prvAddCurrentTaskToDelayedList+0x30>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80066a8:	4b0b      	ldr	r3, [pc, #44]	; (80066d8 <prvAddCurrentTaskToDelayedList+0x80>)
 80066aa:	6819      	ldr	r1, [r3, #0]
 80066ac:	3104      	adds	r1, #4
 80066ae:	480d      	ldr	r0, [pc, #52]	; (80066e4 <prvAddCurrentTaskToDelayedList+0x8c>)
 80066b0:	f7ff fe72 	bl	8006398 <vListInsertEnd>
 80066b4:	e7f5      	b.n	80066a2 <prvAddCurrentTaskToDelayedList+0x4a>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80066b6:	4b0c      	ldr	r3, [pc, #48]	; (80066e8 <prvAddCurrentTaskToDelayedList+0x90>)
 80066b8:	6818      	ldr	r0, [r3, #0]
 80066ba:	4b07      	ldr	r3, [pc, #28]	; (80066d8 <prvAddCurrentTaskToDelayedList+0x80>)
 80066bc:	6819      	ldr	r1, [r3, #0]
 80066be:	3104      	adds	r1, #4
 80066c0:	f7ff fe75 	bl	80063ae <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80066c4:	4b09      	ldr	r3, [pc, #36]	; (80066ec <prvAddCurrentTaskToDelayedList+0x94>)
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	42a3      	cmp	r3, r4
					xNextTaskUnblockTime = xTimeToWake;
 80066ca:	bf84      	itt	hi
 80066cc:	4b07      	ldrhi	r3, [pc, #28]	; (80066ec <prvAddCurrentTaskToDelayedList+0x94>)
 80066ce:	601c      	strhi	r4, [r3, #0]
}
 80066d0:	e7e7      	b.n	80066a2 <prvAddCurrentTaskToDelayedList+0x4a>
 80066d2:	bf00      	nop
 80066d4:	20000e00 	.word	0x20000e00
 80066d8:	20000ce0 	.word	0x20000ce0
 80066dc:	20000d8c 	.word	0x20000d8c
 80066e0:	20000ce8 	.word	0x20000ce8
 80066e4:	20000dd8 	.word	0x20000dd8
 80066e8:	20000ce4 	.word	0x20000ce4
 80066ec:	20000db8 	.word	0x20000db8

080066f0 <xTaskCreateStatic>:
	{
 80066f0:	b530      	push	{r4, r5, lr}
 80066f2:	b087      	sub	sp, #28
 80066f4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 80066f6:	b17c      	cbz	r4, 8006718 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80066f8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80066fa:	b1b5      	cbz	r5, 800672a <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 80066fc:	2554      	movs	r5, #84	; 0x54
 80066fe:	9504      	str	r5, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006700:	9d04      	ldr	r5, [sp, #16]
 8006702:	2d54      	cmp	r5, #84	; 0x54
 8006704:	d01a      	beq.n	800673c <xTaskCreateStatic+0x4c>
 8006706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800670a:	f383 8811 	msr	BASEPRI, r3
 800670e:	f3bf 8f6f 	isb	sy
 8006712:	f3bf 8f4f 	dsb	sy
 8006716:	e7fe      	b.n	8006716 <xTaskCreateStatic+0x26>
 8006718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800671c:	f383 8811 	msr	BASEPRI, r3
 8006720:	f3bf 8f6f 	isb	sy
 8006724:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 8006728:	e7fe      	b.n	8006728 <xTaskCreateStatic+0x38>
 800672a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800672e:	f383 8811 	msr	BASEPRI, r3
 8006732:	f3bf 8f6f 	isb	sy
 8006736:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 800673a:	e7fe      	b.n	800673a <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800673c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800673e:	632c      	str	r4, [r5, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006740:	2402      	movs	r4, #2
 8006742:	f885 4051 	strb.w	r4, [r5, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006746:	2400      	movs	r4, #0
 8006748:	9403      	str	r4, [sp, #12]
 800674a:	9502      	str	r5, [sp, #8]
 800674c:	ac05      	add	r4, sp, #20
 800674e:	9401      	str	r4, [sp, #4]
 8006750:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006752:	9400      	str	r4, [sp, #0]
 8006754:	f7ff fe6c 	bl	8006430 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006758:	980c      	ldr	r0, [sp, #48]	; 0x30
 800675a:	f7ff feaf 	bl	80064bc <prvAddNewTaskToReadyList>
	}
 800675e:	9805      	ldr	r0, [sp, #20]
 8006760:	b007      	add	sp, #28
 8006762:	bd30      	pop	{r4, r5, pc}

08006764 <xTaskCreate>:
	{
 8006764:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006768:	b085      	sub	sp, #20
 800676a:	4607      	mov	r7, r0
 800676c:	4688      	mov	r8, r1
 800676e:	4614      	mov	r4, r2
 8006770:	461e      	mov	r6, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006772:	0090      	lsls	r0, r2, #2
 8006774:	f000 fb6a 	bl	8006e4c <pvPortMalloc>
			if( pxStack != NULL )
 8006778:	b308      	cbz	r0, 80067be <xTaskCreate+0x5a>
 800677a:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800677c:	2054      	movs	r0, #84	; 0x54
 800677e:	f000 fb65 	bl	8006e4c <pvPortMalloc>
				if( pxNewTCB != NULL )
 8006782:	4605      	mov	r5, r0
 8006784:	b1a8      	cbz	r0, 80067b2 <xTaskCreate+0x4e>
					pxNewTCB->pxStack = pxStack;
 8006786:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800678a:	2300      	movs	r3, #0
 800678c:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006790:	9303      	str	r3, [sp, #12]
 8006792:	9002      	str	r0, [sp, #8]
 8006794:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006796:	9301      	str	r3, [sp, #4]
 8006798:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800679a:	9300      	str	r3, [sp, #0]
 800679c:	4633      	mov	r3, r6
 800679e:	4622      	mov	r2, r4
 80067a0:	4641      	mov	r1, r8
 80067a2:	4638      	mov	r0, r7
 80067a4:	f7ff fe44 	bl	8006430 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80067a8:	4628      	mov	r0, r5
 80067aa:	f7ff fe87 	bl	80064bc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80067ae:	2001      	movs	r0, #1
 80067b0:	e007      	b.n	80067c2 <xTaskCreate+0x5e>
					vPortFree( pxStack );
 80067b2:	4648      	mov	r0, r9
 80067b4:	f000 fbe0 	bl	8006f78 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80067b8:	f04f 30ff 	mov.w	r0, #4294967295
 80067bc:	e001      	b.n	80067c2 <xTaskCreate+0x5e>
 80067be:	f04f 30ff 	mov.w	r0, #4294967295
	}
 80067c2:	b005      	add	sp, #20
 80067c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080067c8 <vTaskStartScheduler>:
{
 80067c8:	b510      	push	{r4, lr}
 80067ca:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80067cc:	2400      	movs	r4, #0
 80067ce:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80067d0:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80067d2:	aa07      	add	r2, sp, #28
 80067d4:	a906      	add	r1, sp, #24
 80067d6:	a805      	add	r0, sp, #20
 80067d8:	f7fb f9f0 	bl	8001bbc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80067dc:	9b05      	ldr	r3, [sp, #20]
 80067de:	9302      	str	r3, [sp, #8]
 80067e0:	9b06      	ldr	r3, [sp, #24]
 80067e2:	9301      	str	r3, [sp, #4]
 80067e4:	9400      	str	r4, [sp, #0]
 80067e6:	4623      	mov	r3, r4
 80067e8:	9a07      	ldr	r2, [sp, #28]
 80067ea:	490d      	ldr	r1, [pc, #52]	; (8006820 <vTaskStartScheduler+0x58>)
 80067ec:	480d      	ldr	r0, [pc, #52]	; (8006824 <vTaskStartScheduler+0x5c>)
 80067ee:	f7ff ff7f 	bl	80066f0 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 80067f2:	b190      	cbz	r0, 800681a <vTaskStartScheduler+0x52>
 80067f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067f8:	f383 8811 	msr	BASEPRI, r3
 80067fc:	f3bf 8f6f 	isb	sy
 8006800:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8006804:	4b08      	ldr	r3, [pc, #32]	; (8006828 <vTaskStartScheduler+0x60>)
 8006806:	f04f 32ff 	mov.w	r2, #4294967295
 800680a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800680c:	4b07      	ldr	r3, [pc, #28]	; (800682c <vTaskStartScheduler+0x64>)
 800680e:	2201      	movs	r2, #1
 8006810:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006812:	4b07      	ldr	r3, [pc, #28]	; (8006830 <vTaskStartScheduler+0x68>)
 8006814:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8006816:	f000 fa87 	bl	8006d28 <xPortStartScheduler>
}
 800681a:	b008      	add	sp, #32
 800681c:	bd10      	pop	{r4, pc}
 800681e:	bf00      	nop
 8006820:	0800c288 	.word	0x0800c288
 8006824:	080065f1 	.word	0x080065f1
 8006828:	20000db8 	.word	0x20000db8
 800682c:	20000dd4 	.word	0x20000dd4
 8006830:	20000e00 	.word	0x20000e00

08006834 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8006834:	4a02      	ldr	r2, [pc, #8]	; (8006840 <vTaskSuspendAll+0xc>)
 8006836:	6813      	ldr	r3, [r2, #0]
 8006838:	3301      	adds	r3, #1
 800683a:	6013      	str	r3, [r2, #0]
}
 800683c:	4770      	bx	lr
 800683e:	bf00      	nop
 8006840:	20000d84 	.word	0x20000d84

08006844 <xTaskIncrementTick>:
{
 8006844:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006848:	4b41      	ldr	r3, [pc, #260]	; (8006950 <xTaskIncrementTick+0x10c>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d171      	bne.n	8006934 <xTaskIncrementTick+0xf0>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006850:	4b40      	ldr	r3, [pc, #256]	; (8006954 <xTaskIncrementTick+0x110>)
 8006852:	681e      	ldr	r6, [r3, #0]
 8006854:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
 8006856:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006858:	b9c6      	cbnz	r6, 800688c <xTaskIncrementTick+0x48>
			taskSWITCH_DELAYED_LISTS();
 800685a:	4b3f      	ldr	r3, [pc, #252]	; (8006958 <xTaskIncrementTick+0x114>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	b143      	cbz	r3, 8006874 <xTaskIncrementTick+0x30>
 8006862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006866:	f383 8811 	msr	BASEPRI, r3
 800686a:	f3bf 8f6f 	isb	sy
 800686e:	f3bf 8f4f 	dsb	sy
 8006872:	e7fe      	b.n	8006872 <xTaskIncrementTick+0x2e>
 8006874:	4a38      	ldr	r2, [pc, #224]	; (8006958 <xTaskIncrementTick+0x114>)
 8006876:	6811      	ldr	r1, [r2, #0]
 8006878:	4b38      	ldr	r3, [pc, #224]	; (800695c <xTaskIncrementTick+0x118>)
 800687a:	6818      	ldr	r0, [r3, #0]
 800687c:	6010      	str	r0, [r2, #0]
 800687e:	6019      	str	r1, [r3, #0]
 8006880:	4a37      	ldr	r2, [pc, #220]	; (8006960 <xTaskIncrementTick+0x11c>)
 8006882:	6813      	ldr	r3, [r2, #0]
 8006884:	3301      	adds	r3, #1
 8006886:	6013      	str	r3, [r2, #0]
 8006888:	f7ff fdbc 	bl	8006404 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800688c:	4b35      	ldr	r3, [pc, #212]	; (8006964 <xTaskIncrementTick+0x120>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	42b3      	cmp	r3, r6
 8006892:	d842      	bhi.n	800691a <xTaskIncrementTick+0xd6>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006894:	4b30      	ldr	r3, [pc, #192]	; (8006958 <xTaskIncrementTick+0x114>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	b13b      	cbz	r3, 80068ac <xTaskIncrementTick+0x68>
BaseType_t xSwitchRequired = pdFALSE;
 800689c:	2500      	movs	r5, #0
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800689e:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8006958 <xTaskIncrementTick+0x114>
					prvAddTaskToReadyList( pxTCB );
 80068a2:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8006968 <xTaskIncrementTick+0x124>
 80068a6:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800696c <xTaskIncrementTick+0x128>
 80068aa:	e023      	b.n	80068f4 <xTaskIncrementTick+0xb0>
BaseType_t xSwitchRequired = pdFALSE;
 80068ac:	2500      	movs	r5, #0
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80068ae:	4b2d      	ldr	r3, [pc, #180]	; (8006964 <xTaskIncrementTick+0x120>)
 80068b0:	f04f 32ff 	mov.w	r2, #4294967295
 80068b4:	601a      	str	r2, [r3, #0]
					break;
 80068b6:	e031      	b.n	800691c <xTaskIncrementTick+0xd8>
						xNextTaskUnblockTime = xItemValue;
 80068b8:	4a2a      	ldr	r2, [pc, #168]	; (8006964 <xTaskIncrementTick+0x120>)
 80068ba:	6013      	str	r3, [r2, #0]
						break;
 80068bc:	e02e      	b.n	800691c <xTaskIncrementTick+0xd8>
					prvAddTaskToReadyList( pxTCB );
 80068be:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80068c0:	f8d9 2000 	ldr.w	r2, [r9]
 80068c4:	2301      	movs	r3, #1
 80068c6:	4083      	lsls	r3, r0
 80068c8:	4313      	orrs	r3, r2
 80068ca:	f8c9 3000 	str.w	r3, [r9]
 80068ce:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80068d2:	4639      	mov	r1, r7
 80068d4:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
 80068d8:	f7ff fd5e 	bl	8006398 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80068dc:	4b24      	ldr	r3, [pc, #144]	; (8006970 <xTaskIncrementTick+0x12c>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80068e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 80068e4:	429a      	cmp	r2, r3
 80068e6:	bf28      	it	cs
 80068e8:	2501      	movcs	r5, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80068ea:	f8d8 3000 	ldr.w	r3, [r8]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d0dc      	beq.n	80068ae <xTaskIncrementTick+0x6a>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80068f4:	f8d8 3000 	ldr.w	r3, [r8]
 80068f8:	68db      	ldr	r3, [r3, #12]
 80068fa:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80068fc:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 80068fe:	429e      	cmp	r6, r3
 8006900:	d3da      	bcc.n	80068b8 <xTaskIncrementTick+0x74>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006902:	1d27      	adds	r7, r4, #4
 8006904:	4638      	mov	r0, r7
 8006906:	f7ff fd6b 	bl	80063e0 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800690a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800690c:	2b00      	cmp	r3, #0
 800690e:	d0d6      	beq.n	80068be <xTaskIncrementTick+0x7a>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006910:	f104 0018 	add.w	r0, r4, #24
 8006914:	f7ff fd64 	bl	80063e0 <uxListRemove>
 8006918:	e7d1      	b.n	80068be <xTaskIncrementTick+0x7a>
BaseType_t xSwitchRequired = pdFALSE;
 800691a:	2500      	movs	r5, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800691c:	4b14      	ldr	r3, [pc, #80]	; (8006970 <xTaskIncrementTick+0x12c>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006922:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006926:	009b      	lsls	r3, r3, #2
 8006928:	4a10      	ldr	r2, [pc, #64]	; (800696c <xTaskIncrementTick+0x128>)
 800692a:	58d3      	ldr	r3, [r2, r3]
				xSwitchRequired = pdTRUE;
 800692c:	2b02      	cmp	r3, #2
 800692e:	bf28      	it	cs
 8006930:	2501      	movcs	r5, #1
 8006932:	e004      	b.n	800693e <xTaskIncrementTick+0xfa>
		++uxPendedTicks;
 8006934:	4a0f      	ldr	r2, [pc, #60]	; (8006974 <xTaskIncrementTick+0x130>)
 8006936:	6813      	ldr	r3, [r2, #0]
 8006938:	3301      	adds	r3, #1
 800693a:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800693c:	2500      	movs	r5, #0
		if( xYieldPending != pdFALSE )
 800693e:	4b0e      	ldr	r3, [pc, #56]	; (8006978 <xTaskIncrementTick+0x134>)
 8006940:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
 8006942:	2b00      	cmp	r3, #0
}
 8006944:	bf0c      	ite	eq
 8006946:	4628      	moveq	r0, r5
 8006948:	2001      	movne	r0, #1
 800694a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800694e:	bf00      	nop
 8006950:	20000d84 	.word	0x20000d84
 8006954:	20000e00 	.word	0x20000e00
 8006958:	20000ce4 	.word	0x20000ce4
 800695c:	20000ce8 	.word	0x20000ce8
 8006960:	20000dbc 	.word	0x20000dbc
 8006964:	20000db8 	.word	0x20000db8
 8006968:	20000d8c 	.word	0x20000d8c
 800696c:	20000cec 	.word	0x20000cec
 8006970:	20000ce0 	.word	0x20000ce0
 8006974:	20000d80 	.word	0x20000d80
 8006978:	20000e04 	.word	0x20000e04

0800697c <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
 800697c:	4b39      	ldr	r3, [pc, #228]	; (8006a64 <xTaskResumeAll+0xe8>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	b943      	cbnz	r3, 8006994 <xTaskResumeAll+0x18>
 8006982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006986:	f383 8811 	msr	BASEPRI, r3
 800698a:	f3bf 8f6f 	isb	sy
 800698e:	f3bf 8f4f 	dsb	sy
 8006992:	e7fe      	b.n	8006992 <xTaskResumeAll+0x16>
{
 8006994:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	taskENTER_CRITICAL();
 8006998:	f000 f93c 	bl	8006c14 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800699c:	4b31      	ldr	r3, [pc, #196]	; (8006a64 <xTaskResumeAll+0xe8>)
 800699e:	681a      	ldr	r2, [r3, #0]
 80069a0:	3a01      	subs	r2, #1
 80069a2:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d14a      	bne.n	8006a40 <xTaskResumeAll+0xc4>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80069aa:	4b2f      	ldr	r3, [pc, #188]	; (8006a68 <xTaskResumeAll+0xec>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d04c      	beq.n	8006a4c <xTaskResumeAll+0xd0>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80069b2:	4b2e      	ldr	r3, [pc, #184]	; (8006a6c <xTaskResumeAll+0xf0>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d04c      	beq.n	8006a54 <xTaskResumeAll+0xd8>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80069ba:	4f2c      	ldr	r7, [pc, #176]	; (8006a6c <xTaskResumeAll+0xf0>)
					prvAddTaskToReadyList( pxTCB );
 80069bc:	4e2c      	ldr	r6, [pc, #176]	; (8006a70 <xTaskResumeAll+0xf4>)
 80069be:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 8006a74 <xTaskResumeAll+0xf8>
 80069c2:	e002      	b.n	80069ca <xTaskResumeAll+0x4e>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d042      	beq.n	8006a50 <xTaskResumeAll+0xd4>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80069ce:	f104 0018 	add.w	r0, r4, #24
 80069d2:	f7ff fd05 	bl	80063e0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80069d6:	1d25      	adds	r5, r4, #4
 80069d8:	4628      	mov	r0, r5
 80069da:	f7ff fd01 	bl	80063e0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80069de:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80069e0:	6832      	ldr	r2, [r6, #0]
 80069e2:	2301      	movs	r3, #1
 80069e4:	4083      	lsls	r3, r0
 80069e6:	4313      	orrs	r3, r2
 80069e8:	6033      	str	r3, [r6, #0]
 80069ea:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80069ee:	4629      	mov	r1, r5
 80069f0:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 80069f4:	f7ff fcd0 	bl	8006398 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80069f8:	4b1f      	ldr	r3, [pc, #124]	; (8006a78 <xTaskResumeAll+0xfc>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80069fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a00:	429a      	cmp	r2, r3
 8006a02:	d3df      	bcc.n	80069c4 <xTaskResumeAll+0x48>
						xYieldPending = pdTRUE;
 8006a04:	4b1d      	ldr	r3, [pc, #116]	; (8006a7c <xTaskResumeAll+0x100>)
 8006a06:	2201      	movs	r2, #1
 8006a08:	601a      	str	r2, [r3, #0]
 8006a0a:	e7db      	b.n	80069c4 <xTaskResumeAll+0x48>
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006a0c:	3c01      	subs	r4, #1
 8006a0e:	d005      	beq.n	8006a1c <xTaskResumeAll+0xa0>
							if( xTaskIncrementTick() != pdFALSE )
 8006a10:	f7ff ff18 	bl	8006844 <xTaskIncrementTick>
 8006a14:	2800      	cmp	r0, #0
 8006a16:	d0f9      	beq.n	8006a0c <xTaskResumeAll+0x90>
								xYieldPending = pdTRUE;
 8006a18:	6035      	str	r5, [r6, #0]
 8006a1a:	e7f7      	b.n	8006a0c <xTaskResumeAll+0x90>
						uxPendedTicks = 0;
 8006a1c:	4b18      	ldr	r3, [pc, #96]	; (8006a80 <xTaskResumeAll+0x104>)
 8006a1e:	2200      	movs	r2, #0
 8006a20:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
 8006a22:	4b16      	ldr	r3, [pc, #88]	; (8006a7c <xTaskResumeAll+0x100>)
 8006a24:	681c      	ldr	r4, [r3, #0]
 8006a26:	b164      	cbz	r4, 8006a42 <xTaskResumeAll+0xc6>
					taskYIELD_IF_USING_PREEMPTION();
 8006a28:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006a2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a30:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006a34:	f3bf 8f4f 	dsb	sy
 8006a38:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8006a3c:	2401      	movs	r4, #1
 8006a3e:	e000      	b.n	8006a42 <xTaskResumeAll+0xc6>
BaseType_t xAlreadyYielded = pdFALSE;
 8006a40:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8006a42:	f000 f909 	bl	8006c58 <vPortExitCritical>
}
 8006a46:	4620      	mov	r0, r4
 8006a48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
BaseType_t xAlreadyYielded = pdFALSE;
 8006a4c:	2400      	movs	r4, #0
 8006a4e:	e7f8      	b.n	8006a42 <xTaskResumeAll+0xc6>
					prvResetNextTaskUnblockTime();
 8006a50:	f7ff fcd8 	bl	8006404 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006a54:	4b0a      	ldr	r3, [pc, #40]	; (8006a80 <xTaskResumeAll+0x104>)
 8006a56:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006a58:	2c00      	cmp	r4, #0
 8006a5a:	d0e2      	beq.n	8006a22 <xTaskResumeAll+0xa6>
								xYieldPending = pdTRUE;
 8006a5c:	4e07      	ldr	r6, [pc, #28]	; (8006a7c <xTaskResumeAll+0x100>)
 8006a5e:	2501      	movs	r5, #1
 8006a60:	e7d6      	b.n	8006a10 <xTaskResumeAll+0x94>
 8006a62:	bf00      	nop
 8006a64:	20000d84 	.word	0x20000d84
 8006a68:	20000d78 	.word	0x20000d78
 8006a6c:	20000dc0 	.word	0x20000dc0
 8006a70:	20000d8c 	.word	0x20000d8c
 8006a74:	20000cec 	.word	0x20000cec
 8006a78:	20000ce0 	.word	0x20000ce0
 8006a7c:	20000e04 	.word	0x20000e04
 8006a80:	20000d80 	.word	0x20000d80

08006a84 <vTaskDelay>:
	{
 8006a84:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006a86:	b1a8      	cbz	r0, 8006ab4 <vTaskDelay+0x30>
 8006a88:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 8006a8a:	4b10      	ldr	r3, [pc, #64]	; (8006acc <vTaskDelay+0x48>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	b143      	cbz	r3, 8006aa2 <vTaskDelay+0x1e>
 8006a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a94:	f383 8811 	msr	BASEPRI, r3
 8006a98:	f3bf 8f6f 	isb	sy
 8006a9c:	f3bf 8f4f 	dsb	sy
 8006aa0:	e7fe      	b.n	8006aa0 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8006aa2:	f7ff fec7 	bl	8006834 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006aa6:	2100      	movs	r1, #0
 8006aa8:	4620      	mov	r0, r4
 8006aaa:	f7ff fdd5 	bl	8006658 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8006aae:	f7ff ff65 	bl	800697c <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8006ab2:	b948      	cbnz	r0, 8006ac8 <vTaskDelay+0x44>
			portYIELD_WITHIN_API();
 8006ab4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006ab8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006abc:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006ac0:	f3bf 8f4f 	dsb	sy
 8006ac4:	f3bf 8f6f 	isb	sy
	}
 8006ac8:	bd10      	pop	{r4, pc}
 8006aca:	bf00      	nop
 8006acc:	20000d84 	.word	0x20000d84

08006ad0 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006ad0:	4b1f      	ldr	r3, [pc, #124]	; (8006b50 <vTaskSwitchContext+0x80>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	b11b      	cbz	r3, 8006ade <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 8006ad6:	4b1f      	ldr	r3, [pc, #124]	; (8006b54 <vTaskSwitchContext+0x84>)
 8006ad8:	2201      	movs	r2, #1
 8006ada:	601a      	str	r2, [r3, #0]
 8006adc:	4770      	bx	lr
		xYieldPending = pdFALSE;
 8006ade:	4b1d      	ldr	r3, [pc, #116]	; (8006b54 <vTaskSwitchContext+0x84>)
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006ae4:	4b1c      	ldr	r3, [pc, #112]	; (8006b58 <vTaskSwitchContext+0x88>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006ae8:	fab3 f383 	clz	r3, r3
 8006aec:	b2db      	uxtb	r3, r3
 8006aee:	f1c3 031f 	rsb	r3, r3, #31
 8006af2:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8006af6:	0092      	lsls	r2, r2, #2
 8006af8:	4918      	ldr	r1, [pc, #96]	; (8006b5c <vTaskSwitchContext+0x8c>)
 8006afa:	588a      	ldr	r2, [r1, r2]
 8006afc:	b942      	cbnz	r2, 8006b10 <vTaskSwitchContext+0x40>
	__asm volatile
 8006afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b02:	f383 8811 	msr	BASEPRI, r3
 8006b06:	f3bf 8f6f 	isb	sy
 8006b0a:	f3bf 8f4f 	dsb	sy
 8006b0e:	e7fe      	b.n	8006b0e <vTaskSwitchContext+0x3e>
 8006b10:	4a12      	ldr	r2, [pc, #72]	; (8006b5c <vTaskSwitchContext+0x8c>)
 8006b12:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8006b16:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8006b1a:	6848      	ldr	r0, [r1, #4]
 8006b1c:	6840      	ldr	r0, [r0, #4]
 8006b1e:	6048      	str	r0, [r1, #4]
 8006b20:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8006b24:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8006b28:	3208      	adds	r2, #8
 8006b2a:	4290      	cmp	r0, r2
 8006b2c:	d009      	beq.n	8006b42 <vTaskSwitchContext+0x72>
 8006b2e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006b32:	4a0a      	ldr	r2, [pc, #40]	; (8006b5c <vTaskSwitchContext+0x8c>)
 8006b34:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006b38:	685b      	ldr	r3, [r3, #4]
 8006b3a:	68da      	ldr	r2, [r3, #12]
 8006b3c:	4b08      	ldr	r3, [pc, #32]	; (8006b60 <vTaskSwitchContext+0x90>)
 8006b3e:	601a      	str	r2, [r3, #0]
}
 8006b40:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006b42:	6840      	ldr	r0, [r0, #4]
 8006b44:	4a05      	ldr	r2, [pc, #20]	; (8006b5c <vTaskSwitchContext+0x8c>)
 8006b46:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8006b4a:	6050      	str	r0, [r2, #4]
 8006b4c:	e7ef      	b.n	8006b2e <vTaskSwitchContext+0x5e>
 8006b4e:	bf00      	nop
 8006b50:	20000d84 	.word	0x20000d84
 8006b54:	20000e04 	.word	0x20000e04
 8006b58:	20000d8c 	.word	0x20000d8c
 8006b5c:	20000cec 	.word	0x20000cec
 8006b60:	20000ce0 	.word	0x20000ce0

08006b64 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006b64:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
 8006b66:	2300      	movs	r3, #0
 8006b68:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006b6a:	4b0d      	ldr	r3, [pc, #52]	; (8006ba0 <prvTaskExitError+0x3c>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b72:	d008      	beq.n	8006b86 <prvTaskExitError+0x22>
 8006b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b78:	f383 8811 	msr	BASEPRI, r3
 8006b7c:	f3bf 8f6f 	isb	sy
 8006b80:	f3bf 8f4f 	dsb	sy
 8006b84:	e7fe      	b.n	8006b84 <prvTaskExitError+0x20>
 8006b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b8a:	f383 8811 	msr	BASEPRI, r3
 8006b8e:	f3bf 8f6f 	isb	sy
 8006b92:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006b96:	9b01      	ldr	r3, [sp, #4]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d0fc      	beq.n	8006b96 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006b9c:	b002      	add	sp, #8
 8006b9e:	4770      	bx	lr
 8006ba0:	20000014 	.word	0x20000014

08006ba4 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006ba4:	4806      	ldr	r0, [pc, #24]	; (8006bc0 <prvPortStartFirstTask+0x1c>)
 8006ba6:	6800      	ldr	r0, [r0, #0]
 8006ba8:	6800      	ldr	r0, [r0, #0]
 8006baa:	f380 8808 	msr	MSP, r0
 8006bae:	b662      	cpsie	i
 8006bb0:	b661      	cpsie	f
 8006bb2:	f3bf 8f4f 	dsb	sy
 8006bb6:	f3bf 8f6f 	isb	sy
 8006bba:	df00      	svc	0
 8006bbc:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006bbe:	0000      	.short	0x0000
 8006bc0:	e000ed08 	.word	0xe000ed08

08006bc4 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006bc4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006bc8:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006bcc:	f021 0101 	bic.w	r1, r1, #1
 8006bd0:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006bd4:	4b03      	ldr	r3, [pc, #12]	; (8006be4 <pxPortInitialiseStack+0x20>)
 8006bd6:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006bda:	f840 2c20 	str.w	r2, [r0, #-32]
}
 8006bde:	3840      	subs	r0, #64	; 0x40
 8006be0:	4770      	bx	lr
 8006be2:	bf00      	nop
 8006be4:	08006b65 	.word	0x08006b65
	...

08006bf0 <SVC_Handler>:
	__asm volatile (
 8006bf0:	4b07      	ldr	r3, [pc, #28]	; (8006c10 <pxCurrentTCBConst2>)
 8006bf2:	6819      	ldr	r1, [r3, #0]
 8006bf4:	6808      	ldr	r0, [r1, #0]
 8006bf6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006bfa:	f380 8809 	msr	PSP, r0
 8006bfe:	f3bf 8f6f 	isb	sy
 8006c02:	f04f 0000 	mov.w	r0, #0
 8006c06:	f380 8811 	msr	BASEPRI, r0
 8006c0a:	f04e 0e0d 	orr.w	lr, lr, #13
 8006c0e:	4770      	bx	lr

08006c10 <pxCurrentTCBConst2>:
 8006c10:	20000ce0 	.word	0x20000ce0

08006c14 <vPortEnterCritical>:
 8006c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c18:	f383 8811 	msr	BASEPRI, r3
 8006c1c:	f3bf 8f6f 	isb	sy
 8006c20:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006c24:	4a0b      	ldr	r2, [pc, #44]	; (8006c54 <vPortEnterCritical+0x40>)
 8006c26:	6813      	ldr	r3, [r2, #0]
 8006c28:	3301      	adds	r3, #1
 8006c2a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006c2c:	2b01      	cmp	r3, #1
 8006c2e:	d000      	beq.n	8006c32 <vPortEnterCritical+0x1e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
	}
}
 8006c30:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006c32:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006c36:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 8006c3a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006c3e:	d0f7      	beq.n	8006c30 <vPortEnterCritical+0x1c>
 8006c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c44:	f383 8811 	msr	BASEPRI, r3
 8006c48:	f3bf 8f6f 	isb	sy
 8006c4c:	f3bf 8f4f 	dsb	sy
 8006c50:	e7fe      	b.n	8006c50 <vPortEnterCritical+0x3c>
 8006c52:	bf00      	nop
 8006c54:	20000014 	.word	0x20000014

08006c58 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 8006c58:	4b09      	ldr	r3, [pc, #36]	; (8006c80 <vPortExitCritical+0x28>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	b943      	cbnz	r3, 8006c70 <vPortExitCritical+0x18>
 8006c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c62:	f383 8811 	msr	BASEPRI, r3
 8006c66:	f3bf 8f6f 	isb	sy
 8006c6a:	f3bf 8f4f 	dsb	sy
 8006c6e:	e7fe      	b.n	8006c6e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8006c70:	3b01      	subs	r3, #1
 8006c72:	4a03      	ldr	r2, [pc, #12]	; (8006c80 <vPortExitCritical+0x28>)
 8006c74:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006c76:	b90b      	cbnz	r3, 8006c7c <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006c78:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8006c7c:	4770      	bx	lr
 8006c7e:	bf00      	nop
 8006c80:	20000014 	.word	0x20000014
	...

08006c90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006c90:	f3ef 8009 	mrs	r0, PSP
 8006c94:	f3bf 8f6f 	isb	sy
 8006c98:	4b0d      	ldr	r3, [pc, #52]	; (8006cd0 <pxCurrentTCBConst>)
 8006c9a:	681a      	ldr	r2, [r3, #0]
 8006c9c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006ca0:	6010      	str	r0, [r2, #0]
 8006ca2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006ca6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006caa:	f380 8811 	msr	BASEPRI, r0
 8006cae:	f7ff ff0f 	bl	8006ad0 <vTaskSwitchContext>
 8006cb2:	f04f 0000 	mov.w	r0, #0
 8006cb6:	f380 8811 	msr	BASEPRI, r0
 8006cba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006cbe:	6819      	ldr	r1, [r3, #0]
 8006cc0:	6808      	ldr	r0, [r1, #0]
 8006cc2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006cc6:	f380 8809 	msr	PSP, r0
 8006cca:	f3bf 8f6f 	isb	sy
 8006cce:	4770      	bx	lr

08006cd0 <pxCurrentTCBConst>:
 8006cd0:	20000ce0 	.word	0x20000ce0

08006cd4 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006cd4:	b508      	push	{r3, lr}
	__asm volatile
 8006cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cda:	f383 8811 	msr	BASEPRI, r3
 8006cde:	f3bf 8f6f 	isb	sy
 8006ce2:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006ce6:	f7ff fdad 	bl	8006844 <xTaskIncrementTick>
 8006cea:	b128      	cbz	r0, 8006cf8 <SysTick_Handler+0x24>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006cec:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006cf0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cf4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8006cfe:	bd08      	pop	{r3, pc}

08006d00 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006d00:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8006d04:	2300      	movs	r3, #0
 8006d06:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006d08:	6193      	str	r3, [r2, #24]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006d0a:	4b05      	ldr	r3, [pc, #20]	; (8006d20 <vPortSetupTimerInterrupt+0x20>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4905      	ldr	r1, [pc, #20]	; (8006d24 <vPortSetupTimerInterrupt+0x24>)
 8006d10:	fba1 1303 	umull	r1, r3, r1, r3
 8006d14:	099b      	lsrs	r3, r3, #6
 8006d16:	3b01      	subs	r3, #1
 8006d18:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006d1a:	2307      	movs	r3, #7
 8006d1c:	6113      	str	r3, [r2, #16]
}
 8006d1e:	4770      	bx	lr
 8006d20:	20000000 	.word	0x20000000
 8006d24:	10624dd3 	.word	0x10624dd3

08006d28 <xPortStartScheduler>:
{
 8006d28:	b510      	push	{r4, lr}
 8006d2a:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006d2c:	4b2b      	ldr	r3, [pc, #172]	; (8006ddc <xPortStartScheduler+0xb4>)
 8006d2e:	781a      	ldrb	r2, [r3, #0]
 8006d30:	b2d2      	uxtb	r2, r2
 8006d32:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006d34:	22ff      	movs	r2, #255	; 0xff
 8006d36:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006d38:	781b      	ldrb	r3, [r3, #0]
 8006d3a:	b2db      	uxtb	r3, r3
 8006d3c:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006d40:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8006d44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006d48:	4a25      	ldr	r2, [pc, #148]	; (8006de0 <xPortStartScheduler+0xb8>)
 8006d4a:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006d4c:	4b25      	ldr	r3, [pc, #148]	; (8006de4 <xPortStartScheduler+0xbc>)
 8006d4e:	2207      	movs	r2, #7
 8006d50:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006d52:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8006d56:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006d5a:	d011      	beq.n	8006d80 <xPortStartScheduler+0x58>
 8006d5c:	2206      	movs	r2, #6
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006d5e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8006d62:	005b      	lsls	r3, r3, #1
 8006d64:	b2db      	uxtb	r3, r3
 8006d66:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006d6a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8006d6e:	4611      	mov	r1, r2
 8006d70:	3a01      	subs	r2, #1
 8006d72:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006d76:	d1f2      	bne.n	8006d5e <xPortStartScheduler+0x36>
 8006d78:	4b1a      	ldr	r3, [pc, #104]	; (8006de4 <xPortStartScheduler+0xbc>)
 8006d7a:	6019      	str	r1, [r3, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006d7c:	2903      	cmp	r1, #3
 8006d7e:	d008      	beq.n	8006d92 <xPortStartScheduler+0x6a>
	__asm volatile
 8006d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d84:	f383 8811 	msr	BASEPRI, r3
 8006d88:	f3bf 8f6f 	isb	sy
 8006d8c:	f3bf 8f4f 	dsb	sy
 8006d90:	e7fe      	b.n	8006d90 <xPortStartScheduler+0x68>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006d92:	4b14      	ldr	r3, [pc, #80]	; (8006de4 <xPortStartScheduler+0xbc>)
 8006d94:	f44f 7240 	mov.w	r2, #768	; 0x300
 8006d98:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006d9a:	9b01      	ldr	r3, [sp, #4]
 8006d9c:	b2db      	uxtb	r3, r3
 8006d9e:	4a0f      	ldr	r2, [pc, #60]	; (8006ddc <xPortStartScheduler+0xb4>)
 8006da0:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006da2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006da6:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 8006daa:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8006dae:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006db2:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 8006db6:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8006dba:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 8006dbe:	f7ff ff9f 	bl	8006d00 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8006dc2:	2400      	movs	r4, #0
 8006dc4:	4b08      	ldr	r3, [pc, #32]	; (8006de8 <xPortStartScheduler+0xc0>)
 8006dc6:	601c      	str	r4, [r3, #0]
	prvPortStartFirstTask();
 8006dc8:	f7ff feec 	bl	8006ba4 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8006dcc:	f7ff fe80 	bl	8006ad0 <vTaskSwitchContext>
	prvTaskExitError();
 8006dd0:	f7ff fec8 	bl	8006b64 <prvTaskExitError>
}
 8006dd4:	4620      	mov	r0, r4
 8006dd6:	b002      	add	sp, #8
 8006dd8:	bd10      	pop	{r4, pc}
 8006dda:	bf00      	nop
 8006ddc:	e000e400 	.word	0xe000e400
 8006de0:	20000e08 	.word	0x20000e08
 8006de4:	20000e0c 	.word	0x20000e0c
 8006de8:	20000014 	.word	0x20000014

08006dec <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006dec:	4b15      	ldr	r3, [pc, #84]	; (8006e44 <prvInsertBlockIntoFreeList+0x58>)
 8006dee:	461a      	mov	r2, r3
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	4283      	cmp	r3, r0
 8006df4:	d3fb      	bcc.n	8006dee <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006df6:	6851      	ldr	r1, [r2, #4]
 8006df8:	eb02 0c01 	add.w	ip, r2, r1
 8006dfc:	4560      	cmp	r0, ip
 8006dfe:	d009      	beq.n	8006e14 <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006e00:	6841      	ldr	r1, [r0, #4]
 8006e02:	eb00 0c01 	add.w	ip, r0, r1
 8006e06:	4563      	cmp	r3, ip
 8006e08:	d009      	beq.n	8006e1e <prvInsertBlockIntoFreeList+0x32>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006e0a:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006e0c:	4290      	cmp	r0, r2
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006e0e:	bf18      	it	ne
 8006e10:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
 8006e12:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006e14:	6840      	ldr	r0, [r0, #4]
 8006e16:	4401      	add	r1, r0
 8006e18:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 8006e1a:	4610      	mov	r0, r2
 8006e1c:	e7f0      	b.n	8006e00 <prvInsertBlockIntoFreeList+0x14>
{
 8006e1e:	b410      	push	{r4}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006e20:	4c09      	ldr	r4, [pc, #36]	; (8006e48 <prvInsertBlockIntoFreeList+0x5c>)
 8006e22:	6824      	ldr	r4, [r4, #0]
 8006e24:	42a3      	cmp	r3, r4
 8006e26:	d00a      	beq.n	8006e3e <prvInsertBlockIntoFreeList+0x52>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006e28:	685b      	ldr	r3, [r3, #4]
 8006e2a:	4419      	add	r1, r3
 8006e2c:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006e2e:	6813      	ldr	r3, [r2, #0]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 8006e34:	4290      	cmp	r0, r2
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006e36:	bf18      	it	ne
 8006e38:	6010      	strne	r0, [r2, #0]
	}
}
 8006e3a:	bc10      	pop	{r4}
 8006e3c:	4770      	bx	lr
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006e3e:	6004      	str	r4, [r0, #0]
 8006e40:	e7f8      	b.n	8006e34 <prvInsertBlockIntoFreeList+0x48>
 8006e42:	bf00      	nop
 8006e44:	200027a0 	.word	0x200027a0
 8006e48:	20000e10 	.word	0x20000e10

08006e4c <pvPortMalloc>:
{
 8006e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e4e:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8006e50:	f7ff fcf0 	bl	8006834 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8006e54:	4b42      	ldr	r3, [pc, #264]	; (8006f60 <pvPortMalloc+0x114>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	b1b3      	cbz	r3, 8006e88 <pvPortMalloc+0x3c>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006e5a:	4b42      	ldr	r3, [pc, #264]	; (8006f64 <pvPortMalloc+0x118>)
 8006e5c:	681d      	ldr	r5, [r3, #0]
 8006e5e:	4225      	tst	r5, r4
 8006e60:	d179      	bne.n	8006f56 <pvPortMalloc+0x10a>
			if( xWantedSize > 0 )
 8006e62:	2c00      	cmp	r4, #0
 8006e64:	d077      	beq.n	8006f56 <pvPortMalloc+0x10a>
				xWantedSize += xHeapStructSize;
 8006e66:	f104 0208 	add.w	r2, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006e6a:	f014 0f07 	tst.w	r4, #7
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006e6e:	bf1c      	itt	ne
 8006e70:	f022 0207 	bicne.w	r2, r2, #7
 8006e74:	3208      	addne	r2, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006e76:	2a00      	cmp	r2, #0
 8006e78:	d06d      	beq.n	8006f56 <pvPortMalloc+0x10a>
 8006e7a:	4b3b      	ldr	r3, [pc, #236]	; (8006f68 <pvPortMalloc+0x11c>)
 8006e7c:	681e      	ldr	r6, [r3, #0]
 8006e7e:	4296      	cmp	r6, r2
 8006e80:	d369      	bcc.n	8006f56 <pvPortMalloc+0x10a>
				pxBlock = xStart.pxNextFreeBlock;
 8006e82:	493a      	ldr	r1, [pc, #232]	; (8006f6c <pvPortMalloc+0x120>)
 8006e84:	680c      	ldr	r4, [r1, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006e86:	e027      	b.n	8006ed8 <pvPortMalloc+0x8c>
	uxAddress = ( size_t ) ucHeap;
 8006e88:	4a39      	ldr	r2, [pc, #228]	; (8006f70 <pvPortMalloc+0x124>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006e8a:	f012 0f07 	tst.w	r2, #7
 8006e8e:	d007      	beq.n	8006ea0 <pvPortMalloc+0x54>
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006e90:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006e92:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006e96:	f502 53cc 	add.w	r3, r2, #6528	; 0x1980
 8006e9a:	1a5b      	subs	r3, r3, r1
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006e9c:	460a      	mov	r2, r1
 8006e9e:	e001      	b.n	8006ea4 <pvPortMalloc+0x58>
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006ea0:	f44f 53cc 	mov.w	r3, #6528	; 0x1980
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006ea4:	4831      	ldr	r0, [pc, #196]	; (8006f6c <pvPortMalloc+0x120>)
 8006ea6:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006ea8:	2100      	movs	r1, #0
 8006eaa:	6041      	str	r1, [r0, #4]
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006eac:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8006eae:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006eb0:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 8006eb4:	482a      	ldr	r0, [pc, #168]	; (8006f60 <pvPortMalloc+0x114>)
 8006eb6:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 8006eb8:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006eba:	6019      	str	r1, [r3, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006ebc:	1a99      	subs	r1, r3, r2
 8006ebe:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006ec0:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006ec2:	4b2c      	ldr	r3, [pc, #176]	; (8006f74 <pvPortMalloc+0x128>)
 8006ec4:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006ec6:	4b28      	ldr	r3, [pc, #160]	; (8006f68 <pvPortMalloc+0x11c>)
 8006ec8:	6019      	str	r1, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006eca:	4b26      	ldr	r3, [pc, #152]	; (8006f64 <pvPortMalloc+0x118>)
 8006ecc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006ed0:	601a      	str	r2, [r3, #0]
}
 8006ed2:	e7c2      	b.n	8006e5a <pvPortMalloc+0xe>
 8006ed4:	4621      	mov	r1, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 8006ed6:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006ed8:	6863      	ldr	r3, [r4, #4]
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d202      	bcs.n	8006ee4 <pvPortMalloc+0x98>
 8006ede:	6823      	ldr	r3, [r4, #0]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d1f7      	bne.n	8006ed4 <pvPortMalloc+0x88>
				if( pxBlock != pxEnd )
 8006ee4:	4b1e      	ldr	r3, [pc, #120]	; (8006f60 <pvPortMalloc+0x114>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	42a3      	cmp	r3, r4
 8006eea:	d034      	beq.n	8006f56 <pvPortMalloc+0x10a>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006eec:	680f      	ldr	r7, [r1, #0]
 8006eee:	3708      	adds	r7, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006ef0:	6823      	ldr	r3, [r4, #0]
 8006ef2:	600b      	str	r3, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006ef4:	6863      	ldr	r3, [r4, #4]
 8006ef6:	1a9b      	subs	r3, r3, r2
 8006ef8:	2b10      	cmp	r3, #16
 8006efa:	d910      	bls.n	8006f1e <pvPortMalloc+0xd2>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006efc:	18a0      	adds	r0, r4, r2
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006efe:	f010 0f07 	tst.w	r0, #7
 8006f02:	d008      	beq.n	8006f16 <pvPortMalloc+0xca>
 8006f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f08:	f383 8811 	msr	BASEPRI, r3
 8006f0c:	f3bf 8f6f 	isb	sy
 8006f10:	f3bf 8f4f 	dsb	sy
 8006f14:	e7fe      	b.n	8006f14 <pvPortMalloc+0xc8>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006f16:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006f18:	6062      	str	r2, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006f1a:	f7ff ff67 	bl	8006dec <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006f1e:	6863      	ldr	r3, [r4, #4]
 8006f20:	1af6      	subs	r6, r6, r3
 8006f22:	4a11      	ldr	r2, [pc, #68]	; (8006f68 <pvPortMalloc+0x11c>)
 8006f24:	6016      	str	r6, [r2, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006f26:	4a13      	ldr	r2, [pc, #76]	; (8006f74 <pvPortMalloc+0x128>)
 8006f28:	6812      	ldr	r2, [r2, #0]
 8006f2a:	4296      	cmp	r6, r2
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006f2c:	bf3c      	itt	cc
 8006f2e:	4a11      	ldrcc	r2, [pc, #68]	; (8006f74 <pvPortMalloc+0x128>)
 8006f30:	6016      	strcc	r6, [r2, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006f32:	431d      	orrs	r5, r3
 8006f34:	6065      	str	r5, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006f36:	2300      	movs	r3, #0
 8006f38:	6023      	str	r3, [r4, #0]
	( void ) xTaskResumeAll();
 8006f3a:	f7ff fd1f 	bl	800697c <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f3e:	f017 0f07 	tst.w	r7, #7
 8006f42:	d00b      	beq.n	8006f5c <pvPortMalloc+0x110>
 8006f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f48:	f383 8811 	msr	BASEPRI, r3
 8006f4c:	f3bf 8f6f 	isb	sy
 8006f50:	f3bf 8f4f 	dsb	sy
 8006f54:	e7fe      	b.n	8006f54 <pvPortMalloc+0x108>
	( void ) xTaskResumeAll();
 8006f56:	f7ff fd11 	bl	800697c <xTaskResumeAll>
 8006f5a:	2700      	movs	r7, #0
}
 8006f5c:	4638      	mov	r0, r7
 8006f5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f60:	20000e10 	.word	0x20000e10
 8006f64:	20002794 	.word	0x20002794
 8006f68:	20002798 	.word	0x20002798
 8006f6c:	200027a0 	.word	0x200027a0
 8006f70:	20000e14 	.word	0x20000e14
 8006f74:	2000279c 	.word	0x2000279c

08006f78 <vPortFree>:
	if( pv != NULL )
 8006f78:	b378      	cbz	r0, 8006fda <vPortFree+0x62>
{
 8006f7a:	b510      	push	{r4, lr}
 8006f7c:	4604      	mov	r4, r0
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006f7e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8006f82:	4a16      	ldr	r2, [pc, #88]	; (8006fdc <vPortFree+0x64>)
 8006f84:	6812      	ldr	r2, [r2, #0]
 8006f86:	4213      	tst	r3, r2
 8006f88:	d108      	bne.n	8006f9c <vPortFree+0x24>
 8006f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f8e:	f383 8811 	msr	BASEPRI, r3
 8006f92:	f3bf 8f6f 	isb	sy
 8006f96:	f3bf 8f4f 	dsb	sy
 8006f9a:	e7fe      	b.n	8006f9a <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006f9c:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8006fa0:	b141      	cbz	r1, 8006fb4 <vPortFree+0x3c>
 8006fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fa6:	f383 8811 	msr	BASEPRI, r3
 8006faa:	f3bf 8f6f 	isb	sy
 8006fae:	f3bf 8f4f 	dsb	sy
 8006fb2:	e7fe      	b.n	8006fb2 <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006fb4:	ea23 0302 	bic.w	r3, r3, r2
 8006fb8:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8006fbc:	f7ff fc3a 	bl	8006834 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006fc0:	4a07      	ldr	r2, [pc, #28]	; (8006fe0 <vPortFree+0x68>)
 8006fc2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8006fc6:	6811      	ldr	r1, [r2, #0]
 8006fc8:	440b      	add	r3, r1
 8006fca:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006fcc:	f1a4 0008 	sub.w	r0, r4, #8
 8006fd0:	f7ff ff0c 	bl	8006dec <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 8006fd4:	f7ff fcd2 	bl	800697c <xTaskResumeAll>
}
 8006fd8:	bd10      	pop	{r4, pc}
 8006fda:	4770      	bx	lr
 8006fdc:	20002794 	.word	0x20002794
 8006fe0:	20002798 	.word	0x20002798

08006fe4 <atof>:
 8006fe4:	2100      	movs	r1, #0
 8006fe6:	f001 bd19 	b.w	8008a1c <strtod>

08006fea <atoi>:
 8006fea:	220a      	movs	r2, #10
 8006fec:	2100      	movs	r1, #0
 8006fee:	f001 bd9f 	b.w	8008b30 <strtol>
	...

08006ff4 <__errno>:
 8006ff4:	4b01      	ldr	r3, [pc, #4]	; (8006ffc <__errno+0x8>)
 8006ff6:	6818      	ldr	r0, [r3, #0]
 8006ff8:	4770      	bx	lr
 8006ffa:	bf00      	nop
 8006ffc:	20000018 	.word	0x20000018

08007000 <__libc_init_array>:
 8007000:	b570      	push	{r4, r5, r6, lr}
 8007002:	2600      	movs	r6, #0
 8007004:	4d0c      	ldr	r5, [pc, #48]	; (8007038 <__libc_init_array+0x38>)
 8007006:	4c0d      	ldr	r4, [pc, #52]	; (800703c <__libc_init_array+0x3c>)
 8007008:	1b64      	subs	r4, r4, r5
 800700a:	10a4      	asrs	r4, r4, #2
 800700c:	42a6      	cmp	r6, r4
 800700e:	d109      	bne.n	8007024 <__libc_init_array+0x24>
 8007010:	f004 fc80 	bl	800b914 <_init>
 8007014:	2600      	movs	r6, #0
 8007016:	4d0a      	ldr	r5, [pc, #40]	; (8007040 <__libc_init_array+0x40>)
 8007018:	4c0a      	ldr	r4, [pc, #40]	; (8007044 <__libc_init_array+0x44>)
 800701a:	1b64      	subs	r4, r4, r5
 800701c:	10a4      	asrs	r4, r4, #2
 800701e:	42a6      	cmp	r6, r4
 8007020:	d105      	bne.n	800702e <__libc_init_array+0x2e>
 8007022:	bd70      	pop	{r4, r5, r6, pc}
 8007024:	f855 3b04 	ldr.w	r3, [r5], #4
 8007028:	4798      	blx	r3
 800702a:	3601      	adds	r6, #1
 800702c:	e7ee      	b.n	800700c <__libc_init_array+0xc>
 800702e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007032:	4798      	blx	r3
 8007034:	3601      	adds	r6, #1
 8007036:	e7f2      	b.n	800701e <__libc_init_array+0x1e>
 8007038:	0800c734 	.word	0x0800c734
 800703c:	0800c734 	.word	0x0800c734
 8007040:	0800c734 	.word	0x0800c734
 8007044:	0800c738 	.word	0x0800c738

08007048 <memcpy>:
 8007048:	440a      	add	r2, r1
 800704a:	4291      	cmp	r1, r2
 800704c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007050:	d100      	bne.n	8007054 <memcpy+0xc>
 8007052:	4770      	bx	lr
 8007054:	b510      	push	{r4, lr}
 8007056:	f811 4b01 	ldrb.w	r4, [r1], #1
 800705a:	4291      	cmp	r1, r2
 800705c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007060:	d1f9      	bne.n	8007056 <memcpy+0xe>
 8007062:	bd10      	pop	{r4, pc}

08007064 <memmove>:
 8007064:	4288      	cmp	r0, r1
 8007066:	b510      	push	{r4, lr}
 8007068:	eb01 0402 	add.w	r4, r1, r2
 800706c:	d902      	bls.n	8007074 <memmove+0x10>
 800706e:	4284      	cmp	r4, r0
 8007070:	4623      	mov	r3, r4
 8007072:	d807      	bhi.n	8007084 <memmove+0x20>
 8007074:	1e43      	subs	r3, r0, #1
 8007076:	42a1      	cmp	r1, r4
 8007078:	d008      	beq.n	800708c <memmove+0x28>
 800707a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800707e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007082:	e7f8      	b.n	8007076 <memmove+0x12>
 8007084:	4601      	mov	r1, r0
 8007086:	4402      	add	r2, r0
 8007088:	428a      	cmp	r2, r1
 800708a:	d100      	bne.n	800708e <memmove+0x2a>
 800708c:	bd10      	pop	{r4, pc}
 800708e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007092:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007096:	e7f7      	b.n	8007088 <memmove+0x24>

08007098 <memset>:
 8007098:	4603      	mov	r3, r0
 800709a:	4402      	add	r2, r0
 800709c:	4293      	cmp	r3, r2
 800709e:	d100      	bne.n	80070a2 <memset+0xa>
 80070a0:	4770      	bx	lr
 80070a2:	f803 1b01 	strb.w	r1, [r3], #1
 80070a6:	e7f9      	b.n	800709c <memset+0x4>

080070a8 <__cvt>:
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070ae:	461f      	mov	r7, r3
 80070b0:	bfbb      	ittet	lt
 80070b2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80070b6:	461f      	movlt	r7, r3
 80070b8:	2300      	movge	r3, #0
 80070ba:	232d      	movlt	r3, #45	; 0x2d
 80070bc:	b088      	sub	sp, #32
 80070be:	4614      	mov	r4, r2
 80070c0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80070c2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80070c4:	7013      	strb	r3, [r2, #0]
 80070c6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80070c8:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80070cc:	f023 0820 	bic.w	r8, r3, #32
 80070d0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80070d4:	d005      	beq.n	80070e2 <__cvt+0x3a>
 80070d6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80070da:	d100      	bne.n	80070de <__cvt+0x36>
 80070dc:	3501      	adds	r5, #1
 80070de:	2302      	movs	r3, #2
 80070e0:	e000      	b.n	80070e4 <__cvt+0x3c>
 80070e2:	2303      	movs	r3, #3
 80070e4:	aa07      	add	r2, sp, #28
 80070e6:	9204      	str	r2, [sp, #16]
 80070e8:	aa06      	add	r2, sp, #24
 80070ea:	e9cd a202 	strd	sl, r2, [sp, #8]
 80070ee:	e9cd 3500 	strd	r3, r5, [sp]
 80070f2:	4622      	mov	r2, r4
 80070f4:	463b      	mov	r3, r7
 80070f6:	f001 fdb3 	bl	8008c60 <_dtoa_r>
 80070fa:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80070fe:	4606      	mov	r6, r0
 8007100:	d102      	bne.n	8007108 <__cvt+0x60>
 8007102:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007104:	07db      	lsls	r3, r3, #31
 8007106:	d522      	bpl.n	800714e <__cvt+0xa6>
 8007108:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800710c:	eb06 0905 	add.w	r9, r6, r5
 8007110:	d110      	bne.n	8007134 <__cvt+0x8c>
 8007112:	7833      	ldrb	r3, [r6, #0]
 8007114:	2b30      	cmp	r3, #48	; 0x30
 8007116:	d10a      	bne.n	800712e <__cvt+0x86>
 8007118:	2200      	movs	r2, #0
 800711a:	2300      	movs	r3, #0
 800711c:	4620      	mov	r0, r4
 800711e:	4639      	mov	r1, r7
 8007120:	f7f9 fc4c 	bl	80009bc <__aeabi_dcmpeq>
 8007124:	b918      	cbnz	r0, 800712e <__cvt+0x86>
 8007126:	f1c5 0501 	rsb	r5, r5, #1
 800712a:	f8ca 5000 	str.w	r5, [sl]
 800712e:	f8da 3000 	ldr.w	r3, [sl]
 8007132:	4499      	add	r9, r3
 8007134:	2200      	movs	r2, #0
 8007136:	2300      	movs	r3, #0
 8007138:	4620      	mov	r0, r4
 800713a:	4639      	mov	r1, r7
 800713c:	f7f9 fc3e 	bl	80009bc <__aeabi_dcmpeq>
 8007140:	b108      	cbz	r0, 8007146 <__cvt+0x9e>
 8007142:	f8cd 901c 	str.w	r9, [sp, #28]
 8007146:	2230      	movs	r2, #48	; 0x30
 8007148:	9b07      	ldr	r3, [sp, #28]
 800714a:	454b      	cmp	r3, r9
 800714c:	d307      	bcc.n	800715e <__cvt+0xb6>
 800714e:	4630      	mov	r0, r6
 8007150:	9b07      	ldr	r3, [sp, #28]
 8007152:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007154:	1b9b      	subs	r3, r3, r6
 8007156:	6013      	str	r3, [r2, #0]
 8007158:	b008      	add	sp, #32
 800715a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800715e:	1c59      	adds	r1, r3, #1
 8007160:	9107      	str	r1, [sp, #28]
 8007162:	701a      	strb	r2, [r3, #0]
 8007164:	e7f0      	b.n	8007148 <__cvt+0xa0>

08007166 <__exponent>:
 8007166:	4603      	mov	r3, r0
 8007168:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800716a:	2900      	cmp	r1, #0
 800716c:	f803 2b02 	strb.w	r2, [r3], #2
 8007170:	bfb6      	itet	lt
 8007172:	222d      	movlt	r2, #45	; 0x2d
 8007174:	222b      	movge	r2, #43	; 0x2b
 8007176:	4249      	neglt	r1, r1
 8007178:	2909      	cmp	r1, #9
 800717a:	7042      	strb	r2, [r0, #1]
 800717c:	dd2b      	ble.n	80071d6 <__exponent+0x70>
 800717e:	f10d 0407 	add.w	r4, sp, #7
 8007182:	46a4      	mov	ip, r4
 8007184:	270a      	movs	r7, #10
 8007186:	fb91 f6f7 	sdiv	r6, r1, r7
 800718a:	460a      	mov	r2, r1
 800718c:	46a6      	mov	lr, r4
 800718e:	fb07 1516 	mls	r5, r7, r6, r1
 8007192:	2a63      	cmp	r2, #99	; 0x63
 8007194:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8007198:	4631      	mov	r1, r6
 800719a:	f104 34ff 	add.w	r4, r4, #4294967295
 800719e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80071a2:	dcf0      	bgt.n	8007186 <__exponent+0x20>
 80071a4:	3130      	adds	r1, #48	; 0x30
 80071a6:	f1ae 0502 	sub.w	r5, lr, #2
 80071aa:	f804 1c01 	strb.w	r1, [r4, #-1]
 80071ae:	4629      	mov	r1, r5
 80071b0:	1c44      	adds	r4, r0, #1
 80071b2:	4561      	cmp	r1, ip
 80071b4:	d30a      	bcc.n	80071cc <__exponent+0x66>
 80071b6:	f10d 0209 	add.w	r2, sp, #9
 80071ba:	eba2 020e 	sub.w	r2, r2, lr
 80071be:	4565      	cmp	r5, ip
 80071c0:	bf88      	it	hi
 80071c2:	2200      	movhi	r2, #0
 80071c4:	4413      	add	r3, r2
 80071c6:	1a18      	subs	r0, r3, r0
 80071c8:	b003      	add	sp, #12
 80071ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071cc:	f811 2b01 	ldrb.w	r2, [r1], #1
 80071d0:	f804 2f01 	strb.w	r2, [r4, #1]!
 80071d4:	e7ed      	b.n	80071b2 <__exponent+0x4c>
 80071d6:	2330      	movs	r3, #48	; 0x30
 80071d8:	3130      	adds	r1, #48	; 0x30
 80071da:	7083      	strb	r3, [r0, #2]
 80071dc:	70c1      	strb	r1, [r0, #3]
 80071de:	1d03      	adds	r3, r0, #4
 80071e0:	e7f1      	b.n	80071c6 <__exponent+0x60>
	...

080071e4 <_printf_float>:
 80071e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071e8:	b091      	sub	sp, #68	; 0x44
 80071ea:	460c      	mov	r4, r1
 80071ec:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80071f0:	4616      	mov	r6, r2
 80071f2:	461f      	mov	r7, r3
 80071f4:	4605      	mov	r5, r0
 80071f6:	f002 fe87 	bl	8009f08 <_localeconv_r>
 80071fa:	6803      	ldr	r3, [r0, #0]
 80071fc:	4618      	mov	r0, r3
 80071fe:	9309      	str	r3, [sp, #36]	; 0x24
 8007200:	f7f8 ffb0 	bl	8000164 <strlen>
 8007204:	2300      	movs	r3, #0
 8007206:	930e      	str	r3, [sp, #56]	; 0x38
 8007208:	f8d8 3000 	ldr.w	r3, [r8]
 800720c:	900a      	str	r0, [sp, #40]	; 0x28
 800720e:	3307      	adds	r3, #7
 8007210:	f023 0307 	bic.w	r3, r3, #7
 8007214:	f103 0208 	add.w	r2, r3, #8
 8007218:	f894 9018 	ldrb.w	r9, [r4, #24]
 800721c:	f8d4 b000 	ldr.w	fp, [r4]
 8007220:	f8c8 2000 	str.w	r2, [r8]
 8007224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007228:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800722c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8007230:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8007234:	930b      	str	r3, [sp, #44]	; 0x2c
 8007236:	f04f 32ff 	mov.w	r2, #4294967295
 800723a:	4640      	mov	r0, r8
 800723c:	4b9c      	ldr	r3, [pc, #624]	; (80074b0 <_printf_float+0x2cc>)
 800723e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007240:	f7f9 fbee 	bl	8000a20 <__aeabi_dcmpun>
 8007244:	bb70      	cbnz	r0, 80072a4 <_printf_float+0xc0>
 8007246:	f04f 32ff 	mov.w	r2, #4294967295
 800724a:	4640      	mov	r0, r8
 800724c:	4b98      	ldr	r3, [pc, #608]	; (80074b0 <_printf_float+0x2cc>)
 800724e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007250:	f7f9 fbc8 	bl	80009e4 <__aeabi_dcmple>
 8007254:	bb30      	cbnz	r0, 80072a4 <_printf_float+0xc0>
 8007256:	2200      	movs	r2, #0
 8007258:	2300      	movs	r3, #0
 800725a:	4640      	mov	r0, r8
 800725c:	4651      	mov	r1, sl
 800725e:	f7f9 fbb7 	bl	80009d0 <__aeabi_dcmplt>
 8007262:	b110      	cbz	r0, 800726a <_printf_float+0x86>
 8007264:	232d      	movs	r3, #45	; 0x2d
 8007266:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800726a:	4b92      	ldr	r3, [pc, #584]	; (80074b4 <_printf_float+0x2d0>)
 800726c:	4892      	ldr	r0, [pc, #584]	; (80074b8 <_printf_float+0x2d4>)
 800726e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8007272:	bf94      	ite	ls
 8007274:	4698      	movls	r8, r3
 8007276:	4680      	movhi	r8, r0
 8007278:	2303      	movs	r3, #3
 800727a:	f04f 0a00 	mov.w	sl, #0
 800727e:	6123      	str	r3, [r4, #16]
 8007280:	f02b 0304 	bic.w	r3, fp, #4
 8007284:	6023      	str	r3, [r4, #0]
 8007286:	4633      	mov	r3, r6
 8007288:	4621      	mov	r1, r4
 800728a:	4628      	mov	r0, r5
 800728c:	9700      	str	r7, [sp, #0]
 800728e:	aa0f      	add	r2, sp, #60	; 0x3c
 8007290:	f000 f9d4 	bl	800763c <_printf_common>
 8007294:	3001      	adds	r0, #1
 8007296:	f040 8090 	bne.w	80073ba <_printf_float+0x1d6>
 800729a:	f04f 30ff 	mov.w	r0, #4294967295
 800729e:	b011      	add	sp, #68	; 0x44
 80072a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072a4:	4642      	mov	r2, r8
 80072a6:	4653      	mov	r3, sl
 80072a8:	4640      	mov	r0, r8
 80072aa:	4651      	mov	r1, sl
 80072ac:	f7f9 fbb8 	bl	8000a20 <__aeabi_dcmpun>
 80072b0:	b148      	cbz	r0, 80072c6 <_printf_float+0xe2>
 80072b2:	f1ba 0f00 	cmp.w	sl, #0
 80072b6:	bfb8      	it	lt
 80072b8:	232d      	movlt	r3, #45	; 0x2d
 80072ba:	4880      	ldr	r0, [pc, #512]	; (80074bc <_printf_float+0x2d8>)
 80072bc:	bfb8      	it	lt
 80072be:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80072c2:	4b7f      	ldr	r3, [pc, #508]	; (80074c0 <_printf_float+0x2dc>)
 80072c4:	e7d3      	b.n	800726e <_printf_float+0x8a>
 80072c6:	6863      	ldr	r3, [r4, #4]
 80072c8:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80072cc:	1c5a      	adds	r2, r3, #1
 80072ce:	d142      	bne.n	8007356 <_printf_float+0x172>
 80072d0:	2306      	movs	r3, #6
 80072d2:	6063      	str	r3, [r4, #4]
 80072d4:	2200      	movs	r2, #0
 80072d6:	9206      	str	r2, [sp, #24]
 80072d8:	aa0e      	add	r2, sp, #56	; 0x38
 80072da:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80072de:	aa0d      	add	r2, sp, #52	; 0x34
 80072e0:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80072e4:	9203      	str	r2, [sp, #12]
 80072e6:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80072ea:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80072ee:	6023      	str	r3, [r4, #0]
 80072f0:	6863      	ldr	r3, [r4, #4]
 80072f2:	4642      	mov	r2, r8
 80072f4:	9300      	str	r3, [sp, #0]
 80072f6:	4628      	mov	r0, r5
 80072f8:	4653      	mov	r3, sl
 80072fa:	910b      	str	r1, [sp, #44]	; 0x2c
 80072fc:	f7ff fed4 	bl	80070a8 <__cvt>
 8007300:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007302:	4680      	mov	r8, r0
 8007304:	2947      	cmp	r1, #71	; 0x47
 8007306:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007308:	d108      	bne.n	800731c <_printf_float+0x138>
 800730a:	1cc8      	adds	r0, r1, #3
 800730c:	db02      	blt.n	8007314 <_printf_float+0x130>
 800730e:	6863      	ldr	r3, [r4, #4]
 8007310:	4299      	cmp	r1, r3
 8007312:	dd40      	ble.n	8007396 <_printf_float+0x1b2>
 8007314:	f1a9 0902 	sub.w	r9, r9, #2
 8007318:	fa5f f989 	uxtb.w	r9, r9
 800731c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007320:	d81f      	bhi.n	8007362 <_printf_float+0x17e>
 8007322:	464a      	mov	r2, r9
 8007324:	3901      	subs	r1, #1
 8007326:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800732a:	910d      	str	r1, [sp, #52]	; 0x34
 800732c:	f7ff ff1b 	bl	8007166 <__exponent>
 8007330:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007332:	4682      	mov	sl, r0
 8007334:	1813      	adds	r3, r2, r0
 8007336:	2a01      	cmp	r2, #1
 8007338:	6123      	str	r3, [r4, #16]
 800733a:	dc02      	bgt.n	8007342 <_printf_float+0x15e>
 800733c:	6822      	ldr	r2, [r4, #0]
 800733e:	07d2      	lsls	r2, r2, #31
 8007340:	d501      	bpl.n	8007346 <_printf_float+0x162>
 8007342:	3301      	adds	r3, #1
 8007344:	6123      	str	r3, [r4, #16]
 8007346:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800734a:	2b00      	cmp	r3, #0
 800734c:	d09b      	beq.n	8007286 <_printf_float+0xa2>
 800734e:	232d      	movs	r3, #45	; 0x2d
 8007350:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007354:	e797      	b.n	8007286 <_printf_float+0xa2>
 8007356:	2947      	cmp	r1, #71	; 0x47
 8007358:	d1bc      	bne.n	80072d4 <_printf_float+0xf0>
 800735a:	2b00      	cmp	r3, #0
 800735c:	d1ba      	bne.n	80072d4 <_printf_float+0xf0>
 800735e:	2301      	movs	r3, #1
 8007360:	e7b7      	b.n	80072d2 <_printf_float+0xee>
 8007362:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8007366:	d118      	bne.n	800739a <_printf_float+0x1b6>
 8007368:	2900      	cmp	r1, #0
 800736a:	6863      	ldr	r3, [r4, #4]
 800736c:	dd0b      	ble.n	8007386 <_printf_float+0x1a2>
 800736e:	6121      	str	r1, [r4, #16]
 8007370:	b913      	cbnz	r3, 8007378 <_printf_float+0x194>
 8007372:	6822      	ldr	r2, [r4, #0]
 8007374:	07d0      	lsls	r0, r2, #31
 8007376:	d502      	bpl.n	800737e <_printf_float+0x19a>
 8007378:	3301      	adds	r3, #1
 800737a:	440b      	add	r3, r1
 800737c:	6123      	str	r3, [r4, #16]
 800737e:	f04f 0a00 	mov.w	sl, #0
 8007382:	65a1      	str	r1, [r4, #88]	; 0x58
 8007384:	e7df      	b.n	8007346 <_printf_float+0x162>
 8007386:	b913      	cbnz	r3, 800738e <_printf_float+0x1aa>
 8007388:	6822      	ldr	r2, [r4, #0]
 800738a:	07d2      	lsls	r2, r2, #31
 800738c:	d501      	bpl.n	8007392 <_printf_float+0x1ae>
 800738e:	3302      	adds	r3, #2
 8007390:	e7f4      	b.n	800737c <_printf_float+0x198>
 8007392:	2301      	movs	r3, #1
 8007394:	e7f2      	b.n	800737c <_printf_float+0x198>
 8007396:	f04f 0967 	mov.w	r9, #103	; 0x67
 800739a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800739c:	4299      	cmp	r1, r3
 800739e:	db05      	blt.n	80073ac <_printf_float+0x1c8>
 80073a0:	6823      	ldr	r3, [r4, #0]
 80073a2:	6121      	str	r1, [r4, #16]
 80073a4:	07d8      	lsls	r0, r3, #31
 80073a6:	d5ea      	bpl.n	800737e <_printf_float+0x19a>
 80073a8:	1c4b      	adds	r3, r1, #1
 80073aa:	e7e7      	b.n	800737c <_printf_float+0x198>
 80073ac:	2900      	cmp	r1, #0
 80073ae:	bfcc      	ite	gt
 80073b0:	2201      	movgt	r2, #1
 80073b2:	f1c1 0202 	rsble	r2, r1, #2
 80073b6:	4413      	add	r3, r2
 80073b8:	e7e0      	b.n	800737c <_printf_float+0x198>
 80073ba:	6823      	ldr	r3, [r4, #0]
 80073bc:	055a      	lsls	r2, r3, #21
 80073be:	d407      	bmi.n	80073d0 <_printf_float+0x1ec>
 80073c0:	6923      	ldr	r3, [r4, #16]
 80073c2:	4642      	mov	r2, r8
 80073c4:	4631      	mov	r1, r6
 80073c6:	4628      	mov	r0, r5
 80073c8:	47b8      	blx	r7
 80073ca:	3001      	adds	r0, #1
 80073cc:	d12b      	bne.n	8007426 <_printf_float+0x242>
 80073ce:	e764      	b.n	800729a <_printf_float+0xb6>
 80073d0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80073d4:	f240 80dd 	bls.w	8007592 <_printf_float+0x3ae>
 80073d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80073dc:	2200      	movs	r2, #0
 80073de:	2300      	movs	r3, #0
 80073e0:	f7f9 faec 	bl	80009bc <__aeabi_dcmpeq>
 80073e4:	2800      	cmp	r0, #0
 80073e6:	d033      	beq.n	8007450 <_printf_float+0x26c>
 80073e8:	2301      	movs	r3, #1
 80073ea:	4631      	mov	r1, r6
 80073ec:	4628      	mov	r0, r5
 80073ee:	4a35      	ldr	r2, [pc, #212]	; (80074c4 <_printf_float+0x2e0>)
 80073f0:	47b8      	blx	r7
 80073f2:	3001      	adds	r0, #1
 80073f4:	f43f af51 	beq.w	800729a <_printf_float+0xb6>
 80073f8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80073fc:	429a      	cmp	r2, r3
 80073fe:	db02      	blt.n	8007406 <_printf_float+0x222>
 8007400:	6823      	ldr	r3, [r4, #0]
 8007402:	07d8      	lsls	r0, r3, #31
 8007404:	d50f      	bpl.n	8007426 <_printf_float+0x242>
 8007406:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800740a:	4631      	mov	r1, r6
 800740c:	4628      	mov	r0, r5
 800740e:	47b8      	blx	r7
 8007410:	3001      	adds	r0, #1
 8007412:	f43f af42 	beq.w	800729a <_printf_float+0xb6>
 8007416:	f04f 0800 	mov.w	r8, #0
 800741a:	f104 091a 	add.w	r9, r4, #26
 800741e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007420:	3b01      	subs	r3, #1
 8007422:	4543      	cmp	r3, r8
 8007424:	dc09      	bgt.n	800743a <_printf_float+0x256>
 8007426:	6823      	ldr	r3, [r4, #0]
 8007428:	079b      	lsls	r3, r3, #30
 800742a:	f100 8102 	bmi.w	8007632 <_printf_float+0x44e>
 800742e:	68e0      	ldr	r0, [r4, #12]
 8007430:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007432:	4298      	cmp	r0, r3
 8007434:	bfb8      	it	lt
 8007436:	4618      	movlt	r0, r3
 8007438:	e731      	b.n	800729e <_printf_float+0xba>
 800743a:	2301      	movs	r3, #1
 800743c:	464a      	mov	r2, r9
 800743e:	4631      	mov	r1, r6
 8007440:	4628      	mov	r0, r5
 8007442:	47b8      	blx	r7
 8007444:	3001      	adds	r0, #1
 8007446:	f43f af28 	beq.w	800729a <_printf_float+0xb6>
 800744a:	f108 0801 	add.w	r8, r8, #1
 800744e:	e7e6      	b.n	800741e <_printf_float+0x23a>
 8007450:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007452:	2b00      	cmp	r3, #0
 8007454:	dc38      	bgt.n	80074c8 <_printf_float+0x2e4>
 8007456:	2301      	movs	r3, #1
 8007458:	4631      	mov	r1, r6
 800745a:	4628      	mov	r0, r5
 800745c:	4a19      	ldr	r2, [pc, #100]	; (80074c4 <_printf_float+0x2e0>)
 800745e:	47b8      	blx	r7
 8007460:	3001      	adds	r0, #1
 8007462:	f43f af1a 	beq.w	800729a <_printf_float+0xb6>
 8007466:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800746a:	4313      	orrs	r3, r2
 800746c:	d102      	bne.n	8007474 <_printf_float+0x290>
 800746e:	6823      	ldr	r3, [r4, #0]
 8007470:	07d9      	lsls	r1, r3, #31
 8007472:	d5d8      	bpl.n	8007426 <_printf_float+0x242>
 8007474:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007478:	4631      	mov	r1, r6
 800747a:	4628      	mov	r0, r5
 800747c:	47b8      	blx	r7
 800747e:	3001      	adds	r0, #1
 8007480:	f43f af0b 	beq.w	800729a <_printf_float+0xb6>
 8007484:	f04f 0900 	mov.w	r9, #0
 8007488:	f104 0a1a 	add.w	sl, r4, #26
 800748c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800748e:	425b      	negs	r3, r3
 8007490:	454b      	cmp	r3, r9
 8007492:	dc01      	bgt.n	8007498 <_printf_float+0x2b4>
 8007494:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007496:	e794      	b.n	80073c2 <_printf_float+0x1de>
 8007498:	2301      	movs	r3, #1
 800749a:	4652      	mov	r2, sl
 800749c:	4631      	mov	r1, r6
 800749e:	4628      	mov	r0, r5
 80074a0:	47b8      	blx	r7
 80074a2:	3001      	adds	r0, #1
 80074a4:	f43f aef9 	beq.w	800729a <_printf_float+0xb6>
 80074a8:	f109 0901 	add.w	r9, r9, #1
 80074ac:	e7ee      	b.n	800748c <_printf_float+0x2a8>
 80074ae:	bf00      	nop
 80074b0:	7fefffff 	.word	0x7fefffff
 80074b4:	0800c294 	.word	0x0800c294
 80074b8:	0800c298 	.word	0x0800c298
 80074bc:	0800c2a0 	.word	0x0800c2a0
 80074c0:	0800c29c 	.word	0x0800c29c
 80074c4:	0800c2a4 	.word	0x0800c2a4
 80074c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80074ca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80074cc:	429a      	cmp	r2, r3
 80074ce:	bfa8      	it	ge
 80074d0:	461a      	movge	r2, r3
 80074d2:	2a00      	cmp	r2, #0
 80074d4:	4691      	mov	r9, r2
 80074d6:	dc37      	bgt.n	8007548 <_printf_float+0x364>
 80074d8:	f04f 0b00 	mov.w	fp, #0
 80074dc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80074e0:	f104 021a 	add.w	r2, r4, #26
 80074e4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80074e8:	ebaa 0309 	sub.w	r3, sl, r9
 80074ec:	455b      	cmp	r3, fp
 80074ee:	dc33      	bgt.n	8007558 <_printf_float+0x374>
 80074f0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80074f4:	429a      	cmp	r2, r3
 80074f6:	db3b      	blt.n	8007570 <_printf_float+0x38c>
 80074f8:	6823      	ldr	r3, [r4, #0]
 80074fa:	07da      	lsls	r2, r3, #31
 80074fc:	d438      	bmi.n	8007570 <_printf_float+0x38c>
 80074fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007500:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007502:	eba3 020a 	sub.w	r2, r3, sl
 8007506:	eba3 0901 	sub.w	r9, r3, r1
 800750a:	4591      	cmp	r9, r2
 800750c:	bfa8      	it	ge
 800750e:	4691      	movge	r9, r2
 8007510:	f1b9 0f00 	cmp.w	r9, #0
 8007514:	dc34      	bgt.n	8007580 <_printf_float+0x39c>
 8007516:	f04f 0800 	mov.w	r8, #0
 800751a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800751e:	f104 0a1a 	add.w	sl, r4, #26
 8007522:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007526:	1a9b      	subs	r3, r3, r2
 8007528:	eba3 0309 	sub.w	r3, r3, r9
 800752c:	4543      	cmp	r3, r8
 800752e:	f77f af7a 	ble.w	8007426 <_printf_float+0x242>
 8007532:	2301      	movs	r3, #1
 8007534:	4652      	mov	r2, sl
 8007536:	4631      	mov	r1, r6
 8007538:	4628      	mov	r0, r5
 800753a:	47b8      	blx	r7
 800753c:	3001      	adds	r0, #1
 800753e:	f43f aeac 	beq.w	800729a <_printf_float+0xb6>
 8007542:	f108 0801 	add.w	r8, r8, #1
 8007546:	e7ec      	b.n	8007522 <_printf_float+0x33e>
 8007548:	4613      	mov	r3, r2
 800754a:	4631      	mov	r1, r6
 800754c:	4642      	mov	r2, r8
 800754e:	4628      	mov	r0, r5
 8007550:	47b8      	blx	r7
 8007552:	3001      	adds	r0, #1
 8007554:	d1c0      	bne.n	80074d8 <_printf_float+0x2f4>
 8007556:	e6a0      	b.n	800729a <_printf_float+0xb6>
 8007558:	2301      	movs	r3, #1
 800755a:	4631      	mov	r1, r6
 800755c:	4628      	mov	r0, r5
 800755e:	920b      	str	r2, [sp, #44]	; 0x2c
 8007560:	47b8      	blx	r7
 8007562:	3001      	adds	r0, #1
 8007564:	f43f ae99 	beq.w	800729a <_printf_float+0xb6>
 8007568:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800756a:	f10b 0b01 	add.w	fp, fp, #1
 800756e:	e7b9      	b.n	80074e4 <_printf_float+0x300>
 8007570:	4631      	mov	r1, r6
 8007572:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007576:	4628      	mov	r0, r5
 8007578:	47b8      	blx	r7
 800757a:	3001      	adds	r0, #1
 800757c:	d1bf      	bne.n	80074fe <_printf_float+0x31a>
 800757e:	e68c      	b.n	800729a <_printf_float+0xb6>
 8007580:	464b      	mov	r3, r9
 8007582:	4631      	mov	r1, r6
 8007584:	4628      	mov	r0, r5
 8007586:	eb08 020a 	add.w	r2, r8, sl
 800758a:	47b8      	blx	r7
 800758c:	3001      	adds	r0, #1
 800758e:	d1c2      	bne.n	8007516 <_printf_float+0x332>
 8007590:	e683      	b.n	800729a <_printf_float+0xb6>
 8007592:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007594:	2a01      	cmp	r2, #1
 8007596:	dc01      	bgt.n	800759c <_printf_float+0x3b8>
 8007598:	07db      	lsls	r3, r3, #31
 800759a:	d537      	bpl.n	800760c <_printf_float+0x428>
 800759c:	2301      	movs	r3, #1
 800759e:	4642      	mov	r2, r8
 80075a0:	4631      	mov	r1, r6
 80075a2:	4628      	mov	r0, r5
 80075a4:	47b8      	blx	r7
 80075a6:	3001      	adds	r0, #1
 80075a8:	f43f ae77 	beq.w	800729a <_printf_float+0xb6>
 80075ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80075b0:	4631      	mov	r1, r6
 80075b2:	4628      	mov	r0, r5
 80075b4:	47b8      	blx	r7
 80075b6:	3001      	adds	r0, #1
 80075b8:	f43f ae6f 	beq.w	800729a <_printf_float+0xb6>
 80075bc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80075c0:	2200      	movs	r2, #0
 80075c2:	2300      	movs	r3, #0
 80075c4:	f7f9 f9fa 	bl	80009bc <__aeabi_dcmpeq>
 80075c8:	b9d8      	cbnz	r0, 8007602 <_printf_float+0x41e>
 80075ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80075cc:	f108 0201 	add.w	r2, r8, #1
 80075d0:	3b01      	subs	r3, #1
 80075d2:	4631      	mov	r1, r6
 80075d4:	4628      	mov	r0, r5
 80075d6:	47b8      	blx	r7
 80075d8:	3001      	adds	r0, #1
 80075da:	d10e      	bne.n	80075fa <_printf_float+0x416>
 80075dc:	e65d      	b.n	800729a <_printf_float+0xb6>
 80075de:	2301      	movs	r3, #1
 80075e0:	464a      	mov	r2, r9
 80075e2:	4631      	mov	r1, r6
 80075e4:	4628      	mov	r0, r5
 80075e6:	47b8      	blx	r7
 80075e8:	3001      	adds	r0, #1
 80075ea:	f43f ae56 	beq.w	800729a <_printf_float+0xb6>
 80075ee:	f108 0801 	add.w	r8, r8, #1
 80075f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80075f4:	3b01      	subs	r3, #1
 80075f6:	4543      	cmp	r3, r8
 80075f8:	dcf1      	bgt.n	80075de <_printf_float+0x3fa>
 80075fa:	4653      	mov	r3, sl
 80075fc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007600:	e6e0      	b.n	80073c4 <_printf_float+0x1e0>
 8007602:	f04f 0800 	mov.w	r8, #0
 8007606:	f104 091a 	add.w	r9, r4, #26
 800760a:	e7f2      	b.n	80075f2 <_printf_float+0x40e>
 800760c:	2301      	movs	r3, #1
 800760e:	4642      	mov	r2, r8
 8007610:	e7df      	b.n	80075d2 <_printf_float+0x3ee>
 8007612:	2301      	movs	r3, #1
 8007614:	464a      	mov	r2, r9
 8007616:	4631      	mov	r1, r6
 8007618:	4628      	mov	r0, r5
 800761a:	47b8      	blx	r7
 800761c:	3001      	adds	r0, #1
 800761e:	f43f ae3c 	beq.w	800729a <_printf_float+0xb6>
 8007622:	f108 0801 	add.w	r8, r8, #1
 8007626:	68e3      	ldr	r3, [r4, #12]
 8007628:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800762a:	1a5b      	subs	r3, r3, r1
 800762c:	4543      	cmp	r3, r8
 800762e:	dcf0      	bgt.n	8007612 <_printf_float+0x42e>
 8007630:	e6fd      	b.n	800742e <_printf_float+0x24a>
 8007632:	f04f 0800 	mov.w	r8, #0
 8007636:	f104 0919 	add.w	r9, r4, #25
 800763a:	e7f4      	b.n	8007626 <_printf_float+0x442>

0800763c <_printf_common>:
 800763c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007640:	4616      	mov	r6, r2
 8007642:	4699      	mov	r9, r3
 8007644:	688a      	ldr	r2, [r1, #8]
 8007646:	690b      	ldr	r3, [r1, #16]
 8007648:	4607      	mov	r7, r0
 800764a:	4293      	cmp	r3, r2
 800764c:	bfb8      	it	lt
 800764e:	4613      	movlt	r3, r2
 8007650:	6033      	str	r3, [r6, #0]
 8007652:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007656:	460c      	mov	r4, r1
 8007658:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800765c:	b10a      	cbz	r2, 8007662 <_printf_common+0x26>
 800765e:	3301      	adds	r3, #1
 8007660:	6033      	str	r3, [r6, #0]
 8007662:	6823      	ldr	r3, [r4, #0]
 8007664:	0699      	lsls	r1, r3, #26
 8007666:	bf42      	ittt	mi
 8007668:	6833      	ldrmi	r3, [r6, #0]
 800766a:	3302      	addmi	r3, #2
 800766c:	6033      	strmi	r3, [r6, #0]
 800766e:	6825      	ldr	r5, [r4, #0]
 8007670:	f015 0506 	ands.w	r5, r5, #6
 8007674:	d106      	bne.n	8007684 <_printf_common+0x48>
 8007676:	f104 0a19 	add.w	sl, r4, #25
 800767a:	68e3      	ldr	r3, [r4, #12]
 800767c:	6832      	ldr	r2, [r6, #0]
 800767e:	1a9b      	subs	r3, r3, r2
 8007680:	42ab      	cmp	r3, r5
 8007682:	dc28      	bgt.n	80076d6 <_printf_common+0x9a>
 8007684:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007688:	1e13      	subs	r3, r2, #0
 800768a:	6822      	ldr	r2, [r4, #0]
 800768c:	bf18      	it	ne
 800768e:	2301      	movne	r3, #1
 8007690:	0692      	lsls	r2, r2, #26
 8007692:	d42d      	bmi.n	80076f0 <_printf_common+0xb4>
 8007694:	4649      	mov	r1, r9
 8007696:	4638      	mov	r0, r7
 8007698:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800769c:	47c0      	blx	r8
 800769e:	3001      	adds	r0, #1
 80076a0:	d020      	beq.n	80076e4 <_printf_common+0xa8>
 80076a2:	6823      	ldr	r3, [r4, #0]
 80076a4:	68e5      	ldr	r5, [r4, #12]
 80076a6:	f003 0306 	and.w	r3, r3, #6
 80076aa:	2b04      	cmp	r3, #4
 80076ac:	bf18      	it	ne
 80076ae:	2500      	movne	r5, #0
 80076b0:	6832      	ldr	r2, [r6, #0]
 80076b2:	f04f 0600 	mov.w	r6, #0
 80076b6:	68a3      	ldr	r3, [r4, #8]
 80076b8:	bf08      	it	eq
 80076ba:	1aad      	subeq	r5, r5, r2
 80076bc:	6922      	ldr	r2, [r4, #16]
 80076be:	bf08      	it	eq
 80076c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80076c4:	4293      	cmp	r3, r2
 80076c6:	bfc4      	itt	gt
 80076c8:	1a9b      	subgt	r3, r3, r2
 80076ca:	18ed      	addgt	r5, r5, r3
 80076cc:	341a      	adds	r4, #26
 80076ce:	42b5      	cmp	r5, r6
 80076d0:	d11a      	bne.n	8007708 <_printf_common+0xcc>
 80076d2:	2000      	movs	r0, #0
 80076d4:	e008      	b.n	80076e8 <_printf_common+0xac>
 80076d6:	2301      	movs	r3, #1
 80076d8:	4652      	mov	r2, sl
 80076da:	4649      	mov	r1, r9
 80076dc:	4638      	mov	r0, r7
 80076de:	47c0      	blx	r8
 80076e0:	3001      	adds	r0, #1
 80076e2:	d103      	bne.n	80076ec <_printf_common+0xb0>
 80076e4:	f04f 30ff 	mov.w	r0, #4294967295
 80076e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076ec:	3501      	adds	r5, #1
 80076ee:	e7c4      	b.n	800767a <_printf_common+0x3e>
 80076f0:	2030      	movs	r0, #48	; 0x30
 80076f2:	18e1      	adds	r1, r4, r3
 80076f4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80076f8:	1c5a      	adds	r2, r3, #1
 80076fa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80076fe:	4422      	add	r2, r4
 8007700:	3302      	adds	r3, #2
 8007702:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007706:	e7c5      	b.n	8007694 <_printf_common+0x58>
 8007708:	2301      	movs	r3, #1
 800770a:	4622      	mov	r2, r4
 800770c:	4649      	mov	r1, r9
 800770e:	4638      	mov	r0, r7
 8007710:	47c0      	blx	r8
 8007712:	3001      	adds	r0, #1
 8007714:	d0e6      	beq.n	80076e4 <_printf_common+0xa8>
 8007716:	3601      	adds	r6, #1
 8007718:	e7d9      	b.n	80076ce <_printf_common+0x92>
	...

0800771c <_printf_i>:
 800771c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007720:	7e0f      	ldrb	r7, [r1, #24]
 8007722:	4691      	mov	r9, r2
 8007724:	2f78      	cmp	r7, #120	; 0x78
 8007726:	4680      	mov	r8, r0
 8007728:	460c      	mov	r4, r1
 800772a:	469a      	mov	sl, r3
 800772c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800772e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007732:	d807      	bhi.n	8007744 <_printf_i+0x28>
 8007734:	2f62      	cmp	r7, #98	; 0x62
 8007736:	d80a      	bhi.n	800774e <_printf_i+0x32>
 8007738:	2f00      	cmp	r7, #0
 800773a:	f000 80d9 	beq.w	80078f0 <_printf_i+0x1d4>
 800773e:	2f58      	cmp	r7, #88	; 0x58
 8007740:	f000 80a4 	beq.w	800788c <_printf_i+0x170>
 8007744:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007748:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800774c:	e03a      	b.n	80077c4 <_printf_i+0xa8>
 800774e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007752:	2b15      	cmp	r3, #21
 8007754:	d8f6      	bhi.n	8007744 <_printf_i+0x28>
 8007756:	a101      	add	r1, pc, #4	; (adr r1, 800775c <_printf_i+0x40>)
 8007758:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800775c:	080077b5 	.word	0x080077b5
 8007760:	080077c9 	.word	0x080077c9
 8007764:	08007745 	.word	0x08007745
 8007768:	08007745 	.word	0x08007745
 800776c:	08007745 	.word	0x08007745
 8007770:	08007745 	.word	0x08007745
 8007774:	080077c9 	.word	0x080077c9
 8007778:	08007745 	.word	0x08007745
 800777c:	08007745 	.word	0x08007745
 8007780:	08007745 	.word	0x08007745
 8007784:	08007745 	.word	0x08007745
 8007788:	080078d7 	.word	0x080078d7
 800778c:	080077f9 	.word	0x080077f9
 8007790:	080078b9 	.word	0x080078b9
 8007794:	08007745 	.word	0x08007745
 8007798:	08007745 	.word	0x08007745
 800779c:	080078f9 	.word	0x080078f9
 80077a0:	08007745 	.word	0x08007745
 80077a4:	080077f9 	.word	0x080077f9
 80077a8:	08007745 	.word	0x08007745
 80077ac:	08007745 	.word	0x08007745
 80077b0:	080078c1 	.word	0x080078c1
 80077b4:	682b      	ldr	r3, [r5, #0]
 80077b6:	1d1a      	adds	r2, r3, #4
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	602a      	str	r2, [r5, #0]
 80077bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80077c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80077c4:	2301      	movs	r3, #1
 80077c6:	e0a4      	b.n	8007912 <_printf_i+0x1f6>
 80077c8:	6820      	ldr	r0, [r4, #0]
 80077ca:	6829      	ldr	r1, [r5, #0]
 80077cc:	0606      	lsls	r6, r0, #24
 80077ce:	f101 0304 	add.w	r3, r1, #4
 80077d2:	d50a      	bpl.n	80077ea <_printf_i+0xce>
 80077d4:	680e      	ldr	r6, [r1, #0]
 80077d6:	602b      	str	r3, [r5, #0]
 80077d8:	2e00      	cmp	r6, #0
 80077da:	da03      	bge.n	80077e4 <_printf_i+0xc8>
 80077dc:	232d      	movs	r3, #45	; 0x2d
 80077de:	4276      	negs	r6, r6
 80077e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80077e4:	230a      	movs	r3, #10
 80077e6:	485e      	ldr	r0, [pc, #376]	; (8007960 <_printf_i+0x244>)
 80077e8:	e019      	b.n	800781e <_printf_i+0x102>
 80077ea:	680e      	ldr	r6, [r1, #0]
 80077ec:	f010 0f40 	tst.w	r0, #64	; 0x40
 80077f0:	602b      	str	r3, [r5, #0]
 80077f2:	bf18      	it	ne
 80077f4:	b236      	sxthne	r6, r6
 80077f6:	e7ef      	b.n	80077d8 <_printf_i+0xbc>
 80077f8:	682b      	ldr	r3, [r5, #0]
 80077fa:	6820      	ldr	r0, [r4, #0]
 80077fc:	1d19      	adds	r1, r3, #4
 80077fe:	6029      	str	r1, [r5, #0]
 8007800:	0601      	lsls	r1, r0, #24
 8007802:	d501      	bpl.n	8007808 <_printf_i+0xec>
 8007804:	681e      	ldr	r6, [r3, #0]
 8007806:	e002      	b.n	800780e <_printf_i+0xf2>
 8007808:	0646      	lsls	r6, r0, #25
 800780a:	d5fb      	bpl.n	8007804 <_printf_i+0xe8>
 800780c:	881e      	ldrh	r6, [r3, #0]
 800780e:	2f6f      	cmp	r7, #111	; 0x6f
 8007810:	bf0c      	ite	eq
 8007812:	2308      	moveq	r3, #8
 8007814:	230a      	movne	r3, #10
 8007816:	4852      	ldr	r0, [pc, #328]	; (8007960 <_printf_i+0x244>)
 8007818:	2100      	movs	r1, #0
 800781a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800781e:	6865      	ldr	r5, [r4, #4]
 8007820:	2d00      	cmp	r5, #0
 8007822:	bfa8      	it	ge
 8007824:	6821      	ldrge	r1, [r4, #0]
 8007826:	60a5      	str	r5, [r4, #8]
 8007828:	bfa4      	itt	ge
 800782a:	f021 0104 	bicge.w	r1, r1, #4
 800782e:	6021      	strge	r1, [r4, #0]
 8007830:	b90e      	cbnz	r6, 8007836 <_printf_i+0x11a>
 8007832:	2d00      	cmp	r5, #0
 8007834:	d04d      	beq.n	80078d2 <_printf_i+0x1b6>
 8007836:	4615      	mov	r5, r2
 8007838:	fbb6 f1f3 	udiv	r1, r6, r3
 800783c:	fb03 6711 	mls	r7, r3, r1, r6
 8007840:	5dc7      	ldrb	r7, [r0, r7]
 8007842:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007846:	4637      	mov	r7, r6
 8007848:	42bb      	cmp	r3, r7
 800784a:	460e      	mov	r6, r1
 800784c:	d9f4      	bls.n	8007838 <_printf_i+0x11c>
 800784e:	2b08      	cmp	r3, #8
 8007850:	d10b      	bne.n	800786a <_printf_i+0x14e>
 8007852:	6823      	ldr	r3, [r4, #0]
 8007854:	07de      	lsls	r6, r3, #31
 8007856:	d508      	bpl.n	800786a <_printf_i+0x14e>
 8007858:	6923      	ldr	r3, [r4, #16]
 800785a:	6861      	ldr	r1, [r4, #4]
 800785c:	4299      	cmp	r1, r3
 800785e:	bfde      	ittt	le
 8007860:	2330      	movle	r3, #48	; 0x30
 8007862:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007866:	f105 35ff 	addle.w	r5, r5, #4294967295
 800786a:	1b52      	subs	r2, r2, r5
 800786c:	6122      	str	r2, [r4, #16]
 800786e:	464b      	mov	r3, r9
 8007870:	4621      	mov	r1, r4
 8007872:	4640      	mov	r0, r8
 8007874:	f8cd a000 	str.w	sl, [sp]
 8007878:	aa03      	add	r2, sp, #12
 800787a:	f7ff fedf 	bl	800763c <_printf_common>
 800787e:	3001      	adds	r0, #1
 8007880:	d14c      	bne.n	800791c <_printf_i+0x200>
 8007882:	f04f 30ff 	mov.w	r0, #4294967295
 8007886:	b004      	add	sp, #16
 8007888:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800788c:	4834      	ldr	r0, [pc, #208]	; (8007960 <_printf_i+0x244>)
 800788e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007892:	6829      	ldr	r1, [r5, #0]
 8007894:	6823      	ldr	r3, [r4, #0]
 8007896:	f851 6b04 	ldr.w	r6, [r1], #4
 800789a:	6029      	str	r1, [r5, #0]
 800789c:	061d      	lsls	r5, r3, #24
 800789e:	d514      	bpl.n	80078ca <_printf_i+0x1ae>
 80078a0:	07df      	lsls	r7, r3, #31
 80078a2:	bf44      	itt	mi
 80078a4:	f043 0320 	orrmi.w	r3, r3, #32
 80078a8:	6023      	strmi	r3, [r4, #0]
 80078aa:	b91e      	cbnz	r6, 80078b4 <_printf_i+0x198>
 80078ac:	6823      	ldr	r3, [r4, #0]
 80078ae:	f023 0320 	bic.w	r3, r3, #32
 80078b2:	6023      	str	r3, [r4, #0]
 80078b4:	2310      	movs	r3, #16
 80078b6:	e7af      	b.n	8007818 <_printf_i+0xfc>
 80078b8:	6823      	ldr	r3, [r4, #0]
 80078ba:	f043 0320 	orr.w	r3, r3, #32
 80078be:	6023      	str	r3, [r4, #0]
 80078c0:	2378      	movs	r3, #120	; 0x78
 80078c2:	4828      	ldr	r0, [pc, #160]	; (8007964 <_printf_i+0x248>)
 80078c4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80078c8:	e7e3      	b.n	8007892 <_printf_i+0x176>
 80078ca:	0659      	lsls	r1, r3, #25
 80078cc:	bf48      	it	mi
 80078ce:	b2b6      	uxthmi	r6, r6
 80078d0:	e7e6      	b.n	80078a0 <_printf_i+0x184>
 80078d2:	4615      	mov	r5, r2
 80078d4:	e7bb      	b.n	800784e <_printf_i+0x132>
 80078d6:	682b      	ldr	r3, [r5, #0]
 80078d8:	6826      	ldr	r6, [r4, #0]
 80078da:	1d18      	adds	r0, r3, #4
 80078dc:	6961      	ldr	r1, [r4, #20]
 80078de:	6028      	str	r0, [r5, #0]
 80078e0:	0635      	lsls	r5, r6, #24
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	d501      	bpl.n	80078ea <_printf_i+0x1ce>
 80078e6:	6019      	str	r1, [r3, #0]
 80078e8:	e002      	b.n	80078f0 <_printf_i+0x1d4>
 80078ea:	0670      	lsls	r0, r6, #25
 80078ec:	d5fb      	bpl.n	80078e6 <_printf_i+0x1ca>
 80078ee:	8019      	strh	r1, [r3, #0]
 80078f0:	2300      	movs	r3, #0
 80078f2:	4615      	mov	r5, r2
 80078f4:	6123      	str	r3, [r4, #16]
 80078f6:	e7ba      	b.n	800786e <_printf_i+0x152>
 80078f8:	682b      	ldr	r3, [r5, #0]
 80078fa:	2100      	movs	r1, #0
 80078fc:	1d1a      	adds	r2, r3, #4
 80078fe:	602a      	str	r2, [r5, #0]
 8007900:	681d      	ldr	r5, [r3, #0]
 8007902:	6862      	ldr	r2, [r4, #4]
 8007904:	4628      	mov	r0, r5
 8007906:	f002 fb1d 	bl	8009f44 <memchr>
 800790a:	b108      	cbz	r0, 8007910 <_printf_i+0x1f4>
 800790c:	1b40      	subs	r0, r0, r5
 800790e:	6060      	str	r0, [r4, #4]
 8007910:	6863      	ldr	r3, [r4, #4]
 8007912:	6123      	str	r3, [r4, #16]
 8007914:	2300      	movs	r3, #0
 8007916:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800791a:	e7a8      	b.n	800786e <_printf_i+0x152>
 800791c:	462a      	mov	r2, r5
 800791e:	4649      	mov	r1, r9
 8007920:	4640      	mov	r0, r8
 8007922:	6923      	ldr	r3, [r4, #16]
 8007924:	47d0      	blx	sl
 8007926:	3001      	adds	r0, #1
 8007928:	d0ab      	beq.n	8007882 <_printf_i+0x166>
 800792a:	6823      	ldr	r3, [r4, #0]
 800792c:	079b      	lsls	r3, r3, #30
 800792e:	d413      	bmi.n	8007958 <_printf_i+0x23c>
 8007930:	68e0      	ldr	r0, [r4, #12]
 8007932:	9b03      	ldr	r3, [sp, #12]
 8007934:	4298      	cmp	r0, r3
 8007936:	bfb8      	it	lt
 8007938:	4618      	movlt	r0, r3
 800793a:	e7a4      	b.n	8007886 <_printf_i+0x16a>
 800793c:	2301      	movs	r3, #1
 800793e:	4632      	mov	r2, r6
 8007940:	4649      	mov	r1, r9
 8007942:	4640      	mov	r0, r8
 8007944:	47d0      	blx	sl
 8007946:	3001      	adds	r0, #1
 8007948:	d09b      	beq.n	8007882 <_printf_i+0x166>
 800794a:	3501      	adds	r5, #1
 800794c:	68e3      	ldr	r3, [r4, #12]
 800794e:	9903      	ldr	r1, [sp, #12]
 8007950:	1a5b      	subs	r3, r3, r1
 8007952:	42ab      	cmp	r3, r5
 8007954:	dcf2      	bgt.n	800793c <_printf_i+0x220>
 8007956:	e7eb      	b.n	8007930 <_printf_i+0x214>
 8007958:	2500      	movs	r5, #0
 800795a:	f104 0619 	add.w	r6, r4, #25
 800795e:	e7f5      	b.n	800794c <_printf_i+0x230>
 8007960:	0800c2a6 	.word	0x0800c2a6
 8007964:	0800c2b7 	.word	0x0800c2b7

08007968 <_scanf_float>:
 8007968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800796c:	b087      	sub	sp, #28
 800796e:	9303      	str	r3, [sp, #12]
 8007970:	688b      	ldr	r3, [r1, #8]
 8007972:	4617      	mov	r7, r2
 8007974:	1e5a      	subs	r2, r3, #1
 8007976:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800797a:	bf85      	ittet	hi
 800797c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007980:	195b      	addhi	r3, r3, r5
 8007982:	2300      	movls	r3, #0
 8007984:	9302      	strhi	r3, [sp, #8]
 8007986:	bf88      	it	hi
 8007988:	f240 135d 	movwhi	r3, #349	; 0x15d
 800798c:	468b      	mov	fp, r1
 800798e:	f04f 0500 	mov.w	r5, #0
 8007992:	bf8c      	ite	hi
 8007994:	608b      	strhi	r3, [r1, #8]
 8007996:	9302      	strls	r3, [sp, #8]
 8007998:	680b      	ldr	r3, [r1, #0]
 800799a:	4680      	mov	r8, r0
 800799c:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80079a0:	f84b 3b1c 	str.w	r3, [fp], #28
 80079a4:	460c      	mov	r4, r1
 80079a6:	465e      	mov	r6, fp
 80079a8:	46aa      	mov	sl, r5
 80079aa:	46a9      	mov	r9, r5
 80079ac:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80079b0:	9501      	str	r5, [sp, #4]
 80079b2:	68a2      	ldr	r2, [r4, #8]
 80079b4:	b152      	cbz	r2, 80079cc <_scanf_float+0x64>
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	781b      	ldrb	r3, [r3, #0]
 80079ba:	2b4e      	cmp	r3, #78	; 0x4e
 80079bc:	d864      	bhi.n	8007a88 <_scanf_float+0x120>
 80079be:	2b40      	cmp	r3, #64	; 0x40
 80079c0:	d83c      	bhi.n	8007a3c <_scanf_float+0xd4>
 80079c2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80079c6:	b2c8      	uxtb	r0, r1
 80079c8:	280e      	cmp	r0, #14
 80079ca:	d93a      	bls.n	8007a42 <_scanf_float+0xda>
 80079cc:	f1b9 0f00 	cmp.w	r9, #0
 80079d0:	d003      	beq.n	80079da <_scanf_float+0x72>
 80079d2:	6823      	ldr	r3, [r4, #0]
 80079d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80079d8:	6023      	str	r3, [r4, #0]
 80079da:	f10a 3aff 	add.w	sl, sl, #4294967295
 80079de:	f1ba 0f01 	cmp.w	sl, #1
 80079e2:	f200 8113 	bhi.w	8007c0c <_scanf_float+0x2a4>
 80079e6:	455e      	cmp	r6, fp
 80079e8:	f200 8105 	bhi.w	8007bf6 <_scanf_float+0x28e>
 80079ec:	2501      	movs	r5, #1
 80079ee:	4628      	mov	r0, r5
 80079f0:	b007      	add	sp, #28
 80079f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079f6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80079fa:	2a0d      	cmp	r2, #13
 80079fc:	d8e6      	bhi.n	80079cc <_scanf_float+0x64>
 80079fe:	a101      	add	r1, pc, #4	; (adr r1, 8007a04 <_scanf_float+0x9c>)
 8007a00:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007a04:	08007b43 	.word	0x08007b43
 8007a08:	080079cd 	.word	0x080079cd
 8007a0c:	080079cd 	.word	0x080079cd
 8007a10:	080079cd 	.word	0x080079cd
 8007a14:	08007ba3 	.word	0x08007ba3
 8007a18:	08007b7b 	.word	0x08007b7b
 8007a1c:	080079cd 	.word	0x080079cd
 8007a20:	080079cd 	.word	0x080079cd
 8007a24:	08007b51 	.word	0x08007b51
 8007a28:	080079cd 	.word	0x080079cd
 8007a2c:	080079cd 	.word	0x080079cd
 8007a30:	080079cd 	.word	0x080079cd
 8007a34:	080079cd 	.word	0x080079cd
 8007a38:	08007b09 	.word	0x08007b09
 8007a3c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8007a40:	e7db      	b.n	80079fa <_scanf_float+0x92>
 8007a42:	290e      	cmp	r1, #14
 8007a44:	d8c2      	bhi.n	80079cc <_scanf_float+0x64>
 8007a46:	a001      	add	r0, pc, #4	; (adr r0, 8007a4c <_scanf_float+0xe4>)
 8007a48:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007a4c:	08007afb 	.word	0x08007afb
 8007a50:	080079cd 	.word	0x080079cd
 8007a54:	08007afb 	.word	0x08007afb
 8007a58:	08007b8f 	.word	0x08007b8f
 8007a5c:	080079cd 	.word	0x080079cd
 8007a60:	08007aa9 	.word	0x08007aa9
 8007a64:	08007ae5 	.word	0x08007ae5
 8007a68:	08007ae5 	.word	0x08007ae5
 8007a6c:	08007ae5 	.word	0x08007ae5
 8007a70:	08007ae5 	.word	0x08007ae5
 8007a74:	08007ae5 	.word	0x08007ae5
 8007a78:	08007ae5 	.word	0x08007ae5
 8007a7c:	08007ae5 	.word	0x08007ae5
 8007a80:	08007ae5 	.word	0x08007ae5
 8007a84:	08007ae5 	.word	0x08007ae5
 8007a88:	2b6e      	cmp	r3, #110	; 0x6e
 8007a8a:	d809      	bhi.n	8007aa0 <_scanf_float+0x138>
 8007a8c:	2b60      	cmp	r3, #96	; 0x60
 8007a8e:	d8b2      	bhi.n	80079f6 <_scanf_float+0x8e>
 8007a90:	2b54      	cmp	r3, #84	; 0x54
 8007a92:	d077      	beq.n	8007b84 <_scanf_float+0x21c>
 8007a94:	2b59      	cmp	r3, #89	; 0x59
 8007a96:	d199      	bne.n	80079cc <_scanf_float+0x64>
 8007a98:	2d07      	cmp	r5, #7
 8007a9a:	d197      	bne.n	80079cc <_scanf_float+0x64>
 8007a9c:	2508      	movs	r5, #8
 8007a9e:	e029      	b.n	8007af4 <_scanf_float+0x18c>
 8007aa0:	2b74      	cmp	r3, #116	; 0x74
 8007aa2:	d06f      	beq.n	8007b84 <_scanf_float+0x21c>
 8007aa4:	2b79      	cmp	r3, #121	; 0x79
 8007aa6:	e7f6      	b.n	8007a96 <_scanf_float+0x12e>
 8007aa8:	6821      	ldr	r1, [r4, #0]
 8007aaa:	05c8      	lsls	r0, r1, #23
 8007aac:	d51a      	bpl.n	8007ae4 <_scanf_float+0x17c>
 8007aae:	9b02      	ldr	r3, [sp, #8]
 8007ab0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007ab4:	6021      	str	r1, [r4, #0]
 8007ab6:	f109 0901 	add.w	r9, r9, #1
 8007aba:	b11b      	cbz	r3, 8007ac4 <_scanf_float+0x15c>
 8007abc:	3b01      	subs	r3, #1
 8007abe:	3201      	adds	r2, #1
 8007ac0:	9302      	str	r3, [sp, #8]
 8007ac2:	60a2      	str	r2, [r4, #8]
 8007ac4:	68a3      	ldr	r3, [r4, #8]
 8007ac6:	3b01      	subs	r3, #1
 8007ac8:	60a3      	str	r3, [r4, #8]
 8007aca:	6923      	ldr	r3, [r4, #16]
 8007acc:	3301      	adds	r3, #1
 8007ace:	6123      	str	r3, [r4, #16]
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	3b01      	subs	r3, #1
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	607b      	str	r3, [r7, #4]
 8007ad8:	f340 8084 	ble.w	8007be4 <_scanf_float+0x27c>
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	3301      	adds	r3, #1
 8007ae0:	603b      	str	r3, [r7, #0]
 8007ae2:	e766      	b.n	80079b2 <_scanf_float+0x4a>
 8007ae4:	eb1a 0f05 	cmn.w	sl, r5
 8007ae8:	f47f af70 	bne.w	80079cc <_scanf_float+0x64>
 8007aec:	6822      	ldr	r2, [r4, #0]
 8007aee:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8007af2:	6022      	str	r2, [r4, #0]
 8007af4:	f806 3b01 	strb.w	r3, [r6], #1
 8007af8:	e7e4      	b.n	8007ac4 <_scanf_float+0x15c>
 8007afa:	6822      	ldr	r2, [r4, #0]
 8007afc:	0610      	lsls	r0, r2, #24
 8007afe:	f57f af65 	bpl.w	80079cc <_scanf_float+0x64>
 8007b02:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007b06:	e7f4      	b.n	8007af2 <_scanf_float+0x18a>
 8007b08:	f1ba 0f00 	cmp.w	sl, #0
 8007b0c:	d10e      	bne.n	8007b2c <_scanf_float+0x1c4>
 8007b0e:	f1b9 0f00 	cmp.w	r9, #0
 8007b12:	d10e      	bne.n	8007b32 <_scanf_float+0x1ca>
 8007b14:	6822      	ldr	r2, [r4, #0]
 8007b16:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007b1a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007b1e:	d108      	bne.n	8007b32 <_scanf_float+0x1ca>
 8007b20:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007b24:	f04f 0a01 	mov.w	sl, #1
 8007b28:	6022      	str	r2, [r4, #0]
 8007b2a:	e7e3      	b.n	8007af4 <_scanf_float+0x18c>
 8007b2c:	f1ba 0f02 	cmp.w	sl, #2
 8007b30:	d055      	beq.n	8007bde <_scanf_float+0x276>
 8007b32:	2d01      	cmp	r5, #1
 8007b34:	d002      	beq.n	8007b3c <_scanf_float+0x1d4>
 8007b36:	2d04      	cmp	r5, #4
 8007b38:	f47f af48 	bne.w	80079cc <_scanf_float+0x64>
 8007b3c:	3501      	adds	r5, #1
 8007b3e:	b2ed      	uxtb	r5, r5
 8007b40:	e7d8      	b.n	8007af4 <_scanf_float+0x18c>
 8007b42:	f1ba 0f01 	cmp.w	sl, #1
 8007b46:	f47f af41 	bne.w	80079cc <_scanf_float+0x64>
 8007b4a:	f04f 0a02 	mov.w	sl, #2
 8007b4e:	e7d1      	b.n	8007af4 <_scanf_float+0x18c>
 8007b50:	b97d      	cbnz	r5, 8007b72 <_scanf_float+0x20a>
 8007b52:	f1b9 0f00 	cmp.w	r9, #0
 8007b56:	f47f af3c 	bne.w	80079d2 <_scanf_float+0x6a>
 8007b5a:	6822      	ldr	r2, [r4, #0]
 8007b5c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007b60:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007b64:	f47f af39 	bne.w	80079da <_scanf_float+0x72>
 8007b68:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007b6c:	2501      	movs	r5, #1
 8007b6e:	6022      	str	r2, [r4, #0]
 8007b70:	e7c0      	b.n	8007af4 <_scanf_float+0x18c>
 8007b72:	2d03      	cmp	r5, #3
 8007b74:	d0e2      	beq.n	8007b3c <_scanf_float+0x1d4>
 8007b76:	2d05      	cmp	r5, #5
 8007b78:	e7de      	b.n	8007b38 <_scanf_float+0x1d0>
 8007b7a:	2d02      	cmp	r5, #2
 8007b7c:	f47f af26 	bne.w	80079cc <_scanf_float+0x64>
 8007b80:	2503      	movs	r5, #3
 8007b82:	e7b7      	b.n	8007af4 <_scanf_float+0x18c>
 8007b84:	2d06      	cmp	r5, #6
 8007b86:	f47f af21 	bne.w	80079cc <_scanf_float+0x64>
 8007b8a:	2507      	movs	r5, #7
 8007b8c:	e7b2      	b.n	8007af4 <_scanf_float+0x18c>
 8007b8e:	6822      	ldr	r2, [r4, #0]
 8007b90:	0591      	lsls	r1, r2, #22
 8007b92:	f57f af1b 	bpl.w	80079cc <_scanf_float+0x64>
 8007b96:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8007b9a:	6022      	str	r2, [r4, #0]
 8007b9c:	f8cd 9004 	str.w	r9, [sp, #4]
 8007ba0:	e7a8      	b.n	8007af4 <_scanf_float+0x18c>
 8007ba2:	6822      	ldr	r2, [r4, #0]
 8007ba4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8007ba8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007bac:	d006      	beq.n	8007bbc <_scanf_float+0x254>
 8007bae:	0550      	lsls	r0, r2, #21
 8007bb0:	f57f af0c 	bpl.w	80079cc <_scanf_float+0x64>
 8007bb4:	f1b9 0f00 	cmp.w	r9, #0
 8007bb8:	f43f af0f 	beq.w	80079da <_scanf_float+0x72>
 8007bbc:	0591      	lsls	r1, r2, #22
 8007bbe:	bf58      	it	pl
 8007bc0:	9901      	ldrpl	r1, [sp, #4]
 8007bc2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007bc6:	bf58      	it	pl
 8007bc8:	eba9 0101 	subpl.w	r1, r9, r1
 8007bcc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8007bd0:	f04f 0900 	mov.w	r9, #0
 8007bd4:	bf58      	it	pl
 8007bd6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007bda:	6022      	str	r2, [r4, #0]
 8007bdc:	e78a      	b.n	8007af4 <_scanf_float+0x18c>
 8007bde:	f04f 0a03 	mov.w	sl, #3
 8007be2:	e787      	b.n	8007af4 <_scanf_float+0x18c>
 8007be4:	4639      	mov	r1, r7
 8007be6:	4640      	mov	r0, r8
 8007be8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007bec:	4798      	blx	r3
 8007bee:	2800      	cmp	r0, #0
 8007bf0:	f43f aedf 	beq.w	80079b2 <_scanf_float+0x4a>
 8007bf4:	e6ea      	b.n	80079cc <_scanf_float+0x64>
 8007bf6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007bfa:	463a      	mov	r2, r7
 8007bfc:	4640      	mov	r0, r8
 8007bfe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007c02:	4798      	blx	r3
 8007c04:	6923      	ldr	r3, [r4, #16]
 8007c06:	3b01      	subs	r3, #1
 8007c08:	6123      	str	r3, [r4, #16]
 8007c0a:	e6ec      	b.n	80079e6 <_scanf_float+0x7e>
 8007c0c:	1e6b      	subs	r3, r5, #1
 8007c0e:	2b06      	cmp	r3, #6
 8007c10:	d825      	bhi.n	8007c5e <_scanf_float+0x2f6>
 8007c12:	2d02      	cmp	r5, #2
 8007c14:	d836      	bhi.n	8007c84 <_scanf_float+0x31c>
 8007c16:	455e      	cmp	r6, fp
 8007c18:	f67f aee8 	bls.w	80079ec <_scanf_float+0x84>
 8007c1c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007c20:	463a      	mov	r2, r7
 8007c22:	4640      	mov	r0, r8
 8007c24:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007c28:	4798      	blx	r3
 8007c2a:	6923      	ldr	r3, [r4, #16]
 8007c2c:	3b01      	subs	r3, #1
 8007c2e:	6123      	str	r3, [r4, #16]
 8007c30:	e7f1      	b.n	8007c16 <_scanf_float+0x2ae>
 8007c32:	9802      	ldr	r0, [sp, #8]
 8007c34:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007c38:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8007c3c:	463a      	mov	r2, r7
 8007c3e:	9002      	str	r0, [sp, #8]
 8007c40:	4640      	mov	r0, r8
 8007c42:	4798      	blx	r3
 8007c44:	6923      	ldr	r3, [r4, #16]
 8007c46:	3b01      	subs	r3, #1
 8007c48:	6123      	str	r3, [r4, #16]
 8007c4a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007c4e:	fa5f fa8a 	uxtb.w	sl, sl
 8007c52:	f1ba 0f02 	cmp.w	sl, #2
 8007c56:	d1ec      	bne.n	8007c32 <_scanf_float+0x2ca>
 8007c58:	3d03      	subs	r5, #3
 8007c5a:	b2ed      	uxtb	r5, r5
 8007c5c:	1b76      	subs	r6, r6, r5
 8007c5e:	6823      	ldr	r3, [r4, #0]
 8007c60:	05da      	lsls	r2, r3, #23
 8007c62:	d52f      	bpl.n	8007cc4 <_scanf_float+0x35c>
 8007c64:	055b      	lsls	r3, r3, #21
 8007c66:	d510      	bpl.n	8007c8a <_scanf_float+0x322>
 8007c68:	455e      	cmp	r6, fp
 8007c6a:	f67f aebf 	bls.w	80079ec <_scanf_float+0x84>
 8007c6e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007c72:	463a      	mov	r2, r7
 8007c74:	4640      	mov	r0, r8
 8007c76:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007c7a:	4798      	blx	r3
 8007c7c:	6923      	ldr	r3, [r4, #16]
 8007c7e:	3b01      	subs	r3, #1
 8007c80:	6123      	str	r3, [r4, #16]
 8007c82:	e7f1      	b.n	8007c68 <_scanf_float+0x300>
 8007c84:	46aa      	mov	sl, r5
 8007c86:	9602      	str	r6, [sp, #8]
 8007c88:	e7df      	b.n	8007c4a <_scanf_float+0x2e2>
 8007c8a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007c8e:	6923      	ldr	r3, [r4, #16]
 8007c90:	2965      	cmp	r1, #101	; 0x65
 8007c92:	f103 33ff 	add.w	r3, r3, #4294967295
 8007c96:	f106 35ff 	add.w	r5, r6, #4294967295
 8007c9a:	6123      	str	r3, [r4, #16]
 8007c9c:	d00c      	beq.n	8007cb8 <_scanf_float+0x350>
 8007c9e:	2945      	cmp	r1, #69	; 0x45
 8007ca0:	d00a      	beq.n	8007cb8 <_scanf_float+0x350>
 8007ca2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007ca6:	463a      	mov	r2, r7
 8007ca8:	4640      	mov	r0, r8
 8007caa:	4798      	blx	r3
 8007cac:	6923      	ldr	r3, [r4, #16]
 8007cae:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007cb2:	3b01      	subs	r3, #1
 8007cb4:	1eb5      	subs	r5, r6, #2
 8007cb6:	6123      	str	r3, [r4, #16]
 8007cb8:	463a      	mov	r2, r7
 8007cba:	4640      	mov	r0, r8
 8007cbc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007cc0:	4798      	blx	r3
 8007cc2:	462e      	mov	r6, r5
 8007cc4:	6825      	ldr	r5, [r4, #0]
 8007cc6:	f015 0510 	ands.w	r5, r5, #16
 8007cca:	d155      	bne.n	8007d78 <_scanf_float+0x410>
 8007ccc:	7035      	strb	r5, [r6, #0]
 8007cce:	6823      	ldr	r3, [r4, #0]
 8007cd0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007cd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007cd8:	d11b      	bne.n	8007d12 <_scanf_float+0x3aa>
 8007cda:	9b01      	ldr	r3, [sp, #4]
 8007cdc:	454b      	cmp	r3, r9
 8007cde:	eba3 0209 	sub.w	r2, r3, r9
 8007ce2:	d123      	bne.n	8007d2c <_scanf_float+0x3c4>
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	4659      	mov	r1, fp
 8007ce8:	4640      	mov	r0, r8
 8007cea:	f000 fe91 	bl	8008a10 <_strtod_r>
 8007cee:	6822      	ldr	r2, [r4, #0]
 8007cf0:	9b03      	ldr	r3, [sp, #12]
 8007cf2:	f012 0f02 	tst.w	r2, #2
 8007cf6:	4606      	mov	r6, r0
 8007cf8:	460f      	mov	r7, r1
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	d021      	beq.n	8007d42 <_scanf_float+0x3da>
 8007cfe:	1d1a      	adds	r2, r3, #4
 8007d00:	9903      	ldr	r1, [sp, #12]
 8007d02:	600a      	str	r2, [r1, #0]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	e9c3 6700 	strd	r6, r7, [r3]
 8007d0a:	68e3      	ldr	r3, [r4, #12]
 8007d0c:	3301      	adds	r3, #1
 8007d0e:	60e3      	str	r3, [r4, #12]
 8007d10:	e66d      	b.n	80079ee <_scanf_float+0x86>
 8007d12:	9b04      	ldr	r3, [sp, #16]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d0e5      	beq.n	8007ce4 <_scanf_float+0x37c>
 8007d18:	9905      	ldr	r1, [sp, #20]
 8007d1a:	230a      	movs	r3, #10
 8007d1c:	462a      	mov	r2, r5
 8007d1e:	4640      	mov	r0, r8
 8007d20:	3101      	adds	r1, #1
 8007d22:	f000 ff03 	bl	8008b2c <_strtol_r>
 8007d26:	9b04      	ldr	r3, [sp, #16]
 8007d28:	9e05      	ldr	r6, [sp, #20]
 8007d2a:	1ac2      	subs	r2, r0, r3
 8007d2c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007d30:	429e      	cmp	r6, r3
 8007d32:	bf28      	it	cs
 8007d34:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8007d38:	4630      	mov	r0, r6
 8007d3a:	4910      	ldr	r1, [pc, #64]	; (8007d7c <_scanf_float+0x414>)
 8007d3c:	f000 f826 	bl	8007d8c <siprintf>
 8007d40:	e7d0      	b.n	8007ce4 <_scanf_float+0x37c>
 8007d42:	f012 0f04 	tst.w	r2, #4
 8007d46:	f103 0204 	add.w	r2, r3, #4
 8007d4a:	d1d9      	bne.n	8007d00 <_scanf_float+0x398>
 8007d4c:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8007d50:	f8cc 2000 	str.w	r2, [ip]
 8007d54:	f8d3 8000 	ldr.w	r8, [r3]
 8007d58:	4602      	mov	r2, r0
 8007d5a:	460b      	mov	r3, r1
 8007d5c:	f7f8 fe60 	bl	8000a20 <__aeabi_dcmpun>
 8007d60:	b128      	cbz	r0, 8007d6e <_scanf_float+0x406>
 8007d62:	4807      	ldr	r0, [pc, #28]	; (8007d80 <_scanf_float+0x418>)
 8007d64:	f000 f80e 	bl	8007d84 <nanf>
 8007d68:	f8c8 0000 	str.w	r0, [r8]
 8007d6c:	e7cd      	b.n	8007d0a <_scanf_float+0x3a2>
 8007d6e:	4630      	mov	r0, r6
 8007d70:	4639      	mov	r1, r7
 8007d72:	f7f8 feb3 	bl	8000adc <__aeabi_d2f>
 8007d76:	e7f7      	b.n	8007d68 <_scanf_float+0x400>
 8007d78:	2500      	movs	r5, #0
 8007d7a:	e638      	b.n	80079ee <_scanf_float+0x86>
 8007d7c:	0800c2c8 	.word	0x0800c2c8
 8007d80:	0800c6d0 	.word	0x0800c6d0

08007d84 <nanf>:
 8007d84:	4800      	ldr	r0, [pc, #0]	; (8007d88 <nanf+0x4>)
 8007d86:	4770      	bx	lr
 8007d88:	7fc00000 	.word	0x7fc00000

08007d8c <siprintf>:
 8007d8c:	b40e      	push	{r1, r2, r3}
 8007d8e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007d92:	b500      	push	{lr}
 8007d94:	b09c      	sub	sp, #112	; 0x70
 8007d96:	ab1d      	add	r3, sp, #116	; 0x74
 8007d98:	9002      	str	r0, [sp, #8]
 8007d9a:	9006      	str	r0, [sp, #24]
 8007d9c:	9107      	str	r1, [sp, #28]
 8007d9e:	9104      	str	r1, [sp, #16]
 8007da0:	4808      	ldr	r0, [pc, #32]	; (8007dc4 <siprintf+0x38>)
 8007da2:	4909      	ldr	r1, [pc, #36]	; (8007dc8 <siprintf+0x3c>)
 8007da4:	f853 2b04 	ldr.w	r2, [r3], #4
 8007da8:	9105      	str	r1, [sp, #20]
 8007daa:	6800      	ldr	r0, [r0, #0]
 8007dac:	a902      	add	r1, sp, #8
 8007dae:	9301      	str	r3, [sp, #4]
 8007db0:	f002 feda 	bl	800ab68 <_svfiprintf_r>
 8007db4:	2200      	movs	r2, #0
 8007db6:	9b02      	ldr	r3, [sp, #8]
 8007db8:	701a      	strb	r2, [r3, #0]
 8007dba:	b01c      	add	sp, #112	; 0x70
 8007dbc:	f85d eb04 	ldr.w	lr, [sp], #4
 8007dc0:	b003      	add	sp, #12
 8007dc2:	4770      	bx	lr
 8007dc4:	20000018 	.word	0x20000018
 8007dc8:	ffff0208 	.word	0xffff0208

08007dcc <strpbrk>:
 8007dcc:	b570      	push	{r4, r5, r6, lr}
 8007dce:	4603      	mov	r3, r0
 8007dd0:	7800      	ldrb	r0, [r0, #0]
 8007dd2:	b190      	cbz	r0, 8007dfa <strpbrk+0x2e>
 8007dd4:	460c      	mov	r4, r1
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	f813 5b01 	ldrb.w	r5, [r3], #1
 8007ddc:	b14d      	cbz	r5, 8007df2 <strpbrk+0x26>
 8007dde:	460a      	mov	r2, r1
 8007de0:	e001      	b.n	8007de6 <strpbrk+0x1a>
 8007de2:	42ae      	cmp	r6, r5
 8007de4:	d009      	beq.n	8007dfa <strpbrk+0x2e>
 8007de6:	4614      	mov	r4, r2
 8007de8:	f812 6b01 	ldrb.w	r6, [r2], #1
 8007dec:	2e00      	cmp	r6, #0
 8007dee:	d1f8      	bne.n	8007de2 <strpbrk+0x16>
 8007df0:	e7f1      	b.n	8007dd6 <strpbrk+0xa>
 8007df2:	7823      	ldrb	r3, [r4, #0]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	bf08      	it	eq
 8007df8:	2000      	moveq	r0, #0
 8007dfa:	bd70      	pop	{r4, r5, r6, pc}

08007dfc <sulp>:
 8007dfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e00:	460f      	mov	r7, r1
 8007e02:	4690      	mov	r8, r2
 8007e04:	f002 fc1c 	bl	800a640 <__ulp>
 8007e08:	4604      	mov	r4, r0
 8007e0a:	460d      	mov	r5, r1
 8007e0c:	f1b8 0f00 	cmp.w	r8, #0
 8007e10:	d011      	beq.n	8007e36 <sulp+0x3a>
 8007e12:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8007e16:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	dd0b      	ble.n	8007e36 <sulp+0x3a>
 8007e1e:	2400      	movs	r4, #0
 8007e20:	051b      	lsls	r3, r3, #20
 8007e22:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007e26:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007e2a:	4622      	mov	r2, r4
 8007e2c:	462b      	mov	r3, r5
 8007e2e:	f7f8 fb5d 	bl	80004ec <__aeabi_dmul>
 8007e32:	4604      	mov	r4, r0
 8007e34:	460d      	mov	r5, r1
 8007e36:	4620      	mov	r0, r4
 8007e38:	4629      	mov	r1, r5
 8007e3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08007e40 <_strtod_l>:
 8007e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e44:	469b      	mov	fp, r3
 8007e46:	2300      	movs	r3, #0
 8007e48:	b09f      	sub	sp, #124	; 0x7c
 8007e4a:	931a      	str	r3, [sp, #104]	; 0x68
 8007e4c:	4b9e      	ldr	r3, [pc, #632]	; (80080c8 <_strtod_l+0x288>)
 8007e4e:	4682      	mov	sl, r0
 8007e50:	681f      	ldr	r7, [r3, #0]
 8007e52:	460e      	mov	r6, r1
 8007e54:	4638      	mov	r0, r7
 8007e56:	9215      	str	r2, [sp, #84]	; 0x54
 8007e58:	f7f8 f984 	bl	8000164 <strlen>
 8007e5c:	f04f 0800 	mov.w	r8, #0
 8007e60:	4604      	mov	r4, r0
 8007e62:	f04f 0900 	mov.w	r9, #0
 8007e66:	9619      	str	r6, [sp, #100]	; 0x64
 8007e68:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007e6a:	781a      	ldrb	r2, [r3, #0]
 8007e6c:	2a2b      	cmp	r2, #43	; 0x2b
 8007e6e:	d04c      	beq.n	8007f0a <_strtod_l+0xca>
 8007e70:	d83a      	bhi.n	8007ee8 <_strtod_l+0xa8>
 8007e72:	2a0d      	cmp	r2, #13
 8007e74:	d833      	bhi.n	8007ede <_strtod_l+0x9e>
 8007e76:	2a08      	cmp	r2, #8
 8007e78:	d833      	bhi.n	8007ee2 <_strtod_l+0xa2>
 8007e7a:	2a00      	cmp	r2, #0
 8007e7c:	d03d      	beq.n	8007efa <_strtod_l+0xba>
 8007e7e:	2300      	movs	r3, #0
 8007e80:	930a      	str	r3, [sp, #40]	; 0x28
 8007e82:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8007e84:	782b      	ldrb	r3, [r5, #0]
 8007e86:	2b30      	cmp	r3, #48	; 0x30
 8007e88:	f040 80aa 	bne.w	8007fe0 <_strtod_l+0x1a0>
 8007e8c:	786b      	ldrb	r3, [r5, #1]
 8007e8e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007e92:	2b58      	cmp	r3, #88	; 0x58
 8007e94:	d166      	bne.n	8007f64 <_strtod_l+0x124>
 8007e96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e98:	4650      	mov	r0, sl
 8007e9a:	9301      	str	r3, [sp, #4]
 8007e9c:	ab1a      	add	r3, sp, #104	; 0x68
 8007e9e:	9300      	str	r3, [sp, #0]
 8007ea0:	4a8a      	ldr	r2, [pc, #552]	; (80080cc <_strtod_l+0x28c>)
 8007ea2:	f8cd b008 	str.w	fp, [sp, #8]
 8007ea6:	ab1b      	add	r3, sp, #108	; 0x6c
 8007ea8:	a919      	add	r1, sp, #100	; 0x64
 8007eaa:	f001 fd2f 	bl	800990c <__gethex>
 8007eae:	f010 0607 	ands.w	r6, r0, #7
 8007eb2:	4604      	mov	r4, r0
 8007eb4:	d005      	beq.n	8007ec2 <_strtod_l+0x82>
 8007eb6:	2e06      	cmp	r6, #6
 8007eb8:	d129      	bne.n	8007f0e <_strtod_l+0xce>
 8007eba:	2300      	movs	r3, #0
 8007ebc:	3501      	adds	r5, #1
 8007ebe:	9519      	str	r5, [sp, #100]	; 0x64
 8007ec0:	930a      	str	r3, [sp, #40]	; 0x28
 8007ec2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	f040 858a 	bne.w	80089de <_strtod_l+0xb9e>
 8007eca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ecc:	b1d3      	cbz	r3, 8007f04 <_strtod_l+0xc4>
 8007ece:	4642      	mov	r2, r8
 8007ed0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007ed4:	4610      	mov	r0, r2
 8007ed6:	4619      	mov	r1, r3
 8007ed8:	b01f      	add	sp, #124	; 0x7c
 8007eda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ede:	2a20      	cmp	r2, #32
 8007ee0:	d1cd      	bne.n	8007e7e <_strtod_l+0x3e>
 8007ee2:	3301      	adds	r3, #1
 8007ee4:	9319      	str	r3, [sp, #100]	; 0x64
 8007ee6:	e7bf      	b.n	8007e68 <_strtod_l+0x28>
 8007ee8:	2a2d      	cmp	r2, #45	; 0x2d
 8007eea:	d1c8      	bne.n	8007e7e <_strtod_l+0x3e>
 8007eec:	2201      	movs	r2, #1
 8007eee:	920a      	str	r2, [sp, #40]	; 0x28
 8007ef0:	1c5a      	adds	r2, r3, #1
 8007ef2:	9219      	str	r2, [sp, #100]	; 0x64
 8007ef4:	785b      	ldrb	r3, [r3, #1]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d1c3      	bne.n	8007e82 <_strtod_l+0x42>
 8007efa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007efc:	9619      	str	r6, [sp, #100]	; 0x64
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	f040 856b 	bne.w	80089da <_strtod_l+0xb9a>
 8007f04:	4642      	mov	r2, r8
 8007f06:	464b      	mov	r3, r9
 8007f08:	e7e4      	b.n	8007ed4 <_strtod_l+0x94>
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	e7ef      	b.n	8007eee <_strtod_l+0xae>
 8007f0e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007f10:	b13a      	cbz	r2, 8007f22 <_strtod_l+0xe2>
 8007f12:	2135      	movs	r1, #53	; 0x35
 8007f14:	a81c      	add	r0, sp, #112	; 0x70
 8007f16:	f002 fc97 	bl	800a848 <__copybits>
 8007f1a:	4650      	mov	r0, sl
 8007f1c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007f1e:	f002 f85f 	bl	8009fe0 <_Bfree>
 8007f22:	3e01      	subs	r6, #1
 8007f24:	2e04      	cmp	r6, #4
 8007f26:	d806      	bhi.n	8007f36 <_strtod_l+0xf6>
 8007f28:	e8df f006 	tbb	[pc, r6]
 8007f2c:	1714030a 	.word	0x1714030a
 8007f30:	0a          	.byte	0x0a
 8007f31:	00          	.byte	0x00
 8007f32:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8007f36:	0721      	lsls	r1, r4, #28
 8007f38:	d5c3      	bpl.n	8007ec2 <_strtod_l+0x82>
 8007f3a:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8007f3e:	e7c0      	b.n	8007ec2 <_strtod_l+0x82>
 8007f40:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007f42:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8007f46:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007f4a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007f4e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8007f52:	e7f0      	b.n	8007f36 <_strtod_l+0xf6>
 8007f54:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80080d0 <_strtod_l+0x290>
 8007f58:	e7ed      	b.n	8007f36 <_strtod_l+0xf6>
 8007f5a:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8007f5e:	f04f 38ff 	mov.w	r8, #4294967295
 8007f62:	e7e8      	b.n	8007f36 <_strtod_l+0xf6>
 8007f64:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007f66:	1c5a      	adds	r2, r3, #1
 8007f68:	9219      	str	r2, [sp, #100]	; 0x64
 8007f6a:	785b      	ldrb	r3, [r3, #1]
 8007f6c:	2b30      	cmp	r3, #48	; 0x30
 8007f6e:	d0f9      	beq.n	8007f64 <_strtod_l+0x124>
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d0a6      	beq.n	8007ec2 <_strtod_l+0x82>
 8007f74:	2301      	movs	r3, #1
 8007f76:	9307      	str	r3, [sp, #28]
 8007f78:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007f7a:	220a      	movs	r2, #10
 8007f7c:	9308      	str	r3, [sp, #32]
 8007f7e:	2300      	movs	r3, #0
 8007f80:	469b      	mov	fp, r3
 8007f82:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8007f86:	9819      	ldr	r0, [sp, #100]	; 0x64
 8007f88:	7805      	ldrb	r5, [r0, #0]
 8007f8a:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8007f8e:	b2d9      	uxtb	r1, r3
 8007f90:	2909      	cmp	r1, #9
 8007f92:	d927      	bls.n	8007fe4 <_strtod_l+0x1a4>
 8007f94:	4622      	mov	r2, r4
 8007f96:	4639      	mov	r1, r7
 8007f98:	f002 fefc 	bl	800ad94 <strncmp>
 8007f9c:	2800      	cmp	r0, #0
 8007f9e:	d033      	beq.n	8008008 <_strtod_l+0x1c8>
 8007fa0:	2000      	movs	r0, #0
 8007fa2:	462a      	mov	r2, r5
 8007fa4:	465c      	mov	r4, fp
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	9004      	str	r0, [sp, #16]
 8007faa:	2a65      	cmp	r2, #101	; 0x65
 8007fac:	d001      	beq.n	8007fb2 <_strtod_l+0x172>
 8007fae:	2a45      	cmp	r2, #69	; 0x45
 8007fb0:	d114      	bne.n	8007fdc <_strtod_l+0x19c>
 8007fb2:	b91c      	cbnz	r4, 8007fbc <_strtod_l+0x17c>
 8007fb4:	9a07      	ldr	r2, [sp, #28]
 8007fb6:	4302      	orrs	r2, r0
 8007fb8:	d09f      	beq.n	8007efa <_strtod_l+0xba>
 8007fba:	2400      	movs	r4, #0
 8007fbc:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8007fbe:	1c72      	adds	r2, r6, #1
 8007fc0:	9219      	str	r2, [sp, #100]	; 0x64
 8007fc2:	7872      	ldrb	r2, [r6, #1]
 8007fc4:	2a2b      	cmp	r2, #43	; 0x2b
 8007fc6:	d079      	beq.n	80080bc <_strtod_l+0x27c>
 8007fc8:	2a2d      	cmp	r2, #45	; 0x2d
 8007fca:	f000 8083 	beq.w	80080d4 <_strtod_l+0x294>
 8007fce:	2700      	movs	r7, #0
 8007fd0:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007fd4:	2909      	cmp	r1, #9
 8007fd6:	f240 8083 	bls.w	80080e0 <_strtod_l+0x2a0>
 8007fda:	9619      	str	r6, [sp, #100]	; 0x64
 8007fdc:	2500      	movs	r5, #0
 8007fde:	e09f      	b.n	8008120 <_strtod_l+0x2e0>
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	e7c8      	b.n	8007f76 <_strtod_l+0x136>
 8007fe4:	f1bb 0f08 	cmp.w	fp, #8
 8007fe8:	bfd5      	itete	le
 8007fea:	9906      	ldrle	r1, [sp, #24]
 8007fec:	9905      	ldrgt	r1, [sp, #20]
 8007fee:	fb02 3301 	mlale	r3, r2, r1, r3
 8007ff2:	fb02 3301 	mlagt	r3, r2, r1, r3
 8007ff6:	f100 0001 	add.w	r0, r0, #1
 8007ffa:	bfd4      	ite	le
 8007ffc:	9306      	strle	r3, [sp, #24]
 8007ffe:	9305      	strgt	r3, [sp, #20]
 8008000:	f10b 0b01 	add.w	fp, fp, #1
 8008004:	9019      	str	r0, [sp, #100]	; 0x64
 8008006:	e7be      	b.n	8007f86 <_strtod_l+0x146>
 8008008:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800800a:	191a      	adds	r2, r3, r4
 800800c:	9219      	str	r2, [sp, #100]	; 0x64
 800800e:	5d1a      	ldrb	r2, [r3, r4]
 8008010:	f1bb 0f00 	cmp.w	fp, #0
 8008014:	d036      	beq.n	8008084 <_strtod_l+0x244>
 8008016:	465c      	mov	r4, fp
 8008018:	9004      	str	r0, [sp, #16]
 800801a:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800801e:	2b09      	cmp	r3, #9
 8008020:	d912      	bls.n	8008048 <_strtod_l+0x208>
 8008022:	2301      	movs	r3, #1
 8008024:	e7c1      	b.n	8007faa <_strtod_l+0x16a>
 8008026:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008028:	3001      	adds	r0, #1
 800802a:	1c5a      	adds	r2, r3, #1
 800802c:	9219      	str	r2, [sp, #100]	; 0x64
 800802e:	785a      	ldrb	r2, [r3, #1]
 8008030:	2a30      	cmp	r2, #48	; 0x30
 8008032:	d0f8      	beq.n	8008026 <_strtod_l+0x1e6>
 8008034:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008038:	2b08      	cmp	r3, #8
 800803a:	f200 84d5 	bhi.w	80089e8 <_strtod_l+0xba8>
 800803e:	9004      	str	r0, [sp, #16]
 8008040:	2000      	movs	r0, #0
 8008042:	4604      	mov	r4, r0
 8008044:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008046:	9308      	str	r3, [sp, #32]
 8008048:	3a30      	subs	r2, #48	; 0x30
 800804a:	f100 0301 	add.w	r3, r0, #1
 800804e:	d013      	beq.n	8008078 <_strtod_l+0x238>
 8008050:	9904      	ldr	r1, [sp, #16]
 8008052:	1905      	adds	r5, r0, r4
 8008054:	4419      	add	r1, r3
 8008056:	9104      	str	r1, [sp, #16]
 8008058:	4623      	mov	r3, r4
 800805a:	210a      	movs	r1, #10
 800805c:	42ab      	cmp	r3, r5
 800805e:	d113      	bne.n	8008088 <_strtod_l+0x248>
 8008060:	1823      	adds	r3, r4, r0
 8008062:	2b08      	cmp	r3, #8
 8008064:	f104 0401 	add.w	r4, r4, #1
 8008068:	4404      	add	r4, r0
 800806a:	dc1b      	bgt.n	80080a4 <_strtod_l+0x264>
 800806c:	230a      	movs	r3, #10
 800806e:	9906      	ldr	r1, [sp, #24]
 8008070:	fb03 2301 	mla	r3, r3, r1, r2
 8008074:	9306      	str	r3, [sp, #24]
 8008076:	2300      	movs	r3, #0
 8008078:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800807a:	4618      	mov	r0, r3
 800807c:	1c51      	adds	r1, r2, #1
 800807e:	9119      	str	r1, [sp, #100]	; 0x64
 8008080:	7852      	ldrb	r2, [r2, #1]
 8008082:	e7ca      	b.n	800801a <_strtod_l+0x1da>
 8008084:	4658      	mov	r0, fp
 8008086:	e7d3      	b.n	8008030 <_strtod_l+0x1f0>
 8008088:	2b08      	cmp	r3, #8
 800808a:	dc04      	bgt.n	8008096 <_strtod_l+0x256>
 800808c:	9f06      	ldr	r7, [sp, #24]
 800808e:	434f      	muls	r7, r1
 8008090:	9706      	str	r7, [sp, #24]
 8008092:	3301      	adds	r3, #1
 8008094:	e7e2      	b.n	800805c <_strtod_l+0x21c>
 8008096:	1c5f      	adds	r7, r3, #1
 8008098:	2f10      	cmp	r7, #16
 800809a:	bfde      	ittt	le
 800809c:	9f05      	ldrle	r7, [sp, #20]
 800809e:	434f      	mulle	r7, r1
 80080a0:	9705      	strle	r7, [sp, #20]
 80080a2:	e7f6      	b.n	8008092 <_strtod_l+0x252>
 80080a4:	2c10      	cmp	r4, #16
 80080a6:	bfdf      	itttt	le
 80080a8:	230a      	movle	r3, #10
 80080aa:	9905      	ldrle	r1, [sp, #20]
 80080ac:	fb03 2301 	mlale	r3, r3, r1, r2
 80080b0:	9305      	strle	r3, [sp, #20]
 80080b2:	e7e0      	b.n	8008076 <_strtod_l+0x236>
 80080b4:	2300      	movs	r3, #0
 80080b6:	9304      	str	r3, [sp, #16]
 80080b8:	2301      	movs	r3, #1
 80080ba:	e77b      	b.n	8007fb4 <_strtod_l+0x174>
 80080bc:	2700      	movs	r7, #0
 80080be:	1cb2      	adds	r2, r6, #2
 80080c0:	9219      	str	r2, [sp, #100]	; 0x64
 80080c2:	78b2      	ldrb	r2, [r6, #2]
 80080c4:	e784      	b.n	8007fd0 <_strtod_l+0x190>
 80080c6:	bf00      	nop
 80080c8:	0800c518 	.word	0x0800c518
 80080cc:	0800c2d0 	.word	0x0800c2d0
 80080d0:	7ff00000 	.word	0x7ff00000
 80080d4:	2701      	movs	r7, #1
 80080d6:	e7f2      	b.n	80080be <_strtod_l+0x27e>
 80080d8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80080da:	1c51      	adds	r1, r2, #1
 80080dc:	9119      	str	r1, [sp, #100]	; 0x64
 80080de:	7852      	ldrb	r2, [r2, #1]
 80080e0:	2a30      	cmp	r2, #48	; 0x30
 80080e2:	d0f9      	beq.n	80080d8 <_strtod_l+0x298>
 80080e4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80080e8:	2908      	cmp	r1, #8
 80080ea:	f63f af77 	bhi.w	8007fdc <_strtod_l+0x19c>
 80080ee:	f04f 0e0a 	mov.w	lr, #10
 80080f2:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 80080f6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80080f8:	9209      	str	r2, [sp, #36]	; 0x24
 80080fa:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80080fc:	1c51      	adds	r1, r2, #1
 80080fe:	9119      	str	r1, [sp, #100]	; 0x64
 8008100:	7852      	ldrb	r2, [r2, #1]
 8008102:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8008106:	2d09      	cmp	r5, #9
 8008108:	d935      	bls.n	8008176 <_strtod_l+0x336>
 800810a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800810c:	1b49      	subs	r1, r1, r5
 800810e:	2908      	cmp	r1, #8
 8008110:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8008114:	dc02      	bgt.n	800811c <_strtod_l+0x2dc>
 8008116:	4565      	cmp	r5, ip
 8008118:	bfa8      	it	ge
 800811a:	4665      	movge	r5, ip
 800811c:	b107      	cbz	r7, 8008120 <_strtod_l+0x2e0>
 800811e:	426d      	negs	r5, r5
 8008120:	2c00      	cmp	r4, #0
 8008122:	d14c      	bne.n	80081be <_strtod_l+0x37e>
 8008124:	9907      	ldr	r1, [sp, #28]
 8008126:	4301      	orrs	r1, r0
 8008128:	f47f aecb 	bne.w	8007ec2 <_strtod_l+0x82>
 800812c:	2b00      	cmp	r3, #0
 800812e:	f47f aee4 	bne.w	8007efa <_strtod_l+0xba>
 8008132:	2a69      	cmp	r2, #105	; 0x69
 8008134:	d026      	beq.n	8008184 <_strtod_l+0x344>
 8008136:	dc23      	bgt.n	8008180 <_strtod_l+0x340>
 8008138:	2a49      	cmp	r2, #73	; 0x49
 800813a:	d023      	beq.n	8008184 <_strtod_l+0x344>
 800813c:	2a4e      	cmp	r2, #78	; 0x4e
 800813e:	f47f aedc 	bne.w	8007efa <_strtod_l+0xba>
 8008142:	499d      	ldr	r1, [pc, #628]	; (80083b8 <_strtod_l+0x578>)
 8008144:	a819      	add	r0, sp, #100	; 0x64
 8008146:	f001 fe2f 	bl	8009da8 <__match>
 800814a:	2800      	cmp	r0, #0
 800814c:	f43f aed5 	beq.w	8007efa <_strtod_l+0xba>
 8008150:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008152:	781b      	ldrb	r3, [r3, #0]
 8008154:	2b28      	cmp	r3, #40	; 0x28
 8008156:	d12c      	bne.n	80081b2 <_strtod_l+0x372>
 8008158:	4998      	ldr	r1, [pc, #608]	; (80083bc <_strtod_l+0x57c>)
 800815a:	aa1c      	add	r2, sp, #112	; 0x70
 800815c:	a819      	add	r0, sp, #100	; 0x64
 800815e:	f001 fe37 	bl	8009dd0 <__hexnan>
 8008162:	2805      	cmp	r0, #5
 8008164:	d125      	bne.n	80081b2 <_strtod_l+0x372>
 8008166:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008168:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800816c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8008170:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8008174:	e6a5      	b.n	8007ec2 <_strtod_l+0x82>
 8008176:	fb0e 2c0c 	mla	ip, lr, ip, r2
 800817a:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800817e:	e7bc      	b.n	80080fa <_strtod_l+0x2ba>
 8008180:	2a6e      	cmp	r2, #110	; 0x6e
 8008182:	e7dc      	b.n	800813e <_strtod_l+0x2fe>
 8008184:	498e      	ldr	r1, [pc, #568]	; (80083c0 <_strtod_l+0x580>)
 8008186:	a819      	add	r0, sp, #100	; 0x64
 8008188:	f001 fe0e 	bl	8009da8 <__match>
 800818c:	2800      	cmp	r0, #0
 800818e:	f43f aeb4 	beq.w	8007efa <_strtod_l+0xba>
 8008192:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008194:	498b      	ldr	r1, [pc, #556]	; (80083c4 <_strtod_l+0x584>)
 8008196:	3b01      	subs	r3, #1
 8008198:	a819      	add	r0, sp, #100	; 0x64
 800819a:	9319      	str	r3, [sp, #100]	; 0x64
 800819c:	f001 fe04 	bl	8009da8 <__match>
 80081a0:	b910      	cbnz	r0, 80081a8 <_strtod_l+0x368>
 80081a2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80081a4:	3301      	adds	r3, #1
 80081a6:	9319      	str	r3, [sp, #100]	; 0x64
 80081a8:	f04f 0800 	mov.w	r8, #0
 80081ac:	f8df 9218 	ldr.w	r9, [pc, #536]	; 80083c8 <_strtod_l+0x588>
 80081b0:	e687      	b.n	8007ec2 <_strtod_l+0x82>
 80081b2:	4886      	ldr	r0, [pc, #536]	; (80083cc <_strtod_l+0x58c>)
 80081b4:	f002 fdd8 	bl	800ad68 <nan>
 80081b8:	4680      	mov	r8, r0
 80081ba:	4689      	mov	r9, r1
 80081bc:	e681      	b.n	8007ec2 <_strtod_l+0x82>
 80081be:	9b04      	ldr	r3, [sp, #16]
 80081c0:	f1bb 0f00 	cmp.w	fp, #0
 80081c4:	bf08      	it	eq
 80081c6:	46a3      	moveq	fp, r4
 80081c8:	1aeb      	subs	r3, r5, r3
 80081ca:	2c10      	cmp	r4, #16
 80081cc:	9806      	ldr	r0, [sp, #24]
 80081ce:	4626      	mov	r6, r4
 80081d0:	9307      	str	r3, [sp, #28]
 80081d2:	bfa8      	it	ge
 80081d4:	2610      	movge	r6, #16
 80081d6:	f7f8 f90f 	bl	80003f8 <__aeabi_ui2d>
 80081da:	2c09      	cmp	r4, #9
 80081dc:	4680      	mov	r8, r0
 80081de:	4689      	mov	r9, r1
 80081e0:	dd13      	ble.n	800820a <_strtod_l+0x3ca>
 80081e2:	4b7b      	ldr	r3, [pc, #492]	; (80083d0 <_strtod_l+0x590>)
 80081e4:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80081e8:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80081ec:	f7f8 f97e 	bl	80004ec <__aeabi_dmul>
 80081f0:	4680      	mov	r8, r0
 80081f2:	9805      	ldr	r0, [sp, #20]
 80081f4:	4689      	mov	r9, r1
 80081f6:	f7f8 f8ff 	bl	80003f8 <__aeabi_ui2d>
 80081fa:	4602      	mov	r2, r0
 80081fc:	460b      	mov	r3, r1
 80081fe:	4640      	mov	r0, r8
 8008200:	4649      	mov	r1, r9
 8008202:	f7f7 ffbd 	bl	8000180 <__adddf3>
 8008206:	4680      	mov	r8, r0
 8008208:	4689      	mov	r9, r1
 800820a:	2c0f      	cmp	r4, #15
 800820c:	dc36      	bgt.n	800827c <_strtod_l+0x43c>
 800820e:	9b07      	ldr	r3, [sp, #28]
 8008210:	2b00      	cmp	r3, #0
 8008212:	f43f ae56 	beq.w	8007ec2 <_strtod_l+0x82>
 8008216:	dd22      	ble.n	800825e <_strtod_l+0x41e>
 8008218:	2b16      	cmp	r3, #22
 800821a:	dc09      	bgt.n	8008230 <_strtod_l+0x3f0>
 800821c:	496c      	ldr	r1, [pc, #432]	; (80083d0 <_strtod_l+0x590>)
 800821e:	4642      	mov	r2, r8
 8008220:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008224:	464b      	mov	r3, r9
 8008226:	e9d1 0100 	ldrd	r0, r1, [r1]
 800822a:	f7f8 f95f 	bl	80004ec <__aeabi_dmul>
 800822e:	e7c3      	b.n	80081b8 <_strtod_l+0x378>
 8008230:	9a07      	ldr	r2, [sp, #28]
 8008232:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8008236:	4293      	cmp	r3, r2
 8008238:	db20      	blt.n	800827c <_strtod_l+0x43c>
 800823a:	4d65      	ldr	r5, [pc, #404]	; (80083d0 <_strtod_l+0x590>)
 800823c:	f1c4 040f 	rsb	r4, r4, #15
 8008240:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8008244:	4642      	mov	r2, r8
 8008246:	e9d1 0100 	ldrd	r0, r1, [r1]
 800824a:	464b      	mov	r3, r9
 800824c:	f7f8 f94e 	bl	80004ec <__aeabi_dmul>
 8008250:	9b07      	ldr	r3, [sp, #28]
 8008252:	1b1c      	subs	r4, r3, r4
 8008254:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8008258:	e9d5 2300 	ldrd	r2, r3, [r5]
 800825c:	e7e5      	b.n	800822a <_strtod_l+0x3ea>
 800825e:	9b07      	ldr	r3, [sp, #28]
 8008260:	3316      	adds	r3, #22
 8008262:	db0b      	blt.n	800827c <_strtod_l+0x43c>
 8008264:	9b04      	ldr	r3, [sp, #16]
 8008266:	4640      	mov	r0, r8
 8008268:	1b5d      	subs	r5, r3, r5
 800826a:	4b59      	ldr	r3, [pc, #356]	; (80083d0 <_strtod_l+0x590>)
 800826c:	4649      	mov	r1, r9
 800826e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8008272:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008276:	f7f8 fa63 	bl	8000740 <__aeabi_ddiv>
 800827a:	e79d      	b.n	80081b8 <_strtod_l+0x378>
 800827c:	9b07      	ldr	r3, [sp, #28]
 800827e:	1ba6      	subs	r6, r4, r6
 8008280:	441e      	add	r6, r3
 8008282:	2e00      	cmp	r6, #0
 8008284:	dd74      	ble.n	8008370 <_strtod_l+0x530>
 8008286:	f016 030f 	ands.w	r3, r6, #15
 800828a:	d00a      	beq.n	80082a2 <_strtod_l+0x462>
 800828c:	4950      	ldr	r1, [pc, #320]	; (80083d0 <_strtod_l+0x590>)
 800828e:	4642      	mov	r2, r8
 8008290:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008294:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008298:	464b      	mov	r3, r9
 800829a:	f7f8 f927 	bl	80004ec <__aeabi_dmul>
 800829e:	4680      	mov	r8, r0
 80082a0:	4689      	mov	r9, r1
 80082a2:	f036 060f 	bics.w	r6, r6, #15
 80082a6:	d052      	beq.n	800834e <_strtod_l+0x50e>
 80082a8:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 80082ac:	dd27      	ble.n	80082fe <_strtod_l+0x4be>
 80082ae:	f04f 0b00 	mov.w	fp, #0
 80082b2:	f8cd b010 	str.w	fp, [sp, #16]
 80082b6:	f8cd b020 	str.w	fp, [sp, #32]
 80082ba:	f8cd b018 	str.w	fp, [sp, #24]
 80082be:	2322      	movs	r3, #34	; 0x22
 80082c0:	f04f 0800 	mov.w	r8, #0
 80082c4:	f8df 9100 	ldr.w	r9, [pc, #256]	; 80083c8 <_strtod_l+0x588>
 80082c8:	f8ca 3000 	str.w	r3, [sl]
 80082cc:	9b08      	ldr	r3, [sp, #32]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	f43f adf7 	beq.w	8007ec2 <_strtod_l+0x82>
 80082d4:	4650      	mov	r0, sl
 80082d6:	991a      	ldr	r1, [sp, #104]	; 0x68
 80082d8:	f001 fe82 	bl	8009fe0 <_Bfree>
 80082dc:	4650      	mov	r0, sl
 80082de:	9906      	ldr	r1, [sp, #24]
 80082e0:	f001 fe7e 	bl	8009fe0 <_Bfree>
 80082e4:	4650      	mov	r0, sl
 80082e6:	9904      	ldr	r1, [sp, #16]
 80082e8:	f001 fe7a 	bl	8009fe0 <_Bfree>
 80082ec:	4650      	mov	r0, sl
 80082ee:	9908      	ldr	r1, [sp, #32]
 80082f0:	f001 fe76 	bl	8009fe0 <_Bfree>
 80082f4:	4659      	mov	r1, fp
 80082f6:	4650      	mov	r0, sl
 80082f8:	f001 fe72 	bl	8009fe0 <_Bfree>
 80082fc:	e5e1      	b.n	8007ec2 <_strtod_l+0x82>
 80082fe:	4b35      	ldr	r3, [pc, #212]	; (80083d4 <_strtod_l+0x594>)
 8008300:	4640      	mov	r0, r8
 8008302:	9305      	str	r3, [sp, #20]
 8008304:	2300      	movs	r3, #0
 8008306:	4649      	mov	r1, r9
 8008308:	461f      	mov	r7, r3
 800830a:	1136      	asrs	r6, r6, #4
 800830c:	2e01      	cmp	r6, #1
 800830e:	dc21      	bgt.n	8008354 <_strtod_l+0x514>
 8008310:	b10b      	cbz	r3, 8008316 <_strtod_l+0x4d6>
 8008312:	4680      	mov	r8, r0
 8008314:	4689      	mov	r9, r1
 8008316:	4b2f      	ldr	r3, [pc, #188]	; (80083d4 <_strtod_l+0x594>)
 8008318:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800831c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8008320:	4642      	mov	r2, r8
 8008322:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008326:	464b      	mov	r3, r9
 8008328:	f7f8 f8e0 	bl	80004ec <__aeabi_dmul>
 800832c:	4b26      	ldr	r3, [pc, #152]	; (80083c8 <_strtod_l+0x588>)
 800832e:	460a      	mov	r2, r1
 8008330:	400b      	ands	r3, r1
 8008332:	4929      	ldr	r1, [pc, #164]	; (80083d8 <_strtod_l+0x598>)
 8008334:	4680      	mov	r8, r0
 8008336:	428b      	cmp	r3, r1
 8008338:	d8b9      	bhi.n	80082ae <_strtod_l+0x46e>
 800833a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800833e:	428b      	cmp	r3, r1
 8008340:	bf86      	itte	hi
 8008342:	f04f 38ff 	movhi.w	r8, #4294967295
 8008346:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 80083dc <_strtod_l+0x59c>
 800834a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800834e:	2300      	movs	r3, #0
 8008350:	9305      	str	r3, [sp, #20]
 8008352:	e07f      	b.n	8008454 <_strtod_l+0x614>
 8008354:	07f2      	lsls	r2, r6, #31
 8008356:	d505      	bpl.n	8008364 <_strtod_l+0x524>
 8008358:	9b05      	ldr	r3, [sp, #20]
 800835a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800835e:	f7f8 f8c5 	bl	80004ec <__aeabi_dmul>
 8008362:	2301      	movs	r3, #1
 8008364:	9a05      	ldr	r2, [sp, #20]
 8008366:	3701      	adds	r7, #1
 8008368:	3208      	adds	r2, #8
 800836a:	1076      	asrs	r6, r6, #1
 800836c:	9205      	str	r2, [sp, #20]
 800836e:	e7cd      	b.n	800830c <_strtod_l+0x4cc>
 8008370:	d0ed      	beq.n	800834e <_strtod_l+0x50e>
 8008372:	4276      	negs	r6, r6
 8008374:	f016 020f 	ands.w	r2, r6, #15
 8008378:	d00a      	beq.n	8008390 <_strtod_l+0x550>
 800837a:	4b15      	ldr	r3, [pc, #84]	; (80083d0 <_strtod_l+0x590>)
 800837c:	4640      	mov	r0, r8
 800837e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008382:	4649      	mov	r1, r9
 8008384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008388:	f7f8 f9da 	bl	8000740 <__aeabi_ddiv>
 800838c:	4680      	mov	r8, r0
 800838e:	4689      	mov	r9, r1
 8008390:	1136      	asrs	r6, r6, #4
 8008392:	d0dc      	beq.n	800834e <_strtod_l+0x50e>
 8008394:	2e1f      	cmp	r6, #31
 8008396:	dd23      	ble.n	80083e0 <_strtod_l+0x5a0>
 8008398:	f04f 0b00 	mov.w	fp, #0
 800839c:	f8cd b010 	str.w	fp, [sp, #16]
 80083a0:	f8cd b020 	str.w	fp, [sp, #32]
 80083a4:	f8cd b018 	str.w	fp, [sp, #24]
 80083a8:	2322      	movs	r3, #34	; 0x22
 80083aa:	f04f 0800 	mov.w	r8, #0
 80083ae:	f04f 0900 	mov.w	r9, #0
 80083b2:	f8ca 3000 	str.w	r3, [sl]
 80083b6:	e789      	b.n	80082cc <_strtod_l+0x48c>
 80083b8:	0800c2a1 	.word	0x0800c2a1
 80083bc:	0800c2e4 	.word	0x0800c2e4
 80083c0:	0800c299 	.word	0x0800c299
 80083c4:	0800c424 	.word	0x0800c424
 80083c8:	7ff00000 	.word	0x7ff00000
 80083cc:	0800c6d0 	.word	0x0800c6d0
 80083d0:	0800c5b0 	.word	0x0800c5b0
 80083d4:	0800c588 	.word	0x0800c588
 80083d8:	7ca00000 	.word	0x7ca00000
 80083dc:	7fefffff 	.word	0x7fefffff
 80083e0:	f016 0310 	ands.w	r3, r6, #16
 80083e4:	bf18      	it	ne
 80083e6:	236a      	movne	r3, #106	; 0x6a
 80083e8:	4640      	mov	r0, r8
 80083ea:	9305      	str	r3, [sp, #20]
 80083ec:	4649      	mov	r1, r9
 80083ee:	2300      	movs	r3, #0
 80083f0:	4fb0      	ldr	r7, [pc, #704]	; (80086b4 <_strtod_l+0x874>)
 80083f2:	07f2      	lsls	r2, r6, #31
 80083f4:	d504      	bpl.n	8008400 <_strtod_l+0x5c0>
 80083f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80083fa:	f7f8 f877 	bl	80004ec <__aeabi_dmul>
 80083fe:	2301      	movs	r3, #1
 8008400:	1076      	asrs	r6, r6, #1
 8008402:	f107 0708 	add.w	r7, r7, #8
 8008406:	d1f4      	bne.n	80083f2 <_strtod_l+0x5b2>
 8008408:	b10b      	cbz	r3, 800840e <_strtod_l+0x5ce>
 800840a:	4680      	mov	r8, r0
 800840c:	4689      	mov	r9, r1
 800840e:	9b05      	ldr	r3, [sp, #20]
 8008410:	b1c3      	cbz	r3, 8008444 <_strtod_l+0x604>
 8008412:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8008416:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800841a:	2b00      	cmp	r3, #0
 800841c:	4649      	mov	r1, r9
 800841e:	dd11      	ble.n	8008444 <_strtod_l+0x604>
 8008420:	2b1f      	cmp	r3, #31
 8008422:	f340 8127 	ble.w	8008674 <_strtod_l+0x834>
 8008426:	2b34      	cmp	r3, #52	; 0x34
 8008428:	bfd8      	it	le
 800842a:	f04f 33ff 	movle.w	r3, #4294967295
 800842e:	f04f 0800 	mov.w	r8, #0
 8008432:	bfcf      	iteee	gt
 8008434:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8008438:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800843c:	fa03 f202 	lslle.w	r2, r3, r2
 8008440:	ea02 0901 	andle.w	r9, r2, r1
 8008444:	2200      	movs	r2, #0
 8008446:	2300      	movs	r3, #0
 8008448:	4640      	mov	r0, r8
 800844a:	4649      	mov	r1, r9
 800844c:	f7f8 fab6 	bl	80009bc <__aeabi_dcmpeq>
 8008450:	2800      	cmp	r0, #0
 8008452:	d1a1      	bne.n	8008398 <_strtod_l+0x558>
 8008454:	9b06      	ldr	r3, [sp, #24]
 8008456:	465a      	mov	r2, fp
 8008458:	9300      	str	r3, [sp, #0]
 800845a:	4650      	mov	r0, sl
 800845c:	4623      	mov	r3, r4
 800845e:	9908      	ldr	r1, [sp, #32]
 8008460:	f001 fe26 	bl	800a0b0 <__s2b>
 8008464:	9008      	str	r0, [sp, #32]
 8008466:	2800      	cmp	r0, #0
 8008468:	f43f af21 	beq.w	80082ae <_strtod_l+0x46e>
 800846c:	9b04      	ldr	r3, [sp, #16]
 800846e:	f04f 0b00 	mov.w	fp, #0
 8008472:	1b5d      	subs	r5, r3, r5
 8008474:	9b07      	ldr	r3, [sp, #28]
 8008476:	f8cd b010 	str.w	fp, [sp, #16]
 800847a:	2b00      	cmp	r3, #0
 800847c:	bfb4      	ite	lt
 800847e:	462b      	movlt	r3, r5
 8008480:	2300      	movge	r3, #0
 8008482:	930e      	str	r3, [sp, #56]	; 0x38
 8008484:	9b07      	ldr	r3, [sp, #28]
 8008486:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800848a:	9314      	str	r3, [sp, #80]	; 0x50
 800848c:	9b08      	ldr	r3, [sp, #32]
 800848e:	4650      	mov	r0, sl
 8008490:	6859      	ldr	r1, [r3, #4]
 8008492:	f001 fd65 	bl	8009f60 <_Balloc>
 8008496:	9006      	str	r0, [sp, #24]
 8008498:	2800      	cmp	r0, #0
 800849a:	f43f af10 	beq.w	80082be <_strtod_l+0x47e>
 800849e:	9b08      	ldr	r3, [sp, #32]
 80084a0:	300c      	adds	r0, #12
 80084a2:	691a      	ldr	r2, [r3, #16]
 80084a4:	f103 010c 	add.w	r1, r3, #12
 80084a8:	3202      	adds	r2, #2
 80084aa:	0092      	lsls	r2, r2, #2
 80084ac:	f7fe fdcc 	bl	8007048 <memcpy>
 80084b0:	ab1c      	add	r3, sp, #112	; 0x70
 80084b2:	9301      	str	r3, [sp, #4]
 80084b4:	ab1b      	add	r3, sp, #108	; 0x6c
 80084b6:	9300      	str	r3, [sp, #0]
 80084b8:	4642      	mov	r2, r8
 80084ba:	464b      	mov	r3, r9
 80084bc:	4650      	mov	r0, sl
 80084be:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 80084c2:	f002 f937 	bl	800a734 <__d2b>
 80084c6:	901a      	str	r0, [sp, #104]	; 0x68
 80084c8:	2800      	cmp	r0, #0
 80084ca:	f43f aef8 	beq.w	80082be <_strtod_l+0x47e>
 80084ce:	2101      	movs	r1, #1
 80084d0:	4650      	mov	r0, sl
 80084d2:	f001 fe85 	bl	800a1e0 <__i2b>
 80084d6:	4603      	mov	r3, r0
 80084d8:	9004      	str	r0, [sp, #16]
 80084da:	2800      	cmp	r0, #0
 80084dc:	f43f aeef 	beq.w	80082be <_strtod_l+0x47e>
 80084e0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80084e2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80084e4:	2d00      	cmp	r5, #0
 80084e6:	bfab      	itete	ge
 80084e8:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80084ea:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 80084ec:	18ee      	addge	r6, r5, r3
 80084ee:	1b5c      	sublt	r4, r3, r5
 80084f0:	9b05      	ldr	r3, [sp, #20]
 80084f2:	bfa8      	it	ge
 80084f4:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 80084f6:	eba5 0503 	sub.w	r5, r5, r3
 80084fa:	4415      	add	r5, r2
 80084fc:	4b6e      	ldr	r3, [pc, #440]	; (80086b8 <_strtod_l+0x878>)
 80084fe:	f105 35ff 	add.w	r5, r5, #4294967295
 8008502:	bfb8      	it	lt
 8008504:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8008506:	429d      	cmp	r5, r3
 8008508:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800850c:	f280 80c4 	bge.w	8008698 <_strtod_l+0x858>
 8008510:	1b5b      	subs	r3, r3, r5
 8008512:	2b1f      	cmp	r3, #31
 8008514:	f04f 0701 	mov.w	r7, #1
 8008518:	eba2 0203 	sub.w	r2, r2, r3
 800851c:	f300 80b1 	bgt.w	8008682 <_strtod_l+0x842>
 8008520:	2500      	movs	r5, #0
 8008522:	fa07 f303 	lsl.w	r3, r7, r3
 8008526:	930f      	str	r3, [sp, #60]	; 0x3c
 8008528:	18b7      	adds	r7, r6, r2
 800852a:	9b05      	ldr	r3, [sp, #20]
 800852c:	42be      	cmp	r6, r7
 800852e:	4414      	add	r4, r2
 8008530:	441c      	add	r4, r3
 8008532:	4633      	mov	r3, r6
 8008534:	bfa8      	it	ge
 8008536:	463b      	movge	r3, r7
 8008538:	42a3      	cmp	r3, r4
 800853a:	bfa8      	it	ge
 800853c:	4623      	movge	r3, r4
 800853e:	2b00      	cmp	r3, #0
 8008540:	bfc2      	ittt	gt
 8008542:	1aff      	subgt	r7, r7, r3
 8008544:	1ae4      	subgt	r4, r4, r3
 8008546:	1af6      	subgt	r6, r6, r3
 8008548:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800854a:	2b00      	cmp	r3, #0
 800854c:	dd17      	ble.n	800857e <_strtod_l+0x73e>
 800854e:	461a      	mov	r2, r3
 8008550:	4650      	mov	r0, sl
 8008552:	9904      	ldr	r1, [sp, #16]
 8008554:	f001 ff02 	bl	800a35c <__pow5mult>
 8008558:	9004      	str	r0, [sp, #16]
 800855a:	2800      	cmp	r0, #0
 800855c:	f43f aeaf 	beq.w	80082be <_strtod_l+0x47e>
 8008560:	4601      	mov	r1, r0
 8008562:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008564:	4650      	mov	r0, sl
 8008566:	f001 fe51 	bl	800a20c <__multiply>
 800856a:	9009      	str	r0, [sp, #36]	; 0x24
 800856c:	2800      	cmp	r0, #0
 800856e:	f43f aea6 	beq.w	80082be <_strtod_l+0x47e>
 8008572:	4650      	mov	r0, sl
 8008574:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008576:	f001 fd33 	bl	8009fe0 <_Bfree>
 800857a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800857c:	931a      	str	r3, [sp, #104]	; 0x68
 800857e:	2f00      	cmp	r7, #0
 8008580:	f300 808e 	bgt.w	80086a0 <_strtod_l+0x860>
 8008584:	9b07      	ldr	r3, [sp, #28]
 8008586:	2b00      	cmp	r3, #0
 8008588:	dd08      	ble.n	800859c <_strtod_l+0x75c>
 800858a:	4650      	mov	r0, sl
 800858c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800858e:	9906      	ldr	r1, [sp, #24]
 8008590:	f001 fee4 	bl	800a35c <__pow5mult>
 8008594:	9006      	str	r0, [sp, #24]
 8008596:	2800      	cmp	r0, #0
 8008598:	f43f ae91 	beq.w	80082be <_strtod_l+0x47e>
 800859c:	2c00      	cmp	r4, #0
 800859e:	dd08      	ble.n	80085b2 <_strtod_l+0x772>
 80085a0:	4622      	mov	r2, r4
 80085a2:	4650      	mov	r0, sl
 80085a4:	9906      	ldr	r1, [sp, #24]
 80085a6:	f001 ff33 	bl	800a410 <__lshift>
 80085aa:	9006      	str	r0, [sp, #24]
 80085ac:	2800      	cmp	r0, #0
 80085ae:	f43f ae86 	beq.w	80082be <_strtod_l+0x47e>
 80085b2:	2e00      	cmp	r6, #0
 80085b4:	dd08      	ble.n	80085c8 <_strtod_l+0x788>
 80085b6:	4632      	mov	r2, r6
 80085b8:	4650      	mov	r0, sl
 80085ba:	9904      	ldr	r1, [sp, #16]
 80085bc:	f001 ff28 	bl	800a410 <__lshift>
 80085c0:	9004      	str	r0, [sp, #16]
 80085c2:	2800      	cmp	r0, #0
 80085c4:	f43f ae7b 	beq.w	80082be <_strtod_l+0x47e>
 80085c8:	4650      	mov	r0, sl
 80085ca:	9a06      	ldr	r2, [sp, #24]
 80085cc:	991a      	ldr	r1, [sp, #104]	; 0x68
 80085ce:	f001 ffab 	bl	800a528 <__mdiff>
 80085d2:	4683      	mov	fp, r0
 80085d4:	2800      	cmp	r0, #0
 80085d6:	f43f ae72 	beq.w	80082be <_strtod_l+0x47e>
 80085da:	2400      	movs	r4, #0
 80085dc:	68c3      	ldr	r3, [r0, #12]
 80085de:	9904      	ldr	r1, [sp, #16]
 80085e0:	60c4      	str	r4, [r0, #12]
 80085e2:	930b      	str	r3, [sp, #44]	; 0x2c
 80085e4:	f001 ff84 	bl	800a4f0 <__mcmp>
 80085e8:	42a0      	cmp	r0, r4
 80085ea:	da6b      	bge.n	80086c4 <_strtod_l+0x884>
 80085ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80085ee:	ea53 0308 	orrs.w	r3, r3, r8
 80085f2:	f040 8091 	bne.w	8008718 <_strtod_l+0x8d8>
 80085f6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	f040 808c 	bne.w	8008718 <_strtod_l+0x8d8>
 8008600:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008604:	0d1b      	lsrs	r3, r3, #20
 8008606:	051b      	lsls	r3, r3, #20
 8008608:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800860c:	f240 8084 	bls.w	8008718 <_strtod_l+0x8d8>
 8008610:	f8db 3014 	ldr.w	r3, [fp, #20]
 8008614:	b91b      	cbnz	r3, 800861e <_strtod_l+0x7de>
 8008616:	f8db 3010 	ldr.w	r3, [fp, #16]
 800861a:	2b01      	cmp	r3, #1
 800861c:	dd7c      	ble.n	8008718 <_strtod_l+0x8d8>
 800861e:	4659      	mov	r1, fp
 8008620:	2201      	movs	r2, #1
 8008622:	4650      	mov	r0, sl
 8008624:	f001 fef4 	bl	800a410 <__lshift>
 8008628:	9904      	ldr	r1, [sp, #16]
 800862a:	4683      	mov	fp, r0
 800862c:	f001 ff60 	bl	800a4f0 <__mcmp>
 8008630:	2800      	cmp	r0, #0
 8008632:	dd71      	ble.n	8008718 <_strtod_l+0x8d8>
 8008634:	9905      	ldr	r1, [sp, #20]
 8008636:	464b      	mov	r3, r9
 8008638:	4a20      	ldr	r2, [pc, #128]	; (80086bc <_strtod_l+0x87c>)
 800863a:	2900      	cmp	r1, #0
 800863c:	f000 808c 	beq.w	8008758 <_strtod_l+0x918>
 8008640:	ea02 0109 	and.w	r1, r2, r9
 8008644:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008648:	f300 8086 	bgt.w	8008758 <_strtod_l+0x918>
 800864c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008650:	f77f aeaa 	ble.w	80083a8 <_strtod_l+0x568>
 8008654:	4640      	mov	r0, r8
 8008656:	4649      	mov	r1, r9
 8008658:	4b19      	ldr	r3, [pc, #100]	; (80086c0 <_strtod_l+0x880>)
 800865a:	2200      	movs	r2, #0
 800865c:	f7f7 ff46 	bl	80004ec <__aeabi_dmul>
 8008660:	460b      	mov	r3, r1
 8008662:	4303      	orrs	r3, r0
 8008664:	bf08      	it	eq
 8008666:	2322      	moveq	r3, #34	; 0x22
 8008668:	4680      	mov	r8, r0
 800866a:	4689      	mov	r9, r1
 800866c:	bf08      	it	eq
 800866e:	f8ca 3000 	streq.w	r3, [sl]
 8008672:	e62f      	b.n	80082d4 <_strtod_l+0x494>
 8008674:	f04f 32ff 	mov.w	r2, #4294967295
 8008678:	fa02 f303 	lsl.w	r3, r2, r3
 800867c:	ea03 0808 	and.w	r8, r3, r8
 8008680:	e6e0      	b.n	8008444 <_strtod_l+0x604>
 8008682:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8008686:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800868a:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800868e:	35e2      	adds	r5, #226	; 0xe2
 8008690:	fa07 f505 	lsl.w	r5, r7, r5
 8008694:	970f      	str	r7, [sp, #60]	; 0x3c
 8008696:	e747      	b.n	8008528 <_strtod_l+0x6e8>
 8008698:	2301      	movs	r3, #1
 800869a:	2500      	movs	r5, #0
 800869c:	930f      	str	r3, [sp, #60]	; 0x3c
 800869e:	e743      	b.n	8008528 <_strtod_l+0x6e8>
 80086a0:	463a      	mov	r2, r7
 80086a2:	4650      	mov	r0, sl
 80086a4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80086a6:	f001 feb3 	bl	800a410 <__lshift>
 80086aa:	901a      	str	r0, [sp, #104]	; 0x68
 80086ac:	2800      	cmp	r0, #0
 80086ae:	f47f af69 	bne.w	8008584 <_strtod_l+0x744>
 80086b2:	e604      	b.n	80082be <_strtod_l+0x47e>
 80086b4:	0800c2f8 	.word	0x0800c2f8
 80086b8:	fffffc02 	.word	0xfffffc02
 80086bc:	7ff00000 	.word	0x7ff00000
 80086c0:	39500000 	.word	0x39500000
 80086c4:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80086c8:	d165      	bne.n	8008796 <_strtod_l+0x956>
 80086ca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80086cc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80086d0:	b35a      	cbz	r2, 800872a <_strtod_l+0x8ea>
 80086d2:	4a99      	ldr	r2, [pc, #612]	; (8008938 <_strtod_l+0xaf8>)
 80086d4:	4293      	cmp	r3, r2
 80086d6:	d12b      	bne.n	8008730 <_strtod_l+0x8f0>
 80086d8:	9b05      	ldr	r3, [sp, #20]
 80086da:	4641      	mov	r1, r8
 80086dc:	b303      	cbz	r3, 8008720 <_strtod_l+0x8e0>
 80086de:	464a      	mov	r2, r9
 80086e0:	4b96      	ldr	r3, [pc, #600]	; (800893c <_strtod_l+0xafc>)
 80086e2:	4013      	ands	r3, r2
 80086e4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80086e8:	f04f 32ff 	mov.w	r2, #4294967295
 80086ec:	d81b      	bhi.n	8008726 <_strtod_l+0x8e6>
 80086ee:	0d1b      	lsrs	r3, r3, #20
 80086f0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80086f4:	fa02 f303 	lsl.w	r3, r2, r3
 80086f8:	4299      	cmp	r1, r3
 80086fa:	d119      	bne.n	8008730 <_strtod_l+0x8f0>
 80086fc:	4b90      	ldr	r3, [pc, #576]	; (8008940 <_strtod_l+0xb00>)
 80086fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008700:	429a      	cmp	r2, r3
 8008702:	d102      	bne.n	800870a <_strtod_l+0x8ca>
 8008704:	3101      	adds	r1, #1
 8008706:	f43f adda 	beq.w	80082be <_strtod_l+0x47e>
 800870a:	f04f 0800 	mov.w	r8, #0
 800870e:	4b8b      	ldr	r3, [pc, #556]	; (800893c <_strtod_l+0xafc>)
 8008710:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008712:	401a      	ands	r2, r3
 8008714:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8008718:	9b05      	ldr	r3, [sp, #20]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d19a      	bne.n	8008654 <_strtod_l+0x814>
 800871e:	e5d9      	b.n	80082d4 <_strtod_l+0x494>
 8008720:	f04f 33ff 	mov.w	r3, #4294967295
 8008724:	e7e8      	b.n	80086f8 <_strtod_l+0x8b8>
 8008726:	4613      	mov	r3, r2
 8008728:	e7e6      	b.n	80086f8 <_strtod_l+0x8b8>
 800872a:	ea53 0308 	orrs.w	r3, r3, r8
 800872e:	d081      	beq.n	8008634 <_strtod_l+0x7f4>
 8008730:	b1e5      	cbz	r5, 800876c <_strtod_l+0x92c>
 8008732:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008734:	421d      	tst	r5, r3
 8008736:	d0ef      	beq.n	8008718 <_strtod_l+0x8d8>
 8008738:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800873a:	4640      	mov	r0, r8
 800873c:	4649      	mov	r1, r9
 800873e:	9a05      	ldr	r2, [sp, #20]
 8008740:	b1c3      	cbz	r3, 8008774 <_strtod_l+0x934>
 8008742:	f7ff fb5b 	bl	8007dfc <sulp>
 8008746:	4602      	mov	r2, r0
 8008748:	460b      	mov	r3, r1
 800874a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800874e:	f7f7 fd17 	bl	8000180 <__adddf3>
 8008752:	4680      	mov	r8, r0
 8008754:	4689      	mov	r9, r1
 8008756:	e7df      	b.n	8008718 <_strtod_l+0x8d8>
 8008758:	4013      	ands	r3, r2
 800875a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800875e:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8008762:	f04f 38ff 	mov.w	r8, #4294967295
 8008766:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800876a:	e7d5      	b.n	8008718 <_strtod_l+0x8d8>
 800876c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800876e:	ea13 0f08 	tst.w	r3, r8
 8008772:	e7e0      	b.n	8008736 <_strtod_l+0x8f6>
 8008774:	f7ff fb42 	bl	8007dfc <sulp>
 8008778:	4602      	mov	r2, r0
 800877a:	460b      	mov	r3, r1
 800877c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008780:	f7f7 fcfc 	bl	800017c <__aeabi_dsub>
 8008784:	2200      	movs	r2, #0
 8008786:	2300      	movs	r3, #0
 8008788:	4680      	mov	r8, r0
 800878a:	4689      	mov	r9, r1
 800878c:	f7f8 f916 	bl	80009bc <__aeabi_dcmpeq>
 8008790:	2800      	cmp	r0, #0
 8008792:	d0c1      	beq.n	8008718 <_strtod_l+0x8d8>
 8008794:	e608      	b.n	80083a8 <_strtod_l+0x568>
 8008796:	4658      	mov	r0, fp
 8008798:	9904      	ldr	r1, [sp, #16]
 800879a:	f002 f827 	bl	800a7ec <__ratio>
 800879e:	2200      	movs	r2, #0
 80087a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80087a4:	4606      	mov	r6, r0
 80087a6:	460f      	mov	r7, r1
 80087a8:	f7f8 f91c 	bl	80009e4 <__aeabi_dcmple>
 80087ac:	2800      	cmp	r0, #0
 80087ae:	d070      	beq.n	8008892 <_strtod_l+0xa52>
 80087b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d042      	beq.n	800883c <_strtod_l+0x9fc>
 80087b6:	2600      	movs	r6, #0
 80087b8:	4f62      	ldr	r7, [pc, #392]	; (8008944 <_strtod_l+0xb04>)
 80087ba:	4d62      	ldr	r5, [pc, #392]	; (8008944 <_strtod_l+0xb04>)
 80087bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087be:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80087c2:	0d1b      	lsrs	r3, r3, #20
 80087c4:	051b      	lsls	r3, r3, #20
 80087c6:	930f      	str	r3, [sp, #60]	; 0x3c
 80087c8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80087ca:	4b5f      	ldr	r3, [pc, #380]	; (8008948 <_strtod_l+0xb08>)
 80087cc:	429a      	cmp	r2, r3
 80087ce:	f040 80c3 	bne.w	8008958 <_strtod_l+0xb18>
 80087d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087d4:	4640      	mov	r0, r8
 80087d6:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 80087da:	4649      	mov	r1, r9
 80087dc:	f001 ff30 	bl	800a640 <__ulp>
 80087e0:	4602      	mov	r2, r0
 80087e2:	460b      	mov	r3, r1
 80087e4:	4630      	mov	r0, r6
 80087e6:	4639      	mov	r1, r7
 80087e8:	f7f7 fe80 	bl	80004ec <__aeabi_dmul>
 80087ec:	4642      	mov	r2, r8
 80087ee:	464b      	mov	r3, r9
 80087f0:	f7f7 fcc6 	bl	8000180 <__adddf3>
 80087f4:	460b      	mov	r3, r1
 80087f6:	4951      	ldr	r1, [pc, #324]	; (800893c <_strtod_l+0xafc>)
 80087f8:	4a54      	ldr	r2, [pc, #336]	; (800894c <_strtod_l+0xb0c>)
 80087fa:	4019      	ands	r1, r3
 80087fc:	4291      	cmp	r1, r2
 80087fe:	4680      	mov	r8, r0
 8008800:	d95d      	bls.n	80088be <_strtod_l+0xa7e>
 8008802:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008804:	4b4e      	ldr	r3, [pc, #312]	; (8008940 <_strtod_l+0xb00>)
 8008806:	429a      	cmp	r2, r3
 8008808:	d103      	bne.n	8008812 <_strtod_l+0x9d2>
 800880a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800880c:	3301      	adds	r3, #1
 800880e:	f43f ad56 	beq.w	80082be <_strtod_l+0x47e>
 8008812:	f04f 38ff 	mov.w	r8, #4294967295
 8008816:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8008940 <_strtod_l+0xb00>
 800881a:	4650      	mov	r0, sl
 800881c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800881e:	f001 fbdf 	bl	8009fe0 <_Bfree>
 8008822:	4650      	mov	r0, sl
 8008824:	9906      	ldr	r1, [sp, #24]
 8008826:	f001 fbdb 	bl	8009fe0 <_Bfree>
 800882a:	4650      	mov	r0, sl
 800882c:	9904      	ldr	r1, [sp, #16]
 800882e:	f001 fbd7 	bl	8009fe0 <_Bfree>
 8008832:	4659      	mov	r1, fp
 8008834:	4650      	mov	r0, sl
 8008836:	f001 fbd3 	bl	8009fe0 <_Bfree>
 800883a:	e627      	b.n	800848c <_strtod_l+0x64c>
 800883c:	f1b8 0f00 	cmp.w	r8, #0
 8008840:	d119      	bne.n	8008876 <_strtod_l+0xa36>
 8008842:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008844:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008848:	b9e3      	cbnz	r3, 8008884 <_strtod_l+0xa44>
 800884a:	2200      	movs	r2, #0
 800884c:	4630      	mov	r0, r6
 800884e:	4639      	mov	r1, r7
 8008850:	4b3c      	ldr	r3, [pc, #240]	; (8008944 <_strtod_l+0xb04>)
 8008852:	f7f8 f8bd 	bl	80009d0 <__aeabi_dcmplt>
 8008856:	b9c8      	cbnz	r0, 800888c <_strtod_l+0xa4c>
 8008858:	2200      	movs	r2, #0
 800885a:	4630      	mov	r0, r6
 800885c:	4639      	mov	r1, r7
 800885e:	4b3c      	ldr	r3, [pc, #240]	; (8008950 <_strtod_l+0xb10>)
 8008860:	f7f7 fe44 	bl	80004ec <__aeabi_dmul>
 8008864:	4604      	mov	r4, r0
 8008866:	460d      	mov	r5, r1
 8008868:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800886c:	9416      	str	r4, [sp, #88]	; 0x58
 800886e:	9317      	str	r3, [sp, #92]	; 0x5c
 8008870:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 8008874:	e7a2      	b.n	80087bc <_strtod_l+0x97c>
 8008876:	f1b8 0f01 	cmp.w	r8, #1
 800887a:	d103      	bne.n	8008884 <_strtod_l+0xa44>
 800887c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800887e:	2b00      	cmp	r3, #0
 8008880:	f43f ad92 	beq.w	80083a8 <_strtod_l+0x568>
 8008884:	2600      	movs	r6, #0
 8008886:	2400      	movs	r4, #0
 8008888:	4f32      	ldr	r7, [pc, #200]	; (8008954 <_strtod_l+0xb14>)
 800888a:	e796      	b.n	80087ba <_strtod_l+0x97a>
 800888c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800888e:	4d30      	ldr	r5, [pc, #192]	; (8008950 <_strtod_l+0xb10>)
 8008890:	e7ea      	b.n	8008868 <_strtod_l+0xa28>
 8008892:	4b2f      	ldr	r3, [pc, #188]	; (8008950 <_strtod_l+0xb10>)
 8008894:	2200      	movs	r2, #0
 8008896:	4630      	mov	r0, r6
 8008898:	4639      	mov	r1, r7
 800889a:	f7f7 fe27 	bl	80004ec <__aeabi_dmul>
 800889e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80088a0:	4604      	mov	r4, r0
 80088a2:	460d      	mov	r5, r1
 80088a4:	b933      	cbnz	r3, 80088b4 <_strtod_l+0xa74>
 80088a6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80088aa:	9010      	str	r0, [sp, #64]	; 0x40
 80088ac:	9311      	str	r3, [sp, #68]	; 0x44
 80088ae:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80088b2:	e783      	b.n	80087bc <_strtod_l+0x97c>
 80088b4:	4602      	mov	r2, r0
 80088b6:	460b      	mov	r3, r1
 80088b8:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80088bc:	e7f7      	b.n	80088ae <_strtod_l+0xa6e>
 80088be:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80088c2:	9b05      	ldr	r3, [sp, #20]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d1a8      	bne.n	800881a <_strtod_l+0x9da>
 80088c8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80088cc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80088ce:	0d1b      	lsrs	r3, r3, #20
 80088d0:	051b      	lsls	r3, r3, #20
 80088d2:	429a      	cmp	r2, r3
 80088d4:	d1a1      	bne.n	800881a <_strtod_l+0x9da>
 80088d6:	4620      	mov	r0, r4
 80088d8:	4629      	mov	r1, r5
 80088da:	f7f8 fc23 	bl	8001124 <__aeabi_d2lz>
 80088de:	f7f7 fdd7 	bl	8000490 <__aeabi_l2d>
 80088e2:	4602      	mov	r2, r0
 80088e4:	460b      	mov	r3, r1
 80088e6:	4620      	mov	r0, r4
 80088e8:	4629      	mov	r1, r5
 80088ea:	f7f7 fc47 	bl	800017c <__aeabi_dsub>
 80088ee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80088f0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80088f4:	ea43 0308 	orr.w	r3, r3, r8
 80088f8:	4313      	orrs	r3, r2
 80088fa:	4604      	mov	r4, r0
 80088fc:	460d      	mov	r5, r1
 80088fe:	d066      	beq.n	80089ce <_strtod_l+0xb8e>
 8008900:	a309      	add	r3, pc, #36	; (adr r3, 8008928 <_strtod_l+0xae8>)
 8008902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008906:	f7f8 f863 	bl	80009d0 <__aeabi_dcmplt>
 800890a:	2800      	cmp	r0, #0
 800890c:	f47f ace2 	bne.w	80082d4 <_strtod_l+0x494>
 8008910:	a307      	add	r3, pc, #28	; (adr r3, 8008930 <_strtod_l+0xaf0>)
 8008912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008916:	4620      	mov	r0, r4
 8008918:	4629      	mov	r1, r5
 800891a:	f7f8 f877 	bl	8000a0c <__aeabi_dcmpgt>
 800891e:	2800      	cmp	r0, #0
 8008920:	f43f af7b 	beq.w	800881a <_strtod_l+0x9da>
 8008924:	e4d6      	b.n	80082d4 <_strtod_l+0x494>
 8008926:	bf00      	nop
 8008928:	94a03595 	.word	0x94a03595
 800892c:	3fdfffff 	.word	0x3fdfffff
 8008930:	35afe535 	.word	0x35afe535
 8008934:	3fe00000 	.word	0x3fe00000
 8008938:	000fffff 	.word	0x000fffff
 800893c:	7ff00000 	.word	0x7ff00000
 8008940:	7fefffff 	.word	0x7fefffff
 8008944:	3ff00000 	.word	0x3ff00000
 8008948:	7fe00000 	.word	0x7fe00000
 800894c:	7c9fffff 	.word	0x7c9fffff
 8008950:	3fe00000 	.word	0x3fe00000
 8008954:	bff00000 	.word	0xbff00000
 8008958:	9b05      	ldr	r3, [sp, #20]
 800895a:	b313      	cbz	r3, 80089a2 <_strtod_l+0xb62>
 800895c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800895e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008962:	d81e      	bhi.n	80089a2 <_strtod_l+0xb62>
 8008964:	a326      	add	r3, pc, #152	; (adr r3, 8008a00 <_strtod_l+0xbc0>)
 8008966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800896a:	4620      	mov	r0, r4
 800896c:	4629      	mov	r1, r5
 800896e:	f7f8 f839 	bl	80009e4 <__aeabi_dcmple>
 8008972:	b190      	cbz	r0, 800899a <_strtod_l+0xb5a>
 8008974:	4629      	mov	r1, r5
 8008976:	4620      	mov	r0, r4
 8008978:	f7f8 f890 	bl	8000a9c <__aeabi_d2uiz>
 800897c:	2801      	cmp	r0, #1
 800897e:	bf38      	it	cc
 8008980:	2001      	movcc	r0, #1
 8008982:	f7f7 fd39 	bl	80003f8 <__aeabi_ui2d>
 8008986:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008988:	4604      	mov	r4, r0
 800898a:	460d      	mov	r5, r1
 800898c:	b9d3      	cbnz	r3, 80089c4 <_strtod_l+0xb84>
 800898e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008992:	9012      	str	r0, [sp, #72]	; 0x48
 8008994:	9313      	str	r3, [sp, #76]	; 0x4c
 8008996:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800899a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800899c:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 80089a0:	1a9f      	subs	r7, r3, r2
 80089a2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80089a6:	f001 fe4b 	bl	800a640 <__ulp>
 80089aa:	4602      	mov	r2, r0
 80089ac:	460b      	mov	r3, r1
 80089ae:	4630      	mov	r0, r6
 80089b0:	4639      	mov	r1, r7
 80089b2:	f7f7 fd9b 	bl	80004ec <__aeabi_dmul>
 80089b6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80089ba:	f7f7 fbe1 	bl	8000180 <__adddf3>
 80089be:	4680      	mov	r8, r0
 80089c0:	4689      	mov	r9, r1
 80089c2:	e77e      	b.n	80088c2 <_strtod_l+0xa82>
 80089c4:	4602      	mov	r2, r0
 80089c6:	460b      	mov	r3, r1
 80089c8:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 80089cc:	e7e3      	b.n	8008996 <_strtod_l+0xb56>
 80089ce:	a30e      	add	r3, pc, #56	; (adr r3, 8008a08 <_strtod_l+0xbc8>)
 80089d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089d4:	f7f7 fffc 	bl	80009d0 <__aeabi_dcmplt>
 80089d8:	e7a1      	b.n	800891e <_strtod_l+0xade>
 80089da:	2300      	movs	r3, #0
 80089dc:	930a      	str	r3, [sp, #40]	; 0x28
 80089de:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80089e0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80089e2:	6013      	str	r3, [r2, #0]
 80089e4:	f7ff ba71 	b.w	8007eca <_strtod_l+0x8a>
 80089e8:	2a65      	cmp	r2, #101	; 0x65
 80089ea:	f43f ab63 	beq.w	80080b4 <_strtod_l+0x274>
 80089ee:	2a45      	cmp	r2, #69	; 0x45
 80089f0:	f43f ab60 	beq.w	80080b4 <_strtod_l+0x274>
 80089f4:	2301      	movs	r3, #1
 80089f6:	f7ff bb95 	b.w	8008124 <_strtod_l+0x2e4>
 80089fa:	bf00      	nop
 80089fc:	f3af 8000 	nop.w
 8008a00:	ffc00000 	.word	0xffc00000
 8008a04:	41dfffff 	.word	0x41dfffff
 8008a08:	94a03595 	.word	0x94a03595
 8008a0c:	3fcfffff 	.word	0x3fcfffff

08008a10 <_strtod_r>:
 8008a10:	4b01      	ldr	r3, [pc, #4]	; (8008a18 <_strtod_r+0x8>)
 8008a12:	f7ff ba15 	b.w	8007e40 <_strtod_l>
 8008a16:	bf00      	nop
 8008a18:	20000080 	.word	0x20000080

08008a1c <strtod>:
 8008a1c:	460a      	mov	r2, r1
 8008a1e:	4601      	mov	r1, r0
 8008a20:	4802      	ldr	r0, [pc, #8]	; (8008a2c <strtod+0x10>)
 8008a22:	4b03      	ldr	r3, [pc, #12]	; (8008a30 <strtod+0x14>)
 8008a24:	6800      	ldr	r0, [r0, #0]
 8008a26:	f7ff ba0b 	b.w	8007e40 <_strtod_l>
 8008a2a:	bf00      	nop
 8008a2c:	20000018 	.word	0x20000018
 8008a30:	20000080 	.word	0x20000080

08008a34 <_strtol_l.constprop.0>:
 8008a34:	2b01      	cmp	r3, #1
 8008a36:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a3a:	4680      	mov	r8, r0
 8008a3c:	d001      	beq.n	8008a42 <_strtol_l.constprop.0+0xe>
 8008a3e:	2b24      	cmp	r3, #36	; 0x24
 8008a40:	d906      	bls.n	8008a50 <_strtol_l.constprop.0+0x1c>
 8008a42:	f7fe fad7 	bl	8006ff4 <__errno>
 8008a46:	2316      	movs	r3, #22
 8008a48:	6003      	str	r3, [r0, #0]
 8008a4a:	2000      	movs	r0, #0
 8008a4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a50:	460d      	mov	r5, r1
 8008a52:	4f35      	ldr	r7, [pc, #212]	; (8008b28 <_strtol_l.constprop.0+0xf4>)
 8008a54:	4628      	mov	r0, r5
 8008a56:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008a5a:	5de6      	ldrb	r6, [r4, r7]
 8008a5c:	f016 0608 	ands.w	r6, r6, #8
 8008a60:	d1f8      	bne.n	8008a54 <_strtol_l.constprop.0+0x20>
 8008a62:	2c2d      	cmp	r4, #45	; 0x2d
 8008a64:	d12f      	bne.n	8008ac6 <_strtol_l.constprop.0+0x92>
 8008a66:	2601      	movs	r6, #1
 8008a68:	782c      	ldrb	r4, [r5, #0]
 8008a6a:	1c85      	adds	r5, r0, #2
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d057      	beq.n	8008b20 <_strtol_l.constprop.0+0xec>
 8008a70:	2b10      	cmp	r3, #16
 8008a72:	d109      	bne.n	8008a88 <_strtol_l.constprop.0+0x54>
 8008a74:	2c30      	cmp	r4, #48	; 0x30
 8008a76:	d107      	bne.n	8008a88 <_strtol_l.constprop.0+0x54>
 8008a78:	7828      	ldrb	r0, [r5, #0]
 8008a7a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8008a7e:	2858      	cmp	r0, #88	; 0x58
 8008a80:	d149      	bne.n	8008b16 <_strtol_l.constprop.0+0xe2>
 8008a82:	2310      	movs	r3, #16
 8008a84:	786c      	ldrb	r4, [r5, #1]
 8008a86:	3502      	adds	r5, #2
 8008a88:	2700      	movs	r7, #0
 8008a8a:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8008a8e:	f10e 3eff 	add.w	lr, lr, #4294967295
 8008a92:	fbbe f9f3 	udiv	r9, lr, r3
 8008a96:	4638      	mov	r0, r7
 8008a98:	fb03 ea19 	mls	sl, r3, r9, lr
 8008a9c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8008aa0:	f1bc 0f09 	cmp.w	ip, #9
 8008aa4:	d814      	bhi.n	8008ad0 <_strtol_l.constprop.0+0x9c>
 8008aa6:	4664      	mov	r4, ip
 8008aa8:	42a3      	cmp	r3, r4
 8008aaa:	dd22      	ble.n	8008af2 <_strtol_l.constprop.0+0xbe>
 8008aac:	2f00      	cmp	r7, #0
 8008aae:	db1d      	blt.n	8008aec <_strtol_l.constprop.0+0xb8>
 8008ab0:	4581      	cmp	r9, r0
 8008ab2:	d31b      	bcc.n	8008aec <_strtol_l.constprop.0+0xb8>
 8008ab4:	d101      	bne.n	8008aba <_strtol_l.constprop.0+0x86>
 8008ab6:	45a2      	cmp	sl, r4
 8008ab8:	db18      	blt.n	8008aec <_strtol_l.constprop.0+0xb8>
 8008aba:	2701      	movs	r7, #1
 8008abc:	fb00 4003 	mla	r0, r0, r3, r4
 8008ac0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008ac4:	e7ea      	b.n	8008a9c <_strtol_l.constprop.0+0x68>
 8008ac6:	2c2b      	cmp	r4, #43	; 0x2b
 8008ac8:	bf04      	itt	eq
 8008aca:	782c      	ldrbeq	r4, [r5, #0]
 8008acc:	1c85      	addeq	r5, r0, #2
 8008ace:	e7cd      	b.n	8008a6c <_strtol_l.constprop.0+0x38>
 8008ad0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8008ad4:	f1bc 0f19 	cmp.w	ip, #25
 8008ad8:	d801      	bhi.n	8008ade <_strtol_l.constprop.0+0xaa>
 8008ada:	3c37      	subs	r4, #55	; 0x37
 8008adc:	e7e4      	b.n	8008aa8 <_strtol_l.constprop.0+0x74>
 8008ade:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8008ae2:	f1bc 0f19 	cmp.w	ip, #25
 8008ae6:	d804      	bhi.n	8008af2 <_strtol_l.constprop.0+0xbe>
 8008ae8:	3c57      	subs	r4, #87	; 0x57
 8008aea:	e7dd      	b.n	8008aa8 <_strtol_l.constprop.0+0x74>
 8008aec:	f04f 37ff 	mov.w	r7, #4294967295
 8008af0:	e7e6      	b.n	8008ac0 <_strtol_l.constprop.0+0x8c>
 8008af2:	2f00      	cmp	r7, #0
 8008af4:	da07      	bge.n	8008b06 <_strtol_l.constprop.0+0xd2>
 8008af6:	2322      	movs	r3, #34	; 0x22
 8008af8:	4670      	mov	r0, lr
 8008afa:	f8c8 3000 	str.w	r3, [r8]
 8008afe:	2a00      	cmp	r2, #0
 8008b00:	d0a4      	beq.n	8008a4c <_strtol_l.constprop.0+0x18>
 8008b02:	1e69      	subs	r1, r5, #1
 8008b04:	e005      	b.n	8008b12 <_strtol_l.constprop.0+0xde>
 8008b06:	b106      	cbz	r6, 8008b0a <_strtol_l.constprop.0+0xd6>
 8008b08:	4240      	negs	r0, r0
 8008b0a:	2a00      	cmp	r2, #0
 8008b0c:	d09e      	beq.n	8008a4c <_strtol_l.constprop.0+0x18>
 8008b0e:	2f00      	cmp	r7, #0
 8008b10:	d1f7      	bne.n	8008b02 <_strtol_l.constprop.0+0xce>
 8008b12:	6011      	str	r1, [r2, #0]
 8008b14:	e79a      	b.n	8008a4c <_strtol_l.constprop.0+0x18>
 8008b16:	2430      	movs	r4, #48	; 0x30
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d1b5      	bne.n	8008a88 <_strtol_l.constprop.0+0x54>
 8008b1c:	2308      	movs	r3, #8
 8008b1e:	e7b3      	b.n	8008a88 <_strtol_l.constprop.0+0x54>
 8008b20:	2c30      	cmp	r4, #48	; 0x30
 8008b22:	d0a9      	beq.n	8008a78 <_strtol_l.constprop.0+0x44>
 8008b24:	230a      	movs	r3, #10
 8008b26:	e7af      	b.n	8008a88 <_strtol_l.constprop.0+0x54>
 8008b28:	0800c321 	.word	0x0800c321

08008b2c <_strtol_r>:
 8008b2c:	f7ff bf82 	b.w	8008a34 <_strtol_l.constprop.0>

08008b30 <strtol>:
 8008b30:	4613      	mov	r3, r2
 8008b32:	460a      	mov	r2, r1
 8008b34:	4601      	mov	r1, r0
 8008b36:	4802      	ldr	r0, [pc, #8]	; (8008b40 <strtol+0x10>)
 8008b38:	6800      	ldr	r0, [r0, #0]
 8008b3a:	f7ff bf7b 	b.w	8008a34 <_strtol_l.constprop.0>
 8008b3e:	bf00      	nop
 8008b40:	20000018 	.word	0x20000018

08008b44 <quorem>:
 8008b44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b48:	6903      	ldr	r3, [r0, #16]
 8008b4a:	690c      	ldr	r4, [r1, #16]
 8008b4c:	4607      	mov	r7, r0
 8008b4e:	42a3      	cmp	r3, r4
 8008b50:	f2c0 8082 	blt.w	8008c58 <quorem+0x114>
 8008b54:	3c01      	subs	r4, #1
 8008b56:	f100 0514 	add.w	r5, r0, #20
 8008b5a:	f101 0814 	add.w	r8, r1, #20
 8008b5e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008b62:	9301      	str	r3, [sp, #4]
 8008b64:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008b68:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008b6c:	3301      	adds	r3, #1
 8008b6e:	429a      	cmp	r2, r3
 8008b70:	fbb2 f6f3 	udiv	r6, r2, r3
 8008b74:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008b78:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008b7c:	d331      	bcc.n	8008be2 <quorem+0x9e>
 8008b7e:	f04f 0e00 	mov.w	lr, #0
 8008b82:	4640      	mov	r0, r8
 8008b84:	46ac      	mov	ip, r5
 8008b86:	46f2      	mov	sl, lr
 8008b88:	f850 2b04 	ldr.w	r2, [r0], #4
 8008b8c:	b293      	uxth	r3, r2
 8008b8e:	fb06 e303 	mla	r3, r6, r3, lr
 8008b92:	0c12      	lsrs	r2, r2, #16
 8008b94:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008b98:	b29b      	uxth	r3, r3
 8008b9a:	fb06 e202 	mla	r2, r6, r2, lr
 8008b9e:	ebaa 0303 	sub.w	r3, sl, r3
 8008ba2:	f8dc a000 	ldr.w	sl, [ip]
 8008ba6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008baa:	fa1f fa8a 	uxth.w	sl, sl
 8008bae:	4453      	add	r3, sl
 8008bb0:	f8dc a000 	ldr.w	sl, [ip]
 8008bb4:	b292      	uxth	r2, r2
 8008bb6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008bba:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008bbe:	b29b      	uxth	r3, r3
 8008bc0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008bc4:	4581      	cmp	r9, r0
 8008bc6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008bca:	f84c 3b04 	str.w	r3, [ip], #4
 8008bce:	d2db      	bcs.n	8008b88 <quorem+0x44>
 8008bd0:	f855 300b 	ldr.w	r3, [r5, fp]
 8008bd4:	b92b      	cbnz	r3, 8008be2 <quorem+0x9e>
 8008bd6:	9b01      	ldr	r3, [sp, #4]
 8008bd8:	3b04      	subs	r3, #4
 8008bda:	429d      	cmp	r5, r3
 8008bdc:	461a      	mov	r2, r3
 8008bde:	d32f      	bcc.n	8008c40 <quorem+0xfc>
 8008be0:	613c      	str	r4, [r7, #16]
 8008be2:	4638      	mov	r0, r7
 8008be4:	f001 fc84 	bl	800a4f0 <__mcmp>
 8008be8:	2800      	cmp	r0, #0
 8008bea:	db25      	blt.n	8008c38 <quorem+0xf4>
 8008bec:	4628      	mov	r0, r5
 8008bee:	f04f 0c00 	mov.w	ip, #0
 8008bf2:	3601      	adds	r6, #1
 8008bf4:	f858 1b04 	ldr.w	r1, [r8], #4
 8008bf8:	f8d0 e000 	ldr.w	lr, [r0]
 8008bfc:	b28b      	uxth	r3, r1
 8008bfe:	ebac 0303 	sub.w	r3, ip, r3
 8008c02:	fa1f f28e 	uxth.w	r2, lr
 8008c06:	4413      	add	r3, r2
 8008c08:	0c0a      	lsrs	r2, r1, #16
 8008c0a:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008c0e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008c12:	b29b      	uxth	r3, r3
 8008c14:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008c18:	45c1      	cmp	r9, r8
 8008c1a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008c1e:	f840 3b04 	str.w	r3, [r0], #4
 8008c22:	d2e7      	bcs.n	8008bf4 <quorem+0xb0>
 8008c24:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008c28:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008c2c:	b922      	cbnz	r2, 8008c38 <quorem+0xf4>
 8008c2e:	3b04      	subs	r3, #4
 8008c30:	429d      	cmp	r5, r3
 8008c32:	461a      	mov	r2, r3
 8008c34:	d30a      	bcc.n	8008c4c <quorem+0x108>
 8008c36:	613c      	str	r4, [r7, #16]
 8008c38:	4630      	mov	r0, r6
 8008c3a:	b003      	add	sp, #12
 8008c3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c40:	6812      	ldr	r2, [r2, #0]
 8008c42:	3b04      	subs	r3, #4
 8008c44:	2a00      	cmp	r2, #0
 8008c46:	d1cb      	bne.n	8008be0 <quorem+0x9c>
 8008c48:	3c01      	subs	r4, #1
 8008c4a:	e7c6      	b.n	8008bda <quorem+0x96>
 8008c4c:	6812      	ldr	r2, [r2, #0]
 8008c4e:	3b04      	subs	r3, #4
 8008c50:	2a00      	cmp	r2, #0
 8008c52:	d1f0      	bne.n	8008c36 <quorem+0xf2>
 8008c54:	3c01      	subs	r4, #1
 8008c56:	e7eb      	b.n	8008c30 <quorem+0xec>
 8008c58:	2000      	movs	r0, #0
 8008c5a:	e7ee      	b.n	8008c3a <quorem+0xf6>
 8008c5c:	0000      	movs	r0, r0
	...

08008c60 <_dtoa_r>:
 8008c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c64:	4616      	mov	r6, r2
 8008c66:	461f      	mov	r7, r3
 8008c68:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008c6a:	b099      	sub	sp, #100	; 0x64
 8008c6c:	4605      	mov	r5, r0
 8008c6e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008c72:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8008c76:	b974      	cbnz	r4, 8008c96 <_dtoa_r+0x36>
 8008c78:	2010      	movs	r0, #16
 8008c7a:	f001 f949 	bl	8009f10 <malloc>
 8008c7e:	4602      	mov	r2, r0
 8008c80:	6268      	str	r0, [r5, #36]	; 0x24
 8008c82:	b920      	cbnz	r0, 8008c8e <_dtoa_r+0x2e>
 8008c84:	21ea      	movs	r1, #234	; 0xea
 8008c86:	4ba8      	ldr	r3, [pc, #672]	; (8008f28 <_dtoa_r+0x2c8>)
 8008c88:	48a8      	ldr	r0, [pc, #672]	; (8008f2c <_dtoa_r+0x2cc>)
 8008c8a:	f002 f8a5 	bl	800add8 <__assert_func>
 8008c8e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008c92:	6004      	str	r4, [r0, #0]
 8008c94:	60c4      	str	r4, [r0, #12]
 8008c96:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008c98:	6819      	ldr	r1, [r3, #0]
 8008c9a:	b151      	cbz	r1, 8008cb2 <_dtoa_r+0x52>
 8008c9c:	685a      	ldr	r2, [r3, #4]
 8008c9e:	2301      	movs	r3, #1
 8008ca0:	4093      	lsls	r3, r2
 8008ca2:	604a      	str	r2, [r1, #4]
 8008ca4:	608b      	str	r3, [r1, #8]
 8008ca6:	4628      	mov	r0, r5
 8008ca8:	f001 f99a 	bl	8009fe0 <_Bfree>
 8008cac:	2200      	movs	r2, #0
 8008cae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008cb0:	601a      	str	r2, [r3, #0]
 8008cb2:	1e3b      	subs	r3, r7, #0
 8008cb4:	bfaf      	iteee	ge
 8008cb6:	2300      	movge	r3, #0
 8008cb8:	2201      	movlt	r2, #1
 8008cba:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008cbe:	9305      	strlt	r3, [sp, #20]
 8008cc0:	bfa8      	it	ge
 8008cc2:	f8c8 3000 	strge.w	r3, [r8]
 8008cc6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8008cca:	4b99      	ldr	r3, [pc, #612]	; (8008f30 <_dtoa_r+0x2d0>)
 8008ccc:	bfb8      	it	lt
 8008cce:	f8c8 2000 	strlt.w	r2, [r8]
 8008cd2:	ea33 0309 	bics.w	r3, r3, r9
 8008cd6:	d119      	bne.n	8008d0c <_dtoa_r+0xac>
 8008cd8:	f242 730f 	movw	r3, #9999	; 0x270f
 8008cdc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008cde:	6013      	str	r3, [r2, #0]
 8008ce0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008ce4:	4333      	orrs	r3, r6
 8008ce6:	f000 857f 	beq.w	80097e8 <_dtoa_r+0xb88>
 8008cea:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008cec:	b953      	cbnz	r3, 8008d04 <_dtoa_r+0xa4>
 8008cee:	4b91      	ldr	r3, [pc, #580]	; (8008f34 <_dtoa_r+0x2d4>)
 8008cf0:	e022      	b.n	8008d38 <_dtoa_r+0xd8>
 8008cf2:	4b91      	ldr	r3, [pc, #580]	; (8008f38 <_dtoa_r+0x2d8>)
 8008cf4:	9303      	str	r3, [sp, #12]
 8008cf6:	3308      	adds	r3, #8
 8008cf8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008cfa:	6013      	str	r3, [r2, #0]
 8008cfc:	9803      	ldr	r0, [sp, #12]
 8008cfe:	b019      	add	sp, #100	; 0x64
 8008d00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d04:	4b8b      	ldr	r3, [pc, #556]	; (8008f34 <_dtoa_r+0x2d4>)
 8008d06:	9303      	str	r3, [sp, #12]
 8008d08:	3303      	adds	r3, #3
 8008d0a:	e7f5      	b.n	8008cf8 <_dtoa_r+0x98>
 8008d0c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008d10:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8008d14:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008d18:	2200      	movs	r2, #0
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	f7f7 fe4e 	bl	80009bc <__aeabi_dcmpeq>
 8008d20:	4680      	mov	r8, r0
 8008d22:	b158      	cbz	r0, 8008d3c <_dtoa_r+0xdc>
 8008d24:	2301      	movs	r3, #1
 8008d26:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008d28:	6013      	str	r3, [r2, #0]
 8008d2a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	f000 8558 	beq.w	80097e2 <_dtoa_r+0xb82>
 8008d32:	4882      	ldr	r0, [pc, #520]	; (8008f3c <_dtoa_r+0x2dc>)
 8008d34:	6018      	str	r0, [r3, #0]
 8008d36:	1e43      	subs	r3, r0, #1
 8008d38:	9303      	str	r3, [sp, #12]
 8008d3a:	e7df      	b.n	8008cfc <_dtoa_r+0x9c>
 8008d3c:	ab16      	add	r3, sp, #88	; 0x58
 8008d3e:	9301      	str	r3, [sp, #4]
 8008d40:	ab17      	add	r3, sp, #92	; 0x5c
 8008d42:	9300      	str	r3, [sp, #0]
 8008d44:	4628      	mov	r0, r5
 8008d46:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008d4a:	f001 fcf3 	bl	800a734 <__d2b>
 8008d4e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8008d52:	4683      	mov	fp, r0
 8008d54:	2c00      	cmp	r4, #0
 8008d56:	d07f      	beq.n	8008e58 <_dtoa_r+0x1f8>
 8008d58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008d5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008d5e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8008d62:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008d66:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8008d6a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8008d6e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8008d72:	2200      	movs	r2, #0
 8008d74:	4b72      	ldr	r3, [pc, #456]	; (8008f40 <_dtoa_r+0x2e0>)
 8008d76:	f7f7 fa01 	bl	800017c <__aeabi_dsub>
 8008d7a:	a365      	add	r3, pc, #404	; (adr r3, 8008f10 <_dtoa_r+0x2b0>)
 8008d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d80:	f7f7 fbb4 	bl	80004ec <__aeabi_dmul>
 8008d84:	a364      	add	r3, pc, #400	; (adr r3, 8008f18 <_dtoa_r+0x2b8>)
 8008d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d8a:	f7f7 f9f9 	bl	8000180 <__adddf3>
 8008d8e:	4606      	mov	r6, r0
 8008d90:	4620      	mov	r0, r4
 8008d92:	460f      	mov	r7, r1
 8008d94:	f7f7 fb40 	bl	8000418 <__aeabi_i2d>
 8008d98:	a361      	add	r3, pc, #388	; (adr r3, 8008f20 <_dtoa_r+0x2c0>)
 8008d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d9e:	f7f7 fba5 	bl	80004ec <__aeabi_dmul>
 8008da2:	4602      	mov	r2, r0
 8008da4:	460b      	mov	r3, r1
 8008da6:	4630      	mov	r0, r6
 8008da8:	4639      	mov	r1, r7
 8008daa:	f7f7 f9e9 	bl	8000180 <__adddf3>
 8008dae:	4606      	mov	r6, r0
 8008db0:	460f      	mov	r7, r1
 8008db2:	f7f7 fe4b 	bl	8000a4c <__aeabi_d2iz>
 8008db6:	2200      	movs	r2, #0
 8008db8:	4682      	mov	sl, r0
 8008dba:	2300      	movs	r3, #0
 8008dbc:	4630      	mov	r0, r6
 8008dbe:	4639      	mov	r1, r7
 8008dc0:	f7f7 fe06 	bl	80009d0 <__aeabi_dcmplt>
 8008dc4:	b148      	cbz	r0, 8008dda <_dtoa_r+0x17a>
 8008dc6:	4650      	mov	r0, sl
 8008dc8:	f7f7 fb26 	bl	8000418 <__aeabi_i2d>
 8008dcc:	4632      	mov	r2, r6
 8008dce:	463b      	mov	r3, r7
 8008dd0:	f7f7 fdf4 	bl	80009bc <__aeabi_dcmpeq>
 8008dd4:	b908      	cbnz	r0, 8008dda <_dtoa_r+0x17a>
 8008dd6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008dda:	f1ba 0f16 	cmp.w	sl, #22
 8008dde:	d858      	bhi.n	8008e92 <_dtoa_r+0x232>
 8008de0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008de4:	4b57      	ldr	r3, [pc, #348]	; (8008f44 <_dtoa_r+0x2e4>)
 8008de6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dee:	f7f7 fdef 	bl	80009d0 <__aeabi_dcmplt>
 8008df2:	2800      	cmp	r0, #0
 8008df4:	d04f      	beq.n	8008e96 <_dtoa_r+0x236>
 8008df6:	2300      	movs	r3, #0
 8008df8:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008dfc:	930f      	str	r3, [sp, #60]	; 0x3c
 8008dfe:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008e00:	1b1c      	subs	r4, r3, r4
 8008e02:	1e63      	subs	r3, r4, #1
 8008e04:	9309      	str	r3, [sp, #36]	; 0x24
 8008e06:	bf49      	itett	mi
 8008e08:	f1c4 0301 	rsbmi	r3, r4, #1
 8008e0c:	2300      	movpl	r3, #0
 8008e0e:	9306      	strmi	r3, [sp, #24]
 8008e10:	2300      	movmi	r3, #0
 8008e12:	bf54      	ite	pl
 8008e14:	9306      	strpl	r3, [sp, #24]
 8008e16:	9309      	strmi	r3, [sp, #36]	; 0x24
 8008e18:	f1ba 0f00 	cmp.w	sl, #0
 8008e1c:	db3d      	blt.n	8008e9a <_dtoa_r+0x23a>
 8008e1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e20:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8008e24:	4453      	add	r3, sl
 8008e26:	9309      	str	r3, [sp, #36]	; 0x24
 8008e28:	2300      	movs	r3, #0
 8008e2a:	930a      	str	r3, [sp, #40]	; 0x28
 8008e2c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008e2e:	2b09      	cmp	r3, #9
 8008e30:	f200 808c 	bhi.w	8008f4c <_dtoa_r+0x2ec>
 8008e34:	2b05      	cmp	r3, #5
 8008e36:	bfc4      	itt	gt
 8008e38:	3b04      	subgt	r3, #4
 8008e3a:	9322      	strgt	r3, [sp, #136]	; 0x88
 8008e3c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008e3e:	bfc8      	it	gt
 8008e40:	2400      	movgt	r4, #0
 8008e42:	f1a3 0302 	sub.w	r3, r3, #2
 8008e46:	bfd8      	it	le
 8008e48:	2401      	movle	r4, #1
 8008e4a:	2b03      	cmp	r3, #3
 8008e4c:	f200 808a 	bhi.w	8008f64 <_dtoa_r+0x304>
 8008e50:	e8df f003 	tbb	[pc, r3]
 8008e54:	5b4d4f2d 	.word	0x5b4d4f2d
 8008e58:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8008e5c:	441c      	add	r4, r3
 8008e5e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8008e62:	2b20      	cmp	r3, #32
 8008e64:	bfc3      	ittte	gt
 8008e66:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008e6a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8008e6e:	fa09 f303 	lslgt.w	r3, r9, r3
 8008e72:	f1c3 0320 	rsble	r3, r3, #32
 8008e76:	bfc6      	itte	gt
 8008e78:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008e7c:	4318      	orrgt	r0, r3
 8008e7e:	fa06 f003 	lslle.w	r0, r6, r3
 8008e82:	f7f7 fab9 	bl	80003f8 <__aeabi_ui2d>
 8008e86:	2301      	movs	r3, #1
 8008e88:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8008e8c:	3c01      	subs	r4, #1
 8008e8e:	9313      	str	r3, [sp, #76]	; 0x4c
 8008e90:	e76f      	b.n	8008d72 <_dtoa_r+0x112>
 8008e92:	2301      	movs	r3, #1
 8008e94:	e7b2      	b.n	8008dfc <_dtoa_r+0x19c>
 8008e96:	900f      	str	r0, [sp, #60]	; 0x3c
 8008e98:	e7b1      	b.n	8008dfe <_dtoa_r+0x19e>
 8008e9a:	9b06      	ldr	r3, [sp, #24]
 8008e9c:	eba3 030a 	sub.w	r3, r3, sl
 8008ea0:	9306      	str	r3, [sp, #24]
 8008ea2:	f1ca 0300 	rsb	r3, sl, #0
 8008ea6:	930a      	str	r3, [sp, #40]	; 0x28
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	930e      	str	r3, [sp, #56]	; 0x38
 8008eac:	e7be      	b.n	8008e2c <_dtoa_r+0x1cc>
 8008eae:	2300      	movs	r3, #0
 8008eb0:	930b      	str	r3, [sp, #44]	; 0x2c
 8008eb2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	dc58      	bgt.n	8008f6a <_dtoa_r+0x30a>
 8008eb8:	f04f 0901 	mov.w	r9, #1
 8008ebc:	464b      	mov	r3, r9
 8008ebe:	f8cd 9020 	str.w	r9, [sp, #32]
 8008ec2:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8008eca:	6042      	str	r2, [r0, #4]
 8008ecc:	2204      	movs	r2, #4
 8008ece:	f102 0614 	add.w	r6, r2, #20
 8008ed2:	429e      	cmp	r6, r3
 8008ed4:	6841      	ldr	r1, [r0, #4]
 8008ed6:	d94e      	bls.n	8008f76 <_dtoa_r+0x316>
 8008ed8:	4628      	mov	r0, r5
 8008eda:	f001 f841 	bl	8009f60 <_Balloc>
 8008ede:	9003      	str	r0, [sp, #12]
 8008ee0:	2800      	cmp	r0, #0
 8008ee2:	d14c      	bne.n	8008f7e <_dtoa_r+0x31e>
 8008ee4:	4602      	mov	r2, r0
 8008ee6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008eea:	4b17      	ldr	r3, [pc, #92]	; (8008f48 <_dtoa_r+0x2e8>)
 8008eec:	e6cc      	b.n	8008c88 <_dtoa_r+0x28>
 8008eee:	2301      	movs	r3, #1
 8008ef0:	e7de      	b.n	8008eb0 <_dtoa_r+0x250>
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	930b      	str	r3, [sp, #44]	; 0x2c
 8008ef6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008ef8:	eb0a 0903 	add.w	r9, sl, r3
 8008efc:	f109 0301 	add.w	r3, r9, #1
 8008f00:	2b01      	cmp	r3, #1
 8008f02:	9308      	str	r3, [sp, #32]
 8008f04:	bfb8      	it	lt
 8008f06:	2301      	movlt	r3, #1
 8008f08:	e7dd      	b.n	8008ec6 <_dtoa_r+0x266>
 8008f0a:	2301      	movs	r3, #1
 8008f0c:	e7f2      	b.n	8008ef4 <_dtoa_r+0x294>
 8008f0e:	bf00      	nop
 8008f10:	636f4361 	.word	0x636f4361
 8008f14:	3fd287a7 	.word	0x3fd287a7
 8008f18:	8b60c8b3 	.word	0x8b60c8b3
 8008f1c:	3fc68a28 	.word	0x3fc68a28
 8008f20:	509f79fb 	.word	0x509f79fb
 8008f24:	3fd34413 	.word	0x3fd34413
 8008f28:	0800c42e 	.word	0x0800c42e
 8008f2c:	0800c445 	.word	0x0800c445
 8008f30:	7ff00000 	.word	0x7ff00000
 8008f34:	0800c42a 	.word	0x0800c42a
 8008f38:	0800c421 	.word	0x0800c421
 8008f3c:	0800c2a5 	.word	0x0800c2a5
 8008f40:	3ff80000 	.word	0x3ff80000
 8008f44:	0800c5b0 	.word	0x0800c5b0
 8008f48:	0800c4a0 	.word	0x0800c4a0
 8008f4c:	2401      	movs	r4, #1
 8008f4e:	2300      	movs	r3, #0
 8008f50:	940b      	str	r4, [sp, #44]	; 0x2c
 8008f52:	9322      	str	r3, [sp, #136]	; 0x88
 8008f54:	f04f 39ff 	mov.w	r9, #4294967295
 8008f58:	2200      	movs	r2, #0
 8008f5a:	2312      	movs	r3, #18
 8008f5c:	f8cd 9020 	str.w	r9, [sp, #32]
 8008f60:	9223      	str	r2, [sp, #140]	; 0x8c
 8008f62:	e7b0      	b.n	8008ec6 <_dtoa_r+0x266>
 8008f64:	2301      	movs	r3, #1
 8008f66:	930b      	str	r3, [sp, #44]	; 0x2c
 8008f68:	e7f4      	b.n	8008f54 <_dtoa_r+0x2f4>
 8008f6a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8008f6e:	464b      	mov	r3, r9
 8008f70:	f8cd 9020 	str.w	r9, [sp, #32]
 8008f74:	e7a7      	b.n	8008ec6 <_dtoa_r+0x266>
 8008f76:	3101      	adds	r1, #1
 8008f78:	6041      	str	r1, [r0, #4]
 8008f7a:	0052      	lsls	r2, r2, #1
 8008f7c:	e7a7      	b.n	8008ece <_dtoa_r+0x26e>
 8008f7e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008f80:	9a03      	ldr	r2, [sp, #12]
 8008f82:	601a      	str	r2, [r3, #0]
 8008f84:	9b08      	ldr	r3, [sp, #32]
 8008f86:	2b0e      	cmp	r3, #14
 8008f88:	f200 80a8 	bhi.w	80090dc <_dtoa_r+0x47c>
 8008f8c:	2c00      	cmp	r4, #0
 8008f8e:	f000 80a5 	beq.w	80090dc <_dtoa_r+0x47c>
 8008f92:	f1ba 0f00 	cmp.w	sl, #0
 8008f96:	dd34      	ble.n	8009002 <_dtoa_r+0x3a2>
 8008f98:	4a9a      	ldr	r2, [pc, #616]	; (8009204 <_dtoa_r+0x5a4>)
 8008f9a:	f00a 030f 	and.w	r3, sl, #15
 8008f9e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008fa2:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008fa6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008faa:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008fae:	ea4f 142a 	mov.w	r4, sl, asr #4
 8008fb2:	d016      	beq.n	8008fe2 <_dtoa_r+0x382>
 8008fb4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008fb8:	4b93      	ldr	r3, [pc, #588]	; (8009208 <_dtoa_r+0x5a8>)
 8008fba:	2703      	movs	r7, #3
 8008fbc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008fc0:	f7f7 fbbe 	bl	8000740 <__aeabi_ddiv>
 8008fc4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008fc8:	f004 040f 	and.w	r4, r4, #15
 8008fcc:	4e8e      	ldr	r6, [pc, #568]	; (8009208 <_dtoa_r+0x5a8>)
 8008fce:	b954      	cbnz	r4, 8008fe6 <_dtoa_r+0x386>
 8008fd0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008fd4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008fd8:	f7f7 fbb2 	bl	8000740 <__aeabi_ddiv>
 8008fdc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008fe0:	e029      	b.n	8009036 <_dtoa_r+0x3d6>
 8008fe2:	2702      	movs	r7, #2
 8008fe4:	e7f2      	b.n	8008fcc <_dtoa_r+0x36c>
 8008fe6:	07e1      	lsls	r1, r4, #31
 8008fe8:	d508      	bpl.n	8008ffc <_dtoa_r+0x39c>
 8008fea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008fee:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008ff2:	f7f7 fa7b 	bl	80004ec <__aeabi_dmul>
 8008ff6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008ffa:	3701      	adds	r7, #1
 8008ffc:	1064      	asrs	r4, r4, #1
 8008ffe:	3608      	adds	r6, #8
 8009000:	e7e5      	b.n	8008fce <_dtoa_r+0x36e>
 8009002:	f000 80a5 	beq.w	8009150 <_dtoa_r+0x4f0>
 8009006:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800900a:	f1ca 0400 	rsb	r4, sl, #0
 800900e:	4b7d      	ldr	r3, [pc, #500]	; (8009204 <_dtoa_r+0x5a4>)
 8009010:	f004 020f 	and.w	r2, r4, #15
 8009014:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800901c:	f7f7 fa66 	bl	80004ec <__aeabi_dmul>
 8009020:	2702      	movs	r7, #2
 8009022:	2300      	movs	r3, #0
 8009024:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009028:	4e77      	ldr	r6, [pc, #476]	; (8009208 <_dtoa_r+0x5a8>)
 800902a:	1124      	asrs	r4, r4, #4
 800902c:	2c00      	cmp	r4, #0
 800902e:	f040 8084 	bne.w	800913a <_dtoa_r+0x4da>
 8009032:	2b00      	cmp	r3, #0
 8009034:	d1d2      	bne.n	8008fdc <_dtoa_r+0x37c>
 8009036:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009038:	2b00      	cmp	r3, #0
 800903a:	f000 808b 	beq.w	8009154 <_dtoa_r+0x4f4>
 800903e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8009042:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8009046:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800904a:	2200      	movs	r2, #0
 800904c:	4b6f      	ldr	r3, [pc, #444]	; (800920c <_dtoa_r+0x5ac>)
 800904e:	f7f7 fcbf 	bl	80009d0 <__aeabi_dcmplt>
 8009052:	2800      	cmp	r0, #0
 8009054:	d07e      	beq.n	8009154 <_dtoa_r+0x4f4>
 8009056:	9b08      	ldr	r3, [sp, #32]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d07b      	beq.n	8009154 <_dtoa_r+0x4f4>
 800905c:	f1b9 0f00 	cmp.w	r9, #0
 8009060:	dd38      	ble.n	80090d4 <_dtoa_r+0x474>
 8009062:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009066:	2200      	movs	r2, #0
 8009068:	4b69      	ldr	r3, [pc, #420]	; (8009210 <_dtoa_r+0x5b0>)
 800906a:	f7f7 fa3f 	bl	80004ec <__aeabi_dmul>
 800906e:	464c      	mov	r4, r9
 8009070:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009074:	f10a 38ff 	add.w	r8, sl, #4294967295
 8009078:	3701      	adds	r7, #1
 800907a:	4638      	mov	r0, r7
 800907c:	f7f7 f9cc 	bl	8000418 <__aeabi_i2d>
 8009080:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009084:	f7f7 fa32 	bl	80004ec <__aeabi_dmul>
 8009088:	2200      	movs	r2, #0
 800908a:	4b62      	ldr	r3, [pc, #392]	; (8009214 <_dtoa_r+0x5b4>)
 800908c:	f7f7 f878 	bl	8000180 <__adddf3>
 8009090:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8009094:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009098:	9611      	str	r6, [sp, #68]	; 0x44
 800909a:	2c00      	cmp	r4, #0
 800909c:	d15d      	bne.n	800915a <_dtoa_r+0x4fa>
 800909e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80090a2:	2200      	movs	r2, #0
 80090a4:	4b5c      	ldr	r3, [pc, #368]	; (8009218 <_dtoa_r+0x5b8>)
 80090a6:	f7f7 f869 	bl	800017c <__aeabi_dsub>
 80090aa:	4602      	mov	r2, r0
 80090ac:	460b      	mov	r3, r1
 80090ae:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80090b2:	4633      	mov	r3, r6
 80090b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80090b6:	f7f7 fca9 	bl	8000a0c <__aeabi_dcmpgt>
 80090ba:	2800      	cmp	r0, #0
 80090bc:	f040 829c 	bne.w	80095f8 <_dtoa_r+0x998>
 80090c0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80090c4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80090c6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80090ca:	f7f7 fc81 	bl	80009d0 <__aeabi_dcmplt>
 80090ce:	2800      	cmp	r0, #0
 80090d0:	f040 8290 	bne.w	80095f4 <_dtoa_r+0x994>
 80090d4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80090d8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80090dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80090de:	2b00      	cmp	r3, #0
 80090e0:	f2c0 8152 	blt.w	8009388 <_dtoa_r+0x728>
 80090e4:	f1ba 0f0e 	cmp.w	sl, #14
 80090e8:	f300 814e 	bgt.w	8009388 <_dtoa_r+0x728>
 80090ec:	4b45      	ldr	r3, [pc, #276]	; (8009204 <_dtoa_r+0x5a4>)
 80090ee:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80090f2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80090f6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80090fa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	f280 80db 	bge.w	80092b8 <_dtoa_r+0x658>
 8009102:	9b08      	ldr	r3, [sp, #32]
 8009104:	2b00      	cmp	r3, #0
 8009106:	f300 80d7 	bgt.w	80092b8 <_dtoa_r+0x658>
 800910a:	f040 8272 	bne.w	80095f2 <_dtoa_r+0x992>
 800910e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009112:	2200      	movs	r2, #0
 8009114:	4b40      	ldr	r3, [pc, #256]	; (8009218 <_dtoa_r+0x5b8>)
 8009116:	f7f7 f9e9 	bl	80004ec <__aeabi_dmul>
 800911a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800911e:	f7f7 fc6b 	bl	80009f8 <__aeabi_dcmpge>
 8009122:	9c08      	ldr	r4, [sp, #32]
 8009124:	4626      	mov	r6, r4
 8009126:	2800      	cmp	r0, #0
 8009128:	f040 8248 	bne.w	80095bc <_dtoa_r+0x95c>
 800912c:	2331      	movs	r3, #49	; 0x31
 800912e:	9f03      	ldr	r7, [sp, #12]
 8009130:	f10a 0a01 	add.w	sl, sl, #1
 8009134:	f807 3b01 	strb.w	r3, [r7], #1
 8009138:	e244      	b.n	80095c4 <_dtoa_r+0x964>
 800913a:	07e2      	lsls	r2, r4, #31
 800913c:	d505      	bpl.n	800914a <_dtoa_r+0x4ea>
 800913e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009142:	f7f7 f9d3 	bl	80004ec <__aeabi_dmul>
 8009146:	2301      	movs	r3, #1
 8009148:	3701      	adds	r7, #1
 800914a:	1064      	asrs	r4, r4, #1
 800914c:	3608      	adds	r6, #8
 800914e:	e76d      	b.n	800902c <_dtoa_r+0x3cc>
 8009150:	2702      	movs	r7, #2
 8009152:	e770      	b.n	8009036 <_dtoa_r+0x3d6>
 8009154:	46d0      	mov	r8, sl
 8009156:	9c08      	ldr	r4, [sp, #32]
 8009158:	e78f      	b.n	800907a <_dtoa_r+0x41a>
 800915a:	9903      	ldr	r1, [sp, #12]
 800915c:	4b29      	ldr	r3, [pc, #164]	; (8009204 <_dtoa_r+0x5a4>)
 800915e:	4421      	add	r1, r4
 8009160:	9112      	str	r1, [sp, #72]	; 0x48
 8009162:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009164:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009168:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800916c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009170:	2900      	cmp	r1, #0
 8009172:	d055      	beq.n	8009220 <_dtoa_r+0x5c0>
 8009174:	2000      	movs	r0, #0
 8009176:	4929      	ldr	r1, [pc, #164]	; (800921c <_dtoa_r+0x5bc>)
 8009178:	f7f7 fae2 	bl	8000740 <__aeabi_ddiv>
 800917c:	463b      	mov	r3, r7
 800917e:	4632      	mov	r2, r6
 8009180:	f7f6 fffc 	bl	800017c <__aeabi_dsub>
 8009184:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009188:	9f03      	ldr	r7, [sp, #12]
 800918a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800918e:	f7f7 fc5d 	bl	8000a4c <__aeabi_d2iz>
 8009192:	4604      	mov	r4, r0
 8009194:	f7f7 f940 	bl	8000418 <__aeabi_i2d>
 8009198:	4602      	mov	r2, r0
 800919a:	460b      	mov	r3, r1
 800919c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80091a0:	f7f6 ffec 	bl	800017c <__aeabi_dsub>
 80091a4:	4602      	mov	r2, r0
 80091a6:	460b      	mov	r3, r1
 80091a8:	3430      	adds	r4, #48	; 0x30
 80091aa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80091ae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80091b2:	f807 4b01 	strb.w	r4, [r7], #1
 80091b6:	f7f7 fc0b 	bl	80009d0 <__aeabi_dcmplt>
 80091ba:	2800      	cmp	r0, #0
 80091bc:	d174      	bne.n	80092a8 <_dtoa_r+0x648>
 80091be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80091c2:	2000      	movs	r0, #0
 80091c4:	4911      	ldr	r1, [pc, #68]	; (800920c <_dtoa_r+0x5ac>)
 80091c6:	f7f6 ffd9 	bl	800017c <__aeabi_dsub>
 80091ca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80091ce:	f7f7 fbff 	bl	80009d0 <__aeabi_dcmplt>
 80091d2:	2800      	cmp	r0, #0
 80091d4:	f040 80b7 	bne.w	8009346 <_dtoa_r+0x6e6>
 80091d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80091da:	429f      	cmp	r7, r3
 80091dc:	f43f af7a 	beq.w	80090d4 <_dtoa_r+0x474>
 80091e0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80091e4:	2200      	movs	r2, #0
 80091e6:	4b0a      	ldr	r3, [pc, #40]	; (8009210 <_dtoa_r+0x5b0>)
 80091e8:	f7f7 f980 	bl	80004ec <__aeabi_dmul>
 80091ec:	2200      	movs	r2, #0
 80091ee:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80091f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80091f6:	4b06      	ldr	r3, [pc, #24]	; (8009210 <_dtoa_r+0x5b0>)
 80091f8:	f7f7 f978 	bl	80004ec <__aeabi_dmul>
 80091fc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009200:	e7c3      	b.n	800918a <_dtoa_r+0x52a>
 8009202:	bf00      	nop
 8009204:	0800c5b0 	.word	0x0800c5b0
 8009208:	0800c588 	.word	0x0800c588
 800920c:	3ff00000 	.word	0x3ff00000
 8009210:	40240000 	.word	0x40240000
 8009214:	401c0000 	.word	0x401c0000
 8009218:	40140000 	.word	0x40140000
 800921c:	3fe00000 	.word	0x3fe00000
 8009220:	4630      	mov	r0, r6
 8009222:	4639      	mov	r1, r7
 8009224:	f7f7 f962 	bl	80004ec <__aeabi_dmul>
 8009228:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800922a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800922e:	9c03      	ldr	r4, [sp, #12]
 8009230:	9314      	str	r3, [sp, #80]	; 0x50
 8009232:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009236:	f7f7 fc09 	bl	8000a4c <__aeabi_d2iz>
 800923a:	9015      	str	r0, [sp, #84]	; 0x54
 800923c:	f7f7 f8ec 	bl	8000418 <__aeabi_i2d>
 8009240:	4602      	mov	r2, r0
 8009242:	460b      	mov	r3, r1
 8009244:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009248:	f7f6 ff98 	bl	800017c <__aeabi_dsub>
 800924c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800924e:	4606      	mov	r6, r0
 8009250:	3330      	adds	r3, #48	; 0x30
 8009252:	f804 3b01 	strb.w	r3, [r4], #1
 8009256:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009258:	460f      	mov	r7, r1
 800925a:	429c      	cmp	r4, r3
 800925c:	f04f 0200 	mov.w	r2, #0
 8009260:	d124      	bne.n	80092ac <_dtoa_r+0x64c>
 8009262:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009266:	4bb0      	ldr	r3, [pc, #704]	; (8009528 <_dtoa_r+0x8c8>)
 8009268:	f7f6 ff8a 	bl	8000180 <__adddf3>
 800926c:	4602      	mov	r2, r0
 800926e:	460b      	mov	r3, r1
 8009270:	4630      	mov	r0, r6
 8009272:	4639      	mov	r1, r7
 8009274:	f7f7 fbca 	bl	8000a0c <__aeabi_dcmpgt>
 8009278:	2800      	cmp	r0, #0
 800927a:	d163      	bne.n	8009344 <_dtoa_r+0x6e4>
 800927c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009280:	2000      	movs	r0, #0
 8009282:	49a9      	ldr	r1, [pc, #676]	; (8009528 <_dtoa_r+0x8c8>)
 8009284:	f7f6 ff7a 	bl	800017c <__aeabi_dsub>
 8009288:	4602      	mov	r2, r0
 800928a:	460b      	mov	r3, r1
 800928c:	4630      	mov	r0, r6
 800928e:	4639      	mov	r1, r7
 8009290:	f7f7 fb9e 	bl	80009d0 <__aeabi_dcmplt>
 8009294:	2800      	cmp	r0, #0
 8009296:	f43f af1d 	beq.w	80090d4 <_dtoa_r+0x474>
 800929a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800929c:	1e7b      	subs	r3, r7, #1
 800929e:	9314      	str	r3, [sp, #80]	; 0x50
 80092a0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80092a4:	2b30      	cmp	r3, #48	; 0x30
 80092a6:	d0f8      	beq.n	800929a <_dtoa_r+0x63a>
 80092a8:	46c2      	mov	sl, r8
 80092aa:	e03b      	b.n	8009324 <_dtoa_r+0x6c4>
 80092ac:	4b9f      	ldr	r3, [pc, #636]	; (800952c <_dtoa_r+0x8cc>)
 80092ae:	f7f7 f91d 	bl	80004ec <__aeabi_dmul>
 80092b2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80092b6:	e7bc      	b.n	8009232 <_dtoa_r+0x5d2>
 80092b8:	9f03      	ldr	r7, [sp, #12]
 80092ba:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80092be:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80092c2:	4640      	mov	r0, r8
 80092c4:	4649      	mov	r1, r9
 80092c6:	f7f7 fa3b 	bl	8000740 <__aeabi_ddiv>
 80092ca:	f7f7 fbbf 	bl	8000a4c <__aeabi_d2iz>
 80092ce:	4604      	mov	r4, r0
 80092d0:	f7f7 f8a2 	bl	8000418 <__aeabi_i2d>
 80092d4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80092d8:	f7f7 f908 	bl	80004ec <__aeabi_dmul>
 80092dc:	4602      	mov	r2, r0
 80092de:	460b      	mov	r3, r1
 80092e0:	4640      	mov	r0, r8
 80092e2:	4649      	mov	r1, r9
 80092e4:	f7f6 ff4a 	bl	800017c <__aeabi_dsub>
 80092e8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80092ec:	f807 6b01 	strb.w	r6, [r7], #1
 80092f0:	9e03      	ldr	r6, [sp, #12]
 80092f2:	f8dd c020 	ldr.w	ip, [sp, #32]
 80092f6:	1bbe      	subs	r6, r7, r6
 80092f8:	45b4      	cmp	ip, r6
 80092fa:	4602      	mov	r2, r0
 80092fc:	460b      	mov	r3, r1
 80092fe:	d136      	bne.n	800936e <_dtoa_r+0x70e>
 8009300:	f7f6 ff3e 	bl	8000180 <__adddf3>
 8009304:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009308:	4680      	mov	r8, r0
 800930a:	4689      	mov	r9, r1
 800930c:	f7f7 fb7e 	bl	8000a0c <__aeabi_dcmpgt>
 8009310:	bb58      	cbnz	r0, 800936a <_dtoa_r+0x70a>
 8009312:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009316:	4640      	mov	r0, r8
 8009318:	4649      	mov	r1, r9
 800931a:	f7f7 fb4f 	bl	80009bc <__aeabi_dcmpeq>
 800931e:	b108      	cbz	r0, 8009324 <_dtoa_r+0x6c4>
 8009320:	07e1      	lsls	r1, r4, #31
 8009322:	d422      	bmi.n	800936a <_dtoa_r+0x70a>
 8009324:	4628      	mov	r0, r5
 8009326:	4659      	mov	r1, fp
 8009328:	f000 fe5a 	bl	8009fe0 <_Bfree>
 800932c:	2300      	movs	r3, #0
 800932e:	703b      	strb	r3, [r7, #0]
 8009330:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009332:	f10a 0001 	add.w	r0, sl, #1
 8009336:	6018      	str	r0, [r3, #0]
 8009338:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800933a:	2b00      	cmp	r3, #0
 800933c:	f43f acde 	beq.w	8008cfc <_dtoa_r+0x9c>
 8009340:	601f      	str	r7, [r3, #0]
 8009342:	e4db      	b.n	8008cfc <_dtoa_r+0x9c>
 8009344:	4627      	mov	r7, r4
 8009346:	463b      	mov	r3, r7
 8009348:	461f      	mov	r7, r3
 800934a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800934e:	2a39      	cmp	r2, #57	; 0x39
 8009350:	d107      	bne.n	8009362 <_dtoa_r+0x702>
 8009352:	9a03      	ldr	r2, [sp, #12]
 8009354:	429a      	cmp	r2, r3
 8009356:	d1f7      	bne.n	8009348 <_dtoa_r+0x6e8>
 8009358:	2230      	movs	r2, #48	; 0x30
 800935a:	9903      	ldr	r1, [sp, #12]
 800935c:	f108 0801 	add.w	r8, r8, #1
 8009360:	700a      	strb	r2, [r1, #0]
 8009362:	781a      	ldrb	r2, [r3, #0]
 8009364:	3201      	adds	r2, #1
 8009366:	701a      	strb	r2, [r3, #0]
 8009368:	e79e      	b.n	80092a8 <_dtoa_r+0x648>
 800936a:	46d0      	mov	r8, sl
 800936c:	e7eb      	b.n	8009346 <_dtoa_r+0x6e6>
 800936e:	2200      	movs	r2, #0
 8009370:	4b6e      	ldr	r3, [pc, #440]	; (800952c <_dtoa_r+0x8cc>)
 8009372:	f7f7 f8bb 	bl	80004ec <__aeabi_dmul>
 8009376:	2200      	movs	r2, #0
 8009378:	2300      	movs	r3, #0
 800937a:	4680      	mov	r8, r0
 800937c:	4689      	mov	r9, r1
 800937e:	f7f7 fb1d 	bl	80009bc <__aeabi_dcmpeq>
 8009382:	2800      	cmp	r0, #0
 8009384:	d09b      	beq.n	80092be <_dtoa_r+0x65e>
 8009386:	e7cd      	b.n	8009324 <_dtoa_r+0x6c4>
 8009388:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800938a:	2a00      	cmp	r2, #0
 800938c:	f000 80d0 	beq.w	8009530 <_dtoa_r+0x8d0>
 8009390:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009392:	2a01      	cmp	r2, #1
 8009394:	f300 80ae 	bgt.w	80094f4 <_dtoa_r+0x894>
 8009398:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800939a:	2a00      	cmp	r2, #0
 800939c:	f000 80a6 	beq.w	80094ec <_dtoa_r+0x88c>
 80093a0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80093a4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80093a6:	9f06      	ldr	r7, [sp, #24]
 80093a8:	9a06      	ldr	r2, [sp, #24]
 80093aa:	2101      	movs	r1, #1
 80093ac:	441a      	add	r2, r3
 80093ae:	9206      	str	r2, [sp, #24]
 80093b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80093b2:	4628      	mov	r0, r5
 80093b4:	441a      	add	r2, r3
 80093b6:	9209      	str	r2, [sp, #36]	; 0x24
 80093b8:	f000 ff12 	bl	800a1e0 <__i2b>
 80093bc:	4606      	mov	r6, r0
 80093be:	2f00      	cmp	r7, #0
 80093c0:	dd0c      	ble.n	80093dc <_dtoa_r+0x77c>
 80093c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	dd09      	ble.n	80093dc <_dtoa_r+0x77c>
 80093c8:	42bb      	cmp	r3, r7
 80093ca:	bfa8      	it	ge
 80093cc:	463b      	movge	r3, r7
 80093ce:	9a06      	ldr	r2, [sp, #24]
 80093d0:	1aff      	subs	r7, r7, r3
 80093d2:	1ad2      	subs	r2, r2, r3
 80093d4:	9206      	str	r2, [sp, #24]
 80093d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80093d8:	1ad3      	subs	r3, r2, r3
 80093da:	9309      	str	r3, [sp, #36]	; 0x24
 80093dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093de:	b1f3      	cbz	r3, 800941e <_dtoa_r+0x7be>
 80093e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	f000 80a8 	beq.w	8009538 <_dtoa_r+0x8d8>
 80093e8:	2c00      	cmp	r4, #0
 80093ea:	dd10      	ble.n	800940e <_dtoa_r+0x7ae>
 80093ec:	4631      	mov	r1, r6
 80093ee:	4622      	mov	r2, r4
 80093f0:	4628      	mov	r0, r5
 80093f2:	f000 ffb3 	bl	800a35c <__pow5mult>
 80093f6:	465a      	mov	r2, fp
 80093f8:	4601      	mov	r1, r0
 80093fa:	4606      	mov	r6, r0
 80093fc:	4628      	mov	r0, r5
 80093fe:	f000 ff05 	bl	800a20c <__multiply>
 8009402:	4680      	mov	r8, r0
 8009404:	4659      	mov	r1, fp
 8009406:	4628      	mov	r0, r5
 8009408:	f000 fdea 	bl	8009fe0 <_Bfree>
 800940c:	46c3      	mov	fp, r8
 800940e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009410:	1b1a      	subs	r2, r3, r4
 8009412:	d004      	beq.n	800941e <_dtoa_r+0x7be>
 8009414:	4659      	mov	r1, fp
 8009416:	4628      	mov	r0, r5
 8009418:	f000 ffa0 	bl	800a35c <__pow5mult>
 800941c:	4683      	mov	fp, r0
 800941e:	2101      	movs	r1, #1
 8009420:	4628      	mov	r0, r5
 8009422:	f000 fedd 	bl	800a1e0 <__i2b>
 8009426:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009428:	4604      	mov	r4, r0
 800942a:	2b00      	cmp	r3, #0
 800942c:	f340 8086 	ble.w	800953c <_dtoa_r+0x8dc>
 8009430:	461a      	mov	r2, r3
 8009432:	4601      	mov	r1, r0
 8009434:	4628      	mov	r0, r5
 8009436:	f000 ff91 	bl	800a35c <__pow5mult>
 800943a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800943c:	4604      	mov	r4, r0
 800943e:	2b01      	cmp	r3, #1
 8009440:	dd7f      	ble.n	8009542 <_dtoa_r+0x8e2>
 8009442:	f04f 0800 	mov.w	r8, #0
 8009446:	6923      	ldr	r3, [r4, #16]
 8009448:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800944c:	6918      	ldr	r0, [r3, #16]
 800944e:	f000 fe79 	bl	800a144 <__hi0bits>
 8009452:	f1c0 0020 	rsb	r0, r0, #32
 8009456:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009458:	4418      	add	r0, r3
 800945a:	f010 001f 	ands.w	r0, r0, #31
 800945e:	f000 8092 	beq.w	8009586 <_dtoa_r+0x926>
 8009462:	f1c0 0320 	rsb	r3, r0, #32
 8009466:	2b04      	cmp	r3, #4
 8009468:	f340 808a 	ble.w	8009580 <_dtoa_r+0x920>
 800946c:	f1c0 001c 	rsb	r0, r0, #28
 8009470:	9b06      	ldr	r3, [sp, #24]
 8009472:	4407      	add	r7, r0
 8009474:	4403      	add	r3, r0
 8009476:	9306      	str	r3, [sp, #24]
 8009478:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800947a:	4403      	add	r3, r0
 800947c:	9309      	str	r3, [sp, #36]	; 0x24
 800947e:	9b06      	ldr	r3, [sp, #24]
 8009480:	2b00      	cmp	r3, #0
 8009482:	dd05      	ble.n	8009490 <_dtoa_r+0x830>
 8009484:	4659      	mov	r1, fp
 8009486:	461a      	mov	r2, r3
 8009488:	4628      	mov	r0, r5
 800948a:	f000 ffc1 	bl	800a410 <__lshift>
 800948e:	4683      	mov	fp, r0
 8009490:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009492:	2b00      	cmp	r3, #0
 8009494:	dd05      	ble.n	80094a2 <_dtoa_r+0x842>
 8009496:	4621      	mov	r1, r4
 8009498:	461a      	mov	r2, r3
 800949a:	4628      	mov	r0, r5
 800949c:	f000 ffb8 	bl	800a410 <__lshift>
 80094a0:	4604      	mov	r4, r0
 80094a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d070      	beq.n	800958a <_dtoa_r+0x92a>
 80094a8:	4621      	mov	r1, r4
 80094aa:	4658      	mov	r0, fp
 80094ac:	f001 f820 	bl	800a4f0 <__mcmp>
 80094b0:	2800      	cmp	r0, #0
 80094b2:	da6a      	bge.n	800958a <_dtoa_r+0x92a>
 80094b4:	2300      	movs	r3, #0
 80094b6:	4659      	mov	r1, fp
 80094b8:	220a      	movs	r2, #10
 80094ba:	4628      	mov	r0, r5
 80094bc:	f000 fdb2 	bl	800a024 <__multadd>
 80094c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80094c2:	4683      	mov	fp, r0
 80094c4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	f000 8194 	beq.w	80097f6 <_dtoa_r+0xb96>
 80094ce:	4631      	mov	r1, r6
 80094d0:	2300      	movs	r3, #0
 80094d2:	220a      	movs	r2, #10
 80094d4:	4628      	mov	r0, r5
 80094d6:	f000 fda5 	bl	800a024 <__multadd>
 80094da:	f1b9 0f00 	cmp.w	r9, #0
 80094de:	4606      	mov	r6, r0
 80094e0:	f300 8093 	bgt.w	800960a <_dtoa_r+0x9aa>
 80094e4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80094e6:	2b02      	cmp	r3, #2
 80094e8:	dc57      	bgt.n	800959a <_dtoa_r+0x93a>
 80094ea:	e08e      	b.n	800960a <_dtoa_r+0x9aa>
 80094ec:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80094ee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80094f2:	e757      	b.n	80093a4 <_dtoa_r+0x744>
 80094f4:	9b08      	ldr	r3, [sp, #32]
 80094f6:	1e5c      	subs	r4, r3, #1
 80094f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094fa:	42a3      	cmp	r3, r4
 80094fc:	bfb7      	itett	lt
 80094fe:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009500:	1b1c      	subge	r4, r3, r4
 8009502:	1ae2      	sublt	r2, r4, r3
 8009504:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8009506:	bfbe      	ittt	lt
 8009508:	940a      	strlt	r4, [sp, #40]	; 0x28
 800950a:	189b      	addlt	r3, r3, r2
 800950c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800950e:	9b08      	ldr	r3, [sp, #32]
 8009510:	bfb8      	it	lt
 8009512:	2400      	movlt	r4, #0
 8009514:	2b00      	cmp	r3, #0
 8009516:	bfbb      	ittet	lt
 8009518:	9b06      	ldrlt	r3, [sp, #24]
 800951a:	9a08      	ldrlt	r2, [sp, #32]
 800951c:	9f06      	ldrge	r7, [sp, #24]
 800951e:	1a9f      	sublt	r7, r3, r2
 8009520:	bfac      	ite	ge
 8009522:	9b08      	ldrge	r3, [sp, #32]
 8009524:	2300      	movlt	r3, #0
 8009526:	e73f      	b.n	80093a8 <_dtoa_r+0x748>
 8009528:	3fe00000 	.word	0x3fe00000
 800952c:	40240000 	.word	0x40240000
 8009530:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009532:	9f06      	ldr	r7, [sp, #24]
 8009534:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8009536:	e742      	b.n	80093be <_dtoa_r+0x75e>
 8009538:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800953a:	e76b      	b.n	8009414 <_dtoa_r+0x7b4>
 800953c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800953e:	2b01      	cmp	r3, #1
 8009540:	dc19      	bgt.n	8009576 <_dtoa_r+0x916>
 8009542:	9b04      	ldr	r3, [sp, #16]
 8009544:	b9bb      	cbnz	r3, 8009576 <_dtoa_r+0x916>
 8009546:	9b05      	ldr	r3, [sp, #20]
 8009548:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800954c:	b99b      	cbnz	r3, 8009576 <_dtoa_r+0x916>
 800954e:	9b05      	ldr	r3, [sp, #20]
 8009550:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009554:	0d1b      	lsrs	r3, r3, #20
 8009556:	051b      	lsls	r3, r3, #20
 8009558:	b183      	cbz	r3, 800957c <_dtoa_r+0x91c>
 800955a:	f04f 0801 	mov.w	r8, #1
 800955e:	9b06      	ldr	r3, [sp, #24]
 8009560:	3301      	adds	r3, #1
 8009562:	9306      	str	r3, [sp, #24]
 8009564:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009566:	3301      	adds	r3, #1
 8009568:	9309      	str	r3, [sp, #36]	; 0x24
 800956a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800956c:	2b00      	cmp	r3, #0
 800956e:	f47f af6a 	bne.w	8009446 <_dtoa_r+0x7e6>
 8009572:	2001      	movs	r0, #1
 8009574:	e76f      	b.n	8009456 <_dtoa_r+0x7f6>
 8009576:	f04f 0800 	mov.w	r8, #0
 800957a:	e7f6      	b.n	800956a <_dtoa_r+0x90a>
 800957c:	4698      	mov	r8, r3
 800957e:	e7f4      	b.n	800956a <_dtoa_r+0x90a>
 8009580:	f43f af7d 	beq.w	800947e <_dtoa_r+0x81e>
 8009584:	4618      	mov	r0, r3
 8009586:	301c      	adds	r0, #28
 8009588:	e772      	b.n	8009470 <_dtoa_r+0x810>
 800958a:	9b08      	ldr	r3, [sp, #32]
 800958c:	2b00      	cmp	r3, #0
 800958e:	dc36      	bgt.n	80095fe <_dtoa_r+0x99e>
 8009590:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009592:	2b02      	cmp	r3, #2
 8009594:	dd33      	ble.n	80095fe <_dtoa_r+0x99e>
 8009596:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800959a:	f1b9 0f00 	cmp.w	r9, #0
 800959e:	d10d      	bne.n	80095bc <_dtoa_r+0x95c>
 80095a0:	4621      	mov	r1, r4
 80095a2:	464b      	mov	r3, r9
 80095a4:	2205      	movs	r2, #5
 80095a6:	4628      	mov	r0, r5
 80095a8:	f000 fd3c 	bl	800a024 <__multadd>
 80095ac:	4601      	mov	r1, r0
 80095ae:	4604      	mov	r4, r0
 80095b0:	4658      	mov	r0, fp
 80095b2:	f000 ff9d 	bl	800a4f0 <__mcmp>
 80095b6:	2800      	cmp	r0, #0
 80095b8:	f73f adb8 	bgt.w	800912c <_dtoa_r+0x4cc>
 80095bc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80095be:	9f03      	ldr	r7, [sp, #12]
 80095c0:	ea6f 0a03 	mvn.w	sl, r3
 80095c4:	f04f 0800 	mov.w	r8, #0
 80095c8:	4621      	mov	r1, r4
 80095ca:	4628      	mov	r0, r5
 80095cc:	f000 fd08 	bl	8009fe0 <_Bfree>
 80095d0:	2e00      	cmp	r6, #0
 80095d2:	f43f aea7 	beq.w	8009324 <_dtoa_r+0x6c4>
 80095d6:	f1b8 0f00 	cmp.w	r8, #0
 80095da:	d005      	beq.n	80095e8 <_dtoa_r+0x988>
 80095dc:	45b0      	cmp	r8, r6
 80095de:	d003      	beq.n	80095e8 <_dtoa_r+0x988>
 80095e0:	4641      	mov	r1, r8
 80095e2:	4628      	mov	r0, r5
 80095e4:	f000 fcfc 	bl	8009fe0 <_Bfree>
 80095e8:	4631      	mov	r1, r6
 80095ea:	4628      	mov	r0, r5
 80095ec:	f000 fcf8 	bl	8009fe0 <_Bfree>
 80095f0:	e698      	b.n	8009324 <_dtoa_r+0x6c4>
 80095f2:	2400      	movs	r4, #0
 80095f4:	4626      	mov	r6, r4
 80095f6:	e7e1      	b.n	80095bc <_dtoa_r+0x95c>
 80095f8:	46c2      	mov	sl, r8
 80095fa:	4626      	mov	r6, r4
 80095fc:	e596      	b.n	800912c <_dtoa_r+0x4cc>
 80095fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009600:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009604:	2b00      	cmp	r3, #0
 8009606:	f000 80fd 	beq.w	8009804 <_dtoa_r+0xba4>
 800960a:	2f00      	cmp	r7, #0
 800960c:	dd05      	ble.n	800961a <_dtoa_r+0x9ba>
 800960e:	4631      	mov	r1, r6
 8009610:	463a      	mov	r2, r7
 8009612:	4628      	mov	r0, r5
 8009614:	f000 fefc 	bl	800a410 <__lshift>
 8009618:	4606      	mov	r6, r0
 800961a:	f1b8 0f00 	cmp.w	r8, #0
 800961e:	d05c      	beq.n	80096da <_dtoa_r+0xa7a>
 8009620:	4628      	mov	r0, r5
 8009622:	6871      	ldr	r1, [r6, #4]
 8009624:	f000 fc9c 	bl	8009f60 <_Balloc>
 8009628:	4607      	mov	r7, r0
 800962a:	b928      	cbnz	r0, 8009638 <_dtoa_r+0x9d8>
 800962c:	4602      	mov	r2, r0
 800962e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009632:	4b7f      	ldr	r3, [pc, #508]	; (8009830 <_dtoa_r+0xbd0>)
 8009634:	f7ff bb28 	b.w	8008c88 <_dtoa_r+0x28>
 8009638:	6932      	ldr	r2, [r6, #16]
 800963a:	f106 010c 	add.w	r1, r6, #12
 800963e:	3202      	adds	r2, #2
 8009640:	0092      	lsls	r2, r2, #2
 8009642:	300c      	adds	r0, #12
 8009644:	f7fd fd00 	bl	8007048 <memcpy>
 8009648:	2201      	movs	r2, #1
 800964a:	4639      	mov	r1, r7
 800964c:	4628      	mov	r0, r5
 800964e:	f000 fedf 	bl	800a410 <__lshift>
 8009652:	46b0      	mov	r8, r6
 8009654:	4606      	mov	r6, r0
 8009656:	9b03      	ldr	r3, [sp, #12]
 8009658:	3301      	adds	r3, #1
 800965a:	9308      	str	r3, [sp, #32]
 800965c:	9b03      	ldr	r3, [sp, #12]
 800965e:	444b      	add	r3, r9
 8009660:	930a      	str	r3, [sp, #40]	; 0x28
 8009662:	9b04      	ldr	r3, [sp, #16]
 8009664:	f003 0301 	and.w	r3, r3, #1
 8009668:	9309      	str	r3, [sp, #36]	; 0x24
 800966a:	9b08      	ldr	r3, [sp, #32]
 800966c:	4621      	mov	r1, r4
 800966e:	3b01      	subs	r3, #1
 8009670:	4658      	mov	r0, fp
 8009672:	9304      	str	r3, [sp, #16]
 8009674:	f7ff fa66 	bl	8008b44 <quorem>
 8009678:	4603      	mov	r3, r0
 800967a:	4641      	mov	r1, r8
 800967c:	3330      	adds	r3, #48	; 0x30
 800967e:	9006      	str	r0, [sp, #24]
 8009680:	4658      	mov	r0, fp
 8009682:	930b      	str	r3, [sp, #44]	; 0x2c
 8009684:	f000 ff34 	bl	800a4f0 <__mcmp>
 8009688:	4632      	mov	r2, r6
 800968a:	4681      	mov	r9, r0
 800968c:	4621      	mov	r1, r4
 800968e:	4628      	mov	r0, r5
 8009690:	f000 ff4a 	bl	800a528 <__mdiff>
 8009694:	68c2      	ldr	r2, [r0, #12]
 8009696:	4607      	mov	r7, r0
 8009698:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800969a:	bb02      	cbnz	r2, 80096de <_dtoa_r+0xa7e>
 800969c:	4601      	mov	r1, r0
 800969e:	4658      	mov	r0, fp
 80096a0:	f000 ff26 	bl	800a4f0 <__mcmp>
 80096a4:	4602      	mov	r2, r0
 80096a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80096a8:	4639      	mov	r1, r7
 80096aa:	4628      	mov	r0, r5
 80096ac:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80096b0:	f000 fc96 	bl	8009fe0 <_Bfree>
 80096b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80096b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80096b8:	9f08      	ldr	r7, [sp, #32]
 80096ba:	ea43 0102 	orr.w	r1, r3, r2
 80096be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096c0:	430b      	orrs	r3, r1
 80096c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80096c4:	d10d      	bne.n	80096e2 <_dtoa_r+0xa82>
 80096c6:	2b39      	cmp	r3, #57	; 0x39
 80096c8:	d029      	beq.n	800971e <_dtoa_r+0xabe>
 80096ca:	f1b9 0f00 	cmp.w	r9, #0
 80096ce:	dd01      	ble.n	80096d4 <_dtoa_r+0xa74>
 80096d0:	9b06      	ldr	r3, [sp, #24]
 80096d2:	3331      	adds	r3, #49	; 0x31
 80096d4:	9a04      	ldr	r2, [sp, #16]
 80096d6:	7013      	strb	r3, [r2, #0]
 80096d8:	e776      	b.n	80095c8 <_dtoa_r+0x968>
 80096da:	4630      	mov	r0, r6
 80096dc:	e7b9      	b.n	8009652 <_dtoa_r+0x9f2>
 80096de:	2201      	movs	r2, #1
 80096e0:	e7e2      	b.n	80096a8 <_dtoa_r+0xa48>
 80096e2:	f1b9 0f00 	cmp.w	r9, #0
 80096e6:	db06      	blt.n	80096f6 <_dtoa_r+0xa96>
 80096e8:	9922      	ldr	r1, [sp, #136]	; 0x88
 80096ea:	ea41 0909 	orr.w	r9, r1, r9
 80096ee:	9909      	ldr	r1, [sp, #36]	; 0x24
 80096f0:	ea59 0101 	orrs.w	r1, r9, r1
 80096f4:	d120      	bne.n	8009738 <_dtoa_r+0xad8>
 80096f6:	2a00      	cmp	r2, #0
 80096f8:	ddec      	ble.n	80096d4 <_dtoa_r+0xa74>
 80096fa:	4659      	mov	r1, fp
 80096fc:	2201      	movs	r2, #1
 80096fe:	4628      	mov	r0, r5
 8009700:	9308      	str	r3, [sp, #32]
 8009702:	f000 fe85 	bl	800a410 <__lshift>
 8009706:	4621      	mov	r1, r4
 8009708:	4683      	mov	fp, r0
 800970a:	f000 fef1 	bl	800a4f0 <__mcmp>
 800970e:	2800      	cmp	r0, #0
 8009710:	9b08      	ldr	r3, [sp, #32]
 8009712:	dc02      	bgt.n	800971a <_dtoa_r+0xaba>
 8009714:	d1de      	bne.n	80096d4 <_dtoa_r+0xa74>
 8009716:	07da      	lsls	r2, r3, #31
 8009718:	d5dc      	bpl.n	80096d4 <_dtoa_r+0xa74>
 800971a:	2b39      	cmp	r3, #57	; 0x39
 800971c:	d1d8      	bne.n	80096d0 <_dtoa_r+0xa70>
 800971e:	2339      	movs	r3, #57	; 0x39
 8009720:	9a04      	ldr	r2, [sp, #16]
 8009722:	7013      	strb	r3, [r2, #0]
 8009724:	463b      	mov	r3, r7
 8009726:	461f      	mov	r7, r3
 8009728:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800972c:	3b01      	subs	r3, #1
 800972e:	2a39      	cmp	r2, #57	; 0x39
 8009730:	d050      	beq.n	80097d4 <_dtoa_r+0xb74>
 8009732:	3201      	adds	r2, #1
 8009734:	701a      	strb	r2, [r3, #0]
 8009736:	e747      	b.n	80095c8 <_dtoa_r+0x968>
 8009738:	2a00      	cmp	r2, #0
 800973a:	dd03      	ble.n	8009744 <_dtoa_r+0xae4>
 800973c:	2b39      	cmp	r3, #57	; 0x39
 800973e:	d0ee      	beq.n	800971e <_dtoa_r+0xabe>
 8009740:	3301      	adds	r3, #1
 8009742:	e7c7      	b.n	80096d4 <_dtoa_r+0xa74>
 8009744:	9a08      	ldr	r2, [sp, #32]
 8009746:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009748:	f802 3c01 	strb.w	r3, [r2, #-1]
 800974c:	428a      	cmp	r2, r1
 800974e:	d02a      	beq.n	80097a6 <_dtoa_r+0xb46>
 8009750:	4659      	mov	r1, fp
 8009752:	2300      	movs	r3, #0
 8009754:	220a      	movs	r2, #10
 8009756:	4628      	mov	r0, r5
 8009758:	f000 fc64 	bl	800a024 <__multadd>
 800975c:	45b0      	cmp	r8, r6
 800975e:	4683      	mov	fp, r0
 8009760:	f04f 0300 	mov.w	r3, #0
 8009764:	f04f 020a 	mov.w	r2, #10
 8009768:	4641      	mov	r1, r8
 800976a:	4628      	mov	r0, r5
 800976c:	d107      	bne.n	800977e <_dtoa_r+0xb1e>
 800976e:	f000 fc59 	bl	800a024 <__multadd>
 8009772:	4680      	mov	r8, r0
 8009774:	4606      	mov	r6, r0
 8009776:	9b08      	ldr	r3, [sp, #32]
 8009778:	3301      	adds	r3, #1
 800977a:	9308      	str	r3, [sp, #32]
 800977c:	e775      	b.n	800966a <_dtoa_r+0xa0a>
 800977e:	f000 fc51 	bl	800a024 <__multadd>
 8009782:	4631      	mov	r1, r6
 8009784:	4680      	mov	r8, r0
 8009786:	2300      	movs	r3, #0
 8009788:	220a      	movs	r2, #10
 800978a:	4628      	mov	r0, r5
 800978c:	f000 fc4a 	bl	800a024 <__multadd>
 8009790:	4606      	mov	r6, r0
 8009792:	e7f0      	b.n	8009776 <_dtoa_r+0xb16>
 8009794:	f1b9 0f00 	cmp.w	r9, #0
 8009798:	bfcc      	ite	gt
 800979a:	464f      	movgt	r7, r9
 800979c:	2701      	movle	r7, #1
 800979e:	f04f 0800 	mov.w	r8, #0
 80097a2:	9a03      	ldr	r2, [sp, #12]
 80097a4:	4417      	add	r7, r2
 80097a6:	4659      	mov	r1, fp
 80097a8:	2201      	movs	r2, #1
 80097aa:	4628      	mov	r0, r5
 80097ac:	9308      	str	r3, [sp, #32]
 80097ae:	f000 fe2f 	bl	800a410 <__lshift>
 80097b2:	4621      	mov	r1, r4
 80097b4:	4683      	mov	fp, r0
 80097b6:	f000 fe9b 	bl	800a4f0 <__mcmp>
 80097ba:	2800      	cmp	r0, #0
 80097bc:	dcb2      	bgt.n	8009724 <_dtoa_r+0xac4>
 80097be:	d102      	bne.n	80097c6 <_dtoa_r+0xb66>
 80097c0:	9b08      	ldr	r3, [sp, #32]
 80097c2:	07db      	lsls	r3, r3, #31
 80097c4:	d4ae      	bmi.n	8009724 <_dtoa_r+0xac4>
 80097c6:	463b      	mov	r3, r7
 80097c8:	461f      	mov	r7, r3
 80097ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80097ce:	2a30      	cmp	r2, #48	; 0x30
 80097d0:	d0fa      	beq.n	80097c8 <_dtoa_r+0xb68>
 80097d2:	e6f9      	b.n	80095c8 <_dtoa_r+0x968>
 80097d4:	9a03      	ldr	r2, [sp, #12]
 80097d6:	429a      	cmp	r2, r3
 80097d8:	d1a5      	bne.n	8009726 <_dtoa_r+0xac6>
 80097da:	2331      	movs	r3, #49	; 0x31
 80097dc:	f10a 0a01 	add.w	sl, sl, #1
 80097e0:	e779      	b.n	80096d6 <_dtoa_r+0xa76>
 80097e2:	4b14      	ldr	r3, [pc, #80]	; (8009834 <_dtoa_r+0xbd4>)
 80097e4:	f7ff baa8 	b.w	8008d38 <_dtoa_r+0xd8>
 80097e8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	f47f aa81 	bne.w	8008cf2 <_dtoa_r+0x92>
 80097f0:	4b11      	ldr	r3, [pc, #68]	; (8009838 <_dtoa_r+0xbd8>)
 80097f2:	f7ff baa1 	b.w	8008d38 <_dtoa_r+0xd8>
 80097f6:	f1b9 0f00 	cmp.w	r9, #0
 80097fa:	dc03      	bgt.n	8009804 <_dtoa_r+0xba4>
 80097fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80097fe:	2b02      	cmp	r3, #2
 8009800:	f73f aecb 	bgt.w	800959a <_dtoa_r+0x93a>
 8009804:	9f03      	ldr	r7, [sp, #12]
 8009806:	4621      	mov	r1, r4
 8009808:	4658      	mov	r0, fp
 800980a:	f7ff f99b 	bl	8008b44 <quorem>
 800980e:	9a03      	ldr	r2, [sp, #12]
 8009810:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009814:	f807 3b01 	strb.w	r3, [r7], #1
 8009818:	1aba      	subs	r2, r7, r2
 800981a:	4591      	cmp	r9, r2
 800981c:	ddba      	ble.n	8009794 <_dtoa_r+0xb34>
 800981e:	4659      	mov	r1, fp
 8009820:	2300      	movs	r3, #0
 8009822:	220a      	movs	r2, #10
 8009824:	4628      	mov	r0, r5
 8009826:	f000 fbfd 	bl	800a024 <__multadd>
 800982a:	4683      	mov	fp, r0
 800982c:	e7eb      	b.n	8009806 <_dtoa_r+0xba6>
 800982e:	bf00      	nop
 8009830:	0800c4a0 	.word	0x0800c4a0
 8009834:	0800c2a4 	.word	0x0800c2a4
 8009838:	0800c421 	.word	0x0800c421

0800983c <rshift>:
 800983c:	6903      	ldr	r3, [r0, #16]
 800983e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009842:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009846:	f100 0414 	add.w	r4, r0, #20
 800984a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800984e:	dd46      	ble.n	80098de <rshift+0xa2>
 8009850:	f011 011f 	ands.w	r1, r1, #31
 8009854:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009858:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800985c:	d10c      	bne.n	8009878 <rshift+0x3c>
 800985e:	4629      	mov	r1, r5
 8009860:	f100 0710 	add.w	r7, r0, #16
 8009864:	42b1      	cmp	r1, r6
 8009866:	d335      	bcc.n	80098d4 <rshift+0x98>
 8009868:	1a9b      	subs	r3, r3, r2
 800986a:	009b      	lsls	r3, r3, #2
 800986c:	1eea      	subs	r2, r5, #3
 800986e:	4296      	cmp	r6, r2
 8009870:	bf38      	it	cc
 8009872:	2300      	movcc	r3, #0
 8009874:	4423      	add	r3, r4
 8009876:	e015      	b.n	80098a4 <rshift+0x68>
 8009878:	46a1      	mov	r9, r4
 800987a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800987e:	f1c1 0820 	rsb	r8, r1, #32
 8009882:	40cf      	lsrs	r7, r1
 8009884:	f105 0e04 	add.w	lr, r5, #4
 8009888:	4576      	cmp	r6, lr
 800988a:	46f4      	mov	ip, lr
 800988c:	d816      	bhi.n	80098bc <rshift+0x80>
 800988e:	1a9a      	subs	r2, r3, r2
 8009890:	0092      	lsls	r2, r2, #2
 8009892:	3a04      	subs	r2, #4
 8009894:	3501      	adds	r5, #1
 8009896:	42ae      	cmp	r6, r5
 8009898:	bf38      	it	cc
 800989a:	2200      	movcc	r2, #0
 800989c:	18a3      	adds	r3, r4, r2
 800989e:	50a7      	str	r7, [r4, r2]
 80098a0:	b107      	cbz	r7, 80098a4 <rshift+0x68>
 80098a2:	3304      	adds	r3, #4
 80098a4:	42a3      	cmp	r3, r4
 80098a6:	eba3 0204 	sub.w	r2, r3, r4
 80098aa:	bf08      	it	eq
 80098ac:	2300      	moveq	r3, #0
 80098ae:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80098b2:	6102      	str	r2, [r0, #16]
 80098b4:	bf08      	it	eq
 80098b6:	6143      	streq	r3, [r0, #20]
 80098b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80098bc:	f8dc c000 	ldr.w	ip, [ip]
 80098c0:	fa0c fc08 	lsl.w	ip, ip, r8
 80098c4:	ea4c 0707 	orr.w	r7, ip, r7
 80098c8:	f849 7b04 	str.w	r7, [r9], #4
 80098cc:	f85e 7b04 	ldr.w	r7, [lr], #4
 80098d0:	40cf      	lsrs	r7, r1
 80098d2:	e7d9      	b.n	8009888 <rshift+0x4c>
 80098d4:	f851 cb04 	ldr.w	ip, [r1], #4
 80098d8:	f847 cf04 	str.w	ip, [r7, #4]!
 80098dc:	e7c2      	b.n	8009864 <rshift+0x28>
 80098de:	4623      	mov	r3, r4
 80098e0:	e7e0      	b.n	80098a4 <rshift+0x68>

080098e2 <__hexdig_fun>:
 80098e2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80098e6:	2b09      	cmp	r3, #9
 80098e8:	d802      	bhi.n	80098f0 <__hexdig_fun+0xe>
 80098ea:	3820      	subs	r0, #32
 80098ec:	b2c0      	uxtb	r0, r0
 80098ee:	4770      	bx	lr
 80098f0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80098f4:	2b05      	cmp	r3, #5
 80098f6:	d801      	bhi.n	80098fc <__hexdig_fun+0x1a>
 80098f8:	3847      	subs	r0, #71	; 0x47
 80098fa:	e7f7      	b.n	80098ec <__hexdig_fun+0xa>
 80098fc:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009900:	2b05      	cmp	r3, #5
 8009902:	d801      	bhi.n	8009908 <__hexdig_fun+0x26>
 8009904:	3827      	subs	r0, #39	; 0x27
 8009906:	e7f1      	b.n	80098ec <__hexdig_fun+0xa>
 8009908:	2000      	movs	r0, #0
 800990a:	4770      	bx	lr

0800990c <__gethex>:
 800990c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009910:	b08b      	sub	sp, #44	; 0x2c
 8009912:	9305      	str	r3, [sp, #20]
 8009914:	4bb2      	ldr	r3, [pc, #712]	; (8009be0 <__gethex+0x2d4>)
 8009916:	9002      	str	r0, [sp, #8]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	468b      	mov	fp, r1
 800991c:	4618      	mov	r0, r3
 800991e:	4690      	mov	r8, r2
 8009920:	9303      	str	r3, [sp, #12]
 8009922:	f7f6 fc1f 	bl	8000164 <strlen>
 8009926:	4682      	mov	sl, r0
 8009928:	9b03      	ldr	r3, [sp, #12]
 800992a:	f8db 2000 	ldr.w	r2, [fp]
 800992e:	4403      	add	r3, r0
 8009930:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009934:	9306      	str	r3, [sp, #24]
 8009936:	1c93      	adds	r3, r2, #2
 8009938:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800993c:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009940:	32fe      	adds	r2, #254	; 0xfe
 8009942:	18d1      	adds	r1, r2, r3
 8009944:	461f      	mov	r7, r3
 8009946:	f813 0b01 	ldrb.w	r0, [r3], #1
 800994a:	9101      	str	r1, [sp, #4]
 800994c:	2830      	cmp	r0, #48	; 0x30
 800994e:	d0f8      	beq.n	8009942 <__gethex+0x36>
 8009950:	f7ff ffc7 	bl	80098e2 <__hexdig_fun>
 8009954:	4604      	mov	r4, r0
 8009956:	2800      	cmp	r0, #0
 8009958:	d13a      	bne.n	80099d0 <__gethex+0xc4>
 800995a:	4652      	mov	r2, sl
 800995c:	4638      	mov	r0, r7
 800995e:	9903      	ldr	r1, [sp, #12]
 8009960:	f001 fa18 	bl	800ad94 <strncmp>
 8009964:	4605      	mov	r5, r0
 8009966:	2800      	cmp	r0, #0
 8009968:	d166      	bne.n	8009a38 <__gethex+0x12c>
 800996a:	f817 000a 	ldrb.w	r0, [r7, sl]
 800996e:	eb07 060a 	add.w	r6, r7, sl
 8009972:	f7ff ffb6 	bl	80098e2 <__hexdig_fun>
 8009976:	2800      	cmp	r0, #0
 8009978:	d060      	beq.n	8009a3c <__gethex+0x130>
 800997a:	4633      	mov	r3, r6
 800997c:	7818      	ldrb	r0, [r3, #0]
 800997e:	461f      	mov	r7, r3
 8009980:	2830      	cmp	r0, #48	; 0x30
 8009982:	f103 0301 	add.w	r3, r3, #1
 8009986:	d0f9      	beq.n	800997c <__gethex+0x70>
 8009988:	f7ff ffab 	bl	80098e2 <__hexdig_fun>
 800998c:	2301      	movs	r3, #1
 800998e:	fab0 f480 	clz	r4, r0
 8009992:	4635      	mov	r5, r6
 8009994:	0964      	lsrs	r4, r4, #5
 8009996:	9301      	str	r3, [sp, #4]
 8009998:	463a      	mov	r2, r7
 800999a:	4616      	mov	r6, r2
 800999c:	7830      	ldrb	r0, [r6, #0]
 800999e:	3201      	adds	r2, #1
 80099a0:	f7ff ff9f 	bl	80098e2 <__hexdig_fun>
 80099a4:	2800      	cmp	r0, #0
 80099a6:	d1f8      	bne.n	800999a <__gethex+0x8e>
 80099a8:	4652      	mov	r2, sl
 80099aa:	4630      	mov	r0, r6
 80099ac:	9903      	ldr	r1, [sp, #12]
 80099ae:	f001 f9f1 	bl	800ad94 <strncmp>
 80099b2:	b980      	cbnz	r0, 80099d6 <__gethex+0xca>
 80099b4:	b94d      	cbnz	r5, 80099ca <__gethex+0xbe>
 80099b6:	eb06 050a 	add.w	r5, r6, sl
 80099ba:	462a      	mov	r2, r5
 80099bc:	4616      	mov	r6, r2
 80099be:	7830      	ldrb	r0, [r6, #0]
 80099c0:	3201      	adds	r2, #1
 80099c2:	f7ff ff8e 	bl	80098e2 <__hexdig_fun>
 80099c6:	2800      	cmp	r0, #0
 80099c8:	d1f8      	bne.n	80099bc <__gethex+0xb0>
 80099ca:	1bad      	subs	r5, r5, r6
 80099cc:	00ad      	lsls	r5, r5, #2
 80099ce:	e004      	b.n	80099da <__gethex+0xce>
 80099d0:	2400      	movs	r4, #0
 80099d2:	4625      	mov	r5, r4
 80099d4:	e7e0      	b.n	8009998 <__gethex+0x8c>
 80099d6:	2d00      	cmp	r5, #0
 80099d8:	d1f7      	bne.n	80099ca <__gethex+0xbe>
 80099da:	7833      	ldrb	r3, [r6, #0]
 80099dc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80099e0:	2b50      	cmp	r3, #80	; 0x50
 80099e2:	d139      	bne.n	8009a58 <__gethex+0x14c>
 80099e4:	7873      	ldrb	r3, [r6, #1]
 80099e6:	2b2b      	cmp	r3, #43	; 0x2b
 80099e8:	d02a      	beq.n	8009a40 <__gethex+0x134>
 80099ea:	2b2d      	cmp	r3, #45	; 0x2d
 80099ec:	d02c      	beq.n	8009a48 <__gethex+0x13c>
 80099ee:	f04f 0900 	mov.w	r9, #0
 80099f2:	1c71      	adds	r1, r6, #1
 80099f4:	7808      	ldrb	r0, [r1, #0]
 80099f6:	f7ff ff74 	bl	80098e2 <__hexdig_fun>
 80099fa:	1e43      	subs	r3, r0, #1
 80099fc:	b2db      	uxtb	r3, r3
 80099fe:	2b18      	cmp	r3, #24
 8009a00:	d82a      	bhi.n	8009a58 <__gethex+0x14c>
 8009a02:	f1a0 0210 	sub.w	r2, r0, #16
 8009a06:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009a0a:	f7ff ff6a 	bl	80098e2 <__hexdig_fun>
 8009a0e:	1e43      	subs	r3, r0, #1
 8009a10:	b2db      	uxtb	r3, r3
 8009a12:	2b18      	cmp	r3, #24
 8009a14:	d91b      	bls.n	8009a4e <__gethex+0x142>
 8009a16:	f1b9 0f00 	cmp.w	r9, #0
 8009a1a:	d000      	beq.n	8009a1e <__gethex+0x112>
 8009a1c:	4252      	negs	r2, r2
 8009a1e:	4415      	add	r5, r2
 8009a20:	f8cb 1000 	str.w	r1, [fp]
 8009a24:	b1d4      	cbz	r4, 8009a5c <__gethex+0x150>
 8009a26:	9b01      	ldr	r3, [sp, #4]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	bf14      	ite	ne
 8009a2c:	2700      	movne	r7, #0
 8009a2e:	2706      	moveq	r7, #6
 8009a30:	4638      	mov	r0, r7
 8009a32:	b00b      	add	sp, #44	; 0x2c
 8009a34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a38:	463e      	mov	r6, r7
 8009a3a:	4625      	mov	r5, r4
 8009a3c:	2401      	movs	r4, #1
 8009a3e:	e7cc      	b.n	80099da <__gethex+0xce>
 8009a40:	f04f 0900 	mov.w	r9, #0
 8009a44:	1cb1      	adds	r1, r6, #2
 8009a46:	e7d5      	b.n	80099f4 <__gethex+0xe8>
 8009a48:	f04f 0901 	mov.w	r9, #1
 8009a4c:	e7fa      	b.n	8009a44 <__gethex+0x138>
 8009a4e:	230a      	movs	r3, #10
 8009a50:	fb03 0202 	mla	r2, r3, r2, r0
 8009a54:	3a10      	subs	r2, #16
 8009a56:	e7d6      	b.n	8009a06 <__gethex+0xfa>
 8009a58:	4631      	mov	r1, r6
 8009a5a:	e7e1      	b.n	8009a20 <__gethex+0x114>
 8009a5c:	4621      	mov	r1, r4
 8009a5e:	1bf3      	subs	r3, r6, r7
 8009a60:	3b01      	subs	r3, #1
 8009a62:	2b07      	cmp	r3, #7
 8009a64:	dc0a      	bgt.n	8009a7c <__gethex+0x170>
 8009a66:	9802      	ldr	r0, [sp, #8]
 8009a68:	f000 fa7a 	bl	8009f60 <_Balloc>
 8009a6c:	4604      	mov	r4, r0
 8009a6e:	b940      	cbnz	r0, 8009a82 <__gethex+0x176>
 8009a70:	4602      	mov	r2, r0
 8009a72:	21de      	movs	r1, #222	; 0xde
 8009a74:	4b5b      	ldr	r3, [pc, #364]	; (8009be4 <__gethex+0x2d8>)
 8009a76:	485c      	ldr	r0, [pc, #368]	; (8009be8 <__gethex+0x2dc>)
 8009a78:	f001 f9ae 	bl	800add8 <__assert_func>
 8009a7c:	3101      	adds	r1, #1
 8009a7e:	105b      	asrs	r3, r3, #1
 8009a80:	e7ef      	b.n	8009a62 <__gethex+0x156>
 8009a82:	f04f 0b00 	mov.w	fp, #0
 8009a86:	f100 0914 	add.w	r9, r0, #20
 8009a8a:	f1ca 0301 	rsb	r3, sl, #1
 8009a8e:	f8cd 9010 	str.w	r9, [sp, #16]
 8009a92:	f8cd b004 	str.w	fp, [sp, #4]
 8009a96:	9308      	str	r3, [sp, #32]
 8009a98:	42b7      	cmp	r7, r6
 8009a9a:	d33f      	bcc.n	8009b1c <__gethex+0x210>
 8009a9c:	9f04      	ldr	r7, [sp, #16]
 8009a9e:	9b01      	ldr	r3, [sp, #4]
 8009aa0:	f847 3b04 	str.w	r3, [r7], #4
 8009aa4:	eba7 0709 	sub.w	r7, r7, r9
 8009aa8:	10bf      	asrs	r7, r7, #2
 8009aaa:	6127      	str	r7, [r4, #16]
 8009aac:	4618      	mov	r0, r3
 8009aae:	f000 fb49 	bl	800a144 <__hi0bits>
 8009ab2:	017f      	lsls	r7, r7, #5
 8009ab4:	f8d8 6000 	ldr.w	r6, [r8]
 8009ab8:	1a3f      	subs	r7, r7, r0
 8009aba:	42b7      	cmp	r7, r6
 8009abc:	dd62      	ble.n	8009b84 <__gethex+0x278>
 8009abe:	1bbf      	subs	r7, r7, r6
 8009ac0:	4639      	mov	r1, r7
 8009ac2:	4620      	mov	r0, r4
 8009ac4:	f000 fee3 	bl	800a88e <__any_on>
 8009ac8:	4682      	mov	sl, r0
 8009aca:	b1a8      	cbz	r0, 8009af8 <__gethex+0x1ec>
 8009acc:	f04f 0a01 	mov.w	sl, #1
 8009ad0:	1e7b      	subs	r3, r7, #1
 8009ad2:	1159      	asrs	r1, r3, #5
 8009ad4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009ad8:	f003 021f 	and.w	r2, r3, #31
 8009adc:	fa0a f202 	lsl.w	r2, sl, r2
 8009ae0:	420a      	tst	r2, r1
 8009ae2:	d009      	beq.n	8009af8 <__gethex+0x1ec>
 8009ae4:	4553      	cmp	r3, sl
 8009ae6:	dd05      	ble.n	8009af4 <__gethex+0x1e8>
 8009ae8:	4620      	mov	r0, r4
 8009aea:	1eb9      	subs	r1, r7, #2
 8009aec:	f000 fecf 	bl	800a88e <__any_on>
 8009af0:	2800      	cmp	r0, #0
 8009af2:	d144      	bne.n	8009b7e <__gethex+0x272>
 8009af4:	f04f 0a02 	mov.w	sl, #2
 8009af8:	4639      	mov	r1, r7
 8009afa:	4620      	mov	r0, r4
 8009afc:	f7ff fe9e 	bl	800983c <rshift>
 8009b00:	443d      	add	r5, r7
 8009b02:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009b06:	42ab      	cmp	r3, r5
 8009b08:	da4a      	bge.n	8009ba0 <__gethex+0x294>
 8009b0a:	4621      	mov	r1, r4
 8009b0c:	9802      	ldr	r0, [sp, #8]
 8009b0e:	f000 fa67 	bl	8009fe0 <_Bfree>
 8009b12:	2300      	movs	r3, #0
 8009b14:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009b16:	27a3      	movs	r7, #163	; 0xa3
 8009b18:	6013      	str	r3, [r2, #0]
 8009b1a:	e789      	b.n	8009a30 <__gethex+0x124>
 8009b1c:	1e73      	subs	r3, r6, #1
 8009b1e:	9a06      	ldr	r2, [sp, #24]
 8009b20:	9307      	str	r3, [sp, #28]
 8009b22:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009b26:	4293      	cmp	r3, r2
 8009b28:	d019      	beq.n	8009b5e <__gethex+0x252>
 8009b2a:	f1bb 0f20 	cmp.w	fp, #32
 8009b2e:	d107      	bne.n	8009b40 <__gethex+0x234>
 8009b30:	9b04      	ldr	r3, [sp, #16]
 8009b32:	9a01      	ldr	r2, [sp, #4]
 8009b34:	f843 2b04 	str.w	r2, [r3], #4
 8009b38:	9304      	str	r3, [sp, #16]
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	469b      	mov	fp, r3
 8009b3e:	9301      	str	r3, [sp, #4]
 8009b40:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009b44:	f7ff fecd 	bl	80098e2 <__hexdig_fun>
 8009b48:	9b01      	ldr	r3, [sp, #4]
 8009b4a:	f000 000f 	and.w	r0, r0, #15
 8009b4e:	fa00 f00b 	lsl.w	r0, r0, fp
 8009b52:	4303      	orrs	r3, r0
 8009b54:	9301      	str	r3, [sp, #4]
 8009b56:	f10b 0b04 	add.w	fp, fp, #4
 8009b5a:	9b07      	ldr	r3, [sp, #28]
 8009b5c:	e00d      	b.n	8009b7a <__gethex+0x26e>
 8009b5e:	9a08      	ldr	r2, [sp, #32]
 8009b60:	1e73      	subs	r3, r6, #1
 8009b62:	4413      	add	r3, r2
 8009b64:	42bb      	cmp	r3, r7
 8009b66:	d3e0      	bcc.n	8009b2a <__gethex+0x21e>
 8009b68:	4618      	mov	r0, r3
 8009b6a:	4652      	mov	r2, sl
 8009b6c:	9903      	ldr	r1, [sp, #12]
 8009b6e:	9309      	str	r3, [sp, #36]	; 0x24
 8009b70:	f001 f910 	bl	800ad94 <strncmp>
 8009b74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b76:	2800      	cmp	r0, #0
 8009b78:	d1d7      	bne.n	8009b2a <__gethex+0x21e>
 8009b7a:	461e      	mov	r6, r3
 8009b7c:	e78c      	b.n	8009a98 <__gethex+0x18c>
 8009b7e:	f04f 0a03 	mov.w	sl, #3
 8009b82:	e7b9      	b.n	8009af8 <__gethex+0x1ec>
 8009b84:	da09      	bge.n	8009b9a <__gethex+0x28e>
 8009b86:	1bf7      	subs	r7, r6, r7
 8009b88:	4621      	mov	r1, r4
 8009b8a:	463a      	mov	r2, r7
 8009b8c:	9802      	ldr	r0, [sp, #8]
 8009b8e:	f000 fc3f 	bl	800a410 <__lshift>
 8009b92:	4604      	mov	r4, r0
 8009b94:	1bed      	subs	r5, r5, r7
 8009b96:	f100 0914 	add.w	r9, r0, #20
 8009b9a:	f04f 0a00 	mov.w	sl, #0
 8009b9e:	e7b0      	b.n	8009b02 <__gethex+0x1f6>
 8009ba0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009ba4:	42a8      	cmp	r0, r5
 8009ba6:	dd72      	ble.n	8009c8e <__gethex+0x382>
 8009ba8:	1b45      	subs	r5, r0, r5
 8009baa:	42ae      	cmp	r6, r5
 8009bac:	dc35      	bgt.n	8009c1a <__gethex+0x30e>
 8009bae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009bb2:	2b02      	cmp	r3, #2
 8009bb4:	d029      	beq.n	8009c0a <__gethex+0x2fe>
 8009bb6:	2b03      	cmp	r3, #3
 8009bb8:	d02b      	beq.n	8009c12 <__gethex+0x306>
 8009bba:	2b01      	cmp	r3, #1
 8009bbc:	d11c      	bne.n	8009bf8 <__gethex+0x2ec>
 8009bbe:	42ae      	cmp	r6, r5
 8009bc0:	d11a      	bne.n	8009bf8 <__gethex+0x2ec>
 8009bc2:	2e01      	cmp	r6, #1
 8009bc4:	d112      	bne.n	8009bec <__gethex+0x2e0>
 8009bc6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009bca:	9a05      	ldr	r2, [sp, #20]
 8009bcc:	2762      	movs	r7, #98	; 0x62
 8009bce:	6013      	str	r3, [r2, #0]
 8009bd0:	2301      	movs	r3, #1
 8009bd2:	6123      	str	r3, [r4, #16]
 8009bd4:	f8c9 3000 	str.w	r3, [r9]
 8009bd8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009bda:	601c      	str	r4, [r3, #0]
 8009bdc:	e728      	b.n	8009a30 <__gethex+0x124>
 8009bde:	bf00      	nop
 8009be0:	0800c518 	.word	0x0800c518
 8009be4:	0800c4a0 	.word	0x0800c4a0
 8009be8:	0800c4b1 	.word	0x0800c4b1
 8009bec:	4620      	mov	r0, r4
 8009bee:	1e71      	subs	r1, r6, #1
 8009bf0:	f000 fe4d 	bl	800a88e <__any_on>
 8009bf4:	2800      	cmp	r0, #0
 8009bf6:	d1e6      	bne.n	8009bc6 <__gethex+0x2ba>
 8009bf8:	4621      	mov	r1, r4
 8009bfa:	9802      	ldr	r0, [sp, #8]
 8009bfc:	f000 f9f0 	bl	8009fe0 <_Bfree>
 8009c00:	2300      	movs	r3, #0
 8009c02:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009c04:	2750      	movs	r7, #80	; 0x50
 8009c06:	6013      	str	r3, [r2, #0]
 8009c08:	e712      	b.n	8009a30 <__gethex+0x124>
 8009c0a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d1f3      	bne.n	8009bf8 <__gethex+0x2ec>
 8009c10:	e7d9      	b.n	8009bc6 <__gethex+0x2ba>
 8009c12:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d1d6      	bne.n	8009bc6 <__gethex+0x2ba>
 8009c18:	e7ee      	b.n	8009bf8 <__gethex+0x2ec>
 8009c1a:	1e6f      	subs	r7, r5, #1
 8009c1c:	f1ba 0f00 	cmp.w	sl, #0
 8009c20:	d132      	bne.n	8009c88 <__gethex+0x37c>
 8009c22:	b127      	cbz	r7, 8009c2e <__gethex+0x322>
 8009c24:	4639      	mov	r1, r7
 8009c26:	4620      	mov	r0, r4
 8009c28:	f000 fe31 	bl	800a88e <__any_on>
 8009c2c:	4682      	mov	sl, r0
 8009c2e:	2101      	movs	r1, #1
 8009c30:	117b      	asrs	r3, r7, #5
 8009c32:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009c36:	f007 071f 	and.w	r7, r7, #31
 8009c3a:	fa01 f707 	lsl.w	r7, r1, r7
 8009c3e:	421f      	tst	r7, r3
 8009c40:	f04f 0702 	mov.w	r7, #2
 8009c44:	4629      	mov	r1, r5
 8009c46:	4620      	mov	r0, r4
 8009c48:	bf18      	it	ne
 8009c4a:	f04a 0a02 	orrne.w	sl, sl, #2
 8009c4e:	1b76      	subs	r6, r6, r5
 8009c50:	f7ff fdf4 	bl	800983c <rshift>
 8009c54:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009c58:	f1ba 0f00 	cmp.w	sl, #0
 8009c5c:	d048      	beq.n	8009cf0 <__gethex+0x3e4>
 8009c5e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009c62:	2b02      	cmp	r3, #2
 8009c64:	d015      	beq.n	8009c92 <__gethex+0x386>
 8009c66:	2b03      	cmp	r3, #3
 8009c68:	d017      	beq.n	8009c9a <__gethex+0x38e>
 8009c6a:	2b01      	cmp	r3, #1
 8009c6c:	d109      	bne.n	8009c82 <__gethex+0x376>
 8009c6e:	f01a 0f02 	tst.w	sl, #2
 8009c72:	d006      	beq.n	8009c82 <__gethex+0x376>
 8009c74:	f8d9 0000 	ldr.w	r0, [r9]
 8009c78:	ea4a 0a00 	orr.w	sl, sl, r0
 8009c7c:	f01a 0f01 	tst.w	sl, #1
 8009c80:	d10e      	bne.n	8009ca0 <__gethex+0x394>
 8009c82:	f047 0710 	orr.w	r7, r7, #16
 8009c86:	e033      	b.n	8009cf0 <__gethex+0x3e4>
 8009c88:	f04f 0a01 	mov.w	sl, #1
 8009c8c:	e7cf      	b.n	8009c2e <__gethex+0x322>
 8009c8e:	2701      	movs	r7, #1
 8009c90:	e7e2      	b.n	8009c58 <__gethex+0x34c>
 8009c92:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009c94:	f1c3 0301 	rsb	r3, r3, #1
 8009c98:	9315      	str	r3, [sp, #84]	; 0x54
 8009c9a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d0f0      	beq.n	8009c82 <__gethex+0x376>
 8009ca0:	f04f 0c00 	mov.w	ip, #0
 8009ca4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009ca8:	f104 0314 	add.w	r3, r4, #20
 8009cac:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009cb0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	f853 2b04 	ldr.w	r2, [r3], #4
 8009cba:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009cbe:	d01c      	beq.n	8009cfa <__gethex+0x3ee>
 8009cc0:	3201      	adds	r2, #1
 8009cc2:	6002      	str	r2, [r0, #0]
 8009cc4:	2f02      	cmp	r7, #2
 8009cc6:	f104 0314 	add.w	r3, r4, #20
 8009cca:	d13d      	bne.n	8009d48 <__gethex+0x43c>
 8009ccc:	f8d8 2000 	ldr.w	r2, [r8]
 8009cd0:	3a01      	subs	r2, #1
 8009cd2:	42b2      	cmp	r2, r6
 8009cd4:	d10a      	bne.n	8009cec <__gethex+0x3e0>
 8009cd6:	2201      	movs	r2, #1
 8009cd8:	1171      	asrs	r1, r6, #5
 8009cda:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009cde:	f006 061f 	and.w	r6, r6, #31
 8009ce2:	fa02 f606 	lsl.w	r6, r2, r6
 8009ce6:	421e      	tst	r6, r3
 8009ce8:	bf18      	it	ne
 8009cea:	4617      	movne	r7, r2
 8009cec:	f047 0720 	orr.w	r7, r7, #32
 8009cf0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009cf2:	601c      	str	r4, [r3, #0]
 8009cf4:	9b05      	ldr	r3, [sp, #20]
 8009cf6:	601d      	str	r5, [r3, #0]
 8009cf8:	e69a      	b.n	8009a30 <__gethex+0x124>
 8009cfa:	4299      	cmp	r1, r3
 8009cfc:	f843 cc04 	str.w	ip, [r3, #-4]
 8009d00:	d8d8      	bhi.n	8009cb4 <__gethex+0x3a8>
 8009d02:	68a3      	ldr	r3, [r4, #8]
 8009d04:	459b      	cmp	fp, r3
 8009d06:	db17      	blt.n	8009d38 <__gethex+0x42c>
 8009d08:	6861      	ldr	r1, [r4, #4]
 8009d0a:	9802      	ldr	r0, [sp, #8]
 8009d0c:	3101      	adds	r1, #1
 8009d0e:	f000 f927 	bl	8009f60 <_Balloc>
 8009d12:	4681      	mov	r9, r0
 8009d14:	b918      	cbnz	r0, 8009d1e <__gethex+0x412>
 8009d16:	4602      	mov	r2, r0
 8009d18:	2184      	movs	r1, #132	; 0x84
 8009d1a:	4b19      	ldr	r3, [pc, #100]	; (8009d80 <__gethex+0x474>)
 8009d1c:	e6ab      	b.n	8009a76 <__gethex+0x16a>
 8009d1e:	6922      	ldr	r2, [r4, #16]
 8009d20:	f104 010c 	add.w	r1, r4, #12
 8009d24:	3202      	adds	r2, #2
 8009d26:	0092      	lsls	r2, r2, #2
 8009d28:	300c      	adds	r0, #12
 8009d2a:	f7fd f98d 	bl	8007048 <memcpy>
 8009d2e:	4621      	mov	r1, r4
 8009d30:	9802      	ldr	r0, [sp, #8]
 8009d32:	f000 f955 	bl	8009fe0 <_Bfree>
 8009d36:	464c      	mov	r4, r9
 8009d38:	6923      	ldr	r3, [r4, #16]
 8009d3a:	1c5a      	adds	r2, r3, #1
 8009d3c:	6122      	str	r2, [r4, #16]
 8009d3e:	2201      	movs	r2, #1
 8009d40:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009d44:	615a      	str	r2, [r3, #20]
 8009d46:	e7bd      	b.n	8009cc4 <__gethex+0x3b8>
 8009d48:	6922      	ldr	r2, [r4, #16]
 8009d4a:	455a      	cmp	r2, fp
 8009d4c:	dd0b      	ble.n	8009d66 <__gethex+0x45a>
 8009d4e:	2101      	movs	r1, #1
 8009d50:	4620      	mov	r0, r4
 8009d52:	f7ff fd73 	bl	800983c <rshift>
 8009d56:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009d5a:	3501      	adds	r5, #1
 8009d5c:	42ab      	cmp	r3, r5
 8009d5e:	f6ff aed4 	blt.w	8009b0a <__gethex+0x1fe>
 8009d62:	2701      	movs	r7, #1
 8009d64:	e7c2      	b.n	8009cec <__gethex+0x3e0>
 8009d66:	f016 061f 	ands.w	r6, r6, #31
 8009d6a:	d0fa      	beq.n	8009d62 <__gethex+0x456>
 8009d6c:	4453      	add	r3, sl
 8009d6e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009d72:	f000 f9e7 	bl	800a144 <__hi0bits>
 8009d76:	f1c6 0620 	rsb	r6, r6, #32
 8009d7a:	42b0      	cmp	r0, r6
 8009d7c:	dbe7      	blt.n	8009d4e <__gethex+0x442>
 8009d7e:	e7f0      	b.n	8009d62 <__gethex+0x456>
 8009d80:	0800c4a0 	.word	0x0800c4a0

08009d84 <L_shift>:
 8009d84:	f1c2 0208 	rsb	r2, r2, #8
 8009d88:	0092      	lsls	r2, r2, #2
 8009d8a:	b570      	push	{r4, r5, r6, lr}
 8009d8c:	f1c2 0620 	rsb	r6, r2, #32
 8009d90:	6843      	ldr	r3, [r0, #4]
 8009d92:	6804      	ldr	r4, [r0, #0]
 8009d94:	fa03 f506 	lsl.w	r5, r3, r6
 8009d98:	432c      	orrs	r4, r5
 8009d9a:	40d3      	lsrs	r3, r2
 8009d9c:	6004      	str	r4, [r0, #0]
 8009d9e:	f840 3f04 	str.w	r3, [r0, #4]!
 8009da2:	4288      	cmp	r0, r1
 8009da4:	d3f4      	bcc.n	8009d90 <L_shift+0xc>
 8009da6:	bd70      	pop	{r4, r5, r6, pc}

08009da8 <__match>:
 8009da8:	b530      	push	{r4, r5, lr}
 8009daa:	6803      	ldr	r3, [r0, #0]
 8009dac:	3301      	adds	r3, #1
 8009dae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009db2:	b914      	cbnz	r4, 8009dba <__match+0x12>
 8009db4:	6003      	str	r3, [r0, #0]
 8009db6:	2001      	movs	r0, #1
 8009db8:	bd30      	pop	{r4, r5, pc}
 8009dba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009dbe:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009dc2:	2d19      	cmp	r5, #25
 8009dc4:	bf98      	it	ls
 8009dc6:	3220      	addls	r2, #32
 8009dc8:	42a2      	cmp	r2, r4
 8009dca:	d0f0      	beq.n	8009dae <__match+0x6>
 8009dcc:	2000      	movs	r0, #0
 8009dce:	e7f3      	b.n	8009db8 <__match+0x10>

08009dd0 <__hexnan>:
 8009dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dd4:	2500      	movs	r5, #0
 8009dd6:	680b      	ldr	r3, [r1, #0]
 8009dd8:	4682      	mov	sl, r0
 8009dda:	115e      	asrs	r6, r3, #5
 8009ddc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009de0:	f013 031f 	ands.w	r3, r3, #31
 8009de4:	bf18      	it	ne
 8009de6:	3604      	addne	r6, #4
 8009de8:	1f37      	subs	r7, r6, #4
 8009dea:	46b9      	mov	r9, r7
 8009dec:	463c      	mov	r4, r7
 8009dee:	46ab      	mov	fp, r5
 8009df0:	b087      	sub	sp, #28
 8009df2:	4690      	mov	r8, r2
 8009df4:	6802      	ldr	r2, [r0, #0]
 8009df6:	9301      	str	r3, [sp, #4]
 8009df8:	f846 5c04 	str.w	r5, [r6, #-4]
 8009dfc:	9502      	str	r5, [sp, #8]
 8009dfe:	7851      	ldrb	r1, [r2, #1]
 8009e00:	1c53      	adds	r3, r2, #1
 8009e02:	9303      	str	r3, [sp, #12]
 8009e04:	b341      	cbz	r1, 8009e58 <__hexnan+0x88>
 8009e06:	4608      	mov	r0, r1
 8009e08:	9205      	str	r2, [sp, #20]
 8009e0a:	9104      	str	r1, [sp, #16]
 8009e0c:	f7ff fd69 	bl	80098e2 <__hexdig_fun>
 8009e10:	2800      	cmp	r0, #0
 8009e12:	d14f      	bne.n	8009eb4 <__hexnan+0xe4>
 8009e14:	9904      	ldr	r1, [sp, #16]
 8009e16:	9a05      	ldr	r2, [sp, #20]
 8009e18:	2920      	cmp	r1, #32
 8009e1a:	d818      	bhi.n	8009e4e <__hexnan+0x7e>
 8009e1c:	9b02      	ldr	r3, [sp, #8]
 8009e1e:	459b      	cmp	fp, r3
 8009e20:	dd13      	ble.n	8009e4a <__hexnan+0x7a>
 8009e22:	454c      	cmp	r4, r9
 8009e24:	d206      	bcs.n	8009e34 <__hexnan+0x64>
 8009e26:	2d07      	cmp	r5, #7
 8009e28:	dc04      	bgt.n	8009e34 <__hexnan+0x64>
 8009e2a:	462a      	mov	r2, r5
 8009e2c:	4649      	mov	r1, r9
 8009e2e:	4620      	mov	r0, r4
 8009e30:	f7ff ffa8 	bl	8009d84 <L_shift>
 8009e34:	4544      	cmp	r4, r8
 8009e36:	d950      	bls.n	8009eda <__hexnan+0x10a>
 8009e38:	2300      	movs	r3, #0
 8009e3a:	f1a4 0904 	sub.w	r9, r4, #4
 8009e3e:	f844 3c04 	str.w	r3, [r4, #-4]
 8009e42:	461d      	mov	r5, r3
 8009e44:	464c      	mov	r4, r9
 8009e46:	f8cd b008 	str.w	fp, [sp, #8]
 8009e4a:	9a03      	ldr	r2, [sp, #12]
 8009e4c:	e7d7      	b.n	8009dfe <__hexnan+0x2e>
 8009e4e:	2929      	cmp	r1, #41	; 0x29
 8009e50:	d156      	bne.n	8009f00 <__hexnan+0x130>
 8009e52:	3202      	adds	r2, #2
 8009e54:	f8ca 2000 	str.w	r2, [sl]
 8009e58:	f1bb 0f00 	cmp.w	fp, #0
 8009e5c:	d050      	beq.n	8009f00 <__hexnan+0x130>
 8009e5e:	454c      	cmp	r4, r9
 8009e60:	d206      	bcs.n	8009e70 <__hexnan+0xa0>
 8009e62:	2d07      	cmp	r5, #7
 8009e64:	dc04      	bgt.n	8009e70 <__hexnan+0xa0>
 8009e66:	462a      	mov	r2, r5
 8009e68:	4649      	mov	r1, r9
 8009e6a:	4620      	mov	r0, r4
 8009e6c:	f7ff ff8a 	bl	8009d84 <L_shift>
 8009e70:	4544      	cmp	r4, r8
 8009e72:	d934      	bls.n	8009ede <__hexnan+0x10e>
 8009e74:	4623      	mov	r3, r4
 8009e76:	f1a8 0204 	sub.w	r2, r8, #4
 8009e7a:	f853 1b04 	ldr.w	r1, [r3], #4
 8009e7e:	429f      	cmp	r7, r3
 8009e80:	f842 1f04 	str.w	r1, [r2, #4]!
 8009e84:	d2f9      	bcs.n	8009e7a <__hexnan+0xaa>
 8009e86:	1b3b      	subs	r3, r7, r4
 8009e88:	f023 0303 	bic.w	r3, r3, #3
 8009e8c:	3304      	adds	r3, #4
 8009e8e:	3401      	adds	r4, #1
 8009e90:	3e03      	subs	r6, #3
 8009e92:	42b4      	cmp	r4, r6
 8009e94:	bf88      	it	hi
 8009e96:	2304      	movhi	r3, #4
 8009e98:	2200      	movs	r2, #0
 8009e9a:	4443      	add	r3, r8
 8009e9c:	f843 2b04 	str.w	r2, [r3], #4
 8009ea0:	429f      	cmp	r7, r3
 8009ea2:	d2fb      	bcs.n	8009e9c <__hexnan+0xcc>
 8009ea4:	683b      	ldr	r3, [r7, #0]
 8009ea6:	b91b      	cbnz	r3, 8009eb0 <__hexnan+0xe0>
 8009ea8:	4547      	cmp	r7, r8
 8009eaa:	d127      	bne.n	8009efc <__hexnan+0x12c>
 8009eac:	2301      	movs	r3, #1
 8009eae:	603b      	str	r3, [r7, #0]
 8009eb0:	2005      	movs	r0, #5
 8009eb2:	e026      	b.n	8009f02 <__hexnan+0x132>
 8009eb4:	3501      	adds	r5, #1
 8009eb6:	2d08      	cmp	r5, #8
 8009eb8:	f10b 0b01 	add.w	fp, fp, #1
 8009ebc:	dd06      	ble.n	8009ecc <__hexnan+0xfc>
 8009ebe:	4544      	cmp	r4, r8
 8009ec0:	d9c3      	bls.n	8009e4a <__hexnan+0x7a>
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	2501      	movs	r5, #1
 8009ec6:	f844 3c04 	str.w	r3, [r4, #-4]
 8009eca:	3c04      	subs	r4, #4
 8009ecc:	6822      	ldr	r2, [r4, #0]
 8009ece:	f000 000f 	and.w	r0, r0, #15
 8009ed2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8009ed6:	6022      	str	r2, [r4, #0]
 8009ed8:	e7b7      	b.n	8009e4a <__hexnan+0x7a>
 8009eda:	2508      	movs	r5, #8
 8009edc:	e7b5      	b.n	8009e4a <__hexnan+0x7a>
 8009ede:	9b01      	ldr	r3, [sp, #4]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d0df      	beq.n	8009ea4 <__hexnan+0xd4>
 8009ee4:	f04f 32ff 	mov.w	r2, #4294967295
 8009ee8:	f1c3 0320 	rsb	r3, r3, #32
 8009eec:	fa22 f303 	lsr.w	r3, r2, r3
 8009ef0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009ef4:	401a      	ands	r2, r3
 8009ef6:	f846 2c04 	str.w	r2, [r6, #-4]
 8009efa:	e7d3      	b.n	8009ea4 <__hexnan+0xd4>
 8009efc:	3f04      	subs	r7, #4
 8009efe:	e7d1      	b.n	8009ea4 <__hexnan+0xd4>
 8009f00:	2004      	movs	r0, #4
 8009f02:	b007      	add	sp, #28
 8009f04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009f08 <_localeconv_r>:
 8009f08:	4800      	ldr	r0, [pc, #0]	; (8009f0c <_localeconv_r+0x4>)
 8009f0a:	4770      	bx	lr
 8009f0c:	20000170 	.word	0x20000170

08009f10 <malloc>:
 8009f10:	4b02      	ldr	r3, [pc, #8]	; (8009f1c <malloc+0xc>)
 8009f12:	4601      	mov	r1, r0
 8009f14:	6818      	ldr	r0, [r3, #0]
 8009f16:	f000 bd57 	b.w	800a9c8 <_malloc_r>
 8009f1a:	bf00      	nop
 8009f1c:	20000018 	.word	0x20000018

08009f20 <__ascii_mbtowc>:
 8009f20:	b082      	sub	sp, #8
 8009f22:	b901      	cbnz	r1, 8009f26 <__ascii_mbtowc+0x6>
 8009f24:	a901      	add	r1, sp, #4
 8009f26:	b142      	cbz	r2, 8009f3a <__ascii_mbtowc+0x1a>
 8009f28:	b14b      	cbz	r3, 8009f3e <__ascii_mbtowc+0x1e>
 8009f2a:	7813      	ldrb	r3, [r2, #0]
 8009f2c:	600b      	str	r3, [r1, #0]
 8009f2e:	7812      	ldrb	r2, [r2, #0]
 8009f30:	1e10      	subs	r0, r2, #0
 8009f32:	bf18      	it	ne
 8009f34:	2001      	movne	r0, #1
 8009f36:	b002      	add	sp, #8
 8009f38:	4770      	bx	lr
 8009f3a:	4610      	mov	r0, r2
 8009f3c:	e7fb      	b.n	8009f36 <__ascii_mbtowc+0x16>
 8009f3e:	f06f 0001 	mvn.w	r0, #1
 8009f42:	e7f8      	b.n	8009f36 <__ascii_mbtowc+0x16>

08009f44 <memchr>:
 8009f44:	4603      	mov	r3, r0
 8009f46:	b510      	push	{r4, lr}
 8009f48:	b2c9      	uxtb	r1, r1
 8009f4a:	4402      	add	r2, r0
 8009f4c:	4293      	cmp	r3, r2
 8009f4e:	4618      	mov	r0, r3
 8009f50:	d101      	bne.n	8009f56 <memchr+0x12>
 8009f52:	2000      	movs	r0, #0
 8009f54:	e003      	b.n	8009f5e <memchr+0x1a>
 8009f56:	7804      	ldrb	r4, [r0, #0]
 8009f58:	3301      	adds	r3, #1
 8009f5a:	428c      	cmp	r4, r1
 8009f5c:	d1f6      	bne.n	8009f4c <memchr+0x8>
 8009f5e:	bd10      	pop	{r4, pc}

08009f60 <_Balloc>:
 8009f60:	b570      	push	{r4, r5, r6, lr}
 8009f62:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009f64:	4604      	mov	r4, r0
 8009f66:	460d      	mov	r5, r1
 8009f68:	b976      	cbnz	r6, 8009f88 <_Balloc+0x28>
 8009f6a:	2010      	movs	r0, #16
 8009f6c:	f7ff ffd0 	bl	8009f10 <malloc>
 8009f70:	4602      	mov	r2, r0
 8009f72:	6260      	str	r0, [r4, #36]	; 0x24
 8009f74:	b920      	cbnz	r0, 8009f80 <_Balloc+0x20>
 8009f76:	2166      	movs	r1, #102	; 0x66
 8009f78:	4b17      	ldr	r3, [pc, #92]	; (8009fd8 <_Balloc+0x78>)
 8009f7a:	4818      	ldr	r0, [pc, #96]	; (8009fdc <_Balloc+0x7c>)
 8009f7c:	f000 ff2c 	bl	800add8 <__assert_func>
 8009f80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009f84:	6006      	str	r6, [r0, #0]
 8009f86:	60c6      	str	r6, [r0, #12]
 8009f88:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009f8a:	68f3      	ldr	r3, [r6, #12]
 8009f8c:	b183      	cbz	r3, 8009fb0 <_Balloc+0x50>
 8009f8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009f90:	68db      	ldr	r3, [r3, #12]
 8009f92:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009f96:	b9b8      	cbnz	r0, 8009fc8 <_Balloc+0x68>
 8009f98:	2101      	movs	r1, #1
 8009f9a:	fa01 f605 	lsl.w	r6, r1, r5
 8009f9e:	1d72      	adds	r2, r6, #5
 8009fa0:	4620      	mov	r0, r4
 8009fa2:	0092      	lsls	r2, r2, #2
 8009fa4:	f000 fc94 	bl	800a8d0 <_calloc_r>
 8009fa8:	b160      	cbz	r0, 8009fc4 <_Balloc+0x64>
 8009faa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009fae:	e00e      	b.n	8009fce <_Balloc+0x6e>
 8009fb0:	2221      	movs	r2, #33	; 0x21
 8009fb2:	2104      	movs	r1, #4
 8009fb4:	4620      	mov	r0, r4
 8009fb6:	f000 fc8b 	bl	800a8d0 <_calloc_r>
 8009fba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009fbc:	60f0      	str	r0, [r6, #12]
 8009fbe:	68db      	ldr	r3, [r3, #12]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d1e4      	bne.n	8009f8e <_Balloc+0x2e>
 8009fc4:	2000      	movs	r0, #0
 8009fc6:	bd70      	pop	{r4, r5, r6, pc}
 8009fc8:	6802      	ldr	r2, [r0, #0]
 8009fca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009fce:	2300      	movs	r3, #0
 8009fd0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009fd4:	e7f7      	b.n	8009fc6 <_Balloc+0x66>
 8009fd6:	bf00      	nop
 8009fd8:	0800c42e 	.word	0x0800c42e
 8009fdc:	0800c52c 	.word	0x0800c52c

08009fe0 <_Bfree>:
 8009fe0:	b570      	push	{r4, r5, r6, lr}
 8009fe2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009fe4:	4605      	mov	r5, r0
 8009fe6:	460c      	mov	r4, r1
 8009fe8:	b976      	cbnz	r6, 800a008 <_Bfree+0x28>
 8009fea:	2010      	movs	r0, #16
 8009fec:	f7ff ff90 	bl	8009f10 <malloc>
 8009ff0:	4602      	mov	r2, r0
 8009ff2:	6268      	str	r0, [r5, #36]	; 0x24
 8009ff4:	b920      	cbnz	r0, 800a000 <_Bfree+0x20>
 8009ff6:	218a      	movs	r1, #138	; 0x8a
 8009ff8:	4b08      	ldr	r3, [pc, #32]	; (800a01c <_Bfree+0x3c>)
 8009ffa:	4809      	ldr	r0, [pc, #36]	; (800a020 <_Bfree+0x40>)
 8009ffc:	f000 feec 	bl	800add8 <__assert_func>
 800a000:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a004:	6006      	str	r6, [r0, #0]
 800a006:	60c6      	str	r6, [r0, #12]
 800a008:	b13c      	cbz	r4, 800a01a <_Bfree+0x3a>
 800a00a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a00c:	6862      	ldr	r2, [r4, #4]
 800a00e:	68db      	ldr	r3, [r3, #12]
 800a010:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a014:	6021      	str	r1, [r4, #0]
 800a016:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a01a:	bd70      	pop	{r4, r5, r6, pc}
 800a01c:	0800c42e 	.word	0x0800c42e
 800a020:	0800c52c 	.word	0x0800c52c

0800a024 <__multadd>:
 800a024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a028:	4607      	mov	r7, r0
 800a02a:	460c      	mov	r4, r1
 800a02c:	461e      	mov	r6, r3
 800a02e:	2000      	movs	r0, #0
 800a030:	690d      	ldr	r5, [r1, #16]
 800a032:	f101 0c14 	add.w	ip, r1, #20
 800a036:	f8dc 3000 	ldr.w	r3, [ip]
 800a03a:	3001      	adds	r0, #1
 800a03c:	b299      	uxth	r1, r3
 800a03e:	fb02 6101 	mla	r1, r2, r1, r6
 800a042:	0c1e      	lsrs	r6, r3, #16
 800a044:	0c0b      	lsrs	r3, r1, #16
 800a046:	fb02 3306 	mla	r3, r2, r6, r3
 800a04a:	b289      	uxth	r1, r1
 800a04c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a050:	4285      	cmp	r5, r0
 800a052:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a056:	f84c 1b04 	str.w	r1, [ip], #4
 800a05a:	dcec      	bgt.n	800a036 <__multadd+0x12>
 800a05c:	b30e      	cbz	r6, 800a0a2 <__multadd+0x7e>
 800a05e:	68a3      	ldr	r3, [r4, #8]
 800a060:	42ab      	cmp	r3, r5
 800a062:	dc19      	bgt.n	800a098 <__multadd+0x74>
 800a064:	6861      	ldr	r1, [r4, #4]
 800a066:	4638      	mov	r0, r7
 800a068:	3101      	adds	r1, #1
 800a06a:	f7ff ff79 	bl	8009f60 <_Balloc>
 800a06e:	4680      	mov	r8, r0
 800a070:	b928      	cbnz	r0, 800a07e <__multadd+0x5a>
 800a072:	4602      	mov	r2, r0
 800a074:	21b5      	movs	r1, #181	; 0xb5
 800a076:	4b0c      	ldr	r3, [pc, #48]	; (800a0a8 <__multadd+0x84>)
 800a078:	480c      	ldr	r0, [pc, #48]	; (800a0ac <__multadd+0x88>)
 800a07a:	f000 fead 	bl	800add8 <__assert_func>
 800a07e:	6922      	ldr	r2, [r4, #16]
 800a080:	f104 010c 	add.w	r1, r4, #12
 800a084:	3202      	adds	r2, #2
 800a086:	0092      	lsls	r2, r2, #2
 800a088:	300c      	adds	r0, #12
 800a08a:	f7fc ffdd 	bl	8007048 <memcpy>
 800a08e:	4621      	mov	r1, r4
 800a090:	4638      	mov	r0, r7
 800a092:	f7ff ffa5 	bl	8009fe0 <_Bfree>
 800a096:	4644      	mov	r4, r8
 800a098:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a09c:	3501      	adds	r5, #1
 800a09e:	615e      	str	r6, [r3, #20]
 800a0a0:	6125      	str	r5, [r4, #16]
 800a0a2:	4620      	mov	r0, r4
 800a0a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a0a8:	0800c4a0 	.word	0x0800c4a0
 800a0ac:	0800c52c 	.word	0x0800c52c

0800a0b0 <__s2b>:
 800a0b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a0b4:	4615      	mov	r5, r2
 800a0b6:	2209      	movs	r2, #9
 800a0b8:	461f      	mov	r7, r3
 800a0ba:	3308      	adds	r3, #8
 800a0bc:	460c      	mov	r4, r1
 800a0be:	fb93 f3f2 	sdiv	r3, r3, r2
 800a0c2:	4606      	mov	r6, r0
 800a0c4:	2201      	movs	r2, #1
 800a0c6:	2100      	movs	r1, #0
 800a0c8:	429a      	cmp	r2, r3
 800a0ca:	db09      	blt.n	800a0e0 <__s2b+0x30>
 800a0cc:	4630      	mov	r0, r6
 800a0ce:	f7ff ff47 	bl	8009f60 <_Balloc>
 800a0d2:	b940      	cbnz	r0, 800a0e6 <__s2b+0x36>
 800a0d4:	4602      	mov	r2, r0
 800a0d6:	21ce      	movs	r1, #206	; 0xce
 800a0d8:	4b18      	ldr	r3, [pc, #96]	; (800a13c <__s2b+0x8c>)
 800a0da:	4819      	ldr	r0, [pc, #100]	; (800a140 <__s2b+0x90>)
 800a0dc:	f000 fe7c 	bl	800add8 <__assert_func>
 800a0e0:	0052      	lsls	r2, r2, #1
 800a0e2:	3101      	adds	r1, #1
 800a0e4:	e7f0      	b.n	800a0c8 <__s2b+0x18>
 800a0e6:	9b08      	ldr	r3, [sp, #32]
 800a0e8:	2d09      	cmp	r5, #9
 800a0ea:	6143      	str	r3, [r0, #20]
 800a0ec:	f04f 0301 	mov.w	r3, #1
 800a0f0:	6103      	str	r3, [r0, #16]
 800a0f2:	dd16      	ble.n	800a122 <__s2b+0x72>
 800a0f4:	f104 0909 	add.w	r9, r4, #9
 800a0f8:	46c8      	mov	r8, r9
 800a0fa:	442c      	add	r4, r5
 800a0fc:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a100:	4601      	mov	r1, r0
 800a102:	220a      	movs	r2, #10
 800a104:	4630      	mov	r0, r6
 800a106:	3b30      	subs	r3, #48	; 0x30
 800a108:	f7ff ff8c 	bl	800a024 <__multadd>
 800a10c:	45a0      	cmp	r8, r4
 800a10e:	d1f5      	bne.n	800a0fc <__s2b+0x4c>
 800a110:	f1a5 0408 	sub.w	r4, r5, #8
 800a114:	444c      	add	r4, r9
 800a116:	1b2d      	subs	r5, r5, r4
 800a118:	1963      	adds	r3, r4, r5
 800a11a:	42bb      	cmp	r3, r7
 800a11c:	db04      	blt.n	800a128 <__s2b+0x78>
 800a11e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a122:	2509      	movs	r5, #9
 800a124:	340a      	adds	r4, #10
 800a126:	e7f6      	b.n	800a116 <__s2b+0x66>
 800a128:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a12c:	4601      	mov	r1, r0
 800a12e:	220a      	movs	r2, #10
 800a130:	4630      	mov	r0, r6
 800a132:	3b30      	subs	r3, #48	; 0x30
 800a134:	f7ff ff76 	bl	800a024 <__multadd>
 800a138:	e7ee      	b.n	800a118 <__s2b+0x68>
 800a13a:	bf00      	nop
 800a13c:	0800c4a0 	.word	0x0800c4a0
 800a140:	0800c52c 	.word	0x0800c52c

0800a144 <__hi0bits>:
 800a144:	0c02      	lsrs	r2, r0, #16
 800a146:	0412      	lsls	r2, r2, #16
 800a148:	4603      	mov	r3, r0
 800a14a:	b9ca      	cbnz	r2, 800a180 <__hi0bits+0x3c>
 800a14c:	0403      	lsls	r3, r0, #16
 800a14e:	2010      	movs	r0, #16
 800a150:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800a154:	bf04      	itt	eq
 800a156:	021b      	lsleq	r3, r3, #8
 800a158:	3008      	addeq	r0, #8
 800a15a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800a15e:	bf04      	itt	eq
 800a160:	011b      	lsleq	r3, r3, #4
 800a162:	3004      	addeq	r0, #4
 800a164:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800a168:	bf04      	itt	eq
 800a16a:	009b      	lsleq	r3, r3, #2
 800a16c:	3002      	addeq	r0, #2
 800a16e:	2b00      	cmp	r3, #0
 800a170:	db05      	blt.n	800a17e <__hi0bits+0x3a>
 800a172:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800a176:	f100 0001 	add.w	r0, r0, #1
 800a17a:	bf08      	it	eq
 800a17c:	2020      	moveq	r0, #32
 800a17e:	4770      	bx	lr
 800a180:	2000      	movs	r0, #0
 800a182:	e7e5      	b.n	800a150 <__hi0bits+0xc>

0800a184 <__lo0bits>:
 800a184:	6803      	ldr	r3, [r0, #0]
 800a186:	4602      	mov	r2, r0
 800a188:	f013 0007 	ands.w	r0, r3, #7
 800a18c:	d00b      	beq.n	800a1a6 <__lo0bits+0x22>
 800a18e:	07d9      	lsls	r1, r3, #31
 800a190:	d421      	bmi.n	800a1d6 <__lo0bits+0x52>
 800a192:	0798      	lsls	r0, r3, #30
 800a194:	bf49      	itett	mi
 800a196:	085b      	lsrmi	r3, r3, #1
 800a198:	089b      	lsrpl	r3, r3, #2
 800a19a:	2001      	movmi	r0, #1
 800a19c:	6013      	strmi	r3, [r2, #0]
 800a19e:	bf5c      	itt	pl
 800a1a0:	2002      	movpl	r0, #2
 800a1a2:	6013      	strpl	r3, [r2, #0]
 800a1a4:	4770      	bx	lr
 800a1a6:	b299      	uxth	r1, r3
 800a1a8:	b909      	cbnz	r1, 800a1ae <__lo0bits+0x2a>
 800a1aa:	2010      	movs	r0, #16
 800a1ac:	0c1b      	lsrs	r3, r3, #16
 800a1ae:	b2d9      	uxtb	r1, r3
 800a1b0:	b909      	cbnz	r1, 800a1b6 <__lo0bits+0x32>
 800a1b2:	3008      	adds	r0, #8
 800a1b4:	0a1b      	lsrs	r3, r3, #8
 800a1b6:	0719      	lsls	r1, r3, #28
 800a1b8:	bf04      	itt	eq
 800a1ba:	091b      	lsreq	r3, r3, #4
 800a1bc:	3004      	addeq	r0, #4
 800a1be:	0799      	lsls	r1, r3, #30
 800a1c0:	bf04      	itt	eq
 800a1c2:	089b      	lsreq	r3, r3, #2
 800a1c4:	3002      	addeq	r0, #2
 800a1c6:	07d9      	lsls	r1, r3, #31
 800a1c8:	d403      	bmi.n	800a1d2 <__lo0bits+0x4e>
 800a1ca:	085b      	lsrs	r3, r3, #1
 800a1cc:	f100 0001 	add.w	r0, r0, #1
 800a1d0:	d003      	beq.n	800a1da <__lo0bits+0x56>
 800a1d2:	6013      	str	r3, [r2, #0]
 800a1d4:	4770      	bx	lr
 800a1d6:	2000      	movs	r0, #0
 800a1d8:	4770      	bx	lr
 800a1da:	2020      	movs	r0, #32
 800a1dc:	4770      	bx	lr
	...

0800a1e0 <__i2b>:
 800a1e0:	b510      	push	{r4, lr}
 800a1e2:	460c      	mov	r4, r1
 800a1e4:	2101      	movs	r1, #1
 800a1e6:	f7ff febb 	bl	8009f60 <_Balloc>
 800a1ea:	4602      	mov	r2, r0
 800a1ec:	b928      	cbnz	r0, 800a1fa <__i2b+0x1a>
 800a1ee:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a1f2:	4b04      	ldr	r3, [pc, #16]	; (800a204 <__i2b+0x24>)
 800a1f4:	4804      	ldr	r0, [pc, #16]	; (800a208 <__i2b+0x28>)
 800a1f6:	f000 fdef 	bl	800add8 <__assert_func>
 800a1fa:	2301      	movs	r3, #1
 800a1fc:	6144      	str	r4, [r0, #20]
 800a1fe:	6103      	str	r3, [r0, #16]
 800a200:	bd10      	pop	{r4, pc}
 800a202:	bf00      	nop
 800a204:	0800c4a0 	.word	0x0800c4a0
 800a208:	0800c52c 	.word	0x0800c52c

0800a20c <__multiply>:
 800a20c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a210:	4691      	mov	r9, r2
 800a212:	690a      	ldr	r2, [r1, #16]
 800a214:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a218:	460c      	mov	r4, r1
 800a21a:	429a      	cmp	r2, r3
 800a21c:	bfbe      	ittt	lt
 800a21e:	460b      	movlt	r3, r1
 800a220:	464c      	movlt	r4, r9
 800a222:	4699      	movlt	r9, r3
 800a224:	6927      	ldr	r7, [r4, #16]
 800a226:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a22a:	68a3      	ldr	r3, [r4, #8]
 800a22c:	6861      	ldr	r1, [r4, #4]
 800a22e:	eb07 060a 	add.w	r6, r7, sl
 800a232:	42b3      	cmp	r3, r6
 800a234:	b085      	sub	sp, #20
 800a236:	bfb8      	it	lt
 800a238:	3101      	addlt	r1, #1
 800a23a:	f7ff fe91 	bl	8009f60 <_Balloc>
 800a23e:	b930      	cbnz	r0, 800a24e <__multiply+0x42>
 800a240:	4602      	mov	r2, r0
 800a242:	f240 115d 	movw	r1, #349	; 0x15d
 800a246:	4b43      	ldr	r3, [pc, #268]	; (800a354 <__multiply+0x148>)
 800a248:	4843      	ldr	r0, [pc, #268]	; (800a358 <__multiply+0x14c>)
 800a24a:	f000 fdc5 	bl	800add8 <__assert_func>
 800a24e:	f100 0514 	add.w	r5, r0, #20
 800a252:	462b      	mov	r3, r5
 800a254:	2200      	movs	r2, #0
 800a256:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a25a:	4543      	cmp	r3, r8
 800a25c:	d321      	bcc.n	800a2a2 <__multiply+0x96>
 800a25e:	f104 0314 	add.w	r3, r4, #20
 800a262:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a266:	f109 0314 	add.w	r3, r9, #20
 800a26a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a26e:	9202      	str	r2, [sp, #8]
 800a270:	1b3a      	subs	r2, r7, r4
 800a272:	3a15      	subs	r2, #21
 800a274:	f022 0203 	bic.w	r2, r2, #3
 800a278:	3204      	adds	r2, #4
 800a27a:	f104 0115 	add.w	r1, r4, #21
 800a27e:	428f      	cmp	r7, r1
 800a280:	bf38      	it	cc
 800a282:	2204      	movcc	r2, #4
 800a284:	9201      	str	r2, [sp, #4]
 800a286:	9a02      	ldr	r2, [sp, #8]
 800a288:	9303      	str	r3, [sp, #12]
 800a28a:	429a      	cmp	r2, r3
 800a28c:	d80c      	bhi.n	800a2a8 <__multiply+0x9c>
 800a28e:	2e00      	cmp	r6, #0
 800a290:	dd03      	ble.n	800a29a <__multiply+0x8e>
 800a292:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a296:	2b00      	cmp	r3, #0
 800a298:	d059      	beq.n	800a34e <__multiply+0x142>
 800a29a:	6106      	str	r6, [r0, #16]
 800a29c:	b005      	add	sp, #20
 800a29e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2a2:	f843 2b04 	str.w	r2, [r3], #4
 800a2a6:	e7d8      	b.n	800a25a <__multiply+0x4e>
 800a2a8:	f8b3 a000 	ldrh.w	sl, [r3]
 800a2ac:	f1ba 0f00 	cmp.w	sl, #0
 800a2b0:	d023      	beq.n	800a2fa <__multiply+0xee>
 800a2b2:	46a9      	mov	r9, r5
 800a2b4:	f04f 0c00 	mov.w	ip, #0
 800a2b8:	f104 0e14 	add.w	lr, r4, #20
 800a2bc:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a2c0:	f8d9 1000 	ldr.w	r1, [r9]
 800a2c4:	fa1f fb82 	uxth.w	fp, r2
 800a2c8:	b289      	uxth	r1, r1
 800a2ca:	fb0a 110b 	mla	r1, sl, fp, r1
 800a2ce:	4461      	add	r1, ip
 800a2d0:	f8d9 c000 	ldr.w	ip, [r9]
 800a2d4:	0c12      	lsrs	r2, r2, #16
 800a2d6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800a2da:	fb0a c202 	mla	r2, sl, r2, ip
 800a2de:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a2e2:	b289      	uxth	r1, r1
 800a2e4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a2e8:	4577      	cmp	r7, lr
 800a2ea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a2ee:	f849 1b04 	str.w	r1, [r9], #4
 800a2f2:	d8e3      	bhi.n	800a2bc <__multiply+0xb0>
 800a2f4:	9a01      	ldr	r2, [sp, #4]
 800a2f6:	f845 c002 	str.w	ip, [r5, r2]
 800a2fa:	9a03      	ldr	r2, [sp, #12]
 800a2fc:	3304      	adds	r3, #4
 800a2fe:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a302:	f1b9 0f00 	cmp.w	r9, #0
 800a306:	d020      	beq.n	800a34a <__multiply+0x13e>
 800a308:	46ae      	mov	lr, r5
 800a30a:	f04f 0a00 	mov.w	sl, #0
 800a30e:	6829      	ldr	r1, [r5, #0]
 800a310:	f104 0c14 	add.w	ip, r4, #20
 800a314:	f8bc b000 	ldrh.w	fp, [ip]
 800a318:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a31c:	b289      	uxth	r1, r1
 800a31e:	fb09 220b 	mla	r2, r9, fp, r2
 800a322:	4492      	add	sl, r2
 800a324:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a328:	f84e 1b04 	str.w	r1, [lr], #4
 800a32c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a330:	f8be 1000 	ldrh.w	r1, [lr]
 800a334:	0c12      	lsrs	r2, r2, #16
 800a336:	fb09 1102 	mla	r1, r9, r2, r1
 800a33a:	4567      	cmp	r7, ip
 800a33c:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a340:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a344:	d8e6      	bhi.n	800a314 <__multiply+0x108>
 800a346:	9a01      	ldr	r2, [sp, #4]
 800a348:	50a9      	str	r1, [r5, r2]
 800a34a:	3504      	adds	r5, #4
 800a34c:	e79b      	b.n	800a286 <__multiply+0x7a>
 800a34e:	3e01      	subs	r6, #1
 800a350:	e79d      	b.n	800a28e <__multiply+0x82>
 800a352:	bf00      	nop
 800a354:	0800c4a0 	.word	0x0800c4a0
 800a358:	0800c52c 	.word	0x0800c52c

0800a35c <__pow5mult>:
 800a35c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a360:	4615      	mov	r5, r2
 800a362:	f012 0203 	ands.w	r2, r2, #3
 800a366:	4606      	mov	r6, r0
 800a368:	460f      	mov	r7, r1
 800a36a:	d007      	beq.n	800a37c <__pow5mult+0x20>
 800a36c:	4c25      	ldr	r4, [pc, #148]	; (800a404 <__pow5mult+0xa8>)
 800a36e:	3a01      	subs	r2, #1
 800a370:	2300      	movs	r3, #0
 800a372:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a376:	f7ff fe55 	bl	800a024 <__multadd>
 800a37a:	4607      	mov	r7, r0
 800a37c:	10ad      	asrs	r5, r5, #2
 800a37e:	d03d      	beq.n	800a3fc <__pow5mult+0xa0>
 800a380:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a382:	b97c      	cbnz	r4, 800a3a4 <__pow5mult+0x48>
 800a384:	2010      	movs	r0, #16
 800a386:	f7ff fdc3 	bl	8009f10 <malloc>
 800a38a:	4602      	mov	r2, r0
 800a38c:	6270      	str	r0, [r6, #36]	; 0x24
 800a38e:	b928      	cbnz	r0, 800a39c <__pow5mult+0x40>
 800a390:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a394:	4b1c      	ldr	r3, [pc, #112]	; (800a408 <__pow5mult+0xac>)
 800a396:	481d      	ldr	r0, [pc, #116]	; (800a40c <__pow5mult+0xb0>)
 800a398:	f000 fd1e 	bl	800add8 <__assert_func>
 800a39c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a3a0:	6004      	str	r4, [r0, #0]
 800a3a2:	60c4      	str	r4, [r0, #12]
 800a3a4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a3a8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a3ac:	b94c      	cbnz	r4, 800a3c2 <__pow5mult+0x66>
 800a3ae:	f240 2171 	movw	r1, #625	; 0x271
 800a3b2:	4630      	mov	r0, r6
 800a3b4:	f7ff ff14 	bl	800a1e0 <__i2b>
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	4604      	mov	r4, r0
 800a3bc:	f8c8 0008 	str.w	r0, [r8, #8]
 800a3c0:	6003      	str	r3, [r0, #0]
 800a3c2:	f04f 0900 	mov.w	r9, #0
 800a3c6:	07eb      	lsls	r3, r5, #31
 800a3c8:	d50a      	bpl.n	800a3e0 <__pow5mult+0x84>
 800a3ca:	4639      	mov	r1, r7
 800a3cc:	4622      	mov	r2, r4
 800a3ce:	4630      	mov	r0, r6
 800a3d0:	f7ff ff1c 	bl	800a20c <__multiply>
 800a3d4:	4680      	mov	r8, r0
 800a3d6:	4639      	mov	r1, r7
 800a3d8:	4630      	mov	r0, r6
 800a3da:	f7ff fe01 	bl	8009fe0 <_Bfree>
 800a3de:	4647      	mov	r7, r8
 800a3e0:	106d      	asrs	r5, r5, #1
 800a3e2:	d00b      	beq.n	800a3fc <__pow5mult+0xa0>
 800a3e4:	6820      	ldr	r0, [r4, #0]
 800a3e6:	b938      	cbnz	r0, 800a3f8 <__pow5mult+0x9c>
 800a3e8:	4622      	mov	r2, r4
 800a3ea:	4621      	mov	r1, r4
 800a3ec:	4630      	mov	r0, r6
 800a3ee:	f7ff ff0d 	bl	800a20c <__multiply>
 800a3f2:	6020      	str	r0, [r4, #0]
 800a3f4:	f8c0 9000 	str.w	r9, [r0]
 800a3f8:	4604      	mov	r4, r0
 800a3fa:	e7e4      	b.n	800a3c6 <__pow5mult+0x6a>
 800a3fc:	4638      	mov	r0, r7
 800a3fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a402:	bf00      	nop
 800a404:	0800c678 	.word	0x0800c678
 800a408:	0800c42e 	.word	0x0800c42e
 800a40c:	0800c52c 	.word	0x0800c52c

0800a410 <__lshift>:
 800a410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a414:	460c      	mov	r4, r1
 800a416:	4607      	mov	r7, r0
 800a418:	4691      	mov	r9, r2
 800a41a:	6923      	ldr	r3, [r4, #16]
 800a41c:	6849      	ldr	r1, [r1, #4]
 800a41e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a422:	68a3      	ldr	r3, [r4, #8]
 800a424:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a428:	f108 0601 	add.w	r6, r8, #1
 800a42c:	42b3      	cmp	r3, r6
 800a42e:	db0b      	blt.n	800a448 <__lshift+0x38>
 800a430:	4638      	mov	r0, r7
 800a432:	f7ff fd95 	bl	8009f60 <_Balloc>
 800a436:	4605      	mov	r5, r0
 800a438:	b948      	cbnz	r0, 800a44e <__lshift+0x3e>
 800a43a:	4602      	mov	r2, r0
 800a43c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a440:	4b29      	ldr	r3, [pc, #164]	; (800a4e8 <__lshift+0xd8>)
 800a442:	482a      	ldr	r0, [pc, #168]	; (800a4ec <__lshift+0xdc>)
 800a444:	f000 fcc8 	bl	800add8 <__assert_func>
 800a448:	3101      	adds	r1, #1
 800a44a:	005b      	lsls	r3, r3, #1
 800a44c:	e7ee      	b.n	800a42c <__lshift+0x1c>
 800a44e:	2300      	movs	r3, #0
 800a450:	f100 0114 	add.w	r1, r0, #20
 800a454:	f100 0210 	add.w	r2, r0, #16
 800a458:	4618      	mov	r0, r3
 800a45a:	4553      	cmp	r3, sl
 800a45c:	db37      	blt.n	800a4ce <__lshift+0xbe>
 800a45e:	6920      	ldr	r0, [r4, #16]
 800a460:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a464:	f104 0314 	add.w	r3, r4, #20
 800a468:	f019 091f 	ands.w	r9, r9, #31
 800a46c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a470:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a474:	d02f      	beq.n	800a4d6 <__lshift+0xc6>
 800a476:	468a      	mov	sl, r1
 800a478:	f04f 0c00 	mov.w	ip, #0
 800a47c:	f1c9 0e20 	rsb	lr, r9, #32
 800a480:	681a      	ldr	r2, [r3, #0]
 800a482:	fa02 f209 	lsl.w	r2, r2, r9
 800a486:	ea42 020c 	orr.w	r2, r2, ip
 800a48a:	f84a 2b04 	str.w	r2, [sl], #4
 800a48e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a492:	4298      	cmp	r0, r3
 800a494:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a498:	d8f2      	bhi.n	800a480 <__lshift+0x70>
 800a49a:	1b03      	subs	r3, r0, r4
 800a49c:	3b15      	subs	r3, #21
 800a49e:	f023 0303 	bic.w	r3, r3, #3
 800a4a2:	3304      	adds	r3, #4
 800a4a4:	f104 0215 	add.w	r2, r4, #21
 800a4a8:	4290      	cmp	r0, r2
 800a4aa:	bf38      	it	cc
 800a4ac:	2304      	movcc	r3, #4
 800a4ae:	f841 c003 	str.w	ip, [r1, r3]
 800a4b2:	f1bc 0f00 	cmp.w	ip, #0
 800a4b6:	d001      	beq.n	800a4bc <__lshift+0xac>
 800a4b8:	f108 0602 	add.w	r6, r8, #2
 800a4bc:	3e01      	subs	r6, #1
 800a4be:	4638      	mov	r0, r7
 800a4c0:	4621      	mov	r1, r4
 800a4c2:	612e      	str	r6, [r5, #16]
 800a4c4:	f7ff fd8c 	bl	8009fe0 <_Bfree>
 800a4c8:	4628      	mov	r0, r5
 800a4ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4ce:	f842 0f04 	str.w	r0, [r2, #4]!
 800a4d2:	3301      	adds	r3, #1
 800a4d4:	e7c1      	b.n	800a45a <__lshift+0x4a>
 800a4d6:	3904      	subs	r1, #4
 800a4d8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4dc:	4298      	cmp	r0, r3
 800a4de:	f841 2f04 	str.w	r2, [r1, #4]!
 800a4e2:	d8f9      	bhi.n	800a4d8 <__lshift+0xc8>
 800a4e4:	e7ea      	b.n	800a4bc <__lshift+0xac>
 800a4e6:	bf00      	nop
 800a4e8:	0800c4a0 	.word	0x0800c4a0
 800a4ec:	0800c52c 	.word	0x0800c52c

0800a4f0 <__mcmp>:
 800a4f0:	4603      	mov	r3, r0
 800a4f2:	690a      	ldr	r2, [r1, #16]
 800a4f4:	6900      	ldr	r0, [r0, #16]
 800a4f6:	b530      	push	{r4, r5, lr}
 800a4f8:	1a80      	subs	r0, r0, r2
 800a4fa:	d10d      	bne.n	800a518 <__mcmp+0x28>
 800a4fc:	3314      	adds	r3, #20
 800a4fe:	3114      	adds	r1, #20
 800a500:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a504:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a508:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a50c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a510:	4295      	cmp	r5, r2
 800a512:	d002      	beq.n	800a51a <__mcmp+0x2a>
 800a514:	d304      	bcc.n	800a520 <__mcmp+0x30>
 800a516:	2001      	movs	r0, #1
 800a518:	bd30      	pop	{r4, r5, pc}
 800a51a:	42a3      	cmp	r3, r4
 800a51c:	d3f4      	bcc.n	800a508 <__mcmp+0x18>
 800a51e:	e7fb      	b.n	800a518 <__mcmp+0x28>
 800a520:	f04f 30ff 	mov.w	r0, #4294967295
 800a524:	e7f8      	b.n	800a518 <__mcmp+0x28>
	...

0800a528 <__mdiff>:
 800a528:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a52c:	460d      	mov	r5, r1
 800a52e:	4607      	mov	r7, r0
 800a530:	4611      	mov	r1, r2
 800a532:	4628      	mov	r0, r5
 800a534:	4614      	mov	r4, r2
 800a536:	f7ff ffdb 	bl	800a4f0 <__mcmp>
 800a53a:	1e06      	subs	r6, r0, #0
 800a53c:	d111      	bne.n	800a562 <__mdiff+0x3a>
 800a53e:	4631      	mov	r1, r6
 800a540:	4638      	mov	r0, r7
 800a542:	f7ff fd0d 	bl	8009f60 <_Balloc>
 800a546:	4602      	mov	r2, r0
 800a548:	b928      	cbnz	r0, 800a556 <__mdiff+0x2e>
 800a54a:	f240 2132 	movw	r1, #562	; 0x232
 800a54e:	4b3a      	ldr	r3, [pc, #232]	; (800a638 <__mdiff+0x110>)
 800a550:	483a      	ldr	r0, [pc, #232]	; (800a63c <__mdiff+0x114>)
 800a552:	f000 fc41 	bl	800add8 <__assert_func>
 800a556:	2301      	movs	r3, #1
 800a558:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800a55c:	4610      	mov	r0, r2
 800a55e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a562:	bfa4      	itt	ge
 800a564:	4623      	movge	r3, r4
 800a566:	462c      	movge	r4, r5
 800a568:	4638      	mov	r0, r7
 800a56a:	6861      	ldr	r1, [r4, #4]
 800a56c:	bfa6      	itte	ge
 800a56e:	461d      	movge	r5, r3
 800a570:	2600      	movge	r6, #0
 800a572:	2601      	movlt	r6, #1
 800a574:	f7ff fcf4 	bl	8009f60 <_Balloc>
 800a578:	4602      	mov	r2, r0
 800a57a:	b918      	cbnz	r0, 800a584 <__mdiff+0x5c>
 800a57c:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a580:	4b2d      	ldr	r3, [pc, #180]	; (800a638 <__mdiff+0x110>)
 800a582:	e7e5      	b.n	800a550 <__mdiff+0x28>
 800a584:	f102 0814 	add.w	r8, r2, #20
 800a588:	46c2      	mov	sl, r8
 800a58a:	f04f 0c00 	mov.w	ip, #0
 800a58e:	6927      	ldr	r7, [r4, #16]
 800a590:	60c6      	str	r6, [r0, #12]
 800a592:	692e      	ldr	r6, [r5, #16]
 800a594:	f104 0014 	add.w	r0, r4, #20
 800a598:	f105 0914 	add.w	r9, r5, #20
 800a59c:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800a5a0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a5a4:	3410      	adds	r4, #16
 800a5a6:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800a5aa:	f859 3b04 	ldr.w	r3, [r9], #4
 800a5ae:	fa1f f18b 	uxth.w	r1, fp
 800a5b2:	448c      	add	ip, r1
 800a5b4:	b299      	uxth	r1, r3
 800a5b6:	0c1b      	lsrs	r3, r3, #16
 800a5b8:	ebac 0101 	sub.w	r1, ip, r1
 800a5bc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a5c0:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800a5c4:	b289      	uxth	r1, r1
 800a5c6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800a5ca:	454e      	cmp	r6, r9
 800a5cc:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800a5d0:	f84a 3b04 	str.w	r3, [sl], #4
 800a5d4:	d8e7      	bhi.n	800a5a6 <__mdiff+0x7e>
 800a5d6:	1b73      	subs	r3, r6, r5
 800a5d8:	3b15      	subs	r3, #21
 800a5da:	f023 0303 	bic.w	r3, r3, #3
 800a5de:	3515      	adds	r5, #21
 800a5e0:	3304      	adds	r3, #4
 800a5e2:	42ae      	cmp	r6, r5
 800a5e4:	bf38      	it	cc
 800a5e6:	2304      	movcc	r3, #4
 800a5e8:	4418      	add	r0, r3
 800a5ea:	4443      	add	r3, r8
 800a5ec:	461e      	mov	r6, r3
 800a5ee:	4605      	mov	r5, r0
 800a5f0:	4575      	cmp	r5, lr
 800a5f2:	d30e      	bcc.n	800a612 <__mdiff+0xea>
 800a5f4:	f10e 0103 	add.w	r1, lr, #3
 800a5f8:	1a09      	subs	r1, r1, r0
 800a5fa:	f021 0103 	bic.w	r1, r1, #3
 800a5fe:	3803      	subs	r0, #3
 800a600:	4586      	cmp	lr, r0
 800a602:	bf38      	it	cc
 800a604:	2100      	movcc	r1, #0
 800a606:	4419      	add	r1, r3
 800a608:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800a60c:	b18b      	cbz	r3, 800a632 <__mdiff+0x10a>
 800a60e:	6117      	str	r7, [r2, #16]
 800a610:	e7a4      	b.n	800a55c <__mdiff+0x34>
 800a612:	f855 8b04 	ldr.w	r8, [r5], #4
 800a616:	fa1f f188 	uxth.w	r1, r8
 800a61a:	4461      	add	r1, ip
 800a61c:	140c      	asrs	r4, r1, #16
 800a61e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a622:	b289      	uxth	r1, r1
 800a624:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800a628:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800a62c:	f846 1b04 	str.w	r1, [r6], #4
 800a630:	e7de      	b.n	800a5f0 <__mdiff+0xc8>
 800a632:	3f01      	subs	r7, #1
 800a634:	e7e8      	b.n	800a608 <__mdiff+0xe0>
 800a636:	bf00      	nop
 800a638:	0800c4a0 	.word	0x0800c4a0
 800a63c:	0800c52c 	.word	0x0800c52c

0800a640 <__ulp>:
 800a640:	4b11      	ldr	r3, [pc, #68]	; (800a688 <__ulp+0x48>)
 800a642:	400b      	ands	r3, r1
 800a644:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800a648:	2b00      	cmp	r3, #0
 800a64a:	dd02      	ble.n	800a652 <__ulp+0x12>
 800a64c:	2000      	movs	r0, #0
 800a64e:	4619      	mov	r1, r3
 800a650:	4770      	bx	lr
 800a652:	425b      	negs	r3, r3
 800a654:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800a658:	f04f 0000 	mov.w	r0, #0
 800a65c:	f04f 0100 	mov.w	r1, #0
 800a660:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a664:	da04      	bge.n	800a670 <__ulp+0x30>
 800a666:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a66a:	fa43 f102 	asr.w	r1, r3, r2
 800a66e:	4770      	bx	lr
 800a670:	f1a2 0314 	sub.w	r3, r2, #20
 800a674:	2b1e      	cmp	r3, #30
 800a676:	bfd6      	itet	le
 800a678:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800a67c:	2301      	movgt	r3, #1
 800a67e:	fa22 f303 	lsrle.w	r3, r2, r3
 800a682:	4618      	mov	r0, r3
 800a684:	4770      	bx	lr
 800a686:	bf00      	nop
 800a688:	7ff00000 	.word	0x7ff00000

0800a68c <__b2d>:
 800a68c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a690:	6907      	ldr	r7, [r0, #16]
 800a692:	f100 0914 	add.w	r9, r0, #20
 800a696:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800a69a:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800a69e:	f1a7 0804 	sub.w	r8, r7, #4
 800a6a2:	4630      	mov	r0, r6
 800a6a4:	f7ff fd4e 	bl	800a144 <__hi0bits>
 800a6a8:	f1c0 0320 	rsb	r3, r0, #32
 800a6ac:	280a      	cmp	r0, #10
 800a6ae:	600b      	str	r3, [r1, #0]
 800a6b0:	491f      	ldr	r1, [pc, #124]	; (800a730 <__b2d+0xa4>)
 800a6b2:	dc17      	bgt.n	800a6e4 <__b2d+0x58>
 800a6b4:	45c1      	cmp	r9, r8
 800a6b6:	bf28      	it	cs
 800a6b8:	2200      	movcs	r2, #0
 800a6ba:	f1c0 0c0b 	rsb	ip, r0, #11
 800a6be:	fa26 f30c 	lsr.w	r3, r6, ip
 800a6c2:	bf38      	it	cc
 800a6c4:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800a6c8:	ea43 0501 	orr.w	r5, r3, r1
 800a6cc:	f100 0315 	add.w	r3, r0, #21
 800a6d0:	fa06 f303 	lsl.w	r3, r6, r3
 800a6d4:	fa22 f20c 	lsr.w	r2, r2, ip
 800a6d8:	ea43 0402 	orr.w	r4, r3, r2
 800a6dc:	4620      	mov	r0, r4
 800a6de:	4629      	mov	r1, r5
 800a6e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a6e4:	45c1      	cmp	r9, r8
 800a6e6:	bf2e      	itee	cs
 800a6e8:	2200      	movcs	r2, #0
 800a6ea:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800a6ee:	f1a7 0808 	subcc.w	r8, r7, #8
 800a6f2:	f1b0 030b 	subs.w	r3, r0, #11
 800a6f6:	d016      	beq.n	800a726 <__b2d+0x9a>
 800a6f8:	f1c3 0720 	rsb	r7, r3, #32
 800a6fc:	fa22 f107 	lsr.w	r1, r2, r7
 800a700:	45c8      	cmp	r8, r9
 800a702:	fa06 f603 	lsl.w	r6, r6, r3
 800a706:	ea46 0601 	orr.w	r6, r6, r1
 800a70a:	bf94      	ite	ls
 800a70c:	2100      	movls	r1, #0
 800a70e:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800a712:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800a716:	fa02 f003 	lsl.w	r0, r2, r3
 800a71a:	40f9      	lsrs	r1, r7
 800a71c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a720:	ea40 0401 	orr.w	r4, r0, r1
 800a724:	e7da      	b.n	800a6dc <__b2d+0x50>
 800a726:	4614      	mov	r4, r2
 800a728:	ea46 0501 	orr.w	r5, r6, r1
 800a72c:	e7d6      	b.n	800a6dc <__b2d+0x50>
 800a72e:	bf00      	nop
 800a730:	3ff00000 	.word	0x3ff00000

0800a734 <__d2b>:
 800a734:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800a738:	2101      	movs	r1, #1
 800a73a:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800a73e:	4690      	mov	r8, r2
 800a740:	461d      	mov	r5, r3
 800a742:	f7ff fc0d 	bl	8009f60 <_Balloc>
 800a746:	4604      	mov	r4, r0
 800a748:	b930      	cbnz	r0, 800a758 <__d2b+0x24>
 800a74a:	4602      	mov	r2, r0
 800a74c:	f240 310a 	movw	r1, #778	; 0x30a
 800a750:	4b24      	ldr	r3, [pc, #144]	; (800a7e4 <__d2b+0xb0>)
 800a752:	4825      	ldr	r0, [pc, #148]	; (800a7e8 <__d2b+0xb4>)
 800a754:	f000 fb40 	bl	800add8 <__assert_func>
 800a758:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800a75c:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800a760:	bb2d      	cbnz	r5, 800a7ae <__d2b+0x7a>
 800a762:	9301      	str	r3, [sp, #4]
 800a764:	f1b8 0300 	subs.w	r3, r8, #0
 800a768:	d026      	beq.n	800a7b8 <__d2b+0x84>
 800a76a:	4668      	mov	r0, sp
 800a76c:	9300      	str	r3, [sp, #0]
 800a76e:	f7ff fd09 	bl	800a184 <__lo0bits>
 800a772:	9900      	ldr	r1, [sp, #0]
 800a774:	b1f0      	cbz	r0, 800a7b4 <__d2b+0x80>
 800a776:	9a01      	ldr	r2, [sp, #4]
 800a778:	f1c0 0320 	rsb	r3, r0, #32
 800a77c:	fa02 f303 	lsl.w	r3, r2, r3
 800a780:	430b      	orrs	r3, r1
 800a782:	40c2      	lsrs	r2, r0
 800a784:	6163      	str	r3, [r4, #20]
 800a786:	9201      	str	r2, [sp, #4]
 800a788:	9b01      	ldr	r3, [sp, #4]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	bf14      	ite	ne
 800a78e:	2102      	movne	r1, #2
 800a790:	2101      	moveq	r1, #1
 800a792:	61a3      	str	r3, [r4, #24]
 800a794:	6121      	str	r1, [r4, #16]
 800a796:	b1c5      	cbz	r5, 800a7ca <__d2b+0x96>
 800a798:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a79c:	4405      	add	r5, r0
 800a79e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a7a2:	603d      	str	r5, [r7, #0]
 800a7a4:	6030      	str	r0, [r6, #0]
 800a7a6:	4620      	mov	r0, r4
 800a7a8:	b002      	add	sp, #8
 800a7aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a7b2:	e7d6      	b.n	800a762 <__d2b+0x2e>
 800a7b4:	6161      	str	r1, [r4, #20]
 800a7b6:	e7e7      	b.n	800a788 <__d2b+0x54>
 800a7b8:	a801      	add	r0, sp, #4
 800a7ba:	f7ff fce3 	bl	800a184 <__lo0bits>
 800a7be:	2101      	movs	r1, #1
 800a7c0:	9b01      	ldr	r3, [sp, #4]
 800a7c2:	6121      	str	r1, [r4, #16]
 800a7c4:	6163      	str	r3, [r4, #20]
 800a7c6:	3020      	adds	r0, #32
 800a7c8:	e7e5      	b.n	800a796 <__d2b+0x62>
 800a7ca:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800a7ce:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a7d2:	6038      	str	r0, [r7, #0]
 800a7d4:	6918      	ldr	r0, [r3, #16]
 800a7d6:	f7ff fcb5 	bl	800a144 <__hi0bits>
 800a7da:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800a7de:	6031      	str	r1, [r6, #0]
 800a7e0:	e7e1      	b.n	800a7a6 <__d2b+0x72>
 800a7e2:	bf00      	nop
 800a7e4:	0800c4a0 	.word	0x0800c4a0
 800a7e8:	0800c52c 	.word	0x0800c52c

0800a7ec <__ratio>:
 800a7ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7f0:	4688      	mov	r8, r1
 800a7f2:	4669      	mov	r1, sp
 800a7f4:	4681      	mov	r9, r0
 800a7f6:	f7ff ff49 	bl	800a68c <__b2d>
 800a7fa:	460f      	mov	r7, r1
 800a7fc:	4604      	mov	r4, r0
 800a7fe:	460d      	mov	r5, r1
 800a800:	4640      	mov	r0, r8
 800a802:	a901      	add	r1, sp, #4
 800a804:	f7ff ff42 	bl	800a68c <__b2d>
 800a808:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a80c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a810:	468b      	mov	fp, r1
 800a812:	eba3 0c02 	sub.w	ip, r3, r2
 800a816:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a81a:	1a9b      	subs	r3, r3, r2
 800a81c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a820:	2b00      	cmp	r3, #0
 800a822:	bfd5      	itete	le
 800a824:	460a      	movle	r2, r1
 800a826:	462a      	movgt	r2, r5
 800a828:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a82c:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a830:	bfd8      	it	le
 800a832:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a836:	465b      	mov	r3, fp
 800a838:	4602      	mov	r2, r0
 800a83a:	4639      	mov	r1, r7
 800a83c:	4620      	mov	r0, r4
 800a83e:	f7f5 ff7f 	bl	8000740 <__aeabi_ddiv>
 800a842:	b003      	add	sp, #12
 800a844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a848 <__copybits>:
 800a848:	3901      	subs	r1, #1
 800a84a:	b570      	push	{r4, r5, r6, lr}
 800a84c:	1149      	asrs	r1, r1, #5
 800a84e:	6914      	ldr	r4, [r2, #16]
 800a850:	3101      	adds	r1, #1
 800a852:	f102 0314 	add.w	r3, r2, #20
 800a856:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a85a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a85e:	1f05      	subs	r5, r0, #4
 800a860:	42a3      	cmp	r3, r4
 800a862:	d30c      	bcc.n	800a87e <__copybits+0x36>
 800a864:	1aa3      	subs	r3, r4, r2
 800a866:	3b11      	subs	r3, #17
 800a868:	f023 0303 	bic.w	r3, r3, #3
 800a86c:	3211      	adds	r2, #17
 800a86e:	42a2      	cmp	r2, r4
 800a870:	bf88      	it	hi
 800a872:	2300      	movhi	r3, #0
 800a874:	4418      	add	r0, r3
 800a876:	2300      	movs	r3, #0
 800a878:	4288      	cmp	r0, r1
 800a87a:	d305      	bcc.n	800a888 <__copybits+0x40>
 800a87c:	bd70      	pop	{r4, r5, r6, pc}
 800a87e:	f853 6b04 	ldr.w	r6, [r3], #4
 800a882:	f845 6f04 	str.w	r6, [r5, #4]!
 800a886:	e7eb      	b.n	800a860 <__copybits+0x18>
 800a888:	f840 3b04 	str.w	r3, [r0], #4
 800a88c:	e7f4      	b.n	800a878 <__copybits+0x30>

0800a88e <__any_on>:
 800a88e:	f100 0214 	add.w	r2, r0, #20
 800a892:	6900      	ldr	r0, [r0, #16]
 800a894:	114b      	asrs	r3, r1, #5
 800a896:	4298      	cmp	r0, r3
 800a898:	b510      	push	{r4, lr}
 800a89a:	db11      	blt.n	800a8c0 <__any_on+0x32>
 800a89c:	dd0a      	ble.n	800a8b4 <__any_on+0x26>
 800a89e:	f011 011f 	ands.w	r1, r1, #31
 800a8a2:	d007      	beq.n	800a8b4 <__any_on+0x26>
 800a8a4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a8a8:	fa24 f001 	lsr.w	r0, r4, r1
 800a8ac:	fa00 f101 	lsl.w	r1, r0, r1
 800a8b0:	428c      	cmp	r4, r1
 800a8b2:	d10b      	bne.n	800a8cc <__any_on+0x3e>
 800a8b4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a8b8:	4293      	cmp	r3, r2
 800a8ba:	d803      	bhi.n	800a8c4 <__any_on+0x36>
 800a8bc:	2000      	movs	r0, #0
 800a8be:	bd10      	pop	{r4, pc}
 800a8c0:	4603      	mov	r3, r0
 800a8c2:	e7f7      	b.n	800a8b4 <__any_on+0x26>
 800a8c4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a8c8:	2900      	cmp	r1, #0
 800a8ca:	d0f5      	beq.n	800a8b8 <__any_on+0x2a>
 800a8cc:	2001      	movs	r0, #1
 800a8ce:	e7f6      	b.n	800a8be <__any_on+0x30>

0800a8d0 <_calloc_r>:
 800a8d0:	b570      	push	{r4, r5, r6, lr}
 800a8d2:	fba1 5402 	umull	r5, r4, r1, r2
 800a8d6:	b934      	cbnz	r4, 800a8e6 <_calloc_r+0x16>
 800a8d8:	4629      	mov	r1, r5
 800a8da:	f000 f875 	bl	800a9c8 <_malloc_r>
 800a8de:	4606      	mov	r6, r0
 800a8e0:	b928      	cbnz	r0, 800a8ee <_calloc_r+0x1e>
 800a8e2:	4630      	mov	r0, r6
 800a8e4:	bd70      	pop	{r4, r5, r6, pc}
 800a8e6:	220c      	movs	r2, #12
 800a8e8:	2600      	movs	r6, #0
 800a8ea:	6002      	str	r2, [r0, #0]
 800a8ec:	e7f9      	b.n	800a8e2 <_calloc_r+0x12>
 800a8ee:	462a      	mov	r2, r5
 800a8f0:	4621      	mov	r1, r4
 800a8f2:	f7fc fbd1 	bl	8007098 <memset>
 800a8f6:	e7f4      	b.n	800a8e2 <_calloc_r+0x12>

0800a8f8 <_free_r>:
 800a8f8:	b538      	push	{r3, r4, r5, lr}
 800a8fa:	4605      	mov	r5, r0
 800a8fc:	2900      	cmp	r1, #0
 800a8fe:	d040      	beq.n	800a982 <_free_r+0x8a>
 800a900:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a904:	1f0c      	subs	r4, r1, #4
 800a906:	2b00      	cmp	r3, #0
 800a908:	bfb8      	it	lt
 800a90a:	18e4      	addlt	r4, r4, r3
 800a90c:	f000 fa94 	bl	800ae38 <__malloc_lock>
 800a910:	4a1c      	ldr	r2, [pc, #112]	; (800a984 <_free_r+0x8c>)
 800a912:	6813      	ldr	r3, [r2, #0]
 800a914:	b933      	cbnz	r3, 800a924 <_free_r+0x2c>
 800a916:	6063      	str	r3, [r4, #4]
 800a918:	6014      	str	r4, [r2, #0]
 800a91a:	4628      	mov	r0, r5
 800a91c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a920:	f000 ba90 	b.w	800ae44 <__malloc_unlock>
 800a924:	42a3      	cmp	r3, r4
 800a926:	d908      	bls.n	800a93a <_free_r+0x42>
 800a928:	6820      	ldr	r0, [r4, #0]
 800a92a:	1821      	adds	r1, r4, r0
 800a92c:	428b      	cmp	r3, r1
 800a92e:	bf01      	itttt	eq
 800a930:	6819      	ldreq	r1, [r3, #0]
 800a932:	685b      	ldreq	r3, [r3, #4]
 800a934:	1809      	addeq	r1, r1, r0
 800a936:	6021      	streq	r1, [r4, #0]
 800a938:	e7ed      	b.n	800a916 <_free_r+0x1e>
 800a93a:	461a      	mov	r2, r3
 800a93c:	685b      	ldr	r3, [r3, #4]
 800a93e:	b10b      	cbz	r3, 800a944 <_free_r+0x4c>
 800a940:	42a3      	cmp	r3, r4
 800a942:	d9fa      	bls.n	800a93a <_free_r+0x42>
 800a944:	6811      	ldr	r1, [r2, #0]
 800a946:	1850      	adds	r0, r2, r1
 800a948:	42a0      	cmp	r0, r4
 800a94a:	d10b      	bne.n	800a964 <_free_r+0x6c>
 800a94c:	6820      	ldr	r0, [r4, #0]
 800a94e:	4401      	add	r1, r0
 800a950:	1850      	adds	r0, r2, r1
 800a952:	4283      	cmp	r3, r0
 800a954:	6011      	str	r1, [r2, #0]
 800a956:	d1e0      	bne.n	800a91a <_free_r+0x22>
 800a958:	6818      	ldr	r0, [r3, #0]
 800a95a:	685b      	ldr	r3, [r3, #4]
 800a95c:	4401      	add	r1, r0
 800a95e:	6011      	str	r1, [r2, #0]
 800a960:	6053      	str	r3, [r2, #4]
 800a962:	e7da      	b.n	800a91a <_free_r+0x22>
 800a964:	d902      	bls.n	800a96c <_free_r+0x74>
 800a966:	230c      	movs	r3, #12
 800a968:	602b      	str	r3, [r5, #0]
 800a96a:	e7d6      	b.n	800a91a <_free_r+0x22>
 800a96c:	6820      	ldr	r0, [r4, #0]
 800a96e:	1821      	adds	r1, r4, r0
 800a970:	428b      	cmp	r3, r1
 800a972:	bf01      	itttt	eq
 800a974:	6819      	ldreq	r1, [r3, #0]
 800a976:	685b      	ldreq	r3, [r3, #4]
 800a978:	1809      	addeq	r1, r1, r0
 800a97a:	6021      	streq	r1, [r4, #0]
 800a97c:	6063      	str	r3, [r4, #4]
 800a97e:	6054      	str	r4, [r2, #4]
 800a980:	e7cb      	b.n	800a91a <_free_r+0x22>
 800a982:	bd38      	pop	{r3, r4, r5, pc}
 800a984:	200027a8 	.word	0x200027a8

0800a988 <sbrk_aligned>:
 800a988:	b570      	push	{r4, r5, r6, lr}
 800a98a:	4e0e      	ldr	r6, [pc, #56]	; (800a9c4 <sbrk_aligned+0x3c>)
 800a98c:	460c      	mov	r4, r1
 800a98e:	6831      	ldr	r1, [r6, #0]
 800a990:	4605      	mov	r5, r0
 800a992:	b911      	cbnz	r1, 800a99a <sbrk_aligned+0x12>
 800a994:	f000 f9ee 	bl	800ad74 <_sbrk_r>
 800a998:	6030      	str	r0, [r6, #0]
 800a99a:	4621      	mov	r1, r4
 800a99c:	4628      	mov	r0, r5
 800a99e:	f000 f9e9 	bl	800ad74 <_sbrk_r>
 800a9a2:	1c43      	adds	r3, r0, #1
 800a9a4:	d00a      	beq.n	800a9bc <sbrk_aligned+0x34>
 800a9a6:	1cc4      	adds	r4, r0, #3
 800a9a8:	f024 0403 	bic.w	r4, r4, #3
 800a9ac:	42a0      	cmp	r0, r4
 800a9ae:	d007      	beq.n	800a9c0 <sbrk_aligned+0x38>
 800a9b0:	1a21      	subs	r1, r4, r0
 800a9b2:	4628      	mov	r0, r5
 800a9b4:	f000 f9de 	bl	800ad74 <_sbrk_r>
 800a9b8:	3001      	adds	r0, #1
 800a9ba:	d101      	bne.n	800a9c0 <sbrk_aligned+0x38>
 800a9bc:	f04f 34ff 	mov.w	r4, #4294967295
 800a9c0:	4620      	mov	r0, r4
 800a9c2:	bd70      	pop	{r4, r5, r6, pc}
 800a9c4:	200027ac 	.word	0x200027ac

0800a9c8 <_malloc_r>:
 800a9c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9cc:	1ccd      	adds	r5, r1, #3
 800a9ce:	f025 0503 	bic.w	r5, r5, #3
 800a9d2:	3508      	adds	r5, #8
 800a9d4:	2d0c      	cmp	r5, #12
 800a9d6:	bf38      	it	cc
 800a9d8:	250c      	movcc	r5, #12
 800a9da:	2d00      	cmp	r5, #0
 800a9dc:	4607      	mov	r7, r0
 800a9de:	db01      	blt.n	800a9e4 <_malloc_r+0x1c>
 800a9e0:	42a9      	cmp	r1, r5
 800a9e2:	d905      	bls.n	800a9f0 <_malloc_r+0x28>
 800a9e4:	230c      	movs	r3, #12
 800a9e6:	2600      	movs	r6, #0
 800a9e8:	603b      	str	r3, [r7, #0]
 800a9ea:	4630      	mov	r0, r6
 800a9ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9f0:	4e2e      	ldr	r6, [pc, #184]	; (800aaac <_malloc_r+0xe4>)
 800a9f2:	f000 fa21 	bl	800ae38 <__malloc_lock>
 800a9f6:	6833      	ldr	r3, [r6, #0]
 800a9f8:	461c      	mov	r4, r3
 800a9fa:	bb34      	cbnz	r4, 800aa4a <_malloc_r+0x82>
 800a9fc:	4629      	mov	r1, r5
 800a9fe:	4638      	mov	r0, r7
 800aa00:	f7ff ffc2 	bl	800a988 <sbrk_aligned>
 800aa04:	1c43      	adds	r3, r0, #1
 800aa06:	4604      	mov	r4, r0
 800aa08:	d14d      	bne.n	800aaa6 <_malloc_r+0xde>
 800aa0a:	6834      	ldr	r4, [r6, #0]
 800aa0c:	4626      	mov	r6, r4
 800aa0e:	2e00      	cmp	r6, #0
 800aa10:	d140      	bne.n	800aa94 <_malloc_r+0xcc>
 800aa12:	6823      	ldr	r3, [r4, #0]
 800aa14:	4631      	mov	r1, r6
 800aa16:	4638      	mov	r0, r7
 800aa18:	eb04 0803 	add.w	r8, r4, r3
 800aa1c:	f000 f9aa 	bl	800ad74 <_sbrk_r>
 800aa20:	4580      	cmp	r8, r0
 800aa22:	d13a      	bne.n	800aa9a <_malloc_r+0xd2>
 800aa24:	6821      	ldr	r1, [r4, #0]
 800aa26:	3503      	adds	r5, #3
 800aa28:	1a6d      	subs	r5, r5, r1
 800aa2a:	f025 0503 	bic.w	r5, r5, #3
 800aa2e:	3508      	adds	r5, #8
 800aa30:	2d0c      	cmp	r5, #12
 800aa32:	bf38      	it	cc
 800aa34:	250c      	movcc	r5, #12
 800aa36:	4638      	mov	r0, r7
 800aa38:	4629      	mov	r1, r5
 800aa3a:	f7ff ffa5 	bl	800a988 <sbrk_aligned>
 800aa3e:	3001      	adds	r0, #1
 800aa40:	d02b      	beq.n	800aa9a <_malloc_r+0xd2>
 800aa42:	6823      	ldr	r3, [r4, #0]
 800aa44:	442b      	add	r3, r5
 800aa46:	6023      	str	r3, [r4, #0]
 800aa48:	e00e      	b.n	800aa68 <_malloc_r+0xa0>
 800aa4a:	6822      	ldr	r2, [r4, #0]
 800aa4c:	1b52      	subs	r2, r2, r5
 800aa4e:	d41e      	bmi.n	800aa8e <_malloc_r+0xc6>
 800aa50:	2a0b      	cmp	r2, #11
 800aa52:	d916      	bls.n	800aa82 <_malloc_r+0xba>
 800aa54:	1961      	adds	r1, r4, r5
 800aa56:	42a3      	cmp	r3, r4
 800aa58:	6025      	str	r5, [r4, #0]
 800aa5a:	bf18      	it	ne
 800aa5c:	6059      	strne	r1, [r3, #4]
 800aa5e:	6863      	ldr	r3, [r4, #4]
 800aa60:	bf08      	it	eq
 800aa62:	6031      	streq	r1, [r6, #0]
 800aa64:	5162      	str	r2, [r4, r5]
 800aa66:	604b      	str	r3, [r1, #4]
 800aa68:	4638      	mov	r0, r7
 800aa6a:	f104 060b 	add.w	r6, r4, #11
 800aa6e:	f000 f9e9 	bl	800ae44 <__malloc_unlock>
 800aa72:	f026 0607 	bic.w	r6, r6, #7
 800aa76:	1d23      	adds	r3, r4, #4
 800aa78:	1af2      	subs	r2, r6, r3
 800aa7a:	d0b6      	beq.n	800a9ea <_malloc_r+0x22>
 800aa7c:	1b9b      	subs	r3, r3, r6
 800aa7e:	50a3      	str	r3, [r4, r2]
 800aa80:	e7b3      	b.n	800a9ea <_malloc_r+0x22>
 800aa82:	6862      	ldr	r2, [r4, #4]
 800aa84:	42a3      	cmp	r3, r4
 800aa86:	bf0c      	ite	eq
 800aa88:	6032      	streq	r2, [r6, #0]
 800aa8a:	605a      	strne	r2, [r3, #4]
 800aa8c:	e7ec      	b.n	800aa68 <_malloc_r+0xa0>
 800aa8e:	4623      	mov	r3, r4
 800aa90:	6864      	ldr	r4, [r4, #4]
 800aa92:	e7b2      	b.n	800a9fa <_malloc_r+0x32>
 800aa94:	4634      	mov	r4, r6
 800aa96:	6876      	ldr	r6, [r6, #4]
 800aa98:	e7b9      	b.n	800aa0e <_malloc_r+0x46>
 800aa9a:	230c      	movs	r3, #12
 800aa9c:	4638      	mov	r0, r7
 800aa9e:	603b      	str	r3, [r7, #0]
 800aaa0:	f000 f9d0 	bl	800ae44 <__malloc_unlock>
 800aaa4:	e7a1      	b.n	800a9ea <_malloc_r+0x22>
 800aaa6:	6025      	str	r5, [r4, #0]
 800aaa8:	e7de      	b.n	800aa68 <_malloc_r+0xa0>
 800aaaa:	bf00      	nop
 800aaac:	200027a8 	.word	0x200027a8

0800aab0 <__ssputs_r>:
 800aab0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aab4:	688e      	ldr	r6, [r1, #8]
 800aab6:	4682      	mov	sl, r0
 800aab8:	429e      	cmp	r6, r3
 800aaba:	460c      	mov	r4, r1
 800aabc:	4690      	mov	r8, r2
 800aabe:	461f      	mov	r7, r3
 800aac0:	d838      	bhi.n	800ab34 <__ssputs_r+0x84>
 800aac2:	898a      	ldrh	r2, [r1, #12]
 800aac4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800aac8:	d032      	beq.n	800ab30 <__ssputs_r+0x80>
 800aaca:	6825      	ldr	r5, [r4, #0]
 800aacc:	6909      	ldr	r1, [r1, #16]
 800aace:	3301      	adds	r3, #1
 800aad0:	eba5 0901 	sub.w	r9, r5, r1
 800aad4:	6965      	ldr	r5, [r4, #20]
 800aad6:	444b      	add	r3, r9
 800aad8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aadc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800aae0:	106d      	asrs	r5, r5, #1
 800aae2:	429d      	cmp	r5, r3
 800aae4:	bf38      	it	cc
 800aae6:	461d      	movcc	r5, r3
 800aae8:	0553      	lsls	r3, r2, #21
 800aaea:	d531      	bpl.n	800ab50 <__ssputs_r+0xa0>
 800aaec:	4629      	mov	r1, r5
 800aaee:	f7ff ff6b 	bl	800a9c8 <_malloc_r>
 800aaf2:	4606      	mov	r6, r0
 800aaf4:	b950      	cbnz	r0, 800ab0c <__ssputs_r+0x5c>
 800aaf6:	230c      	movs	r3, #12
 800aaf8:	f04f 30ff 	mov.w	r0, #4294967295
 800aafc:	f8ca 3000 	str.w	r3, [sl]
 800ab00:	89a3      	ldrh	r3, [r4, #12]
 800ab02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab06:	81a3      	strh	r3, [r4, #12]
 800ab08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab0c:	464a      	mov	r2, r9
 800ab0e:	6921      	ldr	r1, [r4, #16]
 800ab10:	f7fc fa9a 	bl	8007048 <memcpy>
 800ab14:	89a3      	ldrh	r3, [r4, #12]
 800ab16:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ab1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab1e:	81a3      	strh	r3, [r4, #12]
 800ab20:	6126      	str	r6, [r4, #16]
 800ab22:	444e      	add	r6, r9
 800ab24:	6026      	str	r6, [r4, #0]
 800ab26:	463e      	mov	r6, r7
 800ab28:	6165      	str	r5, [r4, #20]
 800ab2a:	eba5 0509 	sub.w	r5, r5, r9
 800ab2e:	60a5      	str	r5, [r4, #8]
 800ab30:	42be      	cmp	r6, r7
 800ab32:	d900      	bls.n	800ab36 <__ssputs_r+0x86>
 800ab34:	463e      	mov	r6, r7
 800ab36:	4632      	mov	r2, r6
 800ab38:	4641      	mov	r1, r8
 800ab3a:	6820      	ldr	r0, [r4, #0]
 800ab3c:	f7fc fa92 	bl	8007064 <memmove>
 800ab40:	68a3      	ldr	r3, [r4, #8]
 800ab42:	2000      	movs	r0, #0
 800ab44:	1b9b      	subs	r3, r3, r6
 800ab46:	60a3      	str	r3, [r4, #8]
 800ab48:	6823      	ldr	r3, [r4, #0]
 800ab4a:	4433      	add	r3, r6
 800ab4c:	6023      	str	r3, [r4, #0]
 800ab4e:	e7db      	b.n	800ab08 <__ssputs_r+0x58>
 800ab50:	462a      	mov	r2, r5
 800ab52:	f000 f97d 	bl	800ae50 <_realloc_r>
 800ab56:	4606      	mov	r6, r0
 800ab58:	2800      	cmp	r0, #0
 800ab5a:	d1e1      	bne.n	800ab20 <__ssputs_r+0x70>
 800ab5c:	4650      	mov	r0, sl
 800ab5e:	6921      	ldr	r1, [r4, #16]
 800ab60:	f7ff feca 	bl	800a8f8 <_free_r>
 800ab64:	e7c7      	b.n	800aaf6 <__ssputs_r+0x46>
	...

0800ab68 <_svfiprintf_r>:
 800ab68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab6c:	4698      	mov	r8, r3
 800ab6e:	898b      	ldrh	r3, [r1, #12]
 800ab70:	4607      	mov	r7, r0
 800ab72:	061b      	lsls	r3, r3, #24
 800ab74:	460d      	mov	r5, r1
 800ab76:	4614      	mov	r4, r2
 800ab78:	b09d      	sub	sp, #116	; 0x74
 800ab7a:	d50e      	bpl.n	800ab9a <_svfiprintf_r+0x32>
 800ab7c:	690b      	ldr	r3, [r1, #16]
 800ab7e:	b963      	cbnz	r3, 800ab9a <_svfiprintf_r+0x32>
 800ab80:	2140      	movs	r1, #64	; 0x40
 800ab82:	f7ff ff21 	bl	800a9c8 <_malloc_r>
 800ab86:	6028      	str	r0, [r5, #0]
 800ab88:	6128      	str	r0, [r5, #16]
 800ab8a:	b920      	cbnz	r0, 800ab96 <_svfiprintf_r+0x2e>
 800ab8c:	230c      	movs	r3, #12
 800ab8e:	603b      	str	r3, [r7, #0]
 800ab90:	f04f 30ff 	mov.w	r0, #4294967295
 800ab94:	e0d1      	b.n	800ad3a <_svfiprintf_r+0x1d2>
 800ab96:	2340      	movs	r3, #64	; 0x40
 800ab98:	616b      	str	r3, [r5, #20]
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	9309      	str	r3, [sp, #36]	; 0x24
 800ab9e:	2320      	movs	r3, #32
 800aba0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aba4:	2330      	movs	r3, #48	; 0x30
 800aba6:	f04f 0901 	mov.w	r9, #1
 800abaa:	f8cd 800c 	str.w	r8, [sp, #12]
 800abae:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800ad54 <_svfiprintf_r+0x1ec>
 800abb2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800abb6:	4623      	mov	r3, r4
 800abb8:	469a      	mov	sl, r3
 800abba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800abbe:	b10a      	cbz	r2, 800abc4 <_svfiprintf_r+0x5c>
 800abc0:	2a25      	cmp	r2, #37	; 0x25
 800abc2:	d1f9      	bne.n	800abb8 <_svfiprintf_r+0x50>
 800abc4:	ebba 0b04 	subs.w	fp, sl, r4
 800abc8:	d00b      	beq.n	800abe2 <_svfiprintf_r+0x7a>
 800abca:	465b      	mov	r3, fp
 800abcc:	4622      	mov	r2, r4
 800abce:	4629      	mov	r1, r5
 800abd0:	4638      	mov	r0, r7
 800abd2:	f7ff ff6d 	bl	800aab0 <__ssputs_r>
 800abd6:	3001      	adds	r0, #1
 800abd8:	f000 80aa 	beq.w	800ad30 <_svfiprintf_r+0x1c8>
 800abdc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800abde:	445a      	add	r2, fp
 800abe0:	9209      	str	r2, [sp, #36]	; 0x24
 800abe2:	f89a 3000 	ldrb.w	r3, [sl]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	f000 80a2 	beq.w	800ad30 <_svfiprintf_r+0x1c8>
 800abec:	2300      	movs	r3, #0
 800abee:	f04f 32ff 	mov.w	r2, #4294967295
 800abf2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800abf6:	f10a 0a01 	add.w	sl, sl, #1
 800abfa:	9304      	str	r3, [sp, #16]
 800abfc:	9307      	str	r3, [sp, #28]
 800abfe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ac02:	931a      	str	r3, [sp, #104]	; 0x68
 800ac04:	4654      	mov	r4, sl
 800ac06:	2205      	movs	r2, #5
 800ac08:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac0c:	4851      	ldr	r0, [pc, #324]	; (800ad54 <_svfiprintf_r+0x1ec>)
 800ac0e:	f7ff f999 	bl	8009f44 <memchr>
 800ac12:	9a04      	ldr	r2, [sp, #16]
 800ac14:	b9d8      	cbnz	r0, 800ac4e <_svfiprintf_r+0xe6>
 800ac16:	06d0      	lsls	r0, r2, #27
 800ac18:	bf44      	itt	mi
 800ac1a:	2320      	movmi	r3, #32
 800ac1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ac20:	0711      	lsls	r1, r2, #28
 800ac22:	bf44      	itt	mi
 800ac24:	232b      	movmi	r3, #43	; 0x2b
 800ac26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ac2a:	f89a 3000 	ldrb.w	r3, [sl]
 800ac2e:	2b2a      	cmp	r3, #42	; 0x2a
 800ac30:	d015      	beq.n	800ac5e <_svfiprintf_r+0xf6>
 800ac32:	4654      	mov	r4, sl
 800ac34:	2000      	movs	r0, #0
 800ac36:	f04f 0c0a 	mov.w	ip, #10
 800ac3a:	9a07      	ldr	r2, [sp, #28]
 800ac3c:	4621      	mov	r1, r4
 800ac3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ac42:	3b30      	subs	r3, #48	; 0x30
 800ac44:	2b09      	cmp	r3, #9
 800ac46:	d94e      	bls.n	800ace6 <_svfiprintf_r+0x17e>
 800ac48:	b1b0      	cbz	r0, 800ac78 <_svfiprintf_r+0x110>
 800ac4a:	9207      	str	r2, [sp, #28]
 800ac4c:	e014      	b.n	800ac78 <_svfiprintf_r+0x110>
 800ac4e:	eba0 0308 	sub.w	r3, r0, r8
 800ac52:	fa09 f303 	lsl.w	r3, r9, r3
 800ac56:	4313      	orrs	r3, r2
 800ac58:	46a2      	mov	sl, r4
 800ac5a:	9304      	str	r3, [sp, #16]
 800ac5c:	e7d2      	b.n	800ac04 <_svfiprintf_r+0x9c>
 800ac5e:	9b03      	ldr	r3, [sp, #12]
 800ac60:	1d19      	adds	r1, r3, #4
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	9103      	str	r1, [sp, #12]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	bfbb      	ittet	lt
 800ac6a:	425b      	neglt	r3, r3
 800ac6c:	f042 0202 	orrlt.w	r2, r2, #2
 800ac70:	9307      	strge	r3, [sp, #28]
 800ac72:	9307      	strlt	r3, [sp, #28]
 800ac74:	bfb8      	it	lt
 800ac76:	9204      	strlt	r2, [sp, #16]
 800ac78:	7823      	ldrb	r3, [r4, #0]
 800ac7a:	2b2e      	cmp	r3, #46	; 0x2e
 800ac7c:	d10c      	bne.n	800ac98 <_svfiprintf_r+0x130>
 800ac7e:	7863      	ldrb	r3, [r4, #1]
 800ac80:	2b2a      	cmp	r3, #42	; 0x2a
 800ac82:	d135      	bne.n	800acf0 <_svfiprintf_r+0x188>
 800ac84:	9b03      	ldr	r3, [sp, #12]
 800ac86:	3402      	adds	r4, #2
 800ac88:	1d1a      	adds	r2, r3, #4
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	9203      	str	r2, [sp, #12]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	bfb8      	it	lt
 800ac92:	f04f 33ff 	movlt.w	r3, #4294967295
 800ac96:	9305      	str	r3, [sp, #20]
 800ac98:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800ad58 <_svfiprintf_r+0x1f0>
 800ac9c:	2203      	movs	r2, #3
 800ac9e:	4650      	mov	r0, sl
 800aca0:	7821      	ldrb	r1, [r4, #0]
 800aca2:	f7ff f94f 	bl	8009f44 <memchr>
 800aca6:	b140      	cbz	r0, 800acba <_svfiprintf_r+0x152>
 800aca8:	2340      	movs	r3, #64	; 0x40
 800acaa:	eba0 000a 	sub.w	r0, r0, sl
 800acae:	fa03 f000 	lsl.w	r0, r3, r0
 800acb2:	9b04      	ldr	r3, [sp, #16]
 800acb4:	3401      	adds	r4, #1
 800acb6:	4303      	orrs	r3, r0
 800acb8:	9304      	str	r3, [sp, #16]
 800acba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800acbe:	2206      	movs	r2, #6
 800acc0:	4826      	ldr	r0, [pc, #152]	; (800ad5c <_svfiprintf_r+0x1f4>)
 800acc2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800acc6:	f7ff f93d 	bl	8009f44 <memchr>
 800acca:	2800      	cmp	r0, #0
 800accc:	d038      	beq.n	800ad40 <_svfiprintf_r+0x1d8>
 800acce:	4b24      	ldr	r3, [pc, #144]	; (800ad60 <_svfiprintf_r+0x1f8>)
 800acd0:	bb1b      	cbnz	r3, 800ad1a <_svfiprintf_r+0x1b2>
 800acd2:	9b03      	ldr	r3, [sp, #12]
 800acd4:	3307      	adds	r3, #7
 800acd6:	f023 0307 	bic.w	r3, r3, #7
 800acda:	3308      	adds	r3, #8
 800acdc:	9303      	str	r3, [sp, #12]
 800acde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ace0:	4433      	add	r3, r6
 800ace2:	9309      	str	r3, [sp, #36]	; 0x24
 800ace4:	e767      	b.n	800abb6 <_svfiprintf_r+0x4e>
 800ace6:	460c      	mov	r4, r1
 800ace8:	2001      	movs	r0, #1
 800acea:	fb0c 3202 	mla	r2, ip, r2, r3
 800acee:	e7a5      	b.n	800ac3c <_svfiprintf_r+0xd4>
 800acf0:	2300      	movs	r3, #0
 800acf2:	f04f 0c0a 	mov.w	ip, #10
 800acf6:	4619      	mov	r1, r3
 800acf8:	3401      	adds	r4, #1
 800acfa:	9305      	str	r3, [sp, #20]
 800acfc:	4620      	mov	r0, r4
 800acfe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ad02:	3a30      	subs	r2, #48	; 0x30
 800ad04:	2a09      	cmp	r2, #9
 800ad06:	d903      	bls.n	800ad10 <_svfiprintf_r+0x1a8>
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d0c5      	beq.n	800ac98 <_svfiprintf_r+0x130>
 800ad0c:	9105      	str	r1, [sp, #20]
 800ad0e:	e7c3      	b.n	800ac98 <_svfiprintf_r+0x130>
 800ad10:	4604      	mov	r4, r0
 800ad12:	2301      	movs	r3, #1
 800ad14:	fb0c 2101 	mla	r1, ip, r1, r2
 800ad18:	e7f0      	b.n	800acfc <_svfiprintf_r+0x194>
 800ad1a:	ab03      	add	r3, sp, #12
 800ad1c:	9300      	str	r3, [sp, #0]
 800ad1e:	462a      	mov	r2, r5
 800ad20:	4638      	mov	r0, r7
 800ad22:	4b10      	ldr	r3, [pc, #64]	; (800ad64 <_svfiprintf_r+0x1fc>)
 800ad24:	a904      	add	r1, sp, #16
 800ad26:	f7fc fa5d 	bl	80071e4 <_printf_float>
 800ad2a:	1c42      	adds	r2, r0, #1
 800ad2c:	4606      	mov	r6, r0
 800ad2e:	d1d6      	bne.n	800acde <_svfiprintf_r+0x176>
 800ad30:	89ab      	ldrh	r3, [r5, #12]
 800ad32:	065b      	lsls	r3, r3, #25
 800ad34:	f53f af2c 	bmi.w	800ab90 <_svfiprintf_r+0x28>
 800ad38:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ad3a:	b01d      	add	sp, #116	; 0x74
 800ad3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad40:	ab03      	add	r3, sp, #12
 800ad42:	9300      	str	r3, [sp, #0]
 800ad44:	462a      	mov	r2, r5
 800ad46:	4638      	mov	r0, r7
 800ad48:	4b06      	ldr	r3, [pc, #24]	; (800ad64 <_svfiprintf_r+0x1fc>)
 800ad4a:	a904      	add	r1, sp, #16
 800ad4c:	f7fc fce6 	bl	800771c <_printf_i>
 800ad50:	e7eb      	b.n	800ad2a <_svfiprintf_r+0x1c2>
 800ad52:	bf00      	nop
 800ad54:	0800c684 	.word	0x0800c684
 800ad58:	0800c68a 	.word	0x0800c68a
 800ad5c:	0800c68e 	.word	0x0800c68e
 800ad60:	080071e5 	.word	0x080071e5
 800ad64:	0800aab1 	.word	0x0800aab1

0800ad68 <nan>:
 800ad68:	2000      	movs	r0, #0
 800ad6a:	4901      	ldr	r1, [pc, #4]	; (800ad70 <nan+0x8>)
 800ad6c:	4770      	bx	lr
 800ad6e:	bf00      	nop
 800ad70:	7ff80000 	.word	0x7ff80000

0800ad74 <_sbrk_r>:
 800ad74:	b538      	push	{r3, r4, r5, lr}
 800ad76:	2300      	movs	r3, #0
 800ad78:	4d05      	ldr	r5, [pc, #20]	; (800ad90 <_sbrk_r+0x1c>)
 800ad7a:	4604      	mov	r4, r0
 800ad7c:	4608      	mov	r0, r1
 800ad7e:	602b      	str	r3, [r5, #0]
 800ad80:	f7f7 fa0c 	bl	800219c <_sbrk>
 800ad84:	1c43      	adds	r3, r0, #1
 800ad86:	d102      	bne.n	800ad8e <_sbrk_r+0x1a>
 800ad88:	682b      	ldr	r3, [r5, #0]
 800ad8a:	b103      	cbz	r3, 800ad8e <_sbrk_r+0x1a>
 800ad8c:	6023      	str	r3, [r4, #0]
 800ad8e:	bd38      	pop	{r3, r4, r5, pc}
 800ad90:	200027b0 	.word	0x200027b0

0800ad94 <strncmp>:
 800ad94:	4603      	mov	r3, r0
 800ad96:	b510      	push	{r4, lr}
 800ad98:	b172      	cbz	r2, 800adb8 <strncmp+0x24>
 800ad9a:	3901      	subs	r1, #1
 800ad9c:	1884      	adds	r4, r0, r2
 800ad9e:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ada2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ada6:	4290      	cmp	r0, r2
 800ada8:	d101      	bne.n	800adae <strncmp+0x1a>
 800adaa:	42a3      	cmp	r3, r4
 800adac:	d101      	bne.n	800adb2 <strncmp+0x1e>
 800adae:	1a80      	subs	r0, r0, r2
 800adb0:	bd10      	pop	{r4, pc}
 800adb2:	2800      	cmp	r0, #0
 800adb4:	d1f3      	bne.n	800ad9e <strncmp+0xa>
 800adb6:	e7fa      	b.n	800adae <strncmp+0x1a>
 800adb8:	4610      	mov	r0, r2
 800adba:	e7f9      	b.n	800adb0 <strncmp+0x1c>

0800adbc <__ascii_wctomb>:
 800adbc:	4603      	mov	r3, r0
 800adbe:	4608      	mov	r0, r1
 800adc0:	b141      	cbz	r1, 800add4 <__ascii_wctomb+0x18>
 800adc2:	2aff      	cmp	r2, #255	; 0xff
 800adc4:	d904      	bls.n	800add0 <__ascii_wctomb+0x14>
 800adc6:	228a      	movs	r2, #138	; 0x8a
 800adc8:	f04f 30ff 	mov.w	r0, #4294967295
 800adcc:	601a      	str	r2, [r3, #0]
 800adce:	4770      	bx	lr
 800add0:	2001      	movs	r0, #1
 800add2:	700a      	strb	r2, [r1, #0]
 800add4:	4770      	bx	lr
	...

0800add8 <__assert_func>:
 800add8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800adda:	4614      	mov	r4, r2
 800addc:	461a      	mov	r2, r3
 800adde:	4b09      	ldr	r3, [pc, #36]	; (800ae04 <__assert_func+0x2c>)
 800ade0:	4605      	mov	r5, r0
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	68d8      	ldr	r0, [r3, #12]
 800ade6:	b14c      	cbz	r4, 800adfc <__assert_func+0x24>
 800ade8:	4b07      	ldr	r3, [pc, #28]	; (800ae08 <__assert_func+0x30>)
 800adea:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800adee:	9100      	str	r1, [sp, #0]
 800adf0:	462b      	mov	r3, r5
 800adf2:	4906      	ldr	r1, [pc, #24]	; (800ae0c <__assert_func+0x34>)
 800adf4:	f000 f80e 	bl	800ae14 <fiprintf>
 800adf8:	f000 fa70 	bl	800b2dc <abort>
 800adfc:	4b04      	ldr	r3, [pc, #16]	; (800ae10 <__assert_func+0x38>)
 800adfe:	461c      	mov	r4, r3
 800ae00:	e7f3      	b.n	800adea <__assert_func+0x12>
 800ae02:	bf00      	nop
 800ae04:	20000018 	.word	0x20000018
 800ae08:	0800c695 	.word	0x0800c695
 800ae0c:	0800c6a2 	.word	0x0800c6a2
 800ae10:	0800c6d0 	.word	0x0800c6d0

0800ae14 <fiprintf>:
 800ae14:	b40e      	push	{r1, r2, r3}
 800ae16:	b503      	push	{r0, r1, lr}
 800ae18:	4601      	mov	r1, r0
 800ae1a:	ab03      	add	r3, sp, #12
 800ae1c:	4805      	ldr	r0, [pc, #20]	; (800ae34 <fiprintf+0x20>)
 800ae1e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae22:	6800      	ldr	r0, [r0, #0]
 800ae24:	9301      	str	r3, [sp, #4]
 800ae26:	f000 f869 	bl	800aefc <_vfiprintf_r>
 800ae2a:	b002      	add	sp, #8
 800ae2c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ae30:	b003      	add	sp, #12
 800ae32:	4770      	bx	lr
 800ae34:	20000018 	.word	0x20000018

0800ae38 <__malloc_lock>:
 800ae38:	4801      	ldr	r0, [pc, #4]	; (800ae40 <__malloc_lock+0x8>)
 800ae3a:	f000 bc0b 	b.w	800b654 <__retarget_lock_acquire_recursive>
 800ae3e:	bf00      	nop
 800ae40:	200027b4 	.word	0x200027b4

0800ae44 <__malloc_unlock>:
 800ae44:	4801      	ldr	r0, [pc, #4]	; (800ae4c <__malloc_unlock+0x8>)
 800ae46:	f000 bc06 	b.w	800b656 <__retarget_lock_release_recursive>
 800ae4a:	bf00      	nop
 800ae4c:	200027b4 	.word	0x200027b4

0800ae50 <_realloc_r>:
 800ae50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae54:	4680      	mov	r8, r0
 800ae56:	4614      	mov	r4, r2
 800ae58:	460e      	mov	r6, r1
 800ae5a:	b921      	cbnz	r1, 800ae66 <_realloc_r+0x16>
 800ae5c:	4611      	mov	r1, r2
 800ae5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ae62:	f7ff bdb1 	b.w	800a9c8 <_malloc_r>
 800ae66:	b92a      	cbnz	r2, 800ae74 <_realloc_r+0x24>
 800ae68:	f7ff fd46 	bl	800a8f8 <_free_r>
 800ae6c:	4625      	mov	r5, r4
 800ae6e:	4628      	mov	r0, r5
 800ae70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae74:	f000 fc56 	bl	800b724 <_malloc_usable_size_r>
 800ae78:	4284      	cmp	r4, r0
 800ae7a:	4607      	mov	r7, r0
 800ae7c:	d802      	bhi.n	800ae84 <_realloc_r+0x34>
 800ae7e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ae82:	d812      	bhi.n	800aeaa <_realloc_r+0x5a>
 800ae84:	4621      	mov	r1, r4
 800ae86:	4640      	mov	r0, r8
 800ae88:	f7ff fd9e 	bl	800a9c8 <_malloc_r>
 800ae8c:	4605      	mov	r5, r0
 800ae8e:	2800      	cmp	r0, #0
 800ae90:	d0ed      	beq.n	800ae6e <_realloc_r+0x1e>
 800ae92:	42bc      	cmp	r4, r7
 800ae94:	4622      	mov	r2, r4
 800ae96:	4631      	mov	r1, r6
 800ae98:	bf28      	it	cs
 800ae9a:	463a      	movcs	r2, r7
 800ae9c:	f7fc f8d4 	bl	8007048 <memcpy>
 800aea0:	4631      	mov	r1, r6
 800aea2:	4640      	mov	r0, r8
 800aea4:	f7ff fd28 	bl	800a8f8 <_free_r>
 800aea8:	e7e1      	b.n	800ae6e <_realloc_r+0x1e>
 800aeaa:	4635      	mov	r5, r6
 800aeac:	e7df      	b.n	800ae6e <_realloc_r+0x1e>

0800aeae <__sfputc_r>:
 800aeae:	6893      	ldr	r3, [r2, #8]
 800aeb0:	b410      	push	{r4}
 800aeb2:	3b01      	subs	r3, #1
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	6093      	str	r3, [r2, #8]
 800aeb8:	da07      	bge.n	800aeca <__sfputc_r+0x1c>
 800aeba:	6994      	ldr	r4, [r2, #24]
 800aebc:	42a3      	cmp	r3, r4
 800aebe:	db01      	blt.n	800aec4 <__sfputc_r+0x16>
 800aec0:	290a      	cmp	r1, #10
 800aec2:	d102      	bne.n	800aeca <__sfputc_r+0x1c>
 800aec4:	bc10      	pop	{r4}
 800aec6:	f000 b949 	b.w	800b15c <__swbuf_r>
 800aeca:	6813      	ldr	r3, [r2, #0]
 800aecc:	1c58      	adds	r0, r3, #1
 800aece:	6010      	str	r0, [r2, #0]
 800aed0:	7019      	strb	r1, [r3, #0]
 800aed2:	4608      	mov	r0, r1
 800aed4:	bc10      	pop	{r4}
 800aed6:	4770      	bx	lr

0800aed8 <__sfputs_r>:
 800aed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aeda:	4606      	mov	r6, r0
 800aedc:	460f      	mov	r7, r1
 800aede:	4614      	mov	r4, r2
 800aee0:	18d5      	adds	r5, r2, r3
 800aee2:	42ac      	cmp	r4, r5
 800aee4:	d101      	bne.n	800aeea <__sfputs_r+0x12>
 800aee6:	2000      	movs	r0, #0
 800aee8:	e007      	b.n	800aefa <__sfputs_r+0x22>
 800aeea:	463a      	mov	r2, r7
 800aeec:	4630      	mov	r0, r6
 800aeee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aef2:	f7ff ffdc 	bl	800aeae <__sfputc_r>
 800aef6:	1c43      	adds	r3, r0, #1
 800aef8:	d1f3      	bne.n	800aee2 <__sfputs_r+0xa>
 800aefa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800aefc <_vfiprintf_r>:
 800aefc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af00:	460d      	mov	r5, r1
 800af02:	4614      	mov	r4, r2
 800af04:	4698      	mov	r8, r3
 800af06:	4606      	mov	r6, r0
 800af08:	b09d      	sub	sp, #116	; 0x74
 800af0a:	b118      	cbz	r0, 800af14 <_vfiprintf_r+0x18>
 800af0c:	6983      	ldr	r3, [r0, #24]
 800af0e:	b90b      	cbnz	r3, 800af14 <_vfiprintf_r+0x18>
 800af10:	f000 fb02 	bl	800b518 <__sinit>
 800af14:	4b89      	ldr	r3, [pc, #548]	; (800b13c <_vfiprintf_r+0x240>)
 800af16:	429d      	cmp	r5, r3
 800af18:	d11b      	bne.n	800af52 <_vfiprintf_r+0x56>
 800af1a:	6875      	ldr	r5, [r6, #4]
 800af1c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800af1e:	07d9      	lsls	r1, r3, #31
 800af20:	d405      	bmi.n	800af2e <_vfiprintf_r+0x32>
 800af22:	89ab      	ldrh	r3, [r5, #12]
 800af24:	059a      	lsls	r2, r3, #22
 800af26:	d402      	bmi.n	800af2e <_vfiprintf_r+0x32>
 800af28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800af2a:	f000 fb93 	bl	800b654 <__retarget_lock_acquire_recursive>
 800af2e:	89ab      	ldrh	r3, [r5, #12]
 800af30:	071b      	lsls	r3, r3, #28
 800af32:	d501      	bpl.n	800af38 <_vfiprintf_r+0x3c>
 800af34:	692b      	ldr	r3, [r5, #16]
 800af36:	b9eb      	cbnz	r3, 800af74 <_vfiprintf_r+0x78>
 800af38:	4629      	mov	r1, r5
 800af3a:	4630      	mov	r0, r6
 800af3c:	f000 f960 	bl	800b200 <__swsetup_r>
 800af40:	b1c0      	cbz	r0, 800af74 <_vfiprintf_r+0x78>
 800af42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800af44:	07dc      	lsls	r4, r3, #31
 800af46:	d50e      	bpl.n	800af66 <_vfiprintf_r+0x6a>
 800af48:	f04f 30ff 	mov.w	r0, #4294967295
 800af4c:	b01d      	add	sp, #116	; 0x74
 800af4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af52:	4b7b      	ldr	r3, [pc, #492]	; (800b140 <_vfiprintf_r+0x244>)
 800af54:	429d      	cmp	r5, r3
 800af56:	d101      	bne.n	800af5c <_vfiprintf_r+0x60>
 800af58:	68b5      	ldr	r5, [r6, #8]
 800af5a:	e7df      	b.n	800af1c <_vfiprintf_r+0x20>
 800af5c:	4b79      	ldr	r3, [pc, #484]	; (800b144 <_vfiprintf_r+0x248>)
 800af5e:	429d      	cmp	r5, r3
 800af60:	bf08      	it	eq
 800af62:	68f5      	ldreq	r5, [r6, #12]
 800af64:	e7da      	b.n	800af1c <_vfiprintf_r+0x20>
 800af66:	89ab      	ldrh	r3, [r5, #12]
 800af68:	0598      	lsls	r0, r3, #22
 800af6a:	d4ed      	bmi.n	800af48 <_vfiprintf_r+0x4c>
 800af6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800af6e:	f000 fb72 	bl	800b656 <__retarget_lock_release_recursive>
 800af72:	e7e9      	b.n	800af48 <_vfiprintf_r+0x4c>
 800af74:	2300      	movs	r3, #0
 800af76:	9309      	str	r3, [sp, #36]	; 0x24
 800af78:	2320      	movs	r3, #32
 800af7a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800af7e:	2330      	movs	r3, #48	; 0x30
 800af80:	f04f 0901 	mov.w	r9, #1
 800af84:	f8cd 800c 	str.w	r8, [sp, #12]
 800af88:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800b148 <_vfiprintf_r+0x24c>
 800af8c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800af90:	4623      	mov	r3, r4
 800af92:	469a      	mov	sl, r3
 800af94:	f813 2b01 	ldrb.w	r2, [r3], #1
 800af98:	b10a      	cbz	r2, 800af9e <_vfiprintf_r+0xa2>
 800af9a:	2a25      	cmp	r2, #37	; 0x25
 800af9c:	d1f9      	bne.n	800af92 <_vfiprintf_r+0x96>
 800af9e:	ebba 0b04 	subs.w	fp, sl, r4
 800afa2:	d00b      	beq.n	800afbc <_vfiprintf_r+0xc0>
 800afa4:	465b      	mov	r3, fp
 800afa6:	4622      	mov	r2, r4
 800afa8:	4629      	mov	r1, r5
 800afaa:	4630      	mov	r0, r6
 800afac:	f7ff ff94 	bl	800aed8 <__sfputs_r>
 800afb0:	3001      	adds	r0, #1
 800afb2:	f000 80aa 	beq.w	800b10a <_vfiprintf_r+0x20e>
 800afb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800afb8:	445a      	add	r2, fp
 800afba:	9209      	str	r2, [sp, #36]	; 0x24
 800afbc:	f89a 3000 	ldrb.w	r3, [sl]
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	f000 80a2 	beq.w	800b10a <_vfiprintf_r+0x20e>
 800afc6:	2300      	movs	r3, #0
 800afc8:	f04f 32ff 	mov.w	r2, #4294967295
 800afcc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800afd0:	f10a 0a01 	add.w	sl, sl, #1
 800afd4:	9304      	str	r3, [sp, #16]
 800afd6:	9307      	str	r3, [sp, #28]
 800afd8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800afdc:	931a      	str	r3, [sp, #104]	; 0x68
 800afde:	4654      	mov	r4, sl
 800afe0:	2205      	movs	r2, #5
 800afe2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afe6:	4858      	ldr	r0, [pc, #352]	; (800b148 <_vfiprintf_r+0x24c>)
 800afe8:	f7fe ffac 	bl	8009f44 <memchr>
 800afec:	9a04      	ldr	r2, [sp, #16]
 800afee:	b9d8      	cbnz	r0, 800b028 <_vfiprintf_r+0x12c>
 800aff0:	06d1      	lsls	r1, r2, #27
 800aff2:	bf44      	itt	mi
 800aff4:	2320      	movmi	r3, #32
 800aff6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800affa:	0713      	lsls	r3, r2, #28
 800affc:	bf44      	itt	mi
 800affe:	232b      	movmi	r3, #43	; 0x2b
 800b000:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b004:	f89a 3000 	ldrb.w	r3, [sl]
 800b008:	2b2a      	cmp	r3, #42	; 0x2a
 800b00a:	d015      	beq.n	800b038 <_vfiprintf_r+0x13c>
 800b00c:	4654      	mov	r4, sl
 800b00e:	2000      	movs	r0, #0
 800b010:	f04f 0c0a 	mov.w	ip, #10
 800b014:	9a07      	ldr	r2, [sp, #28]
 800b016:	4621      	mov	r1, r4
 800b018:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b01c:	3b30      	subs	r3, #48	; 0x30
 800b01e:	2b09      	cmp	r3, #9
 800b020:	d94e      	bls.n	800b0c0 <_vfiprintf_r+0x1c4>
 800b022:	b1b0      	cbz	r0, 800b052 <_vfiprintf_r+0x156>
 800b024:	9207      	str	r2, [sp, #28]
 800b026:	e014      	b.n	800b052 <_vfiprintf_r+0x156>
 800b028:	eba0 0308 	sub.w	r3, r0, r8
 800b02c:	fa09 f303 	lsl.w	r3, r9, r3
 800b030:	4313      	orrs	r3, r2
 800b032:	46a2      	mov	sl, r4
 800b034:	9304      	str	r3, [sp, #16]
 800b036:	e7d2      	b.n	800afde <_vfiprintf_r+0xe2>
 800b038:	9b03      	ldr	r3, [sp, #12]
 800b03a:	1d19      	adds	r1, r3, #4
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	9103      	str	r1, [sp, #12]
 800b040:	2b00      	cmp	r3, #0
 800b042:	bfbb      	ittet	lt
 800b044:	425b      	neglt	r3, r3
 800b046:	f042 0202 	orrlt.w	r2, r2, #2
 800b04a:	9307      	strge	r3, [sp, #28]
 800b04c:	9307      	strlt	r3, [sp, #28]
 800b04e:	bfb8      	it	lt
 800b050:	9204      	strlt	r2, [sp, #16]
 800b052:	7823      	ldrb	r3, [r4, #0]
 800b054:	2b2e      	cmp	r3, #46	; 0x2e
 800b056:	d10c      	bne.n	800b072 <_vfiprintf_r+0x176>
 800b058:	7863      	ldrb	r3, [r4, #1]
 800b05a:	2b2a      	cmp	r3, #42	; 0x2a
 800b05c:	d135      	bne.n	800b0ca <_vfiprintf_r+0x1ce>
 800b05e:	9b03      	ldr	r3, [sp, #12]
 800b060:	3402      	adds	r4, #2
 800b062:	1d1a      	adds	r2, r3, #4
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	9203      	str	r2, [sp, #12]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	bfb8      	it	lt
 800b06c:	f04f 33ff 	movlt.w	r3, #4294967295
 800b070:	9305      	str	r3, [sp, #20]
 800b072:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800b14c <_vfiprintf_r+0x250>
 800b076:	2203      	movs	r2, #3
 800b078:	4650      	mov	r0, sl
 800b07a:	7821      	ldrb	r1, [r4, #0]
 800b07c:	f7fe ff62 	bl	8009f44 <memchr>
 800b080:	b140      	cbz	r0, 800b094 <_vfiprintf_r+0x198>
 800b082:	2340      	movs	r3, #64	; 0x40
 800b084:	eba0 000a 	sub.w	r0, r0, sl
 800b088:	fa03 f000 	lsl.w	r0, r3, r0
 800b08c:	9b04      	ldr	r3, [sp, #16]
 800b08e:	3401      	adds	r4, #1
 800b090:	4303      	orrs	r3, r0
 800b092:	9304      	str	r3, [sp, #16]
 800b094:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b098:	2206      	movs	r2, #6
 800b09a:	482d      	ldr	r0, [pc, #180]	; (800b150 <_vfiprintf_r+0x254>)
 800b09c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b0a0:	f7fe ff50 	bl	8009f44 <memchr>
 800b0a4:	2800      	cmp	r0, #0
 800b0a6:	d03f      	beq.n	800b128 <_vfiprintf_r+0x22c>
 800b0a8:	4b2a      	ldr	r3, [pc, #168]	; (800b154 <_vfiprintf_r+0x258>)
 800b0aa:	bb1b      	cbnz	r3, 800b0f4 <_vfiprintf_r+0x1f8>
 800b0ac:	9b03      	ldr	r3, [sp, #12]
 800b0ae:	3307      	adds	r3, #7
 800b0b0:	f023 0307 	bic.w	r3, r3, #7
 800b0b4:	3308      	adds	r3, #8
 800b0b6:	9303      	str	r3, [sp, #12]
 800b0b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0ba:	443b      	add	r3, r7
 800b0bc:	9309      	str	r3, [sp, #36]	; 0x24
 800b0be:	e767      	b.n	800af90 <_vfiprintf_r+0x94>
 800b0c0:	460c      	mov	r4, r1
 800b0c2:	2001      	movs	r0, #1
 800b0c4:	fb0c 3202 	mla	r2, ip, r2, r3
 800b0c8:	e7a5      	b.n	800b016 <_vfiprintf_r+0x11a>
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	f04f 0c0a 	mov.w	ip, #10
 800b0d0:	4619      	mov	r1, r3
 800b0d2:	3401      	adds	r4, #1
 800b0d4:	9305      	str	r3, [sp, #20]
 800b0d6:	4620      	mov	r0, r4
 800b0d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b0dc:	3a30      	subs	r2, #48	; 0x30
 800b0de:	2a09      	cmp	r2, #9
 800b0e0:	d903      	bls.n	800b0ea <_vfiprintf_r+0x1ee>
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d0c5      	beq.n	800b072 <_vfiprintf_r+0x176>
 800b0e6:	9105      	str	r1, [sp, #20]
 800b0e8:	e7c3      	b.n	800b072 <_vfiprintf_r+0x176>
 800b0ea:	4604      	mov	r4, r0
 800b0ec:	2301      	movs	r3, #1
 800b0ee:	fb0c 2101 	mla	r1, ip, r1, r2
 800b0f2:	e7f0      	b.n	800b0d6 <_vfiprintf_r+0x1da>
 800b0f4:	ab03      	add	r3, sp, #12
 800b0f6:	9300      	str	r3, [sp, #0]
 800b0f8:	462a      	mov	r2, r5
 800b0fa:	4630      	mov	r0, r6
 800b0fc:	4b16      	ldr	r3, [pc, #88]	; (800b158 <_vfiprintf_r+0x25c>)
 800b0fe:	a904      	add	r1, sp, #16
 800b100:	f7fc f870 	bl	80071e4 <_printf_float>
 800b104:	4607      	mov	r7, r0
 800b106:	1c78      	adds	r0, r7, #1
 800b108:	d1d6      	bne.n	800b0b8 <_vfiprintf_r+0x1bc>
 800b10a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b10c:	07d9      	lsls	r1, r3, #31
 800b10e:	d405      	bmi.n	800b11c <_vfiprintf_r+0x220>
 800b110:	89ab      	ldrh	r3, [r5, #12]
 800b112:	059a      	lsls	r2, r3, #22
 800b114:	d402      	bmi.n	800b11c <_vfiprintf_r+0x220>
 800b116:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b118:	f000 fa9d 	bl	800b656 <__retarget_lock_release_recursive>
 800b11c:	89ab      	ldrh	r3, [r5, #12]
 800b11e:	065b      	lsls	r3, r3, #25
 800b120:	f53f af12 	bmi.w	800af48 <_vfiprintf_r+0x4c>
 800b124:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b126:	e711      	b.n	800af4c <_vfiprintf_r+0x50>
 800b128:	ab03      	add	r3, sp, #12
 800b12a:	9300      	str	r3, [sp, #0]
 800b12c:	462a      	mov	r2, r5
 800b12e:	4630      	mov	r0, r6
 800b130:	4b09      	ldr	r3, [pc, #36]	; (800b158 <_vfiprintf_r+0x25c>)
 800b132:	a904      	add	r1, sp, #16
 800b134:	f7fc faf2 	bl	800771c <_printf_i>
 800b138:	e7e4      	b.n	800b104 <_vfiprintf_r+0x208>
 800b13a:	bf00      	nop
 800b13c:	0800c6f4 	.word	0x0800c6f4
 800b140:	0800c714 	.word	0x0800c714
 800b144:	0800c6d4 	.word	0x0800c6d4
 800b148:	0800c684 	.word	0x0800c684
 800b14c:	0800c68a 	.word	0x0800c68a
 800b150:	0800c68e 	.word	0x0800c68e
 800b154:	080071e5 	.word	0x080071e5
 800b158:	0800aed9 	.word	0x0800aed9

0800b15c <__swbuf_r>:
 800b15c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b15e:	460e      	mov	r6, r1
 800b160:	4614      	mov	r4, r2
 800b162:	4605      	mov	r5, r0
 800b164:	b118      	cbz	r0, 800b16e <__swbuf_r+0x12>
 800b166:	6983      	ldr	r3, [r0, #24]
 800b168:	b90b      	cbnz	r3, 800b16e <__swbuf_r+0x12>
 800b16a:	f000 f9d5 	bl	800b518 <__sinit>
 800b16e:	4b21      	ldr	r3, [pc, #132]	; (800b1f4 <__swbuf_r+0x98>)
 800b170:	429c      	cmp	r4, r3
 800b172:	d12b      	bne.n	800b1cc <__swbuf_r+0x70>
 800b174:	686c      	ldr	r4, [r5, #4]
 800b176:	69a3      	ldr	r3, [r4, #24]
 800b178:	60a3      	str	r3, [r4, #8]
 800b17a:	89a3      	ldrh	r3, [r4, #12]
 800b17c:	071a      	lsls	r2, r3, #28
 800b17e:	d52f      	bpl.n	800b1e0 <__swbuf_r+0x84>
 800b180:	6923      	ldr	r3, [r4, #16]
 800b182:	b36b      	cbz	r3, 800b1e0 <__swbuf_r+0x84>
 800b184:	6923      	ldr	r3, [r4, #16]
 800b186:	6820      	ldr	r0, [r4, #0]
 800b188:	b2f6      	uxtb	r6, r6
 800b18a:	1ac0      	subs	r0, r0, r3
 800b18c:	6963      	ldr	r3, [r4, #20]
 800b18e:	4637      	mov	r7, r6
 800b190:	4283      	cmp	r3, r0
 800b192:	dc04      	bgt.n	800b19e <__swbuf_r+0x42>
 800b194:	4621      	mov	r1, r4
 800b196:	4628      	mov	r0, r5
 800b198:	f000 f92a 	bl	800b3f0 <_fflush_r>
 800b19c:	bb30      	cbnz	r0, 800b1ec <__swbuf_r+0x90>
 800b19e:	68a3      	ldr	r3, [r4, #8]
 800b1a0:	3001      	adds	r0, #1
 800b1a2:	3b01      	subs	r3, #1
 800b1a4:	60a3      	str	r3, [r4, #8]
 800b1a6:	6823      	ldr	r3, [r4, #0]
 800b1a8:	1c5a      	adds	r2, r3, #1
 800b1aa:	6022      	str	r2, [r4, #0]
 800b1ac:	701e      	strb	r6, [r3, #0]
 800b1ae:	6963      	ldr	r3, [r4, #20]
 800b1b0:	4283      	cmp	r3, r0
 800b1b2:	d004      	beq.n	800b1be <__swbuf_r+0x62>
 800b1b4:	89a3      	ldrh	r3, [r4, #12]
 800b1b6:	07db      	lsls	r3, r3, #31
 800b1b8:	d506      	bpl.n	800b1c8 <__swbuf_r+0x6c>
 800b1ba:	2e0a      	cmp	r6, #10
 800b1bc:	d104      	bne.n	800b1c8 <__swbuf_r+0x6c>
 800b1be:	4621      	mov	r1, r4
 800b1c0:	4628      	mov	r0, r5
 800b1c2:	f000 f915 	bl	800b3f0 <_fflush_r>
 800b1c6:	b988      	cbnz	r0, 800b1ec <__swbuf_r+0x90>
 800b1c8:	4638      	mov	r0, r7
 800b1ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b1cc:	4b0a      	ldr	r3, [pc, #40]	; (800b1f8 <__swbuf_r+0x9c>)
 800b1ce:	429c      	cmp	r4, r3
 800b1d0:	d101      	bne.n	800b1d6 <__swbuf_r+0x7a>
 800b1d2:	68ac      	ldr	r4, [r5, #8]
 800b1d4:	e7cf      	b.n	800b176 <__swbuf_r+0x1a>
 800b1d6:	4b09      	ldr	r3, [pc, #36]	; (800b1fc <__swbuf_r+0xa0>)
 800b1d8:	429c      	cmp	r4, r3
 800b1da:	bf08      	it	eq
 800b1dc:	68ec      	ldreq	r4, [r5, #12]
 800b1de:	e7ca      	b.n	800b176 <__swbuf_r+0x1a>
 800b1e0:	4621      	mov	r1, r4
 800b1e2:	4628      	mov	r0, r5
 800b1e4:	f000 f80c 	bl	800b200 <__swsetup_r>
 800b1e8:	2800      	cmp	r0, #0
 800b1ea:	d0cb      	beq.n	800b184 <__swbuf_r+0x28>
 800b1ec:	f04f 37ff 	mov.w	r7, #4294967295
 800b1f0:	e7ea      	b.n	800b1c8 <__swbuf_r+0x6c>
 800b1f2:	bf00      	nop
 800b1f4:	0800c6f4 	.word	0x0800c6f4
 800b1f8:	0800c714 	.word	0x0800c714
 800b1fc:	0800c6d4 	.word	0x0800c6d4

0800b200 <__swsetup_r>:
 800b200:	4b32      	ldr	r3, [pc, #200]	; (800b2cc <__swsetup_r+0xcc>)
 800b202:	b570      	push	{r4, r5, r6, lr}
 800b204:	681d      	ldr	r5, [r3, #0]
 800b206:	4606      	mov	r6, r0
 800b208:	460c      	mov	r4, r1
 800b20a:	b125      	cbz	r5, 800b216 <__swsetup_r+0x16>
 800b20c:	69ab      	ldr	r3, [r5, #24]
 800b20e:	b913      	cbnz	r3, 800b216 <__swsetup_r+0x16>
 800b210:	4628      	mov	r0, r5
 800b212:	f000 f981 	bl	800b518 <__sinit>
 800b216:	4b2e      	ldr	r3, [pc, #184]	; (800b2d0 <__swsetup_r+0xd0>)
 800b218:	429c      	cmp	r4, r3
 800b21a:	d10f      	bne.n	800b23c <__swsetup_r+0x3c>
 800b21c:	686c      	ldr	r4, [r5, #4]
 800b21e:	89a3      	ldrh	r3, [r4, #12]
 800b220:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b224:	0719      	lsls	r1, r3, #28
 800b226:	d42c      	bmi.n	800b282 <__swsetup_r+0x82>
 800b228:	06dd      	lsls	r5, r3, #27
 800b22a:	d411      	bmi.n	800b250 <__swsetup_r+0x50>
 800b22c:	2309      	movs	r3, #9
 800b22e:	6033      	str	r3, [r6, #0]
 800b230:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b234:	f04f 30ff 	mov.w	r0, #4294967295
 800b238:	81a3      	strh	r3, [r4, #12]
 800b23a:	e03e      	b.n	800b2ba <__swsetup_r+0xba>
 800b23c:	4b25      	ldr	r3, [pc, #148]	; (800b2d4 <__swsetup_r+0xd4>)
 800b23e:	429c      	cmp	r4, r3
 800b240:	d101      	bne.n	800b246 <__swsetup_r+0x46>
 800b242:	68ac      	ldr	r4, [r5, #8]
 800b244:	e7eb      	b.n	800b21e <__swsetup_r+0x1e>
 800b246:	4b24      	ldr	r3, [pc, #144]	; (800b2d8 <__swsetup_r+0xd8>)
 800b248:	429c      	cmp	r4, r3
 800b24a:	bf08      	it	eq
 800b24c:	68ec      	ldreq	r4, [r5, #12]
 800b24e:	e7e6      	b.n	800b21e <__swsetup_r+0x1e>
 800b250:	0758      	lsls	r0, r3, #29
 800b252:	d512      	bpl.n	800b27a <__swsetup_r+0x7a>
 800b254:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b256:	b141      	cbz	r1, 800b26a <__swsetup_r+0x6a>
 800b258:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b25c:	4299      	cmp	r1, r3
 800b25e:	d002      	beq.n	800b266 <__swsetup_r+0x66>
 800b260:	4630      	mov	r0, r6
 800b262:	f7ff fb49 	bl	800a8f8 <_free_r>
 800b266:	2300      	movs	r3, #0
 800b268:	6363      	str	r3, [r4, #52]	; 0x34
 800b26a:	89a3      	ldrh	r3, [r4, #12]
 800b26c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b270:	81a3      	strh	r3, [r4, #12]
 800b272:	2300      	movs	r3, #0
 800b274:	6063      	str	r3, [r4, #4]
 800b276:	6923      	ldr	r3, [r4, #16]
 800b278:	6023      	str	r3, [r4, #0]
 800b27a:	89a3      	ldrh	r3, [r4, #12]
 800b27c:	f043 0308 	orr.w	r3, r3, #8
 800b280:	81a3      	strh	r3, [r4, #12]
 800b282:	6923      	ldr	r3, [r4, #16]
 800b284:	b94b      	cbnz	r3, 800b29a <__swsetup_r+0x9a>
 800b286:	89a3      	ldrh	r3, [r4, #12]
 800b288:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b28c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b290:	d003      	beq.n	800b29a <__swsetup_r+0x9a>
 800b292:	4621      	mov	r1, r4
 800b294:	4630      	mov	r0, r6
 800b296:	f000 fa05 	bl	800b6a4 <__smakebuf_r>
 800b29a:	89a0      	ldrh	r0, [r4, #12]
 800b29c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b2a0:	f010 0301 	ands.w	r3, r0, #1
 800b2a4:	d00a      	beq.n	800b2bc <__swsetup_r+0xbc>
 800b2a6:	2300      	movs	r3, #0
 800b2a8:	60a3      	str	r3, [r4, #8]
 800b2aa:	6963      	ldr	r3, [r4, #20]
 800b2ac:	425b      	negs	r3, r3
 800b2ae:	61a3      	str	r3, [r4, #24]
 800b2b0:	6923      	ldr	r3, [r4, #16]
 800b2b2:	b943      	cbnz	r3, 800b2c6 <__swsetup_r+0xc6>
 800b2b4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b2b8:	d1ba      	bne.n	800b230 <__swsetup_r+0x30>
 800b2ba:	bd70      	pop	{r4, r5, r6, pc}
 800b2bc:	0781      	lsls	r1, r0, #30
 800b2be:	bf58      	it	pl
 800b2c0:	6963      	ldrpl	r3, [r4, #20]
 800b2c2:	60a3      	str	r3, [r4, #8]
 800b2c4:	e7f4      	b.n	800b2b0 <__swsetup_r+0xb0>
 800b2c6:	2000      	movs	r0, #0
 800b2c8:	e7f7      	b.n	800b2ba <__swsetup_r+0xba>
 800b2ca:	bf00      	nop
 800b2cc:	20000018 	.word	0x20000018
 800b2d0:	0800c6f4 	.word	0x0800c6f4
 800b2d4:	0800c714 	.word	0x0800c714
 800b2d8:	0800c6d4 	.word	0x0800c6d4

0800b2dc <abort>:
 800b2dc:	2006      	movs	r0, #6
 800b2de:	b508      	push	{r3, lr}
 800b2e0:	f000 fa50 	bl	800b784 <raise>
 800b2e4:	2001      	movs	r0, #1
 800b2e6:	f7f6 ff2d 	bl	8002144 <_exit>
	...

0800b2ec <__sflush_r>:
 800b2ec:	898a      	ldrh	r2, [r1, #12]
 800b2ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2f0:	4605      	mov	r5, r0
 800b2f2:	0710      	lsls	r0, r2, #28
 800b2f4:	460c      	mov	r4, r1
 800b2f6:	d457      	bmi.n	800b3a8 <__sflush_r+0xbc>
 800b2f8:	684b      	ldr	r3, [r1, #4]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	dc04      	bgt.n	800b308 <__sflush_r+0x1c>
 800b2fe:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b300:	2b00      	cmp	r3, #0
 800b302:	dc01      	bgt.n	800b308 <__sflush_r+0x1c>
 800b304:	2000      	movs	r0, #0
 800b306:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b308:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b30a:	2e00      	cmp	r6, #0
 800b30c:	d0fa      	beq.n	800b304 <__sflush_r+0x18>
 800b30e:	2300      	movs	r3, #0
 800b310:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b314:	682f      	ldr	r7, [r5, #0]
 800b316:	602b      	str	r3, [r5, #0]
 800b318:	d032      	beq.n	800b380 <__sflush_r+0x94>
 800b31a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b31c:	89a3      	ldrh	r3, [r4, #12]
 800b31e:	075a      	lsls	r2, r3, #29
 800b320:	d505      	bpl.n	800b32e <__sflush_r+0x42>
 800b322:	6863      	ldr	r3, [r4, #4]
 800b324:	1ac0      	subs	r0, r0, r3
 800b326:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b328:	b10b      	cbz	r3, 800b32e <__sflush_r+0x42>
 800b32a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b32c:	1ac0      	subs	r0, r0, r3
 800b32e:	2300      	movs	r3, #0
 800b330:	4602      	mov	r2, r0
 800b332:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b334:	4628      	mov	r0, r5
 800b336:	6a21      	ldr	r1, [r4, #32]
 800b338:	47b0      	blx	r6
 800b33a:	1c43      	adds	r3, r0, #1
 800b33c:	89a3      	ldrh	r3, [r4, #12]
 800b33e:	d106      	bne.n	800b34e <__sflush_r+0x62>
 800b340:	6829      	ldr	r1, [r5, #0]
 800b342:	291d      	cmp	r1, #29
 800b344:	d82c      	bhi.n	800b3a0 <__sflush_r+0xb4>
 800b346:	4a29      	ldr	r2, [pc, #164]	; (800b3ec <__sflush_r+0x100>)
 800b348:	40ca      	lsrs	r2, r1
 800b34a:	07d6      	lsls	r6, r2, #31
 800b34c:	d528      	bpl.n	800b3a0 <__sflush_r+0xb4>
 800b34e:	2200      	movs	r2, #0
 800b350:	6062      	str	r2, [r4, #4]
 800b352:	6922      	ldr	r2, [r4, #16]
 800b354:	04d9      	lsls	r1, r3, #19
 800b356:	6022      	str	r2, [r4, #0]
 800b358:	d504      	bpl.n	800b364 <__sflush_r+0x78>
 800b35a:	1c42      	adds	r2, r0, #1
 800b35c:	d101      	bne.n	800b362 <__sflush_r+0x76>
 800b35e:	682b      	ldr	r3, [r5, #0]
 800b360:	b903      	cbnz	r3, 800b364 <__sflush_r+0x78>
 800b362:	6560      	str	r0, [r4, #84]	; 0x54
 800b364:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b366:	602f      	str	r7, [r5, #0]
 800b368:	2900      	cmp	r1, #0
 800b36a:	d0cb      	beq.n	800b304 <__sflush_r+0x18>
 800b36c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b370:	4299      	cmp	r1, r3
 800b372:	d002      	beq.n	800b37a <__sflush_r+0x8e>
 800b374:	4628      	mov	r0, r5
 800b376:	f7ff fabf 	bl	800a8f8 <_free_r>
 800b37a:	2000      	movs	r0, #0
 800b37c:	6360      	str	r0, [r4, #52]	; 0x34
 800b37e:	e7c2      	b.n	800b306 <__sflush_r+0x1a>
 800b380:	6a21      	ldr	r1, [r4, #32]
 800b382:	2301      	movs	r3, #1
 800b384:	4628      	mov	r0, r5
 800b386:	47b0      	blx	r6
 800b388:	1c41      	adds	r1, r0, #1
 800b38a:	d1c7      	bne.n	800b31c <__sflush_r+0x30>
 800b38c:	682b      	ldr	r3, [r5, #0]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d0c4      	beq.n	800b31c <__sflush_r+0x30>
 800b392:	2b1d      	cmp	r3, #29
 800b394:	d001      	beq.n	800b39a <__sflush_r+0xae>
 800b396:	2b16      	cmp	r3, #22
 800b398:	d101      	bne.n	800b39e <__sflush_r+0xb2>
 800b39a:	602f      	str	r7, [r5, #0]
 800b39c:	e7b2      	b.n	800b304 <__sflush_r+0x18>
 800b39e:	89a3      	ldrh	r3, [r4, #12]
 800b3a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b3a4:	81a3      	strh	r3, [r4, #12]
 800b3a6:	e7ae      	b.n	800b306 <__sflush_r+0x1a>
 800b3a8:	690f      	ldr	r7, [r1, #16]
 800b3aa:	2f00      	cmp	r7, #0
 800b3ac:	d0aa      	beq.n	800b304 <__sflush_r+0x18>
 800b3ae:	0793      	lsls	r3, r2, #30
 800b3b0:	bf18      	it	ne
 800b3b2:	2300      	movne	r3, #0
 800b3b4:	680e      	ldr	r6, [r1, #0]
 800b3b6:	bf08      	it	eq
 800b3b8:	694b      	ldreq	r3, [r1, #20]
 800b3ba:	1bf6      	subs	r6, r6, r7
 800b3bc:	600f      	str	r7, [r1, #0]
 800b3be:	608b      	str	r3, [r1, #8]
 800b3c0:	2e00      	cmp	r6, #0
 800b3c2:	dd9f      	ble.n	800b304 <__sflush_r+0x18>
 800b3c4:	4633      	mov	r3, r6
 800b3c6:	463a      	mov	r2, r7
 800b3c8:	4628      	mov	r0, r5
 800b3ca:	6a21      	ldr	r1, [r4, #32]
 800b3cc:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800b3d0:	47e0      	blx	ip
 800b3d2:	2800      	cmp	r0, #0
 800b3d4:	dc06      	bgt.n	800b3e4 <__sflush_r+0xf8>
 800b3d6:	89a3      	ldrh	r3, [r4, #12]
 800b3d8:	f04f 30ff 	mov.w	r0, #4294967295
 800b3dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b3e0:	81a3      	strh	r3, [r4, #12]
 800b3e2:	e790      	b.n	800b306 <__sflush_r+0x1a>
 800b3e4:	4407      	add	r7, r0
 800b3e6:	1a36      	subs	r6, r6, r0
 800b3e8:	e7ea      	b.n	800b3c0 <__sflush_r+0xd4>
 800b3ea:	bf00      	nop
 800b3ec:	20400001 	.word	0x20400001

0800b3f0 <_fflush_r>:
 800b3f0:	b538      	push	{r3, r4, r5, lr}
 800b3f2:	690b      	ldr	r3, [r1, #16]
 800b3f4:	4605      	mov	r5, r0
 800b3f6:	460c      	mov	r4, r1
 800b3f8:	b913      	cbnz	r3, 800b400 <_fflush_r+0x10>
 800b3fa:	2500      	movs	r5, #0
 800b3fc:	4628      	mov	r0, r5
 800b3fe:	bd38      	pop	{r3, r4, r5, pc}
 800b400:	b118      	cbz	r0, 800b40a <_fflush_r+0x1a>
 800b402:	6983      	ldr	r3, [r0, #24]
 800b404:	b90b      	cbnz	r3, 800b40a <_fflush_r+0x1a>
 800b406:	f000 f887 	bl	800b518 <__sinit>
 800b40a:	4b14      	ldr	r3, [pc, #80]	; (800b45c <_fflush_r+0x6c>)
 800b40c:	429c      	cmp	r4, r3
 800b40e:	d11b      	bne.n	800b448 <_fflush_r+0x58>
 800b410:	686c      	ldr	r4, [r5, #4]
 800b412:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b416:	2b00      	cmp	r3, #0
 800b418:	d0ef      	beq.n	800b3fa <_fflush_r+0xa>
 800b41a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b41c:	07d0      	lsls	r0, r2, #31
 800b41e:	d404      	bmi.n	800b42a <_fflush_r+0x3a>
 800b420:	0599      	lsls	r1, r3, #22
 800b422:	d402      	bmi.n	800b42a <_fflush_r+0x3a>
 800b424:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b426:	f000 f915 	bl	800b654 <__retarget_lock_acquire_recursive>
 800b42a:	4628      	mov	r0, r5
 800b42c:	4621      	mov	r1, r4
 800b42e:	f7ff ff5d 	bl	800b2ec <__sflush_r>
 800b432:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b434:	4605      	mov	r5, r0
 800b436:	07da      	lsls	r2, r3, #31
 800b438:	d4e0      	bmi.n	800b3fc <_fflush_r+0xc>
 800b43a:	89a3      	ldrh	r3, [r4, #12]
 800b43c:	059b      	lsls	r3, r3, #22
 800b43e:	d4dd      	bmi.n	800b3fc <_fflush_r+0xc>
 800b440:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b442:	f000 f908 	bl	800b656 <__retarget_lock_release_recursive>
 800b446:	e7d9      	b.n	800b3fc <_fflush_r+0xc>
 800b448:	4b05      	ldr	r3, [pc, #20]	; (800b460 <_fflush_r+0x70>)
 800b44a:	429c      	cmp	r4, r3
 800b44c:	d101      	bne.n	800b452 <_fflush_r+0x62>
 800b44e:	68ac      	ldr	r4, [r5, #8]
 800b450:	e7df      	b.n	800b412 <_fflush_r+0x22>
 800b452:	4b04      	ldr	r3, [pc, #16]	; (800b464 <_fflush_r+0x74>)
 800b454:	429c      	cmp	r4, r3
 800b456:	bf08      	it	eq
 800b458:	68ec      	ldreq	r4, [r5, #12]
 800b45a:	e7da      	b.n	800b412 <_fflush_r+0x22>
 800b45c:	0800c6f4 	.word	0x0800c6f4
 800b460:	0800c714 	.word	0x0800c714
 800b464:	0800c6d4 	.word	0x0800c6d4

0800b468 <std>:
 800b468:	2300      	movs	r3, #0
 800b46a:	b510      	push	{r4, lr}
 800b46c:	4604      	mov	r4, r0
 800b46e:	e9c0 3300 	strd	r3, r3, [r0]
 800b472:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b476:	6083      	str	r3, [r0, #8]
 800b478:	8181      	strh	r1, [r0, #12]
 800b47a:	6643      	str	r3, [r0, #100]	; 0x64
 800b47c:	81c2      	strh	r2, [r0, #14]
 800b47e:	6183      	str	r3, [r0, #24]
 800b480:	4619      	mov	r1, r3
 800b482:	2208      	movs	r2, #8
 800b484:	305c      	adds	r0, #92	; 0x5c
 800b486:	f7fb fe07 	bl	8007098 <memset>
 800b48a:	4b05      	ldr	r3, [pc, #20]	; (800b4a0 <std+0x38>)
 800b48c:	6224      	str	r4, [r4, #32]
 800b48e:	6263      	str	r3, [r4, #36]	; 0x24
 800b490:	4b04      	ldr	r3, [pc, #16]	; (800b4a4 <std+0x3c>)
 800b492:	62a3      	str	r3, [r4, #40]	; 0x28
 800b494:	4b04      	ldr	r3, [pc, #16]	; (800b4a8 <std+0x40>)
 800b496:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b498:	4b04      	ldr	r3, [pc, #16]	; (800b4ac <std+0x44>)
 800b49a:	6323      	str	r3, [r4, #48]	; 0x30
 800b49c:	bd10      	pop	{r4, pc}
 800b49e:	bf00      	nop
 800b4a0:	0800b7bd 	.word	0x0800b7bd
 800b4a4:	0800b7df 	.word	0x0800b7df
 800b4a8:	0800b817 	.word	0x0800b817
 800b4ac:	0800b83b 	.word	0x0800b83b

0800b4b0 <_cleanup_r>:
 800b4b0:	4901      	ldr	r1, [pc, #4]	; (800b4b8 <_cleanup_r+0x8>)
 800b4b2:	f000 b8af 	b.w	800b614 <_fwalk_reent>
 800b4b6:	bf00      	nop
 800b4b8:	0800b3f1 	.word	0x0800b3f1

0800b4bc <__sfmoreglue>:
 800b4bc:	2268      	movs	r2, #104	; 0x68
 800b4be:	b570      	push	{r4, r5, r6, lr}
 800b4c0:	1e4d      	subs	r5, r1, #1
 800b4c2:	4355      	muls	r5, r2
 800b4c4:	460e      	mov	r6, r1
 800b4c6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b4ca:	f7ff fa7d 	bl	800a9c8 <_malloc_r>
 800b4ce:	4604      	mov	r4, r0
 800b4d0:	b140      	cbz	r0, 800b4e4 <__sfmoreglue+0x28>
 800b4d2:	2100      	movs	r1, #0
 800b4d4:	e9c0 1600 	strd	r1, r6, [r0]
 800b4d8:	300c      	adds	r0, #12
 800b4da:	60a0      	str	r0, [r4, #8]
 800b4dc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b4e0:	f7fb fdda 	bl	8007098 <memset>
 800b4e4:	4620      	mov	r0, r4
 800b4e6:	bd70      	pop	{r4, r5, r6, pc}

0800b4e8 <__sfp_lock_acquire>:
 800b4e8:	4801      	ldr	r0, [pc, #4]	; (800b4f0 <__sfp_lock_acquire+0x8>)
 800b4ea:	f000 b8b3 	b.w	800b654 <__retarget_lock_acquire_recursive>
 800b4ee:	bf00      	nop
 800b4f0:	200027b5 	.word	0x200027b5

0800b4f4 <__sfp_lock_release>:
 800b4f4:	4801      	ldr	r0, [pc, #4]	; (800b4fc <__sfp_lock_release+0x8>)
 800b4f6:	f000 b8ae 	b.w	800b656 <__retarget_lock_release_recursive>
 800b4fa:	bf00      	nop
 800b4fc:	200027b5 	.word	0x200027b5

0800b500 <__sinit_lock_acquire>:
 800b500:	4801      	ldr	r0, [pc, #4]	; (800b508 <__sinit_lock_acquire+0x8>)
 800b502:	f000 b8a7 	b.w	800b654 <__retarget_lock_acquire_recursive>
 800b506:	bf00      	nop
 800b508:	200027b6 	.word	0x200027b6

0800b50c <__sinit_lock_release>:
 800b50c:	4801      	ldr	r0, [pc, #4]	; (800b514 <__sinit_lock_release+0x8>)
 800b50e:	f000 b8a2 	b.w	800b656 <__retarget_lock_release_recursive>
 800b512:	bf00      	nop
 800b514:	200027b6 	.word	0x200027b6

0800b518 <__sinit>:
 800b518:	b510      	push	{r4, lr}
 800b51a:	4604      	mov	r4, r0
 800b51c:	f7ff fff0 	bl	800b500 <__sinit_lock_acquire>
 800b520:	69a3      	ldr	r3, [r4, #24]
 800b522:	b11b      	cbz	r3, 800b52c <__sinit+0x14>
 800b524:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b528:	f7ff bff0 	b.w	800b50c <__sinit_lock_release>
 800b52c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b530:	6523      	str	r3, [r4, #80]	; 0x50
 800b532:	4b13      	ldr	r3, [pc, #76]	; (800b580 <__sinit+0x68>)
 800b534:	4a13      	ldr	r2, [pc, #76]	; (800b584 <__sinit+0x6c>)
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	62a2      	str	r2, [r4, #40]	; 0x28
 800b53a:	42a3      	cmp	r3, r4
 800b53c:	bf08      	it	eq
 800b53e:	2301      	moveq	r3, #1
 800b540:	4620      	mov	r0, r4
 800b542:	bf08      	it	eq
 800b544:	61a3      	streq	r3, [r4, #24]
 800b546:	f000 f81f 	bl	800b588 <__sfp>
 800b54a:	6060      	str	r0, [r4, #4]
 800b54c:	4620      	mov	r0, r4
 800b54e:	f000 f81b 	bl	800b588 <__sfp>
 800b552:	60a0      	str	r0, [r4, #8]
 800b554:	4620      	mov	r0, r4
 800b556:	f000 f817 	bl	800b588 <__sfp>
 800b55a:	2200      	movs	r2, #0
 800b55c:	2104      	movs	r1, #4
 800b55e:	60e0      	str	r0, [r4, #12]
 800b560:	6860      	ldr	r0, [r4, #4]
 800b562:	f7ff ff81 	bl	800b468 <std>
 800b566:	2201      	movs	r2, #1
 800b568:	2109      	movs	r1, #9
 800b56a:	68a0      	ldr	r0, [r4, #8]
 800b56c:	f7ff ff7c 	bl	800b468 <std>
 800b570:	2202      	movs	r2, #2
 800b572:	2112      	movs	r1, #18
 800b574:	68e0      	ldr	r0, [r4, #12]
 800b576:	f7ff ff77 	bl	800b468 <std>
 800b57a:	2301      	movs	r3, #1
 800b57c:	61a3      	str	r3, [r4, #24]
 800b57e:	e7d1      	b.n	800b524 <__sinit+0xc>
 800b580:	0800c290 	.word	0x0800c290
 800b584:	0800b4b1 	.word	0x0800b4b1

0800b588 <__sfp>:
 800b588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b58a:	4607      	mov	r7, r0
 800b58c:	f7ff ffac 	bl	800b4e8 <__sfp_lock_acquire>
 800b590:	4b1e      	ldr	r3, [pc, #120]	; (800b60c <__sfp+0x84>)
 800b592:	681e      	ldr	r6, [r3, #0]
 800b594:	69b3      	ldr	r3, [r6, #24]
 800b596:	b913      	cbnz	r3, 800b59e <__sfp+0x16>
 800b598:	4630      	mov	r0, r6
 800b59a:	f7ff ffbd 	bl	800b518 <__sinit>
 800b59e:	3648      	adds	r6, #72	; 0x48
 800b5a0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b5a4:	3b01      	subs	r3, #1
 800b5a6:	d503      	bpl.n	800b5b0 <__sfp+0x28>
 800b5a8:	6833      	ldr	r3, [r6, #0]
 800b5aa:	b30b      	cbz	r3, 800b5f0 <__sfp+0x68>
 800b5ac:	6836      	ldr	r6, [r6, #0]
 800b5ae:	e7f7      	b.n	800b5a0 <__sfp+0x18>
 800b5b0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b5b4:	b9d5      	cbnz	r5, 800b5ec <__sfp+0x64>
 800b5b6:	4b16      	ldr	r3, [pc, #88]	; (800b610 <__sfp+0x88>)
 800b5b8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b5bc:	60e3      	str	r3, [r4, #12]
 800b5be:	6665      	str	r5, [r4, #100]	; 0x64
 800b5c0:	f000 f847 	bl	800b652 <__retarget_lock_init_recursive>
 800b5c4:	f7ff ff96 	bl	800b4f4 <__sfp_lock_release>
 800b5c8:	2208      	movs	r2, #8
 800b5ca:	4629      	mov	r1, r5
 800b5cc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b5d0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b5d4:	6025      	str	r5, [r4, #0]
 800b5d6:	61a5      	str	r5, [r4, #24]
 800b5d8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b5dc:	f7fb fd5c 	bl	8007098 <memset>
 800b5e0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b5e4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b5e8:	4620      	mov	r0, r4
 800b5ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b5ec:	3468      	adds	r4, #104	; 0x68
 800b5ee:	e7d9      	b.n	800b5a4 <__sfp+0x1c>
 800b5f0:	2104      	movs	r1, #4
 800b5f2:	4638      	mov	r0, r7
 800b5f4:	f7ff ff62 	bl	800b4bc <__sfmoreglue>
 800b5f8:	4604      	mov	r4, r0
 800b5fa:	6030      	str	r0, [r6, #0]
 800b5fc:	2800      	cmp	r0, #0
 800b5fe:	d1d5      	bne.n	800b5ac <__sfp+0x24>
 800b600:	f7ff ff78 	bl	800b4f4 <__sfp_lock_release>
 800b604:	230c      	movs	r3, #12
 800b606:	603b      	str	r3, [r7, #0]
 800b608:	e7ee      	b.n	800b5e8 <__sfp+0x60>
 800b60a:	bf00      	nop
 800b60c:	0800c290 	.word	0x0800c290
 800b610:	ffff0001 	.word	0xffff0001

0800b614 <_fwalk_reent>:
 800b614:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b618:	4606      	mov	r6, r0
 800b61a:	4688      	mov	r8, r1
 800b61c:	2700      	movs	r7, #0
 800b61e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b622:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b626:	f1b9 0901 	subs.w	r9, r9, #1
 800b62a:	d505      	bpl.n	800b638 <_fwalk_reent+0x24>
 800b62c:	6824      	ldr	r4, [r4, #0]
 800b62e:	2c00      	cmp	r4, #0
 800b630:	d1f7      	bne.n	800b622 <_fwalk_reent+0xe>
 800b632:	4638      	mov	r0, r7
 800b634:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b638:	89ab      	ldrh	r3, [r5, #12]
 800b63a:	2b01      	cmp	r3, #1
 800b63c:	d907      	bls.n	800b64e <_fwalk_reent+0x3a>
 800b63e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b642:	3301      	adds	r3, #1
 800b644:	d003      	beq.n	800b64e <_fwalk_reent+0x3a>
 800b646:	4629      	mov	r1, r5
 800b648:	4630      	mov	r0, r6
 800b64a:	47c0      	blx	r8
 800b64c:	4307      	orrs	r7, r0
 800b64e:	3568      	adds	r5, #104	; 0x68
 800b650:	e7e9      	b.n	800b626 <_fwalk_reent+0x12>

0800b652 <__retarget_lock_init_recursive>:
 800b652:	4770      	bx	lr

0800b654 <__retarget_lock_acquire_recursive>:
 800b654:	4770      	bx	lr

0800b656 <__retarget_lock_release_recursive>:
 800b656:	4770      	bx	lr

0800b658 <__swhatbuf_r>:
 800b658:	b570      	push	{r4, r5, r6, lr}
 800b65a:	460e      	mov	r6, r1
 800b65c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b660:	4614      	mov	r4, r2
 800b662:	2900      	cmp	r1, #0
 800b664:	461d      	mov	r5, r3
 800b666:	b096      	sub	sp, #88	; 0x58
 800b668:	da08      	bge.n	800b67c <__swhatbuf_r+0x24>
 800b66a:	2200      	movs	r2, #0
 800b66c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b670:	602a      	str	r2, [r5, #0]
 800b672:	061a      	lsls	r2, r3, #24
 800b674:	d410      	bmi.n	800b698 <__swhatbuf_r+0x40>
 800b676:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b67a:	e00e      	b.n	800b69a <__swhatbuf_r+0x42>
 800b67c:	466a      	mov	r2, sp
 800b67e:	f000 f903 	bl	800b888 <_fstat_r>
 800b682:	2800      	cmp	r0, #0
 800b684:	dbf1      	blt.n	800b66a <__swhatbuf_r+0x12>
 800b686:	9a01      	ldr	r2, [sp, #4]
 800b688:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b68c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b690:	425a      	negs	r2, r3
 800b692:	415a      	adcs	r2, r3
 800b694:	602a      	str	r2, [r5, #0]
 800b696:	e7ee      	b.n	800b676 <__swhatbuf_r+0x1e>
 800b698:	2340      	movs	r3, #64	; 0x40
 800b69a:	2000      	movs	r0, #0
 800b69c:	6023      	str	r3, [r4, #0]
 800b69e:	b016      	add	sp, #88	; 0x58
 800b6a0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b6a4 <__smakebuf_r>:
 800b6a4:	898b      	ldrh	r3, [r1, #12]
 800b6a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b6a8:	079d      	lsls	r5, r3, #30
 800b6aa:	4606      	mov	r6, r0
 800b6ac:	460c      	mov	r4, r1
 800b6ae:	d507      	bpl.n	800b6c0 <__smakebuf_r+0x1c>
 800b6b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b6b4:	6023      	str	r3, [r4, #0]
 800b6b6:	6123      	str	r3, [r4, #16]
 800b6b8:	2301      	movs	r3, #1
 800b6ba:	6163      	str	r3, [r4, #20]
 800b6bc:	b002      	add	sp, #8
 800b6be:	bd70      	pop	{r4, r5, r6, pc}
 800b6c0:	466a      	mov	r2, sp
 800b6c2:	ab01      	add	r3, sp, #4
 800b6c4:	f7ff ffc8 	bl	800b658 <__swhatbuf_r>
 800b6c8:	9900      	ldr	r1, [sp, #0]
 800b6ca:	4605      	mov	r5, r0
 800b6cc:	4630      	mov	r0, r6
 800b6ce:	f7ff f97b 	bl	800a9c8 <_malloc_r>
 800b6d2:	b948      	cbnz	r0, 800b6e8 <__smakebuf_r+0x44>
 800b6d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b6d8:	059a      	lsls	r2, r3, #22
 800b6da:	d4ef      	bmi.n	800b6bc <__smakebuf_r+0x18>
 800b6dc:	f023 0303 	bic.w	r3, r3, #3
 800b6e0:	f043 0302 	orr.w	r3, r3, #2
 800b6e4:	81a3      	strh	r3, [r4, #12]
 800b6e6:	e7e3      	b.n	800b6b0 <__smakebuf_r+0xc>
 800b6e8:	4b0d      	ldr	r3, [pc, #52]	; (800b720 <__smakebuf_r+0x7c>)
 800b6ea:	62b3      	str	r3, [r6, #40]	; 0x28
 800b6ec:	89a3      	ldrh	r3, [r4, #12]
 800b6ee:	6020      	str	r0, [r4, #0]
 800b6f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b6f4:	81a3      	strh	r3, [r4, #12]
 800b6f6:	9b00      	ldr	r3, [sp, #0]
 800b6f8:	6120      	str	r0, [r4, #16]
 800b6fa:	6163      	str	r3, [r4, #20]
 800b6fc:	9b01      	ldr	r3, [sp, #4]
 800b6fe:	b15b      	cbz	r3, 800b718 <__smakebuf_r+0x74>
 800b700:	4630      	mov	r0, r6
 800b702:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b706:	f000 f8d1 	bl	800b8ac <_isatty_r>
 800b70a:	b128      	cbz	r0, 800b718 <__smakebuf_r+0x74>
 800b70c:	89a3      	ldrh	r3, [r4, #12]
 800b70e:	f023 0303 	bic.w	r3, r3, #3
 800b712:	f043 0301 	orr.w	r3, r3, #1
 800b716:	81a3      	strh	r3, [r4, #12]
 800b718:	89a0      	ldrh	r0, [r4, #12]
 800b71a:	4305      	orrs	r5, r0
 800b71c:	81a5      	strh	r5, [r4, #12]
 800b71e:	e7cd      	b.n	800b6bc <__smakebuf_r+0x18>
 800b720:	0800b4b1 	.word	0x0800b4b1

0800b724 <_malloc_usable_size_r>:
 800b724:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b728:	1f18      	subs	r0, r3, #4
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	bfbc      	itt	lt
 800b72e:	580b      	ldrlt	r3, [r1, r0]
 800b730:	18c0      	addlt	r0, r0, r3
 800b732:	4770      	bx	lr

0800b734 <_raise_r>:
 800b734:	291f      	cmp	r1, #31
 800b736:	b538      	push	{r3, r4, r5, lr}
 800b738:	4604      	mov	r4, r0
 800b73a:	460d      	mov	r5, r1
 800b73c:	d904      	bls.n	800b748 <_raise_r+0x14>
 800b73e:	2316      	movs	r3, #22
 800b740:	6003      	str	r3, [r0, #0]
 800b742:	f04f 30ff 	mov.w	r0, #4294967295
 800b746:	bd38      	pop	{r3, r4, r5, pc}
 800b748:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b74a:	b112      	cbz	r2, 800b752 <_raise_r+0x1e>
 800b74c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b750:	b94b      	cbnz	r3, 800b766 <_raise_r+0x32>
 800b752:	4620      	mov	r0, r4
 800b754:	f000 f830 	bl	800b7b8 <_getpid_r>
 800b758:	462a      	mov	r2, r5
 800b75a:	4601      	mov	r1, r0
 800b75c:	4620      	mov	r0, r4
 800b75e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b762:	f000 b817 	b.w	800b794 <_kill_r>
 800b766:	2b01      	cmp	r3, #1
 800b768:	d00a      	beq.n	800b780 <_raise_r+0x4c>
 800b76a:	1c59      	adds	r1, r3, #1
 800b76c:	d103      	bne.n	800b776 <_raise_r+0x42>
 800b76e:	2316      	movs	r3, #22
 800b770:	6003      	str	r3, [r0, #0]
 800b772:	2001      	movs	r0, #1
 800b774:	e7e7      	b.n	800b746 <_raise_r+0x12>
 800b776:	2400      	movs	r4, #0
 800b778:	4628      	mov	r0, r5
 800b77a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b77e:	4798      	blx	r3
 800b780:	2000      	movs	r0, #0
 800b782:	e7e0      	b.n	800b746 <_raise_r+0x12>

0800b784 <raise>:
 800b784:	4b02      	ldr	r3, [pc, #8]	; (800b790 <raise+0xc>)
 800b786:	4601      	mov	r1, r0
 800b788:	6818      	ldr	r0, [r3, #0]
 800b78a:	f7ff bfd3 	b.w	800b734 <_raise_r>
 800b78e:	bf00      	nop
 800b790:	20000018 	.word	0x20000018

0800b794 <_kill_r>:
 800b794:	b538      	push	{r3, r4, r5, lr}
 800b796:	2300      	movs	r3, #0
 800b798:	4d06      	ldr	r5, [pc, #24]	; (800b7b4 <_kill_r+0x20>)
 800b79a:	4604      	mov	r4, r0
 800b79c:	4608      	mov	r0, r1
 800b79e:	4611      	mov	r1, r2
 800b7a0:	602b      	str	r3, [r5, #0]
 800b7a2:	f7f6 fcc7 	bl	8002134 <_kill>
 800b7a6:	1c43      	adds	r3, r0, #1
 800b7a8:	d102      	bne.n	800b7b0 <_kill_r+0x1c>
 800b7aa:	682b      	ldr	r3, [r5, #0]
 800b7ac:	b103      	cbz	r3, 800b7b0 <_kill_r+0x1c>
 800b7ae:	6023      	str	r3, [r4, #0]
 800b7b0:	bd38      	pop	{r3, r4, r5, pc}
 800b7b2:	bf00      	nop
 800b7b4:	200027b0 	.word	0x200027b0

0800b7b8 <_getpid_r>:
 800b7b8:	f7f6 bcba 	b.w	8002130 <_getpid>

0800b7bc <__sread>:
 800b7bc:	b510      	push	{r4, lr}
 800b7be:	460c      	mov	r4, r1
 800b7c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7c4:	f000 f894 	bl	800b8f0 <_read_r>
 800b7c8:	2800      	cmp	r0, #0
 800b7ca:	bfab      	itete	ge
 800b7cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b7ce:	89a3      	ldrhlt	r3, [r4, #12]
 800b7d0:	181b      	addge	r3, r3, r0
 800b7d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b7d6:	bfac      	ite	ge
 800b7d8:	6563      	strge	r3, [r4, #84]	; 0x54
 800b7da:	81a3      	strhlt	r3, [r4, #12]
 800b7dc:	bd10      	pop	{r4, pc}

0800b7de <__swrite>:
 800b7de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7e2:	461f      	mov	r7, r3
 800b7e4:	898b      	ldrh	r3, [r1, #12]
 800b7e6:	4605      	mov	r5, r0
 800b7e8:	05db      	lsls	r3, r3, #23
 800b7ea:	460c      	mov	r4, r1
 800b7ec:	4616      	mov	r6, r2
 800b7ee:	d505      	bpl.n	800b7fc <__swrite+0x1e>
 800b7f0:	2302      	movs	r3, #2
 800b7f2:	2200      	movs	r2, #0
 800b7f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7f8:	f000 f868 	bl	800b8cc <_lseek_r>
 800b7fc:	89a3      	ldrh	r3, [r4, #12]
 800b7fe:	4632      	mov	r2, r6
 800b800:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b804:	81a3      	strh	r3, [r4, #12]
 800b806:	4628      	mov	r0, r5
 800b808:	463b      	mov	r3, r7
 800b80a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b80e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b812:	f000 b817 	b.w	800b844 <_write_r>

0800b816 <__sseek>:
 800b816:	b510      	push	{r4, lr}
 800b818:	460c      	mov	r4, r1
 800b81a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b81e:	f000 f855 	bl	800b8cc <_lseek_r>
 800b822:	1c43      	adds	r3, r0, #1
 800b824:	89a3      	ldrh	r3, [r4, #12]
 800b826:	bf15      	itete	ne
 800b828:	6560      	strne	r0, [r4, #84]	; 0x54
 800b82a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b82e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b832:	81a3      	strheq	r3, [r4, #12]
 800b834:	bf18      	it	ne
 800b836:	81a3      	strhne	r3, [r4, #12]
 800b838:	bd10      	pop	{r4, pc}

0800b83a <__sclose>:
 800b83a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b83e:	f000 b813 	b.w	800b868 <_close_r>
	...

0800b844 <_write_r>:
 800b844:	b538      	push	{r3, r4, r5, lr}
 800b846:	4604      	mov	r4, r0
 800b848:	4608      	mov	r0, r1
 800b84a:	4611      	mov	r1, r2
 800b84c:	2200      	movs	r2, #0
 800b84e:	4d05      	ldr	r5, [pc, #20]	; (800b864 <_write_r+0x20>)
 800b850:	602a      	str	r2, [r5, #0]
 800b852:	461a      	mov	r2, r3
 800b854:	f7f6 fc89 	bl	800216a <_write>
 800b858:	1c43      	adds	r3, r0, #1
 800b85a:	d102      	bne.n	800b862 <_write_r+0x1e>
 800b85c:	682b      	ldr	r3, [r5, #0]
 800b85e:	b103      	cbz	r3, 800b862 <_write_r+0x1e>
 800b860:	6023      	str	r3, [r4, #0]
 800b862:	bd38      	pop	{r3, r4, r5, pc}
 800b864:	200027b0 	.word	0x200027b0

0800b868 <_close_r>:
 800b868:	b538      	push	{r3, r4, r5, lr}
 800b86a:	2300      	movs	r3, #0
 800b86c:	4d05      	ldr	r5, [pc, #20]	; (800b884 <_close_r+0x1c>)
 800b86e:	4604      	mov	r4, r0
 800b870:	4608      	mov	r0, r1
 800b872:	602b      	str	r3, [r5, #0]
 800b874:	f7f6 fc86 	bl	8002184 <_close>
 800b878:	1c43      	adds	r3, r0, #1
 800b87a:	d102      	bne.n	800b882 <_close_r+0x1a>
 800b87c:	682b      	ldr	r3, [r5, #0]
 800b87e:	b103      	cbz	r3, 800b882 <_close_r+0x1a>
 800b880:	6023      	str	r3, [r4, #0]
 800b882:	bd38      	pop	{r3, r4, r5, pc}
 800b884:	200027b0 	.word	0x200027b0

0800b888 <_fstat_r>:
 800b888:	b538      	push	{r3, r4, r5, lr}
 800b88a:	2300      	movs	r3, #0
 800b88c:	4d06      	ldr	r5, [pc, #24]	; (800b8a8 <_fstat_r+0x20>)
 800b88e:	4604      	mov	r4, r0
 800b890:	4608      	mov	r0, r1
 800b892:	4611      	mov	r1, r2
 800b894:	602b      	str	r3, [r5, #0]
 800b896:	f7f6 fc78 	bl	800218a <_fstat>
 800b89a:	1c43      	adds	r3, r0, #1
 800b89c:	d102      	bne.n	800b8a4 <_fstat_r+0x1c>
 800b89e:	682b      	ldr	r3, [r5, #0]
 800b8a0:	b103      	cbz	r3, 800b8a4 <_fstat_r+0x1c>
 800b8a2:	6023      	str	r3, [r4, #0]
 800b8a4:	bd38      	pop	{r3, r4, r5, pc}
 800b8a6:	bf00      	nop
 800b8a8:	200027b0 	.word	0x200027b0

0800b8ac <_isatty_r>:
 800b8ac:	b538      	push	{r3, r4, r5, lr}
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	4d05      	ldr	r5, [pc, #20]	; (800b8c8 <_isatty_r+0x1c>)
 800b8b2:	4604      	mov	r4, r0
 800b8b4:	4608      	mov	r0, r1
 800b8b6:	602b      	str	r3, [r5, #0]
 800b8b8:	f7f6 fc6c 	bl	8002194 <_isatty>
 800b8bc:	1c43      	adds	r3, r0, #1
 800b8be:	d102      	bne.n	800b8c6 <_isatty_r+0x1a>
 800b8c0:	682b      	ldr	r3, [r5, #0]
 800b8c2:	b103      	cbz	r3, 800b8c6 <_isatty_r+0x1a>
 800b8c4:	6023      	str	r3, [r4, #0]
 800b8c6:	bd38      	pop	{r3, r4, r5, pc}
 800b8c8:	200027b0 	.word	0x200027b0

0800b8cc <_lseek_r>:
 800b8cc:	b538      	push	{r3, r4, r5, lr}
 800b8ce:	4604      	mov	r4, r0
 800b8d0:	4608      	mov	r0, r1
 800b8d2:	4611      	mov	r1, r2
 800b8d4:	2200      	movs	r2, #0
 800b8d6:	4d05      	ldr	r5, [pc, #20]	; (800b8ec <_lseek_r+0x20>)
 800b8d8:	602a      	str	r2, [r5, #0]
 800b8da:	461a      	mov	r2, r3
 800b8dc:	f7f6 fc5c 	bl	8002198 <_lseek>
 800b8e0:	1c43      	adds	r3, r0, #1
 800b8e2:	d102      	bne.n	800b8ea <_lseek_r+0x1e>
 800b8e4:	682b      	ldr	r3, [r5, #0]
 800b8e6:	b103      	cbz	r3, 800b8ea <_lseek_r+0x1e>
 800b8e8:	6023      	str	r3, [r4, #0]
 800b8ea:	bd38      	pop	{r3, r4, r5, pc}
 800b8ec:	200027b0 	.word	0x200027b0

0800b8f0 <_read_r>:
 800b8f0:	b538      	push	{r3, r4, r5, lr}
 800b8f2:	4604      	mov	r4, r0
 800b8f4:	4608      	mov	r0, r1
 800b8f6:	4611      	mov	r1, r2
 800b8f8:	2200      	movs	r2, #0
 800b8fa:	4d05      	ldr	r5, [pc, #20]	; (800b910 <_read_r+0x20>)
 800b8fc:	602a      	str	r2, [r5, #0]
 800b8fe:	461a      	mov	r2, r3
 800b900:	f7f6 fc26 	bl	8002150 <_read>
 800b904:	1c43      	adds	r3, r0, #1
 800b906:	d102      	bne.n	800b90e <_read_r+0x1e>
 800b908:	682b      	ldr	r3, [r5, #0]
 800b90a:	b103      	cbz	r3, 800b90e <_read_r+0x1e>
 800b90c:	6023      	str	r3, [r4, #0]
 800b90e:	bd38      	pop	{r3, r4, r5, pc}
 800b910:	200027b0 	.word	0x200027b0

0800b914 <_init>:
 800b914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b916:	bf00      	nop
 800b918:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b91a:	bc08      	pop	{r3}
 800b91c:	469e      	mov	lr, r3
 800b91e:	4770      	bx	lr

0800b920 <_fini>:
 800b920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b922:	bf00      	nop
 800b924:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b926:	bc08      	pop	{r3}
 800b928:	469e      	mov	lr, r3
 800b92a:	4770      	bx	lr
