
fl_stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bff4  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e0c  0800c108  0800c108  0001c108  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cf14  0800cf14  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800cf14  0800cf14  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800cf14  0800cf14  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cf14  0800cf14  0001cf14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cf18  0800cf18  0001cf18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800cf1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002754  200001e0  0800d0fc  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20002934  0800d0fc  00022934  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY
 13 .debug_info   00023fa7  00000000  00000000  0002024c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000053e9  00000000  00000000  000441f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 0000f927  00000000  00000000  000495dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000017a8  00000000  00000000  00058f08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000142c  00000000  00000000  0005a6b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001cd13  00000000  00000000  0005badc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000283b7  00000000  00000000  000787ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00099465  00000000  00000000  000a0ba6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000057f8  00000000  00000000  0013a00c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000059  00000000  00000000  0013f804  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c0ec 	.word	0x0800c0ec

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	0800c0ec 	.word	0x0800c0ec

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2uiz>:
 8000a9c:	004a      	lsls	r2, r1, #1
 8000a9e:	d211      	bcs.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa4:	d211      	bcs.n	8000aca <__aeabi_d2uiz+0x2e>
 8000aa6:	d50d      	bpl.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d40e      	bmi.n	8000ad0 <__aeabi_d2uiz+0x34>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ace:	d102      	bne.n	8000ad6 <__aeabi_d2uiz+0x3a>
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad4:	4770      	bx	lr
 8000ad6:	f04f 0000 	mov.w	r0, #0
 8000ada:	4770      	bx	lr

08000adc <__aeabi_d2f>:
 8000adc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ae4:	bf24      	itt	cs
 8000ae6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aee:	d90d      	bls.n	8000b0c <__aeabi_d2f+0x30>
 8000af0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000af4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000afc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b04:	bf08      	it	eq
 8000b06:	f020 0001 	biceq.w	r0, r0, #1
 8000b0a:	4770      	bx	lr
 8000b0c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b10:	d121      	bne.n	8000b56 <__aeabi_d2f+0x7a>
 8000b12:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b16:	bfbc      	itt	lt
 8000b18:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	4770      	bxlt	lr
 8000b1e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b26:	f1c2 0218 	rsb	r2, r2, #24
 8000b2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b32:	fa20 f002 	lsr.w	r0, r0, r2
 8000b36:	bf18      	it	ne
 8000b38:	f040 0001 	orrne.w	r0, r0, #1
 8000b3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b48:	ea40 000c 	orr.w	r0, r0, ip
 8000b4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b54:	e7cc      	b.n	8000af0 <__aeabi_d2f+0x14>
 8000b56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5a:	d107      	bne.n	8000b6c <__aeabi_d2f+0x90>
 8000b5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b60:	bf1e      	ittt	ne
 8000b62:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b66:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b6a:	4770      	bxne	lr
 8000b6c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b70:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_frsub>:
 8000b7c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b80:	e002      	b.n	8000b88 <__addsf3>
 8000b82:	bf00      	nop

08000b84 <__aeabi_fsub>:
 8000b84:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b88 <__addsf3>:
 8000b88:	0042      	lsls	r2, r0, #1
 8000b8a:	bf1f      	itttt	ne
 8000b8c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b90:	ea92 0f03 	teqne	r2, r3
 8000b94:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b98:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b9c:	d06a      	beq.n	8000c74 <__addsf3+0xec>
 8000b9e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ba2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ba6:	bfc1      	itttt	gt
 8000ba8:	18d2      	addgt	r2, r2, r3
 8000baa:	4041      	eorgt	r1, r0
 8000bac:	4048      	eorgt	r0, r1
 8000bae:	4041      	eorgt	r1, r0
 8000bb0:	bfb8      	it	lt
 8000bb2:	425b      	neglt	r3, r3
 8000bb4:	2b19      	cmp	r3, #25
 8000bb6:	bf88      	it	hi
 8000bb8:	4770      	bxhi	lr
 8000bba:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bbe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bc2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bc6:	bf18      	it	ne
 8000bc8:	4240      	negne	r0, r0
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bd2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bd6:	bf18      	it	ne
 8000bd8:	4249      	negne	r1, r1
 8000bda:	ea92 0f03 	teq	r2, r3
 8000bde:	d03f      	beq.n	8000c60 <__addsf3+0xd8>
 8000be0:	f1a2 0201 	sub.w	r2, r2, #1
 8000be4:	fa41 fc03 	asr.w	ip, r1, r3
 8000be8:	eb10 000c 	adds.w	r0, r0, ip
 8000bec:	f1c3 0320 	rsb	r3, r3, #32
 8000bf0:	fa01 f103 	lsl.w	r1, r1, r3
 8000bf4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bf8:	d502      	bpl.n	8000c00 <__addsf3+0x78>
 8000bfa:	4249      	negs	r1, r1
 8000bfc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c00:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c04:	d313      	bcc.n	8000c2e <__addsf3+0xa6>
 8000c06:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c0a:	d306      	bcc.n	8000c1a <__addsf3+0x92>
 8000c0c:	0840      	lsrs	r0, r0, #1
 8000c0e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c12:	f102 0201 	add.w	r2, r2, #1
 8000c16:	2afe      	cmp	r2, #254	; 0xfe
 8000c18:	d251      	bcs.n	8000cbe <__addsf3+0x136>
 8000c1a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c1e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c22:	bf08      	it	eq
 8000c24:	f020 0001 	biceq.w	r0, r0, #1
 8000c28:	ea40 0003 	orr.w	r0, r0, r3
 8000c2c:	4770      	bx	lr
 8000c2e:	0049      	lsls	r1, r1, #1
 8000c30:	eb40 0000 	adc.w	r0, r0, r0
 8000c34:	3a01      	subs	r2, #1
 8000c36:	bf28      	it	cs
 8000c38:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c3c:	d2ed      	bcs.n	8000c1a <__addsf3+0x92>
 8000c3e:	fab0 fc80 	clz	ip, r0
 8000c42:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c46:	ebb2 020c 	subs.w	r2, r2, ip
 8000c4a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c4e:	bfaa      	itet	ge
 8000c50:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c54:	4252      	neglt	r2, r2
 8000c56:	4318      	orrge	r0, r3
 8000c58:	bfbc      	itt	lt
 8000c5a:	40d0      	lsrlt	r0, r2
 8000c5c:	4318      	orrlt	r0, r3
 8000c5e:	4770      	bx	lr
 8000c60:	f092 0f00 	teq	r2, #0
 8000c64:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c68:	bf06      	itte	eq
 8000c6a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c6e:	3201      	addeq	r2, #1
 8000c70:	3b01      	subne	r3, #1
 8000c72:	e7b5      	b.n	8000be0 <__addsf3+0x58>
 8000c74:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c7c:	bf18      	it	ne
 8000c7e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c82:	d021      	beq.n	8000cc8 <__addsf3+0x140>
 8000c84:	ea92 0f03 	teq	r2, r3
 8000c88:	d004      	beq.n	8000c94 <__addsf3+0x10c>
 8000c8a:	f092 0f00 	teq	r2, #0
 8000c8e:	bf08      	it	eq
 8000c90:	4608      	moveq	r0, r1
 8000c92:	4770      	bx	lr
 8000c94:	ea90 0f01 	teq	r0, r1
 8000c98:	bf1c      	itt	ne
 8000c9a:	2000      	movne	r0, #0
 8000c9c:	4770      	bxne	lr
 8000c9e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ca2:	d104      	bne.n	8000cae <__addsf3+0x126>
 8000ca4:	0040      	lsls	r0, r0, #1
 8000ca6:	bf28      	it	cs
 8000ca8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cac:	4770      	bx	lr
 8000cae:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cb2:	bf3c      	itt	cc
 8000cb4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cb8:	4770      	bxcc	lr
 8000cba:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cbe:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cc2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc6:	4770      	bx	lr
 8000cc8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ccc:	bf16      	itet	ne
 8000cce:	4608      	movne	r0, r1
 8000cd0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cd4:	4601      	movne	r1, r0
 8000cd6:	0242      	lsls	r2, r0, #9
 8000cd8:	bf06      	itte	eq
 8000cda:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cde:	ea90 0f01 	teqeq	r0, r1
 8000ce2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_ui2f>:
 8000ce8:	f04f 0300 	mov.w	r3, #0
 8000cec:	e004      	b.n	8000cf8 <__aeabi_i2f+0x8>
 8000cee:	bf00      	nop

08000cf0 <__aeabi_i2f>:
 8000cf0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cf4:	bf48      	it	mi
 8000cf6:	4240      	negmi	r0, r0
 8000cf8:	ea5f 0c00 	movs.w	ip, r0
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d04:	4601      	mov	r1, r0
 8000d06:	f04f 0000 	mov.w	r0, #0
 8000d0a:	e01c      	b.n	8000d46 <__aeabi_l2f+0x2a>

08000d0c <__aeabi_ul2f>:
 8000d0c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d10:	bf08      	it	eq
 8000d12:	4770      	bxeq	lr
 8000d14:	f04f 0300 	mov.w	r3, #0
 8000d18:	e00a      	b.n	8000d30 <__aeabi_l2f+0x14>
 8000d1a:	bf00      	nop

08000d1c <__aeabi_l2f>:
 8000d1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d20:	bf08      	it	eq
 8000d22:	4770      	bxeq	lr
 8000d24:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d28:	d502      	bpl.n	8000d30 <__aeabi_l2f+0x14>
 8000d2a:	4240      	negs	r0, r0
 8000d2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d30:	ea5f 0c01 	movs.w	ip, r1
 8000d34:	bf02      	ittt	eq
 8000d36:	4684      	moveq	ip, r0
 8000d38:	4601      	moveq	r1, r0
 8000d3a:	2000      	moveq	r0, #0
 8000d3c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d40:	bf08      	it	eq
 8000d42:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d46:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d4a:	fabc f28c 	clz	r2, ip
 8000d4e:	3a08      	subs	r2, #8
 8000d50:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d54:	db10      	blt.n	8000d78 <__aeabi_l2f+0x5c>
 8000d56:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d60:	f1c2 0220 	rsb	r2, r2, #32
 8000d64:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d68:	fa20 f202 	lsr.w	r2, r0, r2
 8000d6c:	eb43 0002 	adc.w	r0, r3, r2
 8000d70:	bf08      	it	eq
 8000d72:	f020 0001 	biceq.w	r0, r0, #1
 8000d76:	4770      	bx	lr
 8000d78:	f102 0220 	add.w	r2, r2, #32
 8000d7c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d80:	f1c2 0220 	rsb	r2, r2, #32
 8000d84:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d88:	fa21 f202 	lsr.w	r2, r1, r2
 8000d8c:	eb43 0002 	adc.w	r0, r3, r2
 8000d90:	bf08      	it	eq
 8000d92:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d96:	4770      	bx	lr

08000d98 <__aeabi_fmul>:
 8000d98:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d9c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000da0:	bf1e      	ittt	ne
 8000da2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000da6:	ea92 0f0c 	teqne	r2, ip
 8000daa:	ea93 0f0c 	teqne	r3, ip
 8000dae:	d06f      	beq.n	8000e90 <__aeabi_fmul+0xf8>
 8000db0:	441a      	add	r2, r3
 8000db2:	ea80 0c01 	eor.w	ip, r0, r1
 8000db6:	0240      	lsls	r0, r0, #9
 8000db8:	bf18      	it	ne
 8000dba:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dbe:	d01e      	beq.n	8000dfe <__aeabi_fmul+0x66>
 8000dc0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000dc4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dc8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000dcc:	fba0 3101 	umull	r3, r1, r0, r1
 8000dd0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dd4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dd8:	bf3e      	ittt	cc
 8000dda:	0049      	lslcc	r1, r1, #1
 8000ddc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000de0:	005b      	lslcc	r3, r3, #1
 8000de2:	ea40 0001 	orr.w	r0, r0, r1
 8000de6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dea:	2afd      	cmp	r2, #253	; 0xfd
 8000dec:	d81d      	bhi.n	8000e2a <__aeabi_fmul+0x92>
 8000dee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000df2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000df6:	bf08      	it	eq
 8000df8:	f020 0001 	biceq.w	r0, r0, #1
 8000dfc:	4770      	bx	lr
 8000dfe:	f090 0f00 	teq	r0, #0
 8000e02:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e06:	bf08      	it	eq
 8000e08:	0249      	lsleq	r1, r1, #9
 8000e0a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e0e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e12:	3a7f      	subs	r2, #127	; 0x7f
 8000e14:	bfc2      	ittt	gt
 8000e16:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e1a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e1e:	4770      	bxgt	lr
 8000e20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e24:	f04f 0300 	mov.w	r3, #0
 8000e28:	3a01      	subs	r2, #1
 8000e2a:	dc5d      	bgt.n	8000ee8 <__aeabi_fmul+0x150>
 8000e2c:	f112 0f19 	cmn.w	r2, #25
 8000e30:	bfdc      	itt	le
 8000e32:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e36:	4770      	bxle	lr
 8000e38:	f1c2 0200 	rsb	r2, r2, #0
 8000e3c:	0041      	lsls	r1, r0, #1
 8000e3e:	fa21 f102 	lsr.w	r1, r1, r2
 8000e42:	f1c2 0220 	rsb	r2, r2, #32
 8000e46:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e4a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e4e:	f140 0000 	adc.w	r0, r0, #0
 8000e52:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e56:	bf08      	it	eq
 8000e58:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e5c:	4770      	bx	lr
 8000e5e:	f092 0f00 	teq	r2, #0
 8000e62:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e66:	bf02      	ittt	eq
 8000e68:	0040      	lsleq	r0, r0, #1
 8000e6a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e6e:	3a01      	subeq	r2, #1
 8000e70:	d0f9      	beq.n	8000e66 <__aeabi_fmul+0xce>
 8000e72:	ea40 000c 	orr.w	r0, r0, ip
 8000e76:	f093 0f00 	teq	r3, #0
 8000e7a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e7e:	bf02      	ittt	eq
 8000e80:	0049      	lsleq	r1, r1, #1
 8000e82:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e86:	3b01      	subeq	r3, #1
 8000e88:	d0f9      	beq.n	8000e7e <__aeabi_fmul+0xe6>
 8000e8a:	ea41 010c 	orr.w	r1, r1, ip
 8000e8e:	e78f      	b.n	8000db0 <__aeabi_fmul+0x18>
 8000e90:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e94:	ea92 0f0c 	teq	r2, ip
 8000e98:	bf18      	it	ne
 8000e9a:	ea93 0f0c 	teqne	r3, ip
 8000e9e:	d00a      	beq.n	8000eb6 <__aeabi_fmul+0x11e>
 8000ea0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ea4:	bf18      	it	ne
 8000ea6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000eaa:	d1d8      	bne.n	8000e5e <__aeabi_fmul+0xc6>
 8000eac:	ea80 0001 	eor.w	r0, r0, r1
 8000eb0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000eb4:	4770      	bx	lr
 8000eb6:	f090 0f00 	teq	r0, #0
 8000eba:	bf17      	itett	ne
 8000ebc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ec0:	4608      	moveq	r0, r1
 8000ec2:	f091 0f00 	teqne	r1, #0
 8000ec6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eca:	d014      	beq.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ecc:	ea92 0f0c 	teq	r2, ip
 8000ed0:	d101      	bne.n	8000ed6 <__aeabi_fmul+0x13e>
 8000ed2:	0242      	lsls	r2, r0, #9
 8000ed4:	d10f      	bne.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ed6:	ea93 0f0c 	teq	r3, ip
 8000eda:	d103      	bne.n	8000ee4 <__aeabi_fmul+0x14c>
 8000edc:	024b      	lsls	r3, r1, #9
 8000ede:	bf18      	it	ne
 8000ee0:	4608      	movne	r0, r1
 8000ee2:	d108      	bne.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ee4:	ea80 0001 	eor.w	r0, r0, r1
 8000ee8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000eec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ef0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ef4:	4770      	bx	lr
 8000ef6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000efa:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000efe:	4770      	bx	lr

08000f00 <__aeabi_fdiv>:
 8000f00:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f04:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f08:	bf1e      	ittt	ne
 8000f0a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f0e:	ea92 0f0c 	teqne	r2, ip
 8000f12:	ea93 0f0c 	teqne	r3, ip
 8000f16:	d069      	beq.n	8000fec <__aeabi_fdiv+0xec>
 8000f18:	eba2 0203 	sub.w	r2, r2, r3
 8000f1c:	ea80 0c01 	eor.w	ip, r0, r1
 8000f20:	0249      	lsls	r1, r1, #9
 8000f22:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f26:	d037      	beq.n	8000f98 <__aeabi_fdiv+0x98>
 8000f28:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f2c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f30:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f34:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f38:	428b      	cmp	r3, r1
 8000f3a:	bf38      	it	cc
 8000f3c:	005b      	lslcc	r3, r3, #1
 8000f3e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f42:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f46:	428b      	cmp	r3, r1
 8000f48:	bf24      	itt	cs
 8000f4a:	1a5b      	subcs	r3, r3, r1
 8000f4c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f50:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f54:	bf24      	itt	cs
 8000f56:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f5a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f5e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f62:	bf24      	itt	cs
 8000f64:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f68:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f6c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f70:	bf24      	itt	cs
 8000f72:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f76:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f7a:	011b      	lsls	r3, r3, #4
 8000f7c:	bf18      	it	ne
 8000f7e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f82:	d1e0      	bne.n	8000f46 <__aeabi_fdiv+0x46>
 8000f84:	2afd      	cmp	r2, #253	; 0xfd
 8000f86:	f63f af50 	bhi.w	8000e2a <__aeabi_fmul+0x92>
 8000f8a:	428b      	cmp	r3, r1
 8000f8c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f90:	bf08      	it	eq
 8000f92:	f020 0001 	biceq.w	r0, r0, #1
 8000f96:	4770      	bx	lr
 8000f98:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f9c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fa0:	327f      	adds	r2, #127	; 0x7f
 8000fa2:	bfc2      	ittt	gt
 8000fa4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fa8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fac:	4770      	bxgt	lr
 8000fae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fb2:	f04f 0300 	mov.w	r3, #0
 8000fb6:	3a01      	subs	r2, #1
 8000fb8:	e737      	b.n	8000e2a <__aeabi_fmul+0x92>
 8000fba:	f092 0f00 	teq	r2, #0
 8000fbe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fc2:	bf02      	ittt	eq
 8000fc4:	0040      	lsleq	r0, r0, #1
 8000fc6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fca:	3a01      	subeq	r2, #1
 8000fcc:	d0f9      	beq.n	8000fc2 <__aeabi_fdiv+0xc2>
 8000fce:	ea40 000c 	orr.w	r0, r0, ip
 8000fd2:	f093 0f00 	teq	r3, #0
 8000fd6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fda:	bf02      	ittt	eq
 8000fdc:	0049      	lsleq	r1, r1, #1
 8000fde:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fe2:	3b01      	subeq	r3, #1
 8000fe4:	d0f9      	beq.n	8000fda <__aeabi_fdiv+0xda>
 8000fe6:	ea41 010c 	orr.w	r1, r1, ip
 8000fea:	e795      	b.n	8000f18 <__aeabi_fdiv+0x18>
 8000fec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ff0:	ea92 0f0c 	teq	r2, ip
 8000ff4:	d108      	bne.n	8001008 <__aeabi_fdiv+0x108>
 8000ff6:	0242      	lsls	r2, r0, #9
 8000ff8:	f47f af7d 	bne.w	8000ef6 <__aeabi_fmul+0x15e>
 8000ffc:	ea93 0f0c 	teq	r3, ip
 8001000:	f47f af70 	bne.w	8000ee4 <__aeabi_fmul+0x14c>
 8001004:	4608      	mov	r0, r1
 8001006:	e776      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001008:	ea93 0f0c 	teq	r3, ip
 800100c:	d104      	bne.n	8001018 <__aeabi_fdiv+0x118>
 800100e:	024b      	lsls	r3, r1, #9
 8001010:	f43f af4c 	beq.w	8000eac <__aeabi_fmul+0x114>
 8001014:	4608      	mov	r0, r1
 8001016:	e76e      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001018:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800101c:	bf18      	it	ne
 800101e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001022:	d1ca      	bne.n	8000fba <__aeabi_fdiv+0xba>
 8001024:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001028:	f47f af5c 	bne.w	8000ee4 <__aeabi_fmul+0x14c>
 800102c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001030:	f47f af3c 	bne.w	8000eac <__aeabi_fmul+0x114>
 8001034:	e75f      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001036:	bf00      	nop

08001038 <__gesf2>:
 8001038:	f04f 3cff 	mov.w	ip, #4294967295
 800103c:	e006      	b.n	800104c <__cmpsf2+0x4>
 800103e:	bf00      	nop

08001040 <__lesf2>:
 8001040:	f04f 0c01 	mov.w	ip, #1
 8001044:	e002      	b.n	800104c <__cmpsf2+0x4>
 8001046:	bf00      	nop

08001048 <__cmpsf2>:
 8001048:	f04f 0c01 	mov.w	ip, #1
 800104c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001050:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001054:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001058:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800105c:	bf18      	it	ne
 800105e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001062:	d011      	beq.n	8001088 <__cmpsf2+0x40>
 8001064:	b001      	add	sp, #4
 8001066:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800106a:	bf18      	it	ne
 800106c:	ea90 0f01 	teqne	r0, r1
 8001070:	bf58      	it	pl
 8001072:	ebb2 0003 	subspl.w	r0, r2, r3
 8001076:	bf88      	it	hi
 8001078:	17c8      	asrhi	r0, r1, #31
 800107a:	bf38      	it	cc
 800107c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001080:	bf18      	it	ne
 8001082:	f040 0001 	orrne.w	r0, r0, #1
 8001086:	4770      	bx	lr
 8001088:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800108c:	d102      	bne.n	8001094 <__cmpsf2+0x4c>
 800108e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001092:	d105      	bne.n	80010a0 <__cmpsf2+0x58>
 8001094:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001098:	d1e4      	bne.n	8001064 <__cmpsf2+0x1c>
 800109a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800109e:	d0e1      	beq.n	8001064 <__cmpsf2+0x1c>
 80010a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop

080010a8 <__aeabi_cfrcmple>:
 80010a8:	4684      	mov	ip, r0
 80010aa:	4608      	mov	r0, r1
 80010ac:	4661      	mov	r1, ip
 80010ae:	e7ff      	b.n	80010b0 <__aeabi_cfcmpeq>

080010b0 <__aeabi_cfcmpeq>:
 80010b0:	b50f      	push	{r0, r1, r2, r3, lr}
 80010b2:	f7ff ffc9 	bl	8001048 <__cmpsf2>
 80010b6:	2800      	cmp	r0, #0
 80010b8:	bf48      	it	mi
 80010ba:	f110 0f00 	cmnmi.w	r0, #0
 80010be:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010c0 <__aeabi_fcmpeq>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff fff4 	bl	80010b0 <__aeabi_cfcmpeq>
 80010c8:	bf0c      	ite	eq
 80010ca:	2001      	moveq	r0, #1
 80010cc:	2000      	movne	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmplt>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffea 	bl	80010b0 <__aeabi_cfcmpeq>
 80010dc:	bf34      	ite	cc
 80010de:	2001      	movcc	r0, #1
 80010e0:	2000      	movcs	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmple>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffe0 	bl	80010b0 <__aeabi_cfcmpeq>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpge>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffd2 	bl	80010a8 <__aeabi_cfrcmple>
 8001104:	bf94      	ite	ls
 8001106:	2001      	movls	r0, #1
 8001108:	2000      	movhi	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_fcmpgt>:
 8001110:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001114:	f7ff ffc8 	bl	80010a8 <__aeabi_cfrcmple>
 8001118:	bf34      	ite	cc
 800111a:	2001      	movcc	r0, #1
 800111c:	2000      	movcs	r0, #0
 800111e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001122:	bf00      	nop

08001124 <__aeabi_d2lz>:
 8001124:	b538      	push	{r3, r4, r5, lr}
 8001126:	4605      	mov	r5, r0
 8001128:	460c      	mov	r4, r1
 800112a:	2200      	movs	r2, #0
 800112c:	2300      	movs	r3, #0
 800112e:	4628      	mov	r0, r5
 8001130:	4621      	mov	r1, r4
 8001132:	f7ff fc4d 	bl	80009d0 <__aeabi_dcmplt>
 8001136:	b928      	cbnz	r0, 8001144 <__aeabi_d2lz+0x20>
 8001138:	4628      	mov	r0, r5
 800113a:	4621      	mov	r1, r4
 800113c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001140:	f000 b80a 	b.w	8001158 <__aeabi_d2ulz>
 8001144:	4628      	mov	r0, r5
 8001146:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 800114a:	f000 f805 	bl	8001158 <__aeabi_d2ulz>
 800114e:	4240      	negs	r0, r0
 8001150:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001154:	bd38      	pop	{r3, r4, r5, pc}
 8001156:	bf00      	nop

08001158 <__aeabi_d2ulz>:
 8001158:	b5d0      	push	{r4, r6, r7, lr}
 800115a:	2200      	movs	r2, #0
 800115c:	4b0b      	ldr	r3, [pc, #44]	; (800118c <__aeabi_d2ulz+0x34>)
 800115e:	4606      	mov	r6, r0
 8001160:	460f      	mov	r7, r1
 8001162:	f7ff f9c3 	bl	80004ec <__aeabi_dmul>
 8001166:	f7ff fc99 	bl	8000a9c <__aeabi_d2uiz>
 800116a:	4604      	mov	r4, r0
 800116c:	f7ff f944 	bl	80003f8 <__aeabi_ui2d>
 8001170:	2200      	movs	r2, #0
 8001172:	4b07      	ldr	r3, [pc, #28]	; (8001190 <__aeabi_d2ulz+0x38>)
 8001174:	f7ff f9ba 	bl	80004ec <__aeabi_dmul>
 8001178:	4602      	mov	r2, r0
 800117a:	460b      	mov	r3, r1
 800117c:	4630      	mov	r0, r6
 800117e:	4639      	mov	r1, r7
 8001180:	f7fe fffc 	bl	800017c <__aeabi_dsub>
 8001184:	f7ff fc8a 	bl	8000a9c <__aeabi_d2uiz>
 8001188:	4621      	mov	r1, r4
 800118a:	bdd0      	pop	{r4, r6, r7, pc}
 800118c:	3df00000 	.word	0x3df00000
 8001190:	41f00000 	.word	0x41f00000

08001194 <I2Cx_ReadData16>:
  status = HAL_I2C_Mem_Read(&hi2c2, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, 0x10000);
  return value;
}
//------------------------------------------------
static void I2Cx_ReadData16(uint16_t Addr, uint8_t Reg, uint16_t *Value)
{
 8001194:	b500      	push	{lr}
 8001196:	b085      	sub	sp, #20
  HAL_StatusTypeDef status = HAL_OK;
  status = HAL_I2C_Mem_Read(&hi2c2, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)Value, 2, 0x10000);
 8001198:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800119c:	9302      	str	r3, [sp, #8]
 800119e:	2302      	movs	r3, #2
 80011a0:	9301      	str	r3, [sp, #4]
 80011a2:	9200      	str	r2, [sp, #0]
 80011a4:	2301      	movs	r3, #1
 80011a6:	460a      	mov	r2, r1
 80011a8:	4601      	mov	r1, r0
 80011aa:	4803      	ldr	r0, [pc, #12]	; (80011b8 <I2Cx_ReadData16+0x24>)
 80011ac:	f003 fae6 	bl	800477c <HAL_I2C_Mem_Read>
}
 80011b0:	b005      	add	sp, #20
 80011b2:	f85d fb04 	ldr.w	pc, [sp], #4
 80011b6:	bf00      	nop
 80011b8:	20000544 	.word	0x20000544

080011bc <BME280_WriteReg>:
  HAL_StatusTypeDef status = HAL_OK;
  status = HAL_I2C_Mem_Read(&hi2c2, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)Value, 3, 0x10000);
}
//------------------------------------------------
void BME280_WriteReg(uint8_t Reg, uint8_t Value)
{
 80011bc:	b500      	push	{lr}
 80011be:	b087      	sub	sp, #28
 80011c0:	4602      	mov	r2, r0
  I2Cx_WriteData(BME280_ADDRESS, Reg, Value);
 80011c2:	f88d 1017 	strb.w	r1, [sp, #23]
  status = HAL_I2C_Mem_Write(&hi2c2, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, 0x10000);
 80011c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011ca:	9302      	str	r3, [sp, #8]
 80011cc:	2301      	movs	r3, #1
 80011ce:	9301      	str	r3, [sp, #4]
 80011d0:	f10d 0117 	add.w	r1, sp, #23
 80011d4:	9100      	str	r1, [sp, #0]
 80011d6:	21ec      	movs	r1, #236	; 0xec
 80011d8:	4802      	ldr	r0, [pc, #8]	; (80011e4 <BME280_WriteReg+0x28>)
 80011da:	f003 fa19 	bl	8004610 <HAL_I2C_Mem_Write>
}
 80011de:	b007      	add	sp, #28
 80011e0:	f85d fb04 	ldr.w	pc, [sp], #4
 80011e4:	20000544 	.word	0x20000544

080011e8 <BME280_ReadReg>:
//------------------------------------------------
uint8_t BME280_ReadReg(uint8_t Reg)
{
 80011e8:	b500      	push	{lr}
 80011ea:	b087      	sub	sp, #28
 80011ec:	4602      	mov	r2, r0
  uint8_t value = 0;
 80011ee:	2300      	movs	r3, #0
 80011f0:	f88d 3017 	strb.w	r3, [sp, #23]
  status = HAL_I2C_Mem_Read(&hi2c2, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, 0x10000);
 80011f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011f8:	9302      	str	r3, [sp, #8]
 80011fa:	2301      	movs	r3, #1
 80011fc:	9301      	str	r3, [sp, #4]
 80011fe:	f10d 0117 	add.w	r1, sp, #23
 8001202:	9100      	str	r1, [sp, #0]
 8001204:	21ec      	movs	r1, #236	; 0xec
 8001206:	4804      	ldr	r0, [pc, #16]	; (8001218 <BME280_ReadReg+0x30>)
 8001208:	f003 fab8 	bl	800477c <HAL_I2C_Mem_Read>
  uint8_t res = I2Cx_ReadData(BME280_ADDRESS,Reg);
  return res;
}
 800120c:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8001210:	b007      	add	sp, #28
 8001212:	f85d fb04 	ldr.w	pc, [sp], #4
 8001216:	bf00      	nop
 8001218:	20000544 	.word	0x20000544

0800121c <BME280_ReadReg_U16>:
//------------------------------------------------
void BME280_ReadReg_U16(uint8_t Reg, uint16_t *Value)
{
 800121c:	b508      	push	{r3, lr}
 800121e:	460a      	mov	r2, r1
  I2Cx_ReadData16(BME280_ADDRESS,Reg,Value);
 8001220:	4601      	mov	r1, r0
 8001222:	20ec      	movs	r0, #236	; 0xec
 8001224:	f7ff ffb6 	bl	8001194 <I2Cx_ReadData16>
}
 8001228:	bd08      	pop	{r3, pc}

0800122a <BME280_ReadReg_S16>:
//------------------------------------------------
void BME280_ReadReg_S16(uint8_t Reg, int16_t *Value)
{
 800122a:	b508      	push	{r3, lr}
 800122c:	460a      	mov	r2, r1
  I2Cx_ReadData16(BME280_ADDRESS,Reg, (uint16_t*) Value);
 800122e:	4601      	mov	r1, r0
 8001230:	20ec      	movs	r0, #236	; 0xec
 8001232:	f7ff ffaf 	bl	8001194 <I2Cx_ReadData16>
}
 8001236:	bd08      	pop	{r3, pc}

08001238 <BME280_ReadReg_BE_U24>:
  I2Cx_ReadData24(BME280_ADDRESS,Reg,Value);
  *(uint32_t *) Value &= 0x00FFFFFF;
}
//------------------------------------------------
void BME280_ReadReg_BE_U24(uint8_t Reg, uint32_t *Value)
{
 8001238:	b510      	push	{r4, lr}
 800123a:	b084      	sub	sp, #16
 800123c:	4602      	mov	r2, r0
 800123e:	460c      	mov	r4, r1
  status = HAL_I2C_Mem_Read(&hi2c2, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)Value, 3, 0x10000);
 8001240:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001244:	9302      	str	r3, [sp, #8]
 8001246:	2303      	movs	r3, #3
 8001248:	9301      	str	r3, [sp, #4]
 800124a:	9100      	str	r1, [sp, #0]
 800124c:	2301      	movs	r3, #1
 800124e:	21ec      	movs	r1, #236	; 0xec
 8001250:	4807      	ldr	r0, [pc, #28]	; (8001270 <BME280_ReadReg_BE_U24+0x38>)
 8001252:	f003 fa93 	bl	800477c <HAL_I2C_Mem_Read>
  I2Cx_ReadData24(BME280_ADDRESS,Reg,Value);
  *(uint32_t *) Value = be24toword(*(uint32_t *) Value) & 0x00FFFFFF;
 8001256:	6822      	ldr	r2, [r4, #0]
 8001258:	f3c2 4307 	ubfx	r3, r2, #16, #8
 800125c:	0411      	lsls	r1, r2, #16
 800125e:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
 8001262:	430b      	orrs	r3, r1
 8001264:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8001268:	4313      	orrs	r3, r2
 800126a:	6023      	str	r3, [r4, #0]
}
 800126c:	b004      	add	sp, #16
 800126e:	bd10      	pop	{r4, pc}
 8001270:	20000544 	.word	0x20000544

08001274 <BME280_ReadStatus>:
//------------------------------------------------
uint8_t BME280_ReadStatus(void)
{
 8001274:	b508      	push	{r3, lr}
  //clear unuset bits
  uint8_t res = BME280_ReadReg(BME280_REGISTER_STATUS)&0x09;
 8001276:	20f3      	movs	r0, #243	; 0xf3
 8001278:	f7ff ffb6 	bl	80011e8 <BME280_ReadReg>
  return res;
}
 800127c:	f000 0009 	and.w	r0, r0, #9
 8001280:	bd08      	pop	{r3, pc}
	...

08001284 <BME280_ReadCoefficients>:
//------------------------------------------------
void BME280_ReadCoefficients(void)
{
 8001284:	b538      	push	{r3, r4, r5, lr}
  BME280_ReadReg_U16(BME280_REGISTER_DIG_T1,&CalibData.dig_T1);
 8001286:	4c32      	ldr	r4, [pc, #200]	; (8001350 <BME280_ReadCoefficients+0xcc>)
 8001288:	4621      	mov	r1, r4
 800128a:	2088      	movs	r0, #136	; 0x88
 800128c:	f7ff ffc6 	bl	800121c <BME280_ReadReg_U16>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_T2,&CalibData.dig_T2);
 8001290:	1ca1      	adds	r1, r4, #2
 8001292:	208a      	movs	r0, #138	; 0x8a
 8001294:	f7ff ffc9 	bl	800122a <BME280_ReadReg_S16>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_T3,&CalibData.dig_T3);
 8001298:	1d21      	adds	r1, r4, #4
 800129a:	208c      	movs	r0, #140	; 0x8c
 800129c:	f7ff ffc5 	bl	800122a <BME280_ReadReg_S16>
  BME280_ReadReg_U16(BME280_REGISTER_DIG_P1,&CalibData.dig_P1);
 80012a0:	1da1      	adds	r1, r4, #6
 80012a2:	208e      	movs	r0, #142	; 0x8e
 80012a4:	f7ff ffba 	bl	800121c <BME280_ReadReg_U16>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P2,&CalibData.dig_P2);
 80012a8:	f104 0108 	add.w	r1, r4, #8
 80012ac:	2090      	movs	r0, #144	; 0x90
 80012ae:	f7ff ffbc 	bl	800122a <BME280_ReadReg_S16>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P3,&CalibData.dig_P3);
 80012b2:	f104 010a 	add.w	r1, r4, #10
 80012b6:	2092      	movs	r0, #146	; 0x92
 80012b8:	f7ff ffb7 	bl	800122a <BME280_ReadReg_S16>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P4,&CalibData.dig_P4);
 80012bc:	f104 010c 	add.w	r1, r4, #12
 80012c0:	2094      	movs	r0, #148	; 0x94
 80012c2:	f7ff ffb2 	bl	800122a <BME280_ReadReg_S16>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P5,&CalibData.dig_P5);
 80012c6:	f104 010e 	add.w	r1, r4, #14
 80012ca:	2096      	movs	r0, #150	; 0x96
 80012cc:	f7ff ffad 	bl	800122a <BME280_ReadReg_S16>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P6,&CalibData.dig_P6);
 80012d0:	f104 0110 	add.w	r1, r4, #16
 80012d4:	2098      	movs	r0, #152	; 0x98
 80012d6:	f7ff ffa8 	bl	800122a <BME280_ReadReg_S16>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P7,&CalibData.dig_P7);
 80012da:	f104 0112 	add.w	r1, r4, #18
 80012de:	209a      	movs	r0, #154	; 0x9a
 80012e0:	f7ff ffa3 	bl	800122a <BME280_ReadReg_S16>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P8,&CalibData.dig_P8);
 80012e4:	f104 0114 	add.w	r1, r4, #20
 80012e8:	209c      	movs	r0, #156	; 0x9c
 80012ea:	f7ff ff9e 	bl	800122a <BME280_ReadReg_S16>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P9,&CalibData.dig_P9);
 80012ee:	f104 0116 	add.w	r1, r4, #22
 80012f2:	209e      	movs	r0, #158	; 0x9e
 80012f4:	f7ff ff99 	bl	800122a <BME280_ReadReg_S16>
  CalibData.dig_H1 = BME280_ReadReg(BME280_REGISTER_DIG_H1);
 80012f8:	20a1      	movs	r0, #161	; 0xa1
 80012fa:	f7ff ff75 	bl	80011e8 <BME280_ReadReg>
 80012fe:	7620      	strb	r0, [r4, #24]
  BME280_ReadReg_S16(BME280_REGISTER_DIG_H2,&CalibData.dig_H2);
 8001300:	f104 011a 	add.w	r1, r4, #26
 8001304:	20e1      	movs	r0, #225	; 0xe1
 8001306:	f7ff ff90 	bl	800122a <BME280_ReadReg_S16>
  CalibData.dig_H3 = BME280_ReadReg(BME280_REGISTER_DIG_H3);
 800130a:	20e3      	movs	r0, #227	; 0xe3
 800130c:	f7ff ff6c 	bl	80011e8 <BME280_ReadReg>
 8001310:	7720      	strb	r0, [r4, #28]
  CalibData.dig_H4 = (BME280_ReadReg(BME280_REGISTER_DIG_H4) << 4) | (BME280_ReadReg(BME280_REGISTER_DIG_H4+1) & 0xF);
 8001312:	20e4      	movs	r0, #228	; 0xe4
 8001314:	f7ff ff68 	bl	80011e8 <BME280_ReadReg>
 8001318:	4605      	mov	r5, r0
 800131a:	20e5      	movs	r0, #229	; 0xe5
 800131c:	f7ff ff64 	bl	80011e8 <BME280_ReadReg>
 8001320:	f000 030f 	and.w	r3, r0, #15
 8001324:	ea43 1005 	orr.w	r0, r3, r5, lsl #4
 8001328:	83e0      	strh	r0, [r4, #30]
  CalibData.dig_H5 = (BME280_ReadReg(BME280_REGISTER_DIG_H5+1) << 4) | (BME280_ReadReg(BME280_REGISTER_DIG_H5) >> 4);
 800132a:	20e6      	movs	r0, #230	; 0xe6
 800132c:	f7ff ff5c 	bl	80011e8 <BME280_ReadReg>
 8001330:	4605      	mov	r5, r0
 8001332:	20e5      	movs	r0, #229	; 0xe5
 8001334:	f7ff ff58 	bl	80011e8 <BME280_ReadReg>
 8001338:	f3c0 1307 	ubfx	r3, r0, #4, #8
 800133c:	ea43 1005 	orr.w	r0, r3, r5, lsl #4
 8001340:	8420      	strh	r0, [r4, #32]
  CalibData.dig_H6 = (int8_t)BME280_ReadReg(BME280_REGISTER_DIG_H6);
 8001342:	20e7      	movs	r0, #231	; 0xe7
 8001344:	f7ff ff50 	bl	80011e8 <BME280_ReadReg>
 8001348:	f884 0022 	strb.w	r0, [r4, #34]	; 0x22
}
 800134c:	bd38      	pop	{r3, r4, r5, pc}
 800134e:	bf00      	nop
 8001350:	200001fc 	.word	0x200001fc

08001354 <BME280_SetStandby>:
//------------------------------------------------
void BME280_SetStandby(uint8_t tsb) {
 8001354:	b510      	push	{r4, lr}
 8001356:	4604      	mov	r4, r0
  uint8_t reg;
  reg = BME280_ReadReg(BME280_REG_CONFIG) & ~BME280_STBY_MSK;
 8001358:	20f5      	movs	r0, #245	; 0xf5
 800135a:	f7ff ff45 	bl	80011e8 <BME280_ReadReg>
 800135e:	f000 011f 	and.w	r1, r0, #31
  reg |= tsb & BME280_STBY_MSK;
 8001362:	f024 041f 	bic.w	r4, r4, #31
  BME280_WriteReg(BME280_REG_CONFIG,reg);
 8001366:	4321      	orrs	r1, r4
 8001368:	20f5      	movs	r0, #245	; 0xf5
 800136a:	f7ff ff27 	bl	80011bc <BME280_WriteReg>
}
 800136e:	bd10      	pop	{r4, pc}

08001370 <BME280_SetFilter>:
//------------------------------------------------
  void BME280_SetFilter(uint8_t filter) {
 8001370:	b510      	push	{r4, lr}
 8001372:	4604      	mov	r4, r0
  uint8_t reg;
  reg = BME280_ReadReg(BME280_REG_CONFIG) & ~BME280_FILTER_MSK;
 8001374:	20f5      	movs	r0, #245	; 0xf5
 8001376:	f7ff ff37 	bl	80011e8 <BME280_ReadReg>
 800137a:	f000 01e3 	and.w	r1, r0, #227	; 0xe3
  reg |= filter & BME280_FILTER_MSK;
 800137e:	f004 041c 	and.w	r4, r4, #28
  BME280_WriteReg(BME280_REG_CONFIG,reg);
 8001382:	4321      	orrs	r1, r4
 8001384:	20f5      	movs	r0, #245	; 0xf5
 8001386:	f7ff ff19 	bl	80011bc <BME280_WriteReg>
}
 800138a:	bd10      	pop	{r4, pc}

0800138c <BME280_SetOversamplingTemper>:
//------------------------------------------------
void BME280_SetOversamplingTemper(uint8_t osrs)
{
 800138c:	b510      	push	{r4, lr}
 800138e:	4604      	mov	r4, r0
  uint8_t reg;
  reg = BME280_ReadReg(BME280_REG_CTRL_MEAS) & ~BME280_OSRS_T_MSK;
 8001390:	20f4      	movs	r0, #244	; 0xf4
 8001392:	f7ff ff29 	bl	80011e8 <BME280_ReadReg>
 8001396:	f000 011f 	and.w	r1, r0, #31
  reg |= osrs & BME280_OSRS_T_MSK;
 800139a:	f024 041f 	bic.w	r4, r4, #31
  BME280_WriteReg(BME280_REG_CTRL_MEAS,reg);
 800139e:	4321      	orrs	r1, r4
 80013a0:	20f4      	movs	r0, #244	; 0xf4
 80013a2:	f7ff ff0b 	bl	80011bc <BME280_WriteReg>
}
 80013a6:	bd10      	pop	{r4, pc}

080013a8 <BME280_SetOversamplingPressure>:
//------------------------------------------------
void BME280_SetOversamplingPressure(uint8_t osrs)
{
 80013a8:	b510      	push	{r4, lr}
 80013aa:	4604      	mov	r4, r0
  uint8_t reg;
  reg = BME280_ReadReg(BME280_REG_CTRL_MEAS) & ~BME280_OSRS_P_MSK;
 80013ac:	20f4      	movs	r0, #244	; 0xf4
 80013ae:	f7ff ff1b 	bl	80011e8 <BME280_ReadReg>
 80013b2:	f000 01e3 	and.w	r1, r0, #227	; 0xe3
  reg |= osrs & BME280_OSRS_P_MSK;
 80013b6:	f004 041c 	and.w	r4, r4, #28
  BME280_WriteReg(BME280_REG_CTRL_MEAS,reg);
 80013ba:	4321      	orrs	r1, r4
 80013bc:	20f4      	movs	r0, #244	; 0xf4
 80013be:	f7ff fefd 	bl	80011bc <BME280_WriteReg>
}
 80013c2:	bd10      	pop	{r4, pc}

080013c4 <BME280_SetOversamplingHum>:
//------------------------------------------------
void BME280_SetOversamplingHum(uint8_t osrs)
{
 80013c4:	b510      	push	{r4, lr}
 80013c6:	4604      	mov	r4, r0
  uint8_t reg;
  reg = BME280_ReadReg(BME280_REG_CTRL_HUM) & ~BME280_OSRS_H_MSK;
 80013c8:	20f2      	movs	r0, #242	; 0xf2
 80013ca:	f7ff ff0d 	bl	80011e8 <BME280_ReadReg>
 80013ce:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
  reg |= osrs & BME280_OSRS_H_MSK;
 80013d2:	f004 0407 	and.w	r4, r4, #7
  BME280_WriteReg(BME280_REG_CTRL_HUM,reg);
 80013d6:	4321      	orrs	r1, r4
 80013d8:	20f2      	movs	r0, #242	; 0xf2
 80013da:	f7ff feef 	bl	80011bc <BME280_WriteReg>
  //The 'ctrl_hum' register needs to be written
  //after changing 'ctrl_hum' for the changes to become effwctive.
  reg = BME280_ReadReg(BME280_REG_CTRL_MEAS);
 80013de:	20f4      	movs	r0, #244	; 0xf4
 80013e0:	f7ff ff02 	bl	80011e8 <BME280_ReadReg>
 80013e4:	4601      	mov	r1, r0
  BME280_WriteReg(BME280_REG_CTRL_MEAS,reg);
 80013e6:	20f4      	movs	r0, #244	; 0xf4
 80013e8:	f7ff fee8 	bl	80011bc <BME280_WriteReg>
}
 80013ec:	bd10      	pop	{r4, pc}

080013ee <BME280_SetMode>:
//------------------------------------------------
void BME280_SetMode(uint8_t mode) {
 80013ee:	b510      	push	{r4, lr}
 80013f0:	4604      	mov	r4, r0
  uint8_t reg;
  reg = BME280_ReadReg(BME280_REG_CTRL_MEAS) & ~BME280_MODE_MSK;
 80013f2:	20f4      	movs	r0, #244	; 0xf4
 80013f4:	f7ff fef8 	bl	80011e8 <BME280_ReadReg>
 80013f8:	f000 01fc 	and.w	r1, r0, #252	; 0xfc
  reg |= mode & BME280_MODE_MSK;
 80013fc:	f004 0403 	and.w	r4, r4, #3
  BME280_WriteReg(BME280_REG_CTRL_MEAS,reg);
 8001400:	4321      	orrs	r1, r4
 8001402:	20f4      	movs	r0, #244	; 0xf4
 8001404:	f7ff feda 	bl	80011bc <BME280_WriteReg>
}
 8001408:	bd10      	pop	{r4, pc}
	...

0800140c <BME280_ReadTemperature>:
//------------------------------------------------
float BME280_ReadTemperature(void)
{
 800140c:	b500      	push	{lr}
 800140e:	b083      	sub	sp, #12
  float temper_float = 0.0f;
	uint32_t temper_raw;
	int32_t val1, val2;
	BME280_ReadReg_BE_U24(BME280_REGISTER_TEMPDATA,&temper_raw);
 8001410:	a901      	add	r1, sp, #4
 8001412:	20fa      	movs	r0, #250	; 0xfa
 8001414:	f7ff ff10 	bl	8001238 <BME280_ReadReg_BE_U24>
	temper_raw >>= 4;
 8001418:	9901      	ldr	r1, [sp, #4]
	val1 = ((((temper_raw>>3) - ((int32_t)CalibData.dig_T1 <<1))) *
 800141a:	4a11      	ldr	r2, [pc, #68]	; (8001460 <BME280_ReadTemperature+0x54>)
 800141c:	8813      	ldrh	r3, [r2, #0]
		((int32_t)CalibData.dig_T2)) >> 11;
	val2 = (((((temper_raw>>4) - ((int32_t)CalibData.dig_T1)) *
 800141e:	ebc3 2011 	rsb	r0, r3, r1, lsr #8
	val1 = ((((temper_raw>>3) - ((int32_t)CalibData.dig_T1 <<1))) *
 8001422:	005b      	lsls	r3, r3, #1
 8001424:	ebc3 13d1 	rsb	r3, r3, r1, lsr #7
		((int32_t)CalibData.dig_T2)) >> 11;
 8001428:	f9b2 1002 	ldrsh.w	r1, [r2, #2]
	val1 = ((((temper_raw>>3) - ((int32_t)CalibData.dig_T1 <<1))) *
 800142c:	fb01 f303 	mul.w	r3, r1, r3
	val2 = (((((temper_raw>>4) - ((int32_t)CalibData.dig_T1)) *
 8001430:	fb00 f000 	mul.w	r0, r0, r0
		((temper_raw>>4) - ((int32_t)CalibData.dig_T1))) >> 12) *
 8001434:	0b00      	lsrs	r0, r0, #12
		((int32_t)CalibData.dig_T3)) >> 14;
 8001436:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
		((temper_raw>>4) - ((int32_t)CalibData.dig_T1))) >> 12) *
 800143a:	fb02 f000 	mul.w	r0, r2, r0
		((int32_t)CalibData.dig_T3)) >> 14;
 800143e:	0b80      	lsrs	r0, r0, #14
	temper_int = val1 + val2;
 8001440:	eb00 20d3 	add.w	r0, r0, r3, lsr #11
 8001444:	4b07      	ldr	r3, [pc, #28]	; (8001464 <BME280_ReadTemperature+0x58>)
 8001446:	6018      	str	r0, [r3, #0]
	temper_float = ((temper_int * 5 + 128) >> 8);
 8001448:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800144c:	3080      	adds	r0, #128	; 0x80
 800144e:	1200      	asrs	r0, r0, #8
 8001450:	f7ff fc4e 	bl	8000cf0 <__aeabi_i2f>
	temper_float /= 100.0f;
 8001454:	4904      	ldr	r1, [pc, #16]	; (8001468 <BME280_ReadTemperature+0x5c>)
 8001456:	f7ff fd53 	bl	8000f00 <__aeabi_fdiv>
//	temper_float = temper_int / 5120.0;
  return temper_float;
}
 800145a:	b003      	add	sp, #12
 800145c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001460:	200001fc 	.word	0x200001fc
 8001464:	20000220 	.word	0x20000220
 8001468:	42c80000 	.word	0x42c80000
 800146c:	00000000 	.word	0x00000000

08001470 <BME280_ReadPressure>:
//------------------------------------------------
float BME280_ReadPressure(void)
{
 8001470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001474:	b083      	sub	sp, #12
	float var1;
	float var2;
	float p;
	uint32_t t_fine;
	uint32_t press_raw;
	BME280_ReadTemperature(); // must be done first to get t_fine
 8001476:	f7ff ffc9 	bl	800140c <BME280_ReadTemperature>
	BME280_ReadReg_BE_U24(BME280_REGISTER_PRESSUREDATA,&press_raw);
 800147a:	a901      	add	r1, sp, #4
 800147c:	20f7      	movs	r0, #247	; 0xf7
 800147e:	f7ff fedb 	bl	8001238 <BME280_ReadReg_BE_U24>
	press_raw >>= 4;
 8001482:	f8dd 8004 	ldr.w	r8, [sp, #4]
	var1 = ((((float)t_fine)/2.0)-64000.0);
 8001486:	2000      	movs	r0, #0
 8001488:	f7ff fc2e 	bl	8000ce8 <__aeabi_ui2f>
 800148c:	f7fe ffd6 	bl	800043c <__aeabi_f2d>
 8001490:	2200      	movs	r2, #0
 8001492:	4b8d      	ldr	r3, [pc, #564]	; (80016c8 <BME280_ReadPressure+0x258>)
 8001494:	f7ff f82a 	bl	80004ec <__aeabi_dmul>
 8001498:	2200      	movs	r2, #0
 800149a:	4b8c      	ldr	r3, [pc, #560]	; (80016cc <BME280_ReadPressure+0x25c>)
 800149c:	f7fe fe6e 	bl	800017c <__aeabi_dsub>
 80014a0:	f7ff fb1c 	bl	8000adc <__aeabi_d2f>
 80014a4:	4604      	mov	r4, r0
	var2 = var1 * var1 * ((float)CalibData.dig_P6) / 32768.0;
 80014a6:	4d8a      	ldr	r5, [pc, #552]	; (80016d0 <BME280_ReadPressure+0x260>)
 80014a8:	f9b5 b010 	ldrsh.w	fp, [r5, #16]
	var2 = var2 + var1 * ((float)CalibData.dig_P5) * 2.0;
 80014ac:	f9b5 a00e 	ldrsh.w	sl, [r5, #14]
	var2 = (var2/4.0)+(((float)CalibData.dig_P4) * 65536.0);
 80014b0:	f9b5 900c 	ldrsh.w	r9, [r5, #12]
	var1 = (((float)CalibData.dig_P3) * var1 * var1 / 524288.0 + ((float)CalibData.dig_P2) * var1) / 524288.0;
 80014b4:	f9b5 000a 	ldrsh.w	r0, [r5, #10]
 80014b8:	f7ff fc1a 	bl	8000cf0 <__aeabi_i2f>
 80014bc:	4621      	mov	r1, r4
 80014be:	f7ff fc6b 	bl	8000d98 <__aeabi_fmul>
 80014c2:	4621      	mov	r1, r4
 80014c4:	f7ff fc68 	bl	8000d98 <__aeabi_fmul>
 80014c8:	f7fe ffb8 	bl	800043c <__aeabi_f2d>
 80014cc:	2200      	movs	r2, #0
 80014ce:	f04f 537b 	mov.w	r3, #1052770304	; 0x3ec00000
 80014d2:	f7ff f80b 	bl	80004ec <__aeabi_dmul>
 80014d6:	4606      	mov	r6, r0
 80014d8:	460f      	mov	r7, r1
 80014da:	f9b5 0008 	ldrsh.w	r0, [r5, #8]
 80014de:	f7ff fc07 	bl	8000cf0 <__aeabi_i2f>
 80014e2:	4621      	mov	r1, r4
 80014e4:	f7ff fc58 	bl	8000d98 <__aeabi_fmul>
 80014e8:	f7fe ffa8 	bl	800043c <__aeabi_f2d>
 80014ec:	4602      	mov	r2, r0
 80014ee:	460b      	mov	r3, r1
 80014f0:	4630      	mov	r0, r6
 80014f2:	4639      	mov	r1, r7
 80014f4:	f7fe fe44 	bl	8000180 <__adddf3>
 80014f8:	2200      	movs	r2, #0
 80014fa:	f04f 537b 	mov.w	r3, #1052770304	; 0x3ec00000
 80014fe:	f7fe fff5 	bl	80004ec <__aeabi_dmul>
 8001502:	f7ff faeb 	bl	8000adc <__aeabi_d2f>
	var1 = (1.0 + var1 / 32768.0)*((float)CalibData.dig_P1);
 8001506:	f7fe ff99 	bl	800043c <__aeabi_f2d>
 800150a:	2200      	movs	r2, #0
 800150c:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8001510:	f7fe ffec 	bl	80004ec <__aeabi_dmul>
 8001514:	2200      	movs	r2, #0
 8001516:	4b6f      	ldr	r3, [pc, #444]	; (80016d4 <BME280_ReadPressure+0x264>)
 8001518:	f7fe fe32 	bl	8000180 <__adddf3>
 800151c:	4606      	mov	r6, r0
 800151e:	460f      	mov	r7, r1
 8001520:	88e8      	ldrh	r0, [r5, #6]
 8001522:	f7ff fbe1 	bl	8000ce8 <__aeabi_ui2f>
 8001526:	f7fe ff89 	bl	800043c <__aeabi_f2d>
 800152a:	4602      	mov	r2, r0
 800152c:	460b      	mov	r3, r1
 800152e:	4630      	mov	r0, r6
 8001530:	4639      	mov	r1, r7
 8001532:	f7fe ffdb 	bl	80004ec <__aeabi_dmul>
 8001536:	f7ff fad1 	bl	8000adc <__aeabi_d2f>
 800153a:	4605      	mov	r5, r0
	if (var1 == 0.0)
 800153c:	2100      	movs	r1, #0
 800153e:	f7ff fdbf 	bl	80010c0 <__aeabi_fcmpeq>
 8001542:	2800      	cmp	r0, #0
 8001544:	f040 80b4 	bne.w	80016b0 <BME280_ReadPressure+0x240>
	var2 = var1 * var1 * ((float)CalibData.dig_P6) / 32768.0;
 8001548:	4621      	mov	r1, r4
 800154a:	4620      	mov	r0, r4
 800154c:	f7ff fc24 	bl	8000d98 <__aeabi_fmul>
 8001550:	4606      	mov	r6, r0
 8001552:	4658      	mov	r0, fp
 8001554:	f7ff fbcc 	bl	8000cf0 <__aeabi_i2f>
 8001558:	4601      	mov	r1, r0
 800155a:	4630      	mov	r0, r6
 800155c:	f7ff fc1c 	bl	8000d98 <__aeabi_fmul>
 8001560:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
 8001564:	f7ff fc18 	bl	8000d98 <__aeabi_fmul>
	var2 = var2 + var1 * ((float)CalibData.dig_P5) * 2.0;
 8001568:	f7fe ff68 	bl	800043c <__aeabi_f2d>
 800156c:	4606      	mov	r6, r0
 800156e:	460f      	mov	r7, r1
 8001570:	4650      	mov	r0, sl
 8001572:	f7ff fbbd 	bl	8000cf0 <__aeabi_i2f>
 8001576:	4621      	mov	r1, r4
 8001578:	f7ff fc0e 	bl	8000d98 <__aeabi_fmul>
 800157c:	f7fe ff5e 	bl	800043c <__aeabi_f2d>
 8001580:	4602      	mov	r2, r0
 8001582:	460b      	mov	r3, r1
 8001584:	f7fe fdfc 	bl	8000180 <__adddf3>
 8001588:	4602      	mov	r2, r0
 800158a:	460b      	mov	r3, r1
 800158c:	4630      	mov	r0, r6
 800158e:	4639      	mov	r1, r7
 8001590:	f7fe fdf6 	bl	8000180 <__adddf3>
 8001594:	4606      	mov	r6, r0
 8001596:	460f      	mov	r7, r1
	var2 = (var2/4.0)+(((float)CalibData.dig_P4) * 65536.0);
 8001598:	4648      	mov	r0, r9
 800159a:	f7ff fba9 	bl	8000cf0 <__aeabi_i2f>
 800159e:	f7fe ff4d 	bl	800043c <__aeabi_f2d>
 80015a2:	2200      	movs	r2, #0
 80015a4:	4b4c      	ldr	r3, [pc, #304]	; (80016d8 <BME280_ReadPressure+0x268>)
 80015a6:	f7fe ffa1 	bl	80004ec <__aeabi_dmul>
 80015aa:	4682      	mov	sl, r0
 80015ac:	468b      	mov	fp, r1
	var2 = var2 + var1 * ((float)CalibData.dig_P5) * 2.0;
 80015ae:	4630      	mov	r0, r6
 80015b0:	4639      	mov	r1, r7
 80015b2:	f7ff fa93 	bl	8000adc <__aeabi_d2f>
	var2 = (var2/4.0)+(((float)CalibData.dig_P4) * 65536.0);
 80015b6:	f7fe ff41 	bl	800043c <__aeabi_f2d>
 80015ba:	2200      	movs	r2, #0
 80015bc:	4b47      	ldr	r3, [pc, #284]	; (80016dc <BME280_ReadPressure+0x26c>)
 80015be:	f7fe ff95 	bl	80004ec <__aeabi_dmul>
 80015c2:	4602      	mov	r2, r0
 80015c4:	460b      	mov	r3, r1
 80015c6:	4650      	mov	r0, sl
 80015c8:	4659      	mov	r1, fp
 80015ca:	f7fe fdd9 	bl	8000180 <__adddf3>
 80015ce:	4606      	mov	r6, r0
 80015d0:	460f      	mov	r7, r1
	{
		return 0; // avoid exception caused by division by zero
	}
	p = (1048576.0 - ((float)press_raw));
 80015d2:	ea4f 1018 	mov.w	r0, r8, lsr #4
 80015d6:	f7ff fb87 	bl	8000ce8 <__aeabi_ui2f>
 80015da:	4601      	mov	r1, r0
 80015dc:	f04f 4093 	mov.w	r0, #1233125376	; 0x49800000
 80015e0:	f7ff fad0 	bl	8000b84 <__aeabi_fsub>
	p = ((p - (var2 / 4069.0)) * 6250.0 / var1);
 80015e4:	f7fe ff2a 	bl	800043c <__aeabi_f2d>
 80015e8:	4680      	mov	r8, r0
 80015ea:	4689      	mov	r9, r1
	var2 = (var2/4.0)+(((float)CalibData.dig_P4) * 65536.0);
 80015ec:	4630      	mov	r0, r6
 80015ee:	4639      	mov	r1, r7
 80015f0:	f7ff fa74 	bl	8000adc <__aeabi_d2f>
	p = ((p - (var2 / 4069.0)) * 6250.0 / var1);
 80015f4:	f7fe ff22 	bl	800043c <__aeabi_f2d>
 80015f8:	a32f      	add	r3, pc, #188	; (adr r3, 80016b8 <BME280_ReadPressure+0x248>)
 80015fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015fe:	f7ff f89f 	bl	8000740 <__aeabi_ddiv>
 8001602:	4602      	mov	r2, r0
 8001604:	460b      	mov	r3, r1
 8001606:	4640      	mov	r0, r8
 8001608:	4649      	mov	r1, r9
 800160a:	f7fe fdb7 	bl	800017c <__aeabi_dsub>
 800160e:	a32c      	add	r3, pc, #176	; (adr r3, 80016c0 <BME280_ReadPressure+0x250>)
 8001610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001614:	f7fe ff6a 	bl	80004ec <__aeabi_dmul>
 8001618:	4606      	mov	r6, r0
 800161a:	460f      	mov	r7, r1
 800161c:	4628      	mov	r0, r5
 800161e:	f7fe ff0d 	bl	800043c <__aeabi_f2d>
 8001622:	4602      	mov	r2, r0
 8001624:	460b      	mov	r3, r1
 8001626:	4630      	mov	r0, r6
 8001628:	4639      	mov	r1, r7
 800162a:	f7ff f889 	bl	8000740 <__aeabi_ddiv>
 800162e:	f7ff fa55 	bl	8000adc <__aeabi_d2f>
 8001632:	4604      	mov	r4, r0
	var1 = ((float)CalibData.dig_P9) * p * p / 2147483648.0;
 8001634:	4e26      	ldr	r6, [pc, #152]	; (80016d0 <BME280_ReadPressure+0x260>)
 8001636:	f9b6 0016 	ldrsh.w	r0, [r6, #22]
 800163a:	f7ff fb59 	bl	8000cf0 <__aeabi_i2f>
 800163e:	4621      	mov	r1, r4
 8001640:	f7ff fbaa 	bl	8000d98 <__aeabi_fmul>
 8001644:	4621      	mov	r1, r4
 8001646:	f7ff fba7 	bl	8000d98 <__aeabi_fmul>
 800164a:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
 800164e:	f7ff fba3 	bl	8000d98 <__aeabi_fmul>
 8001652:	4605      	mov	r5, r0
	var2 = p * ((float)CalibData.dig_P8) / 32768.0;
 8001654:	f9b6 0014 	ldrsh.w	r0, [r6, #20]
 8001658:	f7ff fb4a 	bl	8000cf0 <__aeabi_i2f>
 800165c:	4621      	mov	r1, r4
 800165e:	f7ff fb9b 	bl	8000d98 <__aeabi_fmul>
 8001662:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
 8001666:	f7ff fb97 	bl	8000d98 <__aeabi_fmul>
 800166a:	4601      	mov	r1, r0
	p = p + (var1 + var2 + ((float)CalibData.dig_P7)) / 16.0;
 800166c:	4628      	mov	r0, r5
 800166e:	f7ff fa8b 	bl	8000b88 <__addsf3>
 8001672:	4605      	mov	r5, r0
 8001674:	f9b6 0012 	ldrsh.w	r0, [r6, #18]
 8001678:	f7ff fb3a 	bl	8000cf0 <__aeabi_i2f>
 800167c:	4601      	mov	r1, r0
 800167e:	4628      	mov	r0, r5
 8001680:	f7ff fa82 	bl	8000b88 <__addsf3>
 8001684:	f7fe feda 	bl	800043c <__aeabi_f2d>
 8001688:	2200      	movs	r2, #0
 800168a:	4b15      	ldr	r3, [pc, #84]	; (80016e0 <BME280_ReadPressure+0x270>)
 800168c:	f7fe ff2e 	bl	80004ec <__aeabi_dmul>
 8001690:	4606      	mov	r6, r0
 8001692:	460f      	mov	r7, r1
 8001694:	4620      	mov	r0, r4
 8001696:	f7fe fed1 	bl	800043c <__aeabi_f2d>
 800169a:	4602      	mov	r2, r0
 800169c:	460b      	mov	r3, r1
 800169e:	4630      	mov	r0, r6
 80016a0:	4639      	mov	r1, r7
 80016a2:	f7fe fd6d 	bl	8000180 <__adddf3>
 80016a6:	f7ff fa19 	bl	8000adc <__aeabi_d2f>
	return p;

}
 80016aa:	b003      	add	sp, #12
 80016ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return 0; // avoid exception caused by division by zero
 80016b0:	2000      	movs	r0, #0
 80016b2:	e7fa      	b.n	80016aa <BME280_ReadPressure+0x23a>
 80016b4:	f3af 8000 	nop.w
 80016b8:	00000000 	.word	0x00000000
 80016bc:	40afca00 	.word	0x40afca00
 80016c0:	00000000 	.word	0x00000000
 80016c4:	40b86a00 	.word	0x40b86a00
 80016c8:	3fe00000 	.word	0x3fe00000
 80016cc:	40ef4000 	.word	0x40ef4000
 80016d0:	200001fc 	.word	0x200001fc
 80016d4:	3ff00000 	.word	0x3ff00000
 80016d8:	40f00000 	.word	0x40f00000
 80016dc:	3fd00000 	.word	0x3fd00000
 80016e0:	3fb00000 	.word	0x3fb00000

080016e4 <BME280_Init>:
	att = 44330.0 * (1.0 - pow(atm / seaLevel, 0.1903));
  return att;
}
//------------------------------------------------
void BME280_Init(void)
{
 80016e4:	b508      	push	{r3, lr}

	BME280_WriteReg(BME280_REG_SOFTRESET,BME280_SOFTRESET_VALUE);
 80016e6:	21b6      	movs	r1, #182	; 0xb6
 80016e8:	20e0      	movs	r0, #224	; 0xe0
 80016ea:	f7ff fd67 	bl	80011bc <BME280_WriteReg>
	while (BME280_ReadStatus() & BME280_STATUS_IM_UPDATE) ;
 80016ee:	f7ff fdc1 	bl	8001274 <BME280_ReadStatus>
 80016f2:	f010 0f01 	tst.w	r0, #1
 80016f6:	d1fa      	bne.n	80016ee <BME280_Init+0xa>
	BME280_ReadCoefficients();
 80016f8:	f7ff fdc4 	bl	8001284 <BME280_ReadCoefficients>
	BME280_SetStandby(BME280_STBY_1000);
 80016fc:	20a0      	movs	r0, #160	; 0xa0
 80016fe:	f7ff fe29 	bl	8001354 <BME280_SetStandby>
	BME280_SetFilter(BME280_FILTER_4);
 8001702:	2008      	movs	r0, #8
 8001704:	f7ff fe34 	bl	8001370 <BME280_SetFilter>
	BME280_SetOversamplingTemper(BME280_OSRS_T_x4);
 8001708:	2060      	movs	r0, #96	; 0x60
 800170a:	f7ff fe3f 	bl	800138c <BME280_SetOversamplingTemper>
	BME280_SetOversamplingPressure(BME280_OSRS_P_x2);
 800170e:	2008      	movs	r0, #8
 8001710:	f7ff fe4a 	bl	80013a8 <BME280_SetOversamplingPressure>
	BME280_SetOversamplingHum(BME280_OSRS_H_x1);
 8001714:	2001      	movs	r0, #1
 8001716:	f7ff fe55 	bl	80013c4 <BME280_SetOversamplingHum>

	BME280_SetMode(BME280_MODE_NORMAL);
 800171a:	2003      	movs	r0, #3
 800171c:	f7ff fe67 	bl	80013ee <BME280_SetMode>
}
 8001720:	bd08      	pop	{r3, pc}
	...

08001724 <display_Init>:
void display_seting_time_screen (void);
void display_seting_GPS_screen (void);

/* Private user code ---------------------------------------------------------*/
void display_Init(void)
{
 8001724:	b508      	push	{r3, lr}
	ssd1306_Init();
 8001726:	f001 fe6b 	bl	8003400 <ssd1306_Init>
	page_properties.page_list = page_start;
 800172a:	4b04      	ldr	r3, [pc, #16]	; (800173c <display_Init+0x18>)
 800172c:	2200      	movs	r2, #0
 800172e:	701a      	strb	r2, [r3, #0]
	page_properties.line = line_0;
 8001730:	705a      	strb	r2, [r3, #1]
	osDelay(1000);
 8001732:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001736:	f005 fab5 	bl	8006ca4 <osDelay>

}
 800173a:	bd08      	pop	{r3, pc}
 800173c:	20000264 	.word	0x20000264

08001740 <display_start_screen>:
	ssd1306_UpdateScreen();

}

void display_start_screen (void)
{
 8001740:	b570      	push	{r4, r5, r6, lr}
 8001742:	b084      	sub	sp, #16
	ssd1306_Fill(Black);
 8001744:	2000      	movs	r0, #0
 8001746:	f001 fd33 	bl	80031b0 <ssd1306_Fill>
	ssd1306_SetCursor(2,0);
 800174a:	2100      	movs	r1, #0
 800174c:	2002      	movs	r0, #2
 800174e:	f001 fdf3 	bl	8003338 <ssd1306_SetCursor>
	sprintf((char*)Message,	"%02d:%02d:%02d %02d.%02d.%02d   ", timedata.hour,
																timedata.min,
 8001752:	4a22      	ldr	r2, [pc, #136]	; (80017dc <display_start_screen+0x9c>)
	sprintf((char*)Message,	"%02d:%02d:%02d %02d.%02d.%02d   ", timedata.hour,
 8001754:	4c22      	ldr	r4, [pc, #136]	; (80017e0 <display_start_screen+0xa0>)
																timedata.sec,
																timedata.date,
																timedata.month,
																timedata.year - 2000);
 8001756:	88d3      	ldrh	r3, [r2, #6]
	sprintf((char*)Message,	"%02d:%02d:%02d %02d.%02d.%02d   ", timedata.hour,
 8001758:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 800175c:	9303      	str	r3, [sp, #12]
 800175e:	7913      	ldrb	r3, [r2, #4]
 8001760:	9302      	str	r3, [sp, #8]
 8001762:	78d3      	ldrb	r3, [r2, #3]
 8001764:	9301      	str	r3, [sp, #4]
 8001766:	7813      	ldrb	r3, [r2, #0]
 8001768:	9300      	str	r3, [sp, #0]
 800176a:	7853      	ldrb	r3, [r2, #1]
 800176c:	7892      	ldrb	r2, [r2, #2]
 800176e:	491d      	ldr	r1, [pc, #116]	; (80017e4 <display_start_screen+0xa4>)
 8001770:	4620      	mov	r0, r4
 8001772:	f007 feb7 	bl	80094e4 <siprintf>
	ssd1306_WriteString((char*)Message, Font_7x10, White);
 8001776:	4d1c      	ldr	r5, [pc, #112]	; (80017e8 <display_start_screen+0xa8>)
 8001778:	2301      	movs	r3, #1
 800177a:	e895 0006 	ldmia.w	r5, {r1, r2}
 800177e:	4620      	mov	r0, r4
 8001780:	f001 fdc0 	bl	8003304 <ssd1306_WriteString>
	//ssd1306_Line(2, 17, 24, 17, White);

	ssd1306_SetCursor(2, 12);
 8001784:	210c      	movs	r1, #12
 8001786:	2002      	movs	r0, #2
 8001788:	f001 fdd6 	bl	8003338 <ssd1306_SetCursor>
	sprintf((char*)Message,	"T= %.2fC      ", BME280_sensor.temperature);
 800178c:	4e17      	ldr	r6, [pc, #92]	; (80017ec <display_start_screen+0xac>)
 800178e:	6830      	ldr	r0, [r6, #0]
 8001790:	f7fe fe54 	bl	800043c <__aeabi_f2d>
 8001794:	4602      	mov	r2, r0
 8001796:	460b      	mov	r3, r1
 8001798:	4915      	ldr	r1, [pc, #84]	; (80017f0 <display_start_screen+0xb0>)
 800179a:	4620      	mov	r0, r4
 800179c:	f007 fea2 	bl	80094e4 <siprintf>
	ssd1306_WriteString((char*)Message, Font_7x10, White);
 80017a0:	2301      	movs	r3, #1
 80017a2:	e895 0006 	ldmia.w	r5, {r1, r2}
 80017a6:	4620      	mov	r0, r4
 80017a8:	f001 fdac 	bl	8003304 <ssd1306_WriteString>
	ssd1306_SetCursor(2, 24);
 80017ac:	2118      	movs	r1, #24
 80017ae:	2002      	movs	r0, #2
 80017b0:	f001 fdc2 	bl	8003338 <ssd1306_SetCursor>

	sprintf((char*)Message,	"P= %.2fkPa      ", BME280_sensor.pressure/1000);
 80017b4:	490f      	ldr	r1, [pc, #60]	; (80017f4 <display_start_screen+0xb4>)
 80017b6:	6870      	ldr	r0, [r6, #4]
 80017b8:	f7ff fba2 	bl	8000f00 <__aeabi_fdiv>
 80017bc:	f7fe fe3e 	bl	800043c <__aeabi_f2d>
 80017c0:	4602      	mov	r2, r0
 80017c2:	460b      	mov	r3, r1
 80017c4:	490c      	ldr	r1, [pc, #48]	; (80017f8 <display_start_screen+0xb8>)
 80017c6:	4620      	mov	r0, r4
 80017c8:	f007 fe8c 	bl	80094e4 <siprintf>
	ssd1306_WriteString((char*)Message, Font_7x10, White);
 80017cc:	2301      	movs	r3, #1
 80017ce:	e895 0006 	ldmia.w	r5, {r1, r2}
 80017d2:	4620      	mov	r0, r4
 80017d4:	f001 fd96 	bl	8003304 <ssd1306_WriteString>
//	ssd1306_SetCursor(2, 48);
//	sprintf((char*)Message,	"E= %02d    ", Enc_Counter);
//	ssd1306_WriteString((char*)Message, Font_7x10, White);
	//page_list = page_start;

}
 80017d8:	b004      	add	sp, #16
 80017da:	bd70      	pop	{r4, r5, r6, pc}
 80017dc:	200005a8 	.word	0x200005a8
 80017e0:	20000224 	.word	0x20000224
 80017e4:	0800c1cc 	.word	0x0800c1cc
 80017e8:	20000004 	.word	0x20000004
 80017ec:	200005b0 	.word	0x200005b0
 80017f0:	0800c1f0 	.word	0x0800c1f0
 80017f4:	447a0000 	.word	0x447a0000
 80017f8:	0800c200 	.word	0x0800c200

080017fc <display_menu_screen>:

void display_menu_screen (void)
{
 80017fc:	b538      	push	{r3, r4, r5, lr}
	ssd1306_Fill(Black);
 80017fe:	2000      	movs	r0, #0
 8001800:	f001 fcd6 	bl	80031b0 <ssd1306_Fill>

	ssd1306_SetCursor(2, 0);
 8001804:	2100      	movs	r1, #0
 8001806:	2002      	movs	r0, #2
 8001808:	f001 fd96 	bl	8003338 <ssd1306_SetCursor>
	sprintf((char*)Message,	"Menu");
 800180c:	4c23      	ldr	r4, [pc, #140]	; (800189c <display_menu_screen+0xa0>)
 800180e:	4b24      	ldr	r3, [pc, #144]	; (80018a0 <display_menu_screen+0xa4>)
 8001810:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001814:	6020      	str	r0, [r4, #0]
 8001816:	7121      	strb	r1, [r4, #4]
	ssd1306_WriteString((char*)Message, Font_7x10, White);
 8001818:	4d22      	ldr	r5, [pc, #136]	; (80018a4 <display_menu_screen+0xa8>)
 800181a:	2301      	movs	r3, #1
 800181c:	e895 0006 	ldmia.w	r5, {r1, r2}
 8001820:	4620      	mov	r0, r4
 8001822:	f001 fd6f 	bl	8003304 <ssd1306_WriteString>

//if(Enc_Counter%2 == 0)
	ssd1306_SetCursor(10, 24);
 8001826:	2118      	movs	r1, #24
 8001828:	200a      	movs	r0, #10
 800182a:	f001 fd85 	bl	8003338 <ssd1306_SetCursor>
	sprintf((char*)Message,	"Setings");
 800182e:	4b1e      	ldr	r3, [pc, #120]	; (80018a8 <display_menu_screen+0xac>)
 8001830:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001834:	e884 0003 	stmia.w	r4, {r0, r1}
	ssd1306_WriteString((char*)Message, Font_7x10, White);
 8001838:	2301      	movs	r3, #1
 800183a:	e895 0006 	ldmia.w	r5, {r1, r2}
 800183e:	4620      	mov	r0, r4
 8001840:	f001 fd60 	bl	8003304 <ssd1306_WriteString>
	ssd1306_SetCursor(10, 36);
 8001844:	2124      	movs	r1, #36	; 0x24
 8001846:	200a      	movs	r0, #10
 8001848:	f001 fd76 	bl	8003338 <ssd1306_SetCursor>
	sprintf((char*)Message,	"Test ");
 800184c:	4b17      	ldr	r3, [pc, #92]	; (80018ac <display_menu_screen+0xb0>)
 800184e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001852:	6020      	str	r0, [r4, #0]
 8001854:	80a1      	strh	r1, [r4, #4]
	ssd1306_WriteString((char*)Message, Font_7x10, White);
 8001856:	2301      	movs	r3, #1
 8001858:	e895 0006 	ldmia.w	r5, {r1, r2}
 800185c:	4620      	mov	r0, r4
 800185e:	f001 fd51 	bl	8003304 <ssd1306_WriteString>

	switch(Enc_Counter%2)
 8001862:	4b13      	ldr	r3, [pc, #76]	; (80018b0 <display_menu_screen+0xb4>)
 8001864:	881b      	ldrh	r3, [r3, #0]
 8001866:	f013 0f01 	tst.w	r3, #1
 800186a:	d007      	beq.n	800187c <display_menu_screen+0x80>
	{
		case 0: ssd1306_SetCursor(2, 24); page_properties.line=line_0; break;
		case 1: ssd1306_SetCursor(2, 36); page_properties.line=line_1;break;
 800186c:	2124      	movs	r1, #36	; 0x24
 800186e:	2002      	movs	r0, #2
 8001870:	f001 fd62 	bl	8003338 <ssd1306_SetCursor>
 8001874:	4b0f      	ldr	r3, [pc, #60]	; (80018b4 <display_menu_screen+0xb8>)
 8001876:	2201      	movs	r2, #1
 8001878:	705a      	strb	r2, [r3, #1]
 800187a:	e006      	b.n	800188a <display_menu_screen+0x8e>
		case 0: ssd1306_SetCursor(2, 24); page_properties.line=line_0; break;
 800187c:	2118      	movs	r1, #24
 800187e:	2002      	movs	r0, #2
 8001880:	f001 fd5a 	bl	8003338 <ssd1306_SetCursor>
 8001884:	4b0b      	ldr	r3, [pc, #44]	; (80018b4 <display_menu_screen+0xb8>)
 8001886:	2200      	movs	r2, #0
 8001888:	705a      	strb	r2, [r3, #1]

		default: break;
	}
	sprintf((char*)Message,	"*");
 800188a:	4804      	ldr	r0, [pc, #16]	; (800189c <display_menu_screen+0xa0>)
 800188c:	232a      	movs	r3, #42	; 0x2a
 800188e:	8003      	strh	r3, [r0, #0]
	ssd1306_WriteString((char*)Message, Font_7x10, White);
 8001890:	4a04      	ldr	r2, [pc, #16]	; (80018a4 <display_menu_screen+0xa8>)
 8001892:	2301      	movs	r3, #1
 8001894:	ca06      	ldmia	r2, {r1, r2}
 8001896:	f001 fd35 	bl	8003304 <ssd1306_WriteString>


}
 800189a:	bd38      	pop	{r3, r4, r5, pc}
 800189c:	20000224 	.word	0x20000224
 80018a0:	0800c214 	.word	0x0800c214
 80018a4:	20000004 	.word	0x20000004
 80018a8:	0800c21c 	.word	0x0800c21c
 80018ac:	0800c224 	.word	0x0800c224
 80018b0:	20000266 	.word	0x20000266
 80018b4:	20000264 	.word	0x20000264

080018b8 <display_setings_screen>:


void display_setings_screen (void)
{
 80018b8:	b538      	push	{r3, r4, r5, lr}
	ssd1306_Fill(Black);
 80018ba:	2000      	movs	r0, #0
 80018bc:	f001 fc78 	bl	80031b0 <ssd1306_Fill>

	ssd1306_SetCursor(2, 0);
 80018c0:	2100      	movs	r1, #0
 80018c2:	2002      	movs	r0, #2
 80018c4:	f001 fd38 	bl	8003338 <ssd1306_SetCursor>
	sprintf((char*)Message,	"Setings");
 80018c8:	4c34      	ldr	r4, [pc, #208]	; (800199c <display_setings_screen+0xe4>)
 80018ca:	4b35      	ldr	r3, [pc, #212]	; (80019a0 <display_setings_screen+0xe8>)
 80018cc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80018d0:	e884 0003 	stmia.w	r4, {r0, r1}
	ssd1306_WriteString((char*)Message, Font_7x10, White);
 80018d4:	4d33      	ldr	r5, [pc, #204]	; (80019a4 <display_setings_screen+0xec>)
 80018d6:	2301      	movs	r3, #1
 80018d8:	e895 0006 	ldmia.w	r5, {r1, r2}
 80018dc:	4620      	mov	r0, r4
 80018de:	f001 fd11 	bl	8003304 <ssd1306_WriteString>

//if(Enc_Counter%2 == 0)
	ssd1306_SetCursor(10, 14);
 80018e2:	210e      	movs	r1, #14
 80018e4:	200a      	movs	r0, #10
 80018e6:	f001 fd27 	bl	8003338 <ssd1306_SetCursor>
	sprintf((char*)Message,	"Date");
 80018ea:	4b2f      	ldr	r3, [pc, #188]	; (80019a8 <display_setings_screen+0xf0>)
 80018ec:	e893 0003 	ldmia.w	r3, {r0, r1}
 80018f0:	6020      	str	r0, [r4, #0]
 80018f2:	7121      	strb	r1, [r4, #4]
	ssd1306_WriteString((char*)Message, Font_7x10, White);
 80018f4:	2301      	movs	r3, #1
 80018f6:	e895 0006 	ldmia.w	r5, {r1, r2}
 80018fa:	4620      	mov	r0, r4
 80018fc:	f001 fd02 	bl	8003304 <ssd1306_WriteString>
	ssd1306_SetCursor(10, 26);
 8001900:	211a      	movs	r1, #26
 8001902:	200a      	movs	r0, #10
 8001904:	f001 fd18 	bl	8003338 <ssd1306_SetCursor>
	sprintf((char*)Message,	"Time");
 8001908:	4b28      	ldr	r3, [pc, #160]	; (80019ac <display_setings_screen+0xf4>)
 800190a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800190e:	6020      	str	r0, [r4, #0]
 8001910:	7121      	strb	r1, [r4, #4]
	ssd1306_WriteString((char*)Message, Font_7x10, White);
 8001912:	2301      	movs	r3, #1
 8001914:	e895 0006 	ldmia.w	r5, {r1, r2}
 8001918:	4620      	mov	r0, r4
 800191a:	f001 fcf3 	bl	8003304 <ssd1306_WriteString>
	ssd1306_SetCursor(10, 38);
 800191e:	2126      	movs	r1, #38	; 0x26
 8001920:	200a      	movs	r0, #10
 8001922:	f001 fd09 	bl	8003338 <ssd1306_SetCursor>
	sprintf((char*)Message,	"Synch GPS");
 8001926:	4a22      	ldr	r2, [pc, #136]	; (80019b0 <display_setings_screen+0xf8>)
 8001928:	4623      	mov	r3, r4
 800192a:	ca07      	ldmia	r2, {r0, r1, r2}
 800192c:	c303      	stmia	r3!, {r0, r1}
 800192e:	801a      	strh	r2, [r3, #0]
	ssd1306_WriteString((char*)Message, Font_7x10, White);
 8001930:	2301      	movs	r3, #1
 8001932:	e895 0006 	ldmia.w	r5, {r1, r2}
 8001936:	4620      	mov	r0, r4
 8001938:	f001 fce4 	bl	8003304 <ssd1306_WriteString>

	switch(Enc_Counter%3)
 800193c:	4b1d      	ldr	r3, [pc, #116]	; (80019b4 <display_setings_screen+0xfc>)
 800193e:	881b      	ldrh	r3, [r3, #0]
 8001940:	4a1d      	ldr	r2, [pc, #116]	; (80019b8 <display_setings_screen+0x100>)
 8001942:	fba2 1203 	umull	r1, r2, r2, r3
 8001946:	0852      	lsrs	r2, r2, #1
 8001948:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800194c:	1a9b      	subs	r3, r3, r2
 800194e:	b29b      	uxth	r3, r3
 8001950:	2b01      	cmp	r3, #1
 8001952:	d013      	beq.n	800197c <display_setings_screen+0xc4>
 8001954:	2b02      	cmp	r3, #2
 8001956:	d019      	beq.n	800198c <display_setings_screen+0xd4>
 8001958:	b143      	cbz	r3, 800196c <display_setings_screen+0xb4>
		case 1: ssd1306_SetCursor(2, 26); page_properties.line=line_1;break;
		case 2: ssd1306_SetCursor(2, 38); page_properties.line=line_2;break;

		default: break;
	}
	sprintf((char*)Message,	"*");
 800195a:	4810      	ldr	r0, [pc, #64]	; (800199c <display_setings_screen+0xe4>)
 800195c:	232a      	movs	r3, #42	; 0x2a
 800195e:	8003      	strh	r3, [r0, #0]
	ssd1306_WriteString((char*)Message, Font_7x10, White);
 8001960:	4a10      	ldr	r2, [pc, #64]	; (80019a4 <display_setings_screen+0xec>)
 8001962:	2301      	movs	r3, #1
 8001964:	ca06      	ldmia	r2, {r1, r2}
 8001966:	f001 fccd 	bl	8003304 <ssd1306_WriteString>

}
 800196a:	bd38      	pop	{r3, r4, r5, pc}
		case 0: ssd1306_SetCursor(2, 14); page_properties.line=line_0; break;
 800196c:	210e      	movs	r1, #14
 800196e:	2002      	movs	r0, #2
 8001970:	f001 fce2 	bl	8003338 <ssd1306_SetCursor>
 8001974:	4b11      	ldr	r3, [pc, #68]	; (80019bc <display_setings_screen+0x104>)
 8001976:	2200      	movs	r2, #0
 8001978:	705a      	strb	r2, [r3, #1]
 800197a:	e7ee      	b.n	800195a <display_setings_screen+0xa2>
		case 1: ssd1306_SetCursor(2, 26); page_properties.line=line_1;break;
 800197c:	211a      	movs	r1, #26
 800197e:	2002      	movs	r0, #2
 8001980:	f001 fcda 	bl	8003338 <ssd1306_SetCursor>
 8001984:	4b0d      	ldr	r3, [pc, #52]	; (80019bc <display_setings_screen+0x104>)
 8001986:	2201      	movs	r2, #1
 8001988:	705a      	strb	r2, [r3, #1]
 800198a:	e7e6      	b.n	800195a <display_setings_screen+0xa2>
		case 2: ssd1306_SetCursor(2, 38); page_properties.line=line_2;break;
 800198c:	2126      	movs	r1, #38	; 0x26
 800198e:	2002      	movs	r0, #2
 8001990:	f001 fcd2 	bl	8003338 <ssd1306_SetCursor>
 8001994:	4b09      	ldr	r3, [pc, #36]	; (80019bc <display_setings_screen+0x104>)
 8001996:	2202      	movs	r2, #2
 8001998:	705a      	strb	r2, [r3, #1]
 800199a:	e7de      	b.n	800195a <display_setings_screen+0xa2>
 800199c:	20000224 	.word	0x20000224
 80019a0:	0800c21c 	.word	0x0800c21c
 80019a4:	20000004 	.word	0x20000004
 80019a8:	0800c22c 	.word	0x0800c22c
 80019ac:	0800c234 	.word	0x0800c234
 80019b0:	0800c23c 	.word	0x0800c23c
 80019b4:	20000266 	.word	0x20000266
 80019b8:	aaaaaaab 	.word	0xaaaaaaab
 80019bc:	20000264 	.word	0x20000264

080019c0 <display_seting_data_screen>:

void display_seting_data_screen (void)
{
 80019c0:	b530      	push	{r4, r5, lr}
 80019c2:	b083      	sub	sp, #12
	ssd1306_Fill(Black);
 80019c4:	2000      	movs	r0, #0
 80019c6:	f001 fbf3 	bl	80031b0 <ssd1306_Fill>

	ssd1306_SetCursor(2, 0);
 80019ca:	2100      	movs	r1, #0
 80019cc:	2002      	movs	r0, #2
 80019ce:	f001 fcb3 	bl	8003338 <ssd1306_SetCursor>
	sprintf((char*)Message,	"Seting Date");
 80019d2:	4c22      	ldr	r4, [pc, #136]	; (8001a5c <display_seting_data_screen+0x9c>)
 80019d4:	4b22      	ldr	r3, [pc, #136]	; (8001a60 <display_seting_data_screen+0xa0>)
 80019d6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80019da:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	ssd1306_WriteString((char*)Message, Font_7x10, White);
 80019de:	4d21      	ldr	r5, [pc, #132]	; (8001a64 <display_seting_data_screen+0xa4>)
 80019e0:	2301      	movs	r3, #1
 80019e2:	e895 0006 	ldmia.w	r5, {r1, r2}
 80019e6:	4620      	mov	r0, r4
 80019e8:	f001 fc8c 	bl	8003304 <ssd1306_WriteString>

	ssd1306_SetCursor(10, 26);
 80019ec:	211a      	movs	r1, #26
 80019ee:	200a      	movs	r0, #10
 80019f0:	f001 fca2 	bl	8003338 <ssd1306_SetCursor>
	sprintf((char*)Message,	"%02d.%02d.%04d", temptimedata.date, temptimedata.month, temptimedata.year);
 80019f4:	4a1c      	ldr	r2, [pc, #112]	; (8001a68 <display_seting_data_screen+0xa8>)
 80019f6:	88d3      	ldrh	r3, [r2, #6]
 80019f8:	9300      	str	r3, [sp, #0]
 80019fa:	7913      	ldrb	r3, [r2, #4]
 80019fc:	78d2      	ldrb	r2, [r2, #3]
 80019fe:	491b      	ldr	r1, [pc, #108]	; (8001a6c <display_seting_data_screen+0xac>)
 8001a00:	4620      	mov	r0, r4
 8001a02:	f007 fd6f 	bl	80094e4 <siprintf>
	ssd1306_WriteString((char*)Message, Font_7x10, White);
 8001a06:	2301      	movs	r3, #1
 8001a08:	e895 0006 	ldmia.w	r5, {r1, r2}
 8001a0c:	4620      	mov	r0, r4
 8001a0e:	f001 fc79 	bl	8003304 <ssd1306_WriteString>

	switch(page_properties.line)
 8001a12:	4b17      	ldr	r3, [pc, #92]	; (8001a70 <display_seting_data_screen+0xb0>)
 8001a14:	785b      	ldrb	r3, [r3, #1]
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d00d      	beq.n	8001a36 <display_seting_data_screen+0x76>
 8001a1a:	2b02      	cmp	r3, #2
 8001a1c:	d014      	beq.n	8001a48 <display_seting_data_screen+0x88>
 8001a1e:	b10b      	cbz	r3, 8001a24 <display_seting_data_screen+0x64>
		case line_2: ssd1306_Line(52, 36, 80, 36, White); break;
		default: break;
	}


}
 8001a20:	b003      	add	sp, #12
 8001a22:	bd30      	pop	{r4, r5, pc}
		case line_0: ssd1306_Line(10, 36, 24, 36, White); break;
 8001a24:	2301      	movs	r3, #1
 8001a26:	9300      	str	r3, [sp, #0]
 8001a28:	2324      	movs	r3, #36	; 0x24
 8001a2a:	2218      	movs	r2, #24
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	200a      	movs	r0, #10
 8001a30:	f001 fc88 	bl	8003344 <ssd1306_Line>
 8001a34:	e7f4      	b.n	8001a20 <display_seting_data_screen+0x60>
		case line_1: ssd1306_Line(31, 36, 45, 36, White); break;
 8001a36:	2301      	movs	r3, #1
 8001a38:	9300      	str	r3, [sp, #0]
 8001a3a:	2324      	movs	r3, #36	; 0x24
 8001a3c:	222d      	movs	r2, #45	; 0x2d
 8001a3e:	4619      	mov	r1, r3
 8001a40:	201f      	movs	r0, #31
 8001a42:	f001 fc7f 	bl	8003344 <ssd1306_Line>
 8001a46:	e7eb      	b.n	8001a20 <display_seting_data_screen+0x60>
		case line_2: ssd1306_Line(52, 36, 80, 36, White); break;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	9300      	str	r3, [sp, #0]
 8001a4c:	2324      	movs	r3, #36	; 0x24
 8001a4e:	2250      	movs	r2, #80	; 0x50
 8001a50:	4619      	mov	r1, r3
 8001a52:	2034      	movs	r0, #52	; 0x34
 8001a54:	f001 fc76 	bl	8003344 <ssd1306_Line>
}
 8001a58:	e7e2      	b.n	8001a20 <display_seting_data_screen+0x60>
 8001a5a:	bf00      	nop
 8001a5c:	20000224 	.word	0x20000224
 8001a60:	0800c248 	.word	0x0800c248
 8001a64:	20000004 	.word	0x20000004
 8001a68:	200005a0 	.word	0x200005a0
 8001a6c:	0800c254 	.word	0x0800c254
 8001a70:	20000264 	.word	0x20000264

08001a74 <display_seting_time_screen>:
void display_seting_time_screen (void)
{
 8001a74:	b530      	push	{r4, r5, lr}
 8001a76:	b083      	sub	sp, #12
	ssd1306_Fill(Black);
 8001a78:	2000      	movs	r0, #0
 8001a7a:	f001 fb99 	bl	80031b0 <ssd1306_Fill>

	ssd1306_SetCursor(2, 0);
 8001a7e:	2100      	movs	r1, #0
 8001a80:	2002      	movs	r0, #2
 8001a82:	f001 fc59 	bl	8003338 <ssd1306_SetCursor>
	sprintf((char*)Message,	"Seting Time");
 8001a86:	4c22      	ldr	r4, [pc, #136]	; (8001b10 <display_seting_time_screen+0x9c>)
 8001a88:	4b22      	ldr	r3, [pc, #136]	; (8001b14 <display_seting_time_screen+0xa0>)
 8001a8a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001a8e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	ssd1306_WriteString((char*)Message, Font_7x10, White);
 8001a92:	4d21      	ldr	r5, [pc, #132]	; (8001b18 <display_seting_time_screen+0xa4>)
 8001a94:	2301      	movs	r3, #1
 8001a96:	e895 0006 	ldmia.w	r5, {r1, r2}
 8001a9a:	4620      	mov	r0, r4
 8001a9c:	f001 fc32 	bl	8003304 <ssd1306_WriteString>

	ssd1306_SetCursor(10, 26);
 8001aa0:	211a      	movs	r1, #26
 8001aa2:	200a      	movs	r0, #10
 8001aa4:	f001 fc48 	bl	8003338 <ssd1306_SetCursor>
	sprintf((char*)Message,	"%02d:%02d:%02d", temptimedata.hour, temptimedata.min, temptimedata.sec);
 8001aa8:	4a1c      	ldr	r2, [pc, #112]	; (8001b1c <display_seting_time_screen+0xa8>)
 8001aaa:	7813      	ldrb	r3, [r2, #0]
 8001aac:	9300      	str	r3, [sp, #0]
 8001aae:	7853      	ldrb	r3, [r2, #1]
 8001ab0:	7892      	ldrb	r2, [r2, #2]
 8001ab2:	491b      	ldr	r1, [pc, #108]	; (8001b20 <display_seting_time_screen+0xac>)
 8001ab4:	4620      	mov	r0, r4
 8001ab6:	f007 fd15 	bl	80094e4 <siprintf>
	ssd1306_WriteString((char*)Message, Font_7x10, White);
 8001aba:	2301      	movs	r3, #1
 8001abc:	e895 0006 	ldmia.w	r5, {r1, r2}
 8001ac0:	4620      	mov	r0, r4
 8001ac2:	f001 fc1f 	bl	8003304 <ssd1306_WriteString>

	switch(page_properties.line)
 8001ac6:	4b17      	ldr	r3, [pc, #92]	; (8001b24 <display_seting_time_screen+0xb0>)
 8001ac8:	785b      	ldrb	r3, [r3, #1]
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d00d      	beq.n	8001aea <display_seting_time_screen+0x76>
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d014      	beq.n	8001afc <display_seting_time_screen+0x88>
 8001ad2:	b10b      	cbz	r3, 8001ad8 <display_seting_time_screen+0x64>
		case line_1: ssd1306_Line(31, 36, 45, 36, White); break;
		case line_2: ssd1306_Line(52, 36, 66, 36, White); break;
		default: break;
	}

}
 8001ad4:	b003      	add	sp, #12
 8001ad6:	bd30      	pop	{r4, r5, pc}
		case line_0: ssd1306_Line(10, 36, 24, 36, White); break;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	9300      	str	r3, [sp, #0]
 8001adc:	2324      	movs	r3, #36	; 0x24
 8001ade:	2218      	movs	r2, #24
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	200a      	movs	r0, #10
 8001ae4:	f001 fc2e 	bl	8003344 <ssd1306_Line>
 8001ae8:	e7f4      	b.n	8001ad4 <display_seting_time_screen+0x60>
		case line_1: ssd1306_Line(31, 36, 45, 36, White); break;
 8001aea:	2301      	movs	r3, #1
 8001aec:	9300      	str	r3, [sp, #0]
 8001aee:	2324      	movs	r3, #36	; 0x24
 8001af0:	222d      	movs	r2, #45	; 0x2d
 8001af2:	4619      	mov	r1, r3
 8001af4:	201f      	movs	r0, #31
 8001af6:	f001 fc25 	bl	8003344 <ssd1306_Line>
 8001afa:	e7eb      	b.n	8001ad4 <display_seting_time_screen+0x60>
		case line_2: ssd1306_Line(52, 36, 66, 36, White); break;
 8001afc:	2301      	movs	r3, #1
 8001afe:	9300      	str	r3, [sp, #0]
 8001b00:	2324      	movs	r3, #36	; 0x24
 8001b02:	2242      	movs	r2, #66	; 0x42
 8001b04:	4619      	mov	r1, r3
 8001b06:	2034      	movs	r0, #52	; 0x34
 8001b08:	f001 fc1c 	bl	8003344 <ssd1306_Line>
}
 8001b0c:	e7e2      	b.n	8001ad4 <display_seting_time_screen+0x60>
 8001b0e:	bf00      	nop
 8001b10:	20000224 	.word	0x20000224
 8001b14:	0800c264 	.word	0x0800c264
 8001b18:	20000004 	.word	0x20000004
 8001b1c:	200005a0 	.word	0x200005a0
 8001b20:	0800c270 	.word	0x0800c270
 8001b24:	20000264 	.word	0x20000264

08001b28 <display_seting_GPS_screen>:
void display_seting_GPS_screen (void)
{
 8001b28:	b510      	push	{r4, lr}
	ssd1306_Fill(Black);
 8001b2a:	2000      	movs	r0, #0
 8001b2c:	f001 fb40 	bl	80031b0 <ssd1306_Fill>

	ssd1306_SetCursor(2, 0);
 8001b30:	2100      	movs	r1, #0
 8001b32:	2002      	movs	r0, #2
 8001b34:	f001 fc00 	bl	8003338 <ssd1306_SetCursor>
	sprintf((char*)Message,	"Seting GPS");
 8001b38:	4c07      	ldr	r4, [pc, #28]	; (8001b58 <display_seting_GPS_screen+0x30>)
 8001b3a:	4a08      	ldr	r2, [pc, #32]	; (8001b5c <display_seting_GPS_screen+0x34>)
 8001b3c:	4623      	mov	r3, r4
 8001b3e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b40:	c303      	stmia	r3!, {r0, r1}
 8001b42:	f823 2b02 	strh.w	r2, [r3], #2
 8001b46:	0c12      	lsrs	r2, r2, #16
 8001b48:	701a      	strb	r2, [r3, #0]
	ssd1306_WriteString((char*)Message, Font_7x10, White);
 8001b4a:	4a05      	ldr	r2, [pc, #20]	; (8001b60 <display_seting_GPS_screen+0x38>)
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	ca06      	ldmia	r2, {r1, r2}
 8001b50:	4620      	mov	r0, r4
 8001b52:	f001 fbd7 	bl	8003304 <ssd1306_WriteString>


}
 8001b56:	bd10      	pop	{r4, pc}
 8001b58:	20000224 	.word	0x20000224
 8001b5c:	0800c280 	.word	0x0800c280
 8001b60:	20000004 	.word	0x20000004

08001b64 <display_handle>:
{
 8001b64:	b508      	push	{r3, lr}
	switch (page_properties.page_list)
 8001b66:	4b10      	ldr	r3, [pc, #64]	; (8001ba8 <display_handle+0x44>)
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	2b05      	cmp	r3, #5
 8001b6c:	d818      	bhi.n	8001ba0 <display_handle+0x3c>
 8001b6e:	e8df f003 	tbb	[pc, r3]
 8001b72:	0803      	.short	0x0803
 8001b74:	14110e0b 	.word	0x14110e0b
	  case page_start			: display_start_screen(); 	break;
 8001b78:	f7ff fde2 	bl	8001740 <display_start_screen>
	ssd1306_UpdateScreen();
 8001b7c:	f001 fb26 	bl	80031cc <ssd1306_UpdateScreen>
}
 8001b80:	bd08      	pop	{r3, pc}
	  case page_menu			: display_menu_screen();		break;
 8001b82:	f7ff fe3b 	bl	80017fc <display_menu_screen>
 8001b86:	e7f9      	b.n	8001b7c <display_handle+0x18>
	  case page_settings		: display_setings_screen();	break;
 8001b88:	f7ff fe96 	bl	80018b8 <display_setings_screen>
 8001b8c:	e7f6      	b.n	8001b7c <display_handle+0x18>
	  case page_setting_date	: display_seting_data_screen();	break;
 8001b8e:	f7ff ff17 	bl	80019c0 <display_seting_data_screen>
 8001b92:	e7f3      	b.n	8001b7c <display_handle+0x18>
	  case page_setting_time	: display_seting_time_screen();	break;
 8001b94:	f7ff ff6e 	bl	8001a74 <display_seting_time_screen>
 8001b98:	e7f0      	b.n	8001b7c <display_handle+0x18>
	  case page_setting_GPS		: display_seting_GPS_screen();	break;
 8001b9a:	f7ff ffc5 	bl	8001b28 <display_seting_GPS_screen>
 8001b9e:	e7ed      	b.n	8001b7c <display_handle+0x18>
	  default:              display_start_screen(); 	break;
 8001ba0:	f7ff fdce 	bl	8001740 <display_start_screen>
 8001ba4:	e7ea      	b.n	8001b7c <display_handle+0x18>
 8001ba6:	bf00      	nop
 8001ba8:	20000264 	.word	0x20000264

08001bac <button_has_clicks>:

button_status_t button_has_clicks (button_t *_button)
{
  button_status_t status = BUTTON_NO;

  if (get_state(MANY_CLICKS) != 0)
 8001bac:	4b03      	ldr	r3, [pc, #12]	; (8001bbc <button_has_clicks+0x10>)
 8001bae:	8898      	ldrh	r0, [r3, #4]
 8001bb0:	f080 0080 	eor.w	r0, r0, #128	; 0x80
  {
    status = BUTTON_YES;
  }

  return status;
}
 8001bb4:	f3c0 10c0 	ubfx	r0, r0, #7, #1
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	20000268 	.word	0x20000268

08001bc0 <button_is_holding>:

button_status_t button_is_holding (button_t *_button)
{
  button_status_t status = BUTTON_NO;

  if (get_state(HOLDING_PROCESS) != 0)
 8001bc0:	4b03      	ldr	r3, [pc, #12]	; (8001bd0 <button_is_holding+0x10>)
 8001bc2:	8898      	ldrh	r0, [r3, #4]
 8001bc4:	f080 0008 	eor.w	r0, r0, #8
  {
    status = BUTTON_YES;
  }

  return status;
}
 8001bc8:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	20000268 	.word	0x20000268

08001bd4 <button_is_click>:

button_status_t button_is_click (button_t *_button)
{
  button_status_t status = BUTTON_NO;

  if (get_state(CLICK) != 0)
 8001bd4:	4b06      	ldr	r3, [pc, #24]	; (8001bf0 <button_is_click+0x1c>)
 8001bd6:	889b      	ldrh	r3, [r3, #4]
 8001bd8:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001bdc:	d005      	beq.n	8001bea <button_is_click+0x16>
  {
    reset_state(CLICK);
 8001bde:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001be2:	4a03      	ldr	r2, [pc, #12]	; (8001bf0 <button_is_click+0x1c>)
 8001be4:	8093      	strh	r3, [r2, #4]
    status = BUTTON_YES;
 8001be6:	2000      	movs	r0, #0
 8001be8:	4770      	bx	lr
  button_status_t status = BUTTON_NO;
 8001bea:	2001      	movs	r0, #1
  }

  return status;
}
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	20000268 	.word	0x20000268

08001bf4 <encoder_init>:

  return status;
}

void encoder_init	(void)
{
 8001bf4:	b510      	push	{r4, lr}
	HAL_TIM_Encoder_MspInit(&htim3);
 8001bf6:	4c12      	ldr	r4, [pc, #72]	; (8001c40 <encoder_init+0x4c>)
 8001bf8:	4620      	mov	r0, r4
 8001bfa:	f000 febd 	bl	8002978 <HAL_TIM_Encoder_MspInit>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001bfe:	213c      	movs	r1, #60	; 0x3c
 8001c00:	4620      	mov	r0, r4
 8001c02:	f004 fc54 	bl	80064ae <HAL_TIM_Encoder_Start>
	osDelay(100);
 8001c06:	2064      	movs	r0, #100	; 0x64
 8001c08:	f005 f84c 	bl	8006ca4 <osDelay>

	button._type             = BUTTON_NORM_OPEN;
 8001c0c:	4b0d      	ldr	r3, [pc, #52]	; (8001c44 <encoder_init+0x50>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	701a      	strb	r2, [r3, #0]
	button._pulling_mode     = BUTTON_PULL_UP;
 8001c12:	705a      	strb	r2, [r3, #1]

	button._debounce_timeout = 30;
 8001c14:	211e      	movs	r1, #30
 8001c16:	71d9      	strb	r1, [r3, #7]
	button._click_timeout    = 400;
 8001c18:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8001c1c:	8119      	strh	r1, [r3, #8]
	button._hold_timeout     = 500;
 8001c1e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001c22:	8159      	strh	r1, [r3, #10]
	button._step_timeout     = 350;
 8001c24:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8001c28:	8199      	strh	r1, [r3, #12]
	button._idle_timeout     = 1000;
 8001c2a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001c2e:	81d9      	strh	r1, [r3, #14]
	button._timer            = global_tick;
 8001c30:	4905      	ldr	r1, [pc, #20]	; (8001c48 <encoder_init+0x54>)
 8001c32:	6809      	ldr	r1, [r1, #0]
 8001c34:	6119      	str	r1, [r3, #16]

	button._state            = 0;
 8001c36:	709a      	strb	r2, [r3, #2]
	button._previous_state   = 0;
 8001c38:	70da      	strb	r2, [r3, #3]

	button._status           = 0;
 8001c3a:	809a      	strh	r2, [r3, #4]

	button._clicks_counter   = 0;
 8001c3c:	719a      	strb	r2, [r3, #6]

}
 8001c3e:	bd10      	pop	{r4, pc}
 8001c40:	20000608 	.word	0x20000608
 8001c44:	20000268 	.word	0x20000268
 8001c48:	2000027c 	.word	0x2000027c

08001c4c <button_timer_tick>:


void button_timer_tick (void)
{
	global_tick += 1U;
 8001c4c:	4a02      	ldr	r2, [pc, #8]	; (8001c58 <button_timer_tick+0xc>)
 8001c4e:	6813      	ldr	r3, [r2, #0]
 8001c50:	3301      	adds	r3, #1
 8001c52:	6013      	str	r3, [r2, #0]
}
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	2000027c 	.word	0x2000027c

08001c5c <encoder_handling>:

void encoder_handling (void)
{
 8001c5c:	b410      	push	{r4}
	//Обработка энкодера
	Enc_Counter = (TIM3->CNT)/2;;
 8001c5e:	4b58      	ldr	r3, [pc, #352]	; (8001dc0 <encoder_handling+0x164>)
 8001c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c62:	085b      	lsrs	r3, r3, #1
 8001c64:	4a57      	ldr	r2, [pc, #348]	; (8001dc4 <encoder_handling+0x168>)
 8001c66:	8013      	strh	r3, [r2, #0]
	//Обработка кнопки
	if ((GPIOA->IDR & 0x20) != (uint32_t)GPIO_PIN_RESET)
 8001c68:	4b57      	ldr	r3, [pc, #348]	; (8001dc8 <encoder_handling+0x16c>)
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	f013 0f20 	tst.w	r3, #32
	{
		button._state = button._type ^ button._pulling_mode ^ 0x00U;
 8001c70:	4a56      	ldr	r2, [pc, #344]	; (8001dcc <encoder_handling+0x170>)
 8001c72:	7813      	ldrb	r3, [r2, #0]
 8001c74:	7852      	ldrb	r2, [r2, #1]
 8001c76:	ea83 0302 	eor.w	r3, r3, r2
	}
	else
	{
		button._state = button._type ^ button._pulling_mode ^ 0x01U;
 8001c7a:	bf08      	it	eq
 8001c7c:	f083 0301 	eoreq.w	r3, r3, #1
 8001c80:	4a52      	ldr	r2, [pc, #328]	; (8001dcc <encoder_handling+0x170>)
 8001c82:	7093      	strb	r3, [r2, #2]
	}


	// Обработка нажатия
	if ((button._state) && !(button._previous_state))
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d065      	beq.n	8001d54 <encoder_handling+0xf8>
 8001c88:	78d2      	ldrb	r2, [r2, #3]
 8001c8a:	2a00      	cmp	r2, #0
 8001c8c:	d144      	bne.n	8001d18 <encoder_handling+0xbc>
	{
		if (get_state(DEBOUNCE_PROCESS) == 0U)
 8001c8e:	4a4f      	ldr	r2, [pc, #316]	; (8001dcc <encoder_handling+0x170>)
 8001c90:	8892      	ldrh	r2, [r2, #4]
 8001c92:	f012 0f01 	tst.w	r2, #1
 8001c96:	d107      	bne.n	8001ca8 <encoder_handling+0x4c>
		{
		  set_state(DEBOUNCE_PROCESS);
 8001c98:	494c      	ldr	r1, [pc, #304]	; (8001dcc <encoder_handling+0x170>)
 8001c9a:	f042 0201 	orr.w	r2, r2, #1
 8001c9e:	808a      	strh	r2, [r1, #4]
		  button._timer = global_tick;
 8001ca0:	4a4b      	ldr	r2, [pc, #300]	; (8001dd0 <encoder_handling+0x174>)
 8001ca2:	6812      	ldr	r2, [r2, #0]
 8001ca4:	610a      	str	r2, [r1, #16]
 8001ca6:	e05d      	b.n	8001d64 <encoder_handling+0x108>
		}
		else
		{
		  if (timeout_passed(_debounce_timeout))
 8001ca8:	4949      	ldr	r1, [pc, #292]	; (8001dd0 <encoder_handling+0x174>)
 8001caa:	6809      	ldr	r1, [r1, #0]
 8001cac:	4847      	ldr	r0, [pc, #284]	; (8001dcc <encoder_handling+0x170>)
 8001cae:	6904      	ldr	r4, [r0, #16]
 8001cb0:	1b09      	subs	r1, r1, r4
 8001cb2:	79c0      	ldrb	r0, [r0, #7]
 8001cb4:	4281      	cmp	r1, r0
 8001cb6:	d355      	bcc.n	8001d64 <encoder_handling+0x108>
		  {
			button._previous_state = 0x01U;
 8001cb8:	4944      	ldr	r1, [pc, #272]	; (8001dcc <encoder_handling+0x170>)
 8001cba:	2001      	movs	r0, #1
 8001cbc:	70c8      	strb	r0, [r1, #3]
			set_state(PRESSED);
			set_state(CLICK_PROCESS);
 8001cbe:	f042 0212 	orr.w	r2, r2, #18
 8001cc2:	808a      	strh	r2, [r1, #4]

	    button._timer = global_tick;
	  }

	  // Удержание
	  if ((button._previous_state) && (button._state))
 8001cc4:	e02f      	b.n	8001d26 <encoder_handling+0xca>
	    button._previous_state = 0x00U;
 8001cc6:	4a41      	ldr	r2, [pc, #260]	; (8001dcc <encoder_handling+0x170>)
 8001cc8:	2000      	movs	r0, #0
 8001cca:	70d0      	strb	r0, [r2, #3]
	    if (get_state(CLICK_PROCESS) != 0U)
 8001ccc:	f011 0f02 	tst.w	r1, #2
 8001cd0:	d007      	beq.n	8001ce2 <encoder_handling+0x86>
	      reset_state(CLICK_PROCESS);
 8001cd2:	f021 0103 	bic.w	r1, r1, #3
 8001cd6:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8001cda:	8091      	strh	r1, [r2, #4]
	      button._clicks_counter++;
 8001cdc:	7991      	ldrb	r1, [r2, #6]
 8001cde:	3101      	adds	r1, #1
 8001ce0:	7191      	strb	r1, [r2, #6]
	    reset_state(HOLDING_PROCESS);
 8001ce2:	493a      	ldr	r1, [pc, #232]	; (8001dcc <encoder_handling+0x170>)
 8001ce4:	888a      	ldrh	r2, [r1, #4]
 8001ce6:	f022 0218 	bic.w	r2, r2, #24
 8001cea:	f042 0220 	orr.w	r2, r2, #32
 8001cee:	808a      	strh	r2, [r1, #4]
	    button._timer = global_tick;
 8001cf0:	4a37      	ldr	r2, [pc, #220]	; (8001dd0 <encoder_handling+0x174>)
 8001cf2:	6812      	ldr	r2, [r2, #0]
 8001cf4:	610a      	str	r2, [r1, #16]
 8001cf6:	e035      	b.n	8001d64 <encoder_handling+0x108>
	  }

	  // Удержание "с инкрементацией" (для пошагового изменения величин)
	  if (get_state(HOLDING_PROCESS) != 0U)
	  {
	    if (timeout_passed(_step_timeout))
 8001cf8:	4935      	ldr	r1, [pc, #212]	; (8001dd0 <encoder_handling+0x174>)
 8001cfa:	6809      	ldr	r1, [r1, #0]
 8001cfc:	4833      	ldr	r0, [pc, #204]	; (8001dcc <encoder_handling+0x170>)
 8001cfe:	6904      	ldr	r4, [r0, #16]
 8001d00:	1b09      	subs	r1, r1, r4
 8001d02:	8980      	ldrh	r0, [r0, #12]
 8001d04:	4281      	cmp	r1, r0
 8001d06:	d332      	bcc.n	8001d6e <encoder_handling+0x112>
	    {
	      set_state(INCREMENTING_HOLD);
 8001d08:	4930      	ldr	r1, [pc, #192]	; (8001dcc <encoder_handling+0x170>)
 8001d0a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001d0e:	808a      	strh	r2, [r1, #4]
	      button._timer = global_tick;
 8001d10:	4a2f      	ldr	r2, [pc, #188]	; (8001dd0 <encoder_handling+0x174>)
 8001d12:	6812      	ldr	r2, [r2, #0]
 8001d14:	610a      	str	r2, [r1, #16]
 8001d16:	e02a      	b.n	8001d6e <encoder_handling+0x112>
		reset_state(DEBOUNCE_PROCESS);
 8001d18:	4a2c      	ldr	r2, [pc, #176]	; (8001dcc <encoder_handling+0x170>)
 8001d1a:	8891      	ldrh	r1, [r2, #4]
 8001d1c:	f021 0101 	bic.w	r1, r1, #1
 8001d20:	8091      	strh	r1, [r2, #4]
	  if ((button._previous_state) && (button._state))
 8001d22:	78d2      	ldrb	r2, [r2, #3]
 8001d24:	b1f2      	cbz	r2, 8001d64 <encoder_handling+0x108>
	    if (timeout_passed(_hold_timeout))
 8001d26:	4a2a      	ldr	r2, [pc, #168]	; (8001dd0 <encoder_handling+0x174>)
 8001d28:	6812      	ldr	r2, [r2, #0]
 8001d2a:	4928      	ldr	r1, [pc, #160]	; (8001dcc <encoder_handling+0x170>)
 8001d2c:	6908      	ldr	r0, [r1, #16]
 8001d2e:	1a12      	subs	r2, r2, r0
 8001d30:	8949      	ldrh	r1, [r1, #10]
 8001d32:	428a      	cmp	r2, r1
 8001d34:	d316      	bcc.n	8001d64 <encoder_handling+0x108>
	      if (get_state(HOLDING_PROCESS) == 0U)
 8001d36:	4a25      	ldr	r2, [pc, #148]	; (8001dcc <encoder_handling+0x170>)
 8001d38:	8892      	ldrh	r2, [r2, #4]
 8001d3a:	f012 0f08 	tst.w	r2, #8
 8001d3e:	d1db      	bne.n	8001cf8 <encoder_handling+0x9c>
	        reset_state(CLICK_PROCESS);
 8001d40:	4922      	ldr	r1, [pc, #136]	; (8001dcc <encoder_handling+0x170>)
 8001d42:	f022 0202 	bic.w	r2, r2, #2
 8001d46:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 8001d4a:	808a      	strh	r2, [r1, #4]
	        button._timer = global_tick;
 8001d4c:	4a20      	ldr	r2, [pc, #128]	; (8001dd0 <encoder_handling+0x174>)
 8001d4e:	6812      	ldr	r2, [r2, #0]
 8001d50:	610a      	str	r2, [r1, #16]
 8001d52:	e007      	b.n	8001d64 <encoder_handling+0x108>
		reset_state(DEBOUNCE_PROCESS);
 8001d54:	4a1d      	ldr	r2, [pc, #116]	; (8001dcc <encoder_handling+0x170>)
 8001d56:	8891      	ldrh	r1, [r2, #4]
 8001d58:	f021 0001 	bic.w	r0, r1, #1
 8001d5c:	8090      	strh	r0, [r2, #4]
	  if (!(button._state) && (button._previous_state))
 8001d5e:	78d2      	ldrb	r2, [r2, #3]
 8001d60:	2a00      	cmp	r2, #0
 8001d62:	d1b0      	bne.n	8001cc6 <encoder_handling+0x6a>
	  if (get_state(HOLDING_PROCESS) != 0U)
 8001d64:	4a19      	ldr	r2, [pc, #100]	; (8001dcc <encoder_handling+0x170>)
 8001d66:	8892      	ldrh	r2, [r2, #4]
 8001d68:	f012 0f08 	tst.w	r2, #8
 8001d6c:	d1c4      	bne.n	8001cf8 <encoder_handling+0x9c>
	    }
	  }

	  // Многократное нажатие
	  if (timeout_passed(_click_timeout))
 8001d6e:	4a18      	ldr	r2, [pc, #96]	; (8001dd0 <encoder_handling+0x174>)
 8001d70:	6812      	ldr	r2, [r2, #0]
 8001d72:	4816      	ldr	r0, [pc, #88]	; (8001dcc <encoder_handling+0x170>)
 8001d74:	6901      	ldr	r1, [r0, #16]
 8001d76:	1a52      	subs	r2, r2, r1
 8001d78:	8900      	ldrh	r0, [r0, #8]
 8001d7a:	4282      	cmp	r2, r0
 8001d7c:	d308      	bcc.n	8001d90 <encoder_handling+0x134>
	  {
	    if ((button._clicks_counter > 0U) && (button._state == 0U))
 8001d7e:	4a13      	ldr	r2, [pc, #76]	; (8001dcc <encoder_handling+0x170>)
 8001d80:	7992      	ldrb	r2, [r2, #6]
 8001d82:	b12a      	cbz	r2, 8001d90 <encoder_handling+0x134>
 8001d84:	b923      	cbnz	r3, 8001d90 <encoder_handling+0x134>
	    {
	      set_state(MANY_CLICKS);
 8001d86:	4a11      	ldr	r2, [pc, #68]	; (8001dcc <encoder_handling+0x170>)
 8001d88:	8893      	ldrh	r3, [r2, #4]
 8001d8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d8e:	8093      	strh	r3, [r2, #4]
	    }
	  }

	  // Сброс многократного нажатия
	  if (get_state(CLICKS_COUNTER_RESET) != 0U)
 8001d90:	4b0e      	ldr	r3, [pc, #56]	; (8001dcc <encoder_handling+0x170>)
 8001d92:	889b      	ldrh	r3, [r3, #4]
 8001d94:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001d98:	d005      	beq.n	8001da6 <encoder_handling+0x14a>
	  {
	    reset_state(CLICKS_COUNTER_RESET);
	    reset_state(MANY_CLICKS);
 8001d9a:	4a0c      	ldr	r2, [pc, #48]	; (8001dcc <encoder_handling+0x170>)
 8001d9c:	f423 73c0 	bic.w	r3, r3, #384	; 0x180
 8001da0:	8093      	strh	r3, [r2, #4]
	    button._clicks_counter = 0U;
 8001da2:	2300      	movs	r3, #0
 8001da4:	7193      	strb	r3, [r2, #6]
	  }

	  // Сброс необработанных состояний
	  if (timeout_passed(_idle_timeout))
 8001da6:	4b0a      	ldr	r3, [pc, #40]	; (8001dd0 <encoder_handling+0x174>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	1a5b      	subs	r3, r3, r1
 8001dac:	4a07      	ldr	r2, [pc, #28]	; (8001dcc <encoder_handling+0x170>)
 8001dae:	89d2      	ldrh	r2, [r2, #14]
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d303      	bcc.n	8001dbc <encoder_handling+0x160>
	  {
	    button._status = 0;
 8001db4:	4b05      	ldr	r3, [pc, #20]	; (8001dcc <encoder_handling+0x170>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	809a      	strh	r2, [r3, #4]
	    button._clicks_counter = 0U;
 8001dba:	719a      	strb	r2, [r3, #6]
	  }

}
 8001dbc:	bc10      	pop	{r4}
 8001dbe:	4770      	bx	lr
 8001dc0:	40000400 	.word	0x40000400
 8001dc4:	20000266 	.word	0x20000266
 8001dc8:	40010800 	.word	0x40010800
 8001dcc:	20000268 	.word	0x20000268
 8001dd0:	2000027c 	.word	0x2000027c

08001dd4 <keyboard_handling>:

void keyboard_handling(void)
{
 8001dd4:	b510      	push	{r4, lr}
	if (button_has_clicks (&button) == BUTTON_YES)
 8001dd6:	4849      	ldr	r0, [pc, #292]	; (8001efc <keyboard_handling+0x128>)
 8001dd8:	f7ff fee8 	bl	8001bac <button_has_clicks>
 8001ddc:	b918      	cbnz	r0, 8001de6 <keyboard_handling+0x12>
  return _button->_clicks_counter;
 8001dde:	4b47      	ldr	r3, [pc, #284]	; (8001efc <keyboard_handling+0x128>)
	  {
	    switch (button_get_clicks_count (&button))
 8001de0:	799b      	ldrb	r3, [r3, #6]
 8001de2:	2b05      	cmp	r3, #5
 8001de4:	d046      	beq.n	8001e74 <keyboard_handling+0xa0>
	      //case 1:   agregat_reset_alarm (); break;
	      case 5:   NVIC_SystemReset ();    break;
	      default:                          break;
	    }
	  }
	if(page_properties.page_list != page_start)
 8001de6:	4b46      	ldr	r3, [pc, #280]	; (8001f00 <keyboard_handling+0x12c>)
 8001de8:	781c      	ldrb	r4, [r3, #0]
 8001dea:	b144      	cbz	r4, 8001dfe <keyboard_handling+0x2a>
	{
		if (button_is_holding (&button) == BUTTON_YES)
 8001dec:	4843      	ldr	r0, [pc, #268]	; (8001efc <keyboard_handling+0x128>)
 8001dee:	f7ff fee7 	bl	8001bc0 <button_is_holding>
 8001df2:	2800      	cmp	r0, #0
 8001df4:	d172      	bne.n	8001edc <keyboard_handling+0x108>
		{
			page_properties.page_list	= page_start;
 8001df6:	4b42      	ldr	r3, [pc, #264]	; (8001f00 <keyboard_handling+0x12c>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	701a      	strb	r2, [r3, #0]
			page_properties.line 		= line_0;
 8001dfc:	705a      	strb	r2, [r3, #1]
		}
	}
	if(page_properties.page_list == page_start)
	{
		if (button_is_holding (&button) == BUTTON_YES)
 8001dfe:	483f      	ldr	r0, [pc, #252]	; (8001efc <keyboard_handling+0x128>)
 8001e00:	f7ff fede 	bl	8001bc0 <button_is_holding>
 8001e04:	2800      	cmp	r0, #0
 8001e06:	d16f      	bne.n	8001ee8 <keyboard_handling+0x114>
		{
			page_properties.page_list	= page_menu;
 8001e08:	4b3d      	ldr	r3, [pc, #244]	; (8001f00 <keyboard_handling+0x12c>)
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	701a      	strb	r2, [r3, #0]
			page_properties.line 		= line_0;
 8001e0e:	2200      	movs	r2, #0
 8001e10:	705a      	strb	r2, [r3, #1]
		}
	}

	if(page_properties.page_list == page_menu)
	{
		if(button_is_click(&button) == BUTTON_YES)
 8001e12:	483a      	ldr	r0, [pc, #232]	; (8001efc <keyboard_handling+0x128>)
 8001e14:	f7ff fede 	bl	8001bd4 <button_is_click>
		{
			switch(page_properties.line)
 8001e18:	4b39      	ldr	r3, [pc, #228]	; (8001f00 <keyboard_handling+0x12c>)
 8001e1a:	785b      	ldrb	r3, [r3, #1]
 8001e1c:	4318      	orrs	r0, r3
 8001e1e:	f010 0fff 	tst.w	r0, #255	; 0xff
 8001e22:	d15d      	bne.n	8001ee0 <keyboard_handling+0x10c>
			{
				case line_0: page_properties.page_list = page_settings; page_properties.line = line_0; break;
 8001e24:	4b36      	ldr	r3, [pc, #216]	; (8001f00 <keyboard_handling+0x12c>)
 8001e26:	2202      	movs	r2, #2
 8001e28:	701a      	strb	r2, [r3, #0]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	705a      	strb	r2, [r3, #1]
			}
		}
	}
	if(page_properties.page_list == page_settings)
	{
		if(button_is_click(&button) == BUTTON_YES)
 8001e2e:	4833      	ldr	r0, [pc, #204]	; (8001efc <keyboard_handling+0x128>)
 8001e30:	f7ff fed0 	bl	8001bd4 <button_is_click>
 8001e34:	2800      	cmp	r0, #0
 8001e36:	d157      	bne.n	8001ee8 <keyboard_handling+0x114>
		{
			switch(page_properties.line)
 8001e38:	4b31      	ldr	r3, [pc, #196]	; (8001f00 <keyboard_handling+0x12c>)
 8001e3a:	785b      	ldrb	r3, [r3, #1]
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d045      	beq.n	8001ecc <keyboard_handling+0xf8>
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	d045      	beq.n	8001ed0 <keyboard_handling+0xfc>
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d14f      	bne.n	8001ee8 <keyboard_handling+0x114>
			{
				case line_0: page_properties.page_list = page_setting_date; page_properties.line = line_0; break;
 8001e48:	4b2d      	ldr	r3, [pc, #180]	; (8001f00 <keyboard_handling+0x12c>)
 8001e4a:	2203      	movs	r2, #3
 8001e4c:	701a      	strb	r2, [r3, #0]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	705a      	strb	r2, [r3, #1]
			}
		}
	}
	if(page_properties.page_list == page_setting_date)
	{
		if(button_is_click(&button) == BUTTON_YES)
 8001e52:	482a      	ldr	r0, [pc, #168]	; (8001efc <keyboard_handling+0x128>)
 8001e54:	f7ff febe 	bl	8001bd4 <button_is_click>
 8001e58:	2800      	cmp	r0, #0
 8001e5a:	d149      	bne.n	8001ef0 <keyboard_handling+0x11c>
		{
			switch(page_properties.line)
 8001e5c:	4b28      	ldr	r3, [pc, #160]	; (8001f00 <keyboard_handling+0x12c>)
 8001e5e:	785b      	ldrb	r3, [r3, #1]
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d014      	beq.n	8001e8e <keyboard_handling+0xba>
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	d016      	beq.n	8001e96 <keyboard_handling+0xc2>
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d141      	bne.n	8001ef0 <keyboard_handling+0x11c>
			{
				case line_0: page_properties.line = line_1; break;
 8001e6c:	4b24      	ldr	r3, [pc, #144]	; (8001f00 <keyboard_handling+0x12c>)
 8001e6e:	2201      	movs	r2, #1
 8001e70:	705a      	strb	r2, [r3, #1]
 8001e72:	e03d      	b.n	8001ef0 <keyboard_handling+0x11c>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001e74:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001e78:	4922      	ldr	r1, [pc, #136]	; (8001f04 <keyboard_handling+0x130>)
 8001e7a:	68ca      	ldr	r2, [r1, #12]
 8001e7c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001e80:	4b21      	ldr	r3, [pc, #132]	; (8001f08 <keyboard_handling+0x134>)
 8001e82:	4313      	orrs	r3, r2
 8001e84:	60cb      	str	r3, [r1, #12]
 8001e86:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001e8a:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8001e8c:	e7fd      	b.n	8001e8a <keyboard_handling+0xb6>
				case line_1: page_properties.line = line_2; break;
 8001e8e:	4b1c      	ldr	r3, [pc, #112]	; (8001f00 <keyboard_handling+0x12c>)
 8001e90:	2202      	movs	r2, #2
 8001e92:	705a      	strb	r2, [r3, #1]
 8001e94:	e02c      	b.n	8001ef0 <keyboard_handling+0x11c>
				case line_2: page_properties.line = line_3; break;
 8001e96:	4b1a      	ldr	r3, [pc, #104]	; (8001f00 <keyboard_handling+0x12c>)
 8001e98:	2203      	movs	r2, #3
 8001e9a:	705a      	strb	r2, [r3, #1]
 8001e9c:	e028      	b.n	8001ef0 <keyboard_handling+0x11c>
			}
		}
	}
	if(page_properties.page_list == page_setting_time)
	{
		if(button_is_click(&button) == BUTTON_YES)
 8001e9e:	4817      	ldr	r0, [pc, #92]	; (8001efc <keyboard_handling+0x128>)
 8001ea0:	f7ff fe98 	bl	8001bd4 <button_is_click>
 8001ea4:	bb40      	cbnz	r0, 8001ef8 <keyboard_handling+0x124>
		{
			switch(page_properties.line)
 8001ea6:	4b16      	ldr	r3, [pc, #88]	; (8001f00 <keyboard_handling+0x12c>)
 8001ea8:	785b      	ldrb	r3, [r3, #1]
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d006      	beq.n	8001ebc <keyboard_handling+0xe8>
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d008      	beq.n	8001ec4 <keyboard_handling+0xf0>
 8001eb2:	bb0b      	cbnz	r3, 8001ef8 <keyboard_handling+0x124>
			{
				case line_0: page_properties.line = line_1; break;
 8001eb4:	4b12      	ldr	r3, [pc, #72]	; (8001f00 <keyboard_handling+0x12c>)
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	705a      	strb	r2, [r3, #1]
 8001eba:	e01d      	b.n	8001ef8 <keyboard_handling+0x124>
				case line_1: page_properties.line = line_2; break;
 8001ebc:	4b10      	ldr	r3, [pc, #64]	; (8001f00 <keyboard_handling+0x12c>)
 8001ebe:	2202      	movs	r2, #2
 8001ec0:	705a      	strb	r2, [r3, #1]
 8001ec2:	e019      	b.n	8001ef8 <keyboard_handling+0x124>
				case line_2: page_properties.line = line_3; break;
 8001ec4:	4b0e      	ldr	r3, [pc, #56]	; (8001f00 <keyboard_handling+0x12c>)
 8001ec6:	2203      	movs	r2, #3
 8001ec8:	705a      	strb	r2, [r3, #1]
				default:	break;
			}
		}
	}
}
 8001eca:	e015      	b.n	8001ef8 <keyboard_handling+0x124>
			switch(page_properties.line)
 8001ecc:	2204      	movs	r2, #4
 8001ece:	e000      	b.n	8001ed2 <keyboard_handling+0xfe>
 8001ed0:	2205      	movs	r2, #5
				case line_2: page_properties.page_list = page_setting_GPS; page_properties.line = line_0; break;
 8001ed2:	4b0b      	ldr	r3, [pc, #44]	; (8001f00 <keyboard_handling+0x12c>)
 8001ed4:	701a      	strb	r2, [r3, #0]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	705a      	strb	r2, [r3, #1]
	if(page_properties.page_list == page_setting_date)
 8001eda:	e009      	b.n	8001ef0 <keyboard_handling+0x11c>
	if(page_properties.page_list == page_menu)
 8001edc:	2c01      	cmp	r4, #1
 8001ede:	d098      	beq.n	8001e12 <keyboard_handling+0x3e>
	if(page_properties.page_list == page_settings)
 8001ee0:	4b07      	ldr	r3, [pc, #28]	; (8001f00 <keyboard_handling+0x12c>)
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	2b02      	cmp	r3, #2
 8001ee6:	d0a2      	beq.n	8001e2e <keyboard_handling+0x5a>
	if(page_properties.page_list == page_setting_date)
 8001ee8:	4b05      	ldr	r3, [pc, #20]	; (8001f00 <keyboard_handling+0x12c>)
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	2b03      	cmp	r3, #3
 8001eee:	d0b0      	beq.n	8001e52 <keyboard_handling+0x7e>
	if(page_properties.page_list == page_setting_time)
 8001ef0:	4b03      	ldr	r3, [pc, #12]	; (8001f00 <keyboard_handling+0x12c>)
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	2b04      	cmp	r3, #4
 8001ef6:	d0d2      	beq.n	8001e9e <keyboard_handling+0xca>
}
 8001ef8:	bd10      	pop	{r4, pc}
 8001efa:	bf00      	nop
 8001efc:	20000268 	.word	0x20000268
 8001f00:	20000264 	.word	0x20000264
 8001f04:	e000ed00 	.word	0xe000ed00
 8001f08:	05fa0004 	.word	0x05fa0004

08001f0c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001f0c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001f0e:	2401      	movs	r4, #1
 8001f10:	4620      	mov	r0, r4
 8001f12:	f004 fec7 	bl	8006ca4 <osDelay>
  for(;;)
 8001f16:	e7fb      	b.n	8001f10 <StartDefaultTask+0x4>

08001f18 <StartdispleyTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartdispleyTask */
void StartdispleyTask(void const * argument)
{
 8001f18:	b508      	push	{r3, lr}
  /* USER CODE BEGIN StartdispleyTask */
	display_Init();
 8001f1a:	f7ff fc03 	bl	8001724 <display_Init>
//		sprintf((char*)Message3,	"P= %.2fkPa", BME280_sensor.pressure/1000);
//		ssd1306_WriteString((char*)Message3, Font_11x18, White);

		display_handle();

		osDelay(500);
 8001f1e:	f44f 74fa 	mov.w	r4, #500	; 0x1f4
		display_handle();
 8001f22:	f7ff fe1f 	bl	8001b64 <display_handle>
		osDelay(500);
 8001f26:	4620      	mov	r0, r4
 8001f28:	f004 febc 	bl	8006ca4 <osDelay>
	for(;;)
 8001f2c:	e7f9      	b.n	8001f22 <StartdispleyTask+0xa>

08001f2e <StartencodetTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartencodetTask */
void StartencodetTask(void const * argument)
{
 8001f2e:	b508      	push	{r3, lr}
  /* USER CODE BEGIN StartencodetTask */
	encoder_init();
 8001f30:	f7ff fe60 	bl	8001bf4 <encoder_init>
		//sprintf((char*)Message2, "E %02d      ", test);


//		Enc_Counter = (TIM3->CNT)/2;
		  //sprintf((char*)Message3, "E %02d      ", Enc_Counter);
		  osDelay(1);
 8001f34:	2401      	movs	r4, #1
		encoder_handling();
 8001f36:	f7ff fe91 	bl	8001c5c <encoder_handling>
		keyboard_handling();
 8001f3a:	f7ff ff4b 	bl	8001dd4 <keyboard_handling>
		  osDelay(1);
 8001f3e:	4620      	mov	r0, r4
 8001f40:	f004 feb0 	bl	8006ca4 <osDelay>
	for(;;)
 8001f44:	e7f7      	b.n	8001f36 <StartencodetTask+0x8>
	...

08001f48 <StartGPSTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGPSTask */
void StartGPSTask(void const * argument)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
  /* USER CODE BEGIN StartGPSTask */
	sprintf((char*)Message, "T %02d:%02d:%02d", 12, 12, 12);
 8001f4c:	4d26      	ldr	r5, [pc, #152]	; (8001fe8 <StartGPSTask+0xa0>)
 8001f4e:	4c27      	ldr	r4, [pc, #156]	; (8001fec <StartGPSTask+0xa4>)
 8001f50:	220c      	movs	r2, #12
 8001f52:	9200      	str	r2, [sp, #0]
 8001f54:	4613      	mov	r3, r2
 8001f56:	4629      	mov	r1, r5
 8001f58:	4620      	mov	r0, r4
 8001f5a:	f007 fac3 	bl	80094e4 <siprintf>
//	NEO6_Init(&GpsState, &huart1);
	osDelay(1000);
 8001f5e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f62:	f004 fe9f 	bl	8006ca4 <osDelay>
	sprintf((char*)Message, "T %02d:%02d:%02d", GpsState.Hour, GpsState.Minute, GpsState.Second);
 8001f66:	4a22      	ldr	r2, [pc, #136]	; (8001ff0 <StartGPSTask+0xa8>)
 8001f68:	f892 3189 	ldrb.w	r3, [r2, #393]	; 0x189
 8001f6c:	9300      	str	r3, [sp, #0]
 8001f6e:	f892 3188 	ldrb.w	r3, [r2, #392]	; 0x188
 8001f72:	f892 2187 	ldrb.w	r2, [r2, #391]	; 0x187
 8001f76:	4629      	mov	r1, r5
 8001f78:	4620      	mov	r0, r4
 8001f7a:	f007 fab3 	bl	80094e4 <siprintf>
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001f7e:	4f1d      	ldr	r7, [pc, #116]	; (8001ff4 <StartGPSTask+0xac>)
 8001f80:	f44f 5600 	mov.w	r6, #8192	; 0x2000
	  NEO6_Task(&GpsState);
	  osDelay(1000);
 8001f84:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8001f88:	e015      	b.n	8001fb6 <StartGPSTask+0x6e>

	  if(NEO6_IsFix(&GpsState))
	  {
		 sprintf((char*)Message, "T %02d:%02d:%02d", GpsState.Hour, GpsState.Minute, GpsState.Second);
 8001f8a:	f895 3189 	ldrb.w	r3, [r5, #393]	; 0x189
 8001f8e:	9300      	str	r3, [sp, #0]
 8001f90:	f895 3188 	ldrb.w	r3, [r5, #392]	; 0x188
 8001f94:	f895 2187 	ldrb.w	r2, [r5, #391]	; 0x187
 8001f98:	4913      	ldr	r1, [pc, #76]	; (8001fe8 <StartGPSTask+0xa0>)
 8001f9a:	4814      	ldr	r0, [pc, #80]	; (8001fec <StartGPSTask+0xa4>)
 8001f9c:	f007 faa2 	bl	80094e4 <siprintf>
		  sprintf((char*)Message, "No Fix\n\r");

	  }


	  osDelay(1000);
 8001fa0:	4620      	mov	r0, r4
 8001fa2:	f004 fe7f 	bl	8006ca4 <osDelay>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	4631      	mov	r1, r6
 8001faa:	4638      	mov	r0, r7
 8001fac:	f001 fcc6 	bl	800393c <HAL_GPIO_WritePin>
	  osDelay(1000);
 8001fb0:	4620      	mov	r0, r4
 8001fb2:	f004 fe77 	bl	8006ca4 <osDelay>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	4631      	mov	r1, r6
 8001fba:	4638      	mov	r0, r7
 8001fbc:	f001 fcbe 	bl	800393c <HAL_GPIO_WritePin>
	  NEO6_Task(&GpsState);
 8001fc0:	4d0b      	ldr	r5, [pc, #44]	; (8001ff0 <StartGPSTask+0xa8>)
 8001fc2:	4628      	mov	r0, r5
 8001fc4:	f001 f8bd 	bl	8003142 <NEO6_Task>
	  osDelay(1000);
 8001fc8:	4620      	mov	r0, r4
 8001fca:	f004 fe6b 	bl	8006ca4 <osDelay>
	  if(NEO6_IsFix(&GpsState))
 8001fce:	4628      	mov	r0, r5
 8001fd0:	f001 f8b4 	bl	800313c <NEO6_IsFix>
 8001fd4:	2800      	cmp	r0, #0
 8001fd6:	d1d8      	bne.n	8001f8a <StartGPSTask+0x42>
		  sprintf((char*)Message, "No Fix\n\r");
 8001fd8:	4a04      	ldr	r2, [pc, #16]	; (8001fec <StartGPSTask+0xa4>)
 8001fda:	4b07      	ldr	r3, [pc, #28]	; (8001ff8 <StartGPSTask+0xb0>)
 8001fdc:	cb03      	ldmia	r3!, {r0, r1}
 8001fde:	6010      	str	r0, [r2, #0]
 8001fe0:	6051      	str	r1, [r2, #4]
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	7213      	strb	r3, [r2, #8]
 8001fe6:	e7db      	b.n	8001fa0 <StartGPSTask+0x58>
 8001fe8:	0800c28c 	.word	0x0800c28c
 8001fec:	20000224 	.word	0x20000224
 8001ff0:	20000728 	.word	0x20000728
 8001ff4:	40011000 	.word	0x40011000
 8001ff8:	0800c2a0 	.word	0x0800c2a0

08001ffc <StartRTCTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRTCTask */
void StartRTCTask(void const * argument)
{
 8001ffc:	b508      	push	{r3, lr}
//	uint8_t minute	= 0;
//	uint8_t hour	= 0;
//
//
//	DS1307_Init(&hi2c2);
	rtc_Init();
 8001ffe:	f000 fa05 	bl	800240c <rtc_Init>
//	  sprintf((char*)Message2,	"SEC %02d      ", second);

//	  sprintf((char*)Message3,	"MIN %d%d     ",((data/10)%10), (data%10));
	  //sprintf((char*)Message3,	"MIN %02d      ", minute);
	  rtc_handle();
    osDelay(100);
 8002002:	2464      	movs	r4, #100	; 0x64
	  rtc_handle();
 8002004:	f000 fb5a 	bl	80026bc <rtc_handle>
    osDelay(100);
 8002008:	4620      	mov	r0, r4
 800200a:	f004 fe4b 	bl	8006ca4 <osDelay>
  for(;;)
 800200e:	e7f9      	b.n	8002004 <StartRTCTask+0x8>

08002010 <StartUARTTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUARTTask */
void StartUARTTask(void const * argument)
{
 8002010:	b508      	push	{r3, lr}
  /* USER CODE BEGIN StartUARTTask */
  /* Infinite loop */
  for(;;)
  {
	  uart_pc_handle();
	  osDelay(100);
 8002012:	2464      	movs	r4, #100	; 0x64
	  uart_pc_handle();
 8002014:	f000 fce6 	bl	80029e4 <uart_pc_handle>
	  osDelay(100);
 8002018:	4620      	mov	r0, r4
 800201a:	f004 fe43 	bl	8006ca4 <osDelay>
  for(;;)
 800201e:	e7f9      	b.n	8002014 <StartUARTTask+0x4>

08002020 <StartSensorTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSensorTask */
void StartSensorTask(void const * argument)
{
 8002020:	b508      	push	{r3, lr}
  /* USER CODE BEGIN StartSensorTask */
  /* Infinite loop */

	sensors_Init();
 8002022:	f000 fb73 	bl	800270c <sensors_Init>

  for(;;)
  {
	  sensors_Handle();
	  osDelay(1000);
 8002026:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
	  sensors_Handle();
 800202a:	f000 fb7b 	bl	8002724 <sensors_Handle>
	  osDelay(1000);
 800202e:	4620      	mov	r0, r4
 8002030:	f004 fe38 	bl	8006ca4 <osDelay>
  for(;;)
 8002034:	e7f9      	b.n	800202a <StartSensorTask+0xa>
	...

08002038 <vApplicationGetIdleTaskMemory>:
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002038:	4b03      	ldr	r3, [pc, #12]	; (8002048 <vApplicationGetIdleTaskMemory+0x10>)
 800203a:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800203c:	4b03      	ldr	r3, [pc, #12]	; (800204c <vApplicationGetIdleTaskMemory+0x14>)
 800203e:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002040:	2380      	movs	r3, #128	; 0x80
 8002042:	6013      	str	r3, [r2, #0]
}
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	2000049c 	.word	0x2000049c
 800204c:	2000029c 	.word	0x2000029c

08002050 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 8002050:	b510      	push	{r4, lr}
 8002052:	b0b2      	sub	sp, #200	; 0xc8
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8002054:	4c3f      	ldr	r4, [pc, #252]	; (8002154 <MX_FREERTOS_Init+0x104>)
 8002056:	f10d 0cac 	add.w	ip, sp, #172	; 0xac
 800205a:	46a6      	mov	lr, r4
 800205c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8002060:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8002064:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8002068:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800206c:	2100      	movs	r1, #0
 800206e:	a82b      	add	r0, sp, #172	; 0xac
 8002070:	f004 fde3 	bl	8006c3a <osThreadCreate>
 8002074:	4b38      	ldr	r3, [pc, #224]	; (8002158 <MX_FREERTOS_Init+0x108>)
 8002076:	6018      	str	r0, [r3, #0]
  osThreadDef(displeyTask, StartdispleyTask, osPriorityLow, 0, 512);
 8002078:	f10d 0c90 	add.w	ip, sp, #144	; 0x90
 800207c:	f104 0e1c 	add.w	lr, r4, #28
 8002080:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8002084:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8002088:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 800208c:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
  displeyTaskHandle = osThreadCreate(osThread(displeyTask), NULL);
 8002090:	2100      	movs	r1, #0
 8002092:	a824      	add	r0, sp, #144	; 0x90
 8002094:	f004 fdd1 	bl	8006c3a <osThreadCreate>
 8002098:	4b30      	ldr	r3, [pc, #192]	; (800215c <MX_FREERTOS_Init+0x10c>)
 800209a:	6018      	str	r0, [r3, #0]
  osThreadDef(encodetTask, StartencodetTask, osPriorityLow, 0, 128);
 800209c:	f10d 0c74 	add.w	ip, sp, #116	; 0x74
 80020a0:	f104 0e38 	add.w	lr, r4, #56	; 0x38
 80020a4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80020a8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80020ac:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 80020b0:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
  encodetTaskHandle = osThreadCreate(osThread(encodetTask), NULL);
 80020b4:	2100      	movs	r1, #0
 80020b6:	a81d      	add	r0, sp, #116	; 0x74
 80020b8:	f004 fdbf 	bl	8006c3a <osThreadCreate>
 80020bc:	4b28      	ldr	r3, [pc, #160]	; (8002160 <MX_FREERTOS_Init+0x110>)
 80020be:	6018      	str	r0, [r3, #0]
  osThreadDef(gpsTask, StartGPSTask, osPriorityLow, 0, 128);
 80020c0:	f10d 0c58 	add.w	ip, sp, #88	; 0x58
 80020c4:	f104 0e54 	add.w	lr, r4, #84	; 0x54
 80020c8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80020cc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80020d0:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 80020d4:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
  gpsTaskHandle = osThreadCreate(osThread(gpsTask), NULL);
 80020d8:	2100      	movs	r1, #0
 80020da:	a816      	add	r0, sp, #88	; 0x58
 80020dc:	f004 fdad 	bl	8006c3a <osThreadCreate>
 80020e0:	4b20      	ldr	r3, [pc, #128]	; (8002164 <MX_FREERTOS_Init+0x114>)
 80020e2:	6018      	str	r0, [r3, #0]
  osThreadDef(rtcTask, StartRTCTask, osPriorityLow, 0, 128);
 80020e4:	f10d 0c3c 	add.w	ip, sp, #60	; 0x3c
 80020e8:	f104 0e70 	add.w	lr, r4, #112	; 0x70
 80020ec:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80020f0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80020f4:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 80020f8:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
  rtcTaskHandle = osThreadCreate(osThread(rtcTask), NULL);
 80020fc:	2100      	movs	r1, #0
 80020fe:	a80f      	add	r0, sp, #60	; 0x3c
 8002100:	f004 fd9b 	bl	8006c3a <osThreadCreate>
 8002104:	4b18      	ldr	r3, [pc, #96]	; (8002168 <MX_FREERTOS_Init+0x118>)
 8002106:	6018      	str	r0, [r3, #0]
  osThreadDef(UARTTask, StartUARTTask, osPriorityIdle, 0, 256);
 8002108:	f10d 0c20 	add.w	ip, sp, #32
 800210c:	f104 0e8c 	add.w	lr, r4, #140	; 0x8c
 8002110:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8002114:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8002118:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 800211c:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
  UARTTaskHandle = osThreadCreate(osThread(UARTTask), NULL);
 8002120:	2100      	movs	r1, #0
 8002122:	a808      	add	r0, sp, #32
 8002124:	f004 fd89 	bl	8006c3a <osThreadCreate>
 8002128:	4b10      	ldr	r3, [pc, #64]	; (800216c <MX_FREERTOS_Init+0x11c>)
 800212a:	6018      	str	r0, [r3, #0]
  osThreadDef(sensorsTask, StartSensorTask, osPriorityIdle, 0, 128);
 800212c:	f10d 0e04 	add.w	lr, sp, #4
 8002130:	f104 0ca8 	add.w	ip, r4, #168	; 0xa8
 8002134:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8002138:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800213c:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8002140:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
  sensorsTaskHandle = osThreadCreate(osThread(sensorsTask), NULL);
 8002144:	2100      	movs	r1, #0
 8002146:	a801      	add	r0, sp, #4
 8002148:	f004 fd77 	bl	8006c3a <osThreadCreate>
 800214c:	4b08      	ldr	r3, [pc, #32]	; (8002170 <MX_FREERTOS_Init+0x120>)
 800214e:	6018      	str	r0, [r3, #0]
}
 8002150:	b032      	add	sp, #200	; 0xc8
 8002152:	bd10      	pop	{r4, pc}
 8002154:	0800c108 	.word	0x0800c108
 8002158:	20000284 	.word	0x20000284
 800215c:	20000288 	.word	0x20000288
 8002160:	2000028c 	.word	0x2000028c
 8002164:	20000290 	.word	0x20000290
 8002168:	20000294 	.word	0x20000294
 800216c:	20000280 	.word	0x20000280
 8002170:	20000298 	.word	0x20000298

08002174 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002174:	b530      	push	{r4, r5, lr}
 8002176:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002178:	2400      	movs	r4, #0
 800217a:	9404      	str	r4, [sp, #16]
 800217c:	9405      	str	r4, [sp, #20]
 800217e:	9406      	str	r4, [sp, #24]
 8002180:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002182:	4b20      	ldr	r3, [pc, #128]	; (8002204 <MX_GPIO_Init+0x90>)
 8002184:	699a      	ldr	r2, [r3, #24]
 8002186:	f042 0210 	orr.w	r2, r2, #16
 800218a:	619a      	str	r2, [r3, #24]
 800218c:	699a      	ldr	r2, [r3, #24]
 800218e:	f002 0210 	and.w	r2, r2, #16
 8002192:	9200      	str	r2, [sp, #0]
 8002194:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002196:	699a      	ldr	r2, [r3, #24]
 8002198:	f042 0220 	orr.w	r2, r2, #32
 800219c:	619a      	str	r2, [r3, #24]
 800219e:	699a      	ldr	r2, [r3, #24]
 80021a0:	f002 0220 	and.w	r2, r2, #32
 80021a4:	9201      	str	r2, [sp, #4]
 80021a6:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021a8:	699a      	ldr	r2, [r3, #24]
 80021aa:	f042 0204 	orr.w	r2, r2, #4
 80021ae:	619a      	str	r2, [r3, #24]
 80021b0:	699a      	ldr	r2, [r3, #24]
 80021b2:	f002 0204 	and.w	r2, r2, #4
 80021b6:	9202      	str	r2, [sp, #8]
 80021b8:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021ba:	699a      	ldr	r2, [r3, #24]
 80021bc:	f042 0208 	orr.w	r2, r2, #8
 80021c0:	619a      	str	r2, [r3, #24]
 80021c2:	699b      	ldr	r3, [r3, #24]
 80021c4:	f003 0308 	and.w	r3, r3, #8
 80021c8:	9303      	str	r3, [sp, #12]
 80021ca:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80021cc:	4d0e      	ldr	r5, [pc, #56]	; (8002208 <MX_GPIO_Init+0x94>)
 80021ce:	4622      	mov	r2, r4
 80021d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80021d4:	4628      	mov	r0, r5
 80021d6:	f001 fbb1 	bl	800393c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80021da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021de:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021e0:	2301      	movs	r3, #1
 80021e2:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e4:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80021e6:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021e8:	a904      	add	r1, sp, #16
 80021ea:	4628      	mov	r0, r5
 80021ec:	f001 fa6c 	bl	80036c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80021f0:	2320      	movs	r3, #32
 80021f2:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021f4:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f6:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021f8:	a904      	add	r1, sp, #16
 80021fa:	4804      	ldr	r0, [pc, #16]	; (800220c <MX_GPIO_Init+0x98>)
 80021fc:	f001 fa64 	bl	80036c8 <HAL_GPIO_Init>

}
 8002200:	b009      	add	sp, #36	; 0x24
 8002202:	bd30      	pop	{r4, r5, pc}
 8002204:	40021000 	.word	0x40021000
 8002208:	40011000 	.word	0x40011000
 800220c:	40010800 	.word	0x40010800

08002210 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002210:	b508      	push	{r3, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002212:	480b      	ldr	r0, [pc, #44]	; (8002240 <MX_I2C1_Init+0x30>)
 8002214:	4b0b      	ldr	r3, [pc, #44]	; (8002244 <MX_I2C1_Init+0x34>)
 8002216:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002218:	4b0b      	ldr	r3, [pc, #44]	; (8002248 <MX_I2C1_Init+0x38>)
 800221a:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800221c:	2300      	movs	r3, #0
 800221e:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002220:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002222:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002226:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002228:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800222a:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800222c:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800222e:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002230:	f001 fe06 	bl	8003e40 <HAL_I2C_Init>
 8002234:	b900      	cbnz	r0, 8002238 <MX_I2C1_Init+0x28>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002236:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002238:	f000 f8e6 	bl	8002408 <Error_Handler>
}
 800223c:	e7fb      	b.n	8002236 <MX_I2C1_Init+0x26>
 800223e:	bf00      	nop
 8002240:	200004f0 	.word	0x200004f0
 8002244:	40005400 	.word	0x40005400
 8002248:	00061a80 	.word	0x00061a80

0800224c <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800224c:	b508      	push	{r3, lr}
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800224e:	480b      	ldr	r0, [pc, #44]	; (800227c <MX_I2C2_Init+0x30>)
 8002250:	4b0b      	ldr	r3, [pc, #44]	; (8002280 <MX_I2C2_Init+0x34>)
 8002252:	6003      	str	r3, [r0, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8002254:	4b0b      	ldr	r3, [pc, #44]	; (8002284 <MX_I2C2_Init+0x38>)
 8002256:	6043      	str	r3, [r0, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002258:	2300      	movs	r3, #0
 800225a:	6083      	str	r3, [r0, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800225c:	60c3      	str	r3, [r0, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800225e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002262:	6102      	str	r2, [r0, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002264:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002266:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002268:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800226a:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800226c:	f001 fde8 	bl	8003e40 <HAL_I2C_Init>
 8002270:	b900      	cbnz	r0, 8002274 <MX_I2C2_Init+0x28>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002272:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002274:	f000 f8c8 	bl	8002408 <Error_Handler>
}
 8002278:	e7fb      	b.n	8002272 <MX_I2C2_Init+0x26>
 800227a:	bf00      	nop
 800227c:	20000544 	.word	0x20000544
 8002280:	40005800 	.word	0x40005800
 8002284:	000186a0 	.word	0x000186a0

08002288 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002288:	b510      	push	{r4, lr}
 800228a:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800228c:	2300      	movs	r3, #0
 800228e:	9304      	str	r3, [sp, #16]
 8002290:	9305      	str	r3, [sp, #20]
 8002292:	9306      	str	r3, [sp, #24]
 8002294:	9307      	str	r3, [sp, #28]
  if(i2cHandle->Instance==I2C1)
 8002296:	6803      	ldr	r3, [r0, #0]
 8002298:	4a2a      	ldr	r2, [pc, #168]	; (8002344 <HAL_I2C_MspInit+0xbc>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d004      	beq.n	80022a8 <HAL_I2C_MspInit+0x20>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
  else if(i2cHandle->Instance==I2C2)
 800229e:	4a2a      	ldr	r2, [pc, #168]	; (8002348 <HAL_I2C_MspInit+0xc0>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d02f      	beq.n	8002304 <HAL_I2C_MspInit+0x7c>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80022a4:	b008      	add	sp, #32
 80022a6:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022a8:	4c28      	ldr	r4, [pc, #160]	; (800234c <HAL_I2C_MspInit+0xc4>)
 80022aa:	69a3      	ldr	r3, [r4, #24]
 80022ac:	f043 0308 	orr.w	r3, r3, #8
 80022b0:	61a3      	str	r3, [r4, #24]
 80022b2:	69a3      	ldr	r3, [r4, #24]
 80022b4:	f003 0308 	and.w	r3, r3, #8
 80022b8:	9300      	str	r3, [sp, #0]
 80022ba:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80022bc:	23c0      	movs	r3, #192	; 0xc0
 80022be:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022c0:	2312      	movs	r3, #18
 80022c2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80022c4:	2303      	movs	r3, #3
 80022c6:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022c8:	a904      	add	r1, sp, #16
 80022ca:	4821      	ldr	r0, [pc, #132]	; (8002350 <HAL_I2C_MspInit+0xc8>)
 80022cc:	f001 f9fc 	bl	80036c8 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 80022d0:	69e3      	ldr	r3, [r4, #28]
 80022d2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80022d6:	61e3      	str	r3, [r4, #28]
 80022d8:	69e3      	ldr	r3, [r4, #28]
 80022da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022de:	9301      	str	r3, [sp, #4]
 80022e0:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 80022e2:	2200      	movs	r2, #0
 80022e4:	2105      	movs	r1, #5
 80022e6:	201f      	movs	r0, #31
 80022e8:	f001 f938 	bl	800355c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80022ec:	201f      	movs	r0, #31
 80022ee:	f001 f96b 	bl	80035c8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 80022f2:	2200      	movs	r2, #0
 80022f4:	2105      	movs	r1, #5
 80022f6:	2020      	movs	r0, #32
 80022f8:	f001 f930 	bl	800355c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80022fc:	2020      	movs	r0, #32
 80022fe:	f001 f963 	bl	80035c8 <HAL_NVIC_EnableIRQ>
 8002302:	e7cf      	b.n	80022a4 <HAL_I2C_MspInit+0x1c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002304:	4c11      	ldr	r4, [pc, #68]	; (800234c <HAL_I2C_MspInit+0xc4>)
 8002306:	69a3      	ldr	r3, [r4, #24]
 8002308:	f043 0308 	orr.w	r3, r3, #8
 800230c:	61a3      	str	r3, [r4, #24]
 800230e:	69a3      	ldr	r3, [r4, #24]
 8002310:	f003 0308 	and.w	r3, r3, #8
 8002314:	9302      	str	r3, [sp, #8]
 8002316:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002318:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800231c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800231e:	2312      	movs	r3, #18
 8002320:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002322:	2303      	movs	r3, #3
 8002324:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002326:	a904      	add	r1, sp, #16
 8002328:	4809      	ldr	r0, [pc, #36]	; (8002350 <HAL_I2C_MspInit+0xc8>)
 800232a:	f001 f9cd 	bl	80036c8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800232e:	69e3      	ldr	r3, [r4, #28]
 8002330:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002334:	61e3      	str	r3, [r4, #28]
 8002336:	69e3      	ldr	r3, [r4, #28]
 8002338:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800233c:	9303      	str	r3, [sp, #12]
 800233e:	9b03      	ldr	r3, [sp, #12]
}
 8002340:	e7b0      	b.n	80022a4 <HAL_I2C_MspInit+0x1c>
 8002342:	bf00      	nop
 8002344:	40005400 	.word	0x40005400
 8002348:	40005800 	.word	0x40005800
 800234c:	40021000 	.word	0x40021000
 8002350:	40010c00 	.word	0x40010c00

08002354 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002354:	b500      	push	{lr}
 8002356:	b091      	sub	sp, #68	; 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002358:	2300      	movs	r3, #0
 800235a:	9308      	str	r3, [sp, #32]
 800235c:	9309      	str	r3, [sp, #36]	; 0x24
 800235e:	930b      	str	r3, [sp, #44]	; 0x2c
 8002360:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002362:	9301      	str	r3, [sp, #4]
 8002364:	9302      	str	r3, [sp, #8]
 8002366:	9303      	str	r3, [sp, #12]
 8002368:	9304      	str	r3, [sp, #16]
 800236a:	9305      	str	r3, [sp, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800236c:	2201      	movs	r2, #1
 800236e:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002370:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002374:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002376:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002378:	2202      	movs	r2, #2
 800237a:	920d      	str	r2, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800237c:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800237e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002382:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002384:	a806      	add	r0, sp, #24
 8002386:	f003 fb83 	bl	8005a90 <HAL_RCC_OscConfig>
 800238a:	b980      	cbnz	r0, 80023ae <SystemClock_Config+0x5a>
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800238c:	230f      	movs	r3, #15
 800238e:	9301      	str	r3, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002390:	2102      	movs	r1, #2
 8002392:	9102      	str	r1, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002394:	2300      	movs	r3, #0
 8002396:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002398:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800239c:	9204      	str	r2, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800239e:	9305      	str	r3, [sp, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80023a0:	a801      	add	r0, sp, #4
 80023a2:	f003 fdb5 	bl	8005f10 <HAL_RCC_ClockConfig>
 80023a6:	b920      	cbnz	r0, 80023b2 <SystemClock_Config+0x5e>
  {
    Error_Handler();
  }
}
 80023a8:	b011      	add	sp, #68	; 0x44
 80023aa:	f85d fb04 	ldr.w	pc, [sp], #4
  __ASM volatile ("cpsid i" : : : "memory");
 80023ae:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80023b0:	e7fe      	b.n	80023b0 <SystemClock_Config+0x5c>
 80023b2:	b672      	cpsid	i
 80023b4:	e7fe      	b.n	80023b4 <SystemClock_Config+0x60>

080023b6 <main>:
{
 80023b6:	b508      	push	{r3, lr}
  HAL_Init();
 80023b8:	f001 f886 	bl	80034c8 <HAL_Init>
  SystemClock_Config();
 80023bc:	f7ff ffca 	bl	8002354 <SystemClock_Config>
  MX_GPIO_Init();
 80023c0:	f7ff fed8 	bl	8002174 <MX_GPIO_Init>
  MX_I2C1_Init();
 80023c4:	f7ff ff24 	bl	8002210 <MX_I2C1_Init>
  MX_I2C2_Init();
 80023c8:	f7ff ff40 	bl	800224c <MX_I2C2_Init>
  MX_USART1_UART_Init();
 80023cc:	f000 fb3e 	bl	8002a4c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80023d0:	f000 fb56 	bl	8002a80 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80023d4:	f000 fa9c 	bl	8002910 <MX_TIM3_Init>
  MX_FREERTOS_Init();
 80023d8:	f7ff fe3a 	bl	8002050 <MX_FREERTOS_Init>
  osKernelStart();
 80023dc:	f004 fc28 	bl	8006c30 <osKernelStart>
  while (1)
 80023e0:	e7fe      	b.n	80023e0 <main+0x2a>
	...

080023e4 <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM4) {
 80023e4:	6802      	ldr	r2, [r0, #0]
 80023e6:	4b07      	ldr	r3, [pc, #28]	; (8002404 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d000      	beq.n	80023ee <HAL_TIM_PeriodElapsedCallback+0xa>
 80023ec:	4770      	bx	lr
{
 80023ee:	b510      	push	{r4, lr}
 80023f0:	4604      	mov	r4, r0
    HAL_IncTick();
 80023f2:	f001 f87b 	bl	80034ec <HAL_IncTick>
  if (htim->Instance == TIM4)
 80023f6:	6822      	ldr	r2, [r4, #0]
 80023f8:	4b02      	ldr	r3, [pc, #8]	; (8002404 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d101      	bne.n	8002402 <HAL_TIM_PeriodElapsedCallback+0x1e>
	  button_timer_tick();
 80023fe:	f7ff fc25 	bl	8001c4c <button_timer_tick>
}
 8002402:	bd10      	pop	{r4, pc}
 8002404:	40000800 	.word	0x40000800

08002408 <Error_Handler>:
 8002408:	b672      	cpsid	i
  while (1)
 800240a:	e7fe      	b.n	800240a <Error_Handler+0x2>

0800240c <rtc_Init>:
void rtc_InstalTimeEncoder (void);


/* Private user code ---------------------------------------------------------*/
void rtc_Init(void)
{
 800240c:	b508      	push	{r3, lr}
	timedata.sec	= 0;
 800240e:	4b06      	ldr	r3, [pc, #24]	; (8002428 <rtc_Init+0x1c>)
 8002410:	2200      	movs	r2, #0
 8002412:	701a      	strb	r2, [r3, #0]
	timedata.min	= 0;
 8002414:	705a      	strb	r2, [r3, #1]
	timedata.hour	= 0;
 8002416:	709a      	strb	r2, [r3, #2]

	timedata.date	= 0;
 8002418:	70da      	strb	r2, [r3, #3]
	timedata.month	= 0;
 800241a:	711a      	strb	r2, [r3, #4]
	timedata.year	= 0;
 800241c:	80da      	strh	r2, [r3, #6]

	DS1307_Init(&hi2c2);
 800241e:	4803      	ldr	r0, [pc, #12]	; (800242c <rtc_Init+0x20>)
 8002420:	f000 fc24 	bl	8002c6c <DS1307_Init>
}
 8002424:	bd08      	pop	{r3, pc}
 8002426:	bf00      	nop
 8002428:	200005a8 	.word	0x200005a8
 800242c:	20000544 	.word	0x20000544

08002430 <rtc_SetTimeData>:
		rtc_InstalTimeEncoder();
	}
}

void rtc_SetTimeData (void)
{
 8002430:	b508      	push	{r3, lr}
	if(flag_line_timedata.flag_data)
 8002432:	4b23      	ldr	r3, [pc, #140]	; (80024c0 <rtc_SetTimeData+0x90>)
 8002434:	791b      	ldrb	r3, [r3, #4]
 8002436:	b993      	cbnz	r3, 800245e <rtc_SetTimeData+0x2e>
	{
		DS1307_SetDate(temptimedata.date);
		flag_line_timedata.flag_data = 0;
	}
	if(flag_line_timedata.flag_month)
 8002438:	4b21      	ldr	r3, [pc, #132]	; (80024c0 <rtc_SetTimeData+0x90>)
 800243a:	795b      	ldrb	r3, [r3, #5]
 800243c:	b9bb      	cbnz	r3, 800246e <rtc_SetTimeData+0x3e>
	{
		DS1307_SetMonth(temptimedata.month);
		flag_line_timedata.flag_month = 0;
	}
	if(flag_line_timedata.flag_year)
 800243e:	4b20      	ldr	r3, [pc, #128]	; (80024c0 <rtc_SetTimeData+0x90>)
 8002440:	799b      	ldrb	r3, [r3, #6]
 8002442:	b9e3      	cbnz	r3, 800247e <rtc_SetTimeData+0x4e>
	{
		DS1307_SetYear(temptimedata.year);
		flag_line_timedata.flag_year = 0;
	}
	if(flag_line_timedata.flag_hour)
 8002444:	4b1e      	ldr	r3, [pc, #120]	; (80024c0 <rtc_SetTimeData+0x90>)
 8002446:	78db      	ldrb	r3, [r3, #3]
 8002448:	bb0b      	cbnz	r3, 800248e <rtc_SetTimeData+0x5e>
	{
		DS1307_SetHour(temptimedata.hour);
		flag_line_timedata.flag_hour = 0;
	}
	if(flag_line_timedata.flag_min)
 800244a:	4b1d      	ldr	r3, [pc, #116]	; (80024c0 <rtc_SetTimeData+0x90>)
 800244c:	789b      	ldrb	r3, [r3, #2]
 800244e:	bb33      	cbnz	r3, 800249e <rtc_SetTimeData+0x6e>
	{
		DS1307_SetMinute(temptimedata.min);
		flag_line_timedata.flag_min = 0;
	}
	if(flag_line_timedata.flag_sec)
 8002450:	4b1b      	ldr	r3, [pc, #108]	; (80024c0 <rtc_SetTimeData+0x90>)
 8002452:	785b      	ldrb	r3, [r3, #1]
 8002454:	bb5b      	cbnz	r3, 80024ae <rtc_SetTimeData+0x7e>
	{
		DS1307_SetSecond(temptimedata.sec);
		flag_line_timedata.flag_sec = 0;
	}

	flag_line_timedata.flag_readtemptimedata = 0;
 8002456:	4b1a      	ldr	r3, [pc, #104]	; (80024c0 <rtc_SetTimeData+0x90>)
 8002458:	2200      	movs	r2, #0
 800245a:	701a      	strb	r2, [r3, #0]
}
 800245c:	bd08      	pop	{r3, pc}
		DS1307_SetDate(temptimedata.date);
 800245e:	4b19      	ldr	r3, [pc, #100]	; (80024c4 <rtc_SetTimeData+0x94>)
 8002460:	78d8      	ldrb	r0, [r3, #3]
 8002462:	f000 fc65 	bl	8002d30 <DS1307_SetDate>
		flag_line_timedata.flag_data = 0;
 8002466:	4b16      	ldr	r3, [pc, #88]	; (80024c0 <rtc_SetTimeData+0x90>)
 8002468:	2200      	movs	r2, #0
 800246a:	711a      	strb	r2, [r3, #4]
 800246c:	e7e4      	b.n	8002438 <rtc_SetTimeData+0x8>
		DS1307_SetMonth(temptimedata.month);
 800246e:	4b15      	ldr	r3, [pc, #84]	; (80024c4 <rtc_SetTimeData+0x94>)
 8002470:	7918      	ldrb	r0, [r3, #4]
 8002472:	f000 fc65 	bl	8002d40 <DS1307_SetMonth>
		flag_line_timedata.flag_month = 0;
 8002476:	4b12      	ldr	r3, [pc, #72]	; (80024c0 <rtc_SetTimeData+0x90>)
 8002478:	2200      	movs	r2, #0
 800247a:	715a      	strb	r2, [r3, #5]
 800247c:	e7df      	b.n	800243e <rtc_SetTimeData+0xe>
		DS1307_SetYear(temptimedata.year);
 800247e:	4b11      	ldr	r3, [pc, #68]	; (80024c4 <rtc_SetTimeData+0x94>)
 8002480:	88d8      	ldrh	r0, [r3, #6]
 8002482:	f000 fc65 	bl	8002d50 <DS1307_SetYear>
		flag_line_timedata.flag_year = 0;
 8002486:	4b0e      	ldr	r3, [pc, #56]	; (80024c0 <rtc_SetTimeData+0x90>)
 8002488:	2200      	movs	r2, #0
 800248a:	719a      	strb	r2, [r3, #6]
 800248c:	e7da      	b.n	8002444 <rtc_SetTimeData+0x14>
		DS1307_SetHour(temptimedata.hour);
 800248e:	4b0d      	ldr	r3, [pc, #52]	; (80024c4 <rtc_SetTimeData+0x94>)
 8002490:	7898      	ldrb	r0, [r3, #2]
 8002492:	f000 fc75 	bl	8002d80 <DS1307_SetHour>
		flag_line_timedata.flag_hour = 0;
 8002496:	4b0a      	ldr	r3, [pc, #40]	; (80024c0 <rtc_SetTimeData+0x90>)
 8002498:	2200      	movs	r2, #0
 800249a:	70da      	strb	r2, [r3, #3]
 800249c:	e7d5      	b.n	800244a <rtc_SetTimeData+0x1a>
		DS1307_SetMinute(temptimedata.min);
 800249e:	4b09      	ldr	r3, [pc, #36]	; (80024c4 <rtc_SetTimeData+0x94>)
 80024a0:	7858      	ldrb	r0, [r3, #1]
 80024a2:	f000 fc77 	bl	8002d94 <DS1307_SetMinute>
		flag_line_timedata.flag_min = 0;
 80024a6:	4b06      	ldr	r3, [pc, #24]	; (80024c0 <rtc_SetTimeData+0x90>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	709a      	strb	r2, [r3, #2]
 80024ac:	e7d0      	b.n	8002450 <rtc_SetTimeData+0x20>
		DS1307_SetSecond(temptimedata.sec);
 80024ae:	4b05      	ldr	r3, [pc, #20]	; (80024c4 <rtc_SetTimeData+0x94>)
 80024b0:	7818      	ldrb	r0, [r3, #0]
 80024b2:	f000 fc77 	bl	8002da4 <DS1307_SetSecond>
		flag_line_timedata.flag_sec = 0;
 80024b6:	4b02      	ldr	r3, [pc, #8]	; (80024c0 <rtc_SetTimeData+0x90>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	705a      	strb	r2, [r3, #1]
 80024bc:	e7cb      	b.n	8002456 <rtc_SetTimeData+0x26>
 80024be:	bf00      	nop
 80024c0:	20000598 	.word	0x20000598
 80024c4:	200005a0 	.word	0x200005a0

080024c8 <rtc_InstalDataEncoder>:

void rtc_InstalDataEncoder (void)
{
 80024c8:	b510      	push	{r4, lr}
	if(flag_line_timedata.flag_readtemptimedata == 0)
 80024ca:	4b40      	ldr	r3, [pc, #256]	; (80025cc <rtc_InstalDataEncoder+0x104>)
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	b1bb      	cbz	r3, 8002500 <rtc_InstalDataEncoder+0x38>
		temptimedata.date	= DS1307_GetDate();
		temptimedata.month	= DS1307_GetMonth();
		temptimedata.year	= DS1307_GetYear();
	}

	if(page_properties.line == line_0)
 80024d0:	4b3f      	ldr	r3, [pc, #252]	; (80025d0 <rtc_InstalDataEncoder+0x108>)
 80024d2:	785b      	ldrb	r3, [r3, #1]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d133      	bne.n	8002540 <rtc_InstalDataEncoder+0x78>
	{
		if(flag_line_timedata.flag_data == 0)
 80024d8:	4a3c      	ldr	r2, [pc, #240]	; (80025cc <rtc_InstalDataEncoder+0x104>)
 80024da:	7912      	ldrb	r2, [r2, #4]
 80024dc:	b9f2      	cbnz	r2, 800251c <rtc_InstalDataEncoder+0x54>
		{
			flag_line_timedata.flag_data = 1;
 80024de:	4a3b      	ldr	r2, [pc, #236]	; (80025cc <rtc_InstalDataEncoder+0x104>)
 80024e0:	2101      	movs	r1, #1
 80024e2:	7111      	strb	r1, [r2, #4]
			(TIM3->CNT) = temptimedata.date * 2;
 80024e4:	4a3b      	ldr	r2, [pc, #236]	; (80025d4 <rtc_InstalDataEncoder+0x10c>)
 80024e6:	78d2      	ldrb	r2, [r2, #3]
 80024e8:	408a      	lsls	r2, r1
 80024ea:	493b      	ldr	r1, [pc, #236]	; (80025d8 <rtc_InstalDataEncoder+0x110>)
 80024ec:	624a      	str	r2, [r1, #36]	; 0x24
					(TIM3->CNT) = 2100 * 2;
				}
				temptimedata.year = Enc_Counter;
			}
		}
	if(page_properties.line == line_3)
 80024ee:	2b03      	cmp	r3, #3
 80024f0:	d105      	bne.n	80024fe <rtc_InstalDataEncoder+0x36>
	{
		rtc_SetTimeData();
 80024f2:	f7ff ff9d 	bl	8002430 <rtc_SetTimeData>
		page_properties.page_list = page_start;
 80024f6:	4b36      	ldr	r3, [pc, #216]	; (80025d0 <rtc_InstalDataEncoder+0x108>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	701a      	strb	r2, [r3, #0]
		page_properties.line = line_0;
 80024fc:	705a      	strb	r2, [r3, #1]
	}
}
 80024fe:	bd10      	pop	{r4, pc}
		flag_line_timedata.flag_readtemptimedata = 1;
 8002500:	4b32      	ldr	r3, [pc, #200]	; (80025cc <rtc_InstalDataEncoder+0x104>)
 8002502:	2201      	movs	r2, #1
 8002504:	701a      	strb	r2, [r3, #0]
		temptimedata.date	= DS1307_GetDate();
 8002506:	f000 fbcb 	bl	8002ca0 <DS1307_GetDate>
 800250a:	4c32      	ldr	r4, [pc, #200]	; (80025d4 <rtc_InstalDataEncoder+0x10c>)
 800250c:	70e0      	strb	r0, [r4, #3]
		temptimedata.month	= DS1307_GetMonth();
 800250e:	f000 fbce 	bl	8002cae <DS1307_GetMonth>
 8002512:	7120      	strb	r0, [r4, #4]
		temptimedata.year	= DS1307_GetYear();
 8002514:	f000 fbd2 	bl	8002cbc <DS1307_GetYear>
 8002518:	80e0      	strh	r0, [r4, #6]
 800251a:	e7d9      	b.n	80024d0 <rtc_InstalDataEncoder+0x8>
			if(Enc_Counter > 31)
 800251c:	4a2f      	ldr	r2, [pc, #188]	; (80025dc <rtc_InstalDataEncoder+0x114>)
 800251e:	8812      	ldrh	r2, [r2, #0]
 8002520:	2a1f      	cmp	r2, #31
 8002522:	d905      	bls.n	8002530 <rtc_InstalDataEncoder+0x68>
				(TIM3->CNT) = 0;
 8002524:	492c      	ldr	r1, [pc, #176]	; (80025d8 <rtc_InstalDataEncoder+0x110>)
 8002526:	2000      	movs	r0, #0
 8002528:	6248      	str	r0, [r1, #36]	; 0x24
			temptimedata.date = Enc_Counter;
 800252a:	492a      	ldr	r1, [pc, #168]	; (80025d4 <rtc_InstalDataEncoder+0x10c>)
 800252c:	70ca      	strb	r2, [r1, #3]
 800252e:	e7de      	b.n	80024ee <rtc_InstalDataEncoder+0x26>
			else if((Enc_Counter <1) || (Enc_Counter >100))
 8002530:	1e51      	subs	r1, r2, #1
 8002532:	b289      	uxth	r1, r1
 8002534:	2963      	cmp	r1, #99	; 0x63
 8002536:	d9f8      	bls.n	800252a <rtc_InstalDataEncoder+0x62>
				(TIM3->CNT) = 31 * 2;
 8002538:	4927      	ldr	r1, [pc, #156]	; (80025d8 <rtc_InstalDataEncoder+0x110>)
 800253a:	203e      	movs	r0, #62	; 0x3e
 800253c:	6248      	str	r0, [r1, #36]	; 0x24
 800253e:	e7f4      	b.n	800252a <rtc_InstalDataEncoder+0x62>
	if(page_properties.line == line_1)
 8002540:	2b01      	cmp	r3, #1
 8002542:	d11d      	bne.n	8002580 <rtc_InstalDataEncoder+0xb8>
			if(flag_line_timedata.flag_month == 0)
 8002544:	4b21      	ldr	r3, [pc, #132]	; (80025cc <rtc_InstalDataEncoder+0x104>)
 8002546:	795b      	ldrb	r3, [r3, #5]
 8002548:	b943      	cbnz	r3, 800255c <rtc_InstalDataEncoder+0x94>
				flag_line_timedata.flag_month = 1;
 800254a:	4b20      	ldr	r3, [pc, #128]	; (80025cc <rtc_InstalDataEncoder+0x104>)
 800254c:	2201      	movs	r2, #1
 800254e:	715a      	strb	r2, [r3, #5]
				(TIM3->CNT) = temptimedata.month * 2;
 8002550:	4b20      	ldr	r3, [pc, #128]	; (80025d4 <rtc_InstalDataEncoder+0x10c>)
 8002552:	791b      	ldrb	r3, [r3, #4]
 8002554:	4093      	lsls	r3, r2
 8002556:	4a20      	ldr	r2, [pc, #128]	; (80025d8 <rtc_InstalDataEncoder+0x110>)
 8002558:	6253      	str	r3, [r2, #36]	; 0x24
 800255a:	e7d0      	b.n	80024fe <rtc_InstalDataEncoder+0x36>
				if(Enc_Counter > 12)
 800255c:	4b1f      	ldr	r3, [pc, #124]	; (80025dc <rtc_InstalDataEncoder+0x114>)
 800255e:	881b      	ldrh	r3, [r3, #0]
 8002560:	2b0c      	cmp	r3, #12
 8002562:	d905      	bls.n	8002570 <rtc_InstalDataEncoder+0xa8>
					(TIM3->CNT) = 0;
 8002564:	4a1c      	ldr	r2, [pc, #112]	; (80025d8 <rtc_InstalDataEncoder+0x110>)
 8002566:	2100      	movs	r1, #0
 8002568:	6251      	str	r1, [r2, #36]	; 0x24
				temptimedata.month = Enc_Counter;
 800256a:	4a1a      	ldr	r2, [pc, #104]	; (80025d4 <rtc_InstalDataEncoder+0x10c>)
 800256c:	7113      	strb	r3, [r2, #4]
 800256e:	e7c6      	b.n	80024fe <rtc_InstalDataEncoder+0x36>
				else if((Enc_Counter <1) || (Enc_Counter >100))
 8002570:	1e5a      	subs	r2, r3, #1
 8002572:	b292      	uxth	r2, r2
 8002574:	2a63      	cmp	r2, #99	; 0x63
 8002576:	d9f8      	bls.n	800256a <rtc_InstalDataEncoder+0xa2>
					(TIM3->CNT) = 12 * 2;
 8002578:	4a17      	ldr	r2, [pc, #92]	; (80025d8 <rtc_InstalDataEncoder+0x110>)
 800257a:	2118      	movs	r1, #24
 800257c:	6251      	str	r1, [r2, #36]	; 0x24
 800257e:	e7f4      	b.n	800256a <rtc_InstalDataEncoder+0xa2>
	if(page_properties.line == line_2)
 8002580:	2b02      	cmp	r3, #2
 8002582:	d1b4      	bne.n	80024ee <rtc_InstalDataEncoder+0x26>
			if(flag_line_timedata.flag_year == 0)
 8002584:	4b11      	ldr	r3, [pc, #68]	; (80025cc <rtc_InstalDataEncoder+0x104>)
 8002586:	799b      	ldrb	r3, [r3, #6]
 8002588:	b943      	cbnz	r3, 800259c <rtc_InstalDataEncoder+0xd4>
				flag_line_timedata.flag_year = 1;
 800258a:	4b10      	ldr	r3, [pc, #64]	; (80025cc <rtc_InstalDataEncoder+0x104>)
 800258c:	2201      	movs	r2, #1
 800258e:	719a      	strb	r2, [r3, #6]
				(TIM3->CNT) = temptimedata.year * 2;
 8002590:	4b10      	ldr	r3, [pc, #64]	; (80025d4 <rtc_InstalDataEncoder+0x10c>)
 8002592:	88db      	ldrh	r3, [r3, #6]
 8002594:	4093      	lsls	r3, r2
 8002596:	4a10      	ldr	r2, [pc, #64]	; (80025d8 <rtc_InstalDataEncoder+0x110>)
 8002598:	6253      	str	r3, [r2, #36]	; 0x24
 800259a:	e7b0      	b.n	80024fe <rtc_InstalDataEncoder+0x36>
				if(Enc_Counter > 2100)
 800259c:	4b0f      	ldr	r3, [pc, #60]	; (80025dc <rtc_InstalDataEncoder+0x114>)
 800259e:	881b      	ldrh	r3, [r3, #0]
 80025a0:	f640 0234 	movw	r2, #2100	; 0x834
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d906      	bls.n	80025b6 <rtc_InstalDataEncoder+0xee>
					(TIM3->CNT) = 2000;
 80025a8:	4a0b      	ldr	r2, [pc, #44]	; (80025d8 <rtc_InstalDataEncoder+0x110>)
 80025aa:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80025ae:	6251      	str	r1, [r2, #36]	; 0x24
				temptimedata.year = Enc_Counter;
 80025b0:	4a08      	ldr	r2, [pc, #32]	; (80025d4 <rtc_InstalDataEncoder+0x10c>)
 80025b2:	80d3      	strh	r3, [r2, #6]
 80025b4:	e7a3      	b.n	80024fe <rtc_InstalDataEncoder+0x36>
				else if((Enc_Counter <2000) || (Enc_Counter >2500))
 80025b6:	f5a3 62fa 	sub.w	r2, r3, #2000	; 0x7d0
 80025ba:	b292      	uxth	r2, r2
 80025bc:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
 80025c0:	d9f6      	bls.n	80025b0 <rtc_InstalDataEncoder+0xe8>
					(TIM3->CNT) = 2100 * 2;
 80025c2:	4a05      	ldr	r2, [pc, #20]	; (80025d8 <rtc_InstalDataEncoder+0x110>)
 80025c4:	f241 0168 	movw	r1, #4200	; 0x1068
 80025c8:	6251      	str	r1, [r2, #36]	; 0x24
 80025ca:	e7f1      	b.n	80025b0 <rtc_InstalDataEncoder+0xe8>
 80025cc:	20000598 	.word	0x20000598
 80025d0:	20000264 	.word	0x20000264
 80025d4:	200005a0 	.word	0x200005a0
 80025d8:	40000400 	.word	0x40000400
 80025dc:	20000266 	.word	0x20000266

080025e0 <rtc_InstalTimeEncoder>:

void rtc_InstalTimeEncoder (void)
{
 80025e0:	b510      	push	{r4, lr}
	if(flag_line_timedata.flag_readtemptimedata == 0)
 80025e2:	4b31      	ldr	r3, [pc, #196]	; (80026a8 <rtc_InstalTimeEncoder+0xc8>)
 80025e4:	781b      	ldrb	r3, [r3, #0]
 80025e6:	b1b3      	cbz	r3, 8002616 <rtc_InstalTimeEncoder+0x36>
		temptimedata.sec	= DS1307_GetSecond();
		temptimedata.min	= DS1307_GetMinute();
		temptimedata.hour	= DS1307_GetHour();
	}

	if(page_properties.line == line_0)
 80025e8:	4b30      	ldr	r3, [pc, #192]	; (80026ac <rtc_InstalTimeEncoder+0xcc>)
 80025ea:	785b      	ldrb	r3, [r3, #1]
 80025ec:	bb5b      	cbnz	r3, 8002646 <rtc_InstalTimeEncoder+0x66>
	{
		if(flag_line_timedata.flag_hour == 0)
 80025ee:	4a2e      	ldr	r2, [pc, #184]	; (80026a8 <rtc_InstalTimeEncoder+0xc8>)
 80025f0:	78d2      	ldrb	r2, [r2, #3]
 80025f2:	b9f2      	cbnz	r2, 8002632 <rtc_InstalTimeEncoder+0x52>
		{
			flag_line_timedata.flag_hour = 1;
 80025f4:	4a2c      	ldr	r2, [pc, #176]	; (80026a8 <rtc_InstalTimeEncoder+0xc8>)
 80025f6:	2101      	movs	r1, #1
 80025f8:	70d1      	strb	r1, [r2, #3]
			(TIM3->CNT) = temptimedata.hour * 2;
 80025fa:	4a2d      	ldr	r2, [pc, #180]	; (80026b0 <rtc_InstalTimeEncoder+0xd0>)
 80025fc:	7892      	ldrb	r2, [r2, #2]
 80025fe:	408a      	lsls	r2, r1
 8002600:	492c      	ldr	r1, [pc, #176]	; (80026b4 <rtc_InstalTimeEncoder+0xd4>)
 8002602:	624a      	str	r2, [r1, #36]	; 0x24
					(TIM3->CNT) = 59 * 2;
				}
				temptimedata.sec = Enc_Counter;
			}
		}
	if(page_properties.line == line_3)
 8002604:	2b03      	cmp	r3, #3
 8002606:	d105      	bne.n	8002614 <rtc_InstalTimeEncoder+0x34>
	{
		rtc_SetTimeData();
 8002608:	f7ff ff12 	bl	8002430 <rtc_SetTimeData>
		page_properties.page_list = page_start;
 800260c:	4b27      	ldr	r3, [pc, #156]	; (80026ac <rtc_InstalTimeEncoder+0xcc>)
 800260e:	2200      	movs	r2, #0
 8002610:	701a      	strb	r2, [r3, #0]
		page_properties.line = line_0;
 8002612:	705a      	strb	r2, [r3, #1]
	}
}
 8002614:	bd10      	pop	{r4, pc}
		flag_line_timedata.flag_readtemptimedata = 1;
 8002616:	4b24      	ldr	r3, [pc, #144]	; (80026a8 <rtc_InstalTimeEncoder+0xc8>)
 8002618:	2201      	movs	r2, #1
 800261a:	701a      	strb	r2, [r3, #0]
		temptimedata.sec	= DS1307_GetSecond();
 800261c:	f000 fb70 	bl	8002d00 <DS1307_GetSecond>
 8002620:	4c23      	ldr	r4, [pc, #140]	; (80026b0 <rtc_InstalTimeEncoder+0xd0>)
 8002622:	7020      	strb	r0, [r4, #0]
		temptimedata.min	= DS1307_GetMinute();
 8002624:	f000 fb65 	bl	8002cf2 <DS1307_GetMinute>
 8002628:	7060      	strb	r0, [r4, #1]
		temptimedata.hour	= DS1307_GetHour();
 800262a:	f000 fb59 	bl	8002ce0 <DS1307_GetHour>
 800262e:	70a0      	strb	r0, [r4, #2]
 8002630:	e7da      	b.n	80025e8 <rtc_InstalTimeEncoder+0x8>
			if(Enc_Counter > 23)
 8002632:	4a21      	ldr	r2, [pc, #132]	; (80026b8 <rtc_InstalTimeEncoder+0xd8>)
 8002634:	8812      	ldrh	r2, [r2, #0]
 8002636:	2a17      	cmp	r2, #23
 8002638:	d902      	bls.n	8002640 <rtc_InstalTimeEncoder+0x60>
				(TIM3->CNT) = 0;
 800263a:	491e      	ldr	r1, [pc, #120]	; (80026b4 <rtc_InstalTimeEncoder+0xd4>)
 800263c:	2000      	movs	r0, #0
 800263e:	6248      	str	r0, [r1, #36]	; 0x24
			temptimedata.hour = Enc_Counter;
 8002640:	491b      	ldr	r1, [pc, #108]	; (80026b0 <rtc_InstalTimeEncoder+0xd0>)
 8002642:	708a      	strb	r2, [r1, #2]
 8002644:	e7de      	b.n	8002604 <rtc_InstalTimeEncoder+0x24>
	if(page_properties.line == line_1)
 8002646:	2b01      	cmp	r3, #1
 8002648:	d115      	bne.n	8002676 <rtc_InstalTimeEncoder+0x96>
			if(flag_line_timedata.flag_min == 0)
 800264a:	4b17      	ldr	r3, [pc, #92]	; (80026a8 <rtc_InstalTimeEncoder+0xc8>)
 800264c:	789b      	ldrb	r3, [r3, #2]
 800264e:	b943      	cbnz	r3, 8002662 <rtc_InstalTimeEncoder+0x82>
				flag_line_timedata.flag_min = 1;
 8002650:	4b15      	ldr	r3, [pc, #84]	; (80026a8 <rtc_InstalTimeEncoder+0xc8>)
 8002652:	2201      	movs	r2, #1
 8002654:	709a      	strb	r2, [r3, #2]
				(TIM3->CNT) = temptimedata.min * 2;
 8002656:	4b16      	ldr	r3, [pc, #88]	; (80026b0 <rtc_InstalTimeEncoder+0xd0>)
 8002658:	785b      	ldrb	r3, [r3, #1]
 800265a:	4093      	lsls	r3, r2
 800265c:	4a15      	ldr	r2, [pc, #84]	; (80026b4 <rtc_InstalTimeEncoder+0xd4>)
 800265e:	6253      	str	r3, [r2, #36]	; 0x24
 8002660:	e7d8      	b.n	8002614 <rtc_InstalTimeEncoder+0x34>
				if(Enc_Counter > 59)
 8002662:	4b15      	ldr	r3, [pc, #84]	; (80026b8 <rtc_InstalTimeEncoder+0xd8>)
 8002664:	881b      	ldrh	r3, [r3, #0]
 8002666:	2b3b      	cmp	r3, #59	; 0x3b
 8002668:	d902      	bls.n	8002670 <rtc_InstalTimeEncoder+0x90>
					(TIM3->CNT) = 0;
 800266a:	4a12      	ldr	r2, [pc, #72]	; (80026b4 <rtc_InstalTimeEncoder+0xd4>)
 800266c:	2100      	movs	r1, #0
 800266e:	6251      	str	r1, [r2, #36]	; 0x24
				temptimedata.min = Enc_Counter;
 8002670:	4a0f      	ldr	r2, [pc, #60]	; (80026b0 <rtc_InstalTimeEncoder+0xd0>)
 8002672:	7053      	strb	r3, [r2, #1]
 8002674:	e7ce      	b.n	8002614 <rtc_InstalTimeEncoder+0x34>
	if(page_properties.line == line_2)
 8002676:	2b02      	cmp	r3, #2
 8002678:	d1c4      	bne.n	8002604 <rtc_InstalTimeEncoder+0x24>
			if(flag_line_timedata.flag_sec == 0)
 800267a:	4b0b      	ldr	r3, [pc, #44]	; (80026a8 <rtc_InstalTimeEncoder+0xc8>)
 800267c:	785b      	ldrb	r3, [r3, #1]
 800267e:	b943      	cbnz	r3, 8002692 <rtc_InstalTimeEncoder+0xb2>
				flag_line_timedata.flag_sec = 1;
 8002680:	4b09      	ldr	r3, [pc, #36]	; (80026a8 <rtc_InstalTimeEncoder+0xc8>)
 8002682:	2201      	movs	r2, #1
 8002684:	705a      	strb	r2, [r3, #1]
				(TIM3->CNT) = temptimedata.sec * 2;
 8002686:	4b0a      	ldr	r3, [pc, #40]	; (80026b0 <rtc_InstalTimeEncoder+0xd0>)
 8002688:	781b      	ldrb	r3, [r3, #0]
 800268a:	4093      	lsls	r3, r2
 800268c:	4a09      	ldr	r2, [pc, #36]	; (80026b4 <rtc_InstalTimeEncoder+0xd4>)
 800268e:	6253      	str	r3, [r2, #36]	; 0x24
 8002690:	e7c0      	b.n	8002614 <rtc_InstalTimeEncoder+0x34>
				if(Enc_Counter > 59)
 8002692:	4b09      	ldr	r3, [pc, #36]	; (80026b8 <rtc_InstalTimeEncoder+0xd8>)
 8002694:	881b      	ldrh	r3, [r3, #0]
 8002696:	2b3b      	cmp	r3, #59	; 0x3b
 8002698:	d902      	bls.n	80026a0 <rtc_InstalTimeEncoder+0xc0>
					(TIM3->CNT) = 0;
 800269a:	4a06      	ldr	r2, [pc, #24]	; (80026b4 <rtc_InstalTimeEncoder+0xd4>)
 800269c:	2100      	movs	r1, #0
 800269e:	6251      	str	r1, [r2, #36]	; 0x24
				temptimedata.sec = Enc_Counter;
 80026a0:	4a03      	ldr	r2, [pc, #12]	; (80026b0 <rtc_InstalTimeEncoder+0xd0>)
 80026a2:	7013      	strb	r3, [r2, #0]
 80026a4:	e7b6      	b.n	8002614 <rtc_InstalTimeEncoder+0x34>
 80026a6:	bf00      	nop
 80026a8:	20000598 	.word	0x20000598
 80026ac:	20000264 	.word	0x20000264
 80026b0:	200005a0 	.word	0x200005a0
 80026b4:	40000400 	.word	0x40000400
 80026b8:	20000266 	.word	0x20000266

080026bc <rtc_handle>:
{
 80026bc:	b510      	push	{r4, lr}
	timedata.sec	= DS1307_GetSecond();
 80026be:	f000 fb1f 	bl	8002d00 <DS1307_GetSecond>
 80026c2:	4c10      	ldr	r4, [pc, #64]	; (8002704 <rtc_handle+0x48>)
 80026c4:	7020      	strb	r0, [r4, #0]
	timedata.min	= DS1307_GetMinute();
 80026c6:	f000 fb14 	bl	8002cf2 <DS1307_GetMinute>
 80026ca:	7060      	strb	r0, [r4, #1]
	timedata.hour	= DS1307_GetHour();
 80026cc:	f000 fb08 	bl	8002ce0 <DS1307_GetHour>
 80026d0:	70a0      	strb	r0, [r4, #2]
	timedata.date	= DS1307_GetDate();
 80026d2:	f000 fae5 	bl	8002ca0 <DS1307_GetDate>
 80026d6:	70e0      	strb	r0, [r4, #3]
	timedata.month	= DS1307_GetMonth();
 80026d8:	f000 fae9 	bl	8002cae <DS1307_GetMonth>
 80026dc:	7120      	strb	r0, [r4, #4]
	timedata.year	= DS1307_GetYear();
 80026de:	f000 faed 	bl	8002cbc <DS1307_GetYear>
 80026e2:	80e0      	strh	r0, [r4, #6]
	if(page_properties.page_list == page_setting_date)
 80026e4:	4b08      	ldr	r3, [pc, #32]	; (8002708 <rtc_handle+0x4c>)
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	2b03      	cmp	r3, #3
 80026ea:	d004      	beq.n	80026f6 <rtc_handle+0x3a>
	if(page_properties.page_list == page_setting_time)
 80026ec:	4b06      	ldr	r3, [pc, #24]	; (8002708 <rtc_handle+0x4c>)
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	2b04      	cmp	r3, #4
 80026f2:	d003      	beq.n	80026fc <rtc_handle+0x40>
}
 80026f4:	bd10      	pop	{r4, pc}
		rtc_InstalDataEncoder();
 80026f6:	f7ff fee7 	bl	80024c8 <rtc_InstalDataEncoder>
 80026fa:	e7f7      	b.n	80026ec <rtc_handle+0x30>
		rtc_InstalTimeEncoder();
 80026fc:	f7ff ff70 	bl	80025e0 <rtc_InstalTimeEncoder>
}
 8002700:	e7f8      	b.n	80026f4 <rtc_handle+0x38>
 8002702:	bf00      	nop
 8002704:	200005a8 	.word	0x200005a8
 8002708:	20000264 	.word	0x20000264

0800270c <sensors_Init>:
/* Private function prototypes -----------------------------------------------*/


/* Private user code ---------------------------------------------------------*/
void sensors_Init(void)
{
 800270c:	b508      	push	{r3, lr}
	BME280_sensor.temperature = 0.0f;
 800270e:	4b04      	ldr	r3, [pc, #16]	; (8002720 <sensors_Init+0x14>)
 8002710:	2200      	movs	r2, #0
 8002712:	601a      	str	r2, [r3, #0]
	BME280_sensor.pressure = 0.0f;
 8002714:	605a      	str	r2, [r3, #4]
	BME280_sensor.humidity = 0.0f;
 8002716:	609a      	str	r2, [r3, #8]
	BME280_Init();
 8002718:	f7fe ffe4 	bl	80016e4 <BME280_Init>
}
 800271c:	bd08      	pop	{r3, pc}
 800271e:	bf00      	nop
 8002720:	200005b0 	.word	0x200005b0

08002724 <sensors_Handle>:

void sensors_Handle(void)
{
 8002724:	b510      	push	{r4, lr}
	BME280_sensor.temperature = BME280_ReadTemperature();
 8002726:	f7fe fe71 	bl	800140c <BME280_ReadTemperature>
 800272a:	4c03      	ldr	r4, [pc, #12]	; (8002738 <sensors_Handle+0x14>)
 800272c:	6020      	str	r0, [r4, #0]
	BME280_sensor.pressure = BME280_ReadPressure();
 800272e:	f7fe fe9f 	bl	8001470 <BME280_ReadPressure>
 8002732:	6060      	str	r0, [r4, #4]

}
 8002734:	bd10      	pop	{r4, pc}
 8002736:	bf00      	nop
 8002738:	200005b0 	.word	0x200005b0

0800273c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800273c:	b500      	push	{lr}
 800273e:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002740:	4b11      	ldr	r3, [pc, #68]	; (8002788 <HAL_MspInit+0x4c>)
 8002742:	699a      	ldr	r2, [r3, #24]
 8002744:	f042 0201 	orr.w	r2, r2, #1
 8002748:	619a      	str	r2, [r3, #24]
 800274a:	699a      	ldr	r2, [r3, #24]
 800274c:	f002 0201 	and.w	r2, r2, #1
 8002750:	9200      	str	r2, [sp, #0]
 8002752:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002754:	69da      	ldr	r2, [r3, #28]
 8002756:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800275a:	61da      	str	r2, [r3, #28]
 800275c:	69db      	ldr	r3, [r3, #28]
 800275e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002762:	9301      	str	r3, [sp, #4]
 8002764:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002766:	2200      	movs	r2, #0
 8002768:	210f      	movs	r1, #15
 800276a:	f06f 0001 	mvn.w	r0, #1
 800276e:	f000 fef5 	bl	800355c <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002772:	4a06      	ldr	r2, [pc, #24]	; (800278c <HAL_MspInit+0x50>)
 8002774:	6853      	ldr	r3, [r2, #4]
 8002776:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800277a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800277e:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002780:	b003      	add	sp, #12
 8002782:	f85d fb04 	ldr.w	pc, [sp], #4
 8002786:	bf00      	nop
 8002788:	40021000 	.word	0x40021000
 800278c:	40010000 	.word	0x40010000

08002790 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002790:	b500      	push	{lr}
 8002792:	b089      	sub	sp, #36	; 0x24
 8002794:	4601      	mov	r1, r0
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8002796:	2200      	movs	r2, #0
 8002798:	201e      	movs	r0, #30
 800279a:	f000 fedf 	bl	800355c <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800279e:	201e      	movs	r0, #30
 80027a0:	f000 ff12 	bl	80035c8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80027a4:	4b15      	ldr	r3, [pc, #84]	; (80027fc <HAL_InitTick+0x6c>)
 80027a6:	69da      	ldr	r2, [r3, #28]
 80027a8:	f042 0204 	orr.w	r2, r2, #4
 80027ac:	61da      	str	r2, [r3, #28]
 80027ae:	69db      	ldr	r3, [r3, #28]
 80027b0:	f003 0304 	and.w	r3, r3, #4
 80027b4:	9301      	str	r3, [sp, #4]
 80027b6:	9b01      	ldr	r3, [sp, #4]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80027b8:	a902      	add	r1, sp, #8
 80027ba:	a803      	add	r0, sp, #12
 80027bc:	f003 fc80 	bl	80060c0 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80027c0:	f003 fc5e 	bl	8006080 <HAL_RCC_GetPCLK1Freq>
 80027c4:	4603      	mov	r3, r0
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80027c6:	480e      	ldr	r0, [pc, #56]	; (8002800 <HAL_InitTick+0x70>)
 80027c8:	4a0e      	ldr	r2, [pc, #56]	; (8002804 <HAL_InitTick+0x74>)
 80027ca:	6002      	str	r2, [r0, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80027cc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80027d0:	60c2      	str	r2, [r0, #12]
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80027d2:	005b      	lsls	r3, r3, #1
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80027d4:	4a0c      	ldr	r2, [pc, #48]	; (8002808 <HAL_InitTick+0x78>)
 80027d6:	fba2 2303 	umull	r2, r3, r2, r3
 80027da:	0c9b      	lsrs	r3, r3, #18
 80027dc:	3b01      	subs	r3, #1
  htim4.Init.Prescaler = uwPrescalerValue;
 80027de:	6043      	str	r3, [r0, #4]
  htim4.Init.ClockDivision = 0;
 80027e0:	2300      	movs	r3, #0
 80027e2:	6103      	str	r3, [r0, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027e4:	6083      	str	r3, [r0, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 80027e6:	f003 fdcf 	bl	8006388 <HAL_TIM_Base_Init>
 80027ea:	b118      	cbz	r0, 80027f4 <HAL_InitTick+0x64>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
  }

  /* Return function status */
  return HAL_ERROR;
 80027ec:	2001      	movs	r0, #1
}
 80027ee:	b009      	add	sp, #36	; 0x24
 80027f0:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_TIM_Base_Start_IT(&htim4);
 80027f4:	4802      	ldr	r0, [pc, #8]	; (8002800 <HAL_InitTick+0x70>)
 80027f6:	f003 fc83 	bl	8006100 <HAL_TIM_Base_Start_IT>
 80027fa:	e7f8      	b.n	80027ee <HAL_InitTick+0x5e>
 80027fc:	40021000 	.word	0x40021000
 8002800:	200005bc 	.word	0x200005bc
 8002804:	40000800 	.word	0x40000800
 8002808:	431bde83 	.word	0x431bde83

0800280c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800280c:	e7fe      	b.n	800280c <NMI_Handler>

0800280e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800280e:	e7fe      	b.n	800280e <HardFault_Handler>

08002810 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002810:	e7fe      	b.n	8002810 <MemManage_Handler>

08002812 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002812:	e7fe      	b.n	8002812 <BusFault_Handler>

08002814 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002814:	e7fe      	b.n	8002814 <UsageFault_Handler>

08002816 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002816:	4770      	bx	lr

08002818 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002818:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800281a:	4802      	ldr	r0, [pc, #8]	; (8002824 <TIM4_IRQHandler+0xc>)
 800281c:	f003 fca8 	bl	8006170 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002820:	bd08      	pop	{r3, pc}
 8002822:	bf00      	nop
 8002824:	200005bc 	.word	0x200005bc

08002828 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002828:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800282a:	4802      	ldr	r0, [pc, #8]	; (8002834 <I2C1_EV_IRQHandler+0xc>)
 800282c:	f002 faec 	bl	8004e08 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002830:	bd08      	pop	{r3, pc}
 8002832:	bf00      	nop
 8002834:	200004f0 	.word	0x200004f0

08002838 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002838:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800283a:	4802      	ldr	r0, [pc, #8]	; (8002844 <I2C1_ER_IRQHandler+0xc>)
 800283c:	f003 f850 	bl	80058e0 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002840:	bd08      	pop	{r3, pc}
 8002842:	bf00      	nop
 8002844:	200004f0 	.word	0x200004f0

08002848 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002848:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800284a:	4802      	ldr	r0, [pc, #8]	; (8002854 <USART1_IRQHandler+0xc>)
 800284c:	f004 f872 	bl	8006934 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002850:	bd08      	pop	{r3, pc}
 8002852:	bf00      	nop
 8002854:	20000690 	.word	0x20000690

08002858 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8002858:	2001      	movs	r0, #1
 800285a:	4770      	bx	lr

0800285c <_kill>:

int _kill(int pid, int sig)
{
 800285c:	b508      	push	{r3, lr}
	errno = EINVAL;
 800285e:	f006 ff3b 	bl	80096d8 <__errno>
 8002862:	2316      	movs	r3, #22
 8002864:	6003      	str	r3, [r0, #0]
	return -1;
}
 8002866:	f04f 30ff 	mov.w	r0, #4294967295
 800286a:	bd08      	pop	{r3, pc}

0800286c <_exit>:

void _exit (int status)
{
 800286c:	b508      	push	{r3, lr}
	errno = EINVAL;
 800286e:	f006 ff33 	bl	80096d8 <__errno>
 8002872:	2316      	movs	r3, #22
 8002874:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8002876:	e7fe      	b.n	8002876 <_exit+0xa>

08002878 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002878:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800287a:	1e16      	subs	r6, r2, #0
 800287c:	dd07      	ble.n	800288e <_read+0x16>
 800287e:	460c      	mov	r4, r1
 8002880:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 8002882:	f3af 8000 	nop.w
 8002886:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800288a:	42a5      	cmp	r5, r4
 800288c:	d1f9      	bne.n	8002882 <_read+0xa>
	}

return len;
}
 800288e:	4630      	mov	r0, r6
 8002890:	bd70      	pop	{r4, r5, r6, pc}

08002892 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002892:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002894:	1e16      	subs	r6, r2, #0
 8002896:	dd07      	ble.n	80028a8 <_write+0x16>
 8002898:	460c      	mov	r4, r1
 800289a:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 800289c:	f814 0b01 	ldrb.w	r0, [r4], #1
 80028a0:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028a4:	42a5      	cmp	r5, r4
 80028a6:	d1f9      	bne.n	800289c <_write+0xa>
	}
	return len;
}
 80028a8:	4630      	mov	r0, r6
 80028aa:	bd70      	pop	{r4, r5, r6, pc}

080028ac <_close>:

int _close(int file)
{
	return -1;
}
 80028ac:	f04f 30ff 	mov.w	r0, #4294967295
 80028b0:	4770      	bx	lr

080028b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80028b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80028b6:	604b      	str	r3, [r1, #4]
	return 0;
}
 80028b8:	2000      	movs	r0, #0
 80028ba:	4770      	bx	lr

080028bc <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80028bc:	2001      	movs	r0, #1
 80028be:	4770      	bx	lr

080028c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80028c0:	2000      	movs	r0, #0
 80028c2:	4770      	bx	lr

080028c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028c4:	b508      	push	{r3, lr}
 80028c6:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028c8:	4a0c      	ldr	r2, [pc, #48]	; (80028fc <_sbrk+0x38>)
 80028ca:	6812      	ldr	r2, [r2, #0]
 80028cc:	b152      	cbz	r2, 80028e4 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028ce:	4a0b      	ldr	r2, [pc, #44]	; (80028fc <_sbrk+0x38>)
 80028d0:	6810      	ldr	r0, [r2, #0]
 80028d2:	4403      	add	r3, r0
 80028d4:	4a0a      	ldr	r2, [pc, #40]	; (8002900 <_sbrk+0x3c>)
 80028d6:	490b      	ldr	r1, [pc, #44]	; (8002904 <_sbrk+0x40>)
 80028d8:	1a52      	subs	r2, r2, r1
 80028da:	4293      	cmp	r3, r2
 80028dc:	d806      	bhi.n	80028ec <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80028de:	4a07      	ldr	r2, [pc, #28]	; (80028fc <_sbrk+0x38>)
 80028e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 80028e2:	bd08      	pop	{r3, pc}
    __sbrk_heap_end = &_end;
 80028e4:	4a05      	ldr	r2, [pc, #20]	; (80028fc <_sbrk+0x38>)
 80028e6:	4908      	ldr	r1, [pc, #32]	; (8002908 <_sbrk+0x44>)
 80028e8:	6011      	str	r1, [r2, #0]
 80028ea:	e7f0      	b.n	80028ce <_sbrk+0xa>
    errno = ENOMEM;
 80028ec:	f006 fef4 	bl	80096d8 <__errno>
 80028f0:	230c      	movs	r3, #12
 80028f2:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80028f4:	f04f 30ff 	mov.w	r0, #4294967295
 80028f8:	e7f3      	b.n	80028e2 <_sbrk+0x1e>
 80028fa:	bf00      	nop
 80028fc:	20000604 	.word	0x20000604
 8002900:	20005000 	.word	0x20005000
 8002904:	00000400 	.word	0x00000400
 8002908:	20002938 	.word	0x20002938

0800290c <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800290c:	4770      	bx	lr
	...

08002910 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002910:	b500      	push	{lr}
 8002912:	b08d      	sub	sp, #52	; 0x34

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002914:	2300      	movs	r3, #0
 8002916:	9306      	str	r3, [sp, #24]
 8002918:	930a      	str	r3, [sp, #40]	; 0x28
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800291a:	9301      	str	r3, [sp, #4]
 800291c:	9302      	str	r3, [sp, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800291e:	4814      	ldr	r0, [pc, #80]	; (8002970 <MX_TIM3_Init+0x60>)
 8002920:	4a14      	ldr	r2, [pc, #80]	; (8002974 <MX_TIM3_Init+0x64>)
 8002922:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 0;
 8002924:	6043      	str	r3, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002926:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 1000;
 8002928:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800292c:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800292e:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002930:	6183      	str	r3, [r0, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002932:	2301      	movs	r3, #1
 8002934:	9303      	str	r3, [sp, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8002936:	2102      	movs	r1, #2
 8002938:	9104      	str	r1, [sp, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800293a:	9305      	str	r3, [sp, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC1Filter = 6;
 800293c:	2206      	movs	r2, #6
 800293e:	9207      	str	r2, [sp, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8002940:	9108      	str	r1, [sp, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002942:	9309      	str	r3, [sp, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC2Filter = 6;
 8002944:	920b      	str	r2, [sp, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002946:	a903      	add	r1, sp, #12
 8002948:	f003 fd4a 	bl	80063e0 <HAL_TIM_Encoder_Init>
 800294c:	b950      	cbnz	r0, 8002964 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800294e:	2300      	movs	r3, #0
 8002950:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002952:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002954:	a901      	add	r1, sp, #4
 8002956:	4806      	ldr	r0, [pc, #24]	; (8002970 <MX_TIM3_Init+0x60>)
 8002958:	f003 fe7a 	bl	8006650 <HAL_TIMEx_MasterConfigSynchronization>
 800295c:	b928      	cbnz	r0, 800296a <MX_TIM3_Init+0x5a>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800295e:	b00d      	add	sp, #52	; 0x34
 8002960:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8002964:	f7ff fd50 	bl	8002408 <Error_Handler>
 8002968:	e7f1      	b.n	800294e <MX_TIM3_Init+0x3e>
    Error_Handler();
 800296a:	f7ff fd4d 	bl	8002408 <Error_Handler>
}
 800296e:	e7f6      	b.n	800295e <MX_TIM3_Init+0x4e>
 8002970:	20000608 	.word	0x20000608
 8002974:	40000400 	.word	0x40000400

08002978 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002978:	b500      	push	{lr}
 800297a:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800297c:	2300      	movs	r3, #0
 800297e:	9302      	str	r3, [sp, #8]
 8002980:	9303      	str	r3, [sp, #12]
 8002982:	9304      	str	r3, [sp, #16]
 8002984:	9305      	str	r3, [sp, #20]
  if(tim_encoderHandle->Instance==TIM3)
 8002986:	6802      	ldr	r2, [r0, #0]
 8002988:	4b13      	ldr	r3, [pc, #76]	; (80029d8 <HAL_TIM_Encoder_MspInit+0x60>)
 800298a:	429a      	cmp	r2, r3
 800298c:	d002      	beq.n	8002994 <HAL_TIM_Encoder_MspInit+0x1c>
  /* USER CODE BEGIN TIM3_MspInit 1 */
    HAL_TIM_Encoder_Start_IT(&htim3,TIM_CHANNEL_2);

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800298e:	b007      	add	sp, #28
 8002990:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002994:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 8002998:	69da      	ldr	r2, [r3, #28]
 800299a:	f042 0202 	orr.w	r2, r2, #2
 800299e:	61da      	str	r2, [r3, #28]
 80029a0:	69da      	ldr	r2, [r3, #28]
 80029a2:	f002 0202 	and.w	r2, r2, #2
 80029a6:	9200      	str	r2, [sp, #0]
 80029a8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029aa:	699a      	ldr	r2, [r3, #24]
 80029ac:	f042 0204 	orr.w	r2, r2, #4
 80029b0:	619a      	str	r2, [r3, #24]
 80029b2:	699b      	ldr	r3, [r3, #24]
 80029b4:	f003 0304 	and.w	r3, r3, #4
 80029b8:	9301      	str	r3, [sp, #4]
 80029ba:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80029bc:	23c0      	movs	r3, #192	; 0xc0
 80029be:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029c0:	2301      	movs	r3, #1
 80029c2:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029c4:	a902      	add	r1, sp, #8
 80029c6:	4805      	ldr	r0, [pc, #20]	; (80029dc <HAL_TIM_Encoder_MspInit+0x64>)
 80029c8:	f000 fe7e 	bl	80036c8 <HAL_GPIO_Init>
    HAL_TIM_Encoder_Start_IT(&htim3,TIM_CHANNEL_2);
 80029cc:	2104      	movs	r1, #4
 80029ce:	4804      	ldr	r0, [pc, #16]	; (80029e0 <HAL_TIM_Encoder_MspInit+0x68>)
 80029d0:	f003 fdcb 	bl	800656a <HAL_TIM_Encoder_Start_IT>
}
 80029d4:	e7db      	b.n	800298e <HAL_TIM_Encoder_MspInit+0x16>
 80029d6:	bf00      	nop
 80029d8:	40000400 	.word	0x40000400
 80029dc:	40010800 	.word	0x40010800
 80029e0:	20000608 	.word	0x20000608

080029e4 <uart_pc_handle>:

/* Private user code ---------------------------------------------------------*/
void uart_pc_init 	(void)
{}
void uart_pc_handle	(void)
{
 80029e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80029e8:	b088      	sub	sp, #32

	sprintf((char*)data,	"%02d:%02d:%02d %02d.%02d.%02d %.2f %.2f   \n\r", 	timedata.hour,
																				timedata.min,
 80029ea:	4c13      	ldr	r4, [pc, #76]	; (8002a38 <uart_pc_handle+0x54>)
	sprintf((char*)data,	"%02d:%02d:%02d %02d.%02d.%02d %.2f %.2f   \n\r", 	timedata.hour,
 80029ec:	f894 8001 	ldrb.w	r8, [r4, #1]
 80029f0:	78a7      	ldrb	r7, [r4, #2]
 80029f2:	4d12      	ldr	r5, [pc, #72]	; (8002a3c <uart_pc_handle+0x58>)
																				timedata.sec,
																				timedata.date,
																				timedata.month,
																				timedata.year,
																				BME280_sensor.temperature,
																				BME280_sensor.pressure
 80029f4:	4e12      	ldr	r6, [pc, #72]	; (8002a40 <uart_pc_handle+0x5c>)
	sprintf((char*)data,	"%02d:%02d:%02d %02d.%02d.%02d %.2f %.2f   \n\r", 	timedata.hour,
 80029f6:	6870      	ldr	r0, [r6, #4]
 80029f8:	f7fd fd20 	bl	800043c <__aeabi_f2d>
 80029fc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8002a00:	6830      	ldr	r0, [r6, #0]
 8002a02:	f7fd fd1b 	bl	800043c <__aeabi_f2d>
 8002a06:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002a0a:	88e3      	ldrh	r3, [r4, #6]
 8002a0c:	9303      	str	r3, [sp, #12]
 8002a0e:	7923      	ldrb	r3, [r4, #4]
 8002a10:	9302      	str	r3, [sp, #8]
 8002a12:	78e3      	ldrb	r3, [r4, #3]
 8002a14:	9301      	str	r3, [sp, #4]
 8002a16:	7823      	ldrb	r3, [r4, #0]
 8002a18:	9300      	str	r3, [sp, #0]
 8002a1a:	4643      	mov	r3, r8
 8002a1c:	463a      	mov	r2, r7
 8002a1e:	4909      	ldr	r1, [pc, #36]	; (8002a44 <uart_pc_handle+0x60>)
 8002a20:	4628      	mov	r0, r5
 8002a22:	f006 fd5f 	bl	80094e4 <siprintf>
//	data[2] = timedata.sec;
//	data[3] = timedata.date;
//	data[4] = timedata.month;
//	data[5] = timedata.year;

	HAL_UART_Transmit_IT(&huart2, data, sizeof(data));
 8002a26:	2240      	movs	r2, #64	; 0x40
 8002a28:	4629      	mov	r1, r5
 8002a2a:	4807      	ldr	r0, [pc, #28]	; (8002a48 <uart_pc_handle+0x64>)
 8002a2c:	f003 feea 	bl	8006804 <HAL_UART_Transmit_IT>
}
 8002a30:	b008      	add	sp, #32
 8002a32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002a36:	bf00      	nop
 8002a38:	200005a8 	.word	0x200005a8
 8002a3c:	20000650 	.word	0x20000650
 8002a40:	200005b0 	.word	0x200005b0
 8002a44:	0800c310 	.word	0x0800c310
 8002a48:	200006d8 	.word	0x200006d8

08002a4c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002a4c:	b508      	push	{r3, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002a4e:	480a      	ldr	r0, [pc, #40]	; (8002a78 <MX_USART1_UART_Init+0x2c>)
 8002a50:	4b0a      	ldr	r3, [pc, #40]	; (8002a7c <MX_USART1_UART_Init+0x30>)
 8002a52:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 9600;
 8002a54:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8002a58:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002a5e:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002a60:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002a62:	220c      	movs	r2, #12
 8002a64:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a66:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a68:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002a6a:	f003 fe9b 	bl	80067a4 <HAL_UART_Init>
 8002a6e:	b900      	cbnz	r0, 8002a72 <MX_USART1_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002a70:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002a72:	f7ff fcc9 	bl	8002408 <Error_Handler>
}
 8002a76:	e7fb      	b.n	8002a70 <MX_USART1_UART_Init+0x24>
 8002a78:	20000690 	.word	0x20000690
 8002a7c:	40013800 	.word	0x40013800

08002a80 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002a80:	b508      	push	{r3, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002a82:	480a      	ldr	r0, [pc, #40]	; (8002aac <MX_USART2_UART_Init+0x2c>)
 8002a84:	4b0a      	ldr	r3, [pc, #40]	; (8002ab0 <MX_USART2_UART_Init+0x30>)
 8002a86:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 9600;
 8002a88:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8002a8c:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002a92:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002a94:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002a96:	220c      	movs	r2, #12
 8002a98:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a9a:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a9c:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002a9e:	f003 fe81 	bl	80067a4 <HAL_UART_Init>
 8002aa2:	b900      	cbnz	r0, 8002aa6 <MX_USART2_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002aa4:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002aa6:	f7ff fcaf 	bl	8002408 <Error_Handler>
}
 8002aaa:	e7fb      	b.n	8002aa4 <MX_USART2_UART_Init+0x24>
 8002aac:	200006d8 	.word	0x200006d8
 8002ab0:	40004400 	.word	0x40004400

08002ab4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002ab4:	b530      	push	{r4, r5, lr}
 8002ab6:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ab8:	2300      	movs	r3, #0
 8002aba:	9304      	str	r3, [sp, #16]
 8002abc:	9305      	str	r3, [sp, #20]
 8002abe:	9306      	str	r3, [sp, #24]
 8002ac0:	9307      	str	r3, [sp, #28]
  if(uartHandle->Instance==USART1)
 8002ac2:	6803      	ldr	r3, [r0, #0]
 8002ac4:	4a30      	ldr	r2, [pc, #192]	; (8002b88 <HAL_UART_MspInit+0xd4>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d004      	beq.n	8002ad4 <HAL_UART_MspInit+0x20>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(uartHandle->Instance==USART2)
 8002aca:	4a30      	ldr	r2, [pc, #192]	; (8002b8c <HAL_UART_MspInit+0xd8>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d033      	beq.n	8002b38 <HAL_UART_MspInit+0x84>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002ad0:	b009      	add	sp, #36	; 0x24
 8002ad2:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8002ad4:	4b2e      	ldr	r3, [pc, #184]	; (8002b90 <HAL_UART_MspInit+0xdc>)
 8002ad6:	699a      	ldr	r2, [r3, #24]
 8002ad8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002adc:	619a      	str	r2, [r3, #24]
 8002ade:	699a      	ldr	r2, [r3, #24]
 8002ae0:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002ae4:	9200      	str	r2, [sp, #0]
 8002ae6:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ae8:	699a      	ldr	r2, [r3, #24]
 8002aea:	f042 0204 	orr.w	r2, r2, #4
 8002aee:	619a      	str	r2, [r3, #24]
 8002af0:	699b      	ldr	r3, [r3, #24]
 8002af2:	f003 0304 	and.w	r3, r3, #4
 8002af6:	9301      	str	r3, [sp, #4]
 8002af8:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002afa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002afe:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b00:	2302      	movs	r3, #2
 8002b02:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b04:	2303      	movs	r3, #3
 8002b06:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b08:	4d22      	ldr	r5, [pc, #136]	; (8002b94 <HAL_UART_MspInit+0xe0>)
 8002b0a:	a904      	add	r1, sp, #16
 8002b0c:	4628      	mov	r0, r5
 8002b0e:	f000 fddb 	bl	80036c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002b12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b16:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b18:	2400      	movs	r4, #0
 8002b1a:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b1c:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b1e:	a904      	add	r1, sp, #16
 8002b20:	4628      	mov	r0, r5
 8002b22:	f000 fdd1 	bl	80036c8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002b26:	4622      	mov	r2, r4
 8002b28:	2105      	movs	r1, #5
 8002b2a:	2025      	movs	r0, #37	; 0x25
 8002b2c:	f000 fd16 	bl	800355c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002b30:	2025      	movs	r0, #37	; 0x25
 8002b32:	f000 fd49 	bl	80035c8 <HAL_NVIC_EnableIRQ>
 8002b36:	e7cb      	b.n	8002ad0 <HAL_UART_MspInit+0x1c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b38:	4b15      	ldr	r3, [pc, #84]	; (8002b90 <HAL_UART_MspInit+0xdc>)
 8002b3a:	69da      	ldr	r2, [r3, #28]
 8002b3c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002b40:	61da      	str	r2, [r3, #28]
 8002b42:	69da      	ldr	r2, [r3, #28]
 8002b44:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8002b48:	9202      	str	r2, [sp, #8]
 8002b4a:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b4c:	699a      	ldr	r2, [r3, #24]
 8002b4e:	f042 0204 	orr.w	r2, r2, #4
 8002b52:	619a      	str	r2, [r3, #24]
 8002b54:	699b      	ldr	r3, [r3, #24]
 8002b56:	f003 0304 	and.w	r3, r3, #4
 8002b5a:	9303      	str	r3, [sp, #12]
 8002b5c:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002b5e:	2304      	movs	r3, #4
 8002b60:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b62:	2302      	movs	r3, #2
 8002b64:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b66:	2303      	movs	r3, #3
 8002b68:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b6a:	4c0a      	ldr	r4, [pc, #40]	; (8002b94 <HAL_UART_MspInit+0xe0>)
 8002b6c:	a904      	add	r1, sp, #16
 8002b6e:	4620      	mov	r0, r4
 8002b70:	f000 fdaa 	bl	80036c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002b74:	2308      	movs	r3, #8
 8002b76:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b7c:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b7e:	a904      	add	r1, sp, #16
 8002b80:	4620      	mov	r0, r4
 8002b82:	f000 fda1 	bl	80036c8 <HAL_GPIO_Init>
}
 8002b86:	e7a3      	b.n	8002ad0 <HAL_UART_MspInit+0x1c>
 8002b88:	40013800 	.word	0x40013800
 8002b8c:	40004400 	.word	0x40004400
 8002b90:	40021000 	.word	0x40021000
 8002b94:	40010800 	.word	0x40010800

08002b98 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002b98:	f7ff feb8 	bl	800290c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b9c:	480b      	ldr	r0, [pc, #44]	; (8002bcc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002b9e:	490c      	ldr	r1, [pc, #48]	; (8002bd0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002ba0:	4a0c      	ldr	r2, [pc, #48]	; (8002bd4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002ba2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ba4:	e002      	b.n	8002bac <LoopCopyDataInit>

08002ba6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ba6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ba8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002baa:	3304      	adds	r3, #4

08002bac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002bac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002bae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002bb0:	d3f9      	bcc.n	8002ba6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002bb2:	4a09      	ldr	r2, [pc, #36]	; (8002bd8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002bb4:	4c09      	ldr	r4, [pc, #36]	; (8002bdc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002bb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002bb8:	e001      	b.n	8002bbe <LoopFillZerobss>

08002bba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002bba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002bbc:	3204      	adds	r2, #4

08002bbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002bbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002bc0:	d3fb      	bcc.n	8002bba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002bc2:	f006 fd8f 	bl	80096e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002bc6:	f7ff fbf6 	bl	80023b6 <main>
  bx lr
 8002bca:	4770      	bx	lr
  ldr r0, =_sdata
 8002bcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002bd0:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002bd4:	0800cf1c 	.word	0x0800cf1c
  ldr r2, =_sbss
 8002bd8:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002bdc:	20002934 	.word	0x20002934

08002be0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002be0:	e7fe      	b.n	8002be0 <ADC1_2_IRQHandler>
	...

08002be4 <DS1307_SetRegByte>:
/**
 * @brief Sets the byte in the designated DS1307 register to value.
 * @param regAddr Register address to write.
 * @param val Value to set, 0 to 255.
 */
void DS1307_SetRegByte(uint8_t regAddr, uint8_t val) {
 8002be4:	b500      	push	{lr}
 8002be6:	b085      	sub	sp, #20
	uint8_t bytes[2] = { regAddr, val };
 8002be8:	f88d 000c 	strb.w	r0, [sp, #12]
 8002bec:	f88d 100d 	strb.w	r1, [sp, #13]
	HAL_I2C_Master_Transmit(_ds1307_ui2c, DS1307_I2C_ADDR << 1, bytes, 2, DS1307_TIMEOUT);
 8002bf0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002bf4:	9300      	str	r3, [sp, #0]
 8002bf6:	2302      	movs	r3, #2
 8002bf8:	aa03      	add	r2, sp, #12
 8002bfa:	21d0      	movs	r1, #208	; 0xd0
 8002bfc:	4803      	ldr	r0, [pc, #12]	; (8002c0c <DS1307_SetRegByte+0x28>)
 8002bfe:	6800      	ldr	r0, [r0, #0]
 8002c00:	f001 f9e0 	bl	8003fc4 <HAL_I2C_Master_Transmit>
}
 8002c04:	b005      	add	sp, #20
 8002c06:	f85d fb04 	ldr.w	pc, [sp], #4
 8002c0a:	bf00      	nop
 8002c0c:	20000720 	.word	0x20000720

08002c10 <DS1307_GetRegByte>:
/**
 * @brief Gets the byte in the designated DS1307 register.
 * @param regAddr Register address to read.
 * @return Value stored in the register, 0 to 255.
 */
uint8_t DS1307_GetRegByte(uint8_t regAddr) {
 8002c10:	b530      	push	{r4, r5, lr}
 8002c12:	b087      	sub	sp, #28
 8002c14:	f88d 000f 	strb.w	r0, [sp, #15]
	uint8_t val;
	HAL_I2C_Master_Transmit(_ds1307_ui2c, DS1307_I2C_ADDR << 1, &regAddr, 1, DS1307_TIMEOUT);
 8002c18:	4c0b      	ldr	r4, [pc, #44]	; (8002c48 <DS1307_GetRegByte+0x38>)
 8002c1a:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8002c1e:	9500      	str	r5, [sp, #0]
 8002c20:	2301      	movs	r3, #1
 8002c22:	f10d 020f 	add.w	r2, sp, #15
 8002c26:	21d0      	movs	r1, #208	; 0xd0
 8002c28:	6820      	ldr	r0, [r4, #0]
 8002c2a:	f001 f9cb 	bl	8003fc4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_ds1307_ui2c, DS1307_I2C_ADDR << 1, &val, 1, DS1307_TIMEOUT);
 8002c2e:	9500      	str	r5, [sp, #0]
 8002c30:	2301      	movs	r3, #1
 8002c32:	f10d 0217 	add.w	r2, sp, #23
 8002c36:	21d0      	movs	r1, #208	; 0xd0
 8002c38:	6820      	ldr	r0, [r4, #0]
 8002c3a:	f001 fac7 	bl	80041cc <HAL_I2C_Master_Receive>
	return val;
}
 8002c3e:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8002c42:	b007      	add	sp, #28
 8002c44:	bd30      	pop	{r4, r5, pc}
 8002c46:	bf00      	nop
 8002c48:	20000720 	.word	0x20000720

08002c4c <DS1307_SetClockHalt>:
void DS1307_SetClockHalt(uint8_t halt) {
 8002c4c:	b510      	push	{r4, lr}
 8002c4e:	4604      	mov	r4, r0
	DS1307_SetRegByte(DS1307_REG_SECOND, ch | (DS1307_GetRegByte(DS1307_REG_SECOND) & 0x7f));
 8002c50:	2000      	movs	r0, #0
 8002c52:	f7ff ffdd 	bl	8002c10 <DS1307_GetRegByte>
	uint8_t ch = (halt ? 1 << 7 : 0);
 8002c56:	3c00      	subs	r4, #0
 8002c58:	bf18      	it	ne
 8002c5a:	2401      	movne	r4, #1
	DS1307_SetRegByte(DS1307_REG_SECOND, ch | (DS1307_GetRegByte(DS1307_REG_SECOND) & 0x7f));
 8002c5c:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 8002c60:	ea41 11c4 	orr.w	r1, r1, r4, lsl #7
 8002c64:	2000      	movs	r0, #0
 8002c66:	f7ff ffbd 	bl	8002be4 <DS1307_SetRegByte>
}
 8002c6a:	bd10      	pop	{r4, pc}

08002c6c <DS1307_Init>:
void DS1307_Init(I2C_HandleTypeDef *hi2c) {
 8002c6c:	b508      	push	{r3, lr}
	_ds1307_ui2c = hi2c;
 8002c6e:	4b03      	ldr	r3, [pc, #12]	; (8002c7c <DS1307_Init+0x10>)
 8002c70:	6018      	str	r0, [r3, #0]
	DS1307_SetClockHalt(0);
 8002c72:	2000      	movs	r0, #0
 8002c74:	f7ff ffea 	bl	8002c4c <DS1307_SetClockHalt>
}
 8002c78:	bd08      	pop	{r3, pc}
 8002c7a:	bf00      	nop
 8002c7c:	20000720 	.word	0x20000720

08002c80 <DS1307_GetClockHalt>:
uint8_t DS1307_GetClockHalt(void) {
 8002c80:	b508      	push	{r3, lr}
	return (DS1307_GetRegByte(DS1307_REG_SECOND) & 0x80) >> 7;
 8002c82:	2000      	movs	r0, #0
 8002c84:	f7ff ffc4 	bl	8002c10 <DS1307_GetRegByte>
}
 8002c88:	f3c0 10c7 	ubfx	r0, r0, #7, #8
 8002c8c:	bd08      	pop	{r3, pc}

08002c8e <DS1307_DecodeBCD>:
 * @brief Decodes the raw binary value stored in registers to decimal format.
 * @param bin Binary-coded decimal value retrieved from register, 0 to 255.
 * @return Decoded decimal value.
 */
uint8_t DS1307_DecodeBCD(uint8_t bin) {
	return (((bin & 0xf0) >> 4) * 10) + (bin & 0x0f);
 8002c8e:	0903      	lsrs	r3, r0, #4
 8002c90:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002c94:	f000 000f 	and.w	r0, r0, #15
 8002c98:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 8002c9c:	b2c0      	uxtb	r0, r0
 8002c9e:	4770      	bx	lr

08002ca0 <DS1307_GetDate>:
uint8_t DS1307_GetDate(void) {
 8002ca0:	b508      	push	{r3, lr}
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_DATE));
 8002ca2:	2004      	movs	r0, #4
 8002ca4:	f7ff ffb4 	bl	8002c10 <DS1307_GetRegByte>
 8002ca8:	f7ff fff1 	bl	8002c8e <DS1307_DecodeBCD>
}
 8002cac:	bd08      	pop	{r3, pc}

08002cae <DS1307_GetMonth>:
uint8_t DS1307_GetMonth(void) {
 8002cae:	b508      	push	{r3, lr}
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_MONTH));
 8002cb0:	2005      	movs	r0, #5
 8002cb2:	f7ff ffad 	bl	8002c10 <DS1307_GetRegByte>
 8002cb6:	f7ff ffea 	bl	8002c8e <DS1307_DecodeBCD>
}
 8002cba:	bd08      	pop	{r3, pc}

08002cbc <DS1307_GetYear>:
uint16_t DS1307_GetYear(void) {
 8002cbc:	b510      	push	{r4, lr}
	uint16_t cen = DS1307_GetRegByte(DS1307_REG_CENT) * 100;
 8002cbe:	2010      	movs	r0, #16
 8002cc0:	f7ff ffa6 	bl	8002c10 <DS1307_GetRegByte>
 8002cc4:	4604      	mov	r4, r0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_YEAR)) + cen;
 8002cc6:	2006      	movs	r0, #6
 8002cc8:	f7ff ffa2 	bl	8002c10 <DS1307_GetRegByte>
 8002ccc:	f7ff ffdf 	bl	8002c8e <DS1307_DecodeBCD>
	uint16_t cen = DS1307_GetRegByte(DS1307_REG_CENT) * 100;
 8002cd0:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8002cd4:	eb04 0484 	add.w	r4, r4, r4, lsl #2
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_YEAR)) + cen;
 8002cd8:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
 8002cdc:	b280      	uxth	r0, r0
 8002cde:	bd10      	pop	{r4, pc}

08002ce0 <DS1307_GetHour>:
uint8_t DS1307_GetHour(void) {
 8002ce0:	b508      	push	{r3, lr}
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_HOUR) & 0x3f);
 8002ce2:	2002      	movs	r0, #2
 8002ce4:	f7ff ff94 	bl	8002c10 <DS1307_GetRegByte>
 8002ce8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8002cec:	f7ff ffcf 	bl	8002c8e <DS1307_DecodeBCD>
}
 8002cf0:	bd08      	pop	{r3, pc}

08002cf2 <DS1307_GetMinute>:
uint8_t DS1307_GetMinute(void) {
 8002cf2:	b508      	push	{r3, lr}
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_MINUTE));
 8002cf4:	2001      	movs	r0, #1
 8002cf6:	f7ff ff8b 	bl	8002c10 <DS1307_GetRegByte>
 8002cfa:	f7ff ffc8 	bl	8002c8e <DS1307_DecodeBCD>
}
 8002cfe:	bd08      	pop	{r3, pc}

08002d00 <DS1307_GetSecond>:
uint8_t DS1307_GetSecond(void) {
 8002d00:	b508      	push	{r3, lr}
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_SECOND) & 0x7f);
 8002d02:	2000      	movs	r0, #0
 8002d04:	f7ff ff84 	bl	8002c10 <DS1307_GetRegByte>
 8002d08:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8002d0c:	f7ff ffbf 	bl	8002c8e <DS1307_DecodeBCD>
}
 8002d10:	bd08      	pop	{r3, pc}
	...

08002d14 <DS1307_EncodeBCD>:
 * @brief Encodes a decimal number to binaty-coded decimal for storage in registers.
 * @param dec Decimal number to encode.
 * @return Encoded binary-coded decimal value.
 */
uint8_t DS1307_EncodeBCD(uint8_t dec) {
	return (dec % 10 + ((dec / 10) << 4));
 8002d14:	4b05      	ldr	r3, [pc, #20]	; (8002d2c <DS1307_EncodeBCD+0x18>)
 8002d16:	fba3 2300 	umull	r2, r3, r3, r0
 8002d1a:	08db      	lsrs	r3, r3, #3
 8002d1c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8002d20:	eba0 0042 	sub.w	r0, r0, r2, lsl #1
 8002d24:	eb00 1003 	add.w	r0, r0, r3, lsl #4
}
 8002d28:	b2c0      	uxtb	r0, r0
 8002d2a:	4770      	bx	lr
 8002d2c:	cccccccd 	.word	0xcccccccd

08002d30 <DS1307_SetDate>:
void DS1307_SetDate(uint8_t date) {
 8002d30:	b508      	push	{r3, lr}
	DS1307_SetRegByte(DS1307_REG_DATE, DS1307_EncodeBCD(date));
 8002d32:	f7ff ffef 	bl	8002d14 <DS1307_EncodeBCD>
 8002d36:	4601      	mov	r1, r0
 8002d38:	2004      	movs	r0, #4
 8002d3a:	f7ff ff53 	bl	8002be4 <DS1307_SetRegByte>
}
 8002d3e:	bd08      	pop	{r3, pc}

08002d40 <DS1307_SetMonth>:
void DS1307_SetMonth(uint8_t month) {
 8002d40:	b508      	push	{r3, lr}
	DS1307_SetRegByte(DS1307_REG_MONTH, DS1307_EncodeBCD(month));
 8002d42:	f7ff ffe7 	bl	8002d14 <DS1307_EncodeBCD>
 8002d46:	4601      	mov	r1, r0
 8002d48:	2005      	movs	r0, #5
 8002d4a:	f7ff ff4b 	bl	8002be4 <DS1307_SetRegByte>
}
 8002d4e:	bd08      	pop	{r3, pc}

08002d50 <DS1307_SetYear>:
void DS1307_SetYear(uint16_t year) {
 8002d50:	b538      	push	{r3, r4, r5, lr}
 8002d52:	4604      	mov	r4, r0
	DS1307_SetRegByte(DS1307_REG_CENT, year / 100);
 8002d54:	4909      	ldr	r1, [pc, #36]	; (8002d7c <DS1307_SetYear+0x2c>)
 8002d56:	fba1 3100 	umull	r3, r1, r1, r0
 8002d5a:	094d      	lsrs	r5, r1, #5
 8002d5c:	f3c1 1147 	ubfx	r1, r1, #5, #8
 8002d60:	2010      	movs	r0, #16
 8002d62:	f7ff ff3f 	bl	8002be4 <DS1307_SetRegByte>
	DS1307_SetRegByte(DS1307_REG_YEAR, DS1307_EncodeBCD(year % 100));
 8002d66:	2364      	movs	r3, #100	; 0x64
 8002d68:	fb03 4015 	mls	r0, r3, r5, r4
 8002d6c:	b2c0      	uxtb	r0, r0
 8002d6e:	f7ff ffd1 	bl	8002d14 <DS1307_EncodeBCD>
 8002d72:	4601      	mov	r1, r0
 8002d74:	2006      	movs	r0, #6
 8002d76:	f7ff ff35 	bl	8002be4 <DS1307_SetRegByte>
}
 8002d7a:	bd38      	pop	{r3, r4, r5, pc}
 8002d7c:	51eb851f 	.word	0x51eb851f

08002d80 <DS1307_SetHour>:
void DS1307_SetHour(uint8_t hour_24mode) {
 8002d80:	b508      	push	{r3, lr}
	DS1307_SetRegByte(DS1307_REG_HOUR, DS1307_EncodeBCD(hour_24mode & 0x3f));
 8002d82:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8002d86:	f7ff ffc5 	bl	8002d14 <DS1307_EncodeBCD>
 8002d8a:	4601      	mov	r1, r0
 8002d8c:	2002      	movs	r0, #2
 8002d8e:	f7ff ff29 	bl	8002be4 <DS1307_SetRegByte>
}
 8002d92:	bd08      	pop	{r3, pc}

08002d94 <DS1307_SetMinute>:
void DS1307_SetMinute(uint8_t minute) {
 8002d94:	b508      	push	{r3, lr}
	DS1307_SetRegByte(DS1307_REG_MINUTE, DS1307_EncodeBCD(minute));
 8002d96:	f7ff ffbd 	bl	8002d14 <DS1307_EncodeBCD>
 8002d9a:	4601      	mov	r1, r0
 8002d9c:	2001      	movs	r0, #1
 8002d9e:	f7ff ff21 	bl	8002be4 <DS1307_SetRegByte>
}
 8002da2:	bd08      	pop	{r3, pc}

08002da4 <DS1307_SetSecond>:
void DS1307_SetSecond(uint8_t second) {
 8002da4:	b510      	push	{r4, lr}
 8002da6:	4604      	mov	r4, r0
	uint8_t ch = DS1307_GetClockHalt();
 8002da8:	f7ff ff6a 	bl	8002c80 <DS1307_GetClockHalt>
	DS1307_SetRegByte(DS1307_REG_SECOND, DS1307_EncodeBCD(second | ch));
 8002dac:	4320      	orrs	r0, r4
 8002dae:	b2c0      	uxtb	r0, r0
 8002db0:	f7ff ffb0 	bl	8002d14 <DS1307_EncodeBCD>
 8002db4:	4601      	mov	r1, r0
 8002db6:	2000      	movs	r0, #0
 8002db8:	f7ff ff14 	bl	8002be4 <DS1307_SetRegByte>
}
 8002dbc:	bd10      	pop	{r4, pc}
	...

08002dc0 <strtoke>:
/*
 * Behaves like strtok() except that it returns empty tokens also.
 * Found on https://stackoverflow.com/questions/42315585/split-string-into-tokens-in-c-when-there-are-2-delimiters-in-a-row
 */
char* strtoke(char *str, const char *delim)
{
 8002dc0:	b510      	push	{r4, lr}
  static char *start = NULL; /* stores string str for consecutive calls */
  char *token = NULL; /* found token */
  /* assign new start in case */
  if (str) start = str;
 8002dc2:	4604      	mov	r4, r0
 8002dc4:	b150      	cbz	r0, 8002ddc <strtoke+0x1c>
  /* check whether text to parse left */
  if (!start) return NULL;
  /* remember current start as found token */
  token = start;
  /* find next occurrence of delim */
  start = strpbrk(start, delim);
 8002dc6:	4620      	mov	r0, r4
 8002dc8:	f006 fc23 	bl	8009612 <strpbrk>
  /* replace delim with terminator and move start to follower */
  if (start) *start++ = '\0';
 8002dcc:	b160      	cbz	r0, 8002de8 <strtoke+0x28>
 8002dce:	1c41      	adds	r1, r0, #1
 8002dd0:	4a08      	ldr	r2, [pc, #32]	; (8002df4 <strtoke+0x34>)
 8002dd2:	6011      	str	r1, [r2, #0]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	7002      	strb	r2, [r0, #0]
 8002dd8:	4620      	mov	r0, r4
  /* done */
  return token;
}
 8002dda:	bd10      	pop	{r4, pc}
  if (!start) return NULL;
 8002ddc:	4b05      	ldr	r3, [pc, #20]	; (8002df4 <strtoke+0x34>)
 8002dde:	681c      	ldr	r4, [r3, #0]
 8002de0:	2c00      	cmp	r4, #0
 8002de2:	d1f0      	bne.n	8002dc6 <strtoke+0x6>
 8002de4:	4620      	mov	r0, r4
 8002de6:	e7f8      	b.n	8002dda <strtoke+0x1a>
  start = strpbrk(start, delim);
 8002de8:	4b02      	ldr	r3, [pc, #8]	; (8002df4 <strtoke+0x34>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	601a      	str	r2, [r3, #0]
 8002dee:	4620      	mov	r0, r4
 8002df0:	e7f3      	b.n	8002dda <strtoke+0x1a>
 8002df2:	bf00      	nop
 8002df4:	20000910 	.word	0x20000910

08002df8 <NEO6_GetCharFromBuffer>:
	HAL_UART_Receive_IT(GpsStateHandler->neo6_huart, (uint8_t*)&UartReceivedChar, 1);
}

int NEO6_GetCharFromBuffer(NEO6_State *GpsStateHandler)
{
	if(GpsStateHandler->UartBufferHead == GpsStateHandler->UartBufferTail)
 8002df8:	f890 3105 	ldrb.w	r3, [r0, #261]	; 0x105
 8002dfc:	f890 2104 	ldrb.w	r2, [r0, #260]	; 0x104
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d00a      	beq.n	8002e1a <NEO6_GetCharFromBuffer+0x22>
	{
		return -1; // error - no char to return
	}
	GpsStateHandler->UartBufferTail = (GpsStateHandler->UartBufferTail + 1) % GPS_UART_BUFFER_SIZE;
 8002e04:	3301      	adds	r3, #1
 8002e06:	425a      	negs	r2, r3
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	b2d2      	uxtb	r2, r2
 8002e0c:	bf58      	it	pl
 8002e0e:	4253      	negpl	r3, r2
 8002e10:	f880 3105 	strb.w	r3, [r0, #261]	; 0x105

	return GpsStateHandler->UartBuffer[GpsStateHandler->UartBufferTail];
 8002e14:	4418      	add	r0, r3
 8002e16:	7900      	ldrb	r0, [r0, #4]
 8002e18:	4770      	bx	lr
		return -1; // error - no char to return
 8002e1a:	f04f 30ff 	mov.w	r0, #4294967295
}
 8002e1e:	4770      	bx	lr

08002e20 <NEO6_GetLineFromBuffer>:

int NEO6_GetLineFromBuffer(NEO6_State *GpsStateHandler)
{
 8002e20:	b538      	push	{r3, r4, r5, lr}
	char TempChar;
	char* LinePointer = (char*)GpsStateHandler->WorkingBuffer;
	if(GpsStateHandler->UartBufferLines)
 8002e22:	f890 3106 	ldrb.w	r3, [r0, #262]	; 0x106
 8002e26:	b1a3      	cbz	r3, 8002e52 <NEO6_GetLineFromBuffer+0x32>
 8002e28:	4604      	mov	r4, r0
	char* LinePointer = (char*)GpsStateHandler->WorkingBuffer;
 8002e2a:	f200 1507 	addw	r5, r0, #263	; 0x107
 8002e2e:	e001      	b.n	8002e34 <NEO6_GetLineFromBuffer+0x14>
		{
			if(TempChar == 13)
			{
				break;
			}
			*LinePointer = TempChar;
 8002e30:	f805 0b01 	strb.w	r0, [r5], #1
		while((TempChar = NEO6_GetCharFromBuffer(GpsStateHandler)))
 8002e34:	4620      	mov	r0, r4
 8002e36:	f7ff ffdf 	bl	8002df8 <NEO6_GetCharFromBuffer>
 8002e3a:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 8002e3e:	d001      	beq.n	8002e44 <NEO6_GetLineFromBuffer+0x24>
			if(TempChar == 13)
 8002e40:	280d      	cmp	r0, #13
 8002e42:	d1f5      	bne.n	8002e30 <NEO6_GetLineFromBuffer+0x10>
			LinePointer++;
		}
		*LinePointer = 0; // end of cstring
 8002e44:	2300      	movs	r3, #0
 8002e46:	702b      	strb	r3, [r5, #0]
		GpsStateHandler->UartBufferLines--; // decrement line counter
 8002e48:	f894 3106 	ldrb.w	r3, [r4, #262]	; 0x106
 8002e4c:	3b01      	subs	r3, #1
 8002e4e:	f884 3106 	strb.w	r3, [r4, #262]	; 0x106
	}
	return 0;
}
 8002e52:	2000      	movs	r0, #0
 8002e54:	bd38      	pop	{r3, r4, r5, pc}
	...

08002e58 <NEO6_ParseGPRMC>:

//
// Recommended minimum specific GPS/Transit data
//
void NEO6_ParseGPRMC(NEO6_State *GpsStateHandler)
{
 8002e58:	b538      	push	{r3, r4, r5, lr}
 8002e5a:	4604      	mov	r4, r0

	char *ParsePoiner;
	uint32_t Temp;

	// Time of FIX
	ParsePoiner = strtoke(NULL, ",");
 8002e5c:	493f      	ldr	r1, [pc, #252]	; (8002f5c <NEO6_ParseGPRMC+0x104>)
 8002e5e:	2000      	movs	r0, #0
 8002e60:	f7ff ffae 	bl	8002dc0 <strtoke>
	if(strlen(ParsePoiner) > 0)
 8002e64:	7803      	ldrb	r3, [r0, #0]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d132      	bne.n	8002ed0 <NEO6_ParseGPRMC+0x78>
		GpsStateHandler->Second = Temp % 100;
		GpsStateHandler->Minute = (Temp / 100) % 100;
		GpsStateHandler->Hour = (Temp / 10000) % 100;
	}
	// Navigation receiver warning A = OK, V = warning
	ParsePoiner = strtoke(NULL, ",");
 8002e6a:	4d3c      	ldr	r5, [pc, #240]	; (8002f5c <NEO6_ParseGPRMC+0x104>)
 8002e6c:	4629      	mov	r1, r5
 8002e6e:	2000      	movs	r0, #0
 8002e70:	f7ff ffa6 	bl	8002dc0 <strtoke>
	// Latitude
	ParsePoiner = strtoke(NULL, ",");
 8002e74:	4629      	mov	r1, r5
 8002e76:	2000      	movs	r0, #0
 8002e78:	f7ff ffa2 	bl	8002dc0 <strtoke>
	if(strlen(ParsePoiner) > 0)
 8002e7c:	7803      	ldrb	r3, [r0, #0]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d144      	bne.n	8002f0c <NEO6_ParseGPRMC+0xb4>
	{
		GpsStateHandler->Latitude = atof(ParsePoiner);
	}
	// Latitude Direction
	ParsePoiner = strtoke(NULL, ",");
 8002e82:	4936      	ldr	r1, [pc, #216]	; (8002f5c <NEO6_ParseGPRMC+0x104>)
 8002e84:	2000      	movs	r0, #0
 8002e86:	f7ff ff9b 	bl	8002dc0 <strtoke>
	if(strlen(ParsePoiner) > 0)
 8002e8a:	7803      	ldrb	r3, [r0, #0]
 8002e8c:	b10b      	cbz	r3, 8002e92 <NEO6_ParseGPRMC+0x3a>
	{
		GpsStateHandler->LatitudeDirection = *ParsePoiner;
 8002e8e:	f884 3198 	strb.w	r3, [r4, #408]	; 0x198
	}
	// Longnitude
	ParsePoiner = strtoke(NULL, ",");
 8002e92:	4932      	ldr	r1, [pc, #200]	; (8002f5c <NEO6_ParseGPRMC+0x104>)
 8002e94:	2000      	movs	r0, #0
 8002e96:	f7ff ff93 	bl	8002dc0 <strtoke>
	if(strlen(ParsePoiner) > 0)
 8002e9a:	7803      	ldrb	r3, [r0, #0]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d13a      	bne.n	8002f16 <NEO6_ParseGPRMC+0xbe>
	{
		GpsStateHandler->Longitude = atof(ParsePoiner);
	}
	// Longnitude Direction
	ParsePoiner = strtoke(NULL, ",");
 8002ea0:	492e      	ldr	r1, [pc, #184]	; (8002f5c <NEO6_ParseGPRMC+0x104>)
 8002ea2:	2000      	movs	r0, #0
 8002ea4:	f7ff ff8c 	bl	8002dc0 <strtoke>
	if(strlen(ParsePoiner) > 0)
 8002ea8:	7803      	ldrb	r3, [r0, #0]
 8002eaa:	b10b      	cbz	r3, 8002eb0 <NEO6_ParseGPRMC+0x58>
	{
		GpsStateHandler->LongitudeDirection = *ParsePoiner;
 8002eac:	f884 31a8 	strb.w	r3, [r4, #424]	; 0x1a8
	}
	// Speed over ground, Knots
	ParsePoiner = strtoke(NULL, ",");
 8002eb0:	4d2a      	ldr	r5, [pc, #168]	; (8002f5c <NEO6_ParseGPRMC+0x104>)
 8002eb2:	4629      	mov	r1, r5
 8002eb4:	2000      	movs	r0, #0
 8002eb6:	f7ff ff83 	bl	8002dc0 <strtoke>
	// Course Made Good, True
	ParsePoiner = strtoke(NULL, ",");
 8002eba:	4629      	mov	r1, r5
 8002ebc:	2000      	movs	r0, #0
 8002ebe:	f7ff ff7f 	bl	8002dc0 <strtoke>
	// Date of fix
	ParsePoiner = strtoke(NULL, ",");
 8002ec2:	4629      	mov	r1, r5
 8002ec4:	2000      	movs	r0, #0
 8002ec6:	f7ff ff7b 	bl	8002dc0 <strtoke>
	if(strlen(ParsePoiner) > 0)
 8002eca:	7803      	ldrb	r3, [r0, #0]
 8002ecc:	bb43      	cbnz	r3, 8002f20 <NEO6_ParseGPRMC+0xc8>
		Temp = atoi(ParsePoiner);
		GpsStateHandler->Year = Temp % 100;
		GpsStateHandler->Month = (Temp / 100) % 100;
		GpsStateHandler->Day = (Temp / 10000) % 100;
	}
}
 8002ece:	bd38      	pop	{r3, r4, r5, pc}
		Temp = atoi(ParsePoiner);
 8002ed0:	f004 fd23 	bl	800791a <atoi>
		GpsStateHandler->Second = Temp % 100;
 8002ed4:	4b22      	ldr	r3, [pc, #136]	; (8002f60 <NEO6_ParseGPRMC+0x108>)
 8002ed6:	fba3 1200 	umull	r1, r2, r3, r0
 8002eda:	0952      	lsrs	r2, r2, #5
 8002edc:	2164      	movs	r1, #100	; 0x64
 8002ede:	fb01 0512 	mls	r5, r1, r2, r0
 8002ee2:	f884 5189 	strb.w	r5, [r4, #393]	; 0x189
		GpsStateHandler->Minute = (Temp / 100) % 100;
 8002ee6:	fba3 c502 	umull	ip, r5, r3, r2
 8002eea:	096d      	lsrs	r5, r5, #5
 8002eec:	fb01 2215 	mls	r2, r1, r5, r2
 8002ef0:	f884 2188 	strb.w	r2, [r4, #392]	; 0x188
		GpsStateHandler->Hour = (Temp / 10000) % 100;
 8002ef4:	4a1b      	ldr	r2, [pc, #108]	; (8002f64 <NEO6_ParseGPRMC+0x10c>)
 8002ef6:	fba2 2000 	umull	r2, r0, r2, r0
 8002efa:	0b40      	lsrs	r0, r0, #13
 8002efc:	fba3 2300 	umull	r2, r3, r3, r0
 8002f00:	095b      	lsrs	r3, r3, #5
 8002f02:	fb01 0013 	mls	r0, r1, r3, r0
 8002f06:	f884 0187 	strb.w	r0, [r4, #391]	; 0x187
 8002f0a:	e7ae      	b.n	8002e6a <NEO6_ParseGPRMC+0x12>
		GpsStateHandler->Latitude = atof(ParsePoiner);
 8002f0c:	f004 fd02 	bl	8007914 <atof>
 8002f10:	e9c4 0164 	strd	r0, r1, [r4, #400]	; 0x190
 8002f14:	e7b5      	b.n	8002e82 <NEO6_ParseGPRMC+0x2a>
		GpsStateHandler->Longitude = atof(ParsePoiner);
 8002f16:	f004 fcfd 	bl	8007914 <atof>
 8002f1a:	e9c4 0168 	strd	r0, r1, [r4, #416]	; 0x1a0
 8002f1e:	e7bf      	b.n	8002ea0 <NEO6_ParseGPRMC+0x48>
		Temp = atoi(ParsePoiner);
 8002f20:	f004 fcfb 	bl	800791a <atoi>
		GpsStateHandler->Year = Temp % 100;
 8002f24:	4b0e      	ldr	r3, [pc, #56]	; (8002f60 <NEO6_ParseGPRMC+0x108>)
 8002f26:	fba3 1200 	umull	r1, r2, r3, r0
 8002f2a:	0952      	lsrs	r2, r2, #5
 8002f2c:	2164      	movs	r1, #100	; 0x64
 8002f2e:	fb01 0512 	mls	r5, r1, r2, r0
 8002f32:	f884 518c 	strb.w	r5, [r4, #396]	; 0x18c
		GpsStateHandler->Month = (Temp / 100) % 100;
 8002f36:	fba3 c502 	umull	ip, r5, r3, r2
 8002f3a:	096d      	lsrs	r5, r5, #5
 8002f3c:	fb01 2215 	mls	r2, r1, r5, r2
 8002f40:	f884 218b 	strb.w	r2, [r4, #395]	; 0x18b
		GpsStateHandler->Day = (Temp / 10000) % 100;
 8002f44:	4a07      	ldr	r2, [pc, #28]	; (8002f64 <NEO6_ParseGPRMC+0x10c>)
 8002f46:	fba2 2000 	umull	r2, r0, r2, r0
 8002f4a:	0b40      	lsrs	r0, r0, #13
 8002f4c:	fba3 2300 	umull	r2, r3, r3, r0
 8002f50:	095b      	lsrs	r3, r3, #5
 8002f52:	fb01 0013 	mls	r0, r1, r3, r0
 8002f56:	f884 018a 	strb.w	r0, [r4, #394]	; 0x18a
}
 8002f5a:	e7b8      	b.n	8002ece <NEO6_ParseGPRMC+0x76>
 8002f5c:	0800c340 	.word	0x0800c340
 8002f60:	51eb851f 	.word	0x51eb851f
 8002f64:	d1b71759 	.word	0xd1b71759

08002f68 <NEO6_ParseGPVTG>:

//
//	Track Made Good and Ground Speed.
//
void NEO6_ParseGPVTG(NEO6_State *GpsStateHandler)
{
 8002f68:	b538      	push	{r3, r4, r5, lr}
 8002f6a:	4605      	mov	r5, r0
	// eg2. $GPVTG,054.7,T,034.4,M,005.5,N,010.2,K

	char *ParsePoiner;

	// True track made good
	ParsePoiner = strtoke(NULL, ",");
 8002f6c:	4c16      	ldr	r4, [pc, #88]	; (8002fc8 <NEO6_ParseGPVTG+0x60>)
 8002f6e:	4621      	mov	r1, r4
 8002f70:	2000      	movs	r0, #0
 8002f72:	f7ff ff25 	bl	8002dc0 <strtoke>
	ParsePoiner = strtoke(NULL, ",");
 8002f76:	4621      	mov	r1, r4
 8002f78:	2000      	movs	r0, #0
 8002f7a:	f7ff ff21 	bl	8002dc0 <strtoke>
	// Magnetic track made good
	ParsePoiner = strtoke(NULL, ",");
 8002f7e:	4621      	mov	r1, r4
 8002f80:	2000      	movs	r0, #0
 8002f82:	f7ff ff1d 	bl	8002dc0 <strtoke>
	ParsePoiner = strtoke(NULL, ",");
 8002f86:	4621      	mov	r1, r4
 8002f88:	2000      	movs	r0, #0
 8002f8a:	f7ff ff19 	bl	8002dc0 <strtoke>
	// Ground speed, knots
	ParsePoiner = strtoke(NULL, ",");
 8002f8e:	4621      	mov	r1, r4
 8002f90:	2000      	movs	r0, #0
 8002f92:	f7ff ff15 	bl	8002dc0 <strtoke>
	if(strlen(ParsePoiner) > 0)
 8002f96:	7803      	ldrb	r3, [r0, #0]
 8002f98:	b95b      	cbnz	r3, 8002fb2 <NEO6_ParseGPVTG+0x4a>
	{
		GpsStateHandler->SpeedKnots = atof(ParsePoiner);
	}
	ParsePoiner = strtoke(NULL, ",");
 8002f9a:	4c0b      	ldr	r4, [pc, #44]	; (8002fc8 <NEO6_ParseGPVTG+0x60>)
 8002f9c:	4621      	mov	r1, r4
 8002f9e:	2000      	movs	r0, #0
 8002fa0:	f7ff ff0e 	bl	8002dc0 <strtoke>
	// Ground speed, Kilometers per hour
	ParsePoiner = strtoke(NULL, ",");
 8002fa4:	4621      	mov	r1, r4
 8002fa6:	2000      	movs	r0, #0
 8002fa8:	f7ff ff0a 	bl	8002dc0 <strtoke>
	if(strlen(ParsePoiner) > 0)
 8002fac:	7803      	ldrb	r3, [r0, #0]
 8002fae:	b92b      	cbnz	r3, 8002fbc <NEO6_ParseGPVTG+0x54>
	{
		GpsStateHandler->SpeedKilometers = atof(ParsePoiner);
	}
}
 8002fb0:	bd38      	pop	{r3, r4, r5, pc}
		GpsStateHandler->SpeedKnots = atof(ParsePoiner);
 8002fb2:	f004 fcaf 	bl	8007914 <atof>
 8002fb6:	e9c5 016e 	strd	r0, r1, [r5, #440]	; 0x1b8
 8002fba:	e7ee      	b.n	8002f9a <NEO6_ParseGPVTG+0x32>
		GpsStateHandler->SpeedKilometers = atof(ParsePoiner);
 8002fbc:	f004 fcaa 	bl	8007914 <atof>
 8002fc0:	e9c5 0170 	strd	r0, r1, [r5, #448]	; 0x1c0
}
 8002fc4:	e7f4      	b.n	8002fb0 <NEO6_ParseGPVTG+0x48>
 8002fc6:	bf00      	nop
 8002fc8:	0800c340 	.word	0x0800c340

08002fcc <NEO6_ParseGPGGA>:

//
//	Global Positioning System Fix Data
//
void NEO6_ParseGPGGA(NEO6_State *GpsStateHandler)
{
 8002fcc:	b538      	push	{r3, r4, r5, lr}
 8002fce:	4605      	mov	r5, r0
	// eg. $GPGGA,212846.00,5025.81511,N,01639.92090,E,1,04,4.72,281.1,M,42.0,M,,*5F

	char *ParsePoiner;

	// UTC of Position
	ParsePoiner = strtoke(NULL, ",");
 8002fd0:	4c1d      	ldr	r4, [pc, #116]	; (8003048 <NEO6_ParseGPGGA+0x7c>)
 8002fd2:	4621      	mov	r1, r4
 8002fd4:	2000      	movs	r0, #0
 8002fd6:	f7ff fef3 	bl	8002dc0 <strtoke>
	// Latitude
	ParsePoiner = strtoke(NULL, ",");
 8002fda:	4621      	mov	r1, r4
 8002fdc:	2000      	movs	r0, #0
 8002fde:	f7ff feef 	bl	8002dc0 <strtoke>
	// N or S
	ParsePoiner = strtoke(NULL, ",");
 8002fe2:	4621      	mov	r1, r4
 8002fe4:	2000      	movs	r0, #0
 8002fe6:	f7ff feeb 	bl	8002dc0 <strtoke>
	// Longitude
	ParsePoiner = strtoke(NULL, ",");
 8002fea:	4621      	mov	r1, r4
 8002fec:	2000      	movs	r0, #0
 8002fee:	f7ff fee7 	bl	8002dc0 <strtoke>
	// E or W
	ParsePoiner = strtoke(NULL, ",");
 8002ff2:	4621      	mov	r1, r4
 8002ff4:	2000      	movs	r0, #0
 8002ff6:	f7ff fee3 	bl	8002dc0 <strtoke>
	// GPS quality indicator (0=invalid; 1=GPS fix; 2=Diff. GPS fix)
	ParsePoiner = strtoke(NULL, ",");
 8002ffa:	4621      	mov	r1, r4
 8002ffc:	2000      	movs	r0, #0
 8002ffe:	f7ff fedf 	bl	8002dc0 <strtoke>
	if(strlen(ParsePoiner) > 0)
 8003002:	7803      	ldrb	r3, [r0, #0]
 8003004:	b98b      	cbnz	r3, 800302a <NEO6_ParseGPGGA+0x5e>
	{
		GpsStateHandler->Quality = atoi(ParsePoiner);
	}
	// Number of satellites in use [not those in view]
	ParsePoiner = strtoke(NULL, ",");
 8003006:	4910      	ldr	r1, [pc, #64]	; (8003048 <NEO6_ParseGPGGA+0x7c>)
 8003008:	2000      	movs	r0, #0
 800300a:	f7ff fed9 	bl	8002dc0 <strtoke>
	if(strlen(ParsePoiner) > 0)
 800300e:	7803      	ldrb	r3, [r0, #0]
 8003010:	b983      	cbnz	r3, 8003034 <NEO6_ParseGPGGA+0x68>
	{
		GpsStateHandler->SatelitesNumber = atoi(ParsePoiner);
	}
	// Horizontal dilution of position
	ParsePoiner = strtoke(NULL, ",");
 8003012:	4c0d      	ldr	r4, [pc, #52]	; (8003048 <NEO6_ParseGPGGA+0x7c>)
 8003014:	4621      	mov	r1, r4
 8003016:	2000      	movs	r0, #0
 8003018:	f7ff fed2 	bl	8002dc0 <strtoke>
	// Antenna altitude above/below mean sea level (geoid)
	ParsePoiner = strtoke(NULL, ",");
 800301c:	4621      	mov	r1, r4
 800301e:	2000      	movs	r0, #0
 8003020:	f7ff fece 	bl	8002dc0 <strtoke>
	if(strlen(ParsePoiner) > 0)
 8003024:	7803      	ldrb	r3, [r0, #0]
 8003026:	b953      	cbnz	r3, 800303e <NEO6_ParseGPGGA+0x72>
	{
		GpsStateHandler->Altitude = atof(ParsePoiner);
	}
}
 8003028:	bd38      	pop	{r3, r4, r5, pc}
		GpsStateHandler->Quality = atoi(ParsePoiner);
 800302a:	f004 fc76 	bl	800791a <atoi>
 800302e:	f885 01c9 	strb.w	r0, [r5, #457]	; 0x1c9
 8003032:	e7e8      	b.n	8003006 <NEO6_ParseGPGGA+0x3a>
		GpsStateHandler->SatelitesNumber = atoi(ParsePoiner);
 8003034:	f004 fc71 	bl	800791a <atoi>
 8003038:	f885 01c8 	strb.w	r0, [r5, #456]	; 0x1c8
 800303c:	e7e9      	b.n	8003012 <NEO6_ParseGPGGA+0x46>
		GpsStateHandler->Altitude = atof(ParsePoiner);
 800303e:	f004 fc69 	bl	8007914 <atof>
 8003042:	e9c5 016c 	strd	r0, r1, [r5, #432]	; 0x1b0
}
 8003046:	e7ef      	b.n	8003028 <NEO6_ParseGPGGA+0x5c>
 8003048:	0800c340 	.word	0x0800c340

0800304c <NEO6_ParseGPGSA>:

//
//	GPS DOP and active satellites
//
void NEO6_ParseGPGSA(NEO6_State *GpsStateHandler)
{
 800304c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800304e:	4607      	mov	r7, r0
	// eg2. $GPGSA,A,3,19,28,14,18,27,22,31,39,,,,,1.7,1.0,1.3*35

	char *ParsePoiner;

	// Mode
	ParsePoiner = strtoke(NULL, ",");
 8003050:	4c1e      	ldr	r4, [pc, #120]	; (80030cc <NEO6_ParseGPGSA+0x80>)
 8003052:	4621      	mov	r1, r4
 8003054:	2000      	movs	r0, #0
 8003056:	f7ff feb3 	bl	8002dc0 <strtoke>
	// 2D/3D Fix
	ParsePoiner = strtoke(NULL, ",");
 800305a:	4621      	mov	r1, r4
 800305c:	2000      	movs	r0, #0
 800305e:	f7ff feaf 	bl	8002dc0 <strtoke>
	if(strlen(ParsePoiner) > 0)
 8003062:	7803      	ldrb	r3, [r0, #0]
 8003064:	b9eb      	cbnz	r3, 80030a2 <NEO6_ParseGPGSA+0x56>
{
 8003066:	240c      	movs	r4, #12
		GpsStateHandler->FixMode = atoi(ParsePoiner);
	}
	// IDs of SVs used in position fix (null for unused fields)
	for(uint8_t i=0; i < 12; i++)
	{
		ParsePoiner = strtoke(NULL, ",");
 8003068:	4e18      	ldr	r6, [pc, #96]	; (80030cc <NEO6_ParseGPGSA+0x80>)
 800306a:	2500      	movs	r5, #0
 800306c:	4631      	mov	r1, r6
 800306e:	4628      	mov	r0, r5
 8003070:	f7ff fea6 	bl	8002dc0 <strtoke>
	for(uint8_t i=0; i < 12; i++)
 8003074:	1e63      	subs	r3, r4, #1
 8003076:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 800307a:	d1f7      	bne.n	800306c <NEO6_ParseGPGSA+0x20>
	}
	// PDOP
	ParsePoiner = strtoke(NULL, ",");
 800307c:	4913      	ldr	r1, [pc, #76]	; (80030cc <NEO6_ParseGPGSA+0x80>)
 800307e:	2000      	movs	r0, #0
 8003080:	f7ff fe9e 	bl	8002dc0 <strtoke>
	if(strlen(ParsePoiner) > 0)
 8003084:	7803      	ldrb	r3, [r0, #0]
 8003086:	b98b      	cbnz	r3, 80030ac <NEO6_ParseGPGSA+0x60>
	{
		GpsStateHandler->Dop = atof(ParsePoiner);
	}
	// HDOP
	ParsePoiner = strtoke(NULL, ",");
 8003088:	4910      	ldr	r1, [pc, #64]	; (80030cc <NEO6_ParseGPGSA+0x80>)
 800308a:	2000      	movs	r0, #0
 800308c:	f7ff fe98 	bl	8002dc0 <strtoke>
	if(strlen(ParsePoiner) > 0)
 8003090:	7803      	ldrb	r3, [r0, #0]
 8003092:	b983      	cbnz	r3, 80030b6 <NEO6_ParseGPGSA+0x6a>
	{
		GpsStateHandler->Hdop = atof(ParsePoiner);
	}
	// VDOP
	ParsePoiner = strtoke(NULL, ",");
 8003094:	490d      	ldr	r1, [pc, #52]	; (80030cc <NEO6_ParseGPGSA+0x80>)
 8003096:	2000      	movs	r0, #0
 8003098:	f7ff fe92 	bl	8002dc0 <strtoke>
	if(strlen(ParsePoiner) > 0)
 800309c:	7803      	ldrb	r3, [r0, #0]
 800309e:	b97b      	cbnz	r3, 80030c0 <NEO6_ParseGPGSA+0x74>
	{
		GpsStateHandler->Vdop = atof(ParsePoiner);
	}
}
 80030a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		GpsStateHandler->FixMode = atoi(ParsePoiner);
 80030a2:	f004 fc3a 	bl	800791a <atoi>
 80030a6:	f887 01ca 	strb.w	r0, [r7, #458]	; 0x1ca
 80030aa:	e7dc      	b.n	8003066 <NEO6_ParseGPGSA+0x1a>
		GpsStateHandler->Dop = atof(ParsePoiner);
 80030ac:	f004 fc32 	bl	8007914 <atof>
 80030b0:	e9c7 0174 	strd	r0, r1, [r7, #464]	; 0x1d0
 80030b4:	e7e8      	b.n	8003088 <NEO6_ParseGPGSA+0x3c>
		GpsStateHandler->Hdop = atof(ParsePoiner);
 80030b6:	f004 fc2d 	bl	8007914 <atof>
 80030ba:	e9c7 0176 	strd	r0, r1, [r7, #472]	; 0x1d8
 80030be:	e7e9      	b.n	8003094 <NEO6_ParseGPGSA+0x48>
		GpsStateHandler->Vdop = atof(ParsePoiner);
 80030c0:	f004 fc28 	bl	8007914 <atof>
 80030c4:	e9c7 0178 	strd	r0, r1, [r7, #480]	; 0x1e0
}
 80030c8:	e7ea      	b.n	80030a0 <NEO6_ParseGPGSA+0x54>
 80030ca:	bf00      	nop
 80030cc:	0800c340 	.word	0x0800c340

080030d0 <NEO6_ParseLine>:
	// Could be good for minimal system for LoRa device
}


void NEO6_ParseLine(NEO6_State *GpsStateHandler)
{
 80030d0:	b538      	push	{r3, r4, r5, lr}
 80030d2:	4604      	mov	r4, r0
	// Nice website with NMEA commuincates description
	//	http://aprs.gids.nl/nmea
	//

	// Header
	char* ParsePoiner = strtoke((char*)GpsStateHandler->WorkingBuffer, ",");
 80030d4:	4914      	ldr	r1, [pc, #80]	; (8003128 <NEO6_ParseLine+0x58>)
 80030d6:	f200 1007 	addw	r0, r0, #263	; 0x107
 80030da:	f7ff fe71 	bl	8002dc0 <strtoke>
 80030de:	4605      	mov	r5, r0

	if(strcmp(ParsePoiner, "$GPRMC") == 0) NEO6_ParseGPRMC(GpsStateHandler);
 80030e0:	4912      	ldr	r1, [pc, #72]	; (800312c <NEO6_ParseLine+0x5c>)
 80030e2:	f7fd f835 	bl	8000150 <strcmp>
 80030e6:	b190      	cbz	r0, 800310e <NEO6_ParseLine+0x3e>
	else if(strcmp(ParsePoiner, "$GPVTG") == 0) NEO6_ParseGPVTG(GpsStateHandler);
 80030e8:	4911      	ldr	r1, [pc, #68]	; (8003130 <NEO6_ParseLine+0x60>)
 80030ea:	4628      	mov	r0, r5
 80030ec:	f7fd f830 	bl	8000150 <strcmp>
 80030f0:	b188      	cbz	r0, 8003116 <NEO6_ParseLine+0x46>
	else if(strcmp(ParsePoiner, "$GPGGA") == 0) NEO6_ParseGPGGA(GpsStateHandler);
 80030f2:	4910      	ldr	r1, [pc, #64]	; (8003134 <NEO6_ParseLine+0x64>)
 80030f4:	4628      	mov	r0, r5
 80030f6:	f7fd f82b 	bl	8000150 <strcmp>
 80030fa:	b180      	cbz	r0, 800311e <NEO6_ParseLine+0x4e>
	else if(strcmp(ParsePoiner, "$GPGSA") == 0) NEO6_ParseGPGSA(GpsStateHandler);
 80030fc:	490e      	ldr	r1, [pc, #56]	; (8003138 <NEO6_ParseLine+0x68>)
 80030fe:	4628      	mov	r0, r5
 8003100:	f7fd f826 	bl	8000150 <strcmp>
 8003104:	b930      	cbnz	r0, 8003114 <NEO6_ParseLine+0x44>
 8003106:	4620      	mov	r0, r4
 8003108:	f7ff ffa0 	bl	800304c <NEO6_ParseGPGSA>
//	else if(strcmp(ParsePoiner, "$GPGSV") == 0) NEO6_ParseGPGSV(GpsStateHandler);
//	else if(strcmp(ParsePoiner, "$GPGLL") == 0) NEO6_ParseGPGLL(GpsStateHandler);
}
 800310c:	e002      	b.n	8003114 <NEO6_ParseLine+0x44>
	if(strcmp(ParsePoiner, "$GPRMC") == 0) NEO6_ParseGPRMC(GpsStateHandler);
 800310e:	4620      	mov	r0, r4
 8003110:	f7ff fea2 	bl	8002e58 <NEO6_ParseGPRMC>
}
 8003114:	bd38      	pop	{r3, r4, r5, pc}
	else if(strcmp(ParsePoiner, "$GPVTG") == 0) NEO6_ParseGPVTG(GpsStateHandler);
 8003116:	4620      	mov	r0, r4
 8003118:	f7ff ff26 	bl	8002f68 <NEO6_ParseGPVTG>
 800311c:	e7fa      	b.n	8003114 <NEO6_ParseLine+0x44>
	else if(strcmp(ParsePoiner, "$GPGGA") == 0) NEO6_ParseGPGGA(GpsStateHandler);
 800311e:	4620      	mov	r0, r4
 8003120:	f7ff ff54 	bl	8002fcc <NEO6_ParseGPGGA>
 8003124:	e7f6      	b.n	8003114 <NEO6_ParseLine+0x44>
 8003126:	bf00      	nop
 8003128:	0800c340 	.word	0x0800c340
 800312c:	0800c344 	.word	0x0800c344
 8003130:	0800c34c 	.word	0x0800c34c
 8003134:	0800c354 	.word	0x0800c354
 8003138:	0800c35c 	.word	0x0800c35c

0800313c <NEO6_IsFix>:

uint8_t NEO6_IsFix(NEO6_State *GpsStateHandler)
{
	return GpsStateHandler->Quality;
}
 800313c:	f890 01c9 	ldrb.w	r0, [r0, #457]	; 0x1c9
 8003140:	4770      	bx	lr

08003142 <NEO6_Task>:

void NEO6_Task(NEO6_State *GpsStateHandler)
{
	if(GpsStateHandler->UartBufferLines)
 8003142:	f890 3106 	ldrb.w	r3, [r0, #262]	; 0x106
 8003146:	b903      	cbnz	r3, 800314a <NEO6_Task+0x8>
 8003148:	4770      	bx	lr
{
 800314a:	b510      	push	{r4, lr}
 800314c:	4604      	mov	r4, r0
	{
		NEO6_GetLineFromBuffer(GpsStateHandler);
 800314e:	f7ff fe67 	bl	8002e20 <NEO6_GetLineFromBuffer>
		NEO6_ParseLine(GpsStateHandler);
 8003152:	4620      	mov	r0, r4
 8003154:	f7ff ffbc 	bl	80030d0 <NEO6_ParseLine>
	}
}
 8003158:	bd10      	pop	{r4, pc}
	...

0800315c <ssd1306_WriteCommand>:
void ssd1306_Reset(void) {
    /* for I2C - do nothing */
}

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 800315c:	b500      	push	{lr}
 800315e:	b087      	sub	sp, #28
 8003160:	f88d 0017 	strb.w	r0, [sp, #23]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8003164:	f04f 33ff 	mov.w	r3, #4294967295
 8003168:	9302      	str	r3, [sp, #8]
 800316a:	2301      	movs	r3, #1
 800316c:	9301      	str	r3, [sp, #4]
 800316e:	f10d 0217 	add.w	r2, sp, #23
 8003172:	9200      	str	r2, [sp, #0]
 8003174:	2200      	movs	r2, #0
 8003176:	2178      	movs	r1, #120	; 0x78
 8003178:	4802      	ldr	r0, [pc, #8]	; (8003184 <ssd1306_WriteCommand+0x28>)
 800317a:	f001 fa49 	bl	8004610 <HAL_I2C_Mem_Write>
}
 800317e:	b007      	add	sp, #28
 8003180:	f85d fb04 	ldr.w	pc, [sp], #4
 8003184:	200004f0 	.word	0x200004f0

08003188 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8003188:	b500      	push	{lr}
 800318a:	b085      	sub	sp, #20
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800318c:	f04f 33ff 	mov.w	r3, #4294967295
 8003190:	9302      	str	r3, [sp, #8]
 8003192:	b289      	uxth	r1, r1
 8003194:	9101      	str	r1, [sp, #4]
 8003196:	9000      	str	r0, [sp, #0]
 8003198:	2301      	movs	r3, #1
 800319a:	2240      	movs	r2, #64	; 0x40
 800319c:	2178      	movs	r1, #120	; 0x78
 800319e:	4803      	ldr	r0, [pc, #12]	; (80031ac <ssd1306_WriteData+0x24>)
 80031a0:	f001 fa36 	bl	8004610 <HAL_I2C_Mem_Write>
}
 80031a4:	b005      	add	sp, #20
 80031a6:	f85d fb04 	ldr.w	pc, [sp], #4
 80031aa:	bf00      	nop
 80031ac:	200004f0 	.word	0x200004f0

080031b0 <ssd1306_Fill>:
    
    SSD1306.Initialized = 1;
}

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80031b0:	b508      	push	{r3, lr}
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80031b2:	2800      	cmp	r0, #0
 80031b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80031b8:	bf0c      	ite	eq
 80031ba:	2100      	moveq	r1, #0
 80031bc:	21ff      	movne	r1, #255	; 0xff
 80031be:	4802      	ldr	r0, [pc, #8]	; (80031c8 <ssd1306_Fill+0x18>)
 80031c0:	f006 fa0d 	bl	80095de <memset>
}
 80031c4:	bd08      	pop	{r3, pc}
 80031c6:	bf00      	nop
 80031c8:	2000091c 	.word	0x2000091c

080031cc <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 80031cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80031d0:	4d0c      	ldr	r5, [pc, #48]	; (8003204 <ssd1306_UpdateScreen+0x38>)
void ssd1306_UpdateScreen(void) {
 80031d2:	24b0      	movs	r4, #176	; 0xb0
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80031d4:	f04f 0800 	mov.w	r8, #0
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80031d8:	2710      	movs	r7, #16
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80031da:	2680      	movs	r6, #128	; 0x80
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80031dc:	4620      	mov	r0, r4
 80031de:	f7ff ffbd 	bl	800315c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80031e2:	4640      	mov	r0, r8
 80031e4:	f7ff ffba 	bl	800315c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80031e8:	4638      	mov	r0, r7
 80031ea:	f7ff ffb7 	bl	800315c <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80031ee:	4631      	mov	r1, r6
 80031f0:	4628      	mov	r0, r5
 80031f2:	f7ff ffc9 	bl	8003188 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80031f6:	3401      	adds	r4, #1
 80031f8:	b2e4      	uxtb	r4, r4
 80031fa:	3580      	adds	r5, #128	; 0x80
 80031fc:	2cb8      	cmp	r4, #184	; 0xb8
 80031fe:	d1ed      	bne.n	80031dc <ssd1306_UpdateScreen+0x10>
    }
}
 8003200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003204:	2000091c 	.word	0x2000091c

08003208 <ssd1306_DrawPixel>:
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8003208:	f010 0f80 	tst.w	r0, #128	; 0x80
 800320c:	d11e      	bne.n	800324c <ssd1306_DrawPixel+0x44>
 800320e:	293f      	cmp	r1, #63	; 0x3f
 8003210:	d81c      	bhi.n	800324c <ssd1306_DrawPixel+0x44>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8003212:	2a01      	cmp	r2, #1
 8003214:	d00e      	beq.n	8003234 <ssd1306_DrawPixel+0x2c>
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8003216:	b410      	push	{r4}
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8003218:	08cb      	lsrs	r3, r1, #3
 800321a:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
 800321e:	4c0c      	ldr	r4, [pc, #48]	; (8003250 <ssd1306_DrawPixel+0x48>)
 8003220:	f001 0107 	and.w	r1, r1, #7
 8003224:	2201      	movs	r2, #1
 8003226:	408a      	lsls	r2, r1
 8003228:	5c23      	ldrb	r3, [r4, r0]
 800322a:	ea23 0302 	bic.w	r3, r3, r2
 800322e:	5423      	strb	r3, [r4, r0]
    }
}
 8003230:	bc10      	pop	{r4}
 8003232:	4770      	bx	lr
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8003234:	08cb      	lsrs	r3, r1, #3
 8003236:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
 800323a:	4a05      	ldr	r2, [pc, #20]	; (8003250 <ssd1306_DrawPixel+0x48>)
 800323c:	f001 0107 	and.w	r1, r1, #7
 8003240:	2301      	movs	r3, #1
 8003242:	408b      	lsls	r3, r1
 8003244:	5c11      	ldrb	r1, [r2, r0]
 8003246:	430b      	orrs	r3, r1
 8003248:	5413      	strb	r3, [r2, r0]
 800324a:	4770      	bx	lr
 800324c:	4770      	bx	lr
 800324e:	bf00      	nop
 8003250:	2000091c 	.word	0x2000091c

08003254 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8003254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003258:	b085      	sub	sp, #20
 800325a:	9001      	str	r0, [sp, #4]
 800325c:	ac04      	add	r4, sp, #16
 800325e:	e904 0006 	stmdb	r4, {r1, r2}
 8003262:	461f      	mov	r7, r3
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8003264:	f1a0 0320 	sub.w	r3, r0, #32
 8003268:	b2db      	uxtb	r3, r3
 800326a:	2b5e      	cmp	r3, #94	; 0x5e
 800326c:	d840      	bhi.n	80032f0 <ssd1306_WriteChar+0x9c>
 800326e:	f89d 6008 	ldrb.w	r6, [sp, #8]
        return 0;
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8003272:	4b23      	ldr	r3, [pc, #140]	; (8003300 <ssd1306_WriteChar+0xac>)
 8003274:	f8b3 9000 	ldrh.w	r9, [r3]
 8003278:	eb09 0306 	add.w	r3, r9, r6
 800327c:	2b80      	cmp	r3, #128	; 0x80
 800327e:	dc3b      	bgt.n	80032f8 <ssd1306_WriteChar+0xa4>
 8003280:	f89d 2009 	ldrb.w	r2, [sp, #9]
 8003284:	9200      	str	r2, [sp, #0]
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8003286:	4b1e      	ldr	r3, [pc, #120]	; (8003300 <ssd1306_WriteChar+0xac>)
 8003288:	885d      	ldrh	r5, [r3, #2]
 800328a:	18ab      	adds	r3, r5, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 800328c:	2b40      	cmp	r3, #64	; 0x40
 800328e:	dc35      	bgt.n	80032fc <ssd1306_WriteChar+0xa8>
        // Not enough space on current line
        return 0;
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8003290:	b342      	cbz	r2, 80032e4 <ssd1306_WriteChar+0x90>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8003292:	f1a0 0a20 	sub.w	sl, r0, #32
 8003296:	fb02 fa0a 	mul.w	sl, r2, sl
 800329a:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
 800329e:	b2ed      	uxtb	r5, r5
    for(i = 0; i < Font.FontHeight; i++) {
 80032a0:	f04f 0b00 	mov.w	fp, #0
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80032a4:	9b03      	ldr	r3, [sp, #12]
 80032a6:	f833 800a 	ldrh.w	r8, [r3, sl]
        for(j = 0; j < Font.FontWidth; j++) {
 80032aa:	b196      	cbz	r6, 80032d2 <ssd1306_WriteChar+0x7e>
 80032ac:	2400      	movs	r4, #0
            if((b << j) & 0x8000)  {
 80032ae:	fa08 f304 	lsl.w	r3, r8, r4
 80032b2:	f413 4f00 	tst.w	r3, #32768	; 0x8000
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80032b6:	eb09 0004 	add.w	r0, r9, r4
 80032ba:	bf12      	itee	ne
 80032bc:	463a      	movne	r2, r7
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80032be:	fab7 f287 	clzeq	r2, r7
 80032c2:	0952      	lsreq	r2, r2, #5
 80032c4:	4629      	mov	r1, r5
 80032c6:	b2c0      	uxtb	r0, r0
 80032c8:	f7ff ff9e 	bl	8003208 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 80032cc:	3401      	adds	r4, #1
 80032ce:	42b4      	cmp	r4, r6
 80032d0:	d1ed      	bne.n	80032ae <ssd1306_WriteChar+0x5a>
    for(i = 0; i < Font.FontHeight; i++) {
 80032d2:	f10b 0b01 	add.w	fp, fp, #1
 80032d6:	f10a 0a02 	add.w	sl, sl, #2
 80032da:	3501      	adds	r5, #1
 80032dc:	b2ed      	uxtb	r5, r5
 80032de:	9b00      	ldr	r3, [sp, #0]
 80032e0:	455b      	cmp	r3, fp
 80032e2:	d1df      	bne.n	80032a4 <ssd1306_WriteChar+0x50>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80032e4:	44b1      	add	r9, r6
 80032e6:	4b06      	ldr	r3, [pc, #24]	; (8003300 <ssd1306_WriteChar+0xac>)
 80032e8:	f8a3 9000 	strh.w	r9, [r3]
    
    // Return written char for validation
    return ch;
 80032ec:	9801      	ldr	r0, [sp, #4]
 80032ee:	e000      	b.n	80032f2 <ssd1306_WriteChar+0x9e>
        return 0;
 80032f0:	2000      	movs	r0, #0
}
 80032f2:	b005      	add	sp, #20
 80032f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return 0;
 80032f8:	2000      	movs	r0, #0
 80032fa:	e7fa      	b.n	80032f2 <ssd1306_WriteChar+0x9e>
 80032fc:	2000      	movs	r0, #0
 80032fe:	e7f8      	b.n	80032f2 <ssd1306_WriteChar+0x9e>
 8003300:	20000914 	.word	0x20000914

08003304 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8003304:	b570      	push	{r4, r5, r6, lr}
 8003306:	b082      	sub	sp, #8
 8003308:	4604      	mov	r4, r0
 800330a:	a802      	add	r0, sp, #8
 800330c:	e900 0006 	stmdb	r0, {r1, r2}
    while (*str) {
 8003310:	7820      	ldrb	r0, [r4, #0]
 8003312:	b170      	cbz	r0, 8003332 <ssd1306_WriteString+0x2e>
 8003314:	461e      	mov	r6, r3
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8003316:	466d      	mov	r5, sp
 8003318:	4633      	mov	r3, r6
 800331a:	e895 0006 	ldmia.w	r5, {r1, r2}
 800331e:	f7ff ff99 	bl	8003254 <ssd1306_WriteChar>
 8003322:	4602      	mov	r2, r0
 8003324:	7820      	ldrb	r0, [r4, #0]
 8003326:	4282      	cmp	r2, r0
 8003328:	d103      	bne.n	8003332 <ssd1306_WriteString+0x2e>
    while (*str) {
 800332a:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 800332e:	2800      	cmp	r0, #0
 8003330:	d1f2      	bne.n	8003318 <ssd1306_WriteString+0x14>
        str++;
    }
    
    // Everything ok
    return *str;
}
 8003332:	b002      	add	sp, #8
 8003334:	bd70      	pop	{r4, r5, r6, pc}
	...

08003338 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
    SSD1306.CurrentX = x;
 8003338:	4b01      	ldr	r3, [pc, #4]	; (8003340 <ssd1306_SetCursor+0x8>)
 800333a:	8018      	strh	r0, [r3, #0]
    SSD1306.CurrentY = y;
 800333c:	8059      	strh	r1, [r3, #2]
}
 800333e:	4770      	bx	lr
 8003340:	20000914 	.word	0x20000914

08003344 <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8003344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003348:	b085      	sub	sp, #20
 800334a:	4604      	mov	r4, r0
 800334c:	460e      	mov	r6, r1
 800334e:	4690      	mov	r8, r2
 8003350:	469b      	mov	fp, r3
 8003352:	f89d 9038 	ldrb.w	r9, [sp, #56]	; 0x38
    int32_t deltaX = abs(x2 - x1);
 8003356:	1a17      	subs	r7, r2, r0
 8003358:	2f00      	cmp	r7, #0
 800335a:	bfb8      	it	lt
 800335c:	427f      	neglt	r7, r7
    int32_t deltaY = abs(y2 - y1);
 800335e:	1a5b      	subs	r3, r3, r1
 8003360:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8003364:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8003368:	4613      	mov	r3, r2
    int32_t signX = ((x1 < x2) ? 1 : -1);
 800336a:	4580      	cmp	r8, r0
 800336c:	bf8c      	ite	hi
 800336e:	2201      	movhi	r2, #1
 8003370:	f04f 32ff 	movls.w	r2, #4294967295
 8003374:	9202      	str	r2, [sp, #8]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 8003376:	458b      	cmp	fp, r1
 8003378:	bf8c      	ite	hi
 800337a:	2201      	movhi	r2, #1
 800337c:	f04f 32ff 	movls.w	r2, #4294967295
 8003380:	9203      	str	r2, [sp, #12]
    int32_t error = deltaX - deltaY;
 8003382:	9301      	str	r3, [sp, #4]
 8003384:	1afd      	subs	r5, r7, r3
    int32_t error2;
    
    ssd1306_DrawPixel(x2, y2, color);
 8003386:	464a      	mov	r2, r9
 8003388:	4659      	mov	r1, fp
 800338a:	4640      	mov	r0, r8
 800338c:	f7ff ff3c 	bl	8003208 <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
        ssd1306_DrawPixel(x1, y1, color);
        error2 = error * 2;
        if(error2 > -deltaY) {
 8003390:	9b01      	ldr	r3, [sp, #4]
 8003392:	f1c3 0a00 	rsb	sl, r3, #0
    while((x1 != x2) || (y1 != y2)) {
 8003396:	e013      	b.n	80033c0 <ssd1306_Line+0x7c>
        ssd1306_DrawPixel(x1, y1, color);
 8003398:	464a      	mov	r2, r9
 800339a:	4631      	mov	r1, r6
 800339c:	4620      	mov	r0, r4
 800339e:	f7ff ff33 	bl	8003208 <ssd1306_DrawPixel>
        error2 = error * 2;
 80033a2:	006b      	lsls	r3, r5, #1
        if(error2 > -deltaY) {
 80033a4:	ebba 0f45 	cmp.w	sl, r5, lsl #1
 80033a8:	da04      	bge.n	80033b4 <ssd1306_Line+0x70>
            error -= deltaY;
 80033aa:	9a01      	ldr	r2, [sp, #4]
 80033ac:	1aad      	subs	r5, r5, r2
            x1 += signX;
 80033ae:	9a02      	ldr	r2, [sp, #8]
 80033b0:	4414      	add	r4, r2
 80033b2:	b2e4      	uxtb	r4, r4
        }
        
        if(error2 < deltaX) {
 80033b4:	429f      	cmp	r7, r3
 80033b6:	dd03      	ble.n	80033c0 <ssd1306_Line+0x7c>
            error += deltaX;
 80033b8:	443d      	add	r5, r7
            y1 += signY;
 80033ba:	9b03      	ldr	r3, [sp, #12]
 80033bc:	441e      	add	r6, r3
 80033be:	b2f6      	uxtb	r6, r6
    while((x1 != x2) || (y1 != y2)) {
 80033c0:	4544      	cmp	r4, r8
 80033c2:	d1e9      	bne.n	8003398 <ssd1306_Line+0x54>
 80033c4:	455e      	cmp	r6, fp
 80033c6:	d1e7      	bne.n	8003398 <ssd1306_Line+0x54>
        }
    }
    return;
}
 80033c8:	b005      	add	sp, #20
 80033ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080033ce <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80033ce:	b510      	push	{r4, lr}
 80033d0:	4604      	mov	r4, r0
    const uint8_t kSetContrastControlRegister = 0x81;
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80033d2:	2081      	movs	r0, #129	; 0x81
 80033d4:	f7ff fec2 	bl	800315c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80033d8:	4620      	mov	r0, r4
 80033da:	f7ff febf 	bl	800315c <ssd1306_WriteCommand>
}
 80033de:	bd10      	pop	{r4, pc}

080033e0 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80033e0:	b508      	push	{r3, lr}
 80033e2:	4602      	mov	r2, r0
    uint8_t value;
    if (on) {
 80033e4:	4603      	mov	r3, r0
        value = 0xAF;   // Display on
        SSD1306.DisplayOn = 1;
    } else {
        value = 0xAE;   // Display off
 80033e6:	2800      	cmp	r0, #0
 80033e8:	bf13      	iteet	ne
 80033ea:	20af      	movne	r0, #175	; 0xaf
 80033ec:	20ae      	moveq	r0, #174	; 0xae
 80033ee:	4613      	moveq	r3, r2
 80033f0:	2301      	movne	r3, #1
 80033f2:	4a02      	ldr	r2, [pc, #8]	; (80033fc <ssd1306_SetDisplayOn+0x1c>)
 80033f4:	7153      	strb	r3, [r2, #5]
        SSD1306.DisplayOn = 0;
    }
    ssd1306_WriteCommand(value);
 80033f6:	f7ff feb1 	bl	800315c <ssd1306_WriteCommand>
}
 80033fa:	bd08      	pop	{r3, pc}
 80033fc:	20000914 	.word	0x20000914

08003400 <ssd1306_Init>:
void ssd1306_Init(void) {
 8003400:	b508      	push	{r3, lr}
    HAL_Delay(100);
 8003402:	2064      	movs	r0, #100	; 0x64
 8003404:	f000 f884 	bl	8003510 <HAL_Delay>
    ssd1306_SetDisplayOn(0); //display off
 8003408:	2000      	movs	r0, #0
 800340a:	f7ff ffe9 	bl	80033e0 <ssd1306_SetDisplayOn>
    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 800340e:	2020      	movs	r0, #32
 8003410:	f7ff fea4 	bl	800315c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8003414:	2000      	movs	r0, #0
 8003416:	f7ff fea1 	bl	800315c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800341a:	20b0      	movs	r0, #176	; 0xb0
 800341c:	f7ff fe9e 	bl	800315c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8003420:	20c8      	movs	r0, #200	; 0xc8
 8003422:	f7ff fe9b 	bl	800315c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //---set low column address
 8003426:	2000      	movs	r0, #0
 8003428:	f7ff fe98 	bl	800315c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800342c:	2010      	movs	r0, #16
 800342e:	f7ff fe95 	bl	800315c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8003432:	2040      	movs	r0, #64	; 0x40
 8003434:	f7ff fe92 	bl	800315c <ssd1306_WriteCommand>
    ssd1306_SetContrast(0xFF);
 8003438:	20ff      	movs	r0, #255	; 0xff
 800343a:	f7ff ffc8 	bl	80033ce <ssd1306_SetContrast>
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 800343e:	20a1      	movs	r0, #161	; 0xa1
 8003440:	f7ff fe8c 	bl	800315c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xA6); //--set normal color
 8003444:	20a6      	movs	r0, #166	; 0xa6
 8003446:	f7ff fe89 	bl	800315c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 800344a:	20a8      	movs	r0, #168	; 0xa8
 800344c:	f7ff fe86 	bl	800315c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); //
 8003450:	203f      	movs	r0, #63	; 0x3f
 8003452:	f7ff fe83 	bl	800315c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8003456:	20a4      	movs	r0, #164	; 0xa4
 8003458:	f7ff fe80 	bl	800315c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 800345c:	20d3      	movs	r0, #211	; 0xd3
 800345e:	f7ff fe7d 	bl	800315c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8003462:	2000      	movs	r0, #0
 8003464:	f7ff fe7a 	bl	800315c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8003468:	20d5      	movs	r0, #213	; 0xd5
 800346a:	f7ff fe77 	bl	800315c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 800346e:	20f0      	movs	r0, #240	; 0xf0
 8003470:	f7ff fe74 	bl	800315c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8003474:	20d9      	movs	r0, #217	; 0xd9
 8003476:	f7ff fe71 	bl	800315c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 800347a:	2022      	movs	r0, #34	; 0x22
 800347c:	f7ff fe6e 	bl	800315c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8003480:	20da      	movs	r0, #218	; 0xda
 8003482:	f7ff fe6b 	bl	800315c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
 8003486:	2012      	movs	r0, #18
 8003488:	f7ff fe68 	bl	800315c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xDB); //--set vcomh
 800348c:	20db      	movs	r0, #219	; 0xdb
 800348e:	f7ff fe65 	bl	800315c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8003492:	2020      	movs	r0, #32
 8003494:	f7ff fe62 	bl	800315c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8003498:	208d      	movs	r0, #141	; 0x8d
 800349a:	f7ff fe5f 	bl	800315c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 800349e:	2014      	movs	r0, #20
 80034a0:	f7ff fe5c 	bl	800315c <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80034a4:	2001      	movs	r0, #1
 80034a6:	f7ff ff9b 	bl	80033e0 <ssd1306_SetDisplayOn>
    ssd1306_Fill(Black);
 80034aa:	2000      	movs	r0, #0
 80034ac:	f7ff fe80 	bl	80031b0 <ssd1306_Fill>
    ssd1306_UpdateScreen();
 80034b0:	f7ff fe8c 	bl	80031cc <ssd1306_UpdateScreen>
    SSD1306.CurrentX = 0;
 80034b4:	4b03      	ldr	r3, [pc, #12]	; (80034c4 <ssd1306_Init+0xc4>)
 80034b6:	2200      	movs	r2, #0
 80034b8:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80034ba:	805a      	strh	r2, [r3, #2]
    SSD1306.Initialized = 1;
 80034bc:	2201      	movs	r2, #1
 80034be:	711a      	strb	r2, [r3, #4]
}
 80034c0:	bd08      	pop	{r3, pc}
 80034c2:	bf00      	nop
 80034c4:	20000914 	.word	0x20000914

080034c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80034c8:	b508      	push	{r3, lr}
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80034ca:	4a07      	ldr	r2, [pc, #28]	; (80034e8 <HAL_Init+0x20>)
 80034cc:	6813      	ldr	r3, [r2, #0]
 80034ce:	f043 0310 	orr.w	r3, r3, #16
 80034d2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80034d4:	2003      	movs	r0, #3
 80034d6:	f000 f82f 	bl	8003538 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80034da:	200f      	movs	r0, #15
 80034dc:	f7ff f958 	bl	8002790 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80034e0:	f7ff f92c 	bl	800273c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80034e4:	2000      	movs	r0, #0
 80034e6:	bd08      	pop	{r3, pc}
 80034e8:	40022000 	.word	0x40022000

080034ec <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80034ec:	4a03      	ldr	r2, [pc, #12]	; (80034fc <HAL_IncTick+0x10>)
 80034ee:	6811      	ldr	r1, [r2, #0]
 80034f0:	4b03      	ldr	r3, [pc, #12]	; (8003500 <HAL_IncTick+0x14>)
 80034f2:	781b      	ldrb	r3, [r3, #0]
 80034f4:	440b      	add	r3, r1
 80034f6:	6013      	str	r3, [r2, #0]
}
 80034f8:	4770      	bx	lr
 80034fa:	bf00      	nop
 80034fc:	20000d1c 	.word	0x20000d1c
 8003500:	2000000c 	.word	0x2000000c

08003504 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003504:	4b01      	ldr	r3, [pc, #4]	; (800350c <HAL_GetTick+0x8>)
 8003506:	6818      	ldr	r0, [r3, #0]
}
 8003508:	4770      	bx	lr
 800350a:	bf00      	nop
 800350c:	20000d1c 	.word	0x20000d1c

08003510 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003510:	b538      	push	{r3, r4, r5, lr}
 8003512:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003514:	f7ff fff6 	bl	8003504 <HAL_GetTick>
 8003518:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800351a:	f1b4 3fff 	cmp.w	r4, #4294967295
 800351e:	d002      	beq.n	8003526 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8003520:	4b04      	ldr	r3, [pc, #16]	; (8003534 <HAL_Delay+0x24>)
 8003522:	781b      	ldrb	r3, [r3, #0]
 8003524:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003526:	f7ff ffed 	bl	8003504 <HAL_GetTick>
 800352a:	1b40      	subs	r0, r0, r5
 800352c:	42a0      	cmp	r0, r4
 800352e:	d3fa      	bcc.n	8003526 <HAL_Delay+0x16>
  {
  }
}
 8003530:	bd38      	pop	{r3, r4, r5, pc}
 8003532:	bf00      	nop
 8003534:	2000000c 	.word	0x2000000c

08003538 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003538:	4907      	ldr	r1, [pc, #28]	; (8003558 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800353a:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800353c:	0203      	lsls	r3, r0, #8
 800353e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003542:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003546:	0412      	lsls	r2, r2, #16
 8003548:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800354a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800354c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003550:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8003554:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003556:	4770      	bx	lr
 8003558:	e000ed00 	.word	0xe000ed00

0800355c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800355c:	b500      	push	{lr}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800355e:	4b18      	ldr	r3, [pc, #96]	; (80035c0 <HAL_NVIC_SetPriority+0x64>)
 8003560:	68db      	ldr	r3, [r3, #12]
 8003562:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003566:	f1c3 0c07 	rsb	ip, r3, #7
 800356a:	f1bc 0f04 	cmp.w	ip, #4
 800356e:	bf28      	it	cs
 8003570:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003574:	f103 0e04 	add.w	lr, r3, #4
 8003578:	f1be 0f06 	cmp.w	lr, #6
 800357c:	bf8c      	ite	hi
 800357e:	3b03      	subhi	r3, #3
 8003580:	2300      	movls	r3, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003582:	f04f 3eff 	mov.w	lr, #4294967295
 8003586:	fa0e fc0c 	lsl.w	ip, lr, ip
 800358a:	ea21 010c 	bic.w	r1, r1, ip
 800358e:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003590:	fa0e fe03 	lsl.w	lr, lr, r3
 8003594:	ea22 020e 	bic.w	r2, r2, lr
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003598:	4311      	orrs	r1, r2
  if ((int32_t)(IRQn) >= 0)
 800359a:	2800      	cmp	r0, #0
 800359c:	db09      	blt.n	80035b2 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800359e:	0109      	lsls	r1, r1, #4
 80035a0:	b2c9      	uxtb	r1, r1
 80035a2:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80035a6:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80035aa:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80035ae:	f85d fb04 	ldr.w	pc, [sp], #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035b2:	f000 000f 	and.w	r0, r0, #15
 80035b6:	0109      	lsls	r1, r1, #4
 80035b8:	b2c9      	uxtb	r1, r1
 80035ba:	4b02      	ldr	r3, [pc, #8]	; (80035c4 <HAL_NVIC_SetPriority+0x68>)
 80035bc:	5419      	strb	r1, [r3, r0]
 80035be:	e7f6      	b.n	80035ae <HAL_NVIC_SetPriority+0x52>
 80035c0:	e000ed00 	.word	0xe000ed00
 80035c4:	e000ed14 	.word	0xe000ed14

080035c8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80035c8:	2800      	cmp	r0, #0
 80035ca:	db07      	blt.n	80035dc <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035cc:	0941      	lsrs	r1, r0, #5
 80035ce:	f000 001f 	and.w	r0, r0, #31
 80035d2:	2301      	movs	r3, #1
 80035d4:	4083      	lsls	r3, r0
 80035d6:	4a02      	ldr	r2, [pc, #8]	; (80035e0 <HAL_NVIC_EnableIRQ+0x18>)
 80035d8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80035dc:	4770      	bx	lr
 80035de:	bf00      	nop
 80035e0:	e000e100 	.word	0xe000e100

080035e4 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80035e4:	4603      	mov	r3, r0
  HAL_StatusTypeDef status = HAL_OK;
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035e6:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
 80035ea:	b2d2      	uxtb	r2, r2
 80035ec:	2a02      	cmp	r2, #2
 80035ee:	d006      	beq.n	80035fe <HAL_DMA_Abort+0x1a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035f0:	2204      	movs	r2, #4
 80035f2:	6382      	str	r2, [r0, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
    
    return HAL_ERROR;
 80035f4:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 80035f6:	2200      	movs	r2, #0
 80035f8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
  
  return status; 
}
 80035fc:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80035fe:	6801      	ldr	r1, [r0, #0]
 8003600:	680a      	ldr	r2, [r1, #0]
 8003602:	f022 020e 	bic.w	r2, r2, #14
 8003606:	600a      	str	r2, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 8003608:	6801      	ldr	r1, [r0, #0]
 800360a:	680a      	ldr	r2, [r1, #0]
 800360c:	f022 0201 	bic.w	r2, r2, #1
 8003610:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003612:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8003614:	2101      	movs	r1, #1
 8003616:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003618:	fa01 f202 	lsl.w	r2, r1, r2
 800361c:	6042      	str	r2, [r0, #4]
  hdma->State = HAL_DMA_STATE_READY;
 800361e:	f883 1021 	strb.w	r1, [r3, #33]	; 0x21
  return status; 
 8003622:	2000      	movs	r0, #0
 8003624:	e7e7      	b.n	80035f6 <HAL_DMA_Abort+0x12>
	...

08003628 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003628:	b508      	push	{r3, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800362a:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800362e:	b2db      	uxtb	r3, r3
 8003630:	2b02      	cmp	r3, #2
 8003632:	d003      	beq.n	800363c <HAL_DMA_Abort_IT+0x14>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003634:	2304      	movs	r3, #4
 8003636:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 8003638:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    } 
  }
  return status;
}
 800363a:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800363c:	6802      	ldr	r2, [r0, #0]
 800363e:	6813      	ldr	r3, [r2, #0]
 8003640:	f023 030e 	bic.w	r3, r3, #14
 8003644:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8003646:	6802      	ldr	r2, [r0, #0]
 8003648:	6813      	ldr	r3, [r2, #0]
 800364a:	f023 0301 	bic.w	r3, r3, #1
 800364e:	6013      	str	r3, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003650:	6803      	ldr	r3, [r0, #0]
 8003652:	4a19      	ldr	r2, [pc, #100]	; (80036b8 <HAL_DMA_Abort_IT+0x90>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d013      	beq.n	8003680 <HAL_DMA_Abort_IT+0x58>
 8003658:	3214      	adds	r2, #20
 800365a:	4293      	cmp	r3, r2
 800365c:	d01e      	beq.n	800369c <HAL_DMA_Abort_IT+0x74>
 800365e:	3214      	adds	r2, #20
 8003660:	4293      	cmp	r3, r2
 8003662:	d01d      	beq.n	80036a0 <HAL_DMA_Abort_IT+0x78>
 8003664:	3214      	adds	r2, #20
 8003666:	4293      	cmp	r3, r2
 8003668:	d01d      	beq.n	80036a6 <HAL_DMA_Abort_IT+0x7e>
 800366a:	3214      	adds	r2, #20
 800366c:	4293      	cmp	r3, r2
 800366e:	d01d      	beq.n	80036ac <HAL_DMA_Abort_IT+0x84>
 8003670:	3214      	adds	r2, #20
 8003672:	4293      	cmp	r3, r2
 8003674:	bf0c      	ite	eq
 8003676:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 800367a:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 800367e:	e000      	b.n	8003682 <HAL_DMA_Abort_IT+0x5a>
 8003680:	2301      	movs	r3, #1
 8003682:	4a0e      	ldr	r2, [pc, #56]	; (80036bc <HAL_DMA_Abort_IT+0x94>)
 8003684:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8003686:	2301      	movs	r3, #1
 8003688:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 800368c:	2300      	movs	r3, #0
 800368e:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8003692:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003694:	b16b      	cbz	r3, 80036b2 <HAL_DMA_Abort_IT+0x8a>
      hdma->XferAbortCallback(hdma);
 8003696:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8003698:	2000      	movs	r0, #0
 800369a:	e7ce      	b.n	800363a <HAL_DMA_Abort_IT+0x12>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800369c:	2310      	movs	r3, #16
 800369e:	e7f0      	b.n	8003682 <HAL_DMA_Abort_IT+0x5a>
 80036a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80036a4:	e7ed      	b.n	8003682 <HAL_DMA_Abort_IT+0x5a>
 80036a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036aa:	e7ea      	b.n	8003682 <HAL_DMA_Abort_IT+0x5a>
 80036ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80036b0:	e7e7      	b.n	8003682 <HAL_DMA_Abort_IT+0x5a>
  HAL_StatusTypeDef status = HAL_OK;
 80036b2:	2000      	movs	r0, #0
 80036b4:	e7c1      	b.n	800363a <HAL_DMA_Abort_IT+0x12>
 80036b6:	bf00      	nop
 80036b8:	40020008 	.word	0x40020008
 80036bc:	40020000 	.word	0x40020000

080036c0 <HAL_DMA_GetState>:
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
  /* Return DMA handle state */
  return hdma->State;
 80036c0:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
}
 80036c4:	4770      	bx	lr
	...

080036c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036cc:	b083      	sub	sp, #12
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036ce:	f8d1 9000 	ldr.w	r9, [r1]
 80036d2:	f1b9 0f00 	cmp.w	r9, #0
 80036d6:	f000 811f 	beq.w	8003918 <HAL_GPIO_Init+0x250>
 80036da:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 80036dc:	4613      	mov	r3, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80036de:	4e90      	ldr	r6, [pc, #576]	; (8003920 <HAL_GPIO_Init+0x258>)
        {
          SET_BIT(EXTI->IMR, iocurrent);
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80036e0:	4c90      	ldr	r4, [pc, #576]	; (8003924 <HAL_GPIO_Init+0x25c>)
      switch (GPIO_Init->Mode)
 80036e2:	4d91      	ldr	r5, [pc, #580]	; (8003928 <HAL_GPIO_Init+0x260>)
 80036e4:	f8df e244 	ldr.w	lr, [pc, #580]	; 800392c <HAL_GPIO_Init+0x264>
 80036e8:	4694      	mov	ip, r2
 80036ea:	e0ba      	b.n	8003862 <HAL_GPIO_Init+0x19a>
 80036ec:	f04f 0c00 	mov.w	ip, #0
 80036f0:	e025      	b.n	800373e <HAL_GPIO_Init+0x76>
 80036f2:	45a9      	cmp	r9, r5
 80036f4:	d00f      	beq.n	8003716 <HAL_GPIO_Init+0x4e>
 80036f6:	d906      	bls.n	8003706 <HAL_GPIO_Init+0x3e>
 80036f8:	45f1      	cmp	r9, lr
 80036fa:	d00c      	beq.n	8003716 <HAL_GPIO_Init+0x4e>
 80036fc:	f8df a230 	ldr.w	sl, [pc, #560]	; 8003930 <HAL_GPIO_Init+0x268>
 8003700:	45d1      	cmp	r9, sl
 8003702:	d008      	beq.n	8003716 <HAL_GPIO_Init+0x4e>
 8003704:	e01b      	b.n	800373e <HAL_GPIO_Init+0x76>
 8003706:	f8df a22c 	ldr.w	sl, [pc, #556]	; 8003934 <HAL_GPIO_Init+0x26c>
 800370a:	45d1      	cmp	r9, sl
 800370c:	d003      	beq.n	8003716 <HAL_GPIO_Init+0x4e>
 800370e:	f50a 2a70 	add.w	sl, sl, #983040	; 0xf0000
 8003712:	45d1      	cmp	r9, sl
 8003714:	d10f      	bne.n	8003736 <HAL_GPIO_Init+0x6e>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003716:	f8d1 c008 	ldr.w	ip, [r1, #8]
 800371a:	f1bc 0f00 	cmp.w	ip, #0
 800371e:	f000 80ef 	beq.w	8003900 <HAL_GPIO_Init+0x238>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003722:	f1bc 0f01 	cmp.w	ip, #1
            GPIOx->BSRR = ioposition;
 8003726:	bf0c      	ite	eq
 8003728:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 800372c:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003730:	f04f 0c08 	mov.w	ip, #8
 8003734:	e003      	b.n	800373e <HAL_GPIO_Init+0x76>
      switch (GPIO_Init->Mode)
 8003736:	f5aa 1a80 	sub.w	sl, sl, #1048576	; 0x100000
 800373a:	45d1      	cmp	r9, sl
 800373c:	d0eb      	beq.n	8003716 <HAL_GPIO_Init+0x4e>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800373e:	2fff      	cmp	r7, #255	; 0xff
 8003740:	bf99      	ittee	ls
 8003742:	4681      	movls	r9, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003744:	4692      	movls	sl, r2
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003746:	f100 0904 	addhi.w	r9, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800374a:	f1a2 0a20 	subhi.w	sl, r2, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800374e:	f8d9 8000 	ldr.w	r8, [r9]
 8003752:	f04f 0b0f 	mov.w	fp, #15
 8003756:	fa0b fb0a 	lsl.w	fp, fp, sl
 800375a:	ea28 080b 	bic.w	r8, r8, fp
 800375e:	fa0c fa0a 	lsl.w	sl, ip, sl
 8003762:	ea48 080a 	orr.w	r8, r8, sl
 8003766:	f8c9 8000 	str.w	r8, [r9]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800376a:	f8d1 8004 	ldr.w	r8, [r1, #4]
 800376e:	f018 5f80 	tst.w	r8, #268435456	; 0x10000000
 8003772:	d06f      	beq.n	8003854 <HAL_GPIO_Init+0x18c>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003774:	f8d6 8018 	ldr.w	r8, [r6, #24]
 8003778:	f048 0801 	orr.w	r8, r8, #1
 800377c:	f8c6 8018 	str.w	r8, [r6, #24]
 8003780:	f8d6 8018 	ldr.w	r8, [r6, #24]
 8003784:	f008 0801 	and.w	r8, r8, #1
 8003788:	f8cd 8004 	str.w	r8, [sp, #4]
 800378c:	f8dd 8004 	ldr.w	r8, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8003790:	f023 0803 	bic.w	r8, r3, #3
 8003794:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8003798:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
 800379c:	f8d8 a008 	ldr.w	sl, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80037a0:	f003 0b03 	and.w	fp, r3, #3
 80037a4:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80037a8:	f04f 090f 	mov.w	r9, #15
 80037ac:	fa09 f90b 	lsl.w	r9, r9, fp
 80037b0:	ea2a 0a09 	bic.w	sl, sl, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80037b4:	f8df 9180 	ldr.w	r9, [pc, #384]	; 8003938 <HAL_GPIO_Init+0x270>
 80037b8:	4548      	cmp	r0, r9
 80037ba:	f000 80a4 	beq.w	8003906 <HAL_GPIO_Init+0x23e>
 80037be:	f509 6980 	add.w	r9, r9, #1024	; 0x400
 80037c2:	4548      	cmp	r0, r9
 80037c4:	f000 80a2 	beq.w	800390c <HAL_GPIO_Init+0x244>
 80037c8:	f509 6980 	add.w	r9, r9, #1024	; 0x400
 80037cc:	4548      	cmp	r0, r9
 80037ce:	f000 80a0 	beq.w	8003912 <HAL_GPIO_Init+0x24a>
 80037d2:	f509 6980 	add.w	r9, r9, #1024	; 0x400
 80037d6:	4548      	cmp	r0, r9
 80037d8:	bf0c      	ite	eq
 80037da:	f04f 0903 	moveq.w	r9, #3
 80037de:	f04f 0904 	movne.w	r9, #4
 80037e2:	fa09 f90b 	lsl.w	r9, r9, fp
 80037e6:	ea49 090a 	orr.w	r9, r9, sl
        AFIO->EXTICR[position >> 2u] = temp;
 80037ea:	f8c8 9008 	str.w	r9, [r8, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80037ee:	f8d1 8004 	ldr.w	r8, [r1, #4]
 80037f2:	f418 1f80 	tst.w	r8, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80037f6:	f8d4 8008 	ldr.w	r8, [r4, #8]
 80037fa:	bf14      	ite	ne
 80037fc:	ea48 0807 	orrne.w	r8, r8, r7
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003800:	ea28 0807 	biceq.w	r8, r8, r7
 8003804:	f8c4 8008 	str.w	r8, [r4, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003808:	f8d1 8004 	ldr.w	r8, [r1, #4]
 800380c:	f418 1f00 	tst.w	r8, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8003810:	f8d4 800c 	ldr.w	r8, [r4, #12]
 8003814:	bf14      	ite	ne
 8003816:	ea48 0807 	orrne.w	r8, r8, r7
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800381a:	ea28 0807 	biceq.w	r8, r8, r7
 800381e:	f8c4 800c 	str.w	r8, [r4, #12]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003822:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8003826:	f418 3f00 	tst.w	r8, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 800382a:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800382e:	bf14      	ite	ne
 8003830:	ea48 0807 	orrne.w	r8, r8, r7
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003834:	ea28 0807 	biceq.w	r8, r8, r7
 8003838:	f8c4 8004 	str.w	r8, [r4, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800383c:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8003840:	f418 3f80 	tst.w	r8, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8003844:	f8d4 8000 	ldr.w	r8, [r4]
 8003848:	bf14      	ite	ne
 800384a:	ea48 0707 	orrne.w	r7, r8, r7
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800384e:	ea28 0707 	biceq.w	r7, r8, r7
 8003852:	6027      	str	r7, [r4, #0]
        }
      }
    }

	position++;
 8003854:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003856:	f8d1 9000 	ldr.w	r9, [r1]
 800385a:	3204      	adds	r2, #4
 800385c:	fa39 f703 	lsrs.w	r7, r9, r3
 8003860:	d05a      	beq.n	8003918 <HAL_GPIO_Init+0x250>
    ioposition = (0x01uL << position);
 8003862:	f04f 0801 	mov.w	r8, #1
 8003866:	fa08 f803 	lsl.w	r8, r8, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800386a:	ea08 0709 	and.w	r7, r8, r9
    if (iocurrent == ioposition)
 800386e:	ea38 0909 	bics.w	r9, r8, r9
 8003872:	d1ef      	bne.n	8003854 <HAL_GPIO_Init+0x18c>
      switch (GPIO_Init->Mode)
 8003874:	f8d1 9004 	ldr.w	r9, [r1, #4]
 8003878:	f1b9 0f12 	cmp.w	r9, #18
 800387c:	f63f af39 	bhi.w	80036f2 <HAL_GPIO_Init+0x2a>
 8003880:	f1b9 0f12 	cmp.w	r9, #18
 8003884:	f63f af5b 	bhi.w	800373e <HAL_GPIO_Init+0x76>
 8003888:	f20f 0a04 	addw	sl, pc, #4
 800388c:	f85a f029 	ldr.w	pc, [sl, r9, lsl #2]
 8003890:	08003717 	.word	0x08003717
 8003894:	080038dd 	.word	0x080038dd
 8003898:	080038ed 	.word	0x080038ed
 800389c:	080036ed 	.word	0x080036ed
 80038a0:	0800373f 	.word	0x0800373f
 80038a4:	0800373f 	.word	0x0800373f
 80038a8:	0800373f 	.word	0x0800373f
 80038ac:	0800373f 	.word	0x0800373f
 80038b0:	0800373f 	.word	0x0800373f
 80038b4:	0800373f 	.word	0x0800373f
 80038b8:	0800373f 	.word	0x0800373f
 80038bc:	0800373f 	.word	0x0800373f
 80038c0:	0800373f 	.word	0x0800373f
 80038c4:	0800373f 	.word	0x0800373f
 80038c8:	0800373f 	.word	0x0800373f
 80038cc:	0800373f 	.word	0x0800373f
 80038d0:	0800373f 	.word	0x0800373f
 80038d4:	080038e3 	.word	0x080038e3
 80038d8:	080038f7 	.word	0x080038f7
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80038dc:	f8d1 c00c 	ldr.w	ip, [r1, #12]
          break;
 80038e0:	e72d      	b.n	800373e <HAL_GPIO_Init+0x76>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80038e2:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 80038e6:	f10c 0c04 	add.w	ip, ip, #4
          break;
 80038ea:	e728      	b.n	800373e <HAL_GPIO_Init+0x76>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80038ec:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 80038f0:	f10c 0c08 	add.w	ip, ip, #8
          break;
 80038f4:	e723      	b.n	800373e <HAL_GPIO_Init+0x76>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80038f6:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 80038fa:	f10c 0c0c 	add.w	ip, ip, #12
          break;
 80038fe:	e71e      	b.n	800373e <HAL_GPIO_Init+0x76>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003900:	f04f 0c04 	mov.w	ip, #4
 8003904:	e71b      	b.n	800373e <HAL_GPIO_Init+0x76>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003906:	f04f 0900 	mov.w	r9, #0
 800390a:	e76a      	b.n	80037e2 <HAL_GPIO_Init+0x11a>
 800390c:	f04f 0901 	mov.w	r9, #1
 8003910:	e767      	b.n	80037e2 <HAL_GPIO_Init+0x11a>
 8003912:	f04f 0902 	mov.w	r9, #2
 8003916:	e764      	b.n	80037e2 <HAL_GPIO_Init+0x11a>
  }
}
 8003918:	b003      	add	sp, #12
 800391a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800391e:	bf00      	nop
 8003920:	40021000 	.word	0x40021000
 8003924:	40010400 	.word	0x40010400
 8003928:	10220000 	.word	0x10220000
 800392c:	10310000 	.word	0x10310000
 8003930:	10320000 	.word	0x10320000
 8003934:	10120000 	.word	0x10120000
 8003938:	40010800 	.word	0x40010800

0800393c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800393c:	b10a      	cbz	r2, 8003942 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 800393e:	6101      	str	r1, [r0, #16]
 8003940:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003942:	0409      	lsls	r1, r1, #16
 8003944:	6101      	str	r1, [r0, #16]
  }
}
 8003946:	4770      	bx	lr

08003948 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003948:	6803      	ldr	r3, [r0, #0]
 800394a:	695a      	ldr	r2, [r3, #20]
 800394c:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8003950:	d101      	bne.n	8003956 <I2C_IsAcknowledgeFailed+0xe>
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_ERROR;
  }
  return HAL_OK;
 8003952:	2000      	movs	r0, #0
}
 8003954:	4770      	bx	lr
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003956:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800395a:	615a      	str	r2, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 800395c:	2300      	movs	r3, #0
 800395e:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003960:	2220      	movs	r2, #32
 8003962:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003966:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800396a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800396c:	f042 0204 	orr.w	r2, r2, #4
 8003970:	6402      	str	r2, [r0, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 8003972:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    return HAL_ERROR;
 8003976:	2001      	movs	r0, #1
 8003978:	4770      	bx	lr

0800397a <I2C_WaitOnFlagUntilTimeout>:
{
 800397a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800397e:	4605      	mov	r5, r0
 8003980:	460c      	mov	r4, r1
 8003982:	4616      	mov	r6, r2
 8003984:	461f      	mov	r7, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003986:	f3c1 4807 	ubfx	r8, r1, #16, #8
 800398a:	f1b8 0f01 	cmp.w	r8, #1
 800398e:	682b      	ldr	r3, [r5, #0]
 8003990:	bf0c      	ite	eq
 8003992:	695b      	ldreq	r3, [r3, #20]
 8003994:	699b      	ldrne	r3, [r3, #24]
 8003996:	ea24 0c03 	bic.w	ip, r4, r3
 800399a:	fa1f fc8c 	uxth.w	ip, ip
 800399e:	fabc fc8c 	clz	ip, ip
 80039a2:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80039a6:	4566      	cmp	r6, ip
 80039a8:	d127      	bne.n	80039fa <I2C_WaitOnFlagUntilTimeout+0x80>
    if (Timeout != HAL_MAX_DELAY)
 80039aa:	f1b7 3fff 	cmp.w	r7, #4294967295
 80039ae:	d0ec      	beq.n	800398a <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039b0:	f7ff fda8 	bl	8003504 <HAL_GetTick>
 80039b4:	9b06      	ldr	r3, [sp, #24]
 80039b6:	1ac0      	subs	r0, r0, r3
 80039b8:	42b8      	cmp	r0, r7
 80039ba:	d801      	bhi.n	80039c0 <I2C_WaitOnFlagUntilTimeout+0x46>
 80039bc:	2f00      	cmp	r7, #0
 80039be:	d1e4      	bne.n	800398a <I2C_WaitOnFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80039c0:	f1b8 0f01 	cmp.w	r8, #1
 80039c4:	682b      	ldr	r3, [r5, #0]
 80039c6:	bf0c      	ite	eq
 80039c8:	695b      	ldreq	r3, [r3, #20]
 80039ca:	699b      	ldrne	r3, [r3, #24]
 80039cc:	ea24 0303 	bic.w	r3, r4, r3
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	fab3 f383 	clz	r3, r3
 80039d6:	095b      	lsrs	r3, r3, #5
 80039d8:	429e      	cmp	r6, r3
 80039da:	d1d6      	bne.n	800398a <I2C_WaitOnFlagUntilTimeout+0x10>
          hi2c->PreviousState     = I2C_STATE_NONE;
 80039dc:	2300      	movs	r3, #0
 80039de:	632b      	str	r3, [r5, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80039e0:	2220      	movs	r2, #32
 80039e2:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80039e6:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80039ea:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80039ec:	f042 0220 	orr.w	r2, r2, #32
 80039f0:	642a      	str	r2, [r5, #64]	; 0x40
          __HAL_UNLOCK(hi2c);
 80039f2:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
          return HAL_ERROR;
 80039f6:	2001      	movs	r0, #1
 80039f8:	e000      	b.n	80039fc <I2C_WaitOnFlagUntilTimeout+0x82>
  return HAL_OK;
 80039fa:	2000      	movs	r0, #0
}
 80039fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003a00 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8003a00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a04:	4605      	mov	r5, r0
 8003a06:	460e      	mov	r6, r1
 8003a08:	4617      	mov	r7, r2
 8003a0a:	4699      	mov	r9, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a0c:	f3c1 4807 	ubfx	r8, r1, #16, #8
 8003a10:	f1b8 0f01 	cmp.w	r8, #1
 8003a14:	682b      	ldr	r3, [r5, #0]
 8003a16:	bf0c      	ite	eq
 8003a18:	695c      	ldreq	r4, [r3, #20]
 8003a1a:	699c      	ldrne	r4, [r3, #24]
 8003a1c:	ea26 0404 	bic.w	r4, r6, r4
 8003a20:	b2a4      	uxth	r4, r4
 8003a22:	3c00      	subs	r4, #0
 8003a24:	bf18      	it	ne
 8003a26:	2401      	movne	r4, #1
 8003a28:	2c00      	cmp	r4, #0
 8003a2a:	d044      	beq.n	8003ab6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a2c:	682b      	ldr	r3, [r5, #0]
 8003a2e:	695a      	ldr	r2, [r3, #20]
 8003a30:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8003a34:	d127      	bne.n	8003a86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
    if (Timeout != HAL_MAX_DELAY)
 8003a36:	f1b7 3fff 	cmp.w	r7, #4294967295
 8003a3a:	d0e9      	beq.n	8003a10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a3c:	f7ff fd62 	bl	8003504 <HAL_GetTick>
 8003a40:	eba0 0009 	sub.w	r0, r0, r9
 8003a44:	42b8      	cmp	r0, r7
 8003a46:	d801      	bhi.n	8003a4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4c>
 8003a48:	2f00      	cmp	r7, #0
 8003a4a:	d1e1      	bne.n	8003a10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003a4c:	f1b8 0f01 	cmp.w	r8, #1
 8003a50:	682b      	ldr	r3, [r5, #0]
 8003a52:	bf0c      	ite	eq
 8003a54:	695b      	ldreq	r3, [r3, #20]
 8003a56:	699b      	ldrne	r3, [r3, #24]
 8003a58:	ea26 0303 	bic.w	r3, r6, r3
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	3b00      	subs	r3, #0
 8003a60:	bf18      	it	ne
 8003a62:	2301      	movne	r3, #1
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d0d3      	beq.n	8003a10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	632b      	str	r3, [r5, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003a6c:	2220      	movs	r2, #32
 8003a6e:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a72:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a76:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8003a78:	f042 0220 	orr.w	r2, r2, #32
 8003a7c:	642a      	str	r2, [r5, #64]	; 0x40
          __HAL_UNLOCK(hi2c);
 8003a7e:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
          return HAL_ERROR;
 8003a82:	2001      	movs	r0, #1
 8003a84:	e015      	b.n	8003ab2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb2>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a8c:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a8e:	682b      	ldr	r3, [r5, #0]
 8003a90:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a94:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a96:	2300      	movs	r3, #0
 8003a98:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a9a:	2220      	movs	r2, #32
 8003a9c:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003aa0:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003aa4:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8003aa6:	f042 0204 	orr.w	r2, r2, #4
 8003aaa:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8003aac:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 8003ab0:	2001      	movs	r0, #1
}
 8003ab2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  return HAL_OK;
 8003ab6:	2000      	movs	r0, #0
 8003ab8:	e7fb      	b.n	8003ab2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb2>

08003aba <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8003aba:	b570      	push	{r4, r5, r6, lr}
 8003abc:	4604      	mov	r4, r0
 8003abe:	460d      	mov	r5, r1
 8003ac0:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ac2:	6823      	ldr	r3, [r4, #0]
 8003ac4:	695b      	ldr	r3, [r3, #20]
 8003ac6:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003aca:	d121      	bne.n	8003b10 <I2C_WaitOnTXEFlagUntilTimeout+0x56>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003acc:	4620      	mov	r0, r4
 8003ace:	f7ff ff3b 	bl	8003948 <I2C_IsAcknowledgeFailed>
 8003ad2:	b9f8      	cbnz	r0, 8003b14 <I2C_WaitOnTXEFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 8003ad4:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003ad8:	d0f3      	beq.n	8003ac2 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ada:	f7ff fd13 	bl	8003504 <HAL_GetTick>
 8003ade:	1b80      	subs	r0, r0, r6
 8003ae0:	42a8      	cmp	r0, r5
 8003ae2:	d801      	bhi.n	8003ae8 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8003ae4:	2d00      	cmp	r5, #0
 8003ae6:	d1ec      	bne.n	8003ac2 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003ae8:	6823      	ldr	r3, [r4, #0]
 8003aea:	695b      	ldr	r3, [r3, #20]
 8003aec:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003af0:	d1e7      	bne.n	8003ac2 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003af2:	2300      	movs	r3, #0
 8003af4:	6323      	str	r3, [r4, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003af6:	2220      	movs	r2, #32
 8003af8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003afc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b00:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003b02:	f042 0220 	orr.w	r2, r2, #32
 8003b06:	6422      	str	r2, [r4, #64]	; 0x40
          __HAL_UNLOCK(hi2c);
 8003b08:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_ERROR;
 8003b0c:	2001      	movs	r0, #1
 8003b0e:	e000      	b.n	8003b12 <I2C_WaitOnTXEFlagUntilTimeout+0x58>
  return HAL_OK;
 8003b10:	2000      	movs	r0, #0
}
 8003b12:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8003b14:	2001      	movs	r0, #1
 8003b16:	e7fc      	b.n	8003b12 <I2C_WaitOnTXEFlagUntilTimeout+0x58>

08003b18 <I2C_RequestMemoryWrite>:
{
 8003b18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003b1c:	b085      	sub	sp, #20
 8003b1e:	4604      	mov	r4, r0
 8003b20:	460d      	mov	r5, r1
 8003b22:	4691      	mov	r9, r2
 8003b24:	461f      	mov	r7, r3
 8003b26:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8003b2a:	9e0d      	ldr	r6, [sp, #52]	; 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b2c:	6803      	ldr	r3, [r0, #0]
 8003b2e:	6819      	ldr	r1, [r3, #0]
 8003b30:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8003b34:	6019      	str	r1, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b36:	9600      	str	r6, [sp, #0]
 8003b38:	4643      	mov	r3, r8
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003b40:	f7ff ff1b 	bl	800397a <I2C_WaitOnFlagUntilTimeout>
 8003b44:	b970      	cbnz	r0, 8003b64 <I2C_RequestMemoryWrite+0x4c>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003b46:	6823      	ldr	r3, [r4, #0]
 8003b48:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8003b4c:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b4e:	4633      	mov	r3, r6
 8003b50:	4642      	mov	r2, r8
 8003b52:	4928      	ldr	r1, [pc, #160]	; (8003bf4 <I2C_RequestMemoryWrite+0xdc>)
 8003b54:	4620      	mov	r0, r4
 8003b56:	f7ff ff53 	bl	8003a00 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b5a:	b168      	cbz	r0, 8003b78 <I2C_RequestMemoryWrite+0x60>
    return HAL_ERROR;
 8003b5c:	2001      	movs	r0, #1
}
 8003b5e:	b005      	add	sp, #20
 8003b60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b64:	6823      	ldr	r3, [r4, #0]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003b6c:	d040      	beq.n	8003bf0 <I2C_RequestMemoryWrite+0xd8>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b72:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8003b74:	2003      	movs	r0, #3
 8003b76:	e7f2      	b.n	8003b5e <I2C_RequestMemoryWrite+0x46>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b78:	2300      	movs	r3, #0
 8003b7a:	9303      	str	r3, [sp, #12]
 8003b7c:	6823      	ldr	r3, [r4, #0]
 8003b7e:	695a      	ldr	r2, [r3, #20]
 8003b80:	9203      	str	r2, [sp, #12]
 8003b82:	699b      	ldr	r3, [r3, #24]
 8003b84:	9303      	str	r3, [sp, #12]
 8003b86:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b88:	4632      	mov	r2, r6
 8003b8a:	4641      	mov	r1, r8
 8003b8c:	4620      	mov	r0, r4
 8003b8e:	f7ff ff94 	bl	8003aba <I2C_WaitOnTXEFlagUntilTimeout>
 8003b92:	b930      	cbnz	r0, 8003ba2 <I2C_RequestMemoryWrite+0x8a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003b94:	2f01      	cmp	r7, #1
 8003b96:	d110      	bne.n	8003bba <I2C_RequestMemoryWrite+0xa2>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003b98:	6823      	ldr	r3, [r4, #0]
 8003b9a:	fa5f f689 	uxtb.w	r6, r9
 8003b9e:	611e      	str	r6, [r3, #16]
 8003ba0:	e7dd      	b.n	8003b5e <I2C_RequestMemoryWrite+0x46>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ba2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003ba4:	2b04      	cmp	r3, #4
 8003ba6:	d001      	beq.n	8003bac <I2C_RequestMemoryWrite+0x94>
    return HAL_ERROR;
 8003ba8:	2001      	movs	r0, #1
 8003baa:	e7d8      	b.n	8003b5e <I2C_RequestMemoryWrite+0x46>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bac:	6822      	ldr	r2, [r4, #0]
 8003bae:	6813      	ldr	r3, [r2, #0]
 8003bb0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003bb4:	6013      	str	r3, [r2, #0]
    return HAL_ERROR;
 8003bb6:	2001      	movs	r0, #1
 8003bb8:	e7d1      	b.n	8003b5e <I2C_RequestMemoryWrite+0x46>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003bba:	6823      	ldr	r3, [r4, #0]
 8003bbc:	ea4f 2219 	mov.w	r2, r9, lsr #8
 8003bc0:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bc2:	4632      	mov	r2, r6
 8003bc4:	4641      	mov	r1, r8
 8003bc6:	4620      	mov	r0, r4
 8003bc8:	f7ff ff77 	bl	8003aba <I2C_WaitOnTXEFlagUntilTimeout>
 8003bcc:	b920      	cbnz	r0, 8003bd8 <I2C_RequestMemoryWrite+0xc0>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003bce:	6823      	ldr	r3, [r4, #0]
 8003bd0:	fa5f f689 	uxtb.w	r6, r9
 8003bd4:	611e      	str	r6, [r3, #16]
 8003bd6:	e7c2      	b.n	8003b5e <I2C_RequestMemoryWrite+0x46>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bd8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003bda:	2b04      	cmp	r3, #4
 8003bdc:	d001      	beq.n	8003be2 <I2C_RequestMemoryWrite+0xca>
      return HAL_ERROR;
 8003bde:	2001      	movs	r0, #1
 8003be0:	e7bd      	b.n	8003b5e <I2C_RequestMemoryWrite+0x46>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003be2:	6822      	ldr	r2, [r4, #0]
 8003be4:	6813      	ldr	r3, [r2, #0]
 8003be6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003bea:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 8003bec:	2001      	movs	r0, #1
 8003bee:	e7b6      	b.n	8003b5e <I2C_RequestMemoryWrite+0x46>
    return HAL_TIMEOUT;
 8003bf0:	2003      	movs	r0, #3
 8003bf2:	e7b4      	b.n	8003b5e <I2C_RequestMemoryWrite+0x46>
 8003bf4:	00010002 	.word	0x00010002

08003bf8 <I2C_RequestMemoryRead>:
{
 8003bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003bfc:	b084      	sub	sp, #16
 8003bfe:	4604      	mov	r4, r0
 8003c00:	460d      	mov	r5, r1
 8003c02:	4616      	mov	r6, r2
 8003c04:	4699      	mov	r9, r3
 8003c06:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8003c08:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c0c:	6802      	ldr	r2, [r0, #0]
 8003c0e:	6813      	ldr	r3, [r2, #0]
 8003c10:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c14:	6013      	str	r3, [r2, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c16:	6803      	ldr	r3, [r0, #0]
 8003c18:	6819      	ldr	r1, [r3, #0]
 8003c1a:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8003c1e:	6019      	str	r1, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c20:	f8cd 8000 	str.w	r8, [sp]
 8003c24:	463b      	mov	r3, r7
 8003c26:	2200      	movs	r2, #0
 8003c28:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003c2c:	f7ff fea5 	bl	800397a <I2C_WaitOnFlagUntilTimeout>
 8003c30:	b980      	cbnz	r0, 8003c54 <I2C_RequestMemoryRead+0x5c>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003c32:	fa5f fa85 	uxtb.w	sl, r5
 8003c36:	6823      	ldr	r3, [r4, #0]
 8003c38:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8003c3c:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c3e:	4643      	mov	r3, r8
 8003c40:	463a      	mov	r2, r7
 8003c42:	4945      	ldr	r1, [pc, #276]	; (8003d58 <I2C_RequestMemoryRead+0x160>)
 8003c44:	4620      	mov	r0, r4
 8003c46:	f7ff fedb 	bl	8003a00 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c4a:	b168      	cbz	r0, 8003c68 <I2C_RequestMemoryRead+0x70>
    return HAL_ERROR;
 8003c4c:	2001      	movs	r0, #1
}
 8003c4e:	b004      	add	sp, #16
 8003c50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c54:	6823      	ldr	r3, [r4, #0]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003c5c:	d077      	beq.n	8003d4e <I2C_RequestMemoryRead+0x156>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c62:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8003c64:	2003      	movs	r0, #3
 8003c66:	e7f2      	b.n	8003c4e <I2C_RequestMemoryRead+0x56>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c68:	2300      	movs	r3, #0
 8003c6a:	9303      	str	r3, [sp, #12]
 8003c6c:	6823      	ldr	r3, [r4, #0]
 8003c6e:	695a      	ldr	r2, [r3, #20]
 8003c70:	9203      	str	r2, [sp, #12]
 8003c72:	699b      	ldr	r3, [r3, #24]
 8003c74:	9303      	str	r3, [sp, #12]
 8003c76:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c78:	4642      	mov	r2, r8
 8003c7a:	4639      	mov	r1, r7
 8003c7c:	4620      	mov	r0, r4
 8003c7e:	f7ff ff1c 	bl	8003aba <I2C_WaitOnTXEFlagUntilTimeout>
 8003c82:	b988      	cbnz	r0, 8003ca8 <I2C_RequestMemoryRead+0xb0>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003c84:	f1b9 0f01 	cmp.w	r9, #1
 8003c88:	d11a      	bne.n	8003cc0 <I2C_RequestMemoryRead+0xc8>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003c8a:	6823      	ldr	r3, [r4, #0]
 8003c8c:	b2f6      	uxtb	r6, r6
 8003c8e:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c90:	4642      	mov	r2, r8
 8003c92:	4639      	mov	r1, r7
 8003c94:	4620      	mov	r0, r4
 8003c96:	f7ff ff10 	bl	8003aba <I2C_WaitOnTXEFlagUntilTimeout>
 8003c9a:	2800      	cmp	r0, #0
 8003c9c:	d030      	beq.n	8003d00 <I2C_RequestMemoryRead+0x108>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c9e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003ca0:	2b04      	cmp	r3, #4
 8003ca2:	d026      	beq.n	8003cf2 <I2C_RequestMemoryRead+0xfa>
    return HAL_ERROR;
 8003ca4:	2001      	movs	r0, #1
 8003ca6:	e7d2      	b.n	8003c4e <I2C_RequestMemoryRead+0x56>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ca8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003caa:	2b04      	cmp	r3, #4
 8003cac:	d001      	beq.n	8003cb2 <I2C_RequestMemoryRead+0xba>
    return HAL_ERROR;
 8003cae:	2001      	movs	r0, #1
 8003cb0:	e7cd      	b.n	8003c4e <I2C_RequestMemoryRead+0x56>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cb2:	6822      	ldr	r2, [r4, #0]
 8003cb4:	6813      	ldr	r3, [r2, #0]
 8003cb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003cba:	6013      	str	r3, [r2, #0]
    return HAL_ERROR;
 8003cbc:	2001      	movs	r0, #1
 8003cbe:	e7c6      	b.n	8003c4e <I2C_RequestMemoryRead+0x56>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003cc0:	6823      	ldr	r3, [r4, #0]
 8003cc2:	0a32      	lsrs	r2, r6, #8
 8003cc4:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cc6:	4642      	mov	r2, r8
 8003cc8:	4639      	mov	r1, r7
 8003cca:	4620      	mov	r0, r4
 8003ccc:	f7ff fef5 	bl	8003aba <I2C_WaitOnTXEFlagUntilTimeout>
 8003cd0:	b918      	cbnz	r0, 8003cda <I2C_RequestMemoryRead+0xe2>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003cd2:	6823      	ldr	r3, [r4, #0]
 8003cd4:	b2f6      	uxtb	r6, r6
 8003cd6:	611e      	str	r6, [r3, #16]
 8003cd8:	e7da      	b.n	8003c90 <I2C_RequestMemoryRead+0x98>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cda:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003cdc:	2b04      	cmp	r3, #4
 8003cde:	d001      	beq.n	8003ce4 <I2C_RequestMemoryRead+0xec>
      return HAL_ERROR;
 8003ce0:	2001      	movs	r0, #1
 8003ce2:	e7b4      	b.n	8003c4e <I2C_RequestMemoryRead+0x56>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ce4:	6822      	ldr	r2, [r4, #0]
 8003ce6:	6813      	ldr	r3, [r2, #0]
 8003ce8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003cec:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 8003cee:	2001      	movs	r0, #1
 8003cf0:	e7ad      	b.n	8003c4e <I2C_RequestMemoryRead+0x56>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cf2:	6822      	ldr	r2, [r4, #0]
 8003cf4:	6813      	ldr	r3, [r2, #0]
 8003cf6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003cfa:	6013      	str	r3, [r2, #0]
    return HAL_ERROR;
 8003cfc:	2001      	movs	r0, #1
 8003cfe:	e7a6      	b.n	8003c4e <I2C_RequestMemoryRead+0x56>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d00:	6822      	ldr	r2, [r4, #0]
 8003d02:	6813      	ldr	r3, [r2, #0]
 8003d04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d08:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d0a:	f8cd 8000 	str.w	r8, [sp]
 8003d0e:	463b      	mov	r3, r7
 8003d10:	2200      	movs	r2, #0
 8003d12:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003d16:	4620      	mov	r0, r4
 8003d18:	f7ff fe2f 	bl	800397a <I2C_WaitOnFlagUntilTimeout>
 8003d1c:	b968      	cbnz	r0, 8003d3a <I2C_RequestMemoryRead+0x142>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003d1e:	6822      	ldr	r2, [r4, #0]
 8003d20:	f04a 0301 	orr.w	r3, sl, #1
 8003d24:	6113      	str	r3, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d26:	4643      	mov	r3, r8
 8003d28:	463a      	mov	r2, r7
 8003d2a:	490b      	ldr	r1, [pc, #44]	; (8003d58 <I2C_RequestMemoryRead+0x160>)
 8003d2c:	4620      	mov	r0, r4
 8003d2e:	f7ff fe67 	bl	8003a00 <I2C_WaitOnMasterAddressFlagUntilTimeout>
    return HAL_TIMEOUT;
 8003d32:	3800      	subs	r0, #0
 8003d34:	bf18      	it	ne
 8003d36:	2001      	movne	r0, #1
 8003d38:	e789      	b.n	8003c4e <I2C_RequestMemoryRead+0x56>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d3a:	6823      	ldr	r3, [r4, #0]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003d42:	d006      	beq.n	8003d52 <I2C_RequestMemoryRead+0x15a>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d48:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8003d4a:	2003      	movs	r0, #3
 8003d4c:	e77f      	b.n	8003c4e <I2C_RequestMemoryRead+0x56>
    return HAL_TIMEOUT;
 8003d4e:	2003      	movs	r0, #3
 8003d50:	e77d      	b.n	8003c4e <I2C_RequestMemoryRead+0x56>
    return HAL_TIMEOUT;
 8003d52:	2003      	movs	r0, #3
 8003d54:	e77b      	b.n	8003c4e <I2C_RequestMemoryRead+0x56>
 8003d56:	bf00      	nop
 8003d58:	00010002 	.word	0x00010002

08003d5c <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8003d5c:	b570      	push	{r4, r5, r6, lr}
 8003d5e:	4604      	mov	r4, r0
 8003d60:	460d      	mov	r5, r1
 8003d62:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003d64:	6823      	ldr	r3, [r4, #0]
 8003d66:	695b      	ldr	r3, [r3, #20]
 8003d68:	f013 0f04 	tst.w	r3, #4
 8003d6c:	d121      	bne.n	8003db2 <I2C_WaitOnBTFFlagUntilTimeout+0x56>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d6e:	4620      	mov	r0, r4
 8003d70:	f7ff fdea 	bl	8003948 <I2C_IsAcknowledgeFailed>
 8003d74:	b9f8      	cbnz	r0, 8003db6 <I2C_WaitOnBTFFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 8003d76:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003d7a:	d0f3      	beq.n	8003d64 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d7c:	f7ff fbc2 	bl	8003504 <HAL_GetTick>
 8003d80:	1b80      	subs	r0, r0, r6
 8003d82:	42a8      	cmp	r0, r5
 8003d84:	d801      	bhi.n	8003d8a <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8003d86:	2d00      	cmp	r5, #0
 8003d88:	d1ec      	bne.n	8003d64 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003d8a:	6823      	ldr	r3, [r4, #0]
 8003d8c:	695b      	ldr	r3, [r3, #20]
 8003d8e:	f013 0f04 	tst.w	r3, #4
 8003d92:	d1e7      	bne.n	8003d64 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003d94:	2300      	movs	r3, #0
 8003d96:	6323      	str	r3, [r4, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003d98:	2220      	movs	r2, #32
 8003d9a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d9e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003da2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003da4:	f042 0220 	orr.w	r2, r2, #32
 8003da8:	6422      	str	r2, [r4, #64]	; 0x40
          __HAL_UNLOCK(hi2c);
 8003daa:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_ERROR;
 8003dae:	2001      	movs	r0, #1
 8003db0:	e000      	b.n	8003db4 <I2C_WaitOnBTFFlagUntilTimeout+0x58>
  return HAL_OK;
 8003db2:	2000      	movs	r0, #0
}
 8003db4:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8003db6:	2001      	movs	r0, #1
 8003db8:	e7fc      	b.n	8003db4 <I2C_WaitOnBTFFlagUntilTimeout+0x58>

08003dba <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8003dba:	b570      	push	{r4, r5, r6, lr}
 8003dbc:	4604      	mov	r4, r0
 8003dbe:	460d      	mov	r5, r1
 8003dc0:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003dc2:	6803      	ldr	r3, [r0, #0]
 8003dc4:	695a      	ldr	r2, [r3, #20]
 8003dc6:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003dca:	d01b      	beq.n	8003e04 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
  return HAL_OK;
 8003dcc:	2000      	movs	r0, #0
 8003dce:	e00e      	b.n	8003dee <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003dd0:	f06f 0210 	mvn.w	r2, #16
 8003dd4:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003dda:	2220      	movs	r2, #32
 8003ddc:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003de0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003de4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003de6:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8003de8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      return HAL_ERROR;
 8003dec:	2001      	movs	r0, #1
}
 8003dee:	bd70      	pop	{r4, r5, r6, pc}
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003df0:	6823      	ldr	r3, [r4, #0]
 8003df2:	695b      	ldr	r3, [r3, #20]
 8003df4:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003df8:	d010      	beq.n	8003e1c <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003dfa:	6823      	ldr	r3, [r4, #0]
 8003dfc:	6958      	ldr	r0, [r3, #20]
 8003dfe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003e02:	d11a      	bne.n	8003e3a <I2C_WaitOnRXNEFlagUntilTimeout+0x80>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003e04:	6958      	ldr	r0, [r3, #20]
 8003e06:	f010 0f10 	tst.w	r0, #16
 8003e0a:	d1e1      	bne.n	8003dd0 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e0c:	f7ff fb7a 	bl	8003504 <HAL_GetTick>
 8003e10:	1b80      	subs	r0, r0, r6
 8003e12:	42a8      	cmp	r0, r5
 8003e14:	d8ec      	bhi.n	8003df0 <I2C_WaitOnRXNEFlagUntilTimeout+0x36>
 8003e16:	2d00      	cmp	r5, #0
 8003e18:	d1ef      	bne.n	8003dfa <I2C_WaitOnRXNEFlagUntilTimeout+0x40>
 8003e1a:	e7e9      	b.n	8003df0 <I2C_WaitOnRXNEFlagUntilTimeout+0x36>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003e20:	2220      	movs	r2, #32
 8003e22:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e26:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e2a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003e2c:	f042 0220 	orr.w	r2, r2, #32
 8003e30:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003e32:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8003e36:	2001      	movs	r0, #1
 8003e38:	e7d9      	b.n	8003dee <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
  return HAL_OK;
 8003e3a:	2000      	movs	r0, #0
 8003e3c:	e7d7      	b.n	8003dee <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
	...

08003e40 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8003e40:	2800      	cmp	r0, #0
 8003e42:	f000 80b1 	beq.w	8003fa8 <HAL_I2C_Init+0x168>
{
 8003e46:	b538      	push	{r3, r4, r5, lr}
 8003e48:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e4a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d074      	beq.n	8003f3c <HAL_I2C_Init+0xfc>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e52:	2324      	movs	r3, #36	; 0x24
 8003e54:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8003e58:	6822      	ldr	r2, [r4, #0]
 8003e5a:	6813      	ldr	r3, [r2, #0]
 8003e5c:	f023 0301 	bic.w	r3, r3, #1
 8003e60:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003e62:	6822      	ldr	r2, [r4, #0]
 8003e64:	6813      	ldr	r3, [r2, #0]
 8003e66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e6a:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003e6c:	6822      	ldr	r2, [r4, #0]
 8003e6e:	6813      	ldr	r3, [r2, #0]
 8003e70:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003e74:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003e76:	f002 f903 	bl	8006080 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003e7a:	6862      	ldr	r2, [r4, #4]
 8003e7c:	4b4c      	ldr	r3, [pc, #304]	; (8003fb0 <HAL_I2C_Init+0x170>)
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	d861      	bhi.n	8003f46 <HAL_I2C_Init+0x106>
 8003e82:	4b4c      	ldr	r3, [pc, #304]	; (8003fb4 <HAL_I2C_Init+0x174>)
 8003e84:	4298      	cmp	r0, r3
 8003e86:	f240 8091 	bls.w	8003fac <HAL_I2C_Init+0x16c>
  freqrange = I2C_FREQRANGE(pclk1);
 8003e8a:	494b      	ldr	r1, [pc, #300]	; (8003fb8 <HAL_I2C_Init+0x178>)
 8003e8c:	fba1 3100 	umull	r3, r1, r1, r0
 8003e90:	0c8b      	lsrs	r3, r1, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003e92:	6825      	ldr	r5, [r4, #0]
 8003e94:	686a      	ldr	r2, [r5, #4]
 8003e96:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8003e9a:	ea42 4291 	orr.w	r2, r2, r1, lsr #18
 8003e9e:	606a      	str	r2, [r5, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003ea0:	6821      	ldr	r1, [r4, #0]
 8003ea2:	6a0a      	ldr	r2, [r1, #32]
 8003ea4:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8003ea8:	4d41      	ldr	r5, [pc, #260]	; (8003fb0 <HAL_I2C_Init+0x170>)
 8003eaa:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8003eae:	45ac      	cmp	ip, r5
 8003eb0:	d84e      	bhi.n	8003f50 <HAL_I2C_Init+0x110>
 8003eb2:	3301      	adds	r3, #1
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003eb8:	6821      	ldr	r1, [r4, #0]
 8003eba:	69ca      	ldr	r2, [r1, #28]
 8003ebc:	f422 424f 	bic.w	r2, r2, #52992	; 0xcf00
 8003ec0:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003ec4:	6865      	ldr	r5, [r4, #4]
 8003ec6:	4b3a      	ldr	r3, [pc, #232]	; (8003fb0 <HAL_I2C_Init+0x170>)
 8003ec8:	429d      	cmp	r5, r3
 8003eca:	d84b      	bhi.n	8003f64 <HAL_I2C_Init+0x124>
 8003ecc:	1e43      	subs	r3, r0, #1
 8003ece:	006d      	lsls	r5, r5, #1
 8003ed0:	fbb3 f3f5 	udiv	r3, r3, r5
 8003ed4:	3301      	adds	r3, #1
 8003ed6:	f640 70fc 	movw	r0, #4092	; 0xffc
 8003eda:	4203      	tst	r3, r0
 8003edc:	d05e      	beq.n	8003f9c <HAL_I2C_Init+0x15c>
 8003ede:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ee2:	431a      	orrs	r2, r3
 8003ee4:	61ca      	str	r2, [r1, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003ee6:	6821      	ldr	r1, [r4, #0]
 8003ee8:	680a      	ldr	r2, [r1, #0]
 8003eea:	69e3      	ldr	r3, [r4, #28]
 8003eec:	6a20      	ldr	r0, [r4, #32]
 8003eee:	4303      	orrs	r3, r0
 8003ef0:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003ef8:	6821      	ldr	r1, [r4, #0]
 8003efa:	688a      	ldr	r2, [r1, #8]
 8003efc:	6923      	ldr	r3, [r4, #16]
 8003efe:	68e0      	ldr	r0, [r4, #12]
 8003f00:	4303      	orrs	r3, r0
 8003f02:	f422 4203 	bic.w	r2, r2, #33536	; 0x8300
 8003f06:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003f0e:	6821      	ldr	r1, [r4, #0]
 8003f10:	68ca      	ldr	r2, [r1, #12]
 8003f12:	6963      	ldr	r3, [r4, #20]
 8003f14:	69a0      	ldr	r0, [r4, #24]
 8003f16:	4303      	orrs	r3, r0
 8003f18:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 8003f20:	6822      	ldr	r2, [r4, #0]
 8003f22:	6813      	ldr	r3, [r2, #0]
 8003f24:	f043 0301 	orr.w	r3, r3, #1
 8003f28:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f2a:	2000      	movs	r0, #0
 8003f2c:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003f2e:	2320      	movs	r3, #32
 8003f30:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f34:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f36:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 8003f3a:	bd38      	pop	{r3, r4, r5, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8003f3c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8003f40:	f7fe f9a2 	bl	8002288 <HAL_I2C_MspInit>
 8003f44:	e785      	b.n	8003e52 <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003f46:	4b1d      	ldr	r3, [pc, #116]	; (8003fbc <HAL_I2C_Init+0x17c>)
 8003f48:	4298      	cmp	r0, r3
 8003f4a:	d89e      	bhi.n	8003e8a <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8003f4c:	2001      	movs	r0, #1
 8003f4e:	e7f4      	b.n	8003f3a <HAL_I2C_Init+0xfa>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003f50:	f44f 7596 	mov.w	r5, #300	; 0x12c
 8003f54:	fb05 f303 	mul.w	r3, r5, r3
 8003f58:	4d19      	ldr	r5, [pc, #100]	; (8003fc0 <HAL_I2C_Init+0x180>)
 8003f5a:	fba5 5303 	umull	r5, r3, r5, r3
 8003f5e:	099b      	lsrs	r3, r3, #6
 8003f60:	3301      	adds	r3, #1
 8003f62:	e7a7      	b.n	8003eb4 <HAL_I2C_Init+0x74>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003f64:	68a3      	ldr	r3, [r4, #8]
 8003f66:	b95b      	cbnz	r3, 8003f80 <HAL_I2C_Init+0x140>
 8003f68:	1e43      	subs	r3, r0, #1
 8003f6a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003f6e:	fbb3 f3f5 	udiv	r3, r3, r5
 8003f72:	3301      	adds	r3, #1
 8003f74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f78:	b193      	cbz	r3, 8003fa0 <HAL_I2C_Init+0x160>
 8003f7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f7e:	e7b0      	b.n	8003ee2 <HAL_I2C_Init+0xa2>
 8003f80:	1e43      	subs	r3, r0, #1
 8003f82:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8003f86:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8003f8a:	fbb3 f3f5 	udiv	r3, r3, r5
 8003f8e:	3301      	adds	r3, #1
 8003f90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f94:	b133      	cbz	r3, 8003fa4 <HAL_I2C_Init+0x164>
 8003f96:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f9a:	e7a2      	b.n	8003ee2 <HAL_I2C_Init+0xa2>
 8003f9c:	2304      	movs	r3, #4
 8003f9e:	e7a0      	b.n	8003ee2 <HAL_I2C_Init+0xa2>
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e79e      	b.n	8003ee2 <HAL_I2C_Init+0xa2>
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e79c      	b.n	8003ee2 <HAL_I2C_Init+0xa2>
    return HAL_ERROR;
 8003fa8:	2001      	movs	r0, #1
}
 8003faa:	4770      	bx	lr
    return HAL_ERROR;
 8003fac:	2001      	movs	r0, #1
 8003fae:	e7c4      	b.n	8003f3a <HAL_I2C_Init+0xfa>
 8003fb0:	000186a0 	.word	0x000186a0
 8003fb4:	001e847f 	.word	0x001e847f
 8003fb8:	431bde83 	.word	0x431bde83
 8003fbc:	003d08ff 	.word	0x003d08ff
 8003fc0:	10624dd3 	.word	0x10624dd3

08003fc4 <HAL_I2C_Master_Transmit>:
{
 8003fc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003fc8:	b085      	sub	sp, #20
 8003fca:	4604      	mov	r4, r0
 8003fcc:	460f      	mov	r7, r1
 8003fce:	4691      	mov	r9, r2
 8003fd0:	4698      	mov	r8, r3
 8003fd2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 8003fd4:	f7ff fa96 	bl	8003504 <HAL_GetTick>
 8003fd8:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fda:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 8003fde:	b2c0      	uxtb	r0, r0
 8003fe0:	2820      	cmp	r0, #32
 8003fe2:	d004      	beq.n	8003fee <HAL_I2C_Master_Transmit+0x2a>
    return HAL_BUSY;
 8003fe4:	2702      	movs	r7, #2
}
 8003fe6:	4638      	mov	r0, r7
 8003fe8:	b005      	add	sp, #20
 8003fea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003fee:	9500      	str	r5, [sp, #0]
 8003ff0:	2319      	movs	r3, #25
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	4971      	ldr	r1, [pc, #452]	; (80041bc <HAL_I2C_Master_Transmit+0x1f8>)
 8003ff6:	4620      	mov	r0, r4
 8003ff8:	f7ff fcbf 	bl	800397a <I2C_WaitOnFlagUntilTimeout>
 8003ffc:	2800      	cmp	r0, #0
 8003ffe:	f040 80d7 	bne.w	80041b0 <HAL_I2C_Master_Transmit+0x1ec>
    __HAL_LOCK(hi2c);
 8004002:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8004006:	2b01      	cmp	r3, #1
 8004008:	f000 80d4 	beq.w	80041b4 <HAL_I2C_Master_Transmit+0x1f0>
 800400c:	2301      	movs	r3, #1
 800400e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004012:	6823      	ldr	r3, [r4, #0]
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	f012 0f01 	tst.w	r2, #1
 800401a:	d103      	bne.n	8004024 <HAL_I2C_Master_Transmit+0x60>
      __HAL_I2C_ENABLE(hi2c);
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	f042 0201 	orr.w	r2, r2, #1
 8004022:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004024:	6822      	ldr	r2, [r4, #0]
 8004026:	6813      	ldr	r3, [r2, #0]
 8004028:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800402c:	6013      	str	r3, [r2, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800402e:	2321      	movs	r3, #33	; 0x21
 8004030:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004034:	2310      	movs	r3, #16
 8004036:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800403a:	2300      	movs	r3, #0
 800403c:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 800403e:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004042:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004046:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004048:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800404a:	4b5d      	ldr	r3, [pc, #372]	; (80041c0 <HAL_I2C_Master_Transmit+0x1fc>)
 800404c:	62e3      	str	r3, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800404e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004050:	2b08      	cmp	r3, #8
 8004052:	d00d      	beq.n	8004070 <HAL_I2C_Master_Transmit+0xac>
 8004054:	2b01      	cmp	r3, #1
 8004056:	d00b      	beq.n	8004070 <HAL_I2C_Master_Transmit+0xac>
 8004058:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800405c:	d008      	beq.n	8004070 <HAL_I2C_Master_Transmit+0xac>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800405e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004060:	2b12      	cmp	r3, #18
 8004062:	d10a      	bne.n	800407a <HAL_I2C_Master_Transmit+0xb6>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004064:	6822      	ldr	r2, [r4, #0]
 8004066:	6813      	ldr	r3, [r2, #0]
 8004068:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800406c:	6013      	str	r3, [r2, #0]
 800406e:	e004      	b.n	800407a <HAL_I2C_Master_Transmit+0xb6>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004070:	6822      	ldr	r2, [r4, #0]
 8004072:	6813      	ldr	r3, [r2, #0]
 8004074:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004078:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800407a:	9500      	str	r5, [sp, #0]
 800407c:	4633      	mov	r3, r6
 800407e:	2200      	movs	r2, #0
 8004080:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004084:	4620      	mov	r0, r4
 8004086:	f7ff fc78 	bl	800397a <I2C_WaitOnFlagUntilTimeout>
 800408a:	b9d0      	cbnz	r0, 80040c2 <HAL_I2C_Master_Transmit+0xfe>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800408c:	6923      	ldr	r3, [r4, #16]
 800408e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004092:	d120      	bne.n	80040d6 <HAL_I2C_Master_Transmit+0x112>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004094:	6823      	ldr	r3, [r4, #0]
 8004096:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
 800409a:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800409c:	462b      	mov	r3, r5
 800409e:	4632      	mov	r2, r6
 80040a0:	4948      	ldr	r1, [pc, #288]	; (80041c4 <HAL_I2C_Master_Transmit+0x200>)
 80040a2:	4620      	mov	r0, r4
 80040a4:	f7ff fcac 	bl	8003a00 <I2C_WaitOnMasterAddressFlagUntilTimeout>
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80040a8:	4607      	mov	r7, r0
 80040aa:	2800      	cmp	r0, #0
 80040ac:	f040 8084 	bne.w	80041b8 <HAL_I2C_Master_Transmit+0x1f4>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040b0:	2300      	movs	r3, #0
 80040b2:	9303      	str	r3, [sp, #12]
 80040b4:	6823      	ldr	r3, [r4, #0]
 80040b6:	695a      	ldr	r2, [r3, #20]
 80040b8:	9203      	str	r2, [sp, #12]
 80040ba:	699b      	ldr	r3, [r3, #24]
 80040bc:	9303      	str	r3, [sp, #12]
 80040be:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 80040c0:	e02f      	b.n	8004122 <HAL_I2C_Master_Transmit+0x15e>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80040c2:	6823      	ldr	r3, [r4, #0]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f413 7f80 	tst.w	r3, #256	; 0x100
 80040ca:	d002      	beq.n	80040d2 <HAL_I2C_Master_Transmit+0x10e>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80040cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80040d0:	6423      	str	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 80040d2:	2701      	movs	r7, #1
 80040d4:	e787      	b.n	8003fe6 <HAL_I2C_Master_Transmit+0x22>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80040d6:	6822      	ldr	r2, [r4, #0]
 80040d8:	11fb      	asrs	r3, r7, #7
 80040da:	f003 0306 	and.w	r3, r3, #6
 80040de:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 80040e2:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80040e4:	462b      	mov	r3, r5
 80040e6:	4632      	mov	r2, r6
 80040e8:	4937      	ldr	r1, [pc, #220]	; (80041c8 <HAL_I2C_Master_Transmit+0x204>)
 80040ea:	4620      	mov	r0, r4
 80040ec:	f7ff fc88 	bl	8003a00 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040f0:	2800      	cmp	r0, #0
 80040f2:	d1ee      	bne.n	80040d2 <HAL_I2C_Master_Transmit+0x10e>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80040f4:	6823      	ldr	r3, [r4, #0]
 80040f6:	b2ff      	uxtb	r7, r7
 80040f8:	611f      	str	r7, [r3, #16]
 80040fa:	e7cf      	b.n	800409c <HAL_I2C_Master_Transmit+0xd8>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80040fe:	2b04      	cmp	r3, #4
 8004100:	d001      	beq.n	8004106 <HAL_I2C_Master_Transmit+0x142>
        return HAL_ERROR;
 8004102:	2701      	movs	r7, #1
 8004104:	e76f      	b.n	8003fe6 <HAL_I2C_Master_Transmit+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004106:	6822      	ldr	r2, [r4, #0]
 8004108:	6813      	ldr	r3, [r2, #0]
 800410a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800410e:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 8004110:	2701      	movs	r7, #1
 8004112:	e768      	b.n	8003fe6 <HAL_I2C_Master_Transmit+0x22>
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004114:	462a      	mov	r2, r5
 8004116:	4631      	mov	r1, r6
 8004118:	4620      	mov	r0, r4
 800411a:	f7ff fe1f 	bl	8003d5c <I2C_WaitOnBTFFlagUntilTimeout>
 800411e:	2800      	cmp	r0, #0
 8004120:	d12c      	bne.n	800417c <HAL_I2C_Master_Transmit+0x1b8>
    while (hi2c->XferSize > 0U)
 8004122:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004124:	2b00      	cmp	r3, #0
 8004126:	d035      	beq.n	8004194 <HAL_I2C_Master_Transmit+0x1d0>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004128:	462a      	mov	r2, r5
 800412a:	4631      	mov	r1, r6
 800412c:	4620      	mov	r0, r4
 800412e:	f7ff fcc4 	bl	8003aba <I2C_WaitOnTXEFlagUntilTimeout>
 8004132:	2800      	cmp	r0, #0
 8004134:	d1e2      	bne.n	80040fc <HAL_I2C_Master_Transmit+0x138>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004136:	6823      	ldr	r3, [r4, #0]
 8004138:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800413a:	7812      	ldrb	r2, [r2, #0]
 800413c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800413e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004140:	1c53      	adds	r3, r2, #1
 8004142:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8004144:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8004146:	3901      	subs	r1, #1
 8004148:	b289      	uxth	r1, r1
 800414a:	8561      	strh	r1, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800414c:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 800414e:	3901      	subs	r1, #1
 8004150:	b289      	uxth	r1, r1
 8004152:	8521      	strh	r1, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004154:	6823      	ldr	r3, [r4, #0]
 8004156:	6958      	ldr	r0, [r3, #20]
 8004158:	f010 0f04 	tst.w	r0, #4
 800415c:	d0da      	beq.n	8004114 <HAL_I2C_Master_Transmit+0x150>
 800415e:	2900      	cmp	r1, #0
 8004160:	d0d8      	beq.n	8004114 <HAL_I2C_Master_Transmit+0x150>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004162:	7852      	ldrb	r2, [r2, #1]
 8004164:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004166:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004168:	3301      	adds	r3, #1
 800416a:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 800416c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800416e:	3b01      	subs	r3, #1
 8004170:	b29b      	uxth	r3, r3
 8004172:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8004174:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004176:	3b01      	subs	r3, #1
 8004178:	8523      	strh	r3, [r4, #40]	; 0x28
 800417a:	e7cb      	b.n	8004114 <HAL_I2C_Master_Transmit+0x150>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800417c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800417e:	2b04      	cmp	r3, #4
 8004180:	d001      	beq.n	8004186 <HAL_I2C_Master_Transmit+0x1c2>
        return HAL_ERROR;
 8004182:	2701      	movs	r7, #1
 8004184:	e72f      	b.n	8003fe6 <HAL_I2C_Master_Transmit+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004186:	6822      	ldr	r2, [r4, #0]
 8004188:	6813      	ldr	r3, [r2, #0]
 800418a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800418e:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 8004190:	2701      	movs	r7, #1
 8004192:	e728      	b.n	8003fe6 <HAL_I2C_Master_Transmit+0x22>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004194:	6822      	ldr	r2, [r4, #0]
 8004196:	6813      	ldr	r3, [r2, #0]
 8004198:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800419c:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800419e:	2320      	movs	r3, #32
 80041a0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80041a4:	2300      	movs	r3, #0
 80041a6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 80041aa:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 80041ae:	e71a      	b.n	8003fe6 <HAL_I2C_Master_Transmit+0x22>
      return HAL_BUSY;
 80041b0:	2702      	movs	r7, #2
 80041b2:	e718      	b.n	8003fe6 <HAL_I2C_Master_Transmit+0x22>
    __HAL_LOCK(hi2c);
 80041b4:	2702      	movs	r7, #2
 80041b6:	e716      	b.n	8003fe6 <HAL_I2C_Master_Transmit+0x22>
      return HAL_ERROR;
 80041b8:	2701      	movs	r7, #1
 80041ba:	e714      	b.n	8003fe6 <HAL_I2C_Master_Transmit+0x22>
 80041bc:	00100002 	.word	0x00100002
 80041c0:	ffff0000 	.word	0xffff0000
 80041c4:	00010002 	.word	0x00010002
 80041c8:	00010008 	.word	0x00010008

080041cc <HAL_I2C_Master_Receive>:
{
 80041cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041d0:	b088      	sub	sp, #32
 80041d2:	4604      	mov	r4, r0
 80041d4:	460f      	mov	r7, r1
 80041d6:	4691      	mov	r9, r2
 80041d8:	4698      	mov	r8, r3
 80041da:	9e10      	ldr	r6, [sp, #64]	; 0x40
  __IO uint32_t count = 0U;
 80041dc:	2300      	movs	r3, #0
 80041de:	9307      	str	r3, [sp, #28]
  uint32_t tickstart = HAL_GetTick();
 80041e0:	f7ff f990 	bl	8003504 <HAL_GetTick>
 80041e4:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80041e6:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 80041ea:	b2c0      	uxtb	r0, r0
 80041ec:	2820      	cmp	r0, #32
 80041ee:	d004      	beq.n	80041fa <HAL_I2C_Master_Receive+0x2e>
    return HAL_BUSY;
 80041f0:	2702      	movs	r7, #2
}
 80041f2:	4638      	mov	r0, r7
 80041f4:	b008      	add	sp, #32
 80041f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80041fa:	9500      	str	r5, [sp, #0]
 80041fc:	2319      	movs	r3, #25
 80041fe:	2201      	movs	r2, #1
 8004200:	498a      	ldr	r1, [pc, #552]	; (800442c <HAL_I2C_Master_Receive+0x260>)
 8004202:	4620      	mov	r0, r4
 8004204:	f7ff fbb9 	bl	800397a <I2C_WaitOnFlagUntilTimeout>
 8004208:	2800      	cmp	r0, #0
 800420a:	f040 81f2 	bne.w	80045f2 <HAL_I2C_Master_Receive+0x426>
    __HAL_LOCK(hi2c);
 800420e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8004212:	2b01      	cmp	r3, #1
 8004214:	f000 81ef 	beq.w	80045f6 <HAL_I2C_Master_Receive+0x42a>
 8004218:	2301      	movs	r3, #1
 800421a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800421e:	6823      	ldr	r3, [r4, #0]
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	f012 0f01 	tst.w	r2, #1
 8004226:	d103      	bne.n	8004230 <HAL_I2C_Master_Receive+0x64>
      __HAL_I2C_ENABLE(hi2c);
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	f042 0201 	orr.w	r2, r2, #1
 800422e:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004230:	6822      	ldr	r2, [r4, #0]
 8004232:	6813      	ldr	r3, [r2, #0]
 8004234:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004238:	6013      	str	r3, [r2, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800423a:	2322      	movs	r3, #34	; 0x22
 800423c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004240:	2310      	movs	r3, #16
 8004242:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004246:	2300      	movs	r3, #0
 8004248:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 800424a:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 800424e:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004252:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004254:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004256:	4b76      	ldr	r3, [pc, #472]	; (8004430 <HAL_I2C_Master_Receive+0x264>)
 8004258:	62e3      	str	r3, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800425a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800425c:	6821      	ldr	r1, [r4, #0]
 800425e:	680b      	ldr	r3, [r1, #0]
 8004260:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004264:	600b      	str	r3, [r1, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004266:	2a08      	cmp	r2, #8
 8004268:	d00d      	beq.n	8004286 <HAL_I2C_Master_Receive+0xba>
 800426a:	2a01      	cmp	r2, #1
 800426c:	d00b      	beq.n	8004286 <HAL_I2C_Master_Receive+0xba>
 800426e:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8004272:	d008      	beq.n	8004286 <HAL_I2C_Master_Receive+0xba>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004274:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004276:	2b11      	cmp	r3, #17
 8004278:	d10a      	bne.n	8004290 <HAL_I2C_Master_Receive+0xc4>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800427a:	6822      	ldr	r2, [r4, #0]
 800427c:	6813      	ldr	r3, [r2, #0]
 800427e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004282:	6013      	str	r3, [r2, #0]
 8004284:	e004      	b.n	8004290 <HAL_I2C_Master_Receive+0xc4>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004286:	6822      	ldr	r2, [r4, #0]
 8004288:	6813      	ldr	r3, [r2, #0]
 800428a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800428e:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004290:	9500      	str	r5, [sp, #0]
 8004292:	4633      	mov	r3, r6
 8004294:	2200      	movs	r2, #0
 8004296:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800429a:	4620      	mov	r0, r4
 800429c:	f7ff fb6d 	bl	800397a <I2C_WaitOnFlagUntilTimeout>
 80042a0:	bb58      	cbnz	r0, 80042fa <HAL_I2C_Master_Receive+0x12e>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80042a2:	6923      	ldr	r3, [r4, #16]
 80042a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042a8:	d130      	bne.n	800430c <HAL_I2C_Master_Receive+0x140>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80042aa:	6823      	ldr	r3, [r4, #0]
 80042ac:	f047 0701 	orr.w	r7, r7, #1
 80042b0:	b2ff      	uxtb	r7, r7
 80042b2:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80042b4:	462b      	mov	r3, r5
 80042b6:	4632      	mov	r2, r6
 80042b8:	495e      	ldr	r1, [pc, #376]	; (8004434 <HAL_I2C_Master_Receive+0x268>)
 80042ba:	4620      	mov	r0, r4
 80042bc:	f7ff fba0 	bl	8003a00 <I2C_WaitOnMasterAddressFlagUntilTimeout>
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80042c0:	4607      	mov	r7, r0
 80042c2:	2800      	cmp	r0, #0
 80042c4:	f040 8199 	bne.w	80045fa <HAL_I2C_Master_Receive+0x42e>
    if (hi2c->XferSize == 0U)
 80042c8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d15c      	bne.n	8004388 <HAL_I2C_Master_Receive+0x1bc>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042ce:	9302      	str	r3, [sp, #8]
 80042d0:	6823      	ldr	r3, [r4, #0]
 80042d2:	695a      	ldr	r2, [r3, #20]
 80042d4:	9202      	str	r2, [sp, #8]
 80042d6:	699a      	ldr	r2, [r3, #24]
 80042d8:	9202      	str	r2, [sp, #8]
 80042da:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042e2:	601a      	str	r2, [r3, #0]
    while (hi2c->XferSize > 0U)
 80042e4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	f000 817a 	beq.w	80045e0 <HAL_I2C_Master_Receive+0x414>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80042ec:	f8df 8148 	ldr.w	r8, [pc, #328]	; 8004438 <HAL_I2C_Master_Receive+0x26c>
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80042f0:	f8df a148 	ldr.w	sl, [pc, #328]	; 800443c <HAL_I2C_Master_Receive+0x270>
 80042f4:	f8df 9148 	ldr.w	r9, [pc, #328]	; 8004440 <HAL_I2C_Master_Receive+0x274>
 80042f8:	e138      	b.n	800456c <HAL_I2C_Master_Receive+0x3a0>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80042fa:	6823      	ldr	r3, [r4, #0]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004302:	d012      	beq.n	800432a <HAL_I2C_Master_Receive+0x15e>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004304:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004308:	6423      	str	r3, [r4, #64]	; 0x40
 800430a:	e00e      	b.n	800432a <HAL_I2C_Master_Receive+0x15e>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800430c:	ea4f 18e7 	mov.w	r8, r7, asr #7
 8004310:	f008 0806 	and.w	r8, r8, #6
 8004314:	6823      	ldr	r3, [r4, #0]
 8004316:	f048 02f0 	orr.w	r2, r8, #240	; 0xf0
 800431a:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800431c:	462b      	mov	r3, r5
 800431e:	4632      	mov	r2, r6
 8004320:	4948      	ldr	r1, [pc, #288]	; (8004444 <HAL_I2C_Master_Receive+0x278>)
 8004322:	4620      	mov	r0, r4
 8004324:	f7ff fb6c 	bl	8003a00 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004328:	b108      	cbz	r0, 800432e <HAL_I2C_Master_Receive+0x162>
      return HAL_ERROR;
 800432a:	2701      	movs	r7, #1
 800432c:	e761      	b.n	80041f2 <HAL_I2C_Master_Receive+0x26>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800432e:	6823      	ldr	r3, [r4, #0]
 8004330:	b2ff      	uxtb	r7, r7
 8004332:	611f      	str	r7, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004334:	462b      	mov	r3, r5
 8004336:	4632      	mov	r2, r6
 8004338:	493e      	ldr	r1, [pc, #248]	; (8004434 <HAL_I2C_Master_Receive+0x268>)
 800433a:	4620      	mov	r0, r4
 800433c:	f7ff fb60 	bl	8003a00 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004340:	2800      	cmp	r0, #0
 8004342:	d1f2      	bne.n	800432a <HAL_I2C_Master_Receive+0x15e>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004344:	2200      	movs	r2, #0
 8004346:	9206      	str	r2, [sp, #24]
 8004348:	6823      	ldr	r3, [r4, #0]
 800434a:	6959      	ldr	r1, [r3, #20]
 800434c:	9106      	str	r1, [sp, #24]
 800434e:	6999      	ldr	r1, [r3, #24]
 8004350:	9106      	str	r1, [sp, #24]
 8004352:	9906      	ldr	r1, [sp, #24]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004354:	6819      	ldr	r1, [r3, #0]
 8004356:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800435a:	6019      	str	r1, [r3, #0]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800435c:	9500      	str	r5, [sp, #0]
 800435e:	4633      	mov	r3, r6
 8004360:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004364:	4620      	mov	r0, r4
 8004366:	f7ff fb08 	bl	800397a <I2C_WaitOnFlagUntilTimeout>
 800436a:	b920      	cbnz	r0, 8004376 <HAL_I2C_Master_Receive+0x1aa>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800436c:	6822      	ldr	r2, [r4, #0]
 800436e:	f048 03f1 	orr.w	r3, r8, #241	; 0xf1
 8004372:	6113      	str	r3, [r2, #16]
 8004374:	e79e      	b.n	80042b4 <HAL_I2C_Master_Receive+0xe8>
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004376:	6823      	ldr	r3, [r4, #0]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800437e:	d0d4      	beq.n	800432a <HAL_I2C_Master_Receive+0x15e>
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004380:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004384:	6423      	str	r3, [r4, #64]	; 0x40
 8004386:	e7d0      	b.n	800432a <HAL_I2C_Master_Receive+0x15e>
    else if (hi2c->XferSize == 1U)
 8004388:	2b01      	cmp	r3, #1
 800438a:	d00f      	beq.n	80043ac <HAL_I2C_Master_Receive+0x1e0>
    else if (hi2c->XferSize == 2U)
 800438c:	2b02      	cmp	r3, #2
 800438e:	d021      	beq.n	80043d4 <HAL_I2C_Master_Receive+0x208>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004390:	6822      	ldr	r2, [r4, #0]
 8004392:	6813      	ldr	r3, [r2, #0]
 8004394:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004398:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800439a:	2300      	movs	r3, #0
 800439c:	9305      	str	r3, [sp, #20]
 800439e:	6823      	ldr	r3, [r4, #0]
 80043a0:	695a      	ldr	r2, [r3, #20]
 80043a2:	9205      	str	r2, [sp, #20]
 80043a4:	699b      	ldr	r3, [r3, #24]
 80043a6:	9305      	str	r3, [sp, #20]
 80043a8:	9b05      	ldr	r3, [sp, #20]
 80043aa:	e79b      	b.n	80042e4 <HAL_I2C_Master_Receive+0x118>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043ac:	6822      	ldr	r2, [r4, #0]
 80043ae:	6813      	ldr	r3, [r2, #0]
 80043b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80043b4:	6013      	str	r3, [r2, #0]
 80043b6:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043b8:	2300      	movs	r3, #0
 80043ba:	9303      	str	r3, [sp, #12]
 80043bc:	6823      	ldr	r3, [r4, #0]
 80043be:	695a      	ldr	r2, [r3, #20]
 80043c0:	9203      	str	r2, [sp, #12]
 80043c2:	699a      	ldr	r2, [r3, #24]
 80043c4:	9203      	str	r2, [sp, #12]
 80043c6:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043ce:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80043d0:	b662      	cpsie	i
}
 80043d2:	e787      	b.n	80042e4 <HAL_I2C_Master_Receive+0x118>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80043d4:	6822      	ldr	r2, [r4, #0]
 80043d6:	6813      	ldr	r3, [r2, #0]
 80043d8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80043dc:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80043de:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043e0:	2300      	movs	r3, #0
 80043e2:	9304      	str	r3, [sp, #16]
 80043e4:	6823      	ldr	r3, [r4, #0]
 80043e6:	695a      	ldr	r2, [r3, #20]
 80043e8:	9204      	str	r2, [sp, #16]
 80043ea:	699a      	ldr	r2, [r3, #24]
 80043ec:	9204      	str	r2, [sp, #16]
 80043ee:	9a04      	ldr	r2, [sp, #16]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043f6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80043f8:	b662      	cpsie	i
}
 80043fa:	e773      	b.n	80042e4 <HAL_I2C_Master_Receive+0x118>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043fc:	462a      	mov	r2, r5
 80043fe:	4631      	mov	r1, r6
 8004400:	4620      	mov	r0, r4
 8004402:	f7ff fcda 	bl	8003dba <I2C_WaitOnRXNEFlagUntilTimeout>
 8004406:	2800      	cmp	r0, #0
 8004408:	f040 80f9 	bne.w	80045fe <HAL_I2C_Master_Receive+0x432>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800440c:	6823      	ldr	r3, [r4, #0]
 800440e:	691a      	ldr	r2, [r3, #16]
 8004410:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004412:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8004414:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004416:	3301      	adds	r3, #1
 8004418:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800441a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800441c:	3b01      	subs	r3, #1
 800441e:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8004420:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004422:	3b01      	subs	r3, #1
 8004424:	b29b      	uxth	r3, r3
 8004426:	8563      	strh	r3, [r4, #42]	; 0x2a
 8004428:	e09d      	b.n	8004566 <HAL_I2C_Master_Receive+0x39a>
 800442a:	bf00      	nop
 800442c:	00100002 	.word	0x00100002
 8004430:	ffff0000 	.word	0xffff0000
 8004434:	00010002 	.word	0x00010002
 8004438:	00010004 	.word	0x00010004
 800443c:	20000000 	.word	0x20000000
 8004440:	14f8b589 	.word	0x14f8b589
 8004444:	00010008 	.word	0x00010008
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004448:	9500      	str	r5, [sp, #0]
 800444a:	4633      	mov	r3, r6
 800444c:	2200      	movs	r2, #0
 800444e:	4641      	mov	r1, r8
 8004450:	4620      	mov	r0, r4
 8004452:	f7ff fa92 	bl	800397a <I2C_WaitOnFlagUntilTimeout>
 8004456:	2800      	cmp	r0, #0
 8004458:	f040 80d5 	bne.w	8004606 <HAL_I2C_Master_Receive+0x43a>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800445c:	6822      	ldr	r2, [r4, #0]
 800445e:	6813      	ldr	r3, [r2, #0]
 8004460:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004464:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004466:	b672      	cpsid	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004468:	6823      	ldr	r3, [r4, #0]
 800446a:	691a      	ldr	r2, [r3, #16]
 800446c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800446e:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8004470:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004472:	3301      	adds	r3, #1
 8004474:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8004476:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004478:	3b01      	subs	r3, #1
 800447a:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800447c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800447e:	3b01      	subs	r3, #1
 8004480:	b29b      	uxth	r3, r3
 8004482:	8563      	strh	r3, [r4, #42]	; 0x2a
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004484:	f8da 3000 	ldr.w	r3, [sl]
 8004488:	08db      	lsrs	r3, r3, #3
 800448a:	fba9 2303 	umull	r2, r3, r9, r3
 800448e:	0a1b      	lsrs	r3, r3, #8
 8004490:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004494:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8004498:	9307      	str	r3, [sp, #28]
            count--;
 800449a:	9907      	ldr	r1, [sp, #28]
 800449c:	3901      	subs	r1, #1
 800449e:	9107      	str	r1, [sp, #28]
            if (count == 0U)
 80044a0:	9b07      	ldr	r3, [sp, #28]
 80044a2:	b333      	cbz	r3, 80044f2 <HAL_I2C_Master_Receive+0x326>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80044a4:	6823      	ldr	r3, [r4, #0]
 80044a6:	695a      	ldr	r2, [r3, #20]
 80044a8:	f012 0f04 	tst.w	r2, #4
 80044ac:	d0f5      	beq.n	800449a <HAL_I2C_Master_Receive+0x2ce>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044b4:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044b6:	6823      	ldr	r3, [r4, #0]
 80044b8:	691a      	ldr	r2, [r3, #16]
 80044ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80044bc:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80044be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80044c0:	3301      	adds	r3, #1
 80044c2:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80044c4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80044c6:	3b01      	subs	r3, #1
 80044c8:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80044ca:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80044cc:	3b01      	subs	r3, #1
 80044ce:	b29b      	uxth	r3, r3
 80044d0:	8563      	strh	r3, [r4, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80044d2:	b662      	cpsie	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044d4:	6823      	ldr	r3, [r4, #0]
 80044d6:	691a      	ldr	r2, [r3, #16]
 80044d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80044da:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80044dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80044de:	3301      	adds	r3, #1
 80044e0:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80044e2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80044e4:	3b01      	subs	r3, #1
 80044e6:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80044e8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80044ea:	3b01      	subs	r3, #1
 80044ec:	b29b      	uxth	r3, r3
 80044ee:	8563      	strh	r3, [r4, #42]	; 0x2a
 80044f0:	e039      	b.n	8004566 <HAL_I2C_Master_Receive+0x39a>
              hi2c->PreviousState       = I2C_STATE_NONE;
 80044f2:	6323      	str	r3, [r4, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80044f4:	2220      	movs	r2, #32
 80044f6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044fa:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044fe:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004500:	f042 0220 	orr.w	r2, r2, #32
 8004504:	6422      	str	r2, [r4, #64]	; 0x40
 8004506:	b662      	cpsie	i
              __HAL_UNLOCK(hi2c);
 8004508:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
              return HAL_ERROR;
 800450c:	2701      	movs	r7, #1
 800450e:	e670      	b.n	80041f2 <HAL_I2C_Master_Receive+0x26>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004510:	462a      	mov	r2, r5
 8004512:	4631      	mov	r1, r6
 8004514:	4620      	mov	r0, r4
 8004516:	f7ff fc50 	bl	8003dba <I2C_WaitOnRXNEFlagUntilTimeout>
 800451a:	2800      	cmp	r0, #0
 800451c:	d175      	bne.n	800460a <HAL_I2C_Master_Receive+0x43e>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800451e:	6823      	ldr	r3, [r4, #0]
 8004520:	691a      	ldr	r2, [r3, #16]
 8004522:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004524:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004526:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004528:	3301      	adds	r3, #1
 800452a:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 800452c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800452e:	3b01      	subs	r3, #1
 8004530:	b29b      	uxth	r3, r3
 8004532:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8004534:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004536:	3a01      	subs	r2, #1
 8004538:	b292      	uxth	r2, r2
 800453a:	8562      	strh	r2, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800453c:	6822      	ldr	r2, [r4, #0]
 800453e:	6951      	ldr	r1, [r2, #20]
 8004540:	f011 0f04 	tst.w	r1, #4
 8004544:	d00f      	beq.n	8004566 <HAL_I2C_Master_Receive+0x39a>
          if (hi2c->XferSize == 3U)
 8004546:	2b03      	cmp	r3, #3
 8004548:	d045      	beq.n	80045d6 <HAL_I2C_Master_Receive+0x40a>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800454a:	6823      	ldr	r3, [r4, #0]
 800454c:	691a      	ldr	r2, [r3, #16]
 800454e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004550:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8004552:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004554:	3301      	adds	r3, #1
 8004556:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8004558:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800455a:	3b01      	subs	r3, #1
 800455c:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800455e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004560:	3b01      	subs	r3, #1
 8004562:	b29b      	uxth	r3, r3
 8004564:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004566:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004568:	2b00      	cmp	r3, #0
 800456a:	d039      	beq.n	80045e0 <HAL_I2C_Master_Receive+0x414>
      if (hi2c->XferSize <= 3U)
 800456c:	2b03      	cmp	r3, #3
 800456e:	d8cf      	bhi.n	8004510 <HAL_I2C_Master_Receive+0x344>
        if (hi2c->XferSize == 1U)
 8004570:	2b01      	cmp	r3, #1
 8004572:	f43f af43 	beq.w	80043fc <HAL_I2C_Master_Receive+0x230>
        else if (hi2c->XferSize == 2U)
 8004576:	2b02      	cmp	r3, #2
 8004578:	f47f af66 	bne.w	8004448 <HAL_I2C_Master_Receive+0x27c>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800457c:	9500      	str	r5, [sp, #0]
 800457e:	4633      	mov	r3, r6
 8004580:	2200      	movs	r2, #0
 8004582:	4641      	mov	r1, r8
 8004584:	4620      	mov	r0, r4
 8004586:	f7ff f9f8 	bl	800397a <I2C_WaitOnFlagUntilTimeout>
 800458a:	2800      	cmp	r0, #0
 800458c:	d139      	bne.n	8004602 <HAL_I2C_Master_Receive+0x436>
  __ASM volatile ("cpsid i" : : : "memory");
 800458e:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004590:	6822      	ldr	r2, [r4, #0]
 8004592:	6813      	ldr	r3, [r2, #0]
 8004594:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004598:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800459a:	6823      	ldr	r3, [r4, #0]
 800459c:	691a      	ldr	r2, [r3, #16]
 800459e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80045a0:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80045a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80045a4:	3301      	adds	r3, #1
 80045a6:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80045a8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80045aa:	3b01      	subs	r3, #1
 80045ac:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80045ae:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80045b0:	3b01      	subs	r3, #1
 80045b2:	b29b      	uxth	r3, r3
 80045b4:	8563      	strh	r3, [r4, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80045b6:	b662      	cpsie	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045b8:	6823      	ldr	r3, [r4, #0]
 80045ba:	691a      	ldr	r2, [r3, #16]
 80045bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80045be:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80045c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80045c2:	3301      	adds	r3, #1
 80045c4:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80045c6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80045c8:	3b01      	subs	r3, #1
 80045ca:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80045cc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80045ce:	3b01      	subs	r3, #1
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	8563      	strh	r3, [r4, #42]	; 0x2a
 80045d4:	e7c7      	b.n	8004566 <HAL_I2C_Master_Receive+0x39a>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045d6:	6813      	ldr	r3, [r2, #0]
 80045d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80045dc:	6013      	str	r3, [r2, #0]
 80045de:	e7b4      	b.n	800454a <HAL_I2C_Master_Receive+0x37e>
    hi2c->State = HAL_I2C_STATE_READY;
 80045e0:	2320      	movs	r3, #32
 80045e2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80045e6:	2300      	movs	r3, #0
 80045e8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 80045ec:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 80045f0:	e5ff      	b.n	80041f2 <HAL_I2C_Master_Receive+0x26>
      return HAL_BUSY;
 80045f2:	2702      	movs	r7, #2
 80045f4:	e5fd      	b.n	80041f2 <HAL_I2C_Master_Receive+0x26>
    __HAL_LOCK(hi2c);
 80045f6:	2702      	movs	r7, #2
 80045f8:	e5fb      	b.n	80041f2 <HAL_I2C_Master_Receive+0x26>
      return HAL_ERROR;
 80045fa:	2701      	movs	r7, #1
 80045fc:	e5f9      	b.n	80041f2 <HAL_I2C_Master_Receive+0x26>
            return HAL_ERROR;
 80045fe:	2701      	movs	r7, #1
 8004600:	e5f7      	b.n	80041f2 <HAL_I2C_Master_Receive+0x26>
            return HAL_ERROR;
 8004602:	2701      	movs	r7, #1
 8004604:	e5f5      	b.n	80041f2 <HAL_I2C_Master_Receive+0x26>
            return HAL_ERROR;
 8004606:	2701      	movs	r7, #1
 8004608:	e5f3      	b.n	80041f2 <HAL_I2C_Master_Receive+0x26>
          return HAL_ERROR;
 800460a:	2701      	movs	r7, #1
 800460c:	e5f1      	b.n	80041f2 <HAL_I2C_Master_Receive+0x26>
 800460e:	bf00      	nop

08004610 <HAL_I2C_Mem_Write>:
{
 8004610:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004614:	b083      	sub	sp, #12
 8004616:	4604      	mov	r4, r0
 8004618:	460f      	mov	r7, r1
 800461a:	4690      	mov	r8, r2
 800461c:	4699      	mov	r9, r3
 800461e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 8004620:	f7fe ff70 	bl	8003504 <HAL_GetTick>
 8004624:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004626:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 800462a:	b2c0      	uxtb	r0, r0
 800462c:	2820      	cmp	r0, #32
 800462e:	d003      	beq.n	8004638 <HAL_I2C_Mem_Write+0x28>
    return HAL_BUSY;
 8004630:	2002      	movs	r0, #2
}
 8004632:	b003      	add	sp, #12
 8004634:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004638:	9500      	str	r5, [sp, #0]
 800463a:	2319      	movs	r3, #25
 800463c:	2201      	movs	r2, #1
 800463e:	494d      	ldr	r1, [pc, #308]	; (8004774 <HAL_I2C_Mem_Write+0x164>)
 8004640:	4620      	mov	r0, r4
 8004642:	f7ff f99a 	bl	800397a <I2C_WaitOnFlagUntilTimeout>
 8004646:	2800      	cmp	r0, #0
 8004648:	f040 808d 	bne.w	8004766 <HAL_I2C_Mem_Write+0x156>
    __HAL_LOCK(hi2c);
 800464c:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8004650:	2b01      	cmp	r3, #1
 8004652:	f000 808a 	beq.w	800476a <HAL_I2C_Mem_Write+0x15a>
 8004656:	2301      	movs	r3, #1
 8004658:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800465c:	6823      	ldr	r3, [r4, #0]
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	f012 0f01 	tst.w	r2, #1
 8004664:	d103      	bne.n	800466e <HAL_I2C_Mem_Write+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 8004666:	681a      	ldr	r2, [r3, #0]
 8004668:	f042 0201 	orr.w	r2, r2, #1
 800466c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800466e:	6822      	ldr	r2, [r4, #0]
 8004670:	6813      	ldr	r3, [r2, #0]
 8004672:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004676:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004678:	2321      	movs	r3, #33	; 0x21
 800467a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800467e:	2340      	movs	r3, #64	; 0x40
 8004680:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004684:	2300      	movs	r3, #0
 8004686:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8004688:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800468a:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 800468c:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8004690:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004692:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004694:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004696:	4b38      	ldr	r3, [pc, #224]	; (8004778 <HAL_I2C_Mem_Write+0x168>)
 8004698:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800469a:	9501      	str	r5, [sp, #4]
 800469c:	9600      	str	r6, [sp, #0]
 800469e:	464b      	mov	r3, r9
 80046a0:	4642      	mov	r2, r8
 80046a2:	4639      	mov	r1, r7
 80046a4:	4620      	mov	r0, r4
 80046a6:	f7ff fa37 	bl	8003b18 <I2C_RequestMemoryWrite>
 80046aa:	2800      	cmp	r0, #0
 80046ac:	d15f      	bne.n	800476e <HAL_I2C_Mem_Write+0x15e>
    while (hi2c->XferSize > 0U)
 80046ae:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80046b0:	b9d3      	cbnz	r3, 80046e8 <HAL_I2C_Mem_Write+0xd8>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046b2:	462a      	mov	r2, r5
 80046b4:	4631      	mov	r1, r6
 80046b6:	4620      	mov	r0, r4
 80046b8:	f7ff fb50 	bl	8003d5c <I2C_WaitOnBTFFlagUntilTimeout>
 80046bc:	2800      	cmp	r0, #0
 80046be:	d044      	beq.n	800474a <HAL_I2C_Mem_Write+0x13a>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80046c2:	2b04      	cmp	r3, #4
 80046c4:	d03a      	beq.n	800473c <HAL_I2C_Mem_Write+0x12c>
      return HAL_ERROR;
 80046c6:	2001      	movs	r0, #1
 80046c8:	e7b3      	b.n	8004632 <HAL_I2C_Mem_Write+0x22>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80046cc:	2b04      	cmp	r3, #4
 80046ce:	d001      	beq.n	80046d4 <HAL_I2C_Mem_Write+0xc4>
        return HAL_ERROR;
 80046d0:	2001      	movs	r0, #1
 80046d2:	e7ae      	b.n	8004632 <HAL_I2C_Mem_Write+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046d4:	6822      	ldr	r2, [r4, #0]
 80046d6:	6813      	ldr	r3, [r2, #0]
 80046d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80046dc:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 80046de:	2001      	movs	r0, #1
 80046e0:	e7a7      	b.n	8004632 <HAL_I2C_Mem_Write+0x22>
    while (hi2c->XferSize > 0U)
 80046e2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d0e4      	beq.n	80046b2 <HAL_I2C_Mem_Write+0xa2>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046e8:	462a      	mov	r2, r5
 80046ea:	4631      	mov	r1, r6
 80046ec:	4620      	mov	r0, r4
 80046ee:	f7ff f9e4 	bl	8003aba <I2C_WaitOnTXEFlagUntilTimeout>
 80046f2:	2800      	cmp	r0, #0
 80046f4:	d1e9      	bne.n	80046ca <HAL_I2C_Mem_Write+0xba>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80046f6:	6823      	ldr	r3, [r4, #0]
 80046f8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80046fa:	7812      	ldrb	r2, [r2, #0]
 80046fc:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80046fe:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004700:	1c43      	adds	r3, r0, #1
 8004702:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8004704:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004706:	3b01      	subs	r3, #1
 8004708:	b29b      	uxth	r3, r3
 800470a:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800470c:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 800470e:	3901      	subs	r1, #1
 8004710:	b289      	uxth	r1, r1
 8004712:	8561      	strh	r1, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004714:	6822      	ldr	r2, [r4, #0]
 8004716:	6951      	ldr	r1, [r2, #20]
 8004718:	f011 0f04 	tst.w	r1, #4
 800471c:	d0e1      	beq.n	80046e2 <HAL_I2C_Mem_Write+0xd2>
 800471e:	2b00      	cmp	r3, #0
 8004720:	d0c7      	beq.n	80046b2 <HAL_I2C_Mem_Write+0xa2>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004722:	7843      	ldrb	r3, [r0, #1]
 8004724:	6113      	str	r3, [r2, #16]
        hi2c->pBuffPtr++;
 8004726:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004728:	3301      	adds	r3, #1
 800472a:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 800472c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800472e:	3b01      	subs	r3, #1
 8004730:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8004732:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004734:	3b01      	subs	r3, #1
 8004736:	b29b      	uxth	r3, r3
 8004738:	8563      	strh	r3, [r4, #42]	; 0x2a
 800473a:	e7d2      	b.n	80046e2 <HAL_I2C_Mem_Write+0xd2>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800473c:	6822      	ldr	r2, [r4, #0]
 800473e:	6813      	ldr	r3, [r2, #0]
 8004740:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004744:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 8004746:	2001      	movs	r0, #1
 8004748:	e773      	b.n	8004632 <HAL_I2C_Mem_Write+0x22>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800474a:	6822      	ldr	r2, [r4, #0]
 800474c:	6813      	ldr	r3, [r2, #0]
 800474e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004752:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8004754:	2320      	movs	r3, #32
 8004756:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800475a:	2300      	movs	r3, #0
 800475c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8004760:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8004764:	e765      	b.n	8004632 <HAL_I2C_Mem_Write+0x22>
      return HAL_BUSY;
 8004766:	2002      	movs	r0, #2
 8004768:	e763      	b.n	8004632 <HAL_I2C_Mem_Write+0x22>
    __HAL_LOCK(hi2c);
 800476a:	2002      	movs	r0, #2
 800476c:	e761      	b.n	8004632 <HAL_I2C_Mem_Write+0x22>
      return HAL_ERROR;
 800476e:	2001      	movs	r0, #1
 8004770:	e75f      	b.n	8004632 <HAL_I2C_Mem_Write+0x22>
 8004772:	bf00      	nop
 8004774:	00100002 	.word	0x00100002
 8004778:	ffff0000 	.word	0xffff0000

0800477c <HAL_I2C_Mem_Read>:
{
 800477c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004780:	b088      	sub	sp, #32
 8004782:	4604      	mov	r4, r0
 8004784:	460f      	mov	r7, r1
 8004786:	4690      	mov	r8, r2
 8004788:	4699      	mov	r9, r3
 800478a:	9e12      	ldr	r6, [sp, #72]	; 0x48
  __IO uint32_t count = 0U;
 800478c:	2300      	movs	r3, #0
 800478e:	9307      	str	r3, [sp, #28]
  uint32_t tickstart = HAL_GetTick();
 8004790:	f7fe feb8 	bl	8003504 <HAL_GetTick>
 8004794:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004796:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 800479a:	b2c0      	uxtb	r0, r0
 800479c:	2820      	cmp	r0, #32
 800479e:	d004      	beq.n	80047aa <HAL_I2C_Mem_Read+0x2e>
    return HAL_BUSY;
 80047a0:	2702      	movs	r7, #2
}
 80047a2:	4638      	mov	r0, r7
 80047a4:	b008      	add	sp, #32
 80047a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80047aa:	9500      	str	r5, [sp, #0]
 80047ac:	2319      	movs	r3, #25
 80047ae:	2201      	movs	r2, #1
 80047b0:	4983      	ldr	r1, [pc, #524]	; (80049c0 <HAL_I2C_Mem_Read+0x244>)
 80047b2:	4620      	mov	r0, r4
 80047b4:	f7ff f8e1 	bl	800397a <I2C_WaitOnFlagUntilTimeout>
 80047b8:	2800      	cmp	r0, #0
 80047ba:	f040 8172 	bne.w	8004aa2 <HAL_I2C_Mem_Read+0x326>
    __HAL_LOCK(hi2c);
 80047be:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	f000 816f 	beq.w	8004aa6 <HAL_I2C_Mem_Read+0x32a>
 80047c8:	2301      	movs	r3, #1
 80047ca:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80047ce:	6823      	ldr	r3, [r4, #0]
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	f012 0f01 	tst.w	r2, #1
 80047d6:	d103      	bne.n	80047e0 <HAL_I2C_Mem_Read+0x64>
      __HAL_I2C_ENABLE(hi2c);
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	f042 0201 	orr.w	r2, r2, #1
 80047de:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80047e0:	6822      	ldr	r2, [r4, #0]
 80047e2:	6813      	ldr	r3, [r2, #0]
 80047e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80047e8:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80047ea:	2322      	movs	r3, #34	; 0x22
 80047ec:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80047f0:	2340      	movs	r3, #64	; 0x40
 80047f2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047f6:	2300      	movs	r3, #0
 80047f8:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 80047fa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80047fc:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 80047fe:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8004802:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004804:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004806:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004808:	4b6e      	ldr	r3, [pc, #440]	; (80049c4 <HAL_I2C_Mem_Read+0x248>)
 800480a:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800480c:	9501      	str	r5, [sp, #4]
 800480e:	9600      	str	r6, [sp, #0]
 8004810:	464b      	mov	r3, r9
 8004812:	4642      	mov	r2, r8
 8004814:	4639      	mov	r1, r7
 8004816:	4620      	mov	r0, r4
 8004818:	f7ff f9ee 	bl	8003bf8 <I2C_RequestMemoryRead>
 800481c:	4607      	mov	r7, r0
 800481e:	2800      	cmp	r0, #0
 8004820:	f040 8143 	bne.w	8004aaa <HAL_I2C_Mem_Read+0x32e>
    if (hi2c->XferSize == 0U)
 8004824:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004826:	b9ab      	cbnz	r3, 8004854 <HAL_I2C_Mem_Read+0xd8>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004828:	9303      	str	r3, [sp, #12]
 800482a:	6823      	ldr	r3, [r4, #0]
 800482c:	695a      	ldr	r2, [r3, #20]
 800482e:	9203      	str	r2, [sp, #12]
 8004830:	699a      	ldr	r2, [r3, #24]
 8004832:	9203      	str	r2, [sp, #12]
 8004834:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800483c:	601a      	str	r2, [r3, #0]
    while (hi2c->XferSize > 0U)
 800483e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004840:	2b00      	cmp	r3, #0
 8004842:	f000 8125 	beq.w	8004a90 <HAL_I2C_Mem_Read+0x314>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004846:	f8df 8180 	ldr.w	r8, [pc, #384]	; 80049c8 <HAL_I2C_Mem_Read+0x24c>
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800484a:	f8df a180 	ldr.w	sl, [pc, #384]	; 80049cc <HAL_I2C_Mem_Read+0x250>
 800484e:	f8df 9180 	ldr.w	r9, [pc, #384]	; 80049d0 <HAL_I2C_Mem_Read+0x254>
 8004852:	e0e8      	b.n	8004a26 <HAL_I2C_Mem_Read+0x2aa>
    else if (hi2c->XferSize == 1U)
 8004854:	2b01      	cmp	r3, #1
 8004856:	d00f      	beq.n	8004878 <HAL_I2C_Mem_Read+0xfc>
    else if (hi2c->XferSize == 2U)
 8004858:	2b02      	cmp	r3, #2
 800485a:	d021      	beq.n	80048a0 <HAL_I2C_Mem_Read+0x124>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800485c:	6822      	ldr	r2, [r4, #0]
 800485e:	6813      	ldr	r3, [r2, #0]
 8004860:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004864:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004866:	2300      	movs	r3, #0
 8004868:	9306      	str	r3, [sp, #24]
 800486a:	6823      	ldr	r3, [r4, #0]
 800486c:	695a      	ldr	r2, [r3, #20]
 800486e:	9206      	str	r2, [sp, #24]
 8004870:	699b      	ldr	r3, [r3, #24]
 8004872:	9306      	str	r3, [sp, #24]
 8004874:	9b06      	ldr	r3, [sp, #24]
 8004876:	e7e2      	b.n	800483e <HAL_I2C_Mem_Read+0xc2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004878:	6822      	ldr	r2, [r4, #0]
 800487a:	6813      	ldr	r3, [r2, #0]
 800487c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004880:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004882:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004884:	2300      	movs	r3, #0
 8004886:	9304      	str	r3, [sp, #16]
 8004888:	6823      	ldr	r3, [r4, #0]
 800488a:	695a      	ldr	r2, [r3, #20]
 800488c:	9204      	str	r2, [sp, #16]
 800488e:	699a      	ldr	r2, [r3, #24]
 8004890:	9204      	str	r2, [sp, #16]
 8004892:	9a04      	ldr	r2, [sp, #16]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800489a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800489c:	b662      	cpsie	i
}
 800489e:	e7ce      	b.n	800483e <HAL_I2C_Mem_Read+0xc2>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80048a0:	6822      	ldr	r2, [r4, #0]
 80048a2:	6813      	ldr	r3, [r2, #0]
 80048a4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80048a8:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80048aa:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048ac:	2300      	movs	r3, #0
 80048ae:	9305      	str	r3, [sp, #20]
 80048b0:	6823      	ldr	r3, [r4, #0]
 80048b2:	695a      	ldr	r2, [r3, #20]
 80048b4:	9205      	str	r2, [sp, #20]
 80048b6:	699a      	ldr	r2, [r3, #24]
 80048b8:	9205      	str	r2, [sp, #20]
 80048ba:	9a05      	ldr	r2, [sp, #20]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048c2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80048c4:	b662      	cpsie	i
}
 80048c6:	e7ba      	b.n	800483e <HAL_I2C_Mem_Read+0xc2>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048c8:	462a      	mov	r2, r5
 80048ca:	4631      	mov	r1, r6
 80048cc:	4620      	mov	r0, r4
 80048ce:	f7ff fa74 	bl	8003dba <I2C_WaitOnRXNEFlagUntilTimeout>
 80048d2:	2800      	cmp	r0, #0
 80048d4:	f040 80eb 	bne.w	8004aae <HAL_I2C_Mem_Read+0x332>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048d8:	6823      	ldr	r3, [r4, #0]
 80048da:	691a      	ldr	r2, [r3, #16]
 80048dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80048de:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80048e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80048e2:	3301      	adds	r3, #1
 80048e4:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80048e6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80048e8:	3b01      	subs	r3, #1
 80048ea:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80048ec:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80048ee:	3b01      	subs	r3, #1
 80048f0:	b29b      	uxth	r3, r3
 80048f2:	8563      	strh	r3, [r4, #42]	; 0x2a
 80048f4:	e094      	b.n	8004a20 <HAL_I2C_Mem_Read+0x2a4>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80048f6:	9500      	str	r5, [sp, #0]
 80048f8:	4633      	mov	r3, r6
 80048fa:	2200      	movs	r2, #0
 80048fc:	4641      	mov	r1, r8
 80048fe:	4620      	mov	r0, r4
 8004900:	f7ff f83b 	bl	800397a <I2C_WaitOnFlagUntilTimeout>
 8004904:	2800      	cmp	r0, #0
 8004906:	f040 80d6 	bne.w	8004ab6 <HAL_I2C_Mem_Read+0x33a>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800490a:	6822      	ldr	r2, [r4, #0]
 800490c:	6813      	ldr	r3, [r2, #0]
 800490e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004912:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004914:	b672      	cpsid	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004916:	6823      	ldr	r3, [r4, #0]
 8004918:	691a      	ldr	r2, [r3, #16]
 800491a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800491c:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 800491e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004920:	3301      	adds	r3, #1
 8004922:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8004924:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004926:	3b01      	subs	r3, #1
 8004928:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800492a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800492c:	3b01      	subs	r3, #1
 800492e:	b29b      	uxth	r3, r3
 8004930:	8563      	strh	r3, [r4, #42]	; 0x2a
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004932:	f8da 3000 	ldr.w	r3, [sl]
 8004936:	08db      	lsrs	r3, r3, #3
 8004938:	fba9 2303 	umull	r2, r3, r9, r3
 800493c:	0a1b      	lsrs	r3, r3, #8
 800493e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004942:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8004946:	9307      	str	r3, [sp, #28]
            count--;
 8004948:	9b07      	ldr	r3, [sp, #28]
 800494a:	3b01      	subs	r3, #1
 800494c:	9307      	str	r3, [sp, #28]
            if (count == 0U)
 800494e:	9b07      	ldr	r3, [sp, #28]
 8004950:	b333      	cbz	r3, 80049a0 <HAL_I2C_Mem_Read+0x224>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004952:	6823      	ldr	r3, [r4, #0]
 8004954:	695a      	ldr	r2, [r3, #20]
 8004956:	f012 0f04 	tst.w	r2, #4
 800495a:	d0f5      	beq.n	8004948 <HAL_I2C_Mem_Read+0x1cc>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004962:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004964:	6823      	ldr	r3, [r4, #0]
 8004966:	691a      	ldr	r2, [r3, #16]
 8004968:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800496a:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 800496c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800496e:	3301      	adds	r3, #1
 8004970:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8004972:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004974:	3b01      	subs	r3, #1
 8004976:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8004978:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800497a:	3b01      	subs	r3, #1
 800497c:	b29b      	uxth	r3, r3
 800497e:	8563      	strh	r3, [r4, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004980:	b662      	cpsie	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004982:	6823      	ldr	r3, [r4, #0]
 8004984:	691a      	ldr	r2, [r3, #16]
 8004986:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004988:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 800498a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800498c:	3301      	adds	r3, #1
 800498e:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8004990:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004992:	3b01      	subs	r3, #1
 8004994:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8004996:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004998:	3b01      	subs	r3, #1
 800499a:	b29b      	uxth	r3, r3
 800499c:	8563      	strh	r3, [r4, #42]	; 0x2a
 800499e:	e03f      	b.n	8004a20 <HAL_I2C_Mem_Read+0x2a4>
              hi2c->PreviousState       = I2C_STATE_NONE;
 80049a0:	6323      	str	r3, [r4, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80049a2:	2220      	movs	r2, #32
 80049a4:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049a8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049ac:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80049ae:	f042 0220 	orr.w	r2, r2, #32
 80049b2:	6422      	str	r2, [r4, #64]	; 0x40
 80049b4:	b662      	cpsie	i
              __HAL_UNLOCK(hi2c);
 80049b6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
              return HAL_ERROR;
 80049ba:	2701      	movs	r7, #1
 80049bc:	e6f1      	b.n	80047a2 <HAL_I2C_Mem_Read+0x26>
 80049be:	bf00      	nop
 80049c0:	00100002 	.word	0x00100002
 80049c4:	ffff0000 	.word	0xffff0000
 80049c8:	00010004 	.word	0x00010004
 80049cc:	20000000 	.word	0x20000000
 80049d0:	14f8b589 	.word	0x14f8b589
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049d4:	462a      	mov	r2, r5
 80049d6:	4631      	mov	r1, r6
 80049d8:	4620      	mov	r0, r4
 80049da:	f7ff f9ee 	bl	8003dba <I2C_WaitOnRXNEFlagUntilTimeout>
 80049de:	2800      	cmp	r0, #0
 80049e0:	d16b      	bne.n	8004aba <HAL_I2C_Mem_Read+0x33e>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049e2:	6823      	ldr	r3, [r4, #0]
 80049e4:	691a      	ldr	r2, [r3, #16]
 80049e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80049e8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80049ea:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80049ec:	1c53      	adds	r3, r2, #1
 80049ee:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 80049f0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80049f2:	3b01      	subs	r3, #1
 80049f4:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 80049f6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80049f8:	3b01      	subs	r3, #1
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80049fe:	6823      	ldr	r3, [r4, #0]
 8004a00:	6959      	ldr	r1, [r3, #20]
 8004a02:	f011 0f04 	tst.w	r1, #4
 8004a06:	d00b      	beq.n	8004a20 <HAL_I2C_Mem_Read+0x2a4>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a08:	691b      	ldr	r3, [r3, #16]
 8004a0a:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 8004a0c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004a0e:	3301      	adds	r3, #1
 8004a10:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8004a12:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004a14:	3b01      	subs	r3, #1
 8004a16:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8004a18:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004a1a:	3b01      	subs	r3, #1
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004a20:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d034      	beq.n	8004a90 <HAL_I2C_Mem_Read+0x314>
      if (hi2c->XferSize <= 3U)
 8004a26:	2b03      	cmp	r3, #3
 8004a28:	d8d4      	bhi.n	80049d4 <HAL_I2C_Mem_Read+0x258>
        if (hi2c->XferSize == 1U)
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	f43f af4c 	beq.w	80048c8 <HAL_I2C_Mem_Read+0x14c>
        else if (hi2c->XferSize == 2U)
 8004a30:	2b02      	cmp	r3, #2
 8004a32:	f47f af60 	bne.w	80048f6 <HAL_I2C_Mem_Read+0x17a>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004a36:	9500      	str	r5, [sp, #0]
 8004a38:	4633      	mov	r3, r6
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	4641      	mov	r1, r8
 8004a3e:	4620      	mov	r0, r4
 8004a40:	f7fe ff9b 	bl	800397a <I2C_WaitOnFlagUntilTimeout>
 8004a44:	2800      	cmp	r0, #0
 8004a46:	d134      	bne.n	8004ab2 <HAL_I2C_Mem_Read+0x336>
  __ASM volatile ("cpsid i" : : : "memory");
 8004a48:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a4a:	6822      	ldr	r2, [r4, #0]
 8004a4c:	6813      	ldr	r3, [r2, #0]
 8004a4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004a52:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a54:	6823      	ldr	r3, [r4, #0]
 8004a56:	691a      	ldr	r2, [r3, #16]
 8004a58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004a5a:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8004a5c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004a5e:	3301      	adds	r3, #1
 8004a60:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8004a62:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004a64:	3b01      	subs	r3, #1
 8004a66:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8004a68:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004a6a:	3b01      	subs	r3, #1
 8004a6c:	b29b      	uxth	r3, r3
 8004a6e:	8563      	strh	r3, [r4, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004a70:	b662      	cpsie	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a72:	6823      	ldr	r3, [r4, #0]
 8004a74:	691a      	ldr	r2, [r3, #16]
 8004a76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004a78:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8004a7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004a7c:	3301      	adds	r3, #1
 8004a7e:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8004a80:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004a82:	3b01      	subs	r3, #1
 8004a84:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8004a86:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004a88:	3b01      	subs	r3, #1
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	8563      	strh	r3, [r4, #42]	; 0x2a
 8004a8e:	e7c7      	b.n	8004a20 <HAL_I2C_Mem_Read+0x2a4>
    hi2c->State = HAL_I2C_STATE_READY;
 8004a90:	2320      	movs	r3, #32
 8004a92:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a96:	2300      	movs	r3, #0
 8004a98:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8004a9c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8004aa0:	e67f      	b.n	80047a2 <HAL_I2C_Mem_Read+0x26>
      return HAL_BUSY;
 8004aa2:	2702      	movs	r7, #2
 8004aa4:	e67d      	b.n	80047a2 <HAL_I2C_Mem_Read+0x26>
    __HAL_LOCK(hi2c);
 8004aa6:	2702      	movs	r7, #2
 8004aa8:	e67b      	b.n	80047a2 <HAL_I2C_Mem_Read+0x26>
      return HAL_ERROR;
 8004aaa:	2701      	movs	r7, #1
 8004aac:	e679      	b.n	80047a2 <HAL_I2C_Mem_Read+0x26>
            return HAL_ERROR;
 8004aae:	2701      	movs	r7, #1
 8004ab0:	e677      	b.n	80047a2 <HAL_I2C_Mem_Read+0x26>
            return HAL_ERROR;
 8004ab2:	2701      	movs	r7, #1
 8004ab4:	e675      	b.n	80047a2 <HAL_I2C_Mem_Read+0x26>
            return HAL_ERROR;
 8004ab6:	2701      	movs	r7, #1
 8004ab8:	e673      	b.n	80047a2 <HAL_I2C_Mem_Read+0x26>
          return HAL_ERROR;
 8004aba:	2701      	movs	r7, #1
 8004abc:	e671      	b.n	80047a2 <HAL_I2C_Mem_Read+0x26>
 8004abe:	bf00      	nop

08004ac0 <HAL_I2C_MasterTxCpltCallback>:
}
 8004ac0:	4770      	bx	lr

08004ac2 <HAL_I2C_MasterRxCpltCallback>:
}
 8004ac2:	4770      	bx	lr

08004ac4 <HAL_I2C_SlaveTxCpltCallback>:
}
 8004ac4:	4770      	bx	lr

08004ac6 <HAL_I2C_SlaveRxCpltCallback>:
}
 8004ac6:	4770      	bx	lr

08004ac8 <HAL_I2C_AddrCallback>:
}
 8004ac8:	4770      	bx	lr

08004aca <HAL_I2C_ListenCpltCallback>:
}
 8004aca:	4770      	bx	lr

08004acc <HAL_I2C_MemTxCpltCallback>:
}
 8004acc:	4770      	bx	lr

08004ace <I2C_MemoryTransmit_TXE_BTF>:
{
 8004ace:	b508      	push	{r3, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004ad0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
  if (hi2c->EventCount == 0U)
 8004ad4:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8004ad6:	b99a      	cbnz	r2, 8004b00 <I2C_MemoryTransmit_TXE_BTF+0x32>
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004ad8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	d008      	beq.n	8004af0 <I2C_MemoryTransmit_TXE_BTF+0x22>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004ade:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8004ae0:	6802      	ldr	r2, [r0, #0]
 8004ae2:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8004ae6:	6113      	str	r3, [r2, #16]
      hi2c->EventCount++;
 8004ae8:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8004aea:	3301      	adds	r3, #1
 8004aec:	6503      	str	r3, [r0, #80]	; 0x50
}
 8004aee:	bd08      	pop	{r3, pc}
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004af0:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8004af2:	6802      	ldr	r2, [r0, #0]
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	6113      	str	r3, [r2, #16]
      hi2c->EventCount += 2U;
 8004af8:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8004afa:	3302      	adds	r3, #2
 8004afc:	6503      	str	r3, [r0, #80]	; 0x50
 8004afe:	e7f6      	b.n	8004aee <I2C_MemoryTransmit_TXE_BTF+0x20>
 8004b00:	b2db      	uxtb	r3, r3
  else if (hi2c->EventCount == 1U)
 8004b02:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8004b04:	2a01      	cmp	r2, #1
 8004b06:	d00b      	beq.n	8004b20 <I2C_MemoryTransmit_TXE_BTF+0x52>
  else if (hi2c->EventCount == 2U)
 8004b08:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8004b0a:	2a02      	cmp	r2, #2
 8004b0c:	d13f      	bne.n	8004b8e <I2C_MemoryTransmit_TXE_BTF+0xc0>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004b0e:	2b22      	cmp	r3, #34	; 0x22
 8004b10:	d00e      	beq.n	8004b30 <I2C_MemoryTransmit_TXE_BTF+0x62>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004b12:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8004b14:	b292      	uxth	r2, r2
 8004b16:	b302      	cbz	r2, 8004b5a <I2C_MemoryTransmit_TXE_BTF+0x8c>
 8004b18:	2b21      	cmp	r3, #33	; 0x21
 8004b1a:	d012      	beq.n	8004b42 <I2C_MemoryTransmit_TXE_BTF+0x74>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004b1c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8004b1e:	e7e6      	b.n	8004aee <I2C_MemoryTransmit_TXE_BTF+0x20>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004b20:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8004b22:	6802      	ldr	r2, [r0, #0]
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	6113      	str	r3, [r2, #16]
    hi2c->EventCount++;
 8004b28:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8004b2a:	3301      	adds	r3, #1
 8004b2c:	6503      	str	r3, [r0, #80]	; 0x50
 8004b2e:	e7de      	b.n	8004aee <I2C_MemoryTransmit_TXE_BTF+0x20>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004b30:	6802      	ldr	r2, [r0, #0]
 8004b32:	6813      	ldr	r3, [r2, #0]
 8004b34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b38:	6013      	str	r3, [r2, #0]
      hi2c->EventCount++;
 8004b3a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8004b3c:	3301      	adds	r3, #1
 8004b3e:	6503      	str	r3, [r0, #80]	; 0x50
 8004b40:	e7d5      	b.n	8004aee <I2C_MemoryTransmit_TXE_BTF+0x20>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b42:	6803      	ldr	r3, [r0, #0]
 8004b44:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8004b46:	7812      	ldrb	r2, [r2, #0]
 8004b48:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004b4a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004b4c:	3301      	adds	r3, #1
 8004b4e:	6243      	str	r3, [r0, #36]	; 0x24
      hi2c->XferCount--;
 8004b50:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8004b52:	3b01      	subs	r3, #1
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	8543      	strh	r3, [r0, #42]	; 0x2a
 8004b58:	e7c9      	b.n	8004aee <I2C_MemoryTransmit_TXE_BTF+0x20>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004b5a:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8004b5c:	b292      	uxth	r2, r2
 8004b5e:	2a00      	cmp	r2, #0
 8004b60:	d1c5      	bne.n	8004aee <I2C_MemoryTransmit_TXE_BTF+0x20>
 8004b62:	2b21      	cmp	r3, #33	; 0x21
 8004b64:	d1c3      	bne.n	8004aee <I2C_MemoryTransmit_TXE_BTF+0x20>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004b66:	6802      	ldr	r2, [r0, #0]
 8004b68:	6853      	ldr	r3, [r2, #4]
 8004b6a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004b6e:	6053      	str	r3, [r2, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b70:	6802      	ldr	r2, [r0, #0]
 8004b72:	6813      	ldr	r3, [r2, #0]
 8004b74:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004b78:	6013      	str	r3, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004b7e:	2220      	movs	r2, #32
 8004b80:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b84:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004b88:	f7ff ffa0 	bl	8004acc <HAL_I2C_MemTxCpltCallback>
 8004b8c:	e7af      	b.n	8004aee <I2C_MemoryTransmit_TXE_BTF+0x20>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8004b8e:	6803      	ldr	r3, [r0, #0]
 8004b90:	695a      	ldr	r2, [r3, #20]
 8004b92:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004b96:	d0aa      	beq.n	8004aee <I2C_MemoryTransmit_TXE_BTF+0x20>
    hi2c->Instance->DR = 0x00U;
 8004b98:	2200      	movs	r2, #0
 8004b9a:	611a      	str	r2, [r3, #16]
}
 8004b9c:	e7a7      	b.n	8004aee <I2C_MemoryTransmit_TXE_BTF+0x20>

08004b9e <HAL_I2C_MemRxCpltCallback>:
}
 8004b9e:	4770      	bx	lr

08004ba0 <HAL_I2C_ErrorCallback>:
}
 8004ba0:	4770      	bx	lr

08004ba2 <HAL_I2C_AbortCpltCallback>:
}
 8004ba2:	4770      	bx	lr

08004ba4 <I2C_DMAAbort>:
{
 8004ba4:	b500      	push	{lr}
 8004ba6:	b083      	sub	sp, #12
  __IO uint32_t count = 0U;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	9301      	str	r3, [sp, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004bac:	6a40      	ldr	r0, [r0, #36]	; 0x24
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004bae:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 8004bb2:	b2d2      	uxtb	r2, r2
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004bb4:	4b32      	ldr	r3, [pc, #200]	; (8004c80 <I2C_DMAAbort+0xdc>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	08db      	lsrs	r3, r3, #3
 8004bba:	4932      	ldr	r1, [pc, #200]	; (8004c84 <I2C_DMAAbort+0xe0>)
 8004bbc:	fba1 1303 	umull	r1, r3, r1, r3
 8004bc0:	0a1b      	lsrs	r3, r3, #8
 8004bc2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004bc6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8004bca:	9301      	str	r3, [sp, #4]
    if (count == 0U)
 8004bcc:	9b01      	ldr	r3, [sp, #4]
 8004bce:	b143      	cbz	r3, 8004be2 <I2C_DMAAbort+0x3e>
    count--;
 8004bd0:	9b01      	ldr	r3, [sp, #4]
 8004bd2:	3b01      	subs	r3, #1
 8004bd4:	9301      	str	r3, [sp, #4]
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004bd6:	6803      	ldr	r3, [r0, #0]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f413 7f00 	tst.w	r3, #512	; 0x200
 8004bde:	d1f5      	bne.n	8004bcc <I2C_DMAAbort+0x28>
 8004be0:	e003      	b.n	8004bea <I2C_DMAAbort+0x46>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004be2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004be4:	f043 0320 	orr.w	r3, r3, #32
 8004be8:	6403      	str	r3, [r0, #64]	; 0x40
  if (hi2c->hdmatx != NULL)
 8004bea:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004bec:	b10b      	cbz	r3, 8004bf2 <I2C_DMAAbort+0x4e>
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004bee:	2100      	movs	r1, #0
 8004bf0:	6299      	str	r1, [r3, #40]	; 0x28
  if (hi2c->hdmarx != NULL)
 8004bf2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004bf4:	b10b      	cbz	r3, 8004bfa <I2C_DMAAbort+0x56>
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004bf6:	2100      	movs	r1, #0
 8004bf8:	6299      	str	r1, [r3, #40]	; 0x28
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bfa:	6801      	ldr	r1, [r0, #0]
 8004bfc:	680b      	ldr	r3, [r1, #0]
 8004bfe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c02:	600b      	str	r3, [r1, #0]
  hi2c->XferCount = 0U;
 8004c04:	2300      	movs	r3, #0
 8004c06:	8543      	strh	r3, [r0, #42]	; 0x2a
  if (hi2c->hdmatx != NULL)
 8004c08:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004c0a:	b10b      	cbz	r3, 8004c10 <I2C_DMAAbort+0x6c>
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004c0c:	2100      	movs	r1, #0
 8004c0e:	6359      	str	r1, [r3, #52]	; 0x34
  if (hi2c->hdmarx != NULL)
 8004c10:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004c12:	b10b      	cbz	r3, 8004c18 <I2C_DMAAbort+0x74>
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004c14:	2100      	movs	r1, #0
 8004c16:	6359      	str	r1, [r3, #52]	; 0x34
  __HAL_I2C_DISABLE(hi2c);
 8004c18:	6801      	ldr	r1, [r0, #0]
 8004c1a:	680b      	ldr	r3, [r1, #0]
 8004c1c:	f023 0301 	bic.w	r3, r3, #1
 8004c20:	600b      	str	r3, [r1, #0]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004c22:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004c26:	b2db      	uxtb	r3, r3
 8004c28:	2b60      	cmp	r3, #96	; 0x60
 8004c2a:	d00e      	beq.n	8004c4a <I2C_DMAAbort+0xa6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004c2c:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8004c30:	2a28      	cmp	r2, #40	; 0x28
 8004c32:	d014      	beq.n	8004c5e <I2C_DMAAbort+0xba>
      hi2c->State = HAL_I2C_STATE_READY;
 8004c34:	2320      	movs	r3, #32
 8004c36:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004c40:	f7ff ffae 	bl	8004ba0 <HAL_I2C_ErrorCallback>
}
 8004c44:	b003      	add	sp, #12
 8004c46:	f85d fb04 	ldr.w	pc, [sp], #4
    hi2c->State         = HAL_I2C_STATE_READY;
 8004c4a:	2320      	movs	r3, #32
 8004c4c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004c50:	2300      	movs	r3, #0
 8004c52:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004c56:	6403      	str	r3, [r0, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 8004c58:	f7ff ffa3 	bl	8004ba2 <HAL_I2C_AbortCpltCallback>
 8004c5c:	e7f2      	b.n	8004c44 <I2C_DMAAbort+0xa0>
      __HAL_I2C_ENABLE(hi2c);
 8004c5e:	6802      	ldr	r2, [r0, #0]
 8004c60:	6813      	ldr	r3, [r2, #0]
 8004c62:	f043 0301 	orr.w	r3, r3, #1
 8004c66:	6013      	str	r3, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c68:	6802      	ldr	r2, [r0, #0]
 8004c6a:	6813      	ldr	r3, [r2, #0]
 8004c6c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004c70:	6013      	str	r3, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004c72:	2300      	movs	r3, #0
 8004c74:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004c76:	2328      	movs	r3, #40	; 0x28
 8004c78:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 8004c7c:	e7e0      	b.n	8004c40 <I2C_DMAAbort+0x9c>
 8004c7e:	bf00      	nop
 8004c80:	20000000 	.word	0x20000000
 8004c84:	14f8b589 	.word	0x14f8b589

08004c88 <I2C_ITError>:
{
 8004c88:	b510      	push	{r4, lr}
 8004c8a:	4604      	mov	r4, r0
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004c8c:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 8004c90:	b2d2      	uxtb	r2, r2
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004c92:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8004c96:	b2db      	uxtb	r3, r3
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004c98:	2b10      	cmp	r3, #16
 8004c9a:	d036      	beq.n	8004d0a <I2C_ITError+0x82>
 8004c9c:	2b40      	cmp	r3, #64	; 0x40
 8004c9e:	d034      	beq.n	8004d0a <I2C_ITError+0x82>
  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004ca0:	f002 0328 	and.w	r3, r2, #40	; 0x28
 8004ca4:	2b28      	cmp	r3, #40	; 0x28
 8004ca6:	d03d      	beq.n	8004d24 <I2C_ITError+0x9c>
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004ca8:	6823      	ldr	r3, [r4, #0]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8004cb0:	d107      	bne.n	8004cc2 <I2C_ITError+0x3a>
 8004cb2:	2a60      	cmp	r2, #96	; 0x60
 8004cb4:	d005      	beq.n	8004cc2 <I2C_ITError+0x3a>
      hi2c->State = HAL_I2C_STATE_READY;
 8004cb6:	2320      	movs	r3, #32
 8004cb8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->PreviousState = I2C_STATE_NONE;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	6323      	str	r3, [r4, #48]	; 0x30
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004cc6:	6823      	ldr	r3, [r4, #0]
 8004cc8:	685a      	ldr	r2, [r3, #4]
 8004cca:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8004cce:	d04d      	beq.n	8004d6c <I2C_ITError+0xe4>
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004cd0:	685a      	ldr	r2, [r3, #4]
 8004cd2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004cd6:	605a      	str	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004cd8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8004cda:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 8004cde:	b2db      	uxtb	r3, r3
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	d025      	beq.n	8004d30 <I2C_ITError+0xa8>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004ce4:	4b46      	ldr	r3, [pc, #280]	; (8004e00 <I2C_ITError+0x178>)
 8004ce6:	6353      	str	r3, [r2, #52]	; 0x34
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004ce8:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8004cea:	f7fe fc9d 	bl	8003628 <HAL_DMA_Abort_IT>
 8004cee:	2800      	cmp	r0, #0
 8004cf0:	d04e      	beq.n	8004d90 <I2C_ITError+0x108>
        __HAL_I2C_DISABLE(hi2c);
 8004cf2:	6822      	ldr	r2, [r4, #0]
 8004cf4:	6813      	ldr	r3, [r2, #0]
 8004cf6:	f023 0301 	bic.w	r3, r3, #1
 8004cfa:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8004cfc:	2320      	movs	r3, #32
 8004cfe:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004d02:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8004d04:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004d06:	4798      	blx	r3
 8004d08:	e042      	b.n	8004d90 <I2C_ITError+0x108>
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004d0a:	2a22      	cmp	r2, #34	; 0x22
 8004d0c:	d1c8      	bne.n	8004ca0 <I2C_ITError+0x18>
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004d0e:	6822      	ldr	r2, [r4, #0]
 8004d10:	6813      	ldr	r3, [r2, #0]
 8004d12:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d16:	6013      	str	r3, [r2, #0]
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004d18:	6823      	ldr	r3, [r4, #0]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8004d20:	d0c9      	beq.n	8004cb6 <I2C_ITError+0x2e>
 8004d22:	e7ce      	b.n	8004cc2 <I2C_ITError+0x3a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004d24:	2300      	movs	r3, #0
 8004d26:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004d28:	2328      	movs	r3, #40	; 0x28
 8004d2a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 8004d2e:	e7ca      	b.n	8004cc6 <I2C_ITError+0x3e>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004d30:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004d32:	4a33      	ldr	r2, [pc, #204]	; (8004e00 <I2C_ITError+0x178>)
 8004d34:	635a      	str	r2, [r3, #52]	; 0x34
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004d36:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004d38:	f7fe fc76 	bl	8003628 <HAL_DMA_Abort_IT>
 8004d3c:	b340      	cbz	r0, 8004d90 <I2C_ITError+0x108>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004d3e:	6823      	ldr	r3, [r4, #0]
 8004d40:	695a      	ldr	r2, [r3, #20]
 8004d42:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004d46:	d005      	beq.n	8004d54 <I2C_ITError+0xcc>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d48:	691a      	ldr	r2, [r3, #16]
 8004d4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d4c:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8004d4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d50:	3301      	adds	r3, #1
 8004d52:	6263      	str	r3, [r4, #36]	; 0x24
        __HAL_I2C_DISABLE(hi2c);
 8004d54:	6822      	ldr	r2, [r4, #0]
 8004d56:	6813      	ldr	r3, [r2, #0]
 8004d58:	f023 0301 	bic.w	r3, r3, #1
 8004d5c:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8004d5e:	2320      	movs	r3, #32
 8004d60:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004d64:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004d66:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004d68:	4798      	blx	r3
 8004d6a:	e011      	b.n	8004d90 <I2C_ITError+0x108>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004d6c:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8004d70:	b2d2      	uxtb	r2, r2
 8004d72:	2a60      	cmp	r2, #96	; 0x60
 8004d74:	d01f      	beq.n	8004db6 <I2C_ITError+0x12e>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004d76:	695a      	ldr	r2, [r3, #20]
 8004d78:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004d7c:	d005      	beq.n	8004d8a <I2C_ITError+0x102>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d7e:	691a      	ldr	r2, [r3, #16]
 8004d80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d82:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8004d84:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d86:	3301      	adds	r3, #1
 8004d88:	6263      	str	r3, [r4, #36]	; 0x24
    HAL_I2C_ErrorCallback(hi2c);
 8004d8a:	4620      	mov	r0, r4
 8004d8c:	f7ff ff08 	bl	8004ba0 <HAL_I2C_ErrorCallback>
  CurrentError = hi2c->ErrorCode;
 8004d90:	6c23      	ldr	r3, [r4, #64]	; 0x40
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004d92:	f013 0f0f 	tst.w	r3, #15
 8004d96:	d004      	beq.n	8004da2 <I2C_ITError+0x11a>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d98:	6822      	ldr	r2, [r4, #0]
 8004d9a:	6853      	ldr	r3, [r2, #4]
 8004d9c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004da0:	6053      	str	r3, [r2, #4]
  CurrentState = hi2c->State;
 8004da2:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8004da6:	b2db      	uxtb	r3, r3
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004da8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004daa:	f012 0f04 	tst.w	r2, #4
 8004dae:	d001      	beq.n	8004db4 <I2C_ITError+0x12c>
 8004db0:	2b28      	cmp	r3, #40	; 0x28
 8004db2:	d018      	beq.n	8004de6 <I2C_ITError+0x15e>
}
 8004db4:	bd10      	pop	{r4, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 8004db6:	2220      	movs	r2, #32
 8004db8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	6422      	str	r2, [r4, #64]	; 0x40
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004dc0:	695a      	ldr	r2, [r3, #20]
 8004dc2:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004dc6:	d005      	beq.n	8004dd4 <I2C_ITError+0x14c>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dc8:	691a      	ldr	r2, [r3, #16]
 8004dca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004dcc:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8004dce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004dd0:	3301      	adds	r3, #1
 8004dd2:	6263      	str	r3, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE(hi2c);
 8004dd4:	6822      	ldr	r2, [r4, #0]
 8004dd6:	6813      	ldr	r3, [r2, #0]
 8004dd8:	f023 0301 	bic.w	r3, r3, #1
 8004ddc:	6013      	str	r3, [r2, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 8004dde:	4620      	mov	r0, r4
 8004de0:	f7ff fedf 	bl	8004ba2 <HAL_I2C_AbortCpltCallback>
 8004de4:	e7d4      	b.n	8004d90 <I2C_ITError+0x108>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004de6:	4b07      	ldr	r3, [pc, #28]	; (8004e04 <I2C_ITError+0x17c>)
 8004de8:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004dea:	2300      	movs	r3, #0
 8004dec:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004dee:	2220      	movs	r2, #32
 8004df0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004df4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 8004df8:	4620      	mov	r0, r4
 8004dfa:	f7ff fe66 	bl	8004aca <HAL_I2C_ListenCpltCallback>
}
 8004dfe:	e7d9      	b.n	8004db4 <I2C_ITError+0x12c>
 8004e00:	08004ba5 	.word	0x08004ba5
 8004e04:	ffff0000 	.word	0xffff0000

08004e08 <HAL_I2C_EV_IRQHandler>:
{
 8004e08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e0a:	b08f      	sub	sp, #60	; 0x3c
 8004e0c:	4604      	mov	r4, r0
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004e0e:	6803      	ldr	r3, [r0, #0]
 8004e10:	6858      	ldr	r0, [r3, #4]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004e12:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004e14:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8004e18:	b2d2      	uxtb	r2, r2
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004e1a:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 8004e1e:	b2c9      	uxtb	r1, r1
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004e20:	2a10      	cmp	r2, #16
 8004e22:	d024      	beq.n	8004e6e <HAL_I2C_EV_IRQHandler+0x66>
 8004e24:	2a40      	cmp	r2, #64	; 0x40
 8004e26:	d022      	beq.n	8004e6e <HAL_I2C_EV_IRQHandler+0x66>
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004e28:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004e2a:	2a00      	cmp	r2, #0
 8004e2c:	f000 83d6 	beq.w	80055dc <HAL_I2C_EV_IRQHandler+0x7d4>
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004e30:	695a      	ldr	r2, [r3, #20]
  uint32_t sr2itflags               = 0U;
 8004e32:	2500      	movs	r5, #0
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004e34:	f012 0f02 	tst.w	r2, #2
 8004e38:	f000 83ea 	beq.w	8005610 <HAL_I2C_EV_IRQHandler+0x808>
 8004e3c:	f410 7f00 	tst.w	r0, #512	; 0x200
 8004e40:	f000 83ec 	beq.w	800561c <HAL_I2C_EV_IRQHandler+0x814>
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004e44:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004e46:	b102      	cbz	r2, 8004e4a <HAL_I2C_EV_IRQHandler+0x42>
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004e48:	699d      	ldr	r5, [r3, #24]
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004e4a:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8004e4e:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8004e52:	2a28      	cmp	r2, #40	; 0x28
 8004e54:	f000 83c5 	beq.w	80055e2 <HAL_I2C_EV_IRQHandler+0x7da>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e58:	2200      	movs	r2, #0
 8004e5a:	920c      	str	r2, [sp, #48]	; 0x30
 8004e5c:	6959      	ldr	r1, [r3, #20]
 8004e5e:	910c      	str	r1, [sp, #48]	; 0x30
 8004e60:	699b      	ldr	r3, [r3, #24]
 8004e62:	930c      	str	r3, [sp, #48]	; 0x30
 8004e64:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004e66:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
}
 8004e6a:	b00f      	add	sp, #60	; 0x3c
 8004e6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004e6e:	699f      	ldr	r7, [r3, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004e70:	695d      	ldr	r5, [r3, #20]
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004e72:	f015 0f01 	tst.w	r5, #1
 8004e76:	d11d      	bne.n	8004eb4 <HAL_I2C_EV_IRQHandler+0xac>
 8004e78:	f5b6 0f2a 	cmp.w	r6, #11141120	; 0xaa0000
 8004e7c:	d0f5      	beq.n	8004e6a <HAL_I2C_EV_IRQHandler+0x62>
 8004e7e:	f1b6 4f2a 	cmp.w	r6, #2852126720	; 0xaa000000
 8004e82:	d0f2      	beq.n	8004e6a <HAL_I2C_EV_IRQHandler+0x62>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004e84:	f015 0f08 	tst.w	r5, #8
 8004e88:	d01b      	beq.n	8004ec2 <HAL_I2C_EV_IRQHandler+0xba>
 8004e8a:	f410 7f00 	tst.w	r0, #512	; 0x200
 8004e8e:	f000 8198 	beq.w	80051c2 <HAL_I2C_EV_IRQHandler+0x3ba>
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004e92:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004e94:	b2d2      	uxtb	r2, r2
 8004e96:	611a      	str	r2, [r3, #16]
  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004e98:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	f000 8085 	beq.w	8004faa <HAL_I2C_EV_IRQHandler+0x1a2>
 8004ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	f000 8081 	beq.w	8004faa <HAL_I2C_EV_IRQHandler+0x1a2>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004ea8:	6822      	ldr	r2, [r4, #0]
 8004eaa:	6853      	ldr	r3, [r2, #4]
 8004eac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004eb0:	6053      	str	r3, [r2, #4]
 8004eb2:	e7da      	b.n	8004e6a <HAL_I2C_EV_IRQHandler+0x62>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004eb4:	f410 7f00 	tst.w	r0, #512	; 0x200
 8004eb8:	d11d      	bne.n	8004ef6 <HAL_I2C_EV_IRQHandler+0xee>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004eba:	f015 0f08 	tst.w	r5, #8
 8004ebe:	f040 8180 	bne.w	80051c2 <HAL_I2C_EV_IRQHandler+0x3ba>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004ec2:	f015 0f02 	tst.w	r5, #2
 8004ec6:	f000 817c 	beq.w	80051c2 <HAL_I2C_EV_IRQHandler+0x3ba>
 8004eca:	f410 7f00 	tst.w	r0, #512	; 0x200
 8004ece:	f000 8178 	beq.w	80051c2 <HAL_I2C_EV_IRQHandler+0x3ba>
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004ed2:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8004ed6:	b2d1      	uxtb	r1, r2
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004ed8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004eda:	6b25      	ldr	r5, [r4, #48]	; 0x30
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004edc:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8004ee0:	b2d2      	uxtb	r2, r2
 8004ee2:	2a22      	cmp	r2, #34	; 0x22
 8004ee4:	d06a      	beq.n	8004fbc <HAL_I2C_EV_IRQHandler+0x1b4>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	920a      	str	r2, [sp, #40]	; 0x28
 8004eea:	695a      	ldr	r2, [r3, #20]
 8004eec:	920a      	str	r2, [sp, #40]	; 0x28
 8004eee:	699b      	ldr	r3, [r3, #24]
 8004ef0:	930a      	str	r3, [sp, #40]	; 0x28
 8004ef2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ef4:	e7b9      	b.n	8004e6a <HAL_I2C_EV_IRQHandler+0x62>
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004ef6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004ef8:	f5b2 0f2a 	cmp.w	r2, #11141120	; 0xaa0000
 8004efc:	d01a      	beq.n	8004f34 <HAL_I2C_EV_IRQHandler+0x12c>
  }
  /* else if user set XferOptions to I2C_OTHER_AND_LAST_FRAME */
  /* it request implicitly to generate a restart condition    */
  /* then generate a stop condition at the end of transfer    */
  /* set XferOptions to I2C_FIRST_AND_LAST_FRAME              */
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004efe:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004f00:	f1b2 4f2a 	cmp.w	r2, #2852126720	; 0xaa000000
  {
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004f04:	bf04      	itt	eq
 8004f06:	2208      	moveq	r2, #8
 8004f08:	62e2      	streq	r2, [r4, #44]	; 0x2c
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004f0a:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8004f0e:	b2d2      	uxtb	r2, r2
 8004f10:	2a40      	cmp	r2, #64	; 0x40
 8004f12:	d012      	beq.n	8004f3a <HAL_I2C_EV_IRQHandler+0x132>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004f14:	6922      	ldr	r2, [r4, #16]
 8004f16:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8004f1a:	d01b      	beq.n	8004f54 <HAL_I2C_EV_IRQHandler+0x14c>
      if (hi2c->EventCount == 0U)
 8004f1c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8004f1e:	2a00      	cmp	r2, #0
 8004f20:	d136      	bne.n	8004f90 <HAL_I2C_EV_IRQHandler+0x188>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004f22:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004f24:	f3c2 12c8 	ubfx	r2, r2, #7, #9
 8004f28:	f002 0206 	and.w	r2, r2, #6
 8004f2c:	f042 02f0 	orr.w	r2, r2, #240	; 0xf0
 8004f30:	611a      	str	r2, [r3, #16]
 8004f32:	e79a      	b.n	8004e6a <HAL_I2C_EV_IRQHandler+0x62>
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004f34:	2201      	movs	r2, #1
 8004f36:	62e2      	str	r2, [r4, #44]	; 0x2c
 8004f38:	e7e7      	b.n	8004f0a <HAL_I2C_EV_IRQHandler+0x102>
    if (hi2c->EventCount == 0U)
 8004f3a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8004f3c:	b922      	cbnz	r2, 8004f48 <HAL_I2C_EV_IRQHandler+0x140>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004f3e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004f40:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004f44:	611a      	str	r2, [r3, #16]
 8004f46:	e790      	b.n	8004e6a <HAL_I2C_EV_IRQHandler+0x62>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004f48:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004f4a:	f042 0201 	orr.w	r2, r2, #1
 8004f4e:	b2d2      	uxtb	r2, r2
 8004f50:	611a      	str	r2, [r3, #16]
 8004f52:	e78a      	b.n	8004e6a <HAL_I2C_EV_IRQHandler+0x62>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004f54:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8004f58:	b2d2      	uxtb	r2, r2
 8004f5a:	2a21      	cmp	r2, #33	; 0x21
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004f5c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004f5e:	bf0e      	itee	eq
 8004f60:	f002 02fe 	andeq.w	r2, r2, #254	; 0xfe
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004f64:	f042 0201 	orrne.w	r2, r2, #1
 8004f68:	b2d2      	uxtbne	r2, r2
 8004f6a:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004f6c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004f6e:	b13b      	cbz	r3, 8004f80 <HAL_I2C_EV_IRQHandler+0x178>
 8004f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f72:	b12b      	cbz	r3, 8004f80 <HAL_I2C_EV_IRQHandler+0x178>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004f74:	6822      	ldr	r2, [r4, #0]
 8004f76:	6853      	ldr	r3, [r2, #4]
 8004f78:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004f7c:	6053      	str	r3, [r2, #4]
 8004f7e:	e774      	b.n	8004e6a <HAL_I2C_EV_IRQHandler+0x62>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004f80:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	f43f af71 	beq.w	8004e6a <HAL_I2C_EV_IRQHandler+0x62>
 8004f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d1f2      	bne.n	8004f74 <HAL_I2C_EV_IRQHandler+0x16c>
 8004f8e:	e76c      	b.n	8004e6a <HAL_I2C_EV_IRQHandler+0x62>
      else if (hi2c->EventCount == 1U)
 8004f90:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8004f92:	2a01      	cmp	r2, #1
 8004f94:	f47f af69 	bne.w	8004e6a <HAL_I2C_EV_IRQHandler+0x62>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004f98:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004f9a:	f3c2 12c8 	ubfx	r2, r2, #7, #9
 8004f9e:	f002 0206 	and.w	r2, r2, #6
 8004fa2:	f042 02f1 	orr.w	r2, r2, #241	; 0xf1
 8004fa6:	611a      	str	r2, [r3, #16]
 8004fa8:	e75f      	b.n	8004e6a <HAL_I2C_EV_IRQHandler+0x62>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004faa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	f43f af5c 	beq.w	8004e6a <HAL_I2C_EV_IRQHandler+0x62>
 8004fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	f47f af77 	bne.w	8004ea8 <HAL_I2C_EV_IRQHandler+0xa0>
 8004fba:	e756      	b.n	8004e6a <HAL_I2C_EV_IRQHandler+0x62>
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004fbc:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8004fbe:	b90a      	cbnz	r2, 8004fc4 <HAL_I2C_EV_IRQHandler+0x1bc>
 8004fc0:	2940      	cmp	r1, #64	; 0x40
 8004fc2:	d015      	beq.n	8004ff0 <HAL_I2C_EV_IRQHandler+0x1e8>
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004fc4:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8004fc6:	b91a      	cbnz	r2, 8004fd0 <HAL_I2C_EV_IRQHandler+0x1c8>
 8004fc8:	6922      	ldr	r2, [r4, #16]
 8004fca:	f5b2 4f40 	cmp.w	r2, #49152	; 0xc000
 8004fce:	d016      	beq.n	8004ffe <HAL_I2C_EV_IRQHandler+0x1f6>
      if (hi2c->XferCount == 0U)
 8004fd0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004fd2:	b292      	uxth	r2, r2
 8004fd4:	bb12      	cbnz	r2, 800501c <HAL_I2C_EV_IRQHandler+0x214>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fd6:	9202      	str	r2, [sp, #8]
 8004fd8:	695a      	ldr	r2, [r3, #20]
 8004fda:	9202      	str	r2, [sp, #8]
 8004fdc:	699a      	ldr	r2, [r3, #24]
 8004fde:	9202      	str	r2, [sp, #8]
 8004fe0:	9a02      	ldr	r2, [sp, #8]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fe2:	681a      	ldr	r2, [r3, #0]
 8004fe4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fe8:	601a      	str	r2, [r3, #0]
      hi2c->EventCount = 0U;
 8004fea:	2300      	movs	r3, #0
 8004fec:	6523      	str	r3, [r4, #80]	; 0x50
 8004fee:	e73c      	b.n	8004e6a <HAL_I2C_EV_IRQHandler+0x62>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ff0:	9200      	str	r2, [sp, #0]
 8004ff2:	695a      	ldr	r2, [r3, #20]
 8004ff4:	9200      	str	r2, [sp, #0]
 8004ff6:	699b      	ldr	r3, [r3, #24]
 8004ff8:	9300      	str	r3, [sp, #0]
 8004ffa:	9b00      	ldr	r3, [sp, #0]
 8004ffc:	e735      	b.n	8004e6a <HAL_I2C_EV_IRQHandler+0x62>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ffe:	2200      	movs	r2, #0
 8005000:	9201      	str	r2, [sp, #4]
 8005002:	695a      	ldr	r2, [r3, #20]
 8005004:	9201      	str	r2, [sp, #4]
 8005006:	699a      	ldr	r2, [r3, #24]
 8005008:	9201      	str	r2, [sp, #4]
 800500a:	9a01      	ldr	r2, [sp, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800500c:	681a      	ldr	r2, [r3, #0]
 800500e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005012:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8005014:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005016:	3301      	adds	r3, #1
 8005018:	6523      	str	r3, [r4, #80]	; 0x50
 800501a:	e726      	b.n	8004e6a <HAL_I2C_EV_IRQHandler+0x62>
      else if (hi2c->XferCount == 1U)
 800501c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800501e:	b292      	uxth	r2, r2
 8005020:	2a01      	cmp	r2, #1
 8005022:	d01b      	beq.n	800505c <HAL_I2C_EV_IRQHandler+0x254>
      else if (hi2c->XferCount == 2U)
 8005024:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005026:	b292      	uxth	r2, r2
 8005028:	2a02      	cmp	r2, #2
 800502a:	d06e      	beq.n	800510a <HAL_I2C_EV_IRQHandler+0x302>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800502c:	681a      	ldr	r2, [r3, #0]
 800502e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005032:	601a      	str	r2, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005034:	6823      	ldr	r3, [r4, #0]
 8005036:	685a      	ldr	r2, [r3, #4]
 8005038:	f412 6f00 	tst.w	r2, #2048	; 0x800
 800503c:	f000 80b4 	beq.w	80051a8 <HAL_I2C_EV_IRQHandler+0x3a0>
 8005040:	2820      	cmp	r0, #32
 8005042:	f200 80ba 	bhi.w	80051ba <HAL_I2C_EV_IRQHandler+0x3b2>
 8005046:	2807      	cmp	r0, #7
 8005048:	f200 80a7 	bhi.w	800519a <HAL_I2C_EV_IRQHandler+0x392>
 800504c:	2801      	cmp	r0, #1
 800504e:	f040 80ab 	bne.w	80051a8 <HAL_I2C_EV_IRQHandler+0x3a0>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005052:	685a      	ldr	r2, [r3, #4]
 8005054:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005058:	605a      	str	r2, [r3, #4]
 800505a:	e0a5      	b.n	80051a8 <HAL_I2C_EV_IRQHandler+0x3a0>
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800505c:	f510 3f80 	cmn.w	r0, #65536	; 0x10000
 8005060:	d019      	beq.n	8005096 <HAL_I2C_EV_IRQHandler+0x28e>
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005062:	2808      	cmp	r0, #8
 8005064:	d03b      	beq.n	80050de <HAL_I2C_EV_IRQHandler+0x2d6>
 8005066:	2820      	cmp	r0, #32
 8005068:	d039      	beq.n	80050de <HAL_I2C_EV_IRQHandler+0x2d6>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800506a:	2d12      	cmp	r5, #18
 800506c:	d035      	beq.n	80050da <HAL_I2C_EV_IRQHandler+0x2d2>
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800506e:	2810      	cmp	r0, #16
 8005070:	d804      	bhi.n	800507c <HAL_I2C_EV_IRQHandler+0x274>
 8005072:	4a9a      	ldr	r2, [pc, #616]	; (80052dc <HAL_I2C_EV_IRQHandler+0x4d4>)
 8005074:	40c2      	lsrs	r2, r0
 8005076:	f012 0f01 	tst.w	r2, #1
 800507a:	d141      	bne.n	8005100 <HAL_I2C_EV_IRQHandler+0x2f8>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005082:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005084:	2300      	movs	r3, #0
 8005086:	9305      	str	r3, [sp, #20]
 8005088:	6823      	ldr	r3, [r4, #0]
 800508a:	695a      	ldr	r2, [r3, #20]
 800508c:	9205      	str	r2, [sp, #20]
 800508e:	699b      	ldr	r3, [r3, #24]
 8005090:	9305      	str	r3, [sp, #20]
 8005092:	9b05      	ldr	r3, [sp, #20]
 8005094:	e7a9      	b.n	8004fea <HAL_I2C_EV_IRQHandler+0x1e2>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005096:	681a      	ldr	r2, [r3, #0]
 8005098:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800509c:	601a      	str	r2, [r3, #0]
          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800509e:	6823      	ldr	r3, [r4, #0]
 80050a0:	685a      	ldr	r2, [r3, #4]
 80050a2:	f412 6f00 	tst.w	r2, #2048	; 0x800
 80050a6:	d00c      	beq.n	80050c2 <HAL_I2C_EV_IRQHandler+0x2ba>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050ae:	601a      	str	r2, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050b0:	2300      	movs	r3, #0
 80050b2:	9303      	str	r3, [sp, #12]
 80050b4:	6823      	ldr	r3, [r4, #0]
 80050b6:	695a      	ldr	r2, [r3, #20]
 80050b8:	9203      	str	r2, [sp, #12]
 80050ba:	699b      	ldr	r3, [r3, #24]
 80050bc:	9303      	str	r3, [sp, #12]
 80050be:	9b03      	ldr	r3, [sp, #12]
 80050c0:	e793      	b.n	8004fea <HAL_I2C_EV_IRQHandler+0x1e2>
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050c2:	2200      	movs	r2, #0
 80050c4:	9204      	str	r2, [sp, #16]
 80050c6:	695a      	ldr	r2, [r3, #20]
 80050c8:	9204      	str	r2, [sp, #16]
 80050ca:	699a      	ldr	r2, [r3, #24]
 80050cc:	9204      	str	r2, [sp, #16]
 80050ce:	9a04      	ldr	r2, [sp, #16]
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050d6:	601a      	str	r2, [r3, #0]
 80050d8:	e787      	b.n	8004fea <HAL_I2C_EV_IRQHandler+0x1e2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80050da:	2801      	cmp	r0, #1
 80050dc:	d0ce      	beq.n	800507c <HAL_I2C_EV_IRQHandler+0x274>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050de:	681a      	ldr	r2, [r3, #0]
 80050e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050e4:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050e6:	2300      	movs	r3, #0
 80050e8:	9306      	str	r3, [sp, #24]
 80050ea:	6823      	ldr	r3, [r4, #0]
 80050ec:	695a      	ldr	r2, [r3, #20]
 80050ee:	9206      	str	r2, [sp, #24]
 80050f0:	699a      	ldr	r2, [r3, #24]
 80050f2:	9206      	str	r2, [sp, #24]
 80050f4:	9a06      	ldr	r2, [sp, #24]
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050fc:	601a      	str	r2, [r3, #0]
 80050fe:	e774      	b.n	8004fea <HAL_I2C_EV_IRQHandler+0x1e2>
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005106:	601a      	str	r2, [r3, #0]
 8005108:	e7bc      	b.n	8005084 <HAL_I2C_EV_IRQHandler+0x27c>
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800510a:	2810      	cmp	r0, #16
 800510c:	d804      	bhi.n	8005118 <HAL_I2C_EV_IRQHandler+0x310>
 800510e:	4a73      	ldr	r2, [pc, #460]	; (80052dc <HAL_I2C_EV_IRQHandler+0x4d4>)
 8005110:	40c2      	lsrs	r2, r0
 8005112:	f012 0f01 	tst.w	r2, #1
 8005116:	d11c      	bne.n	8005152 <HAL_I2C_EV_IRQHandler+0x34a>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800511e:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005120:	2300      	movs	r3, #0
 8005122:	9307      	str	r3, [sp, #28]
 8005124:	6823      	ldr	r3, [r4, #0]
 8005126:	695a      	ldr	r2, [r3, #20]
 8005128:	9207      	str	r2, [sp, #28]
 800512a:	699a      	ldr	r2, [r3, #24]
 800512c:	9207      	str	r2, [sp, #28]
 800512e:	9a07      	ldr	r2, [sp, #28]
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005136:	601a      	str	r2, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005138:	6823      	ldr	r3, [r4, #0]
 800513a:	685a      	ldr	r2, [r3, #4]
 800513c:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8005140:	f43f af53 	beq.w	8004fea <HAL_I2C_EV_IRQHandler+0x1e2>
 8005144:	2820      	cmp	r0, #32
 8005146:	d916      	bls.n	8005176 <HAL_I2C_EV_IRQHandler+0x36e>
 8005148:	f510 3f80 	cmn.w	r0, #65536	; 0x10000
 800514c:	f47f af4d 	bne.w	8004fea <HAL_I2C_EV_IRQHandler+0x1e2>
 8005150:	e016      	b.n	8005180 <HAL_I2C_EV_IRQHandler+0x378>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005158:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800515a:	2300      	movs	r3, #0
 800515c:	9308      	str	r3, [sp, #32]
 800515e:	6822      	ldr	r2, [r4, #0]
 8005160:	6953      	ldr	r3, [r2, #20]
 8005162:	9308      	str	r3, [sp, #32]
 8005164:	6993      	ldr	r3, [r2, #24]
 8005166:	9308      	str	r3, [sp, #32]
 8005168:	9b08      	ldr	r3, [sp, #32]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800516a:	4613      	mov	r3, r2
 800516c:	6852      	ldr	r2, [r2, #4]
 800516e:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8005172:	f43f af3a 	beq.w	8004fea <HAL_I2C_EV_IRQHandler+0x1e2>
 8005176:	2807      	cmp	r0, #7
 8005178:	d807      	bhi.n	800518a <HAL_I2C_EV_IRQHandler+0x382>
 800517a:	2801      	cmp	r0, #1
 800517c:	f47f af35 	bne.w	8004fea <HAL_I2C_EV_IRQHandler+0x1e2>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005180:	685a      	ldr	r2, [r3, #4]
 8005182:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005186:	605a      	str	r2, [r3, #4]
 8005188:	e72f      	b.n	8004fea <HAL_I2C_EV_IRQHandler+0x1e2>
 800518a:	3808      	subs	r0, #8
 800518c:	4a54      	ldr	r2, [pc, #336]	; (80052e0 <HAL_I2C_EV_IRQHandler+0x4d8>)
 800518e:	40c2      	lsrs	r2, r0
 8005190:	f012 0f01 	tst.w	r2, #1
 8005194:	f43f af29 	beq.w	8004fea <HAL_I2C_EV_IRQHandler+0x1e2>
 8005198:	e7f2      	b.n	8005180 <HAL_I2C_EV_IRQHandler+0x378>
 800519a:	3808      	subs	r0, #8
 800519c:	4a50      	ldr	r2, [pc, #320]	; (80052e0 <HAL_I2C_EV_IRQHandler+0x4d8>)
 800519e:	40c2      	lsrs	r2, r0
 80051a0:	f012 0f01 	tst.w	r2, #1
 80051a4:	f47f af55 	bne.w	8005052 <HAL_I2C_EV_IRQHandler+0x24a>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051a8:	2300      	movs	r3, #0
 80051aa:	9309      	str	r3, [sp, #36]	; 0x24
 80051ac:	6823      	ldr	r3, [r4, #0]
 80051ae:	695a      	ldr	r2, [r3, #20]
 80051b0:	9209      	str	r2, [sp, #36]	; 0x24
 80051b2:	699b      	ldr	r3, [r3, #24]
 80051b4:	9309      	str	r3, [sp, #36]	; 0x24
 80051b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051b8:	e717      	b.n	8004fea <HAL_I2C_EV_IRQHandler+0x1e2>
 80051ba:	f510 3f80 	cmn.w	r0, #65536	; 0x10000
 80051be:	d1f3      	bne.n	80051a8 <HAL_I2C_EV_IRQHandler+0x3a0>
 80051c0:	e747      	b.n	8005052 <HAL_I2C_EV_IRQHandler+0x24a>
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80051c2:	f017 0f04 	tst.w	r7, #4
 80051c6:	f000 80da 	beq.w	800537e <HAL_I2C_EV_IRQHandler+0x576>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80051ca:	685e      	ldr	r6, [r3, #4]
 80051cc:	f416 6f00 	tst.w	r6, #2048	; 0x800
 80051d0:	f47f ae4b 	bne.w	8004e6a <HAL_I2C_EV_IRQHandler+0x62>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80051d4:	f015 0f80 	tst.w	r5, #128	; 0x80
 80051d8:	d06e      	beq.n	80052b8 <HAL_I2C_EV_IRQHandler+0x4b0>
 80051da:	f410 6f80 	tst.w	r0, #1024	; 0x400
 80051de:	d06b      	beq.n	80052b8 <HAL_I2C_EV_IRQHandler+0x4b0>
 80051e0:	f015 0f04 	tst.w	r5, #4
 80051e4:	d16c      	bne.n	80052c0 <HAL_I2C_EV_IRQHandler+0x4b8>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80051e6:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 80051ea:	b2d2      	uxtb	r2, r2
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80051ec:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
 80051f0:	b2c9      	uxtb	r1, r1
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80051f2:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80051f4:	8d20      	ldrh	r0, [r4, #40]	; 0x28
 80051f6:	2800      	cmp	r0, #0
 80051f8:	d140      	bne.n	800527c <HAL_I2C_EV_IRQHandler+0x474>
 80051fa:	2a21      	cmp	r2, #33	; 0x21
 80051fc:	d006      	beq.n	800520c <HAL_I2C_EV_IRQHandler+0x404>
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80051fe:	2940      	cmp	r1, #64	; 0x40
 8005200:	f47f ae33 	bne.w	8004e6a <HAL_I2C_EV_IRQHandler+0x62>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8005204:	2a22      	cmp	r2, #34	; 0x22
 8005206:	f47f ae30 	bne.w	8004e6a <HAL_I2C_EV_IRQHandler+0x62>
 800520a:	e039      	b.n	8005280 <HAL_I2C_EV_IRQHandler+0x478>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800520c:	2d08      	cmp	r5, #8
 800520e:	d004      	beq.n	800521a <HAL_I2C_EV_IRQHandler+0x412>
 8005210:	2d20      	cmp	r5, #32
 8005212:	d002      	beq.n	800521a <HAL_I2C_EV_IRQHandler+0x412>
 8005214:	f515 3f80 	cmn.w	r5, #65536	; 0x10000
 8005218:	d119      	bne.n	800524e <HAL_I2C_EV_IRQHandler+0x446>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800521a:	685a      	ldr	r2, [r3, #4]
 800521c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005220:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005222:	6822      	ldr	r2, [r4, #0]
 8005224:	6813      	ldr	r3, [r2, #0]
 8005226:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800522a:	6013      	str	r3, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800522c:	2300      	movs	r3, #0
 800522e:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005230:	2320      	movs	r3, #32
 8005232:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005236:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 800523a:	b2db      	uxtb	r3, r3
 800523c:	2b40      	cmp	r3, #64	; 0x40
 800523e:	d016      	beq.n	800526e <HAL_I2C_EV_IRQHandler+0x466>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005240:	2300      	movs	r3, #0
 8005242:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005246:	4620      	mov	r0, r4
 8005248:	f7ff fc3a 	bl	8004ac0 <HAL_I2C_MasterTxCpltCallback>
 800524c:	e60d      	b.n	8004e6a <HAL_I2C_EV_IRQHandler+0x62>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800524e:	685a      	ldr	r2, [r3, #4]
 8005250:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005254:	605a      	str	r2, [r3, #4]
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005256:	2311      	movs	r3, #17
 8005258:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800525a:	2300      	movs	r3, #0
 800525c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8005260:	2320      	movs	r3, #32
 8005262:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005266:	4620      	mov	r0, r4
 8005268:	f7ff fc2a 	bl	8004ac0 <HAL_I2C_MasterTxCpltCallback>
 800526c:	e5fd      	b.n	8004e6a <HAL_I2C_EV_IRQHandler+0x62>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800526e:	2300      	movs	r3, #0
 8005270:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        HAL_I2C_MemTxCpltCallback(hi2c);
 8005274:	4620      	mov	r0, r4
 8005276:	f7ff fc29 	bl	8004acc <HAL_I2C_MemTxCpltCallback>
 800527a:	e5f6      	b.n	8004e6a <HAL_I2C_EV_IRQHandler+0x62>
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800527c:	2a21      	cmp	r2, #33	; 0x21
 800527e:	d1be      	bne.n	80051fe <HAL_I2C_EV_IRQHandler+0x3f6>
    if (hi2c->XferCount == 0U)
 8005280:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005282:	b292      	uxth	r2, r2
 8005284:	b922      	cbnz	r2, 8005290 <HAL_I2C_EV_IRQHandler+0x488>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005286:	685a      	ldr	r2, [r3, #4]
 8005288:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800528c:	605a      	str	r2, [r3, #4]
 800528e:	e5ec      	b.n	8004e6a <HAL_I2C_EV_IRQHandler+0x62>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005290:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8005294:	b2d2      	uxtb	r2, r2
 8005296:	2a40      	cmp	r2, #64	; 0x40
 8005298:	d00a      	beq.n	80052b0 <HAL_I2C_EV_IRQHandler+0x4a8>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800529a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800529c:	7812      	ldrb	r2, [r2, #0]
 800529e:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80052a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80052a2:	3301      	adds	r3, #1
 80052a4:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 80052a6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80052a8:	3b01      	subs	r3, #1
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	8563      	strh	r3, [r4, #42]	; 0x2a
 80052ae:	e5dc      	b.n	8004e6a <HAL_I2C_EV_IRQHandler+0x62>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80052b0:	4620      	mov	r0, r4
 80052b2:	f7ff fc0c 	bl	8004ace <I2C_MemoryTransmit_TXE_BTF>
 80052b6:	e5d8      	b.n	8004e6a <HAL_I2C_EV_IRQHandler+0x62>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80052b8:	f015 0f04 	tst.w	r5, #4
 80052bc:	f43f add5 	beq.w	8004e6a <HAL_I2C_EV_IRQHandler+0x62>
 80052c0:	f410 7f00 	tst.w	r0, #512	; 0x200
 80052c4:	f43f add1 	beq.w	8004e6a <HAL_I2C_EV_IRQHandler+0x62>
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80052c8:	2921      	cmp	r1, #33	; 0x21
 80052ca:	d00b      	beq.n	80052e4 <HAL_I2C_EV_IRQHandler+0x4dc>
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80052cc:	2a40      	cmp	r2, #64	; 0x40
 80052ce:	f47f adcc 	bne.w	8004e6a <HAL_I2C_EV_IRQHandler+0x62>
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80052d2:	4620      	mov	r0, r4
 80052d4:	f7ff fbfb 	bl	8004ace <I2C_MemoryTransmit_TXE_BTF>
 80052d8:	e5c7      	b.n	8004e6a <HAL_I2C_EV_IRQHandler+0x62>
 80052da:	bf00      	nop
 80052dc:	00010014 	.word	0x00010014
 80052e0:	01000101 	.word	0x01000101
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80052e4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80052e6:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 80052ea:	b2d2      	uxtb	r2, r2
 80052ec:	2a21      	cmp	r2, #33	; 0x21
 80052ee:	f47f adbc 	bne.w	8004e6a <HAL_I2C_EV_IRQHandler+0x62>
    if (hi2c->XferCount != 0U)
 80052f2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80052f4:	b292      	uxth	r2, r2
 80052f6:	b152      	cbz	r2, 800530e <HAL_I2C_EV_IRQHandler+0x506>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80052f8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80052fa:	7812      	ldrb	r2, [r2, #0]
 80052fc:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80052fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005300:	3301      	adds	r3, #1
 8005302:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8005304:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005306:	3b01      	subs	r3, #1
 8005308:	b29b      	uxth	r3, r3
 800530a:	8563      	strh	r3, [r4, #42]	; 0x2a
 800530c:	e5ad      	b.n	8004e6a <HAL_I2C_EV_IRQHandler+0x62>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800530e:	2908      	cmp	r1, #8
 8005310:	d004      	beq.n	800531c <HAL_I2C_EV_IRQHandler+0x514>
 8005312:	2920      	cmp	r1, #32
 8005314:	d002      	beq.n	800531c <HAL_I2C_EV_IRQHandler+0x514>
 8005316:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 800531a:	d119      	bne.n	8005350 <HAL_I2C_EV_IRQHandler+0x548>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800531c:	685a      	ldr	r2, [r3, #4]
 800531e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005322:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005324:	6822      	ldr	r2, [r4, #0]
 8005326:	6813      	ldr	r3, [r2, #0]
 8005328:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800532c:	6013      	str	r3, [r2, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800532e:	2300      	movs	r3, #0
 8005330:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005332:	2320      	movs	r3, #32
 8005334:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005338:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 800533c:	b2db      	uxtb	r3, r3
 800533e:	2b40      	cmp	r3, #64	; 0x40
 8005340:	d016      	beq.n	8005370 <HAL_I2C_EV_IRQHandler+0x568>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005342:	2300      	movs	r3, #0
 8005344:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8005348:	4620      	mov	r0, r4
 800534a:	f7ff fbb9 	bl	8004ac0 <HAL_I2C_MasterTxCpltCallback>
 800534e:	e58c      	b.n	8004e6a <HAL_I2C_EV_IRQHandler+0x62>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005350:	685a      	ldr	r2, [r3, #4]
 8005352:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005356:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005358:	2311      	movs	r3, #17
 800535a:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800535c:	2300      	movs	r3, #0
 800535e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8005362:	2320      	movs	r3, #32
 8005364:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005368:	4620      	mov	r0, r4
 800536a:	f7ff fba9 	bl	8004ac0 <HAL_I2C_MasterTxCpltCallback>
 800536e:	e57c      	b.n	8004e6a <HAL_I2C_EV_IRQHandler+0x62>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005370:	2300      	movs	r3, #0
 8005372:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8005376:	4620      	mov	r0, r4
 8005378:	f7ff fba8 	bl	8004acc <HAL_I2C_MemTxCpltCallback>
 800537c:	e575      	b.n	8004e6a <HAL_I2C_EV_IRQHandler+0x62>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800537e:	685a      	ldr	r2, [r3, #4]
 8005380:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8005384:	f47f ad71 	bne.w	8004e6a <HAL_I2C_EV_IRQHandler+0x62>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005388:	f015 0f40 	tst.w	r5, #64	; 0x40
 800538c:	f000 808f 	beq.w	80054ae <HAL_I2C_EV_IRQHandler+0x6a6>
 8005390:	f410 6f80 	tst.w	r0, #1024	; 0x400
 8005394:	f000 808b 	beq.w	80054ae <HAL_I2C_EV_IRQHandler+0x6a6>
 8005398:	f015 0f04 	tst.w	r5, #4
 800539c:	f040 808b 	bne.w	80054b6 <HAL_I2C_EV_IRQHandler+0x6ae>
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80053a0:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 80053a4:	b2d2      	uxtb	r2, r2
 80053a6:	2a22      	cmp	r2, #34	; 0x22
 80053a8:	f47f ad5f 	bne.w	8004e6a <HAL_I2C_EV_IRQHandler+0x62>
    tmp = hi2c->XferCount;
 80053ac:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80053ae:	b292      	uxth	r2, r2
    if (tmp > 3U)
 80053b0:	2a03      	cmp	r2, #3
 80053b2:	d914      	bls.n	80053de <HAL_I2C_EV_IRQHandler+0x5d6>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053b4:	691a      	ldr	r2, [r3, #16]
 80053b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80053b8:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80053ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80053bc:	3301      	adds	r3, #1
 80053be:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80053c0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80053c2:	3b01      	subs	r3, #1
 80053c4:	b29b      	uxth	r3, r3
 80053c6:	8563      	strh	r3, [r4, #42]	; 0x2a
      if (hi2c->XferCount == (uint16_t)3)
 80053c8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80053ca:	b29b      	uxth	r3, r3
 80053cc:	2b03      	cmp	r3, #3
 80053ce:	f47f ad4c 	bne.w	8004e6a <HAL_I2C_EV_IRQHandler+0x62>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80053d2:	6822      	ldr	r2, [r4, #0]
 80053d4:	6853      	ldr	r3, [r2, #4]
 80053d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80053da:	6053      	str	r3, [r2, #4]
 80053dc:	e545      	b.n	8004e6a <HAL_I2C_EV_IRQHandler+0x62>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80053de:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80053e0:	2902      	cmp	r1, #2
 80053e2:	d001      	beq.n	80053e8 <HAL_I2C_EV_IRQHandler+0x5e0>
 80053e4:	2a01      	cmp	r2, #1
 80053e6:	d904      	bls.n	80053f2 <HAL_I2C_EV_IRQHandler+0x5ea>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80053e8:	685a      	ldr	r2, [r3, #4]
 80053ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053ee:	605a      	str	r2, [r3, #4]
 80053f0:	e53b      	b.n	8004e6a <HAL_I2C_EV_IRQHandler+0x62>
  __IO uint32_t count = 0U;
 80053f2:	2200      	movs	r2, #0
 80053f4:	920b      	str	r2, [sp, #44]	; 0x2c
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80053f6:	4a85      	ldr	r2, [pc, #532]	; (800560c <HAL_I2C_EV_IRQHandler+0x804>)
 80053f8:	6812      	ldr	r2, [r2, #0]
 80053fa:	f246 11a8 	movw	r1, #25000	; 0x61a8
 80053fe:	fbb2 f2f1 	udiv	r2, r2, r1
 8005402:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8005406:	920b      	str	r2, [sp, #44]	; 0x2c
    count--;
 8005408:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800540a:	3a01      	subs	r2, #1
 800540c:	920b      	str	r2, [sp, #44]	; 0x2c
    if (count == 0U)
 800540e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005410:	b342      	cbz	r2, 8005464 <HAL_I2C_EV_IRQHandler+0x65c>
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005412:	681a      	ldr	r2, [r3, #0]
 8005414:	f412 7f00 	tst.w	r2, #512	; 0x200
 8005418:	d1f6      	bne.n	8005408 <HAL_I2C_EV_IRQHandler+0x600>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800541a:	681a      	ldr	r2, [r3, #0]
 800541c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005420:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005422:	6822      	ldr	r2, [r4, #0]
 8005424:	6853      	ldr	r3, [r2, #4]
 8005426:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800542a:	6053      	str	r3, [r2, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800542c:	6823      	ldr	r3, [r4, #0]
 800542e:	691a      	ldr	r2, [r3, #16]
 8005430:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005432:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005434:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005436:	3301      	adds	r3, #1
 8005438:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 800543a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800543c:	3b01      	subs	r3, #1
 800543e:	b29b      	uxth	r3, r3
 8005440:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005442:	2320      	movs	r3, #32
 8005444:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005448:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 800544c:	b2db      	uxtb	r3, r3
 800544e:	2b40      	cmp	r3, #64	; 0x40
 8005450:	d025      	beq.n	800549e <HAL_I2C_EV_IRQHandler+0x696>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005452:	2300      	movs	r3, #0
 8005454:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005458:	2312      	movs	r3, #18
 800545a:	6323      	str	r3, [r4, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800545c:	4620      	mov	r0, r4
 800545e:	f7ff fb30 	bl	8004ac2 <HAL_I2C_MasterRxCpltCallback>
 8005462:	e502      	b.n	8004e6a <HAL_I2C_EV_IRQHandler+0x62>
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005464:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005466:	f042 0220 	orr.w	r2, r2, #32
 800546a:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800546c:	685a      	ldr	r2, [r3, #4]
 800546e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005472:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005474:	6823      	ldr	r3, [r4, #0]
 8005476:	691a      	ldr	r2, [r3, #16]
 8005478:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800547a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800547c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800547e:	3301      	adds	r3, #1
 8005480:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8005482:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005484:	3b01      	subs	r3, #1
 8005486:	b29b      	uxth	r3, r3
 8005488:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800548a:	2320      	movs	r3, #32
 800548c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005490:	2300      	movs	r3, #0
 8005492:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8005496:	4620      	mov	r0, r4
 8005498:	f7ff fb82 	bl	8004ba0 <HAL_I2C_ErrorCallback>
 800549c:	e4e5      	b.n	8004e6a <HAL_I2C_EV_IRQHandler+0x62>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800549e:	2300      	movs	r3, #0
 80054a0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80054a4:	6323      	str	r3, [r4, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80054a6:	4620      	mov	r0, r4
 80054a8:	f7ff fb79 	bl	8004b9e <HAL_I2C_MemRxCpltCallback>
 80054ac:	e4dd      	b.n	8004e6a <HAL_I2C_EV_IRQHandler+0x62>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80054ae:	f015 0f04 	tst.w	r5, #4
 80054b2:	f43f acda 	beq.w	8004e6a <HAL_I2C_EV_IRQHandler+0x62>
 80054b6:	f410 7f00 	tst.w	r0, #512	; 0x200
 80054ba:	f43f acd6 	beq.w	8004e6a <HAL_I2C_EV_IRQHandler+0x62>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80054be:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  if (hi2c->XferCount == 4U)
 80054c0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80054c2:	b292      	uxth	r2, r2
 80054c4:	2a04      	cmp	r2, #4
 80054c6:	d012      	beq.n	80054ee <HAL_I2C_EV_IRQHandler+0x6e6>
  else if (hi2c->XferCount == 3U)
 80054c8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80054ca:	b292      	uxth	r2, r2
 80054cc:	2a03      	cmp	r2, #3
 80054ce:	d01e      	beq.n	800550e <HAL_I2C_EV_IRQHandler+0x706>
  else if (hi2c->XferCount == 2U)
 80054d0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80054d2:	b292      	uxth	r2, r2
 80054d4:	2a02      	cmp	r2, #2
 80054d6:	d033      	beq.n	8005540 <HAL_I2C_EV_IRQHandler+0x738>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054d8:	691a      	ldr	r2, [r3, #16]
 80054da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80054dc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80054de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80054e0:	3301      	adds	r3, #1
 80054e2:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 80054e4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80054e6:	3b01      	subs	r3, #1
 80054e8:	b29b      	uxth	r3, r3
 80054ea:	8563      	strh	r3, [r4, #42]	; 0x2a
 80054ec:	e4bd      	b.n	8004e6a <HAL_I2C_EV_IRQHandler+0x62>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80054ee:	685a      	ldr	r2, [r3, #4]
 80054f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054f4:	605a      	str	r2, [r3, #4]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054f6:	6823      	ldr	r3, [r4, #0]
 80054f8:	691a      	ldr	r2, [r3, #16]
 80054fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80054fc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80054fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005500:	3301      	adds	r3, #1
 8005502:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8005504:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005506:	3b01      	subs	r3, #1
 8005508:	b29b      	uxth	r3, r3
 800550a:	8563      	strh	r3, [r4, #42]	; 0x2a
 800550c:	e4ad      	b.n	8004e6a <HAL_I2C_EV_IRQHandler+0x62>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800550e:	685a      	ldr	r2, [r3, #4]
 8005510:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005514:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8005516:	2904      	cmp	r1, #4
 8005518:	d006      	beq.n	8005528 <HAL_I2C_EV_IRQHandler+0x720>
 800551a:	2902      	cmp	r1, #2
 800551c:	d004      	beq.n	8005528 <HAL_I2C_EV_IRQHandler+0x720>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800551e:	6822      	ldr	r2, [r4, #0]
 8005520:	6813      	ldr	r3, [r2, #0]
 8005522:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005526:	6013      	str	r3, [r2, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005528:	6823      	ldr	r3, [r4, #0]
 800552a:	691a      	ldr	r2, [r3, #16]
 800552c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800552e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005530:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005532:	3301      	adds	r3, #1
 8005534:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8005536:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005538:	3b01      	subs	r3, #1
 800553a:	b29b      	uxth	r3, r3
 800553c:	8563      	strh	r3, [r4, #42]	; 0x2a
 800553e:	e494      	b.n	8004e6a <HAL_I2C_EV_IRQHandler+0x62>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8005540:	3901      	subs	r1, #1
 8005542:	290f      	cmp	r1, #15
 8005544:	d83d      	bhi.n	80055c2 <HAL_I2C_EV_IRQHandler+0x7ba>
 8005546:	e8df f001 	tbb	[pc, r1]
 800554a:	3708      	.short	0x3708
 800554c:	3c3c373c 	.word	0x3c3c373c
 8005550:	3c3c3c3c 	.word	0x3c3c3c3c
 8005554:	3c3c3c3c 	.word	0x3c3c3c3c
 8005558:	083c      	.short	0x083c
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005560:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005562:	6823      	ldr	r3, [r4, #0]
 8005564:	691a      	ldr	r2, [r3, #16]
 8005566:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005568:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800556a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800556c:	1c53      	adds	r3, r2, #1
 800556e:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8005570:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005572:	3b01      	subs	r3, #1
 8005574:	b29b      	uxth	r3, r3
 8005576:	8563      	strh	r3, [r4, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005578:	6823      	ldr	r3, [r4, #0]
 800557a:	691b      	ldr	r3, [r3, #16]
 800557c:	7053      	strb	r3, [r2, #1]
    hi2c->pBuffPtr++;
 800557e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005580:	3301      	adds	r3, #1
 8005582:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8005584:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005586:	3b01      	subs	r3, #1
 8005588:	b29b      	uxth	r3, r3
 800558a:	8563      	strh	r3, [r4, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800558c:	6822      	ldr	r2, [r4, #0]
 800558e:	6853      	ldr	r3, [r2, #4]
 8005590:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005594:	6053      	str	r3, [r2, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005596:	2320      	movs	r3, #32
 8005598:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800559c:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 80055a0:	b2db      	uxtb	r3, r3
 80055a2:	2b40      	cmp	r3, #64	; 0x40
 80055a4:	d012      	beq.n	80055cc <HAL_I2C_EV_IRQHandler+0x7c4>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80055a6:	2300      	movs	r3, #0
 80055a8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80055ac:	2312      	movs	r3, #18
 80055ae:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80055b0:	4620      	mov	r0, r4
 80055b2:	f7ff fa86 	bl	8004ac2 <HAL_I2C_MasterRxCpltCallback>
 80055b6:	e458      	b.n	8004e6a <HAL_I2C_EV_IRQHandler+0x62>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055b8:	681a      	ldr	r2, [r3, #0]
 80055ba:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80055be:	601a      	str	r2, [r3, #0]
 80055c0:	e7cf      	b.n	8005562 <HAL_I2C_EV_IRQHandler+0x75a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055c2:	681a      	ldr	r2, [r3, #0]
 80055c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055c8:	601a      	str	r2, [r3, #0]
 80055ca:	e7ca      	b.n	8005562 <HAL_I2C_EV_IRQHandler+0x75a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80055cc:	2300      	movs	r3, #0
 80055ce:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80055d2:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80055d4:	4620      	mov	r0, r4
 80055d6:	f7ff fae2 	bl	8004b9e <HAL_I2C_MemRxCpltCallback>
 80055da:	e446      	b.n	8004e6a <HAL_I2C_EV_IRQHandler+0x62>
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80055dc:	699d      	ldr	r5, [r3, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80055de:	695a      	ldr	r2, [r3, #20]
 80055e0:	e428      	b.n	8004e34 <HAL_I2C_EV_IRQHandler+0x2c>
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80055e2:	685a      	ldr	r2, [r3, #4]
 80055e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055e8:	605a      	str	r2, [r3, #4]
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80055ea:	f085 0104 	eor.w	r1, r5, #4
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80055ee:	f3c1 0180 	ubfx	r1, r1, #2, #1
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80055f2:	f015 0f80 	tst.w	r5, #128	; 0x80
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80055f6:	bf0c      	ite	eq
 80055f8:	89a2      	ldrheq	r2, [r4, #12]
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80055fa:	8b22      	ldrhne	r2, [r4, #24]
    __HAL_UNLOCK(hi2c);
 80055fc:	2300      	movs	r3, #0
 80055fe:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005602:	4620      	mov	r0, r4
 8005604:	f7ff fa60 	bl	8004ac8 <HAL_I2C_AddrCallback>
 8005608:	e42f      	b.n	8004e6a <HAL_I2C_EV_IRQHandler+0x62>
 800560a:	bf00      	nop
 800560c:	20000000 	.word	0x20000000
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005610:	f012 0f10 	tst.w	r2, #16
 8005614:	d002      	beq.n	800561c <HAL_I2C_EV_IRQHandler+0x814>
 8005616:	f410 7f00 	tst.w	r0, #512	; 0x200
 800561a:	d139      	bne.n	8005690 <HAL_I2C_EV_IRQHandler+0x888>
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800561c:	f001 01f7 	and.w	r1, r1, #247	; 0xf7
 8005620:	2921      	cmp	r1, #33	; 0x21
 8005622:	f000 80f4 	beq.w	800580e <HAL_I2C_EV_IRQHandler+0xa06>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005626:	f012 0f40 	tst.w	r2, #64	; 0x40
 800562a:	f000 813b 	beq.w	80058a4 <HAL_I2C_EV_IRQHandler+0xa9c>
 800562e:	f410 6f80 	tst.w	r0, #1024	; 0x400
 8005632:	f000 8137 	beq.w	80058a4 <HAL_I2C_EV_IRQHandler+0xa9c>
 8005636:	f012 0f04 	tst.w	r2, #4
 800563a:	f040 8137 	bne.w	80058ac <HAL_I2C_EV_IRQHandler+0xaa4>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800563e:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8005642:	b2d1      	uxtb	r1, r2
  if (hi2c->XferCount != 0U)
 8005644:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005646:	b292      	uxth	r2, r2
 8005648:	2a00      	cmp	r2, #0
 800564a:	f43f ac0e 	beq.w	8004e6a <HAL_I2C_EV_IRQHandler+0x62>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800564e:	691a      	ldr	r2, [r3, #16]
 8005650:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005652:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005654:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005656:	3301      	adds	r3, #1
 8005658:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 800565a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800565c:	3b01      	subs	r3, #1
 800565e:	b29b      	uxth	r3, r3
 8005660:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005662:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005664:	b29b      	uxth	r3, r3
 8005666:	2b00      	cmp	r3, #0
 8005668:	f47f abff 	bne.w	8004e6a <HAL_I2C_EV_IRQHandler+0x62>
 800566c:	292a      	cmp	r1, #42	; 0x2a
 800566e:	f47f abfc 	bne.w	8004e6a <HAL_I2C_EV_IRQHandler+0x62>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005672:	6822      	ldr	r2, [r4, #0]
 8005674:	6853      	ldr	r3, [r2, #4]
 8005676:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800567a:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800567c:	2322      	movs	r3, #34	; 0x22
 800567e:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005680:	2328      	movs	r3, #40	; 0x28
 8005682:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005686:	4620      	mov	r0, r4
 8005688:	f7ff fa1d 	bl	8004ac6 <HAL_I2C_SlaveRxCpltCallback>
 800568c:	f7ff bbed 	b.w	8004e6a <HAL_I2C_EV_IRQHandler+0x62>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005690:	f894 503d 	ldrb.w	r5, [r4, #61]	; 0x3d
 8005694:	b2ed      	uxtb	r5, r5
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005696:	685a      	ldr	r2, [r3, #4]
 8005698:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800569c:	605a      	str	r2, [r3, #4]
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800569e:	2300      	movs	r3, #0
 80056a0:	930d      	str	r3, [sp, #52]	; 0x34
 80056a2:	6823      	ldr	r3, [r4, #0]
 80056a4:	695a      	ldr	r2, [r3, #20]
 80056a6:	920d      	str	r2, [sp, #52]	; 0x34
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	f042 0201 	orr.w	r2, r2, #1
 80056ae:	601a      	str	r2, [r3, #0]
 80056b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056b2:	6822      	ldr	r2, [r4, #0]
 80056b4:	6813      	ldr	r3, [r2, #0]
 80056b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80056ba:	6013      	str	r3, [r2, #0]
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80056bc:	6823      	ldr	r3, [r4, #0]
 80056be:	685a      	ldr	r2, [r3, #4]
 80056c0:	f412 6f00 	tst.w	r2, #2048	; 0x800
 80056c4:	d038      	beq.n	8005738 <HAL_I2C_EV_IRQHandler+0x930>
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80056c6:	f005 02f7 	and.w	r2, r5, #247	; 0xf7
 80056ca:	2a22      	cmp	r2, #34	; 0x22
 80056cc:	d01f      	beq.n	800570e <HAL_I2C_EV_IRQHandler+0x906>
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 80056ce:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80056d0:	6812      	ldr	r2, [r2, #0]
 80056d2:	6852      	ldr	r2, [r2, #4]
 80056d4:	b292      	uxth	r2, r2
 80056d6:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 80056d8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80056da:	b292      	uxth	r2, r2
 80056dc:	b11a      	cbz	r2, 80056e6 <HAL_I2C_EV_IRQHandler+0x8de>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80056de:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80056e0:	f042 0204 	orr.w	r2, r2, #4
 80056e4:	6422      	str	r2, [r4, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80056e6:	685a      	ldr	r2, [r3, #4]
 80056e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80056ec:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80056ee:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80056f0:	f7fd ffe6 	bl	80036c0 <HAL_DMA_GetState>
 80056f4:	2801      	cmp	r0, #1
 80056f6:	d01f      	beq.n	8005738 <HAL_I2C_EV_IRQHandler+0x930>
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80056f8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80056fa:	4a77      	ldr	r2, [pc, #476]	; (80058d8 <HAL_I2C_EV_IRQHandler+0xad0>)
 80056fc:	635a      	str	r2, [r3, #52]	; 0x34
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80056fe:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8005700:	f7fd ff92 	bl	8003628 <HAL_DMA_Abort_IT>
 8005704:	b1c0      	cbz	r0, 8005738 <HAL_I2C_EV_IRQHandler+0x930>
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005706:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8005708:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800570a:	4798      	blx	r3
 800570c:	e014      	b.n	8005738 <HAL_I2C_EV_IRQHandler+0x930>
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 800570e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005710:	6812      	ldr	r2, [r2, #0]
 8005712:	6852      	ldr	r2, [r2, #4]
 8005714:	b292      	uxth	r2, r2
 8005716:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 8005718:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800571a:	b292      	uxth	r2, r2
 800571c:	b11a      	cbz	r2, 8005726 <HAL_I2C_EV_IRQHandler+0x91e>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800571e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005720:	f042 0204 	orr.w	r2, r2, #4
 8005724:	6422      	str	r2, [r4, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005726:	685a      	ldr	r2, [r3, #4]
 8005728:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800572c:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800572e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8005730:	f7fd ffc6 	bl	80036c0 <HAL_DMA_GetState>
 8005734:	2801      	cmp	r0, #1
 8005736:	d142      	bne.n	80057be <HAL_I2C_EV_IRQHandler+0x9b6>
  if (hi2c->XferCount != 0U)
 8005738:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800573a:	b29b      	uxth	r3, r3
 800573c:	b323      	cbz	r3, 8005788 <HAL_I2C_EV_IRQHandler+0x980>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800573e:	6823      	ldr	r3, [r4, #0]
 8005740:	695a      	ldr	r2, [r3, #20]
 8005742:	f012 0f04 	tst.w	r2, #4
 8005746:	d009      	beq.n	800575c <HAL_I2C_EV_IRQHandler+0x954>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005748:	691a      	ldr	r2, [r3, #16]
 800574a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800574c:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800574e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005750:	3301      	adds	r3, #1
 8005752:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8005754:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005756:	3b01      	subs	r3, #1
 8005758:	b29b      	uxth	r3, r3
 800575a:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800575c:	6823      	ldr	r3, [r4, #0]
 800575e:	695a      	ldr	r2, [r3, #20]
 8005760:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005764:	d009      	beq.n	800577a <HAL_I2C_EV_IRQHandler+0x972>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005766:	691a      	ldr	r2, [r3, #16]
 8005768:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800576a:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800576c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800576e:	3301      	adds	r3, #1
 8005770:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8005772:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005774:	3b01      	subs	r3, #1
 8005776:	b29b      	uxth	r3, r3
 8005778:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->XferCount != 0U)
 800577a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800577c:	b29b      	uxth	r3, r3
 800577e:	b11b      	cbz	r3, 8005788 <HAL_I2C_EV_IRQHandler+0x980>
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005780:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005782:	f043 0304 	orr.w	r3, r3, #4
 8005786:	6423      	str	r3, [r4, #64]	; 0x40
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005788:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800578a:	bb23      	cbnz	r3, 80057d6 <HAL_I2C_EV_IRQHandler+0x9ce>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800578c:	2d2a      	cmp	r5, #42	; 0x2a
 800578e:	d027      	beq.n	80057e0 <HAL_I2C_EV_IRQHandler+0x9d8>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005790:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8005794:	b2db      	uxtb	r3, r3
 8005796:	2b28      	cmp	r3, #40	; 0x28
 8005798:	d02b      	beq.n	80057f2 <HAL_I2C_EV_IRQHandler+0x9ea>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800579a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800579c:	2b22      	cmp	r3, #34	; 0x22
 800579e:	d002      	beq.n	80057a6 <HAL_I2C_EV_IRQHandler+0x99e>
 80057a0:	2d22      	cmp	r5, #34	; 0x22
 80057a2:	f47f ab62 	bne.w	8004e6a <HAL_I2C_EV_IRQHandler+0x62>
        hi2c->PreviousState = I2C_STATE_NONE;
 80057a6:	2300      	movs	r3, #0
 80057a8:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80057aa:	2220      	movs	r2, #32
 80057ac:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80057b0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80057b4:	4620      	mov	r0, r4
 80057b6:	f7ff f986 	bl	8004ac6 <HAL_I2C_SlaveRxCpltCallback>
 80057ba:	f7ff bb56 	b.w	8004e6a <HAL_I2C_EV_IRQHandler+0x62>
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80057be:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80057c0:	4a45      	ldr	r2, [pc, #276]	; (80058d8 <HAL_I2C_EV_IRQHandler+0xad0>)
 80057c2:	635a      	str	r2, [r3, #52]	; 0x34
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80057c4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80057c6:	f7fd ff2f 	bl	8003628 <HAL_DMA_Abort_IT>
 80057ca:	2800      	cmp	r0, #0
 80057cc:	d0b4      	beq.n	8005738 <HAL_I2C_EV_IRQHandler+0x930>
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80057ce:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80057d0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80057d2:	4798      	blx	r3
 80057d4:	e7b0      	b.n	8005738 <HAL_I2C_EV_IRQHandler+0x930>
    I2C_ITError(hi2c);
 80057d6:	4620      	mov	r0, r4
 80057d8:	f7ff fa56 	bl	8004c88 <I2C_ITError>
 80057dc:	f7ff bb45 	b.w	8004e6a <HAL_I2C_EV_IRQHandler+0x62>
      hi2c->PreviousState = I2C_STATE_NONE;
 80057e0:	2300      	movs	r3, #0
 80057e2:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80057e4:	2328      	movs	r3, #40	; 0x28
 80057e6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80057ea:	4620      	mov	r0, r4
 80057ec:	f7ff f96b 	bl	8004ac6 <HAL_I2C_SlaveRxCpltCallback>
 80057f0:	e7ce      	b.n	8005790 <HAL_I2C_EV_IRQHandler+0x988>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80057f2:	4b3a      	ldr	r3, [pc, #232]	; (80058dc <HAL_I2C_EV_IRQHandler+0xad4>)
 80057f4:	62e3      	str	r3, [r4, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80057f6:	2300      	movs	r3, #0
 80057f8:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80057fa:	2220      	movs	r2, #32
 80057fc:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005800:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005804:	4620      	mov	r0, r4
 8005806:	f7ff f960 	bl	8004aca <HAL_I2C_ListenCpltCallback>
 800580a:	f7ff bb2e 	b.w	8004e6a <HAL_I2C_EV_IRQHandler+0x62>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800580e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005812:	d02e      	beq.n	8005872 <HAL_I2C_EV_IRQHandler+0xa6a>
 8005814:	f410 6f80 	tst.w	r0, #1024	; 0x400
 8005818:	d02b      	beq.n	8005872 <HAL_I2C_EV_IRQHandler+0xa6a>
 800581a:	f012 0f04 	tst.w	r2, #4
 800581e:	d12c      	bne.n	800587a <HAL_I2C_EV_IRQHandler+0xa72>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005820:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8005824:	b2d1      	uxtb	r1, r2
  if (hi2c->XferCount != 0U)
 8005826:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005828:	b292      	uxth	r2, r2
 800582a:	2a00      	cmp	r2, #0
 800582c:	f43f ab1d 	beq.w	8004e6a <HAL_I2C_EV_IRQHandler+0x62>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005830:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005832:	7812      	ldrb	r2, [r2, #0]
 8005834:	611a      	str	r2, [r3, #16]
    hi2c->pBuffPtr++;
 8005836:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005838:	3301      	adds	r3, #1
 800583a:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 800583c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800583e:	3b01      	subs	r3, #1
 8005840:	b29b      	uxth	r3, r3
 8005842:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005844:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005846:	b29b      	uxth	r3, r3
 8005848:	2b00      	cmp	r3, #0
 800584a:	f47f ab0e 	bne.w	8004e6a <HAL_I2C_EV_IRQHandler+0x62>
 800584e:	2929      	cmp	r1, #41	; 0x29
 8005850:	f47f ab0b 	bne.w	8004e6a <HAL_I2C_EV_IRQHandler+0x62>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005854:	6822      	ldr	r2, [r4, #0]
 8005856:	6853      	ldr	r3, [r2, #4]
 8005858:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800585c:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800585e:	2321      	movs	r3, #33	; 0x21
 8005860:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005862:	2328      	movs	r3, #40	; 0x28
 8005864:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005868:	4620      	mov	r0, r4
 800586a:	f7ff f92b 	bl	8004ac4 <HAL_I2C_SlaveTxCpltCallback>
 800586e:	f7ff bafc 	b.w	8004e6a <HAL_I2C_EV_IRQHandler+0x62>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005872:	f012 0f04 	tst.w	r2, #4
 8005876:	f43f aaf8 	beq.w	8004e6a <HAL_I2C_EV_IRQHandler+0x62>
 800587a:	f410 7f00 	tst.w	r0, #512	; 0x200
 800587e:	f43f aaf4 	beq.w	8004e6a <HAL_I2C_EV_IRQHandler+0x62>
  if (hi2c->XferCount != 0U)
 8005882:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005884:	b292      	uxth	r2, r2
 8005886:	2a00      	cmp	r2, #0
 8005888:	f43f aaef 	beq.w	8004e6a <HAL_I2C_EV_IRQHandler+0x62>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800588c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800588e:	7812      	ldrb	r2, [r2, #0]
 8005890:	611a      	str	r2, [r3, #16]
    hi2c->pBuffPtr++;
 8005892:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005894:	3301      	adds	r3, #1
 8005896:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8005898:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800589a:	3b01      	subs	r3, #1
 800589c:	b29b      	uxth	r3, r3
 800589e:	8563      	strh	r3, [r4, #42]	; 0x2a
 80058a0:	f7ff bae3 	b.w	8004e6a <HAL_I2C_EV_IRQHandler+0x62>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80058a4:	f012 0f04 	tst.w	r2, #4
 80058a8:	f43f aadf 	beq.w	8004e6a <HAL_I2C_EV_IRQHandler+0x62>
 80058ac:	f410 7f00 	tst.w	r0, #512	; 0x200
 80058b0:	f43f aadb 	beq.w	8004e6a <HAL_I2C_EV_IRQHandler+0x62>
  if (hi2c->XferCount != 0U)
 80058b4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80058b6:	b292      	uxth	r2, r2
 80058b8:	2a00      	cmp	r2, #0
 80058ba:	f43f aad6 	beq.w	8004e6a <HAL_I2C_EV_IRQHandler+0x62>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058be:	691a      	ldr	r2, [r3, #16]
 80058c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80058c2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80058c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80058c6:	3301      	adds	r3, #1
 80058c8:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 80058ca:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80058cc:	3b01      	subs	r3, #1
 80058ce:	b29b      	uxth	r3, r3
 80058d0:	8563      	strh	r3, [r4, #42]	; 0x2a
      }
 80058d2:	f7ff baca 	b.w	8004e6a <HAL_I2C_EV_IRQHandler+0x62>
 80058d6:	bf00      	nop
 80058d8:	08004ba5 	.word	0x08004ba5
 80058dc:	ffff0000 	.word	0xffff0000

080058e0 <HAL_I2C_ER_IRQHandler>:
{
 80058e0:	b570      	push	{r4, r5, r6, lr}
 80058e2:	4604      	mov	r4, r0
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80058e4:	6803      	ldr	r3, [r0, #0]
 80058e6:	695d      	ldr	r5, [r3, #20]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80058e8:	685a      	ldr	r2, [r3, #4]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80058ea:	f890 103e 	ldrb.w	r1, [r0, #62]	; 0x3e
 80058ee:	b2c9      	uxtb	r1, r1
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80058f0:	f415 7f80 	tst.w	r5, #256	; 0x100
 80058f4:	d012      	beq.n	800591c <HAL_I2C_ER_IRQHandler+0x3c>
 80058f6:	f412 7f80 	tst.w	r2, #256	; 0x100
 80058fa:	d00f      	beq.n	800591c <HAL_I2C_ER_IRQHandler+0x3c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80058fc:	f46f 7080 	mvn.w	r0, #256	; 0x100
 8005900:	6158      	str	r0, [r3, #20]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8005902:	6820      	ldr	r0, [r4, #0]
 8005904:	6803      	ldr	r3, [r0, #0]
 8005906:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800590a:	6003      	str	r3, [r0, #0]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800590c:	f415 7f00 	tst.w	r5, #512	; 0x200
 8005910:	d125      	bne.n	800595e <HAL_I2C_ER_IRQHandler+0x7e>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005912:	f415 6f80 	tst.w	r5, #1024	; 0x400
 8005916:	d152      	bne.n	80059be <HAL_I2C_ER_IRQHandler+0xde>
    error |= HAL_I2C_ERROR_BERR;
 8005918:	2601      	movs	r6, #1
 800591a:	e009      	b.n	8005930 <HAL_I2C_ER_IRQHandler+0x50>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800591c:	f415 7300 	ands.w	r3, r5, #512	; 0x200
 8005920:	d01f      	beq.n	8005962 <HAL_I2C_ER_IRQHandler+0x82>
 8005922:	f412 7380 	ands.w	r3, r2, #256	; 0x100
 8005926:	d109      	bne.n	800593c <HAL_I2C_ER_IRQHandler+0x5c>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005928:	f415 6680 	ands.w	r6, r5, #1024	; 0x400
 800592c:	f040 80ab 	bne.w	8005a86 <HAL_I2C_ER_IRQHandler+0x1a6>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005930:	f415 6f00 	tst.w	r5, #2048	; 0x800
 8005934:	d10f      	bne.n	8005956 <HAL_I2C_ER_IRQHandler+0x76>
  if (error != HAL_I2C_ERROR_NONE)
 8005936:	2e00      	cmp	r6, #0
 8005938:	d13a      	bne.n	80059b0 <HAL_I2C_ER_IRQHandler+0xd0>
}
 800593a:	bd70      	pop	{r4, r5, r6, pc}
 800593c:	2600      	movs	r6, #0
    error |= HAL_I2C_ERROR_ARLO;
 800593e:	f046 0602 	orr.w	r6, r6, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005942:	6823      	ldr	r3, [r4, #0]
 8005944:	f46f 7000 	mvn.w	r0, #512	; 0x200
 8005948:	6158      	str	r0, [r3, #20]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800594a:	f415 6f80 	tst.w	r5, #1024	; 0x400
 800594e:	d10f      	bne.n	8005970 <HAL_I2C_ER_IRQHandler+0x90>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005950:	f415 6f00 	tst.w	r5, #2048	; 0x800
 8005954:	d02c      	beq.n	80059b0 <HAL_I2C_ER_IRQHandler+0xd0>
 8005956:	f412 7f80 	tst.w	r2, #256	; 0x100
 800595a:	d0ec      	beq.n	8005936 <HAL_I2C_ER_IRQHandler+0x56>
 800595c:	e022      	b.n	80059a4 <HAL_I2C_ER_IRQHandler+0xc4>
    error |= HAL_I2C_ERROR_BERR;
 800595e:	2601      	movs	r6, #1
 8005960:	e7ed      	b.n	800593e <HAL_I2C_ER_IRQHandler+0x5e>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005962:	f415 6680 	ands.w	r6, r5, #1024	; 0x400
 8005966:	d0e3      	beq.n	8005930 <HAL_I2C_ER_IRQHandler+0x50>
 8005968:	f412 7680 	ands.w	r6, r2, #256	; 0x100
 800596c:	d0e3      	beq.n	8005936 <HAL_I2C_ER_IRQHandler+0x56>
 800596e:	461e      	mov	r6, r3
    tmp2 = hi2c->XferCount;
 8005970:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005972:	b29b      	uxth	r3, r3
    tmp3 = hi2c->State;
 8005974:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8005978:	b2d2      	uxtb	r2, r2
    tmp4 = hi2c->PreviousState;
 800597a:	6b20      	ldr	r0, [r4, #48]	; 0x30
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800597c:	2920      	cmp	r1, #32
 800597e:	d020      	beq.n	80059c2 <HAL_I2C_ER_IRQHandler+0xe2>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005980:	6823      	ldr	r3, [r4, #0]
 8005982:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005986:	615a      	str	r2, [r3, #20]
      error |= HAL_I2C_ERROR_AF;
 8005988:	f046 0604 	orr.w	r6, r6, #4
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800598c:	2910      	cmp	r1, #16
 800598e:	d001      	beq.n	8005994 <HAL_I2C_ER_IRQHandler+0xb4>
 8005990:	2940      	cmp	r1, #64	; 0x40
 8005992:	d104      	bne.n	800599e <HAL_I2C_ER_IRQHandler+0xbe>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005994:	6822      	ldr	r2, [r4, #0]
 8005996:	6813      	ldr	r3, [r2, #0]
 8005998:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800599c:	6013      	str	r3, [r2, #0]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800599e:	f415 6f00 	tst.w	r5, #2048	; 0x800
 80059a2:	d005      	beq.n	80059b0 <HAL_I2C_ER_IRQHandler+0xd0>
    error |= HAL_I2C_ERROR_OVR;
 80059a4:	f046 0608 	orr.w	r6, r6, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80059a8:	6823      	ldr	r3, [r4, #0]
 80059aa:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80059ae:	615a      	str	r2, [r3, #20]
    hi2c->ErrorCode |= error;
 80059b0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80059b2:	4333      	orrs	r3, r6
 80059b4:	6423      	str	r3, [r4, #64]	; 0x40
    I2C_ITError(hi2c);
 80059b6:	4620      	mov	r0, r4
 80059b8:	f7ff f966 	bl	8004c88 <I2C_ITError>
}
 80059bc:	e7bd      	b.n	800593a <HAL_I2C_ER_IRQHandler+0x5a>
    error |= HAL_I2C_ERROR_BERR;
 80059be:	2601      	movs	r6, #1
 80059c0:	e7d6      	b.n	8005970 <HAL_I2C_ER_IRQHandler+0x90>
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80059c2:	b92b      	cbnz	r3, 80059d0 <HAL_I2C_ER_IRQHandler+0xf0>
 80059c4:	f002 03f7 	and.w	r3, r2, #247	; 0xf7
 80059c8:	2b21      	cmp	r3, #33	; 0x21
 80059ca:	d00a      	beq.n	80059e2 <HAL_I2C_ER_IRQHandler+0x102>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80059cc:	2a28      	cmp	r2, #40	; 0x28
 80059ce:	d006      	beq.n	80059de <HAL_I2C_ER_IRQHandler+0xfe>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80059d0:	6823      	ldr	r3, [r4, #0]
 80059d2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80059d6:	615a      	str	r2, [r3, #20]
      error |= HAL_I2C_ERROR_AF;
 80059d8:	f046 0604 	orr.w	r6, r6, #4
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80059dc:	e7df      	b.n	800599e <HAL_I2C_ER_IRQHandler+0xbe>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80059de:	2821      	cmp	r0, #33	; 0x21
 80059e0:	d1f6      	bne.n	80059d0 <HAL_I2C_ER_IRQHandler+0xf0>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80059e2:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80059e6:	b2db      	uxtb	r3, r3
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80059e8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80059ea:	2a08      	cmp	r2, #8
 80059ec:	d001      	beq.n	80059f2 <HAL_I2C_ER_IRQHandler+0x112>
 80059ee:	2a20      	cmp	r2, #32
 80059f0:	d101      	bne.n	80059f6 <HAL_I2C_ER_IRQHandler+0x116>
 80059f2:	2b28      	cmp	r3, #40	; 0x28
 80059f4:	d009      	beq.n	8005a0a <HAL_I2C_ER_IRQHandler+0x12a>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80059f6:	2b21      	cmp	r3, #33	; 0x21
 80059f8:	d022      	beq.n	8005a40 <HAL_I2C_ER_IRQHandler+0x160>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80059fa:	6823      	ldr	r3, [r4, #0]
 80059fc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005a00:	615a      	str	r2, [r3, #20]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005a02:	f415 6f00 	tst.w	r5, #2048	; 0x800
 8005a06:	d096      	beq.n	8005936 <HAL_I2C_ER_IRQHandler+0x56>
 8005a08:	e7cc      	b.n	80059a4 <HAL_I2C_ER_IRQHandler+0xc4>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005a0a:	4b20      	ldr	r3, [pc, #128]	; (8005a8c <HAL_I2C_ER_IRQHandler+0x1ac>)
 8005a0c:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005a0e:	6822      	ldr	r2, [r4, #0]
 8005a10:	6853      	ldr	r3, [r2, #4]
 8005a12:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005a16:	6053      	str	r3, [r2, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a18:	6823      	ldr	r3, [r4, #0]
 8005a1a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005a1e:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a20:	6822      	ldr	r2, [r4, #0]
 8005a22:	6813      	ldr	r3, [r2, #0]
 8005a24:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005a28:	6013      	str	r3, [r2, #0]
    hi2c->PreviousState = I2C_STATE_NONE;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005a2e:	2220      	movs	r2, #32
 8005a30:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005a34:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 8005a38:	4620      	mov	r0, r4
 8005a3a:	f7ff f846 	bl	8004aca <HAL_I2C_ListenCpltCallback>
 8005a3e:	e7e0      	b.n	8005a02 <HAL_I2C_ER_IRQHandler+0x122>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005a40:	4b12      	ldr	r3, [pc, #72]	; (8005a8c <HAL_I2C_ER_IRQHandler+0x1ac>)
 8005a42:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005a44:	2321      	movs	r3, #33	; 0x21
 8005a46:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005a48:	2320      	movs	r3, #32
 8005a4a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005a54:	6822      	ldr	r2, [r4, #0]
 8005a56:	6853      	ldr	r3, [r2, #4]
 8005a58:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005a5c:	6053      	str	r3, [r2, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a5e:	6823      	ldr	r3, [r4, #0]
 8005a60:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005a64:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a66:	6822      	ldr	r2, [r4, #0]
 8005a68:	6813      	ldr	r3, [r2, #0]
 8005a6a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005a6e:	6013      	str	r3, [r2, #0]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8005a70:	6823      	ldr	r3, [r4, #0]
 8005a72:	695a      	ldr	r2, [r3, #20]
 8005a74:	f012 0f80 	tst.w	r2, #128	; 0x80
    hi2c->Instance->DR = 0x00U;
 8005a78:	bf1c      	itt	ne
 8005a7a:	2200      	movne	r2, #0
 8005a7c:	611a      	strne	r2, [r3, #16]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005a7e:	4620      	mov	r0, r4
 8005a80:	f7ff f820 	bl	8004ac4 <HAL_I2C_SlaveTxCpltCallback>
 8005a84:	e7bd      	b.n	8005a02 <HAL_I2C_ER_IRQHandler+0x122>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005a86:	461e      	mov	r6, r3
 8005a88:	e755      	b.n	8005936 <HAL_I2C_ER_IRQHandler+0x56>
 8005a8a:	bf00      	nop
 8005a8c:	ffff0000 	.word	0xffff0000

08005a90 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005a90:	2800      	cmp	r0, #0
 8005a92:	f000 8201 	beq.w	8005e98 <HAL_RCC_OscConfig+0x408>
{
 8005a96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a9a:	b082      	sub	sp, #8
 8005a9c:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a9e:	6803      	ldr	r3, [r0, #0]
 8005aa0:	f013 0f01 	tst.w	r3, #1
 8005aa4:	d02c      	beq.n	8005b00 <HAL_RCC_OscConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005aa6:	4b9f      	ldr	r3, [pc, #636]	; (8005d24 <HAL_RCC_OscConfig+0x294>)
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	f003 030c 	and.w	r3, r3, #12
 8005aae:	2b04      	cmp	r3, #4
 8005ab0:	d01d      	beq.n	8005aee <HAL_RCC_OscConfig+0x5e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005ab2:	4b9c      	ldr	r3, [pc, #624]	; (8005d24 <HAL_RCC_OscConfig+0x294>)
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	f003 030c 	and.w	r3, r3, #12
 8005aba:	2b08      	cmp	r3, #8
 8005abc:	d012      	beq.n	8005ae4 <HAL_RCC_OscConfig+0x54>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005abe:	6863      	ldr	r3, [r4, #4]
 8005ac0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ac4:	d041      	beq.n	8005b4a <HAL_RCC_OscConfig+0xba>
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d155      	bne.n	8005b76 <HAL_RCC_OscConfig+0xe6>
 8005aca:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005ace:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8005ad2:	681a      	ldr	r2, [r3, #0]
 8005ad4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005ad8:	601a      	str	r2, [r3, #0]
 8005ada:	681a      	ldr	r2, [r3, #0]
 8005adc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005ae0:	601a      	str	r2, [r3, #0]
 8005ae2:	e037      	b.n	8005b54 <HAL_RCC_OscConfig+0xc4>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005ae4:	4b8f      	ldr	r3, [pc, #572]	; (8005d24 <HAL_RCC_OscConfig+0x294>)
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8005aec:	d0e7      	beq.n	8005abe <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005aee:	4b8d      	ldr	r3, [pc, #564]	; (8005d24 <HAL_RCC_OscConfig+0x294>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8005af6:	d003      	beq.n	8005b00 <HAL_RCC_OscConfig+0x70>
 8005af8:	6863      	ldr	r3, [r4, #4]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	f000 81ce 	beq.w	8005e9c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b00:	6823      	ldr	r3, [r4, #0]
 8005b02:	f013 0f02 	tst.w	r3, #2
 8005b06:	d075      	beq.n	8005bf4 <HAL_RCC_OscConfig+0x164>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005b08:	4b86      	ldr	r3, [pc, #536]	; (8005d24 <HAL_RCC_OscConfig+0x294>)
 8005b0a:	685b      	ldr	r3, [r3, #4]
 8005b0c:	f013 0f0c 	tst.w	r3, #12
 8005b10:	d05f      	beq.n	8005bd2 <HAL_RCC_OscConfig+0x142>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005b12:	4b84      	ldr	r3, [pc, #528]	; (8005d24 <HAL_RCC_OscConfig+0x294>)
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	f003 030c 	and.w	r3, r3, #12
 8005b1a:	2b08      	cmp	r3, #8
 8005b1c:	d054      	beq.n	8005bc8 <HAL_RCC_OscConfig+0x138>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005b1e:	6923      	ldr	r3, [r4, #16]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	f000 808a 	beq.w	8005c3a <HAL_RCC_OscConfig+0x1aa>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005b26:	4b80      	ldr	r3, [pc, #512]	; (8005d28 <HAL_RCC_OscConfig+0x298>)
 8005b28:	2201      	movs	r2, #1
 8005b2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b2c:	f7fd fcea 	bl	8003504 <HAL_GetTick>
 8005b30:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b32:	4e7c      	ldr	r6, [pc, #496]	; (8005d24 <HAL_RCC_OscConfig+0x294>)
 8005b34:	6833      	ldr	r3, [r6, #0]
 8005b36:	f013 0f02 	tst.w	r3, #2
 8005b3a:	d175      	bne.n	8005c28 <HAL_RCC_OscConfig+0x198>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b3c:	f7fd fce2 	bl	8003504 <HAL_GetTick>
 8005b40:	1b40      	subs	r0, r0, r5
 8005b42:	2802      	cmp	r0, #2
 8005b44:	d9f6      	bls.n	8005b34 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_TIMEOUT;
 8005b46:	2003      	movs	r0, #3
 8005b48:	e1ad      	b.n	8005ea6 <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b4a:	4a76      	ldr	r2, [pc, #472]	; (8005d24 <HAL_RCC_OscConfig+0x294>)
 8005b4c:	6813      	ldr	r3, [r2, #0]
 8005b4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b52:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005b54:	6863      	ldr	r3, [r4, #4]
 8005b56:	b343      	cbz	r3, 8005baa <HAL_RCC_OscConfig+0x11a>
        tickstart = HAL_GetTick();
 8005b58:	f7fd fcd4 	bl	8003504 <HAL_GetTick>
 8005b5c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b5e:	4e71      	ldr	r6, [pc, #452]	; (8005d24 <HAL_RCC_OscConfig+0x294>)
 8005b60:	6833      	ldr	r3, [r6, #0]
 8005b62:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8005b66:	d1cb      	bne.n	8005b00 <HAL_RCC_OscConfig+0x70>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b68:	f7fd fccc 	bl	8003504 <HAL_GetTick>
 8005b6c:	1b40      	subs	r0, r0, r5
 8005b6e:	2864      	cmp	r0, #100	; 0x64
 8005b70:	d9f6      	bls.n	8005b60 <HAL_RCC_OscConfig+0xd0>
            return HAL_TIMEOUT;
 8005b72:	2003      	movs	r0, #3
 8005b74:	e197      	b.n	8005ea6 <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b76:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005b7a:	d009      	beq.n	8005b90 <HAL_RCC_OscConfig+0x100>
 8005b7c:	4b69      	ldr	r3, [pc, #420]	; (8005d24 <HAL_RCC_OscConfig+0x294>)
 8005b7e:	681a      	ldr	r2, [r3, #0]
 8005b80:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005b84:	601a      	str	r2, [r3, #0]
 8005b86:	681a      	ldr	r2, [r3, #0]
 8005b88:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005b8c:	601a      	str	r2, [r3, #0]
 8005b8e:	e7e1      	b.n	8005b54 <HAL_RCC_OscConfig+0xc4>
 8005b90:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005b94:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8005b98:	681a      	ldr	r2, [r3, #0]
 8005b9a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8005b9e:	601a      	str	r2, [r3, #0]
 8005ba0:	681a      	ldr	r2, [r3, #0]
 8005ba2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005ba6:	601a      	str	r2, [r3, #0]
 8005ba8:	e7d4      	b.n	8005b54 <HAL_RCC_OscConfig+0xc4>
        tickstart = HAL_GetTick();
 8005baa:	f7fd fcab 	bl	8003504 <HAL_GetTick>
 8005bae:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005bb0:	4e5c      	ldr	r6, [pc, #368]	; (8005d24 <HAL_RCC_OscConfig+0x294>)
 8005bb2:	6833      	ldr	r3, [r6, #0]
 8005bb4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8005bb8:	d0a2      	beq.n	8005b00 <HAL_RCC_OscConfig+0x70>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005bba:	f7fd fca3 	bl	8003504 <HAL_GetTick>
 8005bbe:	1b40      	subs	r0, r0, r5
 8005bc0:	2864      	cmp	r0, #100	; 0x64
 8005bc2:	d9f6      	bls.n	8005bb2 <HAL_RCC_OscConfig+0x122>
            return HAL_TIMEOUT;
 8005bc4:	2003      	movs	r0, #3
 8005bc6:	e16e      	b.n	8005ea6 <HAL_RCC_OscConfig+0x416>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005bc8:	4b56      	ldr	r3, [pc, #344]	; (8005d24 <HAL_RCC_OscConfig+0x294>)
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8005bd0:	d1a5      	bne.n	8005b1e <HAL_RCC_OscConfig+0x8e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005bd2:	4b54      	ldr	r3, [pc, #336]	; (8005d24 <HAL_RCC_OscConfig+0x294>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f013 0f02 	tst.w	r3, #2
 8005bda:	d003      	beq.n	8005be4 <HAL_RCC_OscConfig+0x154>
 8005bdc:	6923      	ldr	r3, [r4, #16]
 8005bde:	2b01      	cmp	r3, #1
 8005be0:	f040 815e 	bne.w	8005ea0 <HAL_RCC_OscConfig+0x410>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005be4:	4a4f      	ldr	r2, [pc, #316]	; (8005d24 <HAL_RCC_OscConfig+0x294>)
 8005be6:	6813      	ldr	r3, [r2, #0]
 8005be8:	6961      	ldr	r1, [r4, #20]
 8005bea:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005bee:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005bf2:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005bf4:	6823      	ldr	r3, [r4, #0]
 8005bf6:	f013 0f08 	tst.w	r3, #8
 8005bfa:	d03d      	beq.n	8005c78 <HAL_RCC_OscConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005bfc:	69a3      	ldr	r3, [r4, #24]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d066      	beq.n	8005cd0 <HAL_RCC_OscConfig+0x240>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c02:	4b49      	ldr	r3, [pc, #292]	; (8005d28 <HAL_RCC_OscConfig+0x298>)
 8005c04:	2201      	movs	r2, #1
 8005c06:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c0a:	f7fd fc7b 	bl	8003504 <HAL_GetTick>
 8005c0e:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c10:	4e44      	ldr	r6, [pc, #272]	; (8005d24 <HAL_RCC_OscConfig+0x294>)
 8005c12:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005c14:	f013 0f02 	tst.w	r3, #2
 8005c18:	d121      	bne.n	8005c5e <HAL_RCC_OscConfig+0x1ce>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c1a:	f7fd fc73 	bl	8003504 <HAL_GetTick>
 8005c1e:	1b40      	subs	r0, r0, r5
 8005c20:	2802      	cmp	r0, #2
 8005c22:	d9f6      	bls.n	8005c12 <HAL_RCC_OscConfig+0x182>
        {
          return HAL_TIMEOUT;
 8005c24:	2003      	movs	r0, #3
 8005c26:	e13e      	b.n	8005ea6 <HAL_RCC_OscConfig+0x416>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c28:	4a3e      	ldr	r2, [pc, #248]	; (8005d24 <HAL_RCC_OscConfig+0x294>)
 8005c2a:	6813      	ldr	r3, [r2, #0]
 8005c2c:	6961      	ldr	r1, [r4, #20]
 8005c2e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005c32:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005c36:	6013      	str	r3, [r2, #0]
 8005c38:	e7dc      	b.n	8005bf4 <HAL_RCC_OscConfig+0x164>
        __HAL_RCC_HSI_DISABLE();
 8005c3a:	4b3b      	ldr	r3, [pc, #236]	; (8005d28 <HAL_RCC_OscConfig+0x298>)
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8005c40:	f7fd fc60 	bl	8003504 <HAL_GetTick>
 8005c44:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c46:	4e37      	ldr	r6, [pc, #220]	; (8005d24 <HAL_RCC_OscConfig+0x294>)
 8005c48:	6833      	ldr	r3, [r6, #0]
 8005c4a:	f013 0f02 	tst.w	r3, #2
 8005c4e:	d0d1      	beq.n	8005bf4 <HAL_RCC_OscConfig+0x164>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c50:	f7fd fc58 	bl	8003504 <HAL_GetTick>
 8005c54:	1b40      	subs	r0, r0, r5
 8005c56:	2802      	cmp	r0, #2
 8005c58:	d9f6      	bls.n	8005c48 <HAL_RCC_OscConfig+0x1b8>
            return HAL_TIMEOUT;
 8005c5a:	2003      	movs	r0, #3
 8005c5c:	e123      	b.n	8005ea6 <HAL_RCC_OscConfig+0x416>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005c5e:	4b33      	ldr	r3, [pc, #204]	; (8005d2c <HAL_RCC_OscConfig+0x29c>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a33      	ldr	r2, [pc, #204]	; (8005d30 <HAL_RCC_OscConfig+0x2a0>)
 8005c64:	fba2 2303 	umull	r2, r3, r2, r3
 8005c68:	0a5b      	lsrs	r3, r3, #9
 8005c6a:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8005c6c:	bf00      	nop
  }
  while (Delay --);
 8005c6e:	9b01      	ldr	r3, [sp, #4]
 8005c70:	1e5a      	subs	r2, r3, #1
 8005c72:	9201      	str	r2, [sp, #4]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d1f9      	bne.n	8005c6c <HAL_RCC_OscConfig+0x1dc>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c78:	6823      	ldr	r3, [r4, #0]
 8005c7a:	f013 0f04 	tst.w	r3, #4
 8005c7e:	f000 809b 	beq.w	8005db8 <HAL_RCC_OscConfig+0x328>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c82:	4b28      	ldr	r3, [pc, #160]	; (8005d24 <HAL_RCC_OscConfig+0x294>)
 8005c84:	69db      	ldr	r3, [r3, #28]
 8005c86:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8005c8a:	d134      	bne.n	8005cf6 <HAL_RCC_OscConfig+0x266>
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c8c:	4b25      	ldr	r3, [pc, #148]	; (8005d24 <HAL_RCC_OscConfig+0x294>)
 8005c8e:	69da      	ldr	r2, [r3, #28]
 8005c90:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005c94:	61da      	str	r2, [r3, #28]
 8005c96:	69db      	ldr	r3, [r3, #28]
 8005c98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c9c:	9300      	str	r3, [sp, #0]
 8005c9e:	9b00      	ldr	r3, [sp, #0]
      pwrclkchanged = SET;
 8005ca0:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ca2:	4b24      	ldr	r3, [pc, #144]	; (8005d34 <HAL_RCC_OscConfig+0x2a4>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005caa:	d026      	beq.n	8005cfa <HAL_RCC_OscConfig+0x26a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005cac:	68e3      	ldr	r3, [r4, #12]
 8005cae:	2b01      	cmp	r3, #1
 8005cb0:	d042      	beq.n	8005d38 <HAL_RCC_OscConfig+0x2a8>
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d158      	bne.n	8005d68 <HAL_RCC_OscConfig+0x2d8>
 8005cb6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005cba:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8005cbe:	6a1a      	ldr	r2, [r3, #32]
 8005cc0:	f022 0201 	bic.w	r2, r2, #1
 8005cc4:	621a      	str	r2, [r3, #32]
 8005cc6:	6a1a      	ldr	r2, [r3, #32]
 8005cc8:	f022 0204 	bic.w	r2, r2, #4
 8005ccc:	621a      	str	r2, [r3, #32]
 8005cce:	e038      	b.n	8005d42 <HAL_RCC_OscConfig+0x2b2>
      __HAL_RCC_LSI_DISABLE();
 8005cd0:	4b15      	ldr	r3, [pc, #84]	; (8005d28 <HAL_RCC_OscConfig+0x298>)
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8005cd8:	f7fd fc14 	bl	8003504 <HAL_GetTick>
 8005cdc:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005cde:	4e11      	ldr	r6, [pc, #68]	; (8005d24 <HAL_RCC_OscConfig+0x294>)
 8005ce0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005ce2:	f013 0f02 	tst.w	r3, #2
 8005ce6:	d0c7      	beq.n	8005c78 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ce8:	f7fd fc0c 	bl	8003504 <HAL_GetTick>
 8005cec:	1b40      	subs	r0, r0, r5
 8005cee:	2802      	cmp	r0, #2
 8005cf0:	d9f6      	bls.n	8005ce0 <HAL_RCC_OscConfig+0x250>
          return HAL_TIMEOUT;
 8005cf2:	2003      	movs	r0, #3
 8005cf4:	e0d7      	b.n	8005ea6 <HAL_RCC_OscConfig+0x416>
    FlagStatus       pwrclkchanged = RESET;
 8005cf6:	2500      	movs	r5, #0
 8005cf8:	e7d3      	b.n	8005ca2 <HAL_RCC_OscConfig+0x212>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005cfa:	4a0e      	ldr	r2, [pc, #56]	; (8005d34 <HAL_RCC_OscConfig+0x2a4>)
 8005cfc:	6813      	ldr	r3, [r2, #0]
 8005cfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d02:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8005d04:	f7fd fbfe 	bl	8003504 <HAL_GetTick>
 8005d08:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d0a:	4f0a      	ldr	r7, [pc, #40]	; (8005d34 <HAL_RCC_OscConfig+0x2a4>)
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005d12:	d1cb      	bne.n	8005cac <HAL_RCC_OscConfig+0x21c>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d14:	f7fd fbf6 	bl	8003504 <HAL_GetTick>
 8005d18:	1b80      	subs	r0, r0, r6
 8005d1a:	2864      	cmp	r0, #100	; 0x64
 8005d1c:	d9f6      	bls.n	8005d0c <HAL_RCC_OscConfig+0x27c>
          return HAL_TIMEOUT;
 8005d1e:	2003      	movs	r0, #3
 8005d20:	e0c1      	b.n	8005ea6 <HAL_RCC_OscConfig+0x416>
 8005d22:	bf00      	nop
 8005d24:	40021000 	.word	0x40021000
 8005d28:	42420000 	.word	0x42420000
 8005d2c:	20000000 	.word	0x20000000
 8005d30:	10624dd3 	.word	0x10624dd3
 8005d34:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d38:	4a5e      	ldr	r2, [pc, #376]	; (8005eb4 <HAL_RCC_OscConfig+0x424>)
 8005d3a:	6a13      	ldr	r3, [r2, #32]
 8005d3c:	f043 0301 	orr.w	r3, r3, #1
 8005d40:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005d42:	68e3      	ldr	r3, [r4, #12]
 8005d44:	b333      	cbz	r3, 8005d94 <HAL_RCC_OscConfig+0x304>
      tickstart = HAL_GetTick();
 8005d46:	f7fd fbdd 	bl	8003504 <HAL_GetTick>
 8005d4a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d4c:	4f59      	ldr	r7, [pc, #356]	; (8005eb4 <HAL_RCC_OscConfig+0x424>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d4e:	f241 3888 	movw	r8, #5000	; 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d52:	6a3b      	ldr	r3, [r7, #32]
 8005d54:	f013 0f02 	tst.w	r3, #2
 8005d58:	d12d      	bne.n	8005db6 <HAL_RCC_OscConfig+0x326>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d5a:	f7fd fbd3 	bl	8003504 <HAL_GetTick>
 8005d5e:	1b80      	subs	r0, r0, r6
 8005d60:	4540      	cmp	r0, r8
 8005d62:	d9f6      	bls.n	8005d52 <HAL_RCC_OscConfig+0x2c2>
          return HAL_TIMEOUT;
 8005d64:	2003      	movs	r0, #3
 8005d66:	e09e      	b.n	8005ea6 <HAL_RCC_OscConfig+0x416>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d68:	2b05      	cmp	r3, #5
 8005d6a:	d009      	beq.n	8005d80 <HAL_RCC_OscConfig+0x2f0>
 8005d6c:	4b51      	ldr	r3, [pc, #324]	; (8005eb4 <HAL_RCC_OscConfig+0x424>)
 8005d6e:	6a1a      	ldr	r2, [r3, #32]
 8005d70:	f022 0201 	bic.w	r2, r2, #1
 8005d74:	621a      	str	r2, [r3, #32]
 8005d76:	6a1a      	ldr	r2, [r3, #32]
 8005d78:	f022 0204 	bic.w	r2, r2, #4
 8005d7c:	621a      	str	r2, [r3, #32]
 8005d7e:	e7e0      	b.n	8005d42 <HAL_RCC_OscConfig+0x2b2>
 8005d80:	4b4c      	ldr	r3, [pc, #304]	; (8005eb4 <HAL_RCC_OscConfig+0x424>)
 8005d82:	6a1a      	ldr	r2, [r3, #32]
 8005d84:	f042 0204 	orr.w	r2, r2, #4
 8005d88:	621a      	str	r2, [r3, #32]
 8005d8a:	6a1a      	ldr	r2, [r3, #32]
 8005d8c:	f042 0201 	orr.w	r2, r2, #1
 8005d90:	621a      	str	r2, [r3, #32]
 8005d92:	e7d6      	b.n	8005d42 <HAL_RCC_OscConfig+0x2b2>
      tickstart = HAL_GetTick();
 8005d94:	f7fd fbb6 	bl	8003504 <HAL_GetTick>
 8005d98:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d9a:	4f46      	ldr	r7, [pc, #280]	; (8005eb4 <HAL_RCC_OscConfig+0x424>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d9c:	f241 3888 	movw	r8, #5000	; 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005da0:	6a3b      	ldr	r3, [r7, #32]
 8005da2:	f013 0f02 	tst.w	r3, #2
 8005da6:	d006      	beq.n	8005db6 <HAL_RCC_OscConfig+0x326>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005da8:	f7fd fbac 	bl	8003504 <HAL_GetTick>
 8005dac:	1b80      	subs	r0, r0, r6
 8005dae:	4540      	cmp	r0, r8
 8005db0:	d9f6      	bls.n	8005da0 <HAL_RCC_OscConfig+0x310>
          return HAL_TIMEOUT;
 8005db2:	2003      	movs	r0, #3
 8005db4:	e077      	b.n	8005ea6 <HAL_RCC_OscConfig+0x416>
    if (pwrclkchanged == SET)
 8005db6:	b9e5      	cbnz	r5, 8005df2 <HAL_RCC_OscConfig+0x362>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005db8:	69e3      	ldr	r3, [r4, #28]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d072      	beq.n	8005ea4 <HAL_RCC_OscConfig+0x414>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005dbe:	4a3d      	ldr	r2, [pc, #244]	; (8005eb4 <HAL_RCC_OscConfig+0x424>)
 8005dc0:	6852      	ldr	r2, [r2, #4]
 8005dc2:	f002 020c 	and.w	r2, r2, #12
 8005dc6:	2a08      	cmp	r2, #8
 8005dc8:	d056      	beq.n	8005e78 <HAL_RCC_OscConfig+0x3e8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005dca:	2b02      	cmp	r3, #2
 8005dcc:	d017      	beq.n	8005dfe <HAL_RCC_OscConfig+0x36e>
        __HAL_RCC_PLL_DISABLE();
 8005dce:	4b3a      	ldr	r3, [pc, #232]	; (8005eb8 <HAL_RCC_OscConfig+0x428>)
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8005dd4:	f7fd fb96 	bl	8003504 <HAL_GetTick>
 8005dd8:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005dda:	4d36      	ldr	r5, [pc, #216]	; (8005eb4 <HAL_RCC_OscConfig+0x424>)
 8005ddc:	682b      	ldr	r3, [r5, #0]
 8005dde:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8005de2:	d047      	beq.n	8005e74 <HAL_RCC_OscConfig+0x3e4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005de4:	f7fd fb8e 	bl	8003504 <HAL_GetTick>
 8005de8:	1b00      	subs	r0, r0, r4
 8005dea:	2802      	cmp	r0, #2
 8005dec:	d9f6      	bls.n	8005ddc <HAL_RCC_OscConfig+0x34c>
            return HAL_TIMEOUT;
 8005dee:	2003      	movs	r0, #3
 8005df0:	e059      	b.n	8005ea6 <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_PWR_CLK_DISABLE();
 8005df2:	4a30      	ldr	r2, [pc, #192]	; (8005eb4 <HAL_RCC_OscConfig+0x424>)
 8005df4:	69d3      	ldr	r3, [r2, #28]
 8005df6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005dfa:	61d3      	str	r3, [r2, #28]
 8005dfc:	e7dc      	b.n	8005db8 <HAL_RCC_OscConfig+0x328>
        __HAL_RCC_PLL_DISABLE();
 8005dfe:	4b2e      	ldr	r3, [pc, #184]	; (8005eb8 <HAL_RCC_OscConfig+0x428>)
 8005e00:	2200      	movs	r2, #0
 8005e02:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8005e04:	f7fd fb7e 	bl	8003504 <HAL_GetTick>
 8005e08:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005e0a:	4e2a      	ldr	r6, [pc, #168]	; (8005eb4 <HAL_RCC_OscConfig+0x424>)
 8005e0c:	6833      	ldr	r3, [r6, #0]
 8005e0e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8005e12:	d006      	beq.n	8005e22 <HAL_RCC_OscConfig+0x392>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e14:	f7fd fb76 	bl	8003504 <HAL_GetTick>
 8005e18:	1b40      	subs	r0, r0, r5
 8005e1a:	2802      	cmp	r0, #2
 8005e1c:	d9f6      	bls.n	8005e0c <HAL_RCC_OscConfig+0x37c>
            return HAL_TIMEOUT;
 8005e1e:	2003      	movs	r0, #3
 8005e20:	e041      	b.n	8005ea6 <HAL_RCC_OscConfig+0x416>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005e22:	6a23      	ldr	r3, [r4, #32]
 8005e24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e28:	d01a      	beq.n	8005e60 <HAL_RCC_OscConfig+0x3d0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005e2a:	4922      	ldr	r1, [pc, #136]	; (8005eb4 <HAL_RCC_OscConfig+0x424>)
 8005e2c:	684a      	ldr	r2, [r1, #4]
 8005e2e:	6a23      	ldr	r3, [r4, #32]
 8005e30:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005e32:	4303      	orrs	r3, r0
 8005e34:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 8005e3c:	4b1e      	ldr	r3, [pc, #120]	; (8005eb8 <HAL_RCC_OscConfig+0x428>)
 8005e3e:	2201      	movs	r2, #1
 8005e40:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8005e42:	f7fd fb5f 	bl	8003504 <HAL_GetTick>
 8005e46:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005e48:	4d1a      	ldr	r5, [pc, #104]	; (8005eb4 <HAL_RCC_OscConfig+0x424>)
 8005e4a:	682b      	ldr	r3, [r5, #0]
 8005e4c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8005e50:	d10e      	bne.n	8005e70 <HAL_RCC_OscConfig+0x3e0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e52:	f7fd fb57 	bl	8003504 <HAL_GetTick>
 8005e56:	1b00      	subs	r0, r0, r4
 8005e58:	2802      	cmp	r0, #2
 8005e5a:	d9f6      	bls.n	8005e4a <HAL_RCC_OscConfig+0x3ba>
            return HAL_TIMEOUT;
 8005e5c:	2003      	movs	r0, #3
 8005e5e:	e022      	b.n	8005ea6 <HAL_RCC_OscConfig+0x416>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005e60:	4a14      	ldr	r2, [pc, #80]	; (8005eb4 <HAL_RCC_OscConfig+0x424>)
 8005e62:	6853      	ldr	r3, [r2, #4]
 8005e64:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005e68:	68a1      	ldr	r1, [r4, #8]
 8005e6a:	430b      	orrs	r3, r1
 8005e6c:	6053      	str	r3, [r2, #4]
 8005e6e:	e7dc      	b.n	8005e2a <HAL_RCC_OscConfig+0x39a>
  return HAL_OK;
 8005e70:	2000      	movs	r0, #0
 8005e72:	e018      	b.n	8005ea6 <HAL_RCC_OscConfig+0x416>
 8005e74:	2000      	movs	r0, #0
 8005e76:	e016      	b.n	8005ea6 <HAL_RCC_OscConfig+0x416>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005e78:	2b01      	cmp	r3, #1
 8005e7a:	d017      	beq.n	8005eac <HAL_RCC_OscConfig+0x41c>
        pll_config = RCC->CFGR;
 8005e7c:	4b0d      	ldr	r3, [pc, #52]	; (8005eb4 <HAL_RCC_OscConfig+0x424>)
 8005e7e:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e80:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8005e84:	6a22      	ldr	r2, [r4, #32]
 8005e86:	4291      	cmp	r1, r2
 8005e88:	d112      	bne.n	8005eb0 <HAL_RCC_OscConfig+0x420>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005e8a:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e8e:	6a60      	ldr	r0, [r4, #36]	; 0x24
    return HAL_ERROR;
 8005e90:	1a18      	subs	r0, r3, r0
 8005e92:	bf18      	it	ne
 8005e94:	2001      	movne	r0, #1
 8005e96:	e006      	b.n	8005ea6 <HAL_RCC_OscConfig+0x416>
 8005e98:	2001      	movs	r0, #1
}
 8005e9a:	4770      	bx	lr
        return HAL_ERROR;
 8005e9c:	2001      	movs	r0, #1
 8005e9e:	e002      	b.n	8005ea6 <HAL_RCC_OscConfig+0x416>
        return HAL_ERROR;
 8005ea0:	2001      	movs	r0, #1
 8005ea2:	e000      	b.n	8005ea6 <HAL_RCC_OscConfig+0x416>
  return HAL_OK;
 8005ea4:	2000      	movs	r0, #0
}
 8005ea6:	b002      	add	sp, #8
 8005ea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_ERROR;
 8005eac:	2001      	movs	r0, #1
 8005eae:	e7fa      	b.n	8005ea6 <HAL_RCC_OscConfig+0x416>
          return HAL_ERROR;
 8005eb0:	2001      	movs	r0, #1
 8005eb2:	e7f8      	b.n	8005ea6 <HAL_RCC_OscConfig+0x416>
 8005eb4:	40021000 	.word	0x40021000
 8005eb8:	42420000 	.word	0x42420000

08005ebc <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8005ebc:	4b0f      	ldr	r3, [pc, #60]	; (8005efc <HAL_RCC_GetSysClockFreq+0x40>)
 8005ebe:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8005ec0:	f003 020c 	and.w	r2, r3, #12
 8005ec4:	2a08      	cmp	r2, #8
 8005ec6:	d001      	beq.n	8005ecc <HAL_RCC_GetSysClockFreq+0x10>
      sysclockfreq = HSE_VALUE;
 8005ec8:	480d      	ldr	r0, [pc, #52]	; (8005f00 <HAL_RCC_GetSysClockFreq+0x44>)
}
 8005eca:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005ecc:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8005ed0:	490c      	ldr	r1, [pc, #48]	; (8005f04 <HAL_RCC_GetSysClockFreq+0x48>)
 8005ed2:	5c88      	ldrb	r0, [r1, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005ed4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8005ed8:	d00b      	beq.n	8005ef2 <HAL_RCC_GetSysClockFreq+0x36>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005eda:	4b08      	ldr	r3, [pc, #32]	; (8005efc <HAL_RCC_GetSysClockFreq+0x40>)
 8005edc:	685b      	ldr	r3, [r3, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005ede:	4a08      	ldr	r2, [pc, #32]	; (8005f00 <HAL_RCC_GetSysClockFreq+0x44>)
 8005ee0:	fb02 f000 	mul.w	r0, r2, r0
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005ee4:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8005ee8:	4a07      	ldr	r2, [pc, #28]	; (8005f08 <HAL_RCC_GetSysClockFreq+0x4c>)
 8005eea:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005eec:	fbb0 f0f3 	udiv	r0, r0, r3
 8005ef0:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005ef2:	4b06      	ldr	r3, [pc, #24]	; (8005f0c <HAL_RCC_GetSysClockFreq+0x50>)
 8005ef4:	fb03 f000 	mul.w	r0, r3, r0
 8005ef8:	4770      	bx	lr
 8005efa:	bf00      	nop
 8005efc:	40021000 	.word	0x40021000
 8005f00:	007a1200 	.word	0x007a1200
 8005f04:	0800cad0 	.word	0x0800cad0
 8005f08:	0800cae0 	.word	0x0800cae0
 8005f0c:	003d0900 	.word	0x003d0900

08005f10 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8005f10:	2800      	cmp	r0, #0
 8005f12:	f000 80a2 	beq.w	800605a <HAL_RCC_ClockConfig+0x14a>
{
 8005f16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f1a:	460d      	mov	r5, r1
 8005f1c:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005f1e:	4b53      	ldr	r3, [pc, #332]	; (800606c <HAL_RCC_ClockConfig+0x15c>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f003 0307 	and.w	r3, r3, #7
 8005f26:	428b      	cmp	r3, r1
 8005f28:	d20b      	bcs.n	8005f42 <HAL_RCC_ClockConfig+0x32>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f2a:	4a50      	ldr	r2, [pc, #320]	; (800606c <HAL_RCC_ClockConfig+0x15c>)
 8005f2c:	6813      	ldr	r3, [r2, #0]
 8005f2e:	f023 0307 	bic.w	r3, r3, #7
 8005f32:	430b      	orrs	r3, r1
 8005f34:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f36:	6813      	ldr	r3, [r2, #0]
 8005f38:	f003 0307 	and.w	r3, r3, #7
 8005f3c:	428b      	cmp	r3, r1
 8005f3e:	f040 808e 	bne.w	800605e <HAL_RCC_ClockConfig+0x14e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f42:	6823      	ldr	r3, [r4, #0]
 8005f44:	f013 0f02 	tst.w	r3, #2
 8005f48:	d017      	beq.n	8005f7a <HAL_RCC_ClockConfig+0x6a>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f4a:	f013 0f04 	tst.w	r3, #4
 8005f4e:	d004      	beq.n	8005f5a <HAL_RCC_ClockConfig+0x4a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005f50:	4a47      	ldr	r2, [pc, #284]	; (8006070 <HAL_RCC_ClockConfig+0x160>)
 8005f52:	6853      	ldr	r3, [r2, #4]
 8005f54:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005f58:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f5a:	6823      	ldr	r3, [r4, #0]
 8005f5c:	f013 0f08 	tst.w	r3, #8
 8005f60:	d004      	beq.n	8005f6c <HAL_RCC_ClockConfig+0x5c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005f62:	4a43      	ldr	r2, [pc, #268]	; (8006070 <HAL_RCC_ClockConfig+0x160>)
 8005f64:	6853      	ldr	r3, [r2, #4]
 8005f66:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005f6a:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f6c:	4a40      	ldr	r2, [pc, #256]	; (8006070 <HAL_RCC_ClockConfig+0x160>)
 8005f6e:	6853      	ldr	r3, [r2, #4]
 8005f70:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f74:	68a1      	ldr	r1, [r4, #8]
 8005f76:	430b      	orrs	r3, r1
 8005f78:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f7a:	6823      	ldr	r3, [r4, #0]
 8005f7c:	f013 0f01 	tst.w	r3, #1
 8005f80:	d031      	beq.n	8005fe6 <HAL_RCC_ClockConfig+0xd6>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f82:	6862      	ldr	r2, [r4, #4]
 8005f84:	2a01      	cmp	r2, #1
 8005f86:	d020      	beq.n	8005fca <HAL_RCC_ClockConfig+0xba>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005f88:	2a02      	cmp	r2, #2
 8005f8a:	d025      	beq.n	8005fd8 <HAL_RCC_ClockConfig+0xc8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f8c:	4b38      	ldr	r3, [pc, #224]	; (8006070 <HAL_RCC_ClockConfig+0x160>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f013 0f02 	tst.w	r3, #2
 8005f94:	d065      	beq.n	8006062 <HAL_RCC_ClockConfig+0x152>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005f96:	4936      	ldr	r1, [pc, #216]	; (8006070 <HAL_RCC_ClockConfig+0x160>)
 8005f98:	684b      	ldr	r3, [r1, #4]
 8005f9a:	f023 0303 	bic.w	r3, r3, #3
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8005fa2:	f7fd faaf 	bl	8003504 <HAL_GetTick>
 8005fa6:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fa8:	4f31      	ldr	r7, [pc, #196]	; (8006070 <HAL_RCC_ClockConfig+0x160>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005faa:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f003 030c 	and.w	r3, r3, #12
 8005fb4:	6862      	ldr	r2, [r4, #4]
 8005fb6:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8005fba:	d014      	beq.n	8005fe6 <HAL_RCC_ClockConfig+0xd6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005fbc:	f7fd faa2 	bl	8003504 <HAL_GetTick>
 8005fc0:	1b80      	subs	r0, r0, r6
 8005fc2:	4540      	cmp	r0, r8
 8005fc4:	d9f3      	bls.n	8005fae <HAL_RCC_ClockConfig+0x9e>
        return HAL_TIMEOUT;
 8005fc6:	2003      	movs	r0, #3
 8005fc8:	e045      	b.n	8006056 <HAL_RCC_ClockConfig+0x146>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fca:	4b29      	ldr	r3, [pc, #164]	; (8006070 <HAL_RCC_ClockConfig+0x160>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8005fd2:	d1e0      	bne.n	8005f96 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 8005fd4:	2001      	movs	r0, #1
 8005fd6:	e03e      	b.n	8006056 <HAL_RCC_ClockConfig+0x146>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005fd8:	4b25      	ldr	r3, [pc, #148]	; (8006070 <HAL_RCC_ClockConfig+0x160>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8005fe0:	d1d9      	bne.n	8005f96 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 8005fe2:	2001      	movs	r0, #1
 8005fe4:	e037      	b.n	8006056 <HAL_RCC_ClockConfig+0x146>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005fe6:	4b21      	ldr	r3, [pc, #132]	; (800606c <HAL_RCC_ClockConfig+0x15c>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f003 0307 	and.w	r3, r3, #7
 8005fee:	42ab      	cmp	r3, r5
 8005ff0:	d90a      	bls.n	8006008 <HAL_RCC_ClockConfig+0xf8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ff2:	4a1e      	ldr	r2, [pc, #120]	; (800606c <HAL_RCC_ClockConfig+0x15c>)
 8005ff4:	6813      	ldr	r3, [r2, #0]
 8005ff6:	f023 0307 	bic.w	r3, r3, #7
 8005ffa:	432b      	orrs	r3, r5
 8005ffc:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ffe:	6813      	ldr	r3, [r2, #0]
 8006000:	f003 0307 	and.w	r3, r3, #7
 8006004:	42ab      	cmp	r3, r5
 8006006:	d12e      	bne.n	8006066 <HAL_RCC_ClockConfig+0x156>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006008:	6823      	ldr	r3, [r4, #0]
 800600a:	f013 0f04 	tst.w	r3, #4
 800600e:	d006      	beq.n	800601e <HAL_RCC_ClockConfig+0x10e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006010:	4a17      	ldr	r2, [pc, #92]	; (8006070 <HAL_RCC_ClockConfig+0x160>)
 8006012:	6853      	ldr	r3, [r2, #4]
 8006014:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006018:	68e1      	ldr	r1, [r4, #12]
 800601a:	430b      	orrs	r3, r1
 800601c:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800601e:	6823      	ldr	r3, [r4, #0]
 8006020:	f013 0f08 	tst.w	r3, #8
 8006024:	d007      	beq.n	8006036 <HAL_RCC_ClockConfig+0x126>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006026:	4a12      	ldr	r2, [pc, #72]	; (8006070 <HAL_RCC_ClockConfig+0x160>)
 8006028:	6853      	ldr	r3, [r2, #4]
 800602a:	6921      	ldr	r1, [r4, #16]
 800602c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8006030:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8006034:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006036:	f7ff ff41 	bl	8005ebc <HAL_RCC_GetSysClockFreq>
 800603a:	4b0d      	ldr	r3, [pc, #52]	; (8006070 <HAL_RCC_ClockConfig+0x160>)
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8006042:	4a0c      	ldr	r2, [pc, #48]	; (8006074 <HAL_RCC_ClockConfig+0x164>)
 8006044:	5cd3      	ldrb	r3, [r2, r3]
 8006046:	40d8      	lsrs	r0, r3
 8006048:	4b0b      	ldr	r3, [pc, #44]	; (8006078 <HAL_RCC_ClockConfig+0x168>)
 800604a:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 800604c:	4b0b      	ldr	r3, [pc, #44]	; (800607c <HAL_RCC_ClockConfig+0x16c>)
 800604e:	6818      	ldr	r0, [r3, #0]
 8006050:	f7fc fb9e 	bl	8002790 <HAL_InitTick>
  return HAL_OK;
 8006054:	2000      	movs	r0, #0
}
 8006056:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 800605a:	2001      	movs	r0, #1
}
 800605c:	4770      	bx	lr
    return HAL_ERROR;
 800605e:	2001      	movs	r0, #1
 8006060:	e7f9      	b.n	8006056 <HAL_RCC_ClockConfig+0x146>
        return HAL_ERROR;
 8006062:	2001      	movs	r0, #1
 8006064:	e7f7      	b.n	8006056 <HAL_RCC_ClockConfig+0x146>
    return HAL_ERROR;
 8006066:	2001      	movs	r0, #1
 8006068:	e7f5      	b.n	8006056 <HAL_RCC_ClockConfig+0x146>
 800606a:	bf00      	nop
 800606c:	40022000 	.word	0x40022000
 8006070:	40021000 	.word	0x40021000
 8006074:	0800c2f8 	.word	0x0800c2f8
 8006078:	20000000 	.word	0x20000000
 800607c:	20000010 	.word	0x20000010

08006080 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006080:	4b04      	ldr	r3, [pc, #16]	; (8006094 <HAL_RCC_GetPCLK1Freq+0x14>)
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8006088:	4a03      	ldr	r2, [pc, #12]	; (8006098 <HAL_RCC_GetPCLK1Freq+0x18>)
 800608a:	5cd3      	ldrb	r3, [r2, r3]
 800608c:	4a03      	ldr	r2, [pc, #12]	; (800609c <HAL_RCC_GetPCLK1Freq+0x1c>)
 800608e:	6810      	ldr	r0, [r2, #0]
}
 8006090:	40d8      	lsrs	r0, r3
 8006092:	4770      	bx	lr
 8006094:	40021000 	.word	0x40021000
 8006098:	0800c308 	.word	0x0800c308
 800609c:	20000000 	.word	0x20000000

080060a0 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80060a0:	4b04      	ldr	r3, [pc, #16]	; (80060b4 <HAL_RCC_GetPCLK2Freq+0x14>)
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80060a8:	4a03      	ldr	r2, [pc, #12]	; (80060b8 <HAL_RCC_GetPCLK2Freq+0x18>)
 80060aa:	5cd3      	ldrb	r3, [r2, r3]
 80060ac:	4a03      	ldr	r2, [pc, #12]	; (80060bc <HAL_RCC_GetPCLK2Freq+0x1c>)
 80060ae:	6810      	ldr	r0, [r2, #0]
}
 80060b0:	40d8      	lsrs	r0, r3
 80060b2:	4770      	bx	lr
 80060b4:	40021000 	.word	0x40021000
 80060b8:	0800c308 	.word	0x0800c308
 80060bc:	20000000 	.word	0x20000000

080060c0 <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80060c0:	230f      	movs	r3, #15
 80060c2:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80060c4:	4b0b      	ldr	r3, [pc, #44]	; (80060f4 <HAL_RCC_GetClockConfig+0x34>)
 80060c6:	685a      	ldr	r2, [r3, #4]
 80060c8:	f002 0203 	and.w	r2, r2, #3
 80060cc:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80060ce:	685a      	ldr	r2, [r3, #4]
 80060d0:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80060d4:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80060d6:	685a      	ldr	r2, [r3, #4]
 80060d8:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80060dc:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	08db      	lsrs	r3, r3, #3
 80060e2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80060e6:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80060e8:	4b03      	ldr	r3, [pc, #12]	; (80060f8 <HAL_RCC_GetClockConfig+0x38>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f003 0307 	and.w	r3, r3, #7
 80060f0:	600b      	str	r3, [r1, #0]
}
 80060f2:	4770      	bx	lr
 80060f4:	40021000 	.word	0x40021000
 80060f8:	40022000 	.word	0x40022000

080060fc <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80060fc:	4770      	bx	lr
	...

08006100 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006100:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006104:	b2db      	uxtb	r3, r3
 8006106:	2b01      	cmp	r3, #1
 8006108:	d127      	bne.n	800615a <HAL_TIM_Base_Start_IT+0x5a>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800610a:	2302      	movs	r3, #2
 800610c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006110:	6802      	ldr	r2, [r0, #0]
 8006112:	68d3      	ldr	r3, [r2, #12]
 8006114:	f043 0301 	orr.w	r3, r3, #1
 8006118:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800611a:	6803      	ldr	r3, [r0, #0]
 800611c:	4a11      	ldr	r2, [pc, #68]	; (8006164 <HAL_TIM_Base_Start_IT+0x64>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d010      	beq.n	8006144 <HAL_TIM_Base_Start_IT+0x44>
 8006122:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006126:	d00d      	beq.n	8006144 <HAL_TIM_Base_Start_IT+0x44>
 8006128:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800612c:	4293      	cmp	r3, r2
 800612e:	d009      	beq.n	8006144 <HAL_TIM_Base_Start_IT+0x44>
 8006130:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006134:	4293      	cmp	r3, r2
 8006136:	d005      	beq.n	8006144 <HAL_TIM_Base_Start_IT+0x44>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006138:	681a      	ldr	r2, [r3, #0]
 800613a:	f042 0201 	orr.w	r2, r2, #1
 800613e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006140:	2000      	movs	r0, #0
 8006142:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006144:	689a      	ldr	r2, [r3, #8]
 8006146:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800614a:	2a06      	cmp	r2, #6
 800614c:	d007      	beq.n	800615e <HAL_TIM_Base_Start_IT+0x5e>
      __HAL_TIM_ENABLE(htim);
 800614e:	681a      	ldr	r2, [r3, #0]
 8006150:	f042 0201 	orr.w	r2, r2, #1
 8006154:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8006156:	2000      	movs	r0, #0
 8006158:	4770      	bx	lr
    return HAL_ERROR;
 800615a:	2001      	movs	r0, #1
 800615c:	4770      	bx	lr
  return HAL_OK;
 800615e:	2000      	movs	r0, #0
}
 8006160:	4770      	bx	lr
 8006162:	bf00      	nop
 8006164:	40012c00 	.word	0x40012c00

08006168 <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006168:	4770      	bx	lr

0800616a <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800616a:	4770      	bx	lr

0800616c <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800616c:	4770      	bx	lr

0800616e <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800616e:	4770      	bx	lr

08006170 <HAL_TIM_IRQHandler>:
{
 8006170:	b510      	push	{r4, lr}
 8006172:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006174:	6803      	ldr	r3, [r0, #0]
 8006176:	691a      	ldr	r2, [r3, #16]
 8006178:	f012 0f02 	tst.w	r2, #2
 800617c:	d011      	beq.n	80061a2 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800617e:	68da      	ldr	r2, [r3, #12]
 8006180:	f012 0f02 	tst.w	r2, #2
 8006184:	d00d      	beq.n	80061a2 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006186:	f06f 0202 	mvn.w	r2, #2
 800618a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800618c:	2301      	movs	r3, #1
 800618e:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006190:	6803      	ldr	r3, [r0, #0]
 8006192:	699b      	ldr	r3, [r3, #24]
 8006194:	f013 0f03 	tst.w	r3, #3
 8006198:	d070      	beq.n	800627c <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 800619a:	f7ff ffe6 	bl	800616a <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800619e:	2300      	movs	r3, #0
 80061a0:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80061a2:	6823      	ldr	r3, [r4, #0]
 80061a4:	691a      	ldr	r2, [r3, #16]
 80061a6:	f012 0f04 	tst.w	r2, #4
 80061aa:	d012      	beq.n	80061d2 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80061ac:	68da      	ldr	r2, [r3, #12]
 80061ae:	f012 0f04 	tst.w	r2, #4
 80061b2:	d00e      	beq.n	80061d2 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80061b4:	f06f 0204 	mvn.w	r2, #4
 80061b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80061ba:	2302      	movs	r3, #2
 80061bc:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80061be:	6823      	ldr	r3, [r4, #0]
 80061c0:	699b      	ldr	r3, [r3, #24]
 80061c2:	f413 7f40 	tst.w	r3, #768	; 0x300
 80061c6:	d05f      	beq.n	8006288 <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 80061c8:	4620      	mov	r0, r4
 80061ca:	f7ff ffce 	bl	800616a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061ce:	2300      	movs	r3, #0
 80061d0:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80061d2:	6823      	ldr	r3, [r4, #0]
 80061d4:	691a      	ldr	r2, [r3, #16]
 80061d6:	f012 0f08 	tst.w	r2, #8
 80061da:	d012      	beq.n	8006202 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80061dc:	68da      	ldr	r2, [r3, #12]
 80061de:	f012 0f08 	tst.w	r2, #8
 80061e2:	d00e      	beq.n	8006202 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80061e4:	f06f 0208 	mvn.w	r2, #8
 80061e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80061ea:	2304      	movs	r3, #4
 80061ec:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80061ee:	6823      	ldr	r3, [r4, #0]
 80061f0:	69db      	ldr	r3, [r3, #28]
 80061f2:	f013 0f03 	tst.w	r3, #3
 80061f6:	d04e      	beq.n	8006296 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 80061f8:	4620      	mov	r0, r4
 80061fa:	f7ff ffb6 	bl	800616a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061fe:	2300      	movs	r3, #0
 8006200:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006202:	6823      	ldr	r3, [r4, #0]
 8006204:	691a      	ldr	r2, [r3, #16]
 8006206:	f012 0f10 	tst.w	r2, #16
 800620a:	d012      	beq.n	8006232 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800620c:	68da      	ldr	r2, [r3, #12]
 800620e:	f012 0f10 	tst.w	r2, #16
 8006212:	d00e      	beq.n	8006232 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006214:	f06f 0210 	mvn.w	r2, #16
 8006218:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800621a:	2308      	movs	r3, #8
 800621c:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800621e:	6823      	ldr	r3, [r4, #0]
 8006220:	69db      	ldr	r3, [r3, #28]
 8006222:	f413 7f40 	tst.w	r3, #768	; 0x300
 8006226:	d03d      	beq.n	80062a4 <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 8006228:	4620      	mov	r0, r4
 800622a:	f7ff ff9e 	bl	800616a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800622e:	2300      	movs	r3, #0
 8006230:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006232:	6823      	ldr	r3, [r4, #0]
 8006234:	691a      	ldr	r2, [r3, #16]
 8006236:	f012 0f01 	tst.w	r2, #1
 800623a:	d003      	beq.n	8006244 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800623c:	68da      	ldr	r2, [r3, #12]
 800623e:	f012 0f01 	tst.w	r2, #1
 8006242:	d136      	bne.n	80062b2 <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006244:	6823      	ldr	r3, [r4, #0]
 8006246:	691a      	ldr	r2, [r3, #16]
 8006248:	f012 0f80 	tst.w	r2, #128	; 0x80
 800624c:	d003      	beq.n	8006256 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800624e:	68da      	ldr	r2, [r3, #12]
 8006250:	f012 0f80 	tst.w	r2, #128	; 0x80
 8006254:	d134      	bne.n	80062c0 <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006256:	6823      	ldr	r3, [r4, #0]
 8006258:	691a      	ldr	r2, [r3, #16]
 800625a:	f012 0f40 	tst.w	r2, #64	; 0x40
 800625e:	d003      	beq.n	8006268 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006260:	68da      	ldr	r2, [r3, #12]
 8006262:	f012 0f40 	tst.w	r2, #64	; 0x40
 8006266:	d132      	bne.n	80062ce <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006268:	6823      	ldr	r3, [r4, #0]
 800626a:	691a      	ldr	r2, [r3, #16]
 800626c:	f012 0f20 	tst.w	r2, #32
 8006270:	d003      	beq.n	800627a <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006272:	68da      	ldr	r2, [r3, #12]
 8006274:	f012 0f20 	tst.w	r2, #32
 8006278:	d130      	bne.n	80062dc <HAL_TIM_IRQHandler+0x16c>
}
 800627a:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800627c:	f7ff ff74 	bl	8006168 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006280:	4620      	mov	r0, r4
 8006282:	f7ff ff73 	bl	800616c <HAL_TIM_PWM_PulseFinishedCallback>
 8006286:	e78a      	b.n	800619e <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006288:	4620      	mov	r0, r4
 800628a:	f7ff ff6d 	bl	8006168 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800628e:	4620      	mov	r0, r4
 8006290:	f7ff ff6c 	bl	800616c <HAL_TIM_PWM_PulseFinishedCallback>
 8006294:	e79b      	b.n	80061ce <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006296:	4620      	mov	r0, r4
 8006298:	f7ff ff66 	bl	8006168 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800629c:	4620      	mov	r0, r4
 800629e:	f7ff ff65 	bl	800616c <HAL_TIM_PWM_PulseFinishedCallback>
 80062a2:	e7ac      	b.n	80061fe <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062a4:	4620      	mov	r0, r4
 80062a6:	f7ff ff5f 	bl	8006168 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062aa:	4620      	mov	r0, r4
 80062ac:	f7ff ff5e 	bl	800616c <HAL_TIM_PWM_PulseFinishedCallback>
 80062b0:	e7bd      	b.n	800622e <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80062b2:	f06f 0201 	mvn.w	r2, #1
 80062b6:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80062b8:	4620      	mov	r0, r4
 80062ba:	f7fc f893 	bl	80023e4 <HAL_TIM_PeriodElapsedCallback>
 80062be:	e7c1      	b.n	8006244 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80062c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80062c4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80062c6:	4620      	mov	r0, r4
 80062c8:	f000 f9f7 	bl	80066ba <HAL_TIMEx_BreakCallback>
 80062cc:	e7c3      	b.n	8006256 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80062ce:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80062d2:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80062d4:	4620      	mov	r0, r4
 80062d6:	f7ff ff4a 	bl	800616e <HAL_TIM_TriggerCallback>
 80062da:	e7c5      	b.n	8006268 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80062dc:	f06f 0220 	mvn.w	r2, #32
 80062e0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80062e2:	4620      	mov	r0, r4
 80062e4:	f000 f9e8 	bl	80066b8 <HAL_TIMEx_CommutCallback>
}
 80062e8:	e7c7      	b.n	800627a <HAL_TIM_IRQHandler+0x10a>
	...

080062ec <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80062ec:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80062ee:	4a25      	ldr	r2, [pc, #148]	; (8006384 <TIM_Base_SetConfig+0x98>)
 80062f0:	4290      	cmp	r0, r2
 80062f2:	d014      	beq.n	800631e <TIM_Base_SetConfig+0x32>
 80062f4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80062f8:	d026      	beq.n	8006348 <TIM_Base_SetConfig+0x5c>
 80062fa:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80062fe:	4290      	cmp	r0, r2
 8006300:	d036      	beq.n	8006370 <TIM_Base_SetConfig+0x84>
 8006302:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006306:	4290      	cmp	r0, r2
 8006308:	d037      	beq.n	800637a <TIM_Base_SetConfig+0x8e>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800630a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800630e:	694a      	ldr	r2, [r1, #20]
 8006310:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8006312:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006314:	688b      	ldr	r3, [r1, #8]
 8006316:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006318:	680b      	ldr	r3, [r1, #0]
 800631a:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800631c:	e025      	b.n	800636a <TIM_Base_SetConfig+0x7e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800631e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006322:	684a      	ldr	r2, [r1, #4]
 8006324:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8006326:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800632a:	68ca      	ldr	r2, [r1, #12]
 800632c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800632e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006332:	694a      	ldr	r2, [r1, #20]
 8006334:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8006336:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006338:	688b      	ldr	r3, [r1, #8]
 800633a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800633c:	680b      	ldr	r3, [r1, #0]
 800633e:	6283      	str	r3, [r0, #40]	; 0x28
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006340:	690a      	ldr	r2, [r1, #16]
 8006342:	4b10      	ldr	r3, [pc, #64]	; (8006384 <TIM_Base_SetConfig+0x98>)
 8006344:	631a      	str	r2, [r3, #48]	; 0x30
 8006346:	e010      	b.n	800636a <TIM_Base_SetConfig+0x7e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006348:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800634c:	684a      	ldr	r2, [r1, #4]
 800634e:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8006350:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006354:	68ca      	ldr	r2, [r1, #12]
 8006356:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006358:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800635c:	694a      	ldr	r2, [r1, #20]
 800635e:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8006360:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006362:	688b      	ldr	r3, [r1, #8]
 8006364:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006366:	680b      	ldr	r3, [r1, #0]
 8006368:	6283      	str	r3, [r0, #40]	; 0x28
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800636a:	2301      	movs	r3, #1
 800636c:	6143      	str	r3, [r0, #20]
}
 800636e:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006370:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006374:	684a      	ldr	r2, [r1, #4]
 8006376:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006378:	e7ea      	b.n	8006350 <TIM_Base_SetConfig+0x64>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800637a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800637e:	684a      	ldr	r2, [r1, #4]
 8006380:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006382:	e7e5      	b.n	8006350 <TIM_Base_SetConfig+0x64>
 8006384:	40012c00 	.word	0x40012c00

08006388 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8006388:	b340      	cbz	r0, 80063dc <HAL_TIM_Base_Init+0x54>
{
 800638a:	b510      	push	{r4, lr}
 800638c:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800638e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006392:	b1f3      	cbz	r3, 80063d2 <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8006394:	2302      	movs	r3, #2
 8006396:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800639a:	4621      	mov	r1, r4
 800639c:	f851 0b04 	ldr.w	r0, [r1], #4
 80063a0:	f7ff ffa4 	bl	80062ec <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80063a4:	2301      	movs	r3, #1
 80063a6:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063aa:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80063ae:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80063b2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80063b6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063ba:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80063be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80063c2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80063c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 80063ca:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80063ce:	2000      	movs	r0, #0
}
 80063d0:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80063d2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80063d6:	f7ff fe91 	bl	80060fc <HAL_TIM_Base_MspInit>
 80063da:	e7db      	b.n	8006394 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 80063dc:	2001      	movs	r0, #1
}
 80063de:	4770      	bx	lr

080063e0 <HAL_TIM_Encoder_Init>:
  if (htim == NULL)
 80063e0:	2800      	cmp	r0, #0
 80063e2:	d053      	beq.n	800648c <HAL_TIM_Encoder_Init+0xac>
{
 80063e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063e6:	460d      	mov	r5, r1
 80063e8:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80063ea:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d047      	beq.n	8006482 <HAL_TIM_Encoder_Init+0xa2>
  htim->State = HAL_TIM_STATE_BUSY;
 80063f2:	2302      	movs	r3, #2
 80063f4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80063f8:	6822      	ldr	r2, [r4, #0]
 80063fa:	6893      	ldr	r3, [r2, #8]
 80063fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006400:	f023 0307 	bic.w	r3, r3, #7
 8006404:	6093      	str	r3, [r2, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006406:	4621      	mov	r1, r4
 8006408:	f851 0b04 	ldr.w	r0, [r1], #4
 800640c:	f7ff ff6e 	bl	80062ec <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 8006410:	6821      	ldr	r1, [r4, #0]
 8006412:	6888      	ldr	r0, [r1, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 8006414:	698b      	ldr	r3, [r1, #24]
  tmpccer = htim->Instance->CCER;
 8006416:	6a0e      	ldr	r6, [r1, #32]
  tmpsmcr |= sConfig->EncoderMode;
 8006418:	682a      	ldr	r2, [r5, #0]
 800641a:	4310      	orrs	r0, r2
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800641c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006420:	f023 0303 	bic.w	r3, r3, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006424:	69af      	ldr	r7, [r5, #24]
 8006426:	68aa      	ldr	r2, [r5, #8]
 8006428:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 800642c:	431a      	orrs	r2, r3
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800642e:	f422 427c 	bic.w	r2, r2, #64512	; 0xfc00
 8006432:	f022 02fc 	bic.w	r2, r2, #252	; 0xfc
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006436:	692b      	ldr	r3, [r5, #16]
 8006438:	011b      	lsls	r3, r3, #4
 800643a:	69ef      	ldr	r7, [r5, #28]
 800643c:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 8006440:	68ef      	ldr	r7, [r5, #12]
 8006442:	433b      	orrs	r3, r7
 8006444:	6a2f      	ldr	r7, [r5, #32]
 8006446:	ea43 3307 	orr.w	r3, r3, r7, lsl #12
 800644a:	4313      	orrs	r3, r2
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800644c:	f026 0622 	bic.w	r6, r6, #34	; 0x22
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006450:	696f      	ldr	r7, [r5, #20]
 8006452:	686a      	ldr	r2, [r5, #4]
 8006454:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
 8006458:	4316      	orrs	r6, r2
  htim->Instance->SMCR = tmpsmcr;
 800645a:	6088      	str	r0, [r1, #8]
  htim->Instance->CCMR1 = tmpccmr1;
 800645c:	6822      	ldr	r2, [r4, #0]
 800645e:	6193      	str	r3, [r2, #24]
  htim->Instance->CCER = tmpccer;
 8006460:	6823      	ldr	r3, [r4, #0]
 8006462:	621e      	str	r6, [r3, #32]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006464:	2301      	movs	r3, #1
 8006466:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800646a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800646e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006472:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006476:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  htim->State = HAL_TIM_STATE_READY;
 800647a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800647e:	2000      	movs	r0, #0
}
 8006480:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    htim->Lock = HAL_UNLOCKED;
 8006482:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 8006486:	f7fc fa77 	bl	8002978 <HAL_TIM_Encoder_MspInit>
 800648a:	e7b2      	b.n	80063f2 <HAL_TIM_Encoder_Init+0x12>
    return HAL_ERROR;
 800648c:	2001      	movs	r0, #1
}
 800648e:	4770      	bx	lr

08006490 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006490:	f001 011f 	and.w	r1, r1, #31

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006494:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006496:	f04f 0c01 	mov.w	ip, #1
 800649a:	fa0c fc01 	lsl.w	ip, ip, r1
  TIMx->CCER &= ~tmp;
 800649e:	ea23 030c 	bic.w	r3, r3, ip
 80064a2:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80064a4:	6a03      	ldr	r3, [r0, #32]
 80064a6:	408a      	lsls	r2, r1
 80064a8:	431a      	orrs	r2, r3
 80064aa:	6202      	str	r2, [r0, #32]
}
 80064ac:	4770      	bx	lr

080064ae <HAL_TIM_Encoder_Start>:
{
 80064ae:	b510      	push	{r4, lr}
 80064b0:	4604      	mov	r4, r0
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80064b2:	f890 003e 	ldrb.w	r0, [r0, #62]	; 0x3e
 80064b6:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80064b8:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80064bc:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 80064c0:	b2d2      	uxtb	r2, r2
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80064c2:	f894 c043 	ldrb.w	ip, [r4, #67]	; 0x43
  if (Channel == TIM_CHANNEL_1)
 80064c6:	b991      	cbnz	r1, 80064ee <HAL_TIM_Encoder_Start+0x40>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80064c8:	2801      	cmp	r0, #1
 80064ca:	d142      	bne.n	8006552 <HAL_TIM_Encoder_Start+0xa4>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80064cc:	2a01      	cmp	r2, #1
 80064ce:	d141      	bne.n	8006554 <HAL_TIM_Encoder_Start+0xa6>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80064d0:	2302      	movs	r3, #2
 80064d2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80064d6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80064da:	6820      	ldr	r0, [r4, #0]
 80064dc:	f7ff ffd8 	bl	8006490 <TIM_CCxChannelCmd>
  __HAL_TIM_ENABLE(htim);
 80064e0:	6822      	ldr	r2, [r4, #0]
 80064e2:	6813      	ldr	r3, [r2, #0]
 80064e4:	f043 0301 	orr.w	r3, r3, #1
 80064e8:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 80064ea:	2000      	movs	r0, #0
 80064ec:	e032      	b.n	8006554 <HAL_TIM_Encoder_Start+0xa6>
 80064ee:	b2db      	uxtb	r3, r3
 80064f0:	fa5f fc8c 	uxtb.w	ip, ip
 80064f4:	468e      	mov	lr, r1
  else if (Channel == TIM_CHANNEL_2)
 80064f6:	2904      	cmp	r1, #4
 80064f8:	d01b      	beq.n	8006532 <HAL_TIM_Encoder_Start+0x84>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80064fa:	2801      	cmp	r0, #1
 80064fc:	d12f      	bne.n	800655e <HAL_TIM_Encoder_Start+0xb0>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80064fe:	2b01      	cmp	r3, #1
 8006500:	d128      	bne.n	8006554 <HAL_TIM_Encoder_Start+0xa6>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006502:	2a01      	cmp	r2, #1
 8006504:	d12d      	bne.n	8006562 <HAL_TIM_Encoder_Start+0xb4>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006506:	f1bc 0f01 	cmp.w	ip, #1
 800650a:	d12c      	bne.n	8006566 <HAL_TIM_Encoder_Start+0xb8>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800650c:	2302      	movs	r3, #2
 800650e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006512:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006516:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800651a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800651e:	2100      	movs	r1, #0
 8006520:	6820      	ldr	r0, [r4, #0]
 8006522:	f7ff ffb5 	bl	8006490 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006526:	2201      	movs	r2, #1
 8006528:	2104      	movs	r1, #4
 800652a:	6820      	ldr	r0, [r4, #0]
 800652c:	f7ff ffb0 	bl	8006490 <TIM_CCxChannelCmd>
      break;
 8006530:	e7d6      	b.n	80064e0 <HAL_TIM_Encoder_Start+0x32>
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006532:	2b01      	cmp	r3, #1
 8006534:	d10f      	bne.n	8006556 <HAL_TIM_Encoder_Start+0xa8>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006536:	f1bc 0f01 	cmp.w	ip, #1
 800653a:	d10e      	bne.n	800655a <HAL_TIM_Encoder_Start+0xac>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800653c:	2302      	movs	r3, #2
 800653e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006542:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006546:	2201      	movs	r2, #1
 8006548:	2104      	movs	r1, #4
 800654a:	6820      	ldr	r0, [r4, #0]
 800654c:	f7ff ffa0 	bl	8006490 <TIM_CCxChannelCmd>
      break;
 8006550:	e7c6      	b.n	80064e0 <HAL_TIM_Encoder_Start+0x32>
      return HAL_ERROR;
 8006552:	2001      	movs	r0, #1
}
 8006554:	bd10      	pop	{r4, pc}
      return HAL_ERROR;
 8006556:	2001      	movs	r0, #1
 8006558:	e7fc      	b.n	8006554 <HAL_TIM_Encoder_Start+0xa6>
 800655a:	4618      	mov	r0, r3
 800655c:	e7fa      	b.n	8006554 <HAL_TIM_Encoder_Start+0xa6>
      return HAL_ERROR;
 800655e:	2001      	movs	r0, #1
 8006560:	e7f8      	b.n	8006554 <HAL_TIM_Encoder_Start+0xa6>
 8006562:	4618      	mov	r0, r3
 8006564:	e7f6      	b.n	8006554 <HAL_TIM_Encoder_Start+0xa6>
 8006566:	4610      	mov	r0, r2
 8006568:	e7f4      	b.n	8006554 <HAL_TIM_Encoder_Start+0xa6>

0800656a <HAL_TIM_Encoder_Start_IT>:
{
 800656a:	b510      	push	{r4, lr}
 800656c:	4604      	mov	r4, r0
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800656e:	f890 003e 	ldrb.w	r0, [r0, #62]	; 0x3e
 8006572:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006574:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006578:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 800657c:	b2d2      	uxtb	r2, r2
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800657e:	f894 c043 	ldrb.w	ip, [r4, #67]	; 0x43
  if (Channel == TIM_CHANNEL_1)
 8006582:	b9b9      	cbnz	r1, 80065b4 <HAL_TIM_Encoder_Start_IT+0x4a>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006584:	2801      	cmp	r0, #1
 8006586:	d156      	bne.n	8006636 <HAL_TIM_Encoder_Start_IT+0xcc>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006588:	2a01      	cmp	r2, #1
 800658a:	d155      	bne.n	8006638 <HAL_TIM_Encoder_Start_IT+0xce>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800658c:	2302      	movs	r3, #2
 800658e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006592:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006596:	6820      	ldr	r0, [r4, #0]
 8006598:	f7ff ff7a 	bl	8006490 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800659c:	6822      	ldr	r2, [r4, #0]
 800659e:	68d3      	ldr	r3, [r2, #12]
 80065a0:	f043 0302 	orr.w	r3, r3, #2
 80065a4:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_ENABLE(htim);
 80065a6:	6822      	ldr	r2, [r4, #0]
 80065a8:	6813      	ldr	r3, [r2, #0]
 80065aa:	f043 0301 	orr.w	r3, r3, #1
 80065ae:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 80065b0:	2000      	movs	r0, #0
 80065b2:	e041      	b.n	8006638 <HAL_TIM_Encoder_Start_IT+0xce>
 80065b4:	b2db      	uxtb	r3, r3
 80065b6:	fa5f fc8c 	uxtb.w	ip, ip
 80065ba:	468e      	mov	lr, r1
  else if (Channel == TIM_CHANNEL_2)
 80065bc:	2904      	cmp	r1, #4
 80065be:	d025      	beq.n	800660c <HAL_TIM_Encoder_Start_IT+0xa2>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80065c0:	2801      	cmp	r0, #1
 80065c2:	d13e      	bne.n	8006642 <HAL_TIM_Encoder_Start_IT+0xd8>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80065c4:	2b01      	cmp	r3, #1
 80065c6:	d137      	bne.n	8006638 <HAL_TIM_Encoder_Start_IT+0xce>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80065c8:	2a01      	cmp	r2, #1
 80065ca:	d13c      	bne.n	8006646 <HAL_TIM_Encoder_Start_IT+0xdc>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80065cc:	f1bc 0f01 	cmp.w	ip, #1
 80065d0:	d13b      	bne.n	800664a <HAL_TIM_Encoder_Start_IT+0xe0>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80065d2:	2302      	movs	r3, #2
 80065d4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80065d8:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80065dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80065e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80065e4:	2100      	movs	r1, #0
 80065e6:	6820      	ldr	r0, [r4, #0]
 80065e8:	f7ff ff52 	bl	8006490 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80065ec:	2201      	movs	r2, #1
 80065ee:	2104      	movs	r1, #4
 80065f0:	6820      	ldr	r0, [r4, #0]
 80065f2:	f7ff ff4d 	bl	8006490 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80065f6:	6822      	ldr	r2, [r4, #0]
 80065f8:	68d3      	ldr	r3, [r2, #12]
 80065fa:	f043 0302 	orr.w	r3, r3, #2
 80065fe:	60d3      	str	r3, [r2, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006600:	6822      	ldr	r2, [r4, #0]
 8006602:	68d3      	ldr	r3, [r2, #12]
 8006604:	f043 0304 	orr.w	r3, r3, #4
 8006608:	60d3      	str	r3, [r2, #12]
      break;
 800660a:	e7cc      	b.n	80065a6 <HAL_TIM_Encoder_Start_IT+0x3c>
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800660c:	2b01      	cmp	r3, #1
 800660e:	d114      	bne.n	800663a <HAL_TIM_Encoder_Start_IT+0xd0>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006610:	f1bc 0f01 	cmp.w	ip, #1
 8006614:	d113      	bne.n	800663e <HAL_TIM_Encoder_Start_IT+0xd4>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006616:	2302      	movs	r3, #2
 8006618:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800661c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006620:	2201      	movs	r2, #1
 8006622:	2104      	movs	r1, #4
 8006624:	6820      	ldr	r0, [r4, #0]
 8006626:	f7ff ff33 	bl	8006490 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800662a:	6822      	ldr	r2, [r4, #0]
 800662c:	68d3      	ldr	r3, [r2, #12]
 800662e:	f043 0304 	orr.w	r3, r3, #4
 8006632:	60d3      	str	r3, [r2, #12]
      break;
 8006634:	e7b7      	b.n	80065a6 <HAL_TIM_Encoder_Start_IT+0x3c>
      return HAL_ERROR;
 8006636:	2001      	movs	r0, #1
}
 8006638:	bd10      	pop	{r4, pc}
      return HAL_ERROR;
 800663a:	2001      	movs	r0, #1
 800663c:	e7fc      	b.n	8006638 <HAL_TIM_Encoder_Start_IT+0xce>
 800663e:	4618      	mov	r0, r3
 8006640:	e7fa      	b.n	8006638 <HAL_TIM_Encoder_Start_IT+0xce>
      return HAL_ERROR;
 8006642:	2001      	movs	r0, #1
 8006644:	e7f8      	b.n	8006638 <HAL_TIM_Encoder_Start_IT+0xce>
 8006646:	4618      	mov	r0, r3
 8006648:	e7f6      	b.n	8006638 <HAL_TIM_Encoder_Start_IT+0xce>
 800664a:	4610      	mov	r0, r2
 800664c:	e7f4      	b.n	8006638 <HAL_TIM_Encoder_Start_IT+0xce>
	...

08006650 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006650:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 8006654:	2a01      	cmp	r2, #1
 8006656:	d02b      	beq.n	80066b0 <HAL_TIMEx_MasterConfigSynchronization+0x60>
{
 8006658:	b430      	push	{r4, r5}
 800665a:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 800665c:	2201      	movs	r2, #1
 800665e:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006662:	2202      	movs	r2, #2
 8006664:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006668:	6804      	ldr	r4, [r0, #0]
 800666a:	6862      	ldr	r2, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800666c:	68a0      	ldr	r0, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800666e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006672:	680d      	ldr	r5, [r1, #0]
 8006674:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006676:	6062      	str	r2, [r4, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006678:	681a      	ldr	r2, [r3, #0]
 800667a:	4c0e      	ldr	r4, [pc, #56]	; (80066b4 <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 800667c:	42a2      	cmp	r2, r4
 800667e:	d00a      	beq.n	8006696 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8006680:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8006684:	d007      	beq.n	8006696 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8006686:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 800668a:	42a2      	cmp	r2, r4
 800668c:	d003      	beq.n	8006696 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800668e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8006692:	42a2      	cmp	r2, r4
 8006694:	d104      	bne.n	80066a0 <HAL_TIMEx_MasterConfigSynchronization+0x50>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006696:	f020 0080 	bic.w	r0, r0, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800669a:	6849      	ldr	r1, [r1, #4]
 800669c:	4308      	orrs	r0, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800669e:	6090      	str	r0, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80066a0:	2201      	movs	r2, #1
 80066a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80066a6:	2000      	movs	r0, #0
 80066a8:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c

  return HAL_OK;
}
 80066ac:	bc30      	pop	{r4, r5}
 80066ae:	4770      	bx	lr
  __HAL_LOCK(htim);
 80066b0:	2002      	movs	r0, #2
}
 80066b2:	4770      	bx	lr
 80066b4:	40012c00 	.word	0x40012c00

080066b8 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80066b8:	4770      	bx	lr

080066ba <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80066ba:	4770      	bx	lr

080066bc <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066bc:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066be:	f102 030c 	add.w	r3, r2, #12
 80066c2:	e853 3f00 	ldrex	r3, [r3]
 80066c6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ca:	320c      	adds	r2, #12
 80066cc:	e842 3100 	strex	r1, r3, [r2]
 80066d0:	2900      	cmp	r1, #0
 80066d2:	d1f3      	bne.n	80066bc <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066d4:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066d6:	f102 0314 	add.w	r3, r2, #20
 80066da:	e853 3f00 	ldrex	r3, [r3]
 80066de:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066e2:	3214      	adds	r2, #20
 80066e4:	e842 3100 	strex	r1, r3, [r2]
 80066e8:	2900      	cmp	r1, #0
 80066ea:	d1f3      	bne.n	80066d4 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066ec:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80066ee:	2b01      	cmp	r3, #1
 80066f0:	d005      	beq.n	80066fe <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80066f2:	2320      	movs	r3, #32
 80066f4:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066f8:	2300      	movs	r3, #0
 80066fa:	6303      	str	r3, [r0, #48]	; 0x30
}
 80066fc:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066fe:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006700:	f102 030c 	add.w	r3, r2, #12
 8006704:	e853 3f00 	ldrex	r3, [r3]
 8006708:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800670c:	320c      	adds	r2, #12
 800670e:	e842 3100 	strex	r1, r3, [r2]
 8006712:	2900      	cmp	r1, #0
 8006714:	d1f3      	bne.n	80066fe <UART_EndRxTransfer+0x42>
 8006716:	e7ec      	b.n	80066f2 <UART_EndRxTransfer+0x36>

08006718 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006718:	b510      	push	{r4, lr}
 800671a:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800671c:	6802      	ldr	r2, [r0, #0]
 800671e:	6913      	ldr	r3, [r2, #16]
 8006720:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006724:	68c1      	ldr	r1, [r0, #12]
 8006726:	430b      	orrs	r3, r1
 8006728:	6113      	str	r3, [r2, #16]
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
  MODIFY_REG(huart->Instance->CR1,
 800672a:	6801      	ldr	r1, [r0, #0]
 800672c:	68ca      	ldr	r2, [r1, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800672e:	6883      	ldr	r3, [r0, #8]
 8006730:	6900      	ldr	r0, [r0, #16]
 8006732:	4303      	orrs	r3, r0
 8006734:	6960      	ldr	r0, [r4, #20]
 8006736:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8006738:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 800673c:	f022 020c 	bic.w	r2, r2, #12
 8006740:	4313      	orrs	r3, r2
 8006742:	60cb      	str	r3, [r1, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006744:	6822      	ldr	r2, [r4, #0]
 8006746:	6953      	ldr	r3, [r2, #20]
 8006748:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800674c:	69a1      	ldr	r1, [r4, #24]
 800674e:	430b      	orrs	r3, r1
 8006750:	6153      	str	r3, [r2, #20]


  if(huart->Instance == USART1)
 8006752:	6822      	ldr	r2, [r4, #0]
 8006754:	4b11      	ldr	r3, [pc, #68]	; (800679c <UART_SetConfig+0x84>)
 8006756:	429a      	cmp	r2, r3
 8006758:	d01b      	beq.n	8006792 <UART_SetConfig+0x7a>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800675a:	f7ff fc91 	bl	8006080 <HAL_RCC_GetPCLK1Freq>
 800675e:	4603      	mov	r3, r0
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006760:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006764:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006768:	6862      	ldr	r2, [r4, #4]
 800676a:	0092      	lsls	r2, r2, #2
 800676c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006770:	6820      	ldr	r0, [r4, #0]
 8006772:	490b      	ldr	r1, [pc, #44]	; (80067a0 <UART_SetConfig+0x88>)
 8006774:	fba1 4203 	umull	r4, r2, r1, r3
 8006778:	0952      	lsrs	r2, r2, #5
 800677a:	2464      	movs	r4, #100	; 0x64
 800677c:	fb04 3312 	mls	r3, r4, r2, r3
 8006780:	011b      	lsls	r3, r3, #4
 8006782:	3332      	adds	r3, #50	; 0x32
 8006784:	fba1 1303 	umull	r1, r3, r1, r3
 8006788:	0112      	lsls	r2, r2, #4
 800678a:	eb02 1253 	add.w	r2, r2, r3, lsr #5
 800678e:	6082      	str	r2, [r0, #8]
#endif /* USART_CR1_OVER8 */
}
 8006790:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK2Freq();
 8006792:	f7ff fc85 	bl	80060a0 <HAL_RCC_GetPCLK2Freq>
 8006796:	4603      	mov	r3, r0
 8006798:	e7e2      	b.n	8006760 <UART_SetConfig+0x48>
 800679a:	bf00      	nop
 800679c:	40013800 	.word	0x40013800
 80067a0:	51eb851f 	.word	0x51eb851f

080067a4 <HAL_UART_Init>:
  if (huart == NULL)
 80067a4:	b360      	cbz	r0, 8006800 <HAL_UART_Init+0x5c>
{
 80067a6:	b510      	push	{r4, lr}
 80067a8:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80067aa:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80067ae:	b313      	cbz	r3, 80067f6 <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 80067b0:	2324      	movs	r3, #36	; 0x24
 80067b2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UART_DISABLE(huart);
 80067b6:	6822      	ldr	r2, [r4, #0]
 80067b8:	68d3      	ldr	r3, [r2, #12]
 80067ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80067be:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80067c0:	4620      	mov	r0, r4
 80067c2:	f7ff ffa9 	bl	8006718 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80067c6:	6822      	ldr	r2, [r4, #0]
 80067c8:	6913      	ldr	r3, [r2, #16]
 80067ca:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80067ce:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80067d0:	6822      	ldr	r2, [r4, #0]
 80067d2:	6953      	ldr	r3, [r2, #20]
 80067d4:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80067d8:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 80067da:	6822      	ldr	r2, [r4, #0]
 80067dc:	68d3      	ldr	r3, [r2, #12]
 80067de:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80067e2:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067e4:	2000      	movs	r0, #0
 80067e6:	6460      	str	r0, [r4, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80067e8:	2320      	movs	r3, #32
 80067ea:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80067ee:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80067f2:	6360      	str	r0, [r4, #52]	; 0x34
}
 80067f4:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80067f6:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_UART_MspInit(huart);
 80067fa:	f7fc f95b 	bl	8002ab4 <HAL_UART_MspInit>
 80067fe:	e7d7      	b.n	80067b0 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8006800:	2001      	movs	r0, #1
}
 8006802:	4770      	bx	lr

08006804 <HAL_UART_Transmit_IT>:
  if (huart->gState == HAL_UART_STATE_READY)
 8006804:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8006808:	b2db      	uxtb	r3, r3
 800680a:	2b20      	cmp	r3, #32
 800680c:	d110      	bne.n	8006830 <HAL_UART_Transmit_IT+0x2c>
    if ((pData == NULL) || (Size == 0U))
 800680e:	b189      	cbz	r1, 8006834 <HAL_UART_Transmit_IT+0x30>
 8006810:	b192      	cbz	r2, 8006838 <HAL_UART_Transmit_IT+0x34>
    huart->pTxBuffPtr = pData;
 8006812:	6201      	str	r1, [r0, #32]
    huart->TxXferSize = Size;
 8006814:	8482      	strh	r2, [r0, #36]	; 0x24
    huart->TxXferCount = Size;
 8006816:	84c2      	strh	r2, [r0, #38]	; 0x26
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006818:	2300      	movs	r3, #0
 800681a:	6443      	str	r3, [r0, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800681c:	2221      	movs	r2, #33	; 0x21
 800681e:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8006822:	6801      	ldr	r1, [r0, #0]
 8006824:	68ca      	ldr	r2, [r1, #12]
 8006826:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800682a:	60ca      	str	r2, [r1, #12]
    return HAL_OK;
 800682c:	4618      	mov	r0, r3
 800682e:	4770      	bx	lr
    return HAL_BUSY;
 8006830:	2002      	movs	r0, #2
 8006832:	4770      	bx	lr
      return HAL_ERROR;
 8006834:	2001      	movs	r0, #1
 8006836:	4770      	bx	lr
 8006838:	2001      	movs	r0, #1
}
 800683a:	4770      	bx	lr

0800683c <HAL_UART_TxCpltCallback>:
}
 800683c:	4770      	bx	lr

0800683e <HAL_UART_RxCpltCallback>:
}
 800683e:	4770      	bx	lr

08006840 <HAL_UART_ErrorCallback>:
}
 8006840:	4770      	bx	lr

08006842 <UART_DMAAbortOnError>:
{
 8006842:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006844:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8006846:	2300      	movs	r3, #0
 8006848:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800684a:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 800684c:	f7ff fff8 	bl	8006840 <HAL_UART_ErrorCallback>
}
 8006850:	bd08      	pop	{r3, pc}

08006852 <HAL_UARTEx_RxEventCallback>:
}
 8006852:	4770      	bx	lr

08006854 <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006854:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 8006858:	b2db      	uxtb	r3, r3
 800685a:	2b22      	cmp	r3, #34	; 0x22
 800685c:	d11d      	bne.n	800689a <UART_Receive_IT+0x46>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800685e:	6883      	ldr	r3, [r0, #8]
 8006860:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006864:	d006      	beq.n	8006874 <UART_Receive_IT+0x20>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006866:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006868:	b17b      	cbz	r3, 800688a <UART_Receive_IT+0x36>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800686a:	6803      	ldr	r3, [r0, #0]
 800686c:	685b      	ldr	r3, [r3, #4]
 800686e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006872:	e01a      	b.n	80068aa <UART_Receive_IT+0x56>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006874:	6903      	ldr	r3, [r0, #16]
 8006876:	b9a3      	cbnz	r3, 80068a2 <UART_Receive_IT+0x4e>
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006878:	6a82      	ldr	r2, [r0, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800687a:	6803      	ldr	r3, [r0, #0]
 800687c:	685b      	ldr	r3, [r3, #4]
 800687e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006882:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 8006884:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006886:	3302      	adds	r3, #2
 8006888:	e012      	b.n	80068b0 <UART_Receive_IT+0x5c>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800688a:	6903      	ldr	r3, [r0, #16]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d1ec      	bne.n	800686a <UART_Receive_IT+0x16>
 8006890:	e008      	b.n	80068a4 <UART_Receive_IT+0x50>
        HAL_UART_RxCpltCallback(huart);
 8006892:	f7ff ffd4 	bl	800683e <HAL_UART_RxCpltCallback>
      return HAL_OK;
 8006896:	2000      	movs	r0, #0
 8006898:	e048      	b.n	800692c <UART_Receive_IT+0xd8>
    return HAL_BUSY;
 800689a:	2002      	movs	r0, #2
 800689c:	4770      	bx	lr
    return HAL_OK;
 800689e:	2000      	movs	r0, #0
}
 80068a0:	4770      	bx	lr
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80068a2:	6a82      	ldr	r2, [r0, #40]	; 0x28
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80068a4:	6803      	ldr	r3, [r0, #0]
 80068a6:	685b      	ldr	r3, [r3, #4]
 80068a8:	b2db      	uxtb	r3, r3
 80068aa:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 80068ac:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80068ae:	3301      	adds	r3, #1
      huart->pRxBuffPtr += 2U;
 80068b0:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 80068b2:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 80068b4:	3b01      	subs	r3, #1
 80068b6:	b29b      	uxth	r3, r3
 80068b8:	85c3      	strh	r3, [r0, #46]	; 0x2e
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d1ef      	bne.n	800689e <UART_Receive_IT+0x4a>
{
 80068be:	b500      	push	{lr}
 80068c0:	b083      	sub	sp, #12
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80068c2:	6802      	ldr	r2, [r0, #0]
 80068c4:	68d3      	ldr	r3, [r2, #12]
 80068c6:	f023 0320 	bic.w	r3, r3, #32
 80068ca:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80068cc:	6802      	ldr	r2, [r0, #0]
 80068ce:	68d3      	ldr	r3, [r2, #12]
 80068d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80068d4:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80068d6:	6802      	ldr	r2, [r0, #0]
 80068d8:	6953      	ldr	r3, [r2, #20]
 80068da:	f023 0301 	bic.w	r3, r3, #1
 80068de:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 80068e0:	2320      	movs	r3, #32
 80068e2:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80068e6:	2300      	movs	r3, #0
 80068e8:	6343      	str	r3, [r0, #52]	; 0x34
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068ea:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80068ec:	2b01      	cmp	r3, #1
 80068ee:	d1d0      	bne.n	8006892 <UART_Receive_IT+0x3e>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068f0:	2300      	movs	r3, #0
 80068f2:	6303      	str	r3, [r0, #48]	; 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068f4:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068f6:	f102 030c 	add.w	r3, r2, #12
 80068fa:	e853 3f00 	ldrex	r3, [r3]
 80068fe:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006902:	320c      	adds	r2, #12
 8006904:	e842 3100 	strex	r1, r3, [r2]
 8006908:	2900      	cmp	r1, #0
 800690a:	d1f3      	bne.n	80068f4 <UART_Receive_IT+0xa0>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800690c:	6803      	ldr	r3, [r0, #0]
 800690e:	681a      	ldr	r2, [r3, #0]
 8006910:	f012 0f10 	tst.w	r2, #16
 8006914:	d006      	beq.n	8006924 <UART_Receive_IT+0xd0>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006916:	2200      	movs	r2, #0
 8006918:	9201      	str	r2, [sp, #4]
 800691a:	681a      	ldr	r2, [r3, #0]
 800691c:	9201      	str	r2, [sp, #4]
 800691e:	685b      	ldr	r3, [r3, #4]
 8006920:	9301      	str	r3, [sp, #4]
 8006922:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006924:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8006926:	f7ff ff94 	bl	8006852 <HAL_UARTEx_RxEventCallback>
      return HAL_OK;
 800692a:	2000      	movs	r0, #0
}
 800692c:	b003      	add	sp, #12
 800692e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08006934 <HAL_UART_IRQHandler>:
{
 8006934:	b510      	push	{r4, lr}
 8006936:	b082      	sub	sp, #8
 8006938:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800693a:	6802      	ldr	r2, [r0, #0]
 800693c:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800693e:	68d1      	ldr	r1, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006940:	6950      	ldr	r0, [r2, #20]
  if (errorflags == RESET)
 8006942:	f013 0f0f 	tst.w	r3, #15
 8006946:	d109      	bne.n	800695c <HAL_UART_IRQHandler+0x28>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006948:	f013 0f20 	tst.w	r3, #32
 800694c:	d00d      	beq.n	800696a <HAL_UART_IRQHandler+0x36>
 800694e:	f011 0f20 	tst.w	r1, #32
 8006952:	d00a      	beq.n	800696a <HAL_UART_IRQHandler+0x36>
      UART_Receive_IT(huart);
 8006954:	4620      	mov	r0, r4
 8006956:	f7ff ff7d 	bl	8006854 <UART_Receive_IT>
      return;
 800695a:	e017      	b.n	800698c <HAL_UART_IRQHandler+0x58>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800695c:	f000 0001 	and.w	r0, r0, #1
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006960:	f401 7c90 	and.w	ip, r1, #288	; 0x120
 8006964:	ea5c 0c00 	orrs.w	ip, ip, r0
 8006968:	d112      	bne.n	8006990 <HAL_UART_IRQHandler+0x5c>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800696a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800696c:	2801      	cmp	r0, #1
 800696e:	d07f      	beq.n	8006a70 <HAL_UART_IRQHandler+0x13c>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006970:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006974:	d003      	beq.n	800697e <HAL_UART_IRQHandler+0x4a>
 8006976:	f011 0f80 	tst.w	r1, #128	; 0x80
 800697a:	f040 8119 	bne.w	8006bb0 <HAL_UART_IRQHandler+0x27c>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800697e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006982:	d003      	beq.n	800698c <HAL_UART_IRQHandler+0x58>
 8006984:	f011 0f40 	tst.w	r1, #64	; 0x40
 8006988:	f040 813f 	bne.w	8006c0a <HAL_UART_IRQHandler+0x2d6>
}
 800698c:	b002      	add	sp, #8
 800698e:	bd10      	pop	{r4, pc}
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006990:	f013 0f01 	tst.w	r3, #1
 8006994:	d006      	beq.n	80069a4 <HAL_UART_IRQHandler+0x70>
 8006996:	f411 7f80 	tst.w	r1, #256	; 0x100
 800699a:	d003      	beq.n	80069a4 <HAL_UART_IRQHandler+0x70>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800699c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800699e:	f042 0201 	orr.w	r2, r2, #1
 80069a2:	6462      	str	r2, [r4, #68]	; 0x44
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80069a4:	f013 0f04 	tst.w	r3, #4
 80069a8:	d02f      	beq.n	8006a0a <HAL_UART_IRQHandler+0xd6>
 80069aa:	b158      	cbz	r0, 80069c4 <HAL_UART_IRQHandler+0x90>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80069ac:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80069ae:	f042 0202 	orr.w	r2, r2, #2
 80069b2:	6462      	str	r2, [r4, #68]	; 0x44
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80069b4:	f013 0f02 	tst.w	r3, #2
 80069b8:	f000 8132 	beq.w	8006c20 <HAL_UART_IRQHandler+0x2ec>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80069bc:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80069be:	f042 0204 	orr.w	r2, r2, #4
 80069c2:	6462      	str	r2, [r4, #68]	; 0x44
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80069c4:	f013 0f08 	tst.w	r3, #8
 80069c8:	d007      	beq.n	80069da <HAL_UART_IRQHandler+0xa6>
 80069ca:	f001 0220 	and.w	r2, r1, #32
 80069ce:	4302      	orrs	r2, r0
 80069d0:	d003      	beq.n	80069da <HAL_UART_IRQHandler+0xa6>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80069d2:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80069d4:	f042 0208 	orr.w	r2, r2, #8
 80069d8:	6462      	str	r2, [r4, #68]	; 0x44
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80069da:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80069dc:	2a00      	cmp	r2, #0
 80069de:	d0d5      	beq.n	800698c <HAL_UART_IRQHandler+0x58>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80069e0:	f013 0f20 	tst.w	r3, #32
 80069e4:	d002      	beq.n	80069ec <HAL_UART_IRQHandler+0xb8>
 80069e6:	f011 0f20 	tst.w	r1, #32
 80069ea:	d114      	bne.n	8006a16 <HAL_UART_IRQHandler+0xe2>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80069ec:	6823      	ldr	r3, [r4, #0]
 80069ee:	695b      	ldr	r3, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80069f0:	6c62      	ldr	r2, [r4, #68]	; 0x44
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80069f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80069f6:	f002 0208 	and.w	r2, r2, #8
 80069fa:	4313      	orrs	r3, r2
 80069fc:	d10f      	bne.n	8006a1e <HAL_UART_IRQHandler+0xea>
        HAL_UART_ErrorCallback(huart);
 80069fe:	4620      	mov	r0, r4
 8006a00:	f7ff ff1e 	bl	8006840 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a04:	2300      	movs	r3, #0
 8006a06:	6463      	str	r3, [r4, #68]	; 0x44
 8006a08:	e7c0      	b.n	800698c <HAL_UART_IRQHandler+0x58>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006a0a:	f013 0f02 	tst.w	r3, #2
 8006a0e:	d0d9      	beq.n	80069c4 <HAL_UART_IRQHandler+0x90>
 8006a10:	2800      	cmp	r0, #0
 8006a12:	d0d7      	beq.n	80069c4 <HAL_UART_IRQHandler+0x90>
 8006a14:	e7d2      	b.n	80069bc <HAL_UART_IRQHandler+0x88>
        UART_Receive_IT(huart);
 8006a16:	4620      	mov	r0, r4
 8006a18:	f7ff ff1c 	bl	8006854 <UART_Receive_IT>
 8006a1c:	e7e6      	b.n	80069ec <HAL_UART_IRQHandler+0xb8>
        UART_EndRxTransfer(huart);
 8006a1e:	4620      	mov	r0, r4
 8006a20:	f7ff fe4c 	bl	80066bc <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a24:	6823      	ldr	r3, [r4, #0]
 8006a26:	695b      	ldr	r3, [r3, #20]
 8006a28:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006a2c:	d01c      	beq.n	8006a68 <HAL_UART_IRQHandler+0x134>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a2e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a30:	f102 0314 	add.w	r3, r2, #20
 8006a34:	e853 3f00 	ldrex	r3, [r3]
 8006a38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a3c:	3214      	adds	r2, #20
 8006a3e:	e842 3100 	strex	r1, r3, [r2]
 8006a42:	2900      	cmp	r1, #0
 8006a44:	d1f3      	bne.n	8006a2e <HAL_UART_IRQHandler+0xfa>
          if (huart->hdmarx != NULL)
 8006a46:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006a48:	b153      	cbz	r3, 8006a60 <HAL_UART_IRQHandler+0x12c>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006a4a:	4a78      	ldr	r2, [pc, #480]	; (8006c2c <HAL_UART_IRQHandler+0x2f8>)
 8006a4c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006a4e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8006a50:	f7fc fdea 	bl	8003628 <HAL_DMA_Abort_IT>
 8006a54:	2800      	cmp	r0, #0
 8006a56:	d099      	beq.n	800698c <HAL_UART_IRQHandler+0x58>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006a58:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8006a5a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006a5c:	4798      	blx	r3
 8006a5e:	e795      	b.n	800698c <HAL_UART_IRQHandler+0x58>
            HAL_UART_ErrorCallback(huart);
 8006a60:	4620      	mov	r0, r4
 8006a62:	f7ff feed 	bl	8006840 <HAL_UART_ErrorCallback>
 8006a66:	e791      	b.n	800698c <HAL_UART_IRQHandler+0x58>
          HAL_UART_ErrorCallback(huart);
 8006a68:	4620      	mov	r0, r4
 8006a6a:	f7ff fee9 	bl	8006840 <HAL_UART_ErrorCallback>
 8006a6e:	e78d      	b.n	800698c <HAL_UART_IRQHandler+0x58>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006a70:	f013 0f10 	tst.w	r3, #16
 8006a74:	f43f af7c 	beq.w	8006970 <HAL_UART_IRQHandler+0x3c>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006a78:	f011 0f10 	tst.w	r1, #16
 8006a7c:	f43f af78 	beq.w	8006970 <HAL_UART_IRQHandler+0x3c>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006a80:	2300      	movs	r3, #0
 8006a82:	9301      	str	r3, [sp, #4]
 8006a84:	6813      	ldr	r3, [r2, #0]
 8006a86:	9301      	str	r3, [sp, #4]
 8006a88:	6853      	ldr	r3, [r2, #4]
 8006a8a:	9301      	str	r3, [sp, #4]
 8006a8c:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a8e:	6953      	ldr	r3, [r2, #20]
 8006a90:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006a94:	d050      	beq.n	8006b38 <HAL_UART_IRQHandler+0x204>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006a96:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8006a98:	6813      	ldr	r3, [r2, #0]
 8006a9a:	685b      	ldr	r3, [r3, #4]
 8006a9c:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	f43f af74 	beq.w	800698c <HAL_UART_IRQHandler+0x58>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006aa4:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8006aa6:	4299      	cmp	r1, r3
 8006aa8:	f67f af70 	bls.w	800698c <HAL_UART_IRQHandler+0x58>
        huart->RxXferCount = nb_remaining_rx_data;
 8006aac:	85e3      	strh	r3, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006aae:	6993      	ldr	r3, [r2, #24]
 8006ab0:	2b20      	cmp	r3, #32
 8006ab2:	d037      	beq.n	8006b24 <HAL_UART_IRQHandler+0x1f0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006ab4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ab6:	f102 030c 	add.w	r3, r2, #12
 8006aba:	e853 3f00 	ldrex	r3, [r3]
 8006abe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ac2:	320c      	adds	r2, #12
 8006ac4:	e842 3100 	strex	r1, r3, [r2]
 8006ac8:	2900      	cmp	r1, #0
 8006aca:	d1f3      	bne.n	8006ab4 <HAL_UART_IRQHandler+0x180>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006acc:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ace:	f102 0314 	add.w	r3, r2, #20
 8006ad2:	e853 3f00 	ldrex	r3, [r3]
 8006ad6:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ada:	3214      	adds	r2, #20
 8006adc:	e842 3100 	strex	r1, r3, [r2]
 8006ae0:	2900      	cmp	r1, #0
 8006ae2:	d1f3      	bne.n	8006acc <HAL_UART_IRQHandler+0x198>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ae4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ae6:	f102 0314 	add.w	r3, r2, #20
 8006aea:	e853 3f00 	ldrex	r3, [r3]
 8006aee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006af2:	3214      	adds	r2, #20
 8006af4:	e842 3100 	strex	r1, r3, [r2]
 8006af8:	2900      	cmp	r1, #0
 8006afa:	d1f3      	bne.n	8006ae4 <HAL_UART_IRQHandler+0x1b0>
          huart->RxState = HAL_UART_STATE_READY;
 8006afc:	2320      	movs	r3, #32
 8006afe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b02:	2300      	movs	r3, #0
 8006b04:	6323      	str	r3, [r4, #48]	; 0x30
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b06:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b08:	f102 030c 	add.w	r3, r2, #12
 8006b0c:	e853 3f00 	ldrex	r3, [r3]
 8006b10:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b14:	320c      	adds	r2, #12
 8006b16:	e842 3100 	strex	r1, r3, [r2]
 8006b1a:	2900      	cmp	r1, #0
 8006b1c:	d1f3      	bne.n	8006b06 <HAL_UART_IRQHandler+0x1d2>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006b1e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8006b20:	f7fc fd60 	bl	80035e4 <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006b24:	2302      	movs	r3, #2
 8006b26:	6363      	str	r3, [r4, #52]	; 0x34
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006b28:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8006b2a:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8006b2c:	1ac9      	subs	r1, r1, r3
 8006b2e:	b289      	uxth	r1, r1
 8006b30:	4620      	mov	r0, r4
 8006b32:	f7ff fe8e 	bl	8006852 <HAL_UARTEx_RxEventCallback>
 8006b36:	e729      	b.n	800698c <HAL_UART_IRQHandler+0x58>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006b38:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8006b3a:	b29a      	uxth	r2, r3
      if ((huart->RxXferCount > 0U)
 8006b3c:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8006b3e:	b29b      	uxth	r3, r3
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	f43f af23 	beq.w	800698c <HAL_UART_IRQHandler+0x58>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006b46:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8006b48:	1a89      	subs	r1, r1, r2
 8006b4a:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8006b4c:	2900      	cmp	r1, #0
 8006b4e:	f43f af1d 	beq.w	800698c <HAL_UART_IRQHandler+0x58>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b52:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b54:	f102 030c 	add.w	r3, r2, #12
 8006b58:	e853 3f00 	ldrex	r3, [r3]
 8006b5c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b60:	320c      	adds	r2, #12
 8006b62:	e842 3000 	strex	r0, r3, [r2]
 8006b66:	2800      	cmp	r0, #0
 8006b68:	d1f3      	bne.n	8006b52 <HAL_UART_IRQHandler+0x21e>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b6a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b6c:	f102 0314 	add.w	r3, r2, #20
 8006b70:	e853 3f00 	ldrex	r3, [r3]
 8006b74:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b78:	3214      	adds	r2, #20
 8006b7a:	e842 3000 	strex	r0, r3, [r2]
 8006b7e:	2800      	cmp	r0, #0
 8006b80:	d1f3      	bne.n	8006b6a <HAL_UART_IRQHandler+0x236>
        huart->RxState = HAL_UART_STATE_READY;
 8006b82:	2320      	movs	r3, #32
 8006b84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b88:	2300      	movs	r3, #0
 8006b8a:	6323      	str	r3, [r4, #48]	; 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b8c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b8e:	f102 030c 	add.w	r3, r2, #12
 8006b92:	e853 3f00 	ldrex	r3, [r3]
 8006b96:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b9a:	320c      	adds	r2, #12
 8006b9c:	e842 3000 	strex	r0, r3, [r2]
 8006ba0:	2800      	cmp	r0, #0
 8006ba2:	d1f3      	bne.n	8006b8c <HAL_UART_IRQHandler+0x258>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006ba4:	2302      	movs	r3, #2
 8006ba6:	6363      	str	r3, [r4, #52]	; 0x34
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006ba8:	4620      	mov	r0, r4
 8006baa:	f7ff fe52 	bl	8006852 <HAL_UARTEx_RxEventCallback>
 8006bae:	e6ed      	b.n	800698c <HAL_UART_IRQHandler+0x58>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006bb0:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8006bb4:	b2db      	uxtb	r3, r3
 8006bb6:	2b21      	cmp	r3, #33	; 0x21
 8006bb8:	f47f aee8 	bne.w	800698c <HAL_UART_IRQHandler+0x58>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006bbc:	68a3      	ldr	r3, [r4, #8]
 8006bbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bc2:	d016      	beq.n	8006bf2 <HAL_UART_IRQHandler+0x2be>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006bc4:	6a23      	ldr	r3, [r4, #32]
 8006bc6:	1c59      	adds	r1, r3, #1
 8006bc8:	6221      	str	r1, [r4, #32]
 8006bca:	781b      	ldrb	r3, [r3, #0]
 8006bcc:	6053      	str	r3, [r2, #4]
    if (--huart->TxXferCount == 0U)
 8006bce:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8006bd0:	3b01      	subs	r3, #1
 8006bd2:	b29b      	uxth	r3, r3
 8006bd4:	84e3      	strh	r3, [r4, #38]	; 0x26
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	f47f aed8 	bne.w	800698c <HAL_UART_IRQHandler+0x58>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006bdc:	6822      	ldr	r2, [r4, #0]
 8006bde:	68d3      	ldr	r3, [r2, #12]
 8006be0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006be4:	60d3      	str	r3, [r2, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006be6:	6822      	ldr	r2, [r4, #0]
 8006be8:	68d3      	ldr	r3, [r2, #12]
 8006bea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006bee:	60d3      	str	r3, [r2, #12]
 8006bf0:	e6cc      	b.n	800698c <HAL_UART_IRQHandler+0x58>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006bf2:	6923      	ldr	r3, [r4, #16]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d1e5      	bne.n	8006bc4 <HAL_UART_IRQHandler+0x290>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006bf8:	6a23      	ldr	r3, [r4, #32]
 8006bfa:	881b      	ldrh	r3, [r3, #0]
 8006bfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c00:	6053      	str	r3, [r2, #4]
      huart->pTxBuffPtr += 2U;
 8006c02:	6a23      	ldr	r3, [r4, #32]
 8006c04:	3302      	adds	r3, #2
 8006c06:	6223      	str	r3, [r4, #32]
 8006c08:	e7e1      	b.n	8006bce <HAL_UART_IRQHandler+0x29a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006c0a:	68d3      	ldr	r3, [r2, #12]
 8006c0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c10:	60d3      	str	r3, [r2, #12]
  huart->gState = HAL_UART_STATE_READY;
 8006c12:	2320      	movs	r3, #32
 8006c14:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  HAL_UART_TxCpltCallback(huart);
 8006c18:	4620      	mov	r0, r4
 8006c1a:	f7ff fe0f 	bl	800683c <HAL_UART_TxCpltCallback>
  return HAL_OK;
 8006c1e:	e6b5      	b.n	800698c <HAL_UART_IRQHandler+0x58>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006c20:	f013 0f08 	tst.w	r3, #8
 8006c24:	f47f aed5 	bne.w	80069d2 <HAL_UART_IRQHandler+0x9e>
 8006c28:	e6d7      	b.n	80069da <HAL_UART_IRQHandler+0xa6>
 8006c2a:	bf00      	nop
 8006c2c:	08006843 	.word	0x08006843

08006c30 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006c30:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8006c32:	f000 fa65 	bl	8007100 <vTaskStartScheduler>
  
  return osOK;
}
 8006c36:	2000      	movs	r0, #0
 8006c38:	bd08      	pop	{r3, pc}

08006c3a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006c3a:	b570      	push	{r4, r5, r6, lr}
 8006c3c:	b086      	sub	sp, #24
 8006c3e:	4684      	mov	ip, r0
 8006c40:	460b      	mov	r3, r1
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006c42:	6944      	ldr	r4, [r0, #20]
 8006c44:	b1bc      	cbz	r4, 8006c76 <osThreadCreate+0x3c>
 8006c46:	6985      	ldr	r5, [r0, #24]
 8006c48:	b1ad      	cbz	r5, 8006c76 <osThreadCreate+0x3c>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006c4a:	6840      	ldr	r0, [r0, #4]
 8006c4c:	f8dc 1000 	ldr.w	r1, [ip]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006c50:	f8dc 2010 	ldr.w	r2, [ip, #16]
 8006c54:	f9bc c008 	ldrsh.w	ip, [ip, #8]
  if (priority != osPriorityError) {
 8006c58:	f1bc 0f84 	cmp.w	ip, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 8006c5c:	bf14      	ite	ne
 8006c5e:	f10c 0603 	addne.w	r6, ip, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006c62:	2600      	moveq	r6, #0
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006c64:	9502      	str	r5, [sp, #8]
 8006c66:	9401      	str	r4, [sp, #4]
 8006c68:	9600      	str	r6, [sp, #0]
 8006c6a:	f000 f9dd 	bl	8007028 <xTaskCreateStatic>
 8006c6e:	9005      	str	r0, [sp, #20]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006c70:	9805      	ldr	r0, [sp, #20]
}
 8006c72:	b006      	add	sp, #24
 8006c74:	bd70      	pop	{r4, r5, r6, pc}
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006c76:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8006c7a:	f8dc 1000 	ldr.w	r1, [ip]
 8006c7e:	f8bc 2010 	ldrh.w	r2, [ip, #16]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006c82:	f9bc c008 	ldrsh.w	ip, [ip, #8]
  if (priority != osPriorityError) {
 8006c86:	f1bc 0f84 	cmp.w	ip, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 8006c8a:	bf14      	ite	ne
 8006c8c:	f10c 0403 	addne.w	r4, ip, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006c90:	2400      	moveq	r4, #0
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006c92:	ad05      	add	r5, sp, #20
 8006c94:	9501      	str	r5, [sp, #4]
 8006c96:	9400      	str	r4, [sp, #0]
 8006c98:	f000 fa00 	bl	800709c <xTaskCreate>
 8006c9c:	2801      	cmp	r0, #1
 8006c9e:	d0e7      	beq.n	8006c70 <osThreadCreate+0x36>
      return NULL;
 8006ca0:	2000      	movs	r0, #0
 8006ca2:	e7e6      	b.n	8006c72 <osThreadCreate+0x38>

08006ca4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006ca4:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006ca6:	2801      	cmp	r0, #1
 8006ca8:	bf38      	it	cc
 8006caa:	2001      	movcc	r0, #1
 8006cac:	f000 fb86 	bl	80073bc <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006cb0:	2000      	movs	r0, #0
 8006cb2:	bd08      	pop	{r3, pc}

08006cb4 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006cb4:	f100 0308 	add.w	r3, r0, #8
 8006cb8:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006cba:	f04f 32ff 	mov.w	r2, #4294967295
 8006cbe:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006cc0:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006cc2:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006cc8:	4770      	bx	lr

08006cca <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006cce:	4770      	bx	lr

08006cd0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8006cd0:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006cd2:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006cd4:	689a      	ldr	r2, [r3, #8]
 8006cd6:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006cd8:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006cda:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006cdc:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8006cde:	6803      	ldr	r3, [r0, #0]
 8006ce0:	3301      	adds	r3, #1
 8006ce2:	6003      	str	r3, [r0, #0]
}
 8006ce4:	4770      	bx	lr

08006ce6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006ce6:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006ce8:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006cea:	f1b5 3fff 	cmp.w	r5, #4294967295
 8006cee:	d011      	beq.n	8006d14 <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006cf0:	f100 0308 	add.w	r3, r0, #8
 8006cf4:	461c      	mov	r4, r3
 8006cf6:	685b      	ldr	r3, [r3, #4]
 8006cf8:	681a      	ldr	r2, [r3, #0]
 8006cfa:	42aa      	cmp	r2, r5
 8006cfc:	d9fa      	bls.n	8006cf4 <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006cfe:	6863      	ldr	r3, [r4, #4]
 8006d00:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006d02:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006d04:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8006d06:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006d08:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8006d0a:	6803      	ldr	r3, [r0, #0]
 8006d0c:	3301      	adds	r3, #1
 8006d0e:	6003      	str	r3, [r0, #0]
}
 8006d10:	bc30      	pop	{r4, r5}
 8006d12:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8006d14:	6904      	ldr	r4, [r0, #16]
 8006d16:	e7f2      	b.n	8006cfe <vListInsert+0x18>

08006d18 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8006d18:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006d1a:	6841      	ldr	r1, [r0, #4]
 8006d1c:	6882      	ldr	r2, [r0, #8]
 8006d1e:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006d20:	6841      	ldr	r1, [r0, #4]
 8006d22:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006d24:	685a      	ldr	r2, [r3, #4]
 8006d26:	4282      	cmp	r2, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006d28:	bf04      	itt	eq
 8006d2a:	6882      	ldreq	r2, [r0, #8]
 8006d2c:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8006d2e:	2200      	movs	r2, #0
 8006d30:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8006d32:	681a      	ldr	r2, [r3, #0]
 8006d34:	3a01      	subs	r2, #1
 8006d36:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006d38:	6818      	ldr	r0, [r3, #0]
}
 8006d3a:	4770      	bx	lr

08006d3c <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006d3c:	4b08      	ldr	r3, [pc, #32]	; (8006d60 <prvResetNextTaskUnblockTime+0x24>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	b923      	cbnz	r3, 8006d4e <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006d44:	4b07      	ldr	r3, [pc, #28]	; (8006d64 <prvResetNextTaskUnblockTime+0x28>)
 8006d46:	f04f 32ff 	mov.w	r2, #4294967295
 8006d4a:	601a      	str	r2, [r3, #0]
 8006d4c:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006d4e:	4b04      	ldr	r3, [pc, #16]	; (8006d60 <prvResetNextTaskUnblockTime+0x24>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006d54:	68db      	ldr	r3, [r3, #12]
 8006d56:	685a      	ldr	r2, [r3, #4]
 8006d58:	4b02      	ldr	r3, [pc, #8]	; (8006d64 <prvResetNextTaskUnblockTime+0x28>)
 8006d5a:	601a      	str	r2, [r3, #0]
	}
}
 8006d5c:	4770      	bx	lr
 8006d5e:	bf00      	nop
 8006d60:	20000d24 	.word	0x20000d24
 8006d64:	20000df8 	.word	0x20000df8

08006d68 <prvInitialiseNewTask>:
{
 8006d68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d6c:	4606      	mov	r6, r0
 8006d6e:	461f      	mov	r7, r3
 8006d70:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8006d74:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006d76:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8006d7a:	3a01      	subs	r2, #1
 8006d7c:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8006d7e:	eb05 0582 	add.w	r5, r5, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006d82:	f025 0507 	bic.w	r5, r5, #7
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006d86:	f101 3cff 	add.w	ip, r1, #4294967295
 8006d8a:	f104 0e33 	add.w	lr, r4, #51	; 0x33
 8006d8e:	310f      	adds	r1, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006d90:	f81c 2f01 	ldrb.w	r2, [ip, #1]!
 8006d94:	f80e 2f01 	strb.w	r2, [lr, #1]!
		if( pcName[ x ] == 0x00 )
 8006d98:	b10a      	cbz	r2, 8006d9e <prvInitialiseNewTask+0x36>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006d9a:	458c      	cmp	ip, r1
 8006d9c:	d1f8      	bne.n	8006d90 <prvInitialiseNewTask+0x28>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006d9e:	f04f 0a00 	mov.w	sl, #0
 8006da2:	f884 a043 	strb.w	sl, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006da6:	9b08      	ldr	r3, [sp, #32]
 8006da8:	2b06      	cmp	r3, #6
 8006daa:	bf28      	it	cs
 8006dac:	2306      	movcs	r3, #6
 8006dae:	4699      	mov	r9, r3
	pxNewTCB->uxPriority = uxPriority;
 8006db0:	62e3      	str	r3, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8006db2:	6463      	str	r3, [r4, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006db4:	f8c4 a048 	str.w	sl, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006db8:	1d20      	adds	r0, r4, #4
 8006dba:	f7ff ff86 	bl	8006cca <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006dbe:	f104 0018 	add.w	r0, r4, #24
 8006dc2:	f7ff ff82 	bl	8006cca <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006dc6:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006dc8:	f1c9 0307 	rsb	r3, r9, #7
 8006dcc:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006dce:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 8006dd0:	f8c4 a04c 	str.w	sl, [r4, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006dd4:	f884 a050 	strb.w	sl, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006dd8:	463a      	mov	r2, r7
 8006dda:	4631      	mov	r1, r6
 8006ddc:	4628      	mov	r0, r5
 8006dde:	f000 fb8d 	bl	80074fc <pxPortInitialiseStack>
 8006de2:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8006de4:	f1b8 0f00 	cmp.w	r8, #0
 8006de8:	d001      	beq.n	8006dee <prvInitialiseNewTask+0x86>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006dea:	f8c8 4000 	str.w	r4, [r8]
}
 8006dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08006df4 <prvAddNewTaskToReadyList>:
{
 8006df4:	b570      	push	{r4, r5, r6, lr}
 8006df6:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8006df8:	f000 fba4 	bl	8007544 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8006dfc:	4a2f      	ldr	r2, [pc, #188]	; (8006ebc <prvAddNewTaskToReadyList+0xc8>)
 8006dfe:	6813      	ldr	r3, [r2, #0]
 8006e00:	3301      	adds	r3, #1
 8006e02:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006e04:	4b2e      	ldr	r3, [pc, #184]	; (8006ec0 <prvAddNewTaskToReadyList+0xcc>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d033      	beq.n	8006e74 <prvAddNewTaskToReadyList+0x80>
			if( xSchedulerRunning == pdFALSE )
 8006e0c:	4b2d      	ldr	r3, [pc, #180]	; (8006ec4 <prvAddNewTaskToReadyList+0xd0>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	b93b      	cbnz	r3, 8006e22 <prvAddNewTaskToReadyList+0x2e>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006e12:	4b2b      	ldr	r3, [pc, #172]	; (8006ec0 <prvAddNewTaskToReadyList+0xcc>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e18:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006e1a:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8006e1c:	bf9c      	itt	ls
 8006e1e:	4b28      	ldrls	r3, [pc, #160]	; (8006ec0 <prvAddNewTaskToReadyList+0xcc>)
 8006e20:	601c      	strls	r4, [r3, #0]
		uxTaskNumber++;
 8006e22:	4a29      	ldr	r2, [pc, #164]	; (8006ec8 <prvAddNewTaskToReadyList+0xd4>)
 8006e24:	6813      	ldr	r3, [r2, #0]
 8006e26:	3301      	adds	r3, #1
 8006e28:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8006e2a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8006e2c:	4a27      	ldr	r2, [pc, #156]	; (8006ecc <prvAddNewTaskToReadyList+0xd8>)
 8006e2e:	6811      	ldr	r1, [r2, #0]
 8006e30:	2301      	movs	r3, #1
 8006e32:	4083      	lsls	r3, r0
 8006e34:	430b      	orrs	r3, r1
 8006e36:	6013      	str	r3, [r2, #0]
 8006e38:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006e3c:	1d21      	adds	r1, r4, #4
 8006e3e:	4b24      	ldr	r3, [pc, #144]	; (8006ed0 <prvAddNewTaskToReadyList+0xdc>)
 8006e40:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006e44:	f7ff ff44 	bl	8006cd0 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8006e48:	f000 fb9e 	bl	8007588 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8006e4c:	4b1d      	ldr	r3, [pc, #116]	; (8006ec4 <prvAddNewTaskToReadyList+0xd0>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	b17b      	cbz	r3, 8006e72 <prvAddNewTaskToReadyList+0x7e>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006e52:	4b1b      	ldr	r3, [pc, #108]	; (8006ec0 <prvAddNewTaskToReadyList+0xcc>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e58:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006e5a:	429a      	cmp	r2, r3
 8006e5c:	d209      	bcs.n	8006e72 <prvAddNewTaskToReadyList+0x7e>
			taskYIELD_IF_USING_PREEMPTION();
 8006e5e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006e62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e66:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006e6a:	f3bf 8f4f 	dsb	sy
 8006e6e:	f3bf 8f6f 	isb	sy
}
 8006e72:	bd70      	pop	{r4, r5, r6, pc}
			pxCurrentTCB = pxNewTCB;
 8006e74:	4b12      	ldr	r3, [pc, #72]	; (8006ec0 <prvAddNewTaskToReadyList+0xcc>)
 8006e76:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006e78:	6813      	ldr	r3, [r2, #0]
 8006e7a:	2b01      	cmp	r3, #1
 8006e7c:	d1d1      	bne.n	8006e22 <prvAddNewTaskToReadyList+0x2e>
 8006e7e:	4d14      	ldr	r5, [pc, #80]	; (8006ed0 <prvAddNewTaskToReadyList+0xdc>)
 8006e80:	f105 068c 	add.w	r6, r5, #140	; 0x8c
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006e84:	4628      	mov	r0, r5
 8006e86:	f7ff ff15 	bl	8006cb4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006e8a:	3514      	adds	r5, #20
 8006e8c:	42b5      	cmp	r5, r6
 8006e8e:	d1f9      	bne.n	8006e84 <prvAddNewTaskToReadyList+0x90>
	vListInitialise( &xDelayedTaskList1 );
 8006e90:	4e10      	ldr	r6, [pc, #64]	; (8006ed4 <prvAddNewTaskToReadyList+0xe0>)
 8006e92:	4630      	mov	r0, r6
 8006e94:	f7ff ff0e 	bl	8006cb4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006e98:	4d0f      	ldr	r5, [pc, #60]	; (8006ed8 <prvAddNewTaskToReadyList+0xe4>)
 8006e9a:	4628      	mov	r0, r5
 8006e9c:	f7ff ff0a 	bl	8006cb4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006ea0:	480e      	ldr	r0, [pc, #56]	; (8006edc <prvAddNewTaskToReadyList+0xe8>)
 8006ea2:	f7ff ff07 	bl	8006cb4 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8006ea6:	480e      	ldr	r0, [pc, #56]	; (8006ee0 <prvAddNewTaskToReadyList+0xec>)
 8006ea8:	f7ff ff04 	bl	8006cb4 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8006eac:	480d      	ldr	r0, [pc, #52]	; (8006ee4 <prvAddNewTaskToReadyList+0xf0>)
 8006eae:	f7ff ff01 	bl	8006cb4 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8006eb2:	4b0d      	ldr	r3, [pc, #52]	; (8006ee8 <prvAddNewTaskToReadyList+0xf4>)
 8006eb4:	601e      	str	r6, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006eb6:	4b0d      	ldr	r3, [pc, #52]	; (8006eec <prvAddNewTaskToReadyList+0xf8>)
 8006eb8:	601d      	str	r5, [r3, #0]
}
 8006eba:	e7b2      	b.n	8006e22 <prvAddNewTaskToReadyList+0x2e>
 8006ebc:	20000db8 	.word	0x20000db8
 8006ec0:	20000d20 	.word	0x20000d20
 8006ec4:	20000e14 	.word	0x20000e14
 8006ec8:	20000dc8 	.word	0x20000dc8
 8006ecc:	20000dcc 	.word	0x20000dcc
 8006ed0:	20000d2c 	.word	0x20000d2c
 8006ed4:	20000dd0 	.word	0x20000dd0
 8006ed8:	20000de4 	.word	0x20000de4
 8006edc:	20000e00 	.word	0x20000e00
 8006ee0:	20000e2c 	.word	0x20000e2c
 8006ee4:	20000e18 	.word	0x20000e18
 8006ee8:	20000d24 	.word	0x20000d24
 8006eec:	20000d28 	.word	0x20000d28

08006ef0 <prvDeleteTCB>:
	{
 8006ef0:	b510      	push	{r4, lr}
 8006ef2:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006ef4:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8006ef8:	b163      	cbz	r3, 8006f14 <prvDeleteTCB+0x24>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006efa:	2b01      	cmp	r3, #1
 8006efc:	d011      	beq.n	8006f22 <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006efe:	2b02      	cmp	r3, #2
 8006f00:	d00e      	beq.n	8006f20 <prvDeleteTCB+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f06:	f383 8811 	msr	BASEPRI, r3
 8006f0a:	f3bf 8f6f 	isb	sy
 8006f0e:	f3bf 8f4f 	dsb	sy
 8006f12:	e7fe      	b.n	8006f12 <prvDeleteTCB+0x22>
				vPortFree( pxTCB->pxStack );
 8006f14:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8006f16:	f000 fcc7 	bl	80078a8 <vPortFree>
				vPortFree( pxTCB );
 8006f1a:	4620      	mov	r0, r4
 8006f1c:	f000 fcc4 	bl	80078a8 <vPortFree>
	}
 8006f20:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 8006f22:	f000 fcc1 	bl	80078a8 <vPortFree>
 8006f26:	e7fb      	b.n	8006f20 <prvDeleteTCB+0x30>

08006f28 <prvIdleTask>:
{
 8006f28:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006f2a:	4c15      	ldr	r4, [pc, #84]	; (8006f80 <prvIdleTask+0x58>)
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006f2c:	4f15      	ldr	r7, [pc, #84]	; (8006f84 <prvIdleTask+0x5c>)
				--uxCurrentNumberOfTasks;
 8006f2e:	4e16      	ldr	r6, [pc, #88]	; (8006f88 <prvIdleTask+0x60>)
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006f30:	f8df 8058 	ldr.w	r8, [pc, #88]	; 8006f8c <prvIdleTask+0x64>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006f34:	6823      	ldr	r3, [r4, #0]
 8006f36:	b1a3      	cbz	r3, 8006f62 <prvIdleTask+0x3a>
			taskENTER_CRITICAL();
 8006f38:	f000 fb04 	bl	8007544 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f40:	1d28      	adds	r0, r5, #4
 8006f42:	f7ff fee9 	bl	8006d18 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006f46:	6833      	ldr	r3, [r6, #0]
 8006f48:	3b01      	subs	r3, #1
 8006f4a:	6033      	str	r3, [r6, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006f4c:	6823      	ldr	r3, [r4, #0]
 8006f4e:	3b01      	subs	r3, #1
 8006f50:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8006f52:	f000 fb19 	bl	8007588 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8006f56:	4628      	mov	r0, r5
 8006f58:	f7ff ffca 	bl	8006ef0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006f5c:	6823      	ldr	r3, [r4, #0]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d1ea      	bne.n	8006f38 <prvIdleTask+0x10>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006f62:	f8d8 3000 	ldr.w	r3, [r8]
 8006f66:	2b01      	cmp	r3, #1
 8006f68:	d9e4      	bls.n	8006f34 <prvIdleTask+0xc>
				taskYIELD();
 8006f6a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006f6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f72:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006f76:	f3bf 8f4f 	dsb	sy
 8006f7a:	f3bf 8f6f 	isb	sy
 8006f7e:	e7d9      	b.n	8006f34 <prvIdleTask+0xc>
 8006f80:	20000dbc 	.word	0x20000dbc
 8006f84:	20000e2c 	.word	0x20000e2c
 8006f88:	20000db8 	.word	0x20000db8
 8006f8c:	20000d2c 	.word	0x20000d2c

08006f90 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006f90:	b570      	push	{r4, r5, r6, lr}
 8006f92:	4604      	mov	r4, r0
 8006f94:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006f96:	4b1d      	ldr	r3, [pc, #116]	; (800700c <prvAddCurrentTaskToDelayedList+0x7c>)
 8006f98:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f9a:	4b1d      	ldr	r3, [pc, #116]	; (8007010 <prvAddCurrentTaskToDelayedList+0x80>)
 8006f9c:	6818      	ldr	r0, [r3, #0]
 8006f9e:	3004      	adds	r0, #4
 8006fa0:	f7ff feba 	bl	8006d18 <uxListRemove>
 8006fa4:	b948      	cbnz	r0, 8006fba <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8006fa6:	4b1a      	ldr	r3, [pc, #104]	; (8007010 <prvAddCurrentTaskToDelayedList+0x80>)
 8006fa8:	681a      	ldr	r2, [r3, #0]
 8006faa:	491a      	ldr	r1, [pc, #104]	; (8007014 <prvAddCurrentTaskToDelayedList+0x84>)
 8006fac:	680b      	ldr	r3, [r1, #0]
 8006fae:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 8006fb0:	2201      	movs	r2, #1
 8006fb2:	4082      	lsls	r2, r0
 8006fb4:	ea23 0302 	bic.w	r3, r3, r2
 8006fb8:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006fba:	f1b4 3fff 	cmp.w	r4, #4294967295
 8006fbe:	d00d      	beq.n	8006fdc <prvAddCurrentTaskToDelayedList+0x4c>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006fc0:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006fc2:	4b13      	ldr	r3, [pc, #76]	; (8007010 <prvAddCurrentTaskToDelayedList+0x80>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8006fc8:	42a6      	cmp	r6, r4
 8006fca:	d910      	bls.n	8006fee <prvAddCurrentTaskToDelayedList+0x5e>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006fcc:	4b12      	ldr	r3, [pc, #72]	; (8007018 <prvAddCurrentTaskToDelayedList+0x88>)
 8006fce:	6818      	ldr	r0, [r3, #0]
 8006fd0:	4b0f      	ldr	r3, [pc, #60]	; (8007010 <prvAddCurrentTaskToDelayedList+0x80>)
 8006fd2:	6819      	ldr	r1, [r3, #0]
 8006fd4:	3104      	adds	r1, #4
 8006fd6:	f7ff fe86 	bl	8006ce6 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006fda:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006fdc:	2d00      	cmp	r5, #0
 8006fde:	d0ef      	beq.n	8006fc0 <prvAddCurrentTaskToDelayedList+0x30>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006fe0:	4b0b      	ldr	r3, [pc, #44]	; (8007010 <prvAddCurrentTaskToDelayedList+0x80>)
 8006fe2:	6819      	ldr	r1, [r3, #0]
 8006fe4:	3104      	adds	r1, #4
 8006fe6:	480d      	ldr	r0, [pc, #52]	; (800701c <prvAddCurrentTaskToDelayedList+0x8c>)
 8006fe8:	f7ff fe72 	bl	8006cd0 <vListInsertEnd>
 8006fec:	e7f5      	b.n	8006fda <prvAddCurrentTaskToDelayedList+0x4a>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006fee:	4b0c      	ldr	r3, [pc, #48]	; (8007020 <prvAddCurrentTaskToDelayedList+0x90>)
 8006ff0:	6818      	ldr	r0, [r3, #0]
 8006ff2:	4b07      	ldr	r3, [pc, #28]	; (8007010 <prvAddCurrentTaskToDelayedList+0x80>)
 8006ff4:	6819      	ldr	r1, [r3, #0]
 8006ff6:	3104      	adds	r1, #4
 8006ff8:	f7ff fe75 	bl	8006ce6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006ffc:	4b09      	ldr	r3, [pc, #36]	; (8007024 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	42a3      	cmp	r3, r4
					xNextTaskUnblockTime = xTimeToWake;
 8007002:	bf84      	itt	hi
 8007004:	4b07      	ldrhi	r3, [pc, #28]	; (8007024 <prvAddCurrentTaskToDelayedList+0x94>)
 8007006:	601c      	strhi	r4, [r3, #0]
}
 8007008:	e7e7      	b.n	8006fda <prvAddCurrentTaskToDelayedList+0x4a>
 800700a:	bf00      	nop
 800700c:	20000e40 	.word	0x20000e40
 8007010:	20000d20 	.word	0x20000d20
 8007014:	20000dcc 	.word	0x20000dcc
 8007018:	20000d28 	.word	0x20000d28
 800701c:	20000e18 	.word	0x20000e18
 8007020:	20000d24 	.word	0x20000d24
 8007024:	20000df8 	.word	0x20000df8

08007028 <xTaskCreateStatic>:
	{
 8007028:	b530      	push	{r4, r5, lr}
 800702a:	b087      	sub	sp, #28
 800702c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 800702e:	b17c      	cbz	r4, 8007050 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007030:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007032:	b1b5      	cbz	r5, 8007062 <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 8007034:	2554      	movs	r5, #84	; 0x54
 8007036:	9504      	str	r5, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007038:	9d04      	ldr	r5, [sp, #16]
 800703a:	2d54      	cmp	r5, #84	; 0x54
 800703c:	d01a      	beq.n	8007074 <xTaskCreateStatic+0x4c>
 800703e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007042:	f383 8811 	msr	BASEPRI, r3
 8007046:	f3bf 8f6f 	isb	sy
 800704a:	f3bf 8f4f 	dsb	sy
 800704e:	e7fe      	b.n	800704e <xTaskCreateStatic+0x26>
 8007050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007054:	f383 8811 	msr	BASEPRI, r3
 8007058:	f3bf 8f6f 	isb	sy
 800705c:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 8007060:	e7fe      	b.n	8007060 <xTaskCreateStatic+0x38>
 8007062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007066:	f383 8811 	msr	BASEPRI, r3
 800706a:	f3bf 8f6f 	isb	sy
 800706e:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 8007072:	e7fe      	b.n	8007072 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007074:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007076:	632c      	str	r4, [r5, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007078:	2402      	movs	r4, #2
 800707a:	f885 4051 	strb.w	r4, [r5, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800707e:	2400      	movs	r4, #0
 8007080:	9403      	str	r4, [sp, #12]
 8007082:	9502      	str	r5, [sp, #8]
 8007084:	ac05      	add	r4, sp, #20
 8007086:	9401      	str	r4, [sp, #4]
 8007088:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800708a:	9400      	str	r4, [sp, #0]
 800708c:	f7ff fe6c 	bl	8006d68 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007090:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007092:	f7ff feaf 	bl	8006df4 <prvAddNewTaskToReadyList>
	}
 8007096:	9805      	ldr	r0, [sp, #20]
 8007098:	b007      	add	sp, #28
 800709a:	bd30      	pop	{r4, r5, pc}

0800709c <xTaskCreate>:
	{
 800709c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80070a0:	b085      	sub	sp, #20
 80070a2:	4607      	mov	r7, r0
 80070a4:	4688      	mov	r8, r1
 80070a6:	4614      	mov	r4, r2
 80070a8:	461e      	mov	r6, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80070aa:	0090      	lsls	r0, r2, #2
 80070ac:	f000 fb66 	bl	800777c <pvPortMalloc>
			if( pxStack != NULL )
 80070b0:	b308      	cbz	r0, 80070f6 <xTaskCreate+0x5a>
 80070b2:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80070b4:	2054      	movs	r0, #84	; 0x54
 80070b6:	f000 fb61 	bl	800777c <pvPortMalloc>
				if( pxNewTCB != NULL )
 80070ba:	4605      	mov	r5, r0
 80070bc:	b1a8      	cbz	r0, 80070ea <xTaskCreate+0x4e>
					pxNewTCB->pxStack = pxStack;
 80070be:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80070c2:	2300      	movs	r3, #0
 80070c4:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80070c8:	9303      	str	r3, [sp, #12]
 80070ca:	9002      	str	r0, [sp, #8]
 80070cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80070ce:	9301      	str	r3, [sp, #4]
 80070d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80070d2:	9300      	str	r3, [sp, #0]
 80070d4:	4633      	mov	r3, r6
 80070d6:	4622      	mov	r2, r4
 80070d8:	4641      	mov	r1, r8
 80070da:	4638      	mov	r0, r7
 80070dc:	f7ff fe44 	bl	8006d68 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80070e0:	4628      	mov	r0, r5
 80070e2:	f7ff fe87 	bl	8006df4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80070e6:	2001      	movs	r0, #1
 80070e8:	e007      	b.n	80070fa <xTaskCreate+0x5e>
					vPortFree( pxStack );
 80070ea:	4648      	mov	r0, r9
 80070ec:	f000 fbdc 	bl	80078a8 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80070f0:	f04f 30ff 	mov.w	r0, #4294967295
 80070f4:	e001      	b.n	80070fa <xTaskCreate+0x5e>
 80070f6:	f04f 30ff 	mov.w	r0, #4294967295
	}
 80070fa:	b005      	add	sp, #20
 80070fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08007100 <vTaskStartScheduler>:
{
 8007100:	b510      	push	{r4, lr}
 8007102:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007104:	2400      	movs	r4, #0
 8007106:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007108:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800710a:	aa07      	add	r2, sp, #28
 800710c:	a906      	add	r1, sp, #24
 800710e:	a805      	add	r0, sp, #20
 8007110:	f7fa ff92 	bl	8002038 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007114:	9b05      	ldr	r3, [sp, #20]
 8007116:	9302      	str	r3, [sp, #8]
 8007118:	9b06      	ldr	r3, [sp, #24]
 800711a:	9301      	str	r3, [sp, #4]
 800711c:	9400      	str	r4, [sp, #0]
 800711e:	4623      	mov	r3, r4
 8007120:	9a07      	ldr	r2, [sp, #28]
 8007122:	490d      	ldr	r1, [pc, #52]	; (8007158 <vTaskStartScheduler+0x58>)
 8007124:	480d      	ldr	r0, [pc, #52]	; (800715c <vTaskStartScheduler+0x5c>)
 8007126:	f7ff ff7f 	bl	8007028 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 800712a:	b190      	cbz	r0, 8007152 <vTaskStartScheduler+0x52>
 800712c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007130:	f383 8811 	msr	BASEPRI, r3
 8007134:	f3bf 8f6f 	isb	sy
 8007138:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 800713c:	4b08      	ldr	r3, [pc, #32]	; (8007160 <vTaskStartScheduler+0x60>)
 800713e:	f04f 32ff 	mov.w	r2, #4294967295
 8007142:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007144:	4b07      	ldr	r3, [pc, #28]	; (8007164 <vTaskStartScheduler+0x64>)
 8007146:	2201      	movs	r2, #1
 8007148:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800714a:	4b07      	ldr	r3, [pc, #28]	; (8007168 <vTaskStartScheduler+0x68>)
 800714c:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 800714e:	f000 fa83 	bl	8007658 <xPortStartScheduler>
}
 8007152:	b008      	add	sp, #32
 8007154:	bd10      	pop	{r4, pc}
 8007156:	bf00      	nop
 8007158:	0800cae4 	.word	0x0800cae4
 800715c:	08006f29 	.word	0x08006f29
 8007160:	20000df8 	.word	0x20000df8
 8007164:	20000e14 	.word	0x20000e14
 8007168:	20000e40 	.word	0x20000e40

0800716c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800716c:	4a02      	ldr	r2, [pc, #8]	; (8007178 <vTaskSuspendAll+0xc>)
 800716e:	6813      	ldr	r3, [r2, #0]
 8007170:	3301      	adds	r3, #1
 8007172:	6013      	str	r3, [r2, #0]
}
 8007174:	4770      	bx	lr
 8007176:	bf00      	nop
 8007178:	20000dc4 	.word	0x20000dc4

0800717c <xTaskIncrementTick>:
{
 800717c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007180:	4b41      	ldr	r3, [pc, #260]	; (8007288 <xTaskIncrementTick+0x10c>)
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d171      	bne.n	800726c <xTaskIncrementTick+0xf0>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007188:	4b40      	ldr	r3, [pc, #256]	; (800728c <xTaskIncrementTick+0x110>)
 800718a:	681e      	ldr	r6, [r3, #0]
 800718c:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
 800718e:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007190:	b9c6      	cbnz	r6, 80071c4 <xTaskIncrementTick+0x48>
			taskSWITCH_DELAYED_LISTS();
 8007192:	4b3f      	ldr	r3, [pc, #252]	; (8007290 <xTaskIncrementTick+0x114>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	b143      	cbz	r3, 80071ac <xTaskIncrementTick+0x30>
 800719a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800719e:	f383 8811 	msr	BASEPRI, r3
 80071a2:	f3bf 8f6f 	isb	sy
 80071a6:	f3bf 8f4f 	dsb	sy
 80071aa:	e7fe      	b.n	80071aa <xTaskIncrementTick+0x2e>
 80071ac:	4a38      	ldr	r2, [pc, #224]	; (8007290 <xTaskIncrementTick+0x114>)
 80071ae:	6811      	ldr	r1, [r2, #0]
 80071b0:	4b38      	ldr	r3, [pc, #224]	; (8007294 <xTaskIncrementTick+0x118>)
 80071b2:	6818      	ldr	r0, [r3, #0]
 80071b4:	6010      	str	r0, [r2, #0]
 80071b6:	6019      	str	r1, [r3, #0]
 80071b8:	4a37      	ldr	r2, [pc, #220]	; (8007298 <xTaskIncrementTick+0x11c>)
 80071ba:	6813      	ldr	r3, [r2, #0]
 80071bc:	3301      	adds	r3, #1
 80071be:	6013      	str	r3, [r2, #0]
 80071c0:	f7ff fdbc 	bl	8006d3c <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 80071c4:	4b35      	ldr	r3, [pc, #212]	; (800729c <xTaskIncrementTick+0x120>)
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	42b3      	cmp	r3, r6
 80071ca:	d842      	bhi.n	8007252 <xTaskIncrementTick+0xd6>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80071cc:	4b30      	ldr	r3, [pc, #192]	; (8007290 <xTaskIncrementTick+0x114>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	b13b      	cbz	r3, 80071e4 <xTaskIncrementTick+0x68>
BaseType_t xSwitchRequired = pdFALSE;
 80071d4:	2500      	movs	r5, #0
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80071d6:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8007290 <xTaskIncrementTick+0x114>
					prvAddTaskToReadyList( pxTCB );
 80071da:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 80072a0 <xTaskIncrementTick+0x124>
 80071de:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80072a4 <xTaskIncrementTick+0x128>
 80071e2:	e023      	b.n	800722c <xTaskIncrementTick+0xb0>
BaseType_t xSwitchRequired = pdFALSE;
 80071e4:	2500      	movs	r5, #0
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80071e6:	4b2d      	ldr	r3, [pc, #180]	; (800729c <xTaskIncrementTick+0x120>)
 80071e8:	f04f 32ff 	mov.w	r2, #4294967295
 80071ec:	601a      	str	r2, [r3, #0]
					break;
 80071ee:	e031      	b.n	8007254 <xTaskIncrementTick+0xd8>
						xNextTaskUnblockTime = xItemValue;
 80071f0:	4a2a      	ldr	r2, [pc, #168]	; (800729c <xTaskIncrementTick+0x120>)
 80071f2:	6013      	str	r3, [r2, #0]
						break;
 80071f4:	e02e      	b.n	8007254 <xTaskIncrementTick+0xd8>
					prvAddTaskToReadyList( pxTCB );
 80071f6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80071f8:	f8d9 2000 	ldr.w	r2, [r9]
 80071fc:	2301      	movs	r3, #1
 80071fe:	4083      	lsls	r3, r0
 8007200:	4313      	orrs	r3, r2
 8007202:	f8c9 3000 	str.w	r3, [r9]
 8007206:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800720a:	4639      	mov	r1, r7
 800720c:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
 8007210:	f7ff fd5e 	bl	8006cd0 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007214:	4b24      	ldr	r3, [pc, #144]	; (80072a8 <xTaskIncrementTick+0x12c>)
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800721a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 800721c:	429a      	cmp	r2, r3
 800721e:	bf28      	it	cs
 8007220:	2501      	movcs	r5, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007222:	f8d8 3000 	ldr.w	r3, [r8]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d0dc      	beq.n	80071e6 <xTaskIncrementTick+0x6a>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800722c:	f8d8 3000 	ldr.w	r3, [r8]
 8007230:	68db      	ldr	r3, [r3, #12]
 8007232:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007234:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 8007236:	429e      	cmp	r6, r3
 8007238:	d3da      	bcc.n	80071f0 <xTaskIncrementTick+0x74>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800723a:	1d27      	adds	r7, r4, #4
 800723c:	4638      	mov	r0, r7
 800723e:	f7ff fd6b 	bl	8006d18 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007242:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007244:	2b00      	cmp	r3, #0
 8007246:	d0d6      	beq.n	80071f6 <xTaskIncrementTick+0x7a>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007248:	f104 0018 	add.w	r0, r4, #24
 800724c:	f7ff fd64 	bl	8006d18 <uxListRemove>
 8007250:	e7d1      	b.n	80071f6 <xTaskIncrementTick+0x7a>
BaseType_t xSwitchRequired = pdFALSE;
 8007252:	2500      	movs	r5, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007254:	4b14      	ldr	r3, [pc, #80]	; (80072a8 <xTaskIncrementTick+0x12c>)
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800725a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800725e:	009b      	lsls	r3, r3, #2
 8007260:	4a10      	ldr	r2, [pc, #64]	; (80072a4 <xTaskIncrementTick+0x128>)
 8007262:	58d3      	ldr	r3, [r2, r3]
				xSwitchRequired = pdTRUE;
 8007264:	2b02      	cmp	r3, #2
 8007266:	bf28      	it	cs
 8007268:	2501      	movcs	r5, #1
 800726a:	e004      	b.n	8007276 <xTaskIncrementTick+0xfa>
		++uxPendedTicks;
 800726c:	4a0f      	ldr	r2, [pc, #60]	; (80072ac <xTaskIncrementTick+0x130>)
 800726e:	6813      	ldr	r3, [r2, #0]
 8007270:	3301      	adds	r3, #1
 8007272:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8007274:	2500      	movs	r5, #0
		if( xYieldPending != pdFALSE )
 8007276:	4b0e      	ldr	r3, [pc, #56]	; (80072b0 <xTaskIncrementTick+0x134>)
 8007278:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
 800727a:	2b00      	cmp	r3, #0
}
 800727c:	bf0c      	ite	eq
 800727e:	4628      	moveq	r0, r5
 8007280:	2001      	movne	r0, #1
 8007282:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007286:	bf00      	nop
 8007288:	20000dc4 	.word	0x20000dc4
 800728c:	20000e40 	.word	0x20000e40
 8007290:	20000d24 	.word	0x20000d24
 8007294:	20000d28 	.word	0x20000d28
 8007298:	20000dfc 	.word	0x20000dfc
 800729c:	20000df8 	.word	0x20000df8
 80072a0:	20000dcc 	.word	0x20000dcc
 80072a4:	20000d2c 	.word	0x20000d2c
 80072a8:	20000d20 	.word	0x20000d20
 80072ac:	20000dc0 	.word	0x20000dc0
 80072b0:	20000e44 	.word	0x20000e44

080072b4 <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
 80072b4:	4b39      	ldr	r3, [pc, #228]	; (800739c <xTaskResumeAll+0xe8>)
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	b943      	cbnz	r3, 80072cc <xTaskResumeAll+0x18>
 80072ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072be:	f383 8811 	msr	BASEPRI, r3
 80072c2:	f3bf 8f6f 	isb	sy
 80072c6:	f3bf 8f4f 	dsb	sy
 80072ca:	e7fe      	b.n	80072ca <xTaskResumeAll+0x16>
{
 80072cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	taskENTER_CRITICAL();
 80072d0:	f000 f938 	bl	8007544 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80072d4:	4b31      	ldr	r3, [pc, #196]	; (800739c <xTaskResumeAll+0xe8>)
 80072d6:	681a      	ldr	r2, [r3, #0]
 80072d8:	3a01      	subs	r2, #1
 80072da:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d14a      	bne.n	8007378 <xTaskResumeAll+0xc4>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80072e2:	4b2f      	ldr	r3, [pc, #188]	; (80073a0 <xTaskResumeAll+0xec>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d04c      	beq.n	8007384 <xTaskResumeAll+0xd0>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80072ea:	4b2e      	ldr	r3, [pc, #184]	; (80073a4 <xTaskResumeAll+0xf0>)
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d04c      	beq.n	800738c <xTaskResumeAll+0xd8>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80072f2:	4f2c      	ldr	r7, [pc, #176]	; (80073a4 <xTaskResumeAll+0xf0>)
					prvAddTaskToReadyList( pxTCB );
 80072f4:	4e2c      	ldr	r6, [pc, #176]	; (80073a8 <xTaskResumeAll+0xf4>)
 80072f6:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 80073ac <xTaskResumeAll+0xf8>
 80072fa:	e002      	b.n	8007302 <xTaskResumeAll+0x4e>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d042      	beq.n	8007388 <xTaskResumeAll+0xd4>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007306:	f104 0018 	add.w	r0, r4, #24
 800730a:	f7ff fd05 	bl	8006d18 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800730e:	1d25      	adds	r5, r4, #4
 8007310:	4628      	mov	r0, r5
 8007312:	f7ff fd01 	bl	8006d18 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007316:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8007318:	6832      	ldr	r2, [r6, #0]
 800731a:	2301      	movs	r3, #1
 800731c:	4083      	lsls	r3, r0
 800731e:	4313      	orrs	r3, r2
 8007320:	6033      	str	r3, [r6, #0]
 8007322:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8007326:	4629      	mov	r1, r5
 8007328:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 800732c:	f7ff fcd0 	bl	8006cd0 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007330:	4b1f      	ldr	r3, [pc, #124]	; (80073b0 <xTaskResumeAll+0xfc>)
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007338:	429a      	cmp	r2, r3
 800733a:	d3df      	bcc.n	80072fc <xTaskResumeAll+0x48>
						xYieldPending = pdTRUE;
 800733c:	4b1d      	ldr	r3, [pc, #116]	; (80073b4 <xTaskResumeAll+0x100>)
 800733e:	2201      	movs	r2, #1
 8007340:	601a      	str	r2, [r3, #0]
 8007342:	e7db      	b.n	80072fc <xTaskResumeAll+0x48>
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007344:	3c01      	subs	r4, #1
 8007346:	d005      	beq.n	8007354 <xTaskResumeAll+0xa0>
							if( xTaskIncrementTick() != pdFALSE )
 8007348:	f7ff ff18 	bl	800717c <xTaskIncrementTick>
 800734c:	2800      	cmp	r0, #0
 800734e:	d0f9      	beq.n	8007344 <xTaskResumeAll+0x90>
								xYieldPending = pdTRUE;
 8007350:	6035      	str	r5, [r6, #0]
 8007352:	e7f7      	b.n	8007344 <xTaskResumeAll+0x90>
						uxPendedTicks = 0;
 8007354:	4b18      	ldr	r3, [pc, #96]	; (80073b8 <xTaskResumeAll+0x104>)
 8007356:	2200      	movs	r2, #0
 8007358:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
 800735a:	4b16      	ldr	r3, [pc, #88]	; (80073b4 <xTaskResumeAll+0x100>)
 800735c:	681c      	ldr	r4, [r3, #0]
 800735e:	b164      	cbz	r4, 800737a <xTaskResumeAll+0xc6>
					taskYIELD_IF_USING_PREEMPTION();
 8007360:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007364:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007368:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800736c:	f3bf 8f4f 	dsb	sy
 8007370:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8007374:	2401      	movs	r4, #1
 8007376:	e000      	b.n	800737a <xTaskResumeAll+0xc6>
BaseType_t xAlreadyYielded = pdFALSE;
 8007378:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800737a:	f000 f905 	bl	8007588 <vPortExitCritical>
}
 800737e:	4620      	mov	r0, r4
 8007380:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
BaseType_t xAlreadyYielded = pdFALSE;
 8007384:	2400      	movs	r4, #0
 8007386:	e7f8      	b.n	800737a <xTaskResumeAll+0xc6>
					prvResetNextTaskUnblockTime();
 8007388:	f7ff fcd8 	bl	8006d3c <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800738c:	4b0a      	ldr	r3, [pc, #40]	; (80073b8 <xTaskResumeAll+0x104>)
 800738e:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007390:	2c00      	cmp	r4, #0
 8007392:	d0e2      	beq.n	800735a <xTaskResumeAll+0xa6>
								xYieldPending = pdTRUE;
 8007394:	4e07      	ldr	r6, [pc, #28]	; (80073b4 <xTaskResumeAll+0x100>)
 8007396:	2501      	movs	r5, #1
 8007398:	e7d6      	b.n	8007348 <xTaskResumeAll+0x94>
 800739a:	bf00      	nop
 800739c:	20000dc4 	.word	0x20000dc4
 80073a0:	20000db8 	.word	0x20000db8
 80073a4:	20000e00 	.word	0x20000e00
 80073a8:	20000dcc 	.word	0x20000dcc
 80073ac:	20000d2c 	.word	0x20000d2c
 80073b0:	20000d20 	.word	0x20000d20
 80073b4:	20000e44 	.word	0x20000e44
 80073b8:	20000dc0 	.word	0x20000dc0

080073bc <vTaskDelay>:
	{
 80073bc:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 80073be:	b1a8      	cbz	r0, 80073ec <vTaskDelay+0x30>
 80073c0:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 80073c2:	4b10      	ldr	r3, [pc, #64]	; (8007404 <vTaskDelay+0x48>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	b143      	cbz	r3, 80073da <vTaskDelay+0x1e>
 80073c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073cc:	f383 8811 	msr	BASEPRI, r3
 80073d0:	f3bf 8f6f 	isb	sy
 80073d4:	f3bf 8f4f 	dsb	sy
 80073d8:	e7fe      	b.n	80073d8 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 80073da:	f7ff fec7 	bl	800716c <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80073de:	2100      	movs	r1, #0
 80073e0:	4620      	mov	r0, r4
 80073e2:	f7ff fdd5 	bl	8006f90 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 80073e6:	f7ff ff65 	bl	80072b4 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 80073ea:	b948      	cbnz	r0, 8007400 <vTaskDelay+0x44>
			portYIELD_WITHIN_API();
 80073ec:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80073f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073f4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80073f8:	f3bf 8f4f 	dsb	sy
 80073fc:	f3bf 8f6f 	isb	sy
	}
 8007400:	bd10      	pop	{r4, pc}
 8007402:	bf00      	nop
 8007404:	20000dc4 	.word	0x20000dc4

08007408 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007408:	4b1f      	ldr	r3, [pc, #124]	; (8007488 <vTaskSwitchContext+0x80>)
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	b11b      	cbz	r3, 8007416 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 800740e:	4b1f      	ldr	r3, [pc, #124]	; (800748c <vTaskSwitchContext+0x84>)
 8007410:	2201      	movs	r2, #1
 8007412:	601a      	str	r2, [r3, #0]
 8007414:	4770      	bx	lr
		xYieldPending = pdFALSE;
 8007416:	4b1d      	ldr	r3, [pc, #116]	; (800748c <vTaskSwitchContext+0x84>)
 8007418:	2200      	movs	r2, #0
 800741a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800741c:	4b1c      	ldr	r3, [pc, #112]	; (8007490 <vTaskSwitchContext+0x88>)
 800741e:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007420:	fab3 f383 	clz	r3, r3
 8007424:	b2db      	uxtb	r3, r3
 8007426:	f1c3 031f 	rsb	r3, r3, #31
 800742a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800742e:	0092      	lsls	r2, r2, #2
 8007430:	4918      	ldr	r1, [pc, #96]	; (8007494 <vTaskSwitchContext+0x8c>)
 8007432:	588a      	ldr	r2, [r1, r2]
 8007434:	b942      	cbnz	r2, 8007448 <vTaskSwitchContext+0x40>
	__asm volatile
 8007436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800743a:	f383 8811 	msr	BASEPRI, r3
 800743e:	f3bf 8f6f 	isb	sy
 8007442:	f3bf 8f4f 	dsb	sy
 8007446:	e7fe      	b.n	8007446 <vTaskSwitchContext+0x3e>
 8007448:	4a12      	ldr	r2, [pc, #72]	; (8007494 <vTaskSwitchContext+0x8c>)
 800744a:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800744e:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8007452:	6848      	ldr	r0, [r1, #4]
 8007454:	6840      	ldr	r0, [r0, #4]
 8007456:	6048      	str	r0, [r1, #4]
 8007458:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800745c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8007460:	3208      	adds	r2, #8
 8007462:	4290      	cmp	r0, r2
 8007464:	d009      	beq.n	800747a <vTaskSwitchContext+0x72>
 8007466:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800746a:	4a0a      	ldr	r2, [pc, #40]	; (8007494 <vTaskSwitchContext+0x8c>)
 800746c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007470:	685b      	ldr	r3, [r3, #4]
 8007472:	68da      	ldr	r2, [r3, #12]
 8007474:	4b08      	ldr	r3, [pc, #32]	; (8007498 <vTaskSwitchContext+0x90>)
 8007476:	601a      	str	r2, [r3, #0]
}
 8007478:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800747a:	6840      	ldr	r0, [r0, #4]
 800747c:	4a05      	ldr	r2, [pc, #20]	; (8007494 <vTaskSwitchContext+0x8c>)
 800747e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8007482:	6050      	str	r0, [r2, #4]
 8007484:	e7ef      	b.n	8007466 <vTaskSwitchContext+0x5e>
 8007486:	bf00      	nop
 8007488:	20000dc4 	.word	0x20000dc4
 800748c:	20000e44 	.word	0x20000e44
 8007490:	20000dcc 	.word	0x20000dcc
 8007494:	20000d2c 	.word	0x20000d2c
 8007498:	20000d20 	.word	0x20000d20

0800749c <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800749c:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
 800749e:	2300      	movs	r3, #0
 80074a0:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80074a2:	4b0d      	ldr	r3, [pc, #52]	; (80074d8 <prvTaskExitError+0x3c>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074aa:	d008      	beq.n	80074be <prvTaskExitError+0x22>
 80074ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074b0:	f383 8811 	msr	BASEPRI, r3
 80074b4:	f3bf 8f6f 	isb	sy
 80074b8:	f3bf 8f4f 	dsb	sy
 80074bc:	e7fe      	b.n	80074bc <prvTaskExitError+0x20>
 80074be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074c2:	f383 8811 	msr	BASEPRI, r3
 80074c6:	f3bf 8f6f 	isb	sy
 80074ca:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80074ce:	9b01      	ldr	r3, [sp, #4]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d0fc      	beq.n	80074ce <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80074d4:	b002      	add	sp, #8
 80074d6:	4770      	bx	lr
 80074d8:	20000014 	.word	0x20000014

080074dc <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80074dc:	4806      	ldr	r0, [pc, #24]	; (80074f8 <prvPortStartFirstTask+0x1c>)
 80074de:	6800      	ldr	r0, [r0, #0]
 80074e0:	6800      	ldr	r0, [r0, #0]
 80074e2:	f380 8808 	msr	MSP, r0
 80074e6:	b662      	cpsie	i
 80074e8:	b661      	cpsie	f
 80074ea:	f3bf 8f4f 	dsb	sy
 80074ee:	f3bf 8f6f 	isb	sy
 80074f2:	df00      	svc	0
 80074f4:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80074f6:	0000      	.short	0x0000
 80074f8:	e000ed08 	.word	0xe000ed08

080074fc <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80074fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007500:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007504:	f021 0101 	bic.w	r1, r1, #1
 8007508:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800750c:	4b03      	ldr	r3, [pc, #12]	; (800751c <pxPortInitialiseStack+0x20>)
 800750e:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007512:	f840 2c20 	str.w	r2, [r0, #-32]
}
 8007516:	3840      	subs	r0, #64	; 0x40
 8007518:	4770      	bx	lr
 800751a:	bf00      	nop
 800751c:	0800749d 	.word	0x0800749d

08007520 <SVC_Handler>:
	__asm volatile (
 8007520:	4b07      	ldr	r3, [pc, #28]	; (8007540 <pxCurrentTCBConst2>)
 8007522:	6819      	ldr	r1, [r3, #0]
 8007524:	6808      	ldr	r0, [r1, #0]
 8007526:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800752a:	f380 8809 	msr	PSP, r0
 800752e:	f3bf 8f6f 	isb	sy
 8007532:	f04f 0000 	mov.w	r0, #0
 8007536:	f380 8811 	msr	BASEPRI, r0
 800753a:	f04e 0e0d 	orr.w	lr, lr, #13
 800753e:	4770      	bx	lr

08007540 <pxCurrentTCBConst2>:
 8007540:	20000d20 	.word	0x20000d20

08007544 <vPortEnterCritical>:
 8007544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007548:	f383 8811 	msr	BASEPRI, r3
 800754c:	f3bf 8f6f 	isb	sy
 8007550:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007554:	4a0b      	ldr	r2, [pc, #44]	; (8007584 <vPortEnterCritical+0x40>)
 8007556:	6813      	ldr	r3, [r2, #0]
 8007558:	3301      	adds	r3, #1
 800755a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800755c:	2b01      	cmp	r3, #1
 800755e:	d000      	beq.n	8007562 <vPortEnterCritical+0x1e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
	}
}
 8007560:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007562:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007566:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 800756a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800756e:	d0f7      	beq.n	8007560 <vPortEnterCritical+0x1c>
 8007570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007574:	f383 8811 	msr	BASEPRI, r3
 8007578:	f3bf 8f6f 	isb	sy
 800757c:	f3bf 8f4f 	dsb	sy
 8007580:	e7fe      	b.n	8007580 <vPortEnterCritical+0x3c>
 8007582:	bf00      	nop
 8007584:	20000014 	.word	0x20000014

08007588 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 8007588:	4b09      	ldr	r3, [pc, #36]	; (80075b0 <vPortExitCritical+0x28>)
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	b943      	cbnz	r3, 80075a0 <vPortExitCritical+0x18>
 800758e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007592:	f383 8811 	msr	BASEPRI, r3
 8007596:	f3bf 8f6f 	isb	sy
 800759a:	f3bf 8f4f 	dsb	sy
 800759e:	e7fe      	b.n	800759e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 80075a0:	3b01      	subs	r3, #1
 80075a2:	4a03      	ldr	r2, [pc, #12]	; (80075b0 <vPortExitCritical+0x28>)
 80075a4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80075a6:	b90b      	cbnz	r3, 80075ac <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80075a8:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80075ac:	4770      	bx	lr
 80075ae:	bf00      	nop
 80075b0:	20000014 	.word	0x20000014
	...

080075c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80075c0:	f3ef 8009 	mrs	r0, PSP
 80075c4:	f3bf 8f6f 	isb	sy
 80075c8:	4b0d      	ldr	r3, [pc, #52]	; (8007600 <pxCurrentTCBConst>)
 80075ca:	681a      	ldr	r2, [r3, #0]
 80075cc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80075d0:	6010      	str	r0, [r2, #0]
 80075d2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80075d6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80075da:	f380 8811 	msr	BASEPRI, r0
 80075de:	f7ff ff13 	bl	8007408 <vTaskSwitchContext>
 80075e2:	f04f 0000 	mov.w	r0, #0
 80075e6:	f380 8811 	msr	BASEPRI, r0
 80075ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80075ee:	6819      	ldr	r1, [r3, #0]
 80075f0:	6808      	ldr	r0, [r1, #0]
 80075f2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80075f6:	f380 8809 	msr	PSP, r0
 80075fa:	f3bf 8f6f 	isb	sy
 80075fe:	4770      	bx	lr

08007600 <pxCurrentTCBConst>:
 8007600:	20000d20 	.word	0x20000d20

08007604 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007604:	b508      	push	{r3, lr}
	__asm volatile
 8007606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800760a:	f383 8811 	msr	BASEPRI, r3
 800760e:	f3bf 8f6f 	isb	sy
 8007612:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007616:	f7ff fdb1 	bl	800717c <xTaskIncrementTick>
 800761a:	b128      	cbz	r0, 8007628 <SysTick_Handler+0x24>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800761c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007620:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007624:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 8007628:	2300      	movs	r3, #0
 800762a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800762e:	bd08      	pop	{r3, pc}

08007630 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007630:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8007634:	2300      	movs	r3, #0
 8007636:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007638:	6193      	str	r3, [r2, #24]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800763a:	4b05      	ldr	r3, [pc, #20]	; (8007650 <vPortSetupTimerInterrupt+0x20>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	4905      	ldr	r1, [pc, #20]	; (8007654 <vPortSetupTimerInterrupt+0x24>)
 8007640:	fba1 1303 	umull	r1, r3, r1, r3
 8007644:	099b      	lsrs	r3, r3, #6
 8007646:	3b01      	subs	r3, #1
 8007648:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800764a:	2307      	movs	r3, #7
 800764c:	6113      	str	r3, [r2, #16]
}
 800764e:	4770      	bx	lr
 8007650:	20000000 	.word	0x20000000
 8007654:	10624dd3 	.word	0x10624dd3

08007658 <xPortStartScheduler>:
{
 8007658:	b510      	push	{r4, lr}
 800765a:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800765c:	4b2c      	ldr	r3, [pc, #176]	; (8007710 <xPortStartScheduler+0xb8>)
 800765e:	781a      	ldrb	r2, [r3, #0]
 8007660:	b2d2      	uxtb	r2, r2
 8007662:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007664:	22ff      	movs	r2, #255	; 0xff
 8007666:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007668:	781b      	ldrb	r3, [r3, #0]
 800766a:	b2db      	uxtb	r3, r3
 800766c:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007670:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8007674:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007678:	4a26      	ldr	r2, [pc, #152]	; (8007714 <xPortStartScheduler+0xbc>)
 800767a:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800767c:	4b26      	ldr	r3, [pc, #152]	; (8007718 <xPortStartScheduler+0xc0>)
 800767e:	2207      	movs	r2, #7
 8007680:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007682:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8007686:	f013 0f80 	tst.w	r3, #128	; 0x80
 800768a:	d013      	beq.n	80076b4 <xPortStartScheduler+0x5c>
 800768c:	2206      	movs	r2, #6
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800768e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8007692:	005b      	lsls	r3, r3, #1
 8007694:	b2db      	uxtb	r3, r3
 8007696:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800769a:	f89d 1003 	ldrb.w	r1, [sp, #3]
 800769e:	4610      	mov	r0, r2
 80076a0:	3a01      	subs	r2, #1
 80076a2:	f011 0f80 	tst.w	r1, #128	; 0x80
 80076a6:	d1f2      	bne.n	800768e <xPortStartScheduler+0x36>
 80076a8:	4a1b      	ldr	r2, [pc, #108]	; (8007718 <xPortStartScheduler+0xc0>)
 80076aa:	6010      	str	r0, [r2, #0]
 80076ac:	f88d 3003 	strb.w	r3, [sp, #3]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80076b0:	2803      	cmp	r0, #3
 80076b2:	d008      	beq.n	80076c6 <xPortStartScheduler+0x6e>
	__asm volatile
 80076b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076b8:	f383 8811 	msr	BASEPRI, r3
 80076bc:	f3bf 8f6f 	isb	sy
 80076c0:	f3bf 8f4f 	dsb	sy
 80076c4:	e7fe      	b.n	80076c4 <xPortStartScheduler+0x6c>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80076c6:	4b14      	ldr	r3, [pc, #80]	; (8007718 <xPortStartScheduler+0xc0>)
 80076c8:	f44f 7240 	mov.w	r2, #768	; 0x300
 80076cc:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80076ce:	9b01      	ldr	r3, [sp, #4]
 80076d0:	b2db      	uxtb	r3, r3
 80076d2:	4a0f      	ldr	r2, [pc, #60]	; (8007710 <xPortStartScheduler+0xb8>)
 80076d4:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80076d6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80076da:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 80076de:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80076e2:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80076e6:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 80076ea:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 80076ee:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 80076f2:	f7ff ff9d 	bl	8007630 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80076f6:	2400      	movs	r4, #0
 80076f8:	4b08      	ldr	r3, [pc, #32]	; (800771c <xPortStartScheduler+0xc4>)
 80076fa:	601c      	str	r4, [r3, #0]
	prvPortStartFirstTask();
 80076fc:	f7ff feee 	bl	80074dc <prvPortStartFirstTask>
	vTaskSwitchContext();
 8007700:	f7ff fe82 	bl	8007408 <vTaskSwitchContext>
	prvTaskExitError();
 8007704:	f7ff feca 	bl	800749c <prvTaskExitError>
}
 8007708:	4620      	mov	r0, r4
 800770a:	b002      	add	sp, #8
 800770c:	bd10      	pop	{r4, pc}
 800770e:	bf00      	nop
 8007710:	e000e400 	.word	0xe000e400
 8007714:	20000e48 	.word	0x20000e48
 8007718:	20000e4c 	.word	0x20000e4c
 800771c:	20000014 	.word	0x20000014

08007720 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007720:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007722:	4b14      	ldr	r3, [pc, #80]	; (8007774 <prvInsertBlockIntoFreeList+0x54>)
 8007724:	461a      	mov	r2, r3
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	4283      	cmp	r3, r0
 800772a:	d3fb      	bcc.n	8007724 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800772c:	6854      	ldr	r4, [r2, #4]
 800772e:	1911      	adds	r1, r2, r4
 8007730:	4288      	cmp	r0, r1
 8007732:	d009      	beq.n	8007748 <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007734:	6844      	ldr	r4, [r0, #4]
 8007736:	1901      	adds	r1, r0, r4
 8007738:	428b      	cmp	r3, r1
 800773a:	d00f      	beq.n	800775c <prvInsertBlockIntoFreeList+0x3c>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800773c:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800773e:	4282      	cmp	r2, r0
 8007740:	d000      	beq.n	8007744 <prvInsertBlockIntoFreeList+0x24>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007742:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007744:	bc10      	pop	{r4}
 8007746:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007748:	6841      	ldr	r1, [r0, #4]
 800774a:	4421      	add	r1, r4
 800774c:	6051      	str	r1, [r2, #4]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800774e:	460c      	mov	r4, r1
 8007750:	4411      	add	r1, r2
 8007752:	428b      	cmp	r3, r1
 8007754:	d001      	beq.n	800775a <prvInsertBlockIntoFreeList+0x3a>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007756:	6013      	str	r3, [r2, #0]
	if( pxIterator != pxBlockToInsert )
 8007758:	e7f4      	b.n	8007744 <prvInsertBlockIntoFreeList+0x24>
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800775a:	4610      	mov	r0, r2
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800775c:	4906      	ldr	r1, [pc, #24]	; (8007778 <prvInsertBlockIntoFreeList+0x58>)
 800775e:	6809      	ldr	r1, [r1, #0]
 8007760:	428b      	cmp	r3, r1
 8007762:	d005      	beq.n	8007770 <prvInsertBlockIntoFreeList+0x50>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007764:	685b      	ldr	r3, [r3, #4]
 8007766:	4423      	add	r3, r4
 8007768:	6043      	str	r3, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800776a:	6813      	ldr	r3, [r2, #0]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	e7e5      	b.n	800773c <prvInsertBlockIntoFreeList+0x1c>
 8007770:	460b      	mov	r3, r1
 8007772:	e7e3      	b.n	800773c <prvInsertBlockIntoFreeList+0x1c>
 8007774:	200027e0 	.word	0x200027e0
 8007778:	20000e50 	.word	0x20000e50

0800777c <pvPortMalloc>:
{
 800777c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800777e:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8007780:	f7ff fcf4 	bl	800716c <vTaskSuspendAll>
		if( pxEnd == NULL )
 8007784:	4b42      	ldr	r3, [pc, #264]	; (8007890 <pvPortMalloc+0x114>)
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	b1b3      	cbz	r3, 80077b8 <pvPortMalloc+0x3c>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800778a:	4b42      	ldr	r3, [pc, #264]	; (8007894 <pvPortMalloc+0x118>)
 800778c:	681d      	ldr	r5, [r3, #0]
 800778e:	4225      	tst	r5, r4
 8007790:	d179      	bne.n	8007886 <pvPortMalloc+0x10a>
			if( xWantedSize > 0 )
 8007792:	2c00      	cmp	r4, #0
 8007794:	d077      	beq.n	8007886 <pvPortMalloc+0x10a>
				xWantedSize += xHeapStructSize;
 8007796:	f104 0208 	add.w	r2, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800779a:	f014 0f07 	tst.w	r4, #7
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800779e:	bf1c      	itt	ne
 80077a0:	f022 0207 	bicne.w	r2, r2, #7
 80077a4:	3208      	addne	r2, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80077a6:	2a00      	cmp	r2, #0
 80077a8:	d06d      	beq.n	8007886 <pvPortMalloc+0x10a>
 80077aa:	4b3b      	ldr	r3, [pc, #236]	; (8007898 <pvPortMalloc+0x11c>)
 80077ac:	681e      	ldr	r6, [r3, #0]
 80077ae:	4296      	cmp	r6, r2
 80077b0:	d369      	bcc.n	8007886 <pvPortMalloc+0x10a>
				pxBlock = xStart.pxNextFreeBlock;
 80077b2:	493a      	ldr	r1, [pc, #232]	; (800789c <pvPortMalloc+0x120>)
 80077b4:	680c      	ldr	r4, [r1, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80077b6:	e027      	b.n	8007808 <pvPortMalloc+0x8c>
	uxAddress = ( size_t ) ucHeap;
 80077b8:	4a39      	ldr	r2, [pc, #228]	; (80078a0 <pvPortMalloc+0x124>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80077ba:	f012 0f07 	tst.w	r2, #7
 80077be:	d007      	beq.n	80077d0 <pvPortMalloc+0x54>
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80077c0:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80077c2:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80077c6:	f502 52cc 	add.w	r2, r2, #6528	; 0x1980
 80077ca:	1a53      	subs	r3, r2, r1
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80077cc:	460a      	mov	r2, r1
 80077ce:	e001      	b.n	80077d4 <pvPortMalloc+0x58>
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80077d0:	f44f 53cc 	mov.w	r3, #6528	; 0x1980
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80077d4:	4831      	ldr	r0, [pc, #196]	; (800789c <pvPortMalloc+0x120>)
 80077d6:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80077d8:	2100      	movs	r1, #0
 80077da:	6041      	str	r1, [r0, #4]
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80077dc:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 80077de:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80077e0:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 80077e4:	482a      	ldr	r0, [pc, #168]	; (8007890 <pvPortMalloc+0x114>)
 80077e6:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 80077e8:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80077ea:	6019      	str	r1, [r3, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80077ec:	1a99      	subs	r1, r3, r2
 80077ee:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80077f0:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80077f2:	4b2c      	ldr	r3, [pc, #176]	; (80078a4 <pvPortMalloc+0x128>)
 80077f4:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80077f6:	4b28      	ldr	r3, [pc, #160]	; (8007898 <pvPortMalloc+0x11c>)
 80077f8:	6019      	str	r1, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80077fa:	4b26      	ldr	r3, [pc, #152]	; (8007894 <pvPortMalloc+0x118>)
 80077fc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007800:	601a      	str	r2, [r3, #0]
}
 8007802:	e7c2      	b.n	800778a <pvPortMalloc+0xe>
 8007804:	4621      	mov	r1, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 8007806:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007808:	6863      	ldr	r3, [r4, #4]
 800780a:	4293      	cmp	r3, r2
 800780c:	d202      	bcs.n	8007814 <pvPortMalloc+0x98>
 800780e:	6823      	ldr	r3, [r4, #0]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d1f7      	bne.n	8007804 <pvPortMalloc+0x88>
				if( pxBlock != pxEnd )
 8007814:	4b1e      	ldr	r3, [pc, #120]	; (8007890 <pvPortMalloc+0x114>)
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	42a3      	cmp	r3, r4
 800781a:	d034      	beq.n	8007886 <pvPortMalloc+0x10a>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800781c:	680f      	ldr	r7, [r1, #0]
 800781e:	3708      	adds	r7, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007820:	6823      	ldr	r3, [r4, #0]
 8007822:	600b      	str	r3, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007824:	6863      	ldr	r3, [r4, #4]
 8007826:	1a9b      	subs	r3, r3, r2
 8007828:	2b10      	cmp	r3, #16
 800782a:	d910      	bls.n	800784e <pvPortMalloc+0xd2>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800782c:	18a0      	adds	r0, r4, r2
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800782e:	f010 0f07 	tst.w	r0, #7
 8007832:	d008      	beq.n	8007846 <pvPortMalloc+0xca>
 8007834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007838:	f383 8811 	msr	BASEPRI, r3
 800783c:	f3bf 8f6f 	isb	sy
 8007840:	f3bf 8f4f 	dsb	sy
 8007844:	e7fe      	b.n	8007844 <pvPortMalloc+0xc8>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007846:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007848:	6062      	str	r2, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800784a:	f7ff ff69 	bl	8007720 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800784e:	6863      	ldr	r3, [r4, #4]
 8007850:	1af6      	subs	r6, r6, r3
 8007852:	4a11      	ldr	r2, [pc, #68]	; (8007898 <pvPortMalloc+0x11c>)
 8007854:	6016      	str	r6, [r2, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007856:	4a13      	ldr	r2, [pc, #76]	; (80078a4 <pvPortMalloc+0x128>)
 8007858:	6812      	ldr	r2, [r2, #0]
 800785a:	4296      	cmp	r6, r2
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800785c:	bf3c      	itt	cc
 800785e:	4a11      	ldrcc	r2, [pc, #68]	; (80078a4 <pvPortMalloc+0x128>)
 8007860:	6016      	strcc	r6, [r2, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007862:	431d      	orrs	r5, r3
 8007864:	6065      	str	r5, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007866:	2300      	movs	r3, #0
 8007868:	6023      	str	r3, [r4, #0]
	( void ) xTaskResumeAll();
 800786a:	f7ff fd23 	bl	80072b4 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800786e:	f017 0f07 	tst.w	r7, #7
 8007872:	d00b      	beq.n	800788c <pvPortMalloc+0x110>
 8007874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007878:	f383 8811 	msr	BASEPRI, r3
 800787c:	f3bf 8f6f 	isb	sy
 8007880:	f3bf 8f4f 	dsb	sy
 8007884:	e7fe      	b.n	8007884 <pvPortMalloc+0x108>
	( void ) xTaskResumeAll();
 8007886:	f7ff fd15 	bl	80072b4 <xTaskResumeAll>
 800788a:	2700      	movs	r7, #0
}
 800788c:	4638      	mov	r0, r7
 800788e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007890:	20000e50 	.word	0x20000e50
 8007894:	200027d4 	.word	0x200027d4
 8007898:	200027d8 	.word	0x200027d8
 800789c:	200027e0 	.word	0x200027e0
 80078a0:	20000e54 	.word	0x20000e54
 80078a4:	200027dc 	.word	0x200027dc

080078a8 <vPortFree>:
	if( pv != NULL )
 80078a8:	b378      	cbz	r0, 800790a <vPortFree+0x62>
{
 80078aa:	b510      	push	{r4, lr}
 80078ac:	4604      	mov	r4, r0
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80078ae:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80078b2:	4a16      	ldr	r2, [pc, #88]	; (800790c <vPortFree+0x64>)
 80078b4:	6812      	ldr	r2, [r2, #0]
 80078b6:	4213      	tst	r3, r2
 80078b8:	d108      	bne.n	80078cc <vPortFree+0x24>
 80078ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078be:	f383 8811 	msr	BASEPRI, r3
 80078c2:	f3bf 8f6f 	isb	sy
 80078c6:	f3bf 8f4f 	dsb	sy
 80078ca:	e7fe      	b.n	80078ca <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80078cc:	f850 1c08 	ldr.w	r1, [r0, #-8]
 80078d0:	b141      	cbz	r1, 80078e4 <vPortFree+0x3c>
 80078d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078d6:	f383 8811 	msr	BASEPRI, r3
 80078da:	f3bf 8f6f 	isb	sy
 80078de:	f3bf 8f4f 	dsb	sy
 80078e2:	e7fe      	b.n	80078e2 <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80078e4:	ea23 0302 	bic.w	r3, r3, r2
 80078e8:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 80078ec:	f7ff fc3e 	bl	800716c <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80078f0:	4a07      	ldr	r2, [pc, #28]	; (8007910 <vPortFree+0x68>)
 80078f2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80078f6:	6811      	ldr	r1, [r2, #0]
 80078f8:	440b      	add	r3, r1
 80078fa:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80078fc:	f1a4 0008 	sub.w	r0, r4, #8
 8007900:	f7ff ff0e 	bl	8007720 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 8007904:	f7ff fcd6 	bl	80072b4 <xTaskResumeAll>
}
 8007908:	bd10      	pop	{r4, pc}
 800790a:	4770      	bx	lr
 800790c:	200027d4 	.word	0x200027d4
 8007910:	200027d8 	.word	0x200027d8

08007914 <atof>:
 8007914:	2100      	movs	r1, #0
 8007916:	f000 be21 	b.w	800855c <strtod>

0800791a <atoi>:
 800791a:	220a      	movs	r2, #10
 800791c:	2100      	movs	r1, #0
 800791e:	f000 bea9 	b.w	8008674 <strtol>

08007922 <sulp>:
 8007922:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007926:	460f      	mov	r7, r1
 8007928:	4690      	mov	r8, r2
 800792a:	f003 fd6d 	bl	800b408 <__ulp>
 800792e:	4604      	mov	r4, r0
 8007930:	460d      	mov	r5, r1
 8007932:	f1b8 0f00 	cmp.w	r8, #0
 8007936:	d011      	beq.n	800795c <sulp+0x3a>
 8007938:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800793c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007940:	2b00      	cmp	r3, #0
 8007942:	dd0b      	ble.n	800795c <sulp+0x3a>
 8007944:	2400      	movs	r4, #0
 8007946:	051b      	lsls	r3, r3, #20
 8007948:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800794c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007950:	4622      	mov	r2, r4
 8007952:	462b      	mov	r3, r5
 8007954:	f7f8 fdca 	bl	80004ec <__aeabi_dmul>
 8007958:	4604      	mov	r4, r0
 800795a:	460d      	mov	r5, r1
 800795c:	4620      	mov	r0, r4
 800795e:	4629      	mov	r1, r5
 8007960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007964:	0000      	movs	r0, r0
	...

08007968 <_strtod_l>:
 8007968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800796c:	b09f      	sub	sp, #124	; 0x7c
 800796e:	9217      	str	r2, [sp, #92]	; 0x5c
 8007970:	2200      	movs	r2, #0
 8007972:	4604      	mov	r4, r0
 8007974:	921a      	str	r2, [sp, #104]	; 0x68
 8007976:	460d      	mov	r5, r1
 8007978:	f04f 0800 	mov.w	r8, #0
 800797c:	f04f 0900 	mov.w	r9, #0
 8007980:	460a      	mov	r2, r1
 8007982:	9219      	str	r2, [sp, #100]	; 0x64
 8007984:	7811      	ldrb	r1, [r2, #0]
 8007986:	292b      	cmp	r1, #43	; 0x2b
 8007988:	d04a      	beq.n	8007a20 <_strtod_l+0xb8>
 800798a:	d838      	bhi.n	80079fe <_strtod_l+0x96>
 800798c:	290d      	cmp	r1, #13
 800798e:	d832      	bhi.n	80079f6 <_strtod_l+0x8e>
 8007990:	2908      	cmp	r1, #8
 8007992:	d832      	bhi.n	80079fa <_strtod_l+0x92>
 8007994:	2900      	cmp	r1, #0
 8007996:	d03b      	beq.n	8007a10 <_strtod_l+0xa8>
 8007998:	2200      	movs	r2, #0
 800799a:	920e      	str	r2, [sp, #56]	; 0x38
 800799c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800799e:	7832      	ldrb	r2, [r6, #0]
 80079a0:	2a30      	cmp	r2, #48	; 0x30
 80079a2:	f040 80b2 	bne.w	8007b0a <_strtod_l+0x1a2>
 80079a6:	7872      	ldrb	r2, [r6, #1]
 80079a8:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80079ac:	2a58      	cmp	r2, #88	; 0x58
 80079ae:	d16e      	bne.n	8007a8e <_strtod_l+0x126>
 80079b0:	9302      	str	r3, [sp, #8]
 80079b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80079b4:	4620      	mov	r0, r4
 80079b6:	9301      	str	r3, [sp, #4]
 80079b8:	ab1a      	add	r3, sp, #104	; 0x68
 80079ba:	9300      	str	r3, [sp, #0]
 80079bc:	4a8c      	ldr	r2, [pc, #560]	; (8007bf0 <_strtod_l+0x288>)
 80079be:	ab1b      	add	r3, sp, #108	; 0x6c
 80079c0:	a919      	add	r1, sp, #100	; 0x64
 80079c2:	f002 fdfd 	bl	800a5c0 <__gethex>
 80079c6:	f010 070f 	ands.w	r7, r0, #15
 80079ca:	4605      	mov	r5, r0
 80079cc:	d005      	beq.n	80079da <_strtod_l+0x72>
 80079ce:	2f06      	cmp	r7, #6
 80079d0:	d128      	bne.n	8007a24 <_strtod_l+0xbc>
 80079d2:	2300      	movs	r3, #0
 80079d4:	3601      	adds	r6, #1
 80079d6:	9619      	str	r6, [sp, #100]	; 0x64
 80079d8:	930e      	str	r3, [sp, #56]	; 0x38
 80079da:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80079dc:	2b00      	cmp	r3, #0
 80079de:	f040 85a0 	bne.w	8008522 <_strtod_l+0xbba>
 80079e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80079e4:	b1cb      	cbz	r3, 8007a1a <_strtod_l+0xb2>
 80079e6:	4642      	mov	r2, r8
 80079e8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80079ec:	4610      	mov	r0, r2
 80079ee:	4619      	mov	r1, r3
 80079f0:	b01f      	add	sp, #124	; 0x7c
 80079f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079f6:	2920      	cmp	r1, #32
 80079f8:	d1ce      	bne.n	8007998 <_strtod_l+0x30>
 80079fa:	3201      	adds	r2, #1
 80079fc:	e7c1      	b.n	8007982 <_strtod_l+0x1a>
 80079fe:	292d      	cmp	r1, #45	; 0x2d
 8007a00:	d1ca      	bne.n	8007998 <_strtod_l+0x30>
 8007a02:	2101      	movs	r1, #1
 8007a04:	910e      	str	r1, [sp, #56]	; 0x38
 8007a06:	1c51      	adds	r1, r2, #1
 8007a08:	9119      	str	r1, [sp, #100]	; 0x64
 8007a0a:	7852      	ldrb	r2, [r2, #1]
 8007a0c:	2a00      	cmp	r2, #0
 8007a0e:	d1c5      	bne.n	800799c <_strtod_l+0x34>
 8007a10:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007a12:	9519      	str	r5, [sp, #100]	; 0x64
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	f040 8582 	bne.w	800851e <_strtod_l+0xbb6>
 8007a1a:	4642      	mov	r2, r8
 8007a1c:	464b      	mov	r3, r9
 8007a1e:	e7e5      	b.n	80079ec <_strtod_l+0x84>
 8007a20:	2100      	movs	r1, #0
 8007a22:	e7ef      	b.n	8007a04 <_strtod_l+0x9c>
 8007a24:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007a26:	b13a      	cbz	r2, 8007a38 <_strtod_l+0xd0>
 8007a28:	2135      	movs	r1, #53	; 0x35
 8007a2a:	a81c      	add	r0, sp, #112	; 0x70
 8007a2c:	f003 fdd8 	bl	800b5e0 <__copybits>
 8007a30:	4620      	mov	r0, r4
 8007a32:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007a34:	f003 f9bc 	bl	800adb0 <_Bfree>
 8007a38:	3f01      	subs	r7, #1
 8007a3a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007a3c:	2f04      	cmp	r7, #4
 8007a3e:	d806      	bhi.n	8007a4e <_strtod_l+0xe6>
 8007a40:	e8df f007 	tbb	[pc, r7]
 8007a44:	201d0314 	.word	0x201d0314
 8007a48:	14          	.byte	0x14
 8007a49:	00          	.byte	0x00
 8007a4a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8007a4e:	05e9      	lsls	r1, r5, #23
 8007a50:	bf48      	it	mi
 8007a52:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8007a56:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007a5a:	0d1b      	lsrs	r3, r3, #20
 8007a5c:	051b      	lsls	r3, r3, #20
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d1bb      	bne.n	80079da <_strtod_l+0x72>
 8007a62:	f001 fe39 	bl	80096d8 <__errno>
 8007a66:	2322      	movs	r3, #34	; 0x22
 8007a68:	6003      	str	r3, [r0, #0]
 8007a6a:	e7b6      	b.n	80079da <_strtod_l+0x72>
 8007a6c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007a70:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8007a74:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007a78:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8007a7c:	e7e7      	b.n	8007a4e <_strtod_l+0xe6>
 8007a7e:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8007bf4 <_strtod_l+0x28c>
 8007a82:	e7e4      	b.n	8007a4e <_strtod_l+0xe6>
 8007a84:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8007a88:	f04f 38ff 	mov.w	r8, #4294967295
 8007a8c:	e7df      	b.n	8007a4e <_strtod_l+0xe6>
 8007a8e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007a90:	1c5a      	adds	r2, r3, #1
 8007a92:	9219      	str	r2, [sp, #100]	; 0x64
 8007a94:	785b      	ldrb	r3, [r3, #1]
 8007a96:	2b30      	cmp	r3, #48	; 0x30
 8007a98:	d0f9      	beq.n	8007a8e <_strtod_l+0x126>
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d09d      	beq.n	80079da <_strtod_l+0x72>
 8007a9e:	2301      	movs	r3, #1
 8007aa0:	f04f 0a00 	mov.w	sl, #0
 8007aa4:	220a      	movs	r2, #10
 8007aa6:	46d3      	mov	fp, sl
 8007aa8:	9305      	str	r3, [sp, #20]
 8007aaa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007aac:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8007ab0:	930b      	str	r3, [sp, #44]	; 0x2c
 8007ab2:	9819      	ldr	r0, [sp, #100]	; 0x64
 8007ab4:	7806      	ldrb	r6, [r0, #0]
 8007ab6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007aba:	b2d9      	uxtb	r1, r3
 8007abc:	2909      	cmp	r1, #9
 8007abe:	d926      	bls.n	8007b0e <_strtod_l+0x1a6>
 8007ac0:	2201      	movs	r2, #1
 8007ac2:	494d      	ldr	r1, [pc, #308]	; (8007bf8 <_strtod_l+0x290>)
 8007ac4:	f001 fd93 	bl	80095ee <strncmp>
 8007ac8:	2800      	cmp	r0, #0
 8007aca:	d030      	beq.n	8007b2e <_strtod_l+0x1c6>
 8007acc:	2000      	movs	r0, #0
 8007ace:	4632      	mov	r2, r6
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	465e      	mov	r6, fp
 8007ad4:	9008      	str	r0, [sp, #32]
 8007ad6:	2a65      	cmp	r2, #101	; 0x65
 8007ad8:	d001      	beq.n	8007ade <_strtod_l+0x176>
 8007ada:	2a45      	cmp	r2, #69	; 0x45
 8007adc:	d113      	bne.n	8007b06 <_strtod_l+0x19e>
 8007ade:	b91e      	cbnz	r6, 8007ae8 <_strtod_l+0x180>
 8007ae0:	9a05      	ldr	r2, [sp, #20]
 8007ae2:	4302      	orrs	r2, r0
 8007ae4:	d094      	beq.n	8007a10 <_strtod_l+0xa8>
 8007ae6:	2600      	movs	r6, #0
 8007ae8:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8007aea:	1c6a      	adds	r2, r5, #1
 8007aec:	9219      	str	r2, [sp, #100]	; 0x64
 8007aee:	786a      	ldrb	r2, [r5, #1]
 8007af0:	2a2b      	cmp	r2, #43	; 0x2b
 8007af2:	d074      	beq.n	8007bde <_strtod_l+0x276>
 8007af4:	2a2d      	cmp	r2, #45	; 0x2d
 8007af6:	d078      	beq.n	8007bea <_strtod_l+0x282>
 8007af8:	f04f 0c00 	mov.w	ip, #0
 8007afc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007b00:	2909      	cmp	r1, #9
 8007b02:	d97f      	bls.n	8007c04 <_strtod_l+0x29c>
 8007b04:	9519      	str	r5, [sp, #100]	; 0x64
 8007b06:	2700      	movs	r7, #0
 8007b08:	e09e      	b.n	8007c48 <_strtod_l+0x2e0>
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	e7c8      	b.n	8007aa0 <_strtod_l+0x138>
 8007b0e:	f1bb 0f08 	cmp.w	fp, #8
 8007b12:	bfd8      	it	le
 8007b14:	990a      	ldrle	r1, [sp, #40]	; 0x28
 8007b16:	f100 0001 	add.w	r0, r0, #1
 8007b1a:	bfd6      	itet	le
 8007b1c:	fb02 3301 	mlale	r3, r2, r1, r3
 8007b20:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8007b24:	930a      	strle	r3, [sp, #40]	; 0x28
 8007b26:	f10b 0b01 	add.w	fp, fp, #1
 8007b2a:	9019      	str	r0, [sp, #100]	; 0x64
 8007b2c:	e7c1      	b.n	8007ab2 <_strtod_l+0x14a>
 8007b2e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007b30:	1c5a      	adds	r2, r3, #1
 8007b32:	9219      	str	r2, [sp, #100]	; 0x64
 8007b34:	785a      	ldrb	r2, [r3, #1]
 8007b36:	f1bb 0f00 	cmp.w	fp, #0
 8007b3a:	d037      	beq.n	8007bac <_strtod_l+0x244>
 8007b3c:	465e      	mov	r6, fp
 8007b3e:	9008      	str	r0, [sp, #32]
 8007b40:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007b44:	2b09      	cmp	r3, #9
 8007b46:	d912      	bls.n	8007b6e <_strtod_l+0x206>
 8007b48:	2301      	movs	r3, #1
 8007b4a:	e7c4      	b.n	8007ad6 <_strtod_l+0x16e>
 8007b4c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007b4e:	3001      	adds	r0, #1
 8007b50:	1c5a      	adds	r2, r3, #1
 8007b52:	9219      	str	r2, [sp, #100]	; 0x64
 8007b54:	785a      	ldrb	r2, [r3, #1]
 8007b56:	2a30      	cmp	r2, #48	; 0x30
 8007b58:	d0f8      	beq.n	8007b4c <_strtod_l+0x1e4>
 8007b5a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007b5e:	2b08      	cmp	r3, #8
 8007b60:	f200 84e4 	bhi.w	800852c <_strtod_l+0xbc4>
 8007b64:	9008      	str	r0, [sp, #32]
 8007b66:	2000      	movs	r0, #0
 8007b68:	4606      	mov	r6, r0
 8007b6a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007b6c:	930b      	str	r3, [sp, #44]	; 0x2c
 8007b6e:	3a30      	subs	r2, #48	; 0x30
 8007b70:	f100 0301 	add.w	r3, r0, #1
 8007b74:	d014      	beq.n	8007ba0 <_strtod_l+0x238>
 8007b76:	9908      	ldr	r1, [sp, #32]
 8007b78:	eb00 0c06 	add.w	ip, r0, r6
 8007b7c:	4419      	add	r1, r3
 8007b7e:	9108      	str	r1, [sp, #32]
 8007b80:	4633      	mov	r3, r6
 8007b82:	210a      	movs	r1, #10
 8007b84:	4563      	cmp	r3, ip
 8007b86:	d113      	bne.n	8007bb0 <_strtod_l+0x248>
 8007b88:	1833      	adds	r3, r6, r0
 8007b8a:	2b08      	cmp	r3, #8
 8007b8c:	f106 0601 	add.w	r6, r6, #1
 8007b90:	4406      	add	r6, r0
 8007b92:	dc1a      	bgt.n	8007bca <_strtod_l+0x262>
 8007b94:	230a      	movs	r3, #10
 8007b96:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007b98:	fb03 2301 	mla	r3, r3, r1, r2
 8007b9c:	930a      	str	r3, [sp, #40]	; 0x28
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	1c51      	adds	r1, r2, #1
 8007ba6:	9119      	str	r1, [sp, #100]	; 0x64
 8007ba8:	7852      	ldrb	r2, [r2, #1]
 8007baa:	e7c9      	b.n	8007b40 <_strtod_l+0x1d8>
 8007bac:	4658      	mov	r0, fp
 8007bae:	e7d2      	b.n	8007b56 <_strtod_l+0x1ee>
 8007bb0:	2b08      	cmp	r3, #8
 8007bb2:	f103 0301 	add.w	r3, r3, #1
 8007bb6:	dc03      	bgt.n	8007bc0 <_strtod_l+0x258>
 8007bb8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8007bba:	434f      	muls	r7, r1
 8007bbc:	970a      	str	r7, [sp, #40]	; 0x28
 8007bbe:	e7e1      	b.n	8007b84 <_strtod_l+0x21c>
 8007bc0:	2b10      	cmp	r3, #16
 8007bc2:	bfd8      	it	le
 8007bc4:	fb01 fa0a 	mulle.w	sl, r1, sl
 8007bc8:	e7dc      	b.n	8007b84 <_strtod_l+0x21c>
 8007bca:	2e10      	cmp	r6, #16
 8007bcc:	bfdc      	itt	le
 8007bce:	230a      	movle	r3, #10
 8007bd0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8007bd4:	e7e3      	b.n	8007b9e <_strtod_l+0x236>
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	9308      	str	r3, [sp, #32]
 8007bda:	2301      	movs	r3, #1
 8007bdc:	e780      	b.n	8007ae0 <_strtod_l+0x178>
 8007bde:	f04f 0c00 	mov.w	ip, #0
 8007be2:	1caa      	adds	r2, r5, #2
 8007be4:	9219      	str	r2, [sp, #100]	; 0x64
 8007be6:	78aa      	ldrb	r2, [r5, #2]
 8007be8:	e788      	b.n	8007afc <_strtod_l+0x194>
 8007bea:	f04f 0c01 	mov.w	ip, #1
 8007bee:	e7f8      	b.n	8007be2 <_strtod_l+0x27a>
 8007bf0:	0800caec 	.word	0x0800caec
 8007bf4:	7ff00000 	.word	0x7ff00000
 8007bf8:	0800cae9 	.word	0x0800cae9
 8007bfc:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007bfe:	1c51      	adds	r1, r2, #1
 8007c00:	9119      	str	r1, [sp, #100]	; 0x64
 8007c02:	7852      	ldrb	r2, [r2, #1]
 8007c04:	2a30      	cmp	r2, #48	; 0x30
 8007c06:	d0f9      	beq.n	8007bfc <_strtod_l+0x294>
 8007c08:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007c0c:	2908      	cmp	r1, #8
 8007c0e:	f63f af7a 	bhi.w	8007b06 <_strtod_l+0x19e>
 8007c12:	3a30      	subs	r2, #48	; 0x30
 8007c14:	9209      	str	r2, [sp, #36]	; 0x24
 8007c16:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007c18:	920c      	str	r2, [sp, #48]	; 0x30
 8007c1a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007c1c:	1c57      	adds	r7, r2, #1
 8007c1e:	9719      	str	r7, [sp, #100]	; 0x64
 8007c20:	7852      	ldrb	r2, [r2, #1]
 8007c22:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8007c26:	f1be 0f09 	cmp.w	lr, #9
 8007c2a:	d938      	bls.n	8007c9e <_strtod_l+0x336>
 8007c2c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007c2e:	1a7f      	subs	r7, r7, r1
 8007c30:	2f08      	cmp	r7, #8
 8007c32:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8007c36:	dc03      	bgt.n	8007c40 <_strtod_l+0x2d8>
 8007c38:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007c3a:	428f      	cmp	r7, r1
 8007c3c:	bfa8      	it	ge
 8007c3e:	460f      	movge	r7, r1
 8007c40:	f1bc 0f00 	cmp.w	ip, #0
 8007c44:	d000      	beq.n	8007c48 <_strtod_l+0x2e0>
 8007c46:	427f      	negs	r7, r7
 8007c48:	2e00      	cmp	r6, #0
 8007c4a:	d14f      	bne.n	8007cec <_strtod_l+0x384>
 8007c4c:	9905      	ldr	r1, [sp, #20]
 8007c4e:	4301      	orrs	r1, r0
 8007c50:	f47f aec3 	bne.w	80079da <_strtod_l+0x72>
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	f47f aedb 	bne.w	8007a10 <_strtod_l+0xa8>
 8007c5a:	2a69      	cmp	r2, #105	; 0x69
 8007c5c:	d029      	beq.n	8007cb2 <_strtod_l+0x34a>
 8007c5e:	dc26      	bgt.n	8007cae <_strtod_l+0x346>
 8007c60:	2a49      	cmp	r2, #73	; 0x49
 8007c62:	d026      	beq.n	8007cb2 <_strtod_l+0x34a>
 8007c64:	2a4e      	cmp	r2, #78	; 0x4e
 8007c66:	f47f aed3 	bne.w	8007a10 <_strtod_l+0xa8>
 8007c6a:	499a      	ldr	r1, [pc, #616]	; (8007ed4 <_strtod_l+0x56c>)
 8007c6c:	a819      	add	r0, sp, #100	; 0x64
 8007c6e:	f002 fee9 	bl	800aa44 <__match>
 8007c72:	2800      	cmp	r0, #0
 8007c74:	f43f aecc 	beq.w	8007a10 <_strtod_l+0xa8>
 8007c78:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007c7a:	781b      	ldrb	r3, [r3, #0]
 8007c7c:	2b28      	cmp	r3, #40	; 0x28
 8007c7e:	d12f      	bne.n	8007ce0 <_strtod_l+0x378>
 8007c80:	4995      	ldr	r1, [pc, #596]	; (8007ed8 <_strtod_l+0x570>)
 8007c82:	aa1c      	add	r2, sp, #112	; 0x70
 8007c84:	a819      	add	r0, sp, #100	; 0x64
 8007c86:	f002 fef1 	bl	800aa6c <__hexnan>
 8007c8a:	2805      	cmp	r0, #5
 8007c8c:	d128      	bne.n	8007ce0 <_strtod_l+0x378>
 8007c8e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007c90:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8007c94:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8007c98:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8007c9c:	e69d      	b.n	80079da <_strtod_l+0x72>
 8007c9e:	210a      	movs	r1, #10
 8007ca0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007ca2:	fb01 2107 	mla	r1, r1, r7, r2
 8007ca6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8007caa:	9209      	str	r2, [sp, #36]	; 0x24
 8007cac:	e7b5      	b.n	8007c1a <_strtod_l+0x2b2>
 8007cae:	2a6e      	cmp	r2, #110	; 0x6e
 8007cb0:	e7d9      	b.n	8007c66 <_strtod_l+0x2fe>
 8007cb2:	498a      	ldr	r1, [pc, #552]	; (8007edc <_strtod_l+0x574>)
 8007cb4:	a819      	add	r0, sp, #100	; 0x64
 8007cb6:	f002 fec5 	bl	800aa44 <__match>
 8007cba:	2800      	cmp	r0, #0
 8007cbc:	f43f aea8 	beq.w	8007a10 <_strtod_l+0xa8>
 8007cc0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007cc2:	4987      	ldr	r1, [pc, #540]	; (8007ee0 <_strtod_l+0x578>)
 8007cc4:	3b01      	subs	r3, #1
 8007cc6:	a819      	add	r0, sp, #100	; 0x64
 8007cc8:	9319      	str	r3, [sp, #100]	; 0x64
 8007cca:	f002 febb 	bl	800aa44 <__match>
 8007cce:	b910      	cbnz	r0, 8007cd6 <_strtod_l+0x36e>
 8007cd0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007cd2:	3301      	adds	r3, #1
 8007cd4:	9319      	str	r3, [sp, #100]	; 0x64
 8007cd6:	f04f 0800 	mov.w	r8, #0
 8007cda:	f8df 9208 	ldr.w	r9, [pc, #520]	; 8007ee4 <_strtod_l+0x57c>
 8007cde:	e67c      	b.n	80079da <_strtod_l+0x72>
 8007ce0:	4881      	ldr	r0, [pc, #516]	; (8007ee8 <_strtod_l+0x580>)
 8007ce2:	f001 fd43 	bl	800976c <nan>
 8007ce6:	4680      	mov	r8, r0
 8007ce8:	4689      	mov	r9, r1
 8007cea:	e676      	b.n	80079da <_strtod_l+0x72>
 8007cec:	9b08      	ldr	r3, [sp, #32]
 8007cee:	f1bb 0f00 	cmp.w	fp, #0
 8007cf2:	bf08      	it	eq
 8007cf4:	46b3      	moveq	fp, r6
 8007cf6:	1afb      	subs	r3, r7, r3
 8007cf8:	2e10      	cmp	r6, #16
 8007cfa:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007cfc:	4635      	mov	r5, r6
 8007cfe:	9309      	str	r3, [sp, #36]	; 0x24
 8007d00:	bfa8      	it	ge
 8007d02:	2510      	movge	r5, #16
 8007d04:	f7f8 fb78 	bl	80003f8 <__aeabi_ui2d>
 8007d08:	2e09      	cmp	r6, #9
 8007d0a:	4680      	mov	r8, r0
 8007d0c:	4689      	mov	r9, r1
 8007d0e:	dd13      	ble.n	8007d38 <_strtod_l+0x3d0>
 8007d10:	4b76      	ldr	r3, [pc, #472]	; (8007eec <_strtod_l+0x584>)
 8007d12:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007d16:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007d1a:	f7f8 fbe7 	bl	80004ec <__aeabi_dmul>
 8007d1e:	4680      	mov	r8, r0
 8007d20:	4650      	mov	r0, sl
 8007d22:	4689      	mov	r9, r1
 8007d24:	f7f8 fb68 	bl	80003f8 <__aeabi_ui2d>
 8007d28:	4602      	mov	r2, r0
 8007d2a:	460b      	mov	r3, r1
 8007d2c:	4640      	mov	r0, r8
 8007d2e:	4649      	mov	r1, r9
 8007d30:	f7f8 fa26 	bl	8000180 <__adddf3>
 8007d34:	4680      	mov	r8, r0
 8007d36:	4689      	mov	r9, r1
 8007d38:	2e0f      	cmp	r6, #15
 8007d3a:	dc36      	bgt.n	8007daa <_strtod_l+0x442>
 8007d3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	f43f ae4b 	beq.w	80079da <_strtod_l+0x72>
 8007d44:	dd22      	ble.n	8007d8c <_strtod_l+0x424>
 8007d46:	2b16      	cmp	r3, #22
 8007d48:	dc09      	bgt.n	8007d5e <_strtod_l+0x3f6>
 8007d4a:	4968      	ldr	r1, [pc, #416]	; (8007eec <_strtod_l+0x584>)
 8007d4c:	4642      	mov	r2, r8
 8007d4e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007d52:	464b      	mov	r3, r9
 8007d54:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d58:	f7f8 fbc8 	bl	80004ec <__aeabi_dmul>
 8007d5c:	e7c3      	b.n	8007ce6 <_strtod_l+0x37e>
 8007d5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d60:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8007d64:	4293      	cmp	r3, r2
 8007d66:	db20      	blt.n	8007daa <_strtod_l+0x442>
 8007d68:	4c60      	ldr	r4, [pc, #384]	; (8007eec <_strtod_l+0x584>)
 8007d6a:	f1c6 060f 	rsb	r6, r6, #15
 8007d6e:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8007d72:	4642      	mov	r2, r8
 8007d74:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d78:	464b      	mov	r3, r9
 8007d7a:	f7f8 fbb7 	bl	80004ec <__aeabi_dmul>
 8007d7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d80:	1b9e      	subs	r6, r3, r6
 8007d82:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8007d86:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007d8a:	e7e5      	b.n	8007d58 <_strtod_l+0x3f0>
 8007d8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d8e:	3316      	adds	r3, #22
 8007d90:	db0b      	blt.n	8007daa <_strtod_l+0x442>
 8007d92:	9b08      	ldr	r3, [sp, #32]
 8007d94:	4640      	mov	r0, r8
 8007d96:	1bdf      	subs	r7, r3, r7
 8007d98:	4b54      	ldr	r3, [pc, #336]	; (8007eec <_strtod_l+0x584>)
 8007d9a:	4649      	mov	r1, r9
 8007d9c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007da0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007da4:	f7f8 fccc 	bl	8000740 <__aeabi_ddiv>
 8007da8:	e79d      	b.n	8007ce6 <_strtod_l+0x37e>
 8007daa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007dac:	1b75      	subs	r5, r6, r5
 8007dae:	441d      	add	r5, r3
 8007db0:	2d00      	cmp	r5, #0
 8007db2:	dd70      	ble.n	8007e96 <_strtod_l+0x52e>
 8007db4:	f015 030f 	ands.w	r3, r5, #15
 8007db8:	d00a      	beq.n	8007dd0 <_strtod_l+0x468>
 8007dba:	494c      	ldr	r1, [pc, #304]	; (8007eec <_strtod_l+0x584>)
 8007dbc:	4642      	mov	r2, r8
 8007dbe:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007dc2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007dc6:	464b      	mov	r3, r9
 8007dc8:	f7f8 fb90 	bl	80004ec <__aeabi_dmul>
 8007dcc:	4680      	mov	r8, r0
 8007dce:	4689      	mov	r9, r1
 8007dd0:	f035 050f 	bics.w	r5, r5, #15
 8007dd4:	d04d      	beq.n	8007e72 <_strtod_l+0x50a>
 8007dd6:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8007dda:	dd22      	ble.n	8007e22 <_strtod_l+0x4ba>
 8007ddc:	2600      	movs	r6, #0
 8007dde:	46b3      	mov	fp, r6
 8007de0:	960b      	str	r6, [sp, #44]	; 0x2c
 8007de2:	9608      	str	r6, [sp, #32]
 8007de4:	2322      	movs	r3, #34	; 0x22
 8007de6:	f04f 0800 	mov.w	r8, #0
 8007dea:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8007ee4 <_strtod_l+0x57c>
 8007dee:	6023      	str	r3, [r4, #0]
 8007df0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	f43f adf1 	beq.w	80079da <_strtod_l+0x72>
 8007df8:	4620      	mov	r0, r4
 8007dfa:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007dfc:	f002 ffd8 	bl	800adb0 <_Bfree>
 8007e00:	4620      	mov	r0, r4
 8007e02:	9908      	ldr	r1, [sp, #32]
 8007e04:	f002 ffd4 	bl	800adb0 <_Bfree>
 8007e08:	4659      	mov	r1, fp
 8007e0a:	4620      	mov	r0, r4
 8007e0c:	f002 ffd0 	bl	800adb0 <_Bfree>
 8007e10:	4620      	mov	r0, r4
 8007e12:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007e14:	f002 ffcc 	bl	800adb0 <_Bfree>
 8007e18:	4631      	mov	r1, r6
 8007e1a:	4620      	mov	r0, r4
 8007e1c:	f002 ffc8 	bl	800adb0 <_Bfree>
 8007e20:	e5db      	b.n	80079da <_strtod_l+0x72>
 8007e22:	4b33      	ldr	r3, [pc, #204]	; (8007ef0 <_strtod_l+0x588>)
 8007e24:	4640      	mov	r0, r8
 8007e26:	9305      	str	r3, [sp, #20]
 8007e28:	2300      	movs	r3, #0
 8007e2a:	4649      	mov	r1, r9
 8007e2c:	469a      	mov	sl, r3
 8007e2e:	112d      	asrs	r5, r5, #4
 8007e30:	2d01      	cmp	r5, #1
 8007e32:	dc21      	bgt.n	8007e78 <_strtod_l+0x510>
 8007e34:	b10b      	cbz	r3, 8007e3a <_strtod_l+0x4d2>
 8007e36:	4680      	mov	r8, r0
 8007e38:	4689      	mov	r9, r1
 8007e3a:	492d      	ldr	r1, [pc, #180]	; (8007ef0 <_strtod_l+0x588>)
 8007e3c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8007e40:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007e44:	4642      	mov	r2, r8
 8007e46:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e4a:	464b      	mov	r3, r9
 8007e4c:	f7f8 fb4e 	bl	80004ec <__aeabi_dmul>
 8007e50:	4b24      	ldr	r3, [pc, #144]	; (8007ee4 <_strtod_l+0x57c>)
 8007e52:	460a      	mov	r2, r1
 8007e54:	400b      	ands	r3, r1
 8007e56:	4927      	ldr	r1, [pc, #156]	; (8007ef4 <_strtod_l+0x58c>)
 8007e58:	4680      	mov	r8, r0
 8007e5a:	428b      	cmp	r3, r1
 8007e5c:	d8be      	bhi.n	8007ddc <_strtod_l+0x474>
 8007e5e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007e62:	428b      	cmp	r3, r1
 8007e64:	bf86      	itte	hi
 8007e66:	f04f 38ff 	movhi.w	r8, #4294967295
 8007e6a:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 8007ef8 <_strtod_l+0x590>
 8007e6e:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8007e72:	2300      	movs	r3, #0
 8007e74:	9305      	str	r3, [sp, #20]
 8007e76:	e07b      	b.n	8007f70 <_strtod_l+0x608>
 8007e78:	07ea      	lsls	r2, r5, #31
 8007e7a:	d505      	bpl.n	8007e88 <_strtod_l+0x520>
 8007e7c:	9b05      	ldr	r3, [sp, #20]
 8007e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e82:	f7f8 fb33 	bl	80004ec <__aeabi_dmul>
 8007e86:	2301      	movs	r3, #1
 8007e88:	9a05      	ldr	r2, [sp, #20]
 8007e8a:	f10a 0a01 	add.w	sl, sl, #1
 8007e8e:	3208      	adds	r2, #8
 8007e90:	106d      	asrs	r5, r5, #1
 8007e92:	9205      	str	r2, [sp, #20]
 8007e94:	e7cc      	b.n	8007e30 <_strtod_l+0x4c8>
 8007e96:	d0ec      	beq.n	8007e72 <_strtod_l+0x50a>
 8007e98:	426d      	negs	r5, r5
 8007e9a:	f015 020f 	ands.w	r2, r5, #15
 8007e9e:	d00a      	beq.n	8007eb6 <_strtod_l+0x54e>
 8007ea0:	4b12      	ldr	r3, [pc, #72]	; (8007eec <_strtod_l+0x584>)
 8007ea2:	4640      	mov	r0, r8
 8007ea4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007ea8:	4649      	mov	r1, r9
 8007eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eae:	f7f8 fc47 	bl	8000740 <__aeabi_ddiv>
 8007eb2:	4680      	mov	r8, r0
 8007eb4:	4689      	mov	r9, r1
 8007eb6:	112d      	asrs	r5, r5, #4
 8007eb8:	d0db      	beq.n	8007e72 <_strtod_l+0x50a>
 8007eba:	2d1f      	cmp	r5, #31
 8007ebc:	dd1e      	ble.n	8007efc <_strtod_l+0x594>
 8007ebe:	2600      	movs	r6, #0
 8007ec0:	46b3      	mov	fp, r6
 8007ec2:	960b      	str	r6, [sp, #44]	; 0x2c
 8007ec4:	9608      	str	r6, [sp, #32]
 8007ec6:	2322      	movs	r3, #34	; 0x22
 8007ec8:	f04f 0800 	mov.w	r8, #0
 8007ecc:	f04f 0900 	mov.w	r9, #0
 8007ed0:	6023      	str	r3, [r4, #0]
 8007ed2:	e78d      	b.n	8007df0 <_strtod_l+0x488>
 8007ed4:	0800cc4e 	.word	0x0800cc4e
 8007ed8:	0800cb00 	.word	0x0800cb00
 8007edc:	0800cc46 	.word	0x0800cc46
 8007ee0:	0800cc85 	.word	0x0800cc85
 8007ee4:	7ff00000 	.word	0x7ff00000
 8007ee8:	0800cf10 	.word	0x0800cf10
 8007eec:	0800cdf0 	.word	0x0800cdf0
 8007ef0:	0800cdc8 	.word	0x0800cdc8
 8007ef4:	7ca00000 	.word	0x7ca00000
 8007ef8:	7fefffff 	.word	0x7fefffff
 8007efc:	f015 0310 	ands.w	r3, r5, #16
 8007f00:	bf18      	it	ne
 8007f02:	236a      	movne	r3, #106	; 0x6a
 8007f04:	4640      	mov	r0, r8
 8007f06:	9305      	str	r3, [sp, #20]
 8007f08:	4649      	mov	r1, r9
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 80081d8 <_strtod_l+0x870>
 8007f10:	07ea      	lsls	r2, r5, #31
 8007f12:	d504      	bpl.n	8007f1e <_strtod_l+0x5b6>
 8007f14:	e9da 2300 	ldrd	r2, r3, [sl]
 8007f18:	f7f8 fae8 	bl	80004ec <__aeabi_dmul>
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	106d      	asrs	r5, r5, #1
 8007f20:	f10a 0a08 	add.w	sl, sl, #8
 8007f24:	d1f4      	bne.n	8007f10 <_strtod_l+0x5a8>
 8007f26:	b10b      	cbz	r3, 8007f2c <_strtod_l+0x5c4>
 8007f28:	4680      	mov	r8, r0
 8007f2a:	4689      	mov	r9, r1
 8007f2c:	9b05      	ldr	r3, [sp, #20]
 8007f2e:	b1bb      	cbz	r3, 8007f60 <_strtod_l+0x5f8>
 8007f30:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8007f34:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	4649      	mov	r1, r9
 8007f3c:	dd10      	ble.n	8007f60 <_strtod_l+0x5f8>
 8007f3e:	2b1f      	cmp	r3, #31
 8007f40:	f340 8128 	ble.w	8008194 <_strtod_l+0x82c>
 8007f44:	2b34      	cmp	r3, #52	; 0x34
 8007f46:	bfd8      	it	le
 8007f48:	f04f 33ff 	movle.w	r3, #4294967295
 8007f4c:	f04f 0800 	mov.w	r8, #0
 8007f50:	bfcf      	iteee	gt
 8007f52:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8007f56:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8007f5a:	4093      	lslle	r3, r2
 8007f5c:	ea03 0901 	andle.w	r9, r3, r1
 8007f60:	2200      	movs	r2, #0
 8007f62:	2300      	movs	r3, #0
 8007f64:	4640      	mov	r0, r8
 8007f66:	4649      	mov	r1, r9
 8007f68:	f7f8 fd28 	bl	80009bc <__aeabi_dcmpeq>
 8007f6c:	2800      	cmp	r0, #0
 8007f6e:	d1a6      	bne.n	8007ebe <_strtod_l+0x556>
 8007f70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f72:	465a      	mov	r2, fp
 8007f74:	9300      	str	r3, [sp, #0]
 8007f76:	4620      	mov	r0, r4
 8007f78:	4633      	mov	r3, r6
 8007f7a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007f7c:	f002 ff80 	bl	800ae80 <__s2b>
 8007f80:	900b      	str	r0, [sp, #44]	; 0x2c
 8007f82:	2800      	cmp	r0, #0
 8007f84:	f43f af2a 	beq.w	8007ddc <_strtod_l+0x474>
 8007f88:	2600      	movs	r6, #0
 8007f8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f8c:	9b08      	ldr	r3, [sp, #32]
 8007f8e:	2a00      	cmp	r2, #0
 8007f90:	eba3 0307 	sub.w	r3, r3, r7
 8007f94:	bfa8      	it	ge
 8007f96:	2300      	movge	r3, #0
 8007f98:	46b3      	mov	fp, r6
 8007f9a:	9312      	str	r3, [sp, #72]	; 0x48
 8007f9c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007fa0:	9316      	str	r3, [sp, #88]	; 0x58
 8007fa2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007fa4:	4620      	mov	r0, r4
 8007fa6:	6859      	ldr	r1, [r3, #4]
 8007fa8:	f002 fec2 	bl	800ad30 <_Balloc>
 8007fac:	9008      	str	r0, [sp, #32]
 8007fae:	2800      	cmp	r0, #0
 8007fb0:	f43f af18 	beq.w	8007de4 <_strtod_l+0x47c>
 8007fb4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007fb6:	300c      	adds	r0, #12
 8007fb8:	691a      	ldr	r2, [r3, #16]
 8007fba:	f103 010c 	add.w	r1, r3, #12
 8007fbe:	3202      	adds	r2, #2
 8007fc0:	0092      	lsls	r2, r2, #2
 8007fc2:	f001 fbc4 	bl	800974e <memcpy>
 8007fc6:	ab1c      	add	r3, sp, #112	; 0x70
 8007fc8:	9301      	str	r3, [sp, #4]
 8007fca:	ab1b      	add	r3, sp, #108	; 0x6c
 8007fcc:	9300      	str	r3, [sp, #0]
 8007fce:	4642      	mov	r2, r8
 8007fd0:	464b      	mov	r3, r9
 8007fd2:	4620      	mov	r0, r4
 8007fd4:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8007fd8:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 8007fdc:	f003 fa7c 	bl	800b4d8 <__d2b>
 8007fe0:	901a      	str	r0, [sp, #104]	; 0x68
 8007fe2:	2800      	cmp	r0, #0
 8007fe4:	f43f aefe 	beq.w	8007de4 <_strtod_l+0x47c>
 8007fe8:	2101      	movs	r1, #1
 8007fea:	4620      	mov	r0, r4
 8007fec:	f002 ffe0 	bl	800afb0 <__i2b>
 8007ff0:	4683      	mov	fp, r0
 8007ff2:	2800      	cmp	r0, #0
 8007ff4:	f43f aef6 	beq.w	8007de4 <_strtod_l+0x47c>
 8007ff8:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8007ffa:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007ffc:	2f00      	cmp	r7, #0
 8007ffe:	bfab      	itete	ge
 8008000:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 8008002:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8008004:	eb07 0a03 	addge.w	sl, r7, r3
 8008008:	1bdd      	sublt	r5, r3, r7
 800800a:	9b05      	ldr	r3, [sp, #20]
 800800c:	bfa8      	it	ge
 800800e:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8008010:	eba7 0703 	sub.w	r7, r7, r3
 8008014:	4417      	add	r7, r2
 8008016:	4b71      	ldr	r3, [pc, #452]	; (80081dc <_strtod_l+0x874>)
 8008018:	f107 37ff 	add.w	r7, r7, #4294967295
 800801c:	bfb8      	it	lt
 800801e:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 8008022:	429f      	cmp	r7, r3
 8008024:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008028:	f280 80c7 	bge.w	80081ba <_strtod_l+0x852>
 800802c:	1bdb      	subs	r3, r3, r7
 800802e:	2b1f      	cmp	r3, #31
 8008030:	f04f 0101 	mov.w	r1, #1
 8008034:	eba2 0203 	sub.w	r2, r2, r3
 8008038:	f300 80b3 	bgt.w	80081a2 <_strtod_l+0x83a>
 800803c:	fa01 f303 	lsl.w	r3, r1, r3
 8008040:	9313      	str	r3, [sp, #76]	; 0x4c
 8008042:	2300      	movs	r3, #0
 8008044:	9310      	str	r3, [sp, #64]	; 0x40
 8008046:	eb0a 0702 	add.w	r7, sl, r2
 800804a:	9b05      	ldr	r3, [sp, #20]
 800804c:	45ba      	cmp	sl, r7
 800804e:	4415      	add	r5, r2
 8008050:	441d      	add	r5, r3
 8008052:	4653      	mov	r3, sl
 8008054:	bfa8      	it	ge
 8008056:	463b      	movge	r3, r7
 8008058:	42ab      	cmp	r3, r5
 800805a:	bfa8      	it	ge
 800805c:	462b      	movge	r3, r5
 800805e:	2b00      	cmp	r3, #0
 8008060:	bfc2      	ittt	gt
 8008062:	1aff      	subgt	r7, r7, r3
 8008064:	1aed      	subgt	r5, r5, r3
 8008066:	ebaa 0a03 	subgt.w	sl, sl, r3
 800806a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800806c:	2b00      	cmp	r3, #0
 800806e:	dd17      	ble.n	80080a0 <_strtod_l+0x738>
 8008070:	4659      	mov	r1, fp
 8008072:	461a      	mov	r2, r3
 8008074:	4620      	mov	r0, r4
 8008076:	f003 f859 	bl	800b12c <__pow5mult>
 800807a:	4683      	mov	fp, r0
 800807c:	2800      	cmp	r0, #0
 800807e:	f43f aeb1 	beq.w	8007de4 <_strtod_l+0x47c>
 8008082:	4601      	mov	r1, r0
 8008084:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008086:	4620      	mov	r0, r4
 8008088:	f002 ffa8 	bl	800afdc <__multiply>
 800808c:	900a      	str	r0, [sp, #40]	; 0x28
 800808e:	2800      	cmp	r0, #0
 8008090:	f43f aea8 	beq.w	8007de4 <_strtod_l+0x47c>
 8008094:	4620      	mov	r0, r4
 8008096:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008098:	f002 fe8a 	bl	800adb0 <_Bfree>
 800809c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800809e:	931a      	str	r3, [sp, #104]	; 0x68
 80080a0:	2f00      	cmp	r7, #0
 80080a2:	f300 808f 	bgt.w	80081c4 <_strtod_l+0x85c>
 80080a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	dd08      	ble.n	80080be <_strtod_l+0x756>
 80080ac:	4620      	mov	r0, r4
 80080ae:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80080b0:	9908      	ldr	r1, [sp, #32]
 80080b2:	f003 f83b 	bl	800b12c <__pow5mult>
 80080b6:	9008      	str	r0, [sp, #32]
 80080b8:	2800      	cmp	r0, #0
 80080ba:	f43f ae93 	beq.w	8007de4 <_strtod_l+0x47c>
 80080be:	2d00      	cmp	r5, #0
 80080c0:	dd08      	ble.n	80080d4 <_strtod_l+0x76c>
 80080c2:	462a      	mov	r2, r5
 80080c4:	4620      	mov	r0, r4
 80080c6:	9908      	ldr	r1, [sp, #32]
 80080c8:	f003 f88a 	bl	800b1e0 <__lshift>
 80080cc:	9008      	str	r0, [sp, #32]
 80080ce:	2800      	cmp	r0, #0
 80080d0:	f43f ae88 	beq.w	8007de4 <_strtod_l+0x47c>
 80080d4:	f1ba 0f00 	cmp.w	sl, #0
 80080d8:	dd08      	ble.n	80080ec <_strtod_l+0x784>
 80080da:	4659      	mov	r1, fp
 80080dc:	4652      	mov	r2, sl
 80080de:	4620      	mov	r0, r4
 80080e0:	f003 f87e 	bl	800b1e0 <__lshift>
 80080e4:	4683      	mov	fp, r0
 80080e6:	2800      	cmp	r0, #0
 80080e8:	f43f ae7c 	beq.w	8007de4 <_strtod_l+0x47c>
 80080ec:	4620      	mov	r0, r4
 80080ee:	9a08      	ldr	r2, [sp, #32]
 80080f0:	991a      	ldr	r1, [sp, #104]	; 0x68
 80080f2:	f003 f8fd 	bl	800b2f0 <__mdiff>
 80080f6:	4606      	mov	r6, r0
 80080f8:	2800      	cmp	r0, #0
 80080fa:	f43f ae73 	beq.w	8007de4 <_strtod_l+0x47c>
 80080fe:	2500      	movs	r5, #0
 8008100:	68c3      	ldr	r3, [r0, #12]
 8008102:	4659      	mov	r1, fp
 8008104:	60c5      	str	r5, [r0, #12]
 8008106:	930a      	str	r3, [sp, #40]	; 0x28
 8008108:	f003 f8d6 	bl	800b2b8 <__mcmp>
 800810c:	42a8      	cmp	r0, r5
 800810e:	da6b      	bge.n	80081e8 <_strtod_l+0x880>
 8008110:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008112:	ea53 0308 	orrs.w	r3, r3, r8
 8008116:	f040 808f 	bne.w	8008238 <_strtod_l+0x8d0>
 800811a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800811e:	2b00      	cmp	r3, #0
 8008120:	f040 808a 	bne.w	8008238 <_strtod_l+0x8d0>
 8008124:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008128:	0d1b      	lsrs	r3, r3, #20
 800812a:	051b      	lsls	r3, r3, #20
 800812c:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008130:	f240 8082 	bls.w	8008238 <_strtod_l+0x8d0>
 8008134:	6973      	ldr	r3, [r6, #20]
 8008136:	b913      	cbnz	r3, 800813e <_strtod_l+0x7d6>
 8008138:	6933      	ldr	r3, [r6, #16]
 800813a:	2b01      	cmp	r3, #1
 800813c:	dd7c      	ble.n	8008238 <_strtod_l+0x8d0>
 800813e:	4631      	mov	r1, r6
 8008140:	2201      	movs	r2, #1
 8008142:	4620      	mov	r0, r4
 8008144:	f003 f84c 	bl	800b1e0 <__lshift>
 8008148:	4659      	mov	r1, fp
 800814a:	4606      	mov	r6, r0
 800814c:	f003 f8b4 	bl	800b2b8 <__mcmp>
 8008150:	2800      	cmp	r0, #0
 8008152:	dd71      	ble.n	8008238 <_strtod_l+0x8d0>
 8008154:	9905      	ldr	r1, [sp, #20]
 8008156:	464b      	mov	r3, r9
 8008158:	4a21      	ldr	r2, [pc, #132]	; (80081e0 <_strtod_l+0x878>)
 800815a:	2900      	cmp	r1, #0
 800815c:	f000 808d 	beq.w	800827a <_strtod_l+0x912>
 8008160:	ea02 0109 	and.w	r1, r2, r9
 8008164:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008168:	f300 8087 	bgt.w	800827a <_strtod_l+0x912>
 800816c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008170:	f77f aea9 	ble.w	8007ec6 <_strtod_l+0x55e>
 8008174:	4640      	mov	r0, r8
 8008176:	4649      	mov	r1, r9
 8008178:	4b1a      	ldr	r3, [pc, #104]	; (80081e4 <_strtod_l+0x87c>)
 800817a:	2200      	movs	r2, #0
 800817c:	f7f8 f9b6 	bl	80004ec <__aeabi_dmul>
 8008180:	4b17      	ldr	r3, [pc, #92]	; (80081e0 <_strtod_l+0x878>)
 8008182:	4680      	mov	r8, r0
 8008184:	400b      	ands	r3, r1
 8008186:	4689      	mov	r9, r1
 8008188:	2b00      	cmp	r3, #0
 800818a:	f47f ae35 	bne.w	8007df8 <_strtod_l+0x490>
 800818e:	2322      	movs	r3, #34	; 0x22
 8008190:	6023      	str	r3, [r4, #0]
 8008192:	e631      	b.n	8007df8 <_strtod_l+0x490>
 8008194:	f04f 32ff 	mov.w	r2, #4294967295
 8008198:	fa02 f303 	lsl.w	r3, r2, r3
 800819c:	ea03 0808 	and.w	r8, r3, r8
 80081a0:	e6de      	b.n	8007f60 <_strtod_l+0x5f8>
 80081a2:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 80081a6:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 80081aa:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 80081ae:	37e2      	adds	r7, #226	; 0xe2
 80081b0:	fa01 f307 	lsl.w	r3, r1, r7
 80081b4:	9310      	str	r3, [sp, #64]	; 0x40
 80081b6:	9113      	str	r1, [sp, #76]	; 0x4c
 80081b8:	e745      	b.n	8008046 <_strtod_l+0x6de>
 80081ba:	2300      	movs	r3, #0
 80081bc:	9310      	str	r3, [sp, #64]	; 0x40
 80081be:	2301      	movs	r3, #1
 80081c0:	9313      	str	r3, [sp, #76]	; 0x4c
 80081c2:	e740      	b.n	8008046 <_strtod_l+0x6de>
 80081c4:	463a      	mov	r2, r7
 80081c6:	4620      	mov	r0, r4
 80081c8:	991a      	ldr	r1, [sp, #104]	; 0x68
 80081ca:	f003 f809 	bl	800b1e0 <__lshift>
 80081ce:	901a      	str	r0, [sp, #104]	; 0x68
 80081d0:	2800      	cmp	r0, #0
 80081d2:	f47f af68 	bne.w	80080a6 <_strtod_l+0x73e>
 80081d6:	e605      	b.n	8007de4 <_strtod_l+0x47c>
 80081d8:	0800cb18 	.word	0x0800cb18
 80081dc:	fffffc02 	.word	0xfffffc02
 80081e0:	7ff00000 	.word	0x7ff00000
 80081e4:	39500000 	.word	0x39500000
 80081e8:	46ca      	mov	sl, r9
 80081ea:	d165      	bne.n	80082b8 <_strtod_l+0x950>
 80081ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80081ee:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80081f2:	b352      	cbz	r2, 800824a <_strtod_l+0x8e2>
 80081f4:	4a9e      	ldr	r2, [pc, #632]	; (8008470 <_strtod_l+0xb08>)
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d12a      	bne.n	8008250 <_strtod_l+0x8e8>
 80081fa:	9b05      	ldr	r3, [sp, #20]
 80081fc:	4641      	mov	r1, r8
 80081fe:	b1fb      	cbz	r3, 8008240 <_strtod_l+0x8d8>
 8008200:	4b9c      	ldr	r3, [pc, #624]	; (8008474 <_strtod_l+0xb0c>)
 8008202:	f04f 32ff 	mov.w	r2, #4294967295
 8008206:	ea09 0303 	and.w	r3, r9, r3
 800820a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800820e:	d81a      	bhi.n	8008246 <_strtod_l+0x8de>
 8008210:	0d1b      	lsrs	r3, r3, #20
 8008212:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008216:	fa02 f303 	lsl.w	r3, r2, r3
 800821a:	4299      	cmp	r1, r3
 800821c:	d118      	bne.n	8008250 <_strtod_l+0x8e8>
 800821e:	4b96      	ldr	r3, [pc, #600]	; (8008478 <_strtod_l+0xb10>)
 8008220:	459a      	cmp	sl, r3
 8008222:	d102      	bne.n	800822a <_strtod_l+0x8c2>
 8008224:	3101      	adds	r1, #1
 8008226:	f43f addd 	beq.w	8007de4 <_strtod_l+0x47c>
 800822a:	f04f 0800 	mov.w	r8, #0
 800822e:	4b91      	ldr	r3, [pc, #580]	; (8008474 <_strtod_l+0xb0c>)
 8008230:	ea0a 0303 	and.w	r3, sl, r3
 8008234:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8008238:	9b05      	ldr	r3, [sp, #20]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d19a      	bne.n	8008174 <_strtod_l+0x80c>
 800823e:	e5db      	b.n	8007df8 <_strtod_l+0x490>
 8008240:	f04f 33ff 	mov.w	r3, #4294967295
 8008244:	e7e9      	b.n	800821a <_strtod_l+0x8b2>
 8008246:	4613      	mov	r3, r2
 8008248:	e7e7      	b.n	800821a <_strtod_l+0x8b2>
 800824a:	ea53 0308 	orrs.w	r3, r3, r8
 800824e:	d081      	beq.n	8008154 <_strtod_l+0x7ec>
 8008250:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008252:	b1e3      	cbz	r3, 800828e <_strtod_l+0x926>
 8008254:	ea13 0f0a 	tst.w	r3, sl
 8008258:	d0ee      	beq.n	8008238 <_strtod_l+0x8d0>
 800825a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800825c:	4640      	mov	r0, r8
 800825e:	4649      	mov	r1, r9
 8008260:	9a05      	ldr	r2, [sp, #20]
 8008262:	b1c3      	cbz	r3, 8008296 <_strtod_l+0x92e>
 8008264:	f7ff fb5d 	bl	8007922 <sulp>
 8008268:	4602      	mov	r2, r0
 800826a:	460b      	mov	r3, r1
 800826c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800826e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008270:	f7f7 ff86 	bl	8000180 <__adddf3>
 8008274:	4680      	mov	r8, r0
 8008276:	4689      	mov	r9, r1
 8008278:	e7de      	b.n	8008238 <_strtod_l+0x8d0>
 800827a:	4013      	ands	r3, r2
 800827c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008280:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8008284:	f04f 38ff 	mov.w	r8, #4294967295
 8008288:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800828c:	e7d4      	b.n	8008238 <_strtod_l+0x8d0>
 800828e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008290:	ea13 0f08 	tst.w	r3, r8
 8008294:	e7e0      	b.n	8008258 <_strtod_l+0x8f0>
 8008296:	f7ff fb44 	bl	8007922 <sulp>
 800829a:	4602      	mov	r2, r0
 800829c:	460b      	mov	r3, r1
 800829e:	980c      	ldr	r0, [sp, #48]	; 0x30
 80082a0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80082a2:	f7f7 ff6b 	bl	800017c <__aeabi_dsub>
 80082a6:	2200      	movs	r2, #0
 80082a8:	2300      	movs	r3, #0
 80082aa:	4680      	mov	r8, r0
 80082ac:	4689      	mov	r9, r1
 80082ae:	f7f8 fb85 	bl	80009bc <__aeabi_dcmpeq>
 80082b2:	2800      	cmp	r0, #0
 80082b4:	d0c0      	beq.n	8008238 <_strtod_l+0x8d0>
 80082b6:	e606      	b.n	8007ec6 <_strtod_l+0x55e>
 80082b8:	4659      	mov	r1, fp
 80082ba:	4630      	mov	r0, r6
 80082bc:	f003 f962 	bl	800b584 <__ratio>
 80082c0:	4602      	mov	r2, r0
 80082c2:	460b      	mov	r3, r1
 80082c4:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80082c8:	2200      	movs	r2, #0
 80082ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80082ce:	f7f8 fb89 	bl	80009e4 <__aeabi_dcmple>
 80082d2:	2800      	cmp	r0, #0
 80082d4:	d06f      	beq.n	80083b6 <_strtod_l+0xa4e>
 80082d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d17c      	bne.n	80083d6 <_strtod_l+0xa6e>
 80082dc:	f1b8 0f00 	cmp.w	r8, #0
 80082e0:	d159      	bne.n	8008396 <_strtod_l+0xa2e>
 80082e2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d17b      	bne.n	80083e2 <_strtod_l+0xa7a>
 80082ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80082ee:	2200      	movs	r2, #0
 80082f0:	4b62      	ldr	r3, [pc, #392]	; (800847c <_strtod_l+0xb14>)
 80082f2:	f7f8 fb6d 	bl	80009d0 <__aeabi_dcmplt>
 80082f6:	2800      	cmp	r0, #0
 80082f8:	d15a      	bne.n	80083b0 <_strtod_l+0xa48>
 80082fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80082fe:	2200      	movs	r2, #0
 8008300:	4b5f      	ldr	r3, [pc, #380]	; (8008480 <_strtod_l+0xb18>)
 8008302:	f7f8 f8f3 	bl	80004ec <__aeabi_dmul>
 8008306:	4605      	mov	r5, r0
 8008308:	460f      	mov	r7, r1
 800830a:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800830e:	9506      	str	r5, [sp, #24]
 8008310:	9307      	str	r3, [sp, #28]
 8008312:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008316:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800831a:	4b56      	ldr	r3, [pc, #344]	; (8008474 <_strtod_l+0xb0c>)
 800831c:	4a55      	ldr	r2, [pc, #340]	; (8008474 <_strtod_l+0xb0c>)
 800831e:	ea0a 0303 	and.w	r3, sl, r3
 8008322:	9313      	str	r3, [sp, #76]	; 0x4c
 8008324:	4b57      	ldr	r3, [pc, #348]	; (8008484 <_strtod_l+0xb1c>)
 8008326:	ea0a 0202 	and.w	r2, sl, r2
 800832a:	429a      	cmp	r2, r3
 800832c:	f040 80b0 	bne.w	8008490 <_strtod_l+0xb28>
 8008330:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8008334:	4640      	mov	r0, r8
 8008336:	4649      	mov	r1, r9
 8008338:	f003 f866 	bl	800b408 <__ulp>
 800833c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008340:	f7f8 f8d4 	bl	80004ec <__aeabi_dmul>
 8008344:	4642      	mov	r2, r8
 8008346:	464b      	mov	r3, r9
 8008348:	f7f7 ff1a 	bl	8000180 <__adddf3>
 800834c:	f8df a124 	ldr.w	sl, [pc, #292]	; 8008474 <_strtod_l+0xb0c>
 8008350:	4a4d      	ldr	r2, [pc, #308]	; (8008488 <_strtod_l+0xb20>)
 8008352:	ea01 0a0a 	and.w	sl, r1, sl
 8008356:	4592      	cmp	sl, r2
 8008358:	4680      	mov	r8, r0
 800835a:	d948      	bls.n	80083ee <_strtod_l+0xa86>
 800835c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800835e:	4b46      	ldr	r3, [pc, #280]	; (8008478 <_strtod_l+0xb10>)
 8008360:	429a      	cmp	r2, r3
 8008362:	d103      	bne.n	800836c <_strtod_l+0xa04>
 8008364:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008366:	3301      	adds	r3, #1
 8008368:	f43f ad3c 	beq.w	8007de4 <_strtod_l+0x47c>
 800836c:	f04f 38ff 	mov.w	r8, #4294967295
 8008370:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8008478 <_strtod_l+0xb10>
 8008374:	4620      	mov	r0, r4
 8008376:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008378:	f002 fd1a 	bl	800adb0 <_Bfree>
 800837c:	4620      	mov	r0, r4
 800837e:	9908      	ldr	r1, [sp, #32]
 8008380:	f002 fd16 	bl	800adb0 <_Bfree>
 8008384:	4659      	mov	r1, fp
 8008386:	4620      	mov	r0, r4
 8008388:	f002 fd12 	bl	800adb0 <_Bfree>
 800838c:	4631      	mov	r1, r6
 800838e:	4620      	mov	r0, r4
 8008390:	f002 fd0e 	bl	800adb0 <_Bfree>
 8008394:	e605      	b.n	8007fa2 <_strtod_l+0x63a>
 8008396:	f1b8 0f01 	cmp.w	r8, #1
 800839a:	d103      	bne.n	80083a4 <_strtod_l+0xa3c>
 800839c:	f1b9 0f00 	cmp.w	r9, #0
 80083a0:	f43f ad91 	beq.w	8007ec6 <_strtod_l+0x55e>
 80083a4:	2200      	movs	r2, #0
 80083a6:	4b39      	ldr	r3, [pc, #228]	; (800848c <_strtod_l+0xb24>)
 80083a8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80083aa:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80083ae:	e016      	b.n	80083de <_strtod_l+0xa76>
 80083b0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80083b2:	4f33      	ldr	r7, [pc, #204]	; (8008480 <_strtod_l+0xb18>)
 80083b4:	e7a9      	b.n	800830a <_strtod_l+0x9a2>
 80083b6:	4b32      	ldr	r3, [pc, #200]	; (8008480 <_strtod_l+0xb18>)
 80083b8:	2200      	movs	r2, #0
 80083ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80083be:	f7f8 f895 	bl	80004ec <__aeabi_dmul>
 80083c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083c4:	4605      	mov	r5, r0
 80083c6:	460f      	mov	r7, r1
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d09e      	beq.n	800830a <_strtod_l+0x9a2>
 80083cc:	4602      	mov	r2, r0
 80083ce:	460b      	mov	r3, r1
 80083d0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80083d4:	e79d      	b.n	8008312 <_strtod_l+0x9aa>
 80083d6:	2200      	movs	r2, #0
 80083d8:	4b28      	ldr	r3, [pc, #160]	; (800847c <_strtod_l+0xb14>)
 80083da:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80083de:	4f27      	ldr	r7, [pc, #156]	; (800847c <_strtod_l+0xb14>)
 80083e0:	e797      	b.n	8008312 <_strtod_l+0x9aa>
 80083e2:	2200      	movs	r2, #0
 80083e4:	4b29      	ldr	r3, [pc, #164]	; (800848c <_strtod_l+0xb24>)
 80083e6:	4645      	mov	r5, r8
 80083e8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80083ec:	e7f7      	b.n	80083de <_strtod_l+0xa76>
 80083ee:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 80083f2:	9b05      	ldr	r3, [sp, #20]
 80083f4:	46ca      	mov	sl, r9
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d1bc      	bne.n	8008374 <_strtod_l+0xa0c>
 80083fa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80083fe:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008400:	0d1b      	lsrs	r3, r3, #20
 8008402:	051b      	lsls	r3, r3, #20
 8008404:	429a      	cmp	r2, r3
 8008406:	d1b5      	bne.n	8008374 <_strtod_l+0xa0c>
 8008408:	4628      	mov	r0, r5
 800840a:	4639      	mov	r1, r7
 800840c:	f7f8 fe8a 	bl	8001124 <__aeabi_d2lz>
 8008410:	f7f8 f83e 	bl	8000490 <__aeabi_l2d>
 8008414:	4602      	mov	r2, r0
 8008416:	460b      	mov	r3, r1
 8008418:	4628      	mov	r0, r5
 800841a:	4639      	mov	r1, r7
 800841c:	f7f7 feae 	bl	800017c <__aeabi_dsub>
 8008420:	460b      	mov	r3, r1
 8008422:	4602      	mov	r2, r0
 8008424:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 8008428:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800842c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800842e:	ea4a 0a08 	orr.w	sl, sl, r8
 8008432:	ea5a 0a03 	orrs.w	sl, sl, r3
 8008436:	d06c      	beq.n	8008512 <_strtod_l+0xbaa>
 8008438:	a309      	add	r3, pc, #36	; (adr r3, 8008460 <_strtod_l+0xaf8>)
 800843a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800843e:	f7f8 fac7 	bl	80009d0 <__aeabi_dcmplt>
 8008442:	2800      	cmp	r0, #0
 8008444:	f47f acd8 	bne.w	8007df8 <_strtod_l+0x490>
 8008448:	a307      	add	r3, pc, #28	; (adr r3, 8008468 <_strtod_l+0xb00>)
 800844a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800844e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008452:	f7f8 fadb 	bl	8000a0c <__aeabi_dcmpgt>
 8008456:	2800      	cmp	r0, #0
 8008458:	d08c      	beq.n	8008374 <_strtod_l+0xa0c>
 800845a:	e4cd      	b.n	8007df8 <_strtod_l+0x490>
 800845c:	f3af 8000 	nop.w
 8008460:	94a03595 	.word	0x94a03595
 8008464:	3fdfffff 	.word	0x3fdfffff
 8008468:	35afe535 	.word	0x35afe535
 800846c:	3fe00000 	.word	0x3fe00000
 8008470:	000fffff 	.word	0x000fffff
 8008474:	7ff00000 	.word	0x7ff00000
 8008478:	7fefffff 	.word	0x7fefffff
 800847c:	3ff00000 	.word	0x3ff00000
 8008480:	3fe00000 	.word	0x3fe00000
 8008484:	7fe00000 	.word	0x7fe00000
 8008488:	7c9fffff 	.word	0x7c9fffff
 800848c:	bff00000 	.word	0xbff00000
 8008490:	9b05      	ldr	r3, [sp, #20]
 8008492:	b333      	cbz	r3, 80084e2 <_strtod_l+0xb7a>
 8008494:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008496:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800849a:	d822      	bhi.n	80084e2 <_strtod_l+0xb7a>
 800849c:	a328      	add	r3, pc, #160	; (adr r3, 8008540 <_strtod_l+0xbd8>)
 800849e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084a2:	4628      	mov	r0, r5
 80084a4:	4639      	mov	r1, r7
 80084a6:	f7f8 fa9d 	bl	80009e4 <__aeabi_dcmple>
 80084aa:	b1a0      	cbz	r0, 80084d6 <_strtod_l+0xb6e>
 80084ac:	4639      	mov	r1, r7
 80084ae:	4628      	mov	r0, r5
 80084b0:	f7f8 faf4 	bl	8000a9c <__aeabi_d2uiz>
 80084b4:	2801      	cmp	r0, #1
 80084b6:	bf38      	it	cc
 80084b8:	2001      	movcc	r0, #1
 80084ba:	f7f7 ff9d 	bl	80003f8 <__aeabi_ui2d>
 80084be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084c0:	4605      	mov	r5, r0
 80084c2:	460f      	mov	r7, r1
 80084c4:	bb03      	cbnz	r3, 8008508 <_strtod_l+0xba0>
 80084c6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80084ca:	9014      	str	r0, [sp, #80]	; 0x50
 80084cc:	9315      	str	r3, [sp, #84]	; 0x54
 80084ce:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80084d2:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80084d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80084d8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80084da:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80084de:	1a9b      	subs	r3, r3, r2
 80084e0:	9311      	str	r3, [sp, #68]	; 0x44
 80084e2:	980c      	ldr	r0, [sp, #48]	; 0x30
 80084e4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80084e6:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 80084ea:	f002 ff8d 	bl	800b408 <__ulp>
 80084ee:	4602      	mov	r2, r0
 80084f0:	460b      	mov	r3, r1
 80084f2:	4640      	mov	r0, r8
 80084f4:	4649      	mov	r1, r9
 80084f6:	f7f7 fff9 	bl	80004ec <__aeabi_dmul>
 80084fa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80084fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80084fe:	f7f7 fe3f 	bl	8000180 <__adddf3>
 8008502:	4680      	mov	r8, r0
 8008504:	4689      	mov	r9, r1
 8008506:	e774      	b.n	80083f2 <_strtod_l+0xa8a>
 8008508:	4602      	mov	r2, r0
 800850a:	460b      	mov	r3, r1
 800850c:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8008510:	e7dd      	b.n	80084ce <_strtod_l+0xb66>
 8008512:	a30d      	add	r3, pc, #52	; (adr r3, 8008548 <_strtod_l+0xbe0>)
 8008514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008518:	f7f8 fa5a 	bl	80009d0 <__aeabi_dcmplt>
 800851c:	e79b      	b.n	8008456 <_strtod_l+0xaee>
 800851e:	2300      	movs	r3, #0
 8008520:	930e      	str	r3, [sp, #56]	; 0x38
 8008522:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008524:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008526:	6013      	str	r3, [r2, #0]
 8008528:	f7ff ba5b 	b.w	80079e2 <_strtod_l+0x7a>
 800852c:	2a65      	cmp	r2, #101	; 0x65
 800852e:	f43f ab52 	beq.w	8007bd6 <_strtod_l+0x26e>
 8008532:	2a45      	cmp	r2, #69	; 0x45
 8008534:	f43f ab4f 	beq.w	8007bd6 <_strtod_l+0x26e>
 8008538:	2301      	movs	r3, #1
 800853a:	f7ff bb87 	b.w	8007c4c <_strtod_l+0x2e4>
 800853e:	bf00      	nop
 8008540:	ffc00000 	.word	0xffc00000
 8008544:	41dfffff 	.word	0x41dfffff
 8008548:	94a03595 	.word	0x94a03595
 800854c:	3fcfffff 	.word	0x3fcfffff

08008550 <_strtod_r>:
 8008550:	4b01      	ldr	r3, [pc, #4]	; (8008558 <_strtod_r+0x8>)
 8008552:	f7ff ba09 	b.w	8007968 <_strtod_l>
 8008556:	bf00      	nop
 8008558:	20000024 	.word	0x20000024

0800855c <strtod>:
 800855c:	460a      	mov	r2, r1
 800855e:	4601      	mov	r1, r0
 8008560:	4802      	ldr	r0, [pc, #8]	; (800856c <strtod+0x10>)
 8008562:	4b03      	ldr	r3, [pc, #12]	; (8008570 <strtod+0x14>)
 8008564:	6800      	ldr	r0, [r0, #0]
 8008566:	f7ff b9ff 	b.w	8007968 <_strtod_l>
 800856a:	bf00      	nop
 800856c:	200001dc 	.word	0x200001dc
 8008570:	20000024 	.word	0x20000024

08008574 <_strtol_l.constprop.0>:
 8008574:	2b01      	cmp	r3, #1
 8008576:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800857a:	4686      	mov	lr, r0
 800857c:	4690      	mov	r8, r2
 800857e:	d001      	beq.n	8008584 <_strtol_l.constprop.0+0x10>
 8008580:	2b24      	cmp	r3, #36	; 0x24
 8008582:	d906      	bls.n	8008592 <_strtol_l.constprop.0+0x1e>
 8008584:	f001 f8a8 	bl	80096d8 <__errno>
 8008588:	2316      	movs	r3, #22
 800858a:	6003      	str	r3, [r0, #0]
 800858c:	2000      	movs	r0, #0
 800858e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008592:	460d      	mov	r5, r1
 8008594:	4835      	ldr	r0, [pc, #212]	; (800866c <_strtol_l.constprop.0+0xf8>)
 8008596:	462a      	mov	r2, r5
 8008598:	f815 4b01 	ldrb.w	r4, [r5], #1
 800859c:	5d06      	ldrb	r6, [r0, r4]
 800859e:	f016 0608 	ands.w	r6, r6, #8
 80085a2:	d1f8      	bne.n	8008596 <_strtol_l.constprop.0+0x22>
 80085a4:	2c2d      	cmp	r4, #45	; 0x2d
 80085a6:	d12e      	bne.n	8008606 <_strtol_l.constprop.0+0x92>
 80085a8:	2601      	movs	r6, #1
 80085aa:	782c      	ldrb	r4, [r5, #0]
 80085ac:	1c95      	adds	r5, r2, #2
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d057      	beq.n	8008662 <_strtol_l.constprop.0+0xee>
 80085b2:	2b10      	cmp	r3, #16
 80085b4:	d109      	bne.n	80085ca <_strtol_l.constprop.0+0x56>
 80085b6:	2c30      	cmp	r4, #48	; 0x30
 80085b8:	d107      	bne.n	80085ca <_strtol_l.constprop.0+0x56>
 80085ba:	782a      	ldrb	r2, [r5, #0]
 80085bc:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80085c0:	2a58      	cmp	r2, #88	; 0x58
 80085c2:	d149      	bne.n	8008658 <_strtol_l.constprop.0+0xe4>
 80085c4:	2310      	movs	r3, #16
 80085c6:	786c      	ldrb	r4, [r5, #1]
 80085c8:	3502      	adds	r5, #2
 80085ca:	2200      	movs	r2, #0
 80085cc:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 80085d0:	f10c 3cff 	add.w	ip, ip, #4294967295
 80085d4:	fbbc f9f3 	udiv	r9, ip, r3
 80085d8:	4610      	mov	r0, r2
 80085da:	fb03 ca19 	mls	sl, r3, r9, ip
 80085de:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80085e2:	2f09      	cmp	r7, #9
 80085e4:	d814      	bhi.n	8008610 <_strtol_l.constprop.0+0x9c>
 80085e6:	463c      	mov	r4, r7
 80085e8:	42a3      	cmp	r3, r4
 80085ea:	dd20      	ble.n	800862e <_strtol_l.constprop.0+0xba>
 80085ec:	1c57      	adds	r7, r2, #1
 80085ee:	d007      	beq.n	8008600 <_strtol_l.constprop.0+0x8c>
 80085f0:	4581      	cmp	r9, r0
 80085f2:	d319      	bcc.n	8008628 <_strtol_l.constprop.0+0xb4>
 80085f4:	d101      	bne.n	80085fa <_strtol_l.constprop.0+0x86>
 80085f6:	45a2      	cmp	sl, r4
 80085f8:	db16      	blt.n	8008628 <_strtol_l.constprop.0+0xb4>
 80085fa:	2201      	movs	r2, #1
 80085fc:	fb00 4003 	mla	r0, r0, r3, r4
 8008600:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008604:	e7eb      	b.n	80085de <_strtol_l.constprop.0+0x6a>
 8008606:	2c2b      	cmp	r4, #43	; 0x2b
 8008608:	bf04      	itt	eq
 800860a:	782c      	ldrbeq	r4, [r5, #0]
 800860c:	1c95      	addeq	r5, r2, #2
 800860e:	e7ce      	b.n	80085ae <_strtol_l.constprop.0+0x3a>
 8008610:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8008614:	2f19      	cmp	r7, #25
 8008616:	d801      	bhi.n	800861c <_strtol_l.constprop.0+0xa8>
 8008618:	3c37      	subs	r4, #55	; 0x37
 800861a:	e7e5      	b.n	80085e8 <_strtol_l.constprop.0+0x74>
 800861c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8008620:	2f19      	cmp	r7, #25
 8008622:	d804      	bhi.n	800862e <_strtol_l.constprop.0+0xba>
 8008624:	3c57      	subs	r4, #87	; 0x57
 8008626:	e7df      	b.n	80085e8 <_strtol_l.constprop.0+0x74>
 8008628:	f04f 32ff 	mov.w	r2, #4294967295
 800862c:	e7e8      	b.n	8008600 <_strtol_l.constprop.0+0x8c>
 800862e:	1c53      	adds	r3, r2, #1
 8008630:	d108      	bne.n	8008644 <_strtol_l.constprop.0+0xd0>
 8008632:	2322      	movs	r3, #34	; 0x22
 8008634:	4660      	mov	r0, ip
 8008636:	f8ce 3000 	str.w	r3, [lr]
 800863a:	f1b8 0f00 	cmp.w	r8, #0
 800863e:	d0a6      	beq.n	800858e <_strtol_l.constprop.0+0x1a>
 8008640:	1e69      	subs	r1, r5, #1
 8008642:	e006      	b.n	8008652 <_strtol_l.constprop.0+0xde>
 8008644:	b106      	cbz	r6, 8008648 <_strtol_l.constprop.0+0xd4>
 8008646:	4240      	negs	r0, r0
 8008648:	f1b8 0f00 	cmp.w	r8, #0
 800864c:	d09f      	beq.n	800858e <_strtol_l.constprop.0+0x1a>
 800864e:	2a00      	cmp	r2, #0
 8008650:	d1f6      	bne.n	8008640 <_strtol_l.constprop.0+0xcc>
 8008652:	f8c8 1000 	str.w	r1, [r8]
 8008656:	e79a      	b.n	800858e <_strtol_l.constprop.0+0x1a>
 8008658:	2430      	movs	r4, #48	; 0x30
 800865a:	2b00      	cmp	r3, #0
 800865c:	d1b5      	bne.n	80085ca <_strtol_l.constprop.0+0x56>
 800865e:	2308      	movs	r3, #8
 8008660:	e7b3      	b.n	80085ca <_strtol_l.constprop.0+0x56>
 8008662:	2c30      	cmp	r4, #48	; 0x30
 8008664:	d0a9      	beq.n	80085ba <_strtol_l.constprop.0+0x46>
 8008666:	230a      	movs	r3, #10
 8008668:	e7af      	b.n	80085ca <_strtol_l.constprop.0+0x56>
 800866a:	bf00      	nop
 800866c:	0800cb41 	.word	0x0800cb41

08008670 <_strtol_r>:
 8008670:	f7ff bf80 	b.w	8008574 <_strtol_l.constprop.0>

08008674 <strtol>:
 8008674:	4613      	mov	r3, r2
 8008676:	460a      	mov	r2, r1
 8008678:	4601      	mov	r1, r0
 800867a:	4802      	ldr	r0, [pc, #8]	; (8008684 <strtol+0x10>)
 800867c:	6800      	ldr	r0, [r0, #0]
 800867e:	f7ff bf79 	b.w	8008574 <_strtol_l.constprop.0>
 8008682:	bf00      	nop
 8008684:	200001dc 	.word	0x200001dc

08008688 <__cvt>:
 8008688:	2b00      	cmp	r3, #0
 800868a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800868e:	461f      	mov	r7, r3
 8008690:	bfbb      	ittet	lt
 8008692:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8008696:	461f      	movlt	r7, r3
 8008698:	2300      	movge	r3, #0
 800869a:	232d      	movlt	r3, #45	; 0x2d
 800869c:	b088      	sub	sp, #32
 800869e:	4614      	mov	r4, r2
 80086a0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80086a2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80086a4:	7013      	strb	r3, [r2, #0]
 80086a6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80086a8:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80086ac:	f023 0820 	bic.w	r8, r3, #32
 80086b0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80086b4:	d005      	beq.n	80086c2 <__cvt+0x3a>
 80086b6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80086ba:	d100      	bne.n	80086be <__cvt+0x36>
 80086bc:	3501      	adds	r5, #1
 80086be:	2302      	movs	r3, #2
 80086c0:	e000      	b.n	80086c4 <__cvt+0x3c>
 80086c2:	2303      	movs	r3, #3
 80086c4:	aa07      	add	r2, sp, #28
 80086c6:	9204      	str	r2, [sp, #16]
 80086c8:	aa06      	add	r2, sp, #24
 80086ca:	e9cd a202 	strd	sl, r2, [sp, #8]
 80086ce:	e9cd 3500 	strd	r3, r5, [sp]
 80086d2:	4622      	mov	r2, r4
 80086d4:	463b      	mov	r3, r7
 80086d6:	f001 f8df 	bl	8009898 <_dtoa_r>
 80086da:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80086de:	4606      	mov	r6, r0
 80086e0:	d102      	bne.n	80086e8 <__cvt+0x60>
 80086e2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80086e4:	07db      	lsls	r3, r3, #31
 80086e6:	d522      	bpl.n	800872e <__cvt+0xa6>
 80086e8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80086ec:	eb06 0905 	add.w	r9, r6, r5
 80086f0:	d110      	bne.n	8008714 <__cvt+0x8c>
 80086f2:	7833      	ldrb	r3, [r6, #0]
 80086f4:	2b30      	cmp	r3, #48	; 0x30
 80086f6:	d10a      	bne.n	800870e <__cvt+0x86>
 80086f8:	2200      	movs	r2, #0
 80086fa:	2300      	movs	r3, #0
 80086fc:	4620      	mov	r0, r4
 80086fe:	4639      	mov	r1, r7
 8008700:	f7f8 f95c 	bl	80009bc <__aeabi_dcmpeq>
 8008704:	b918      	cbnz	r0, 800870e <__cvt+0x86>
 8008706:	f1c5 0501 	rsb	r5, r5, #1
 800870a:	f8ca 5000 	str.w	r5, [sl]
 800870e:	f8da 3000 	ldr.w	r3, [sl]
 8008712:	4499      	add	r9, r3
 8008714:	2200      	movs	r2, #0
 8008716:	2300      	movs	r3, #0
 8008718:	4620      	mov	r0, r4
 800871a:	4639      	mov	r1, r7
 800871c:	f7f8 f94e 	bl	80009bc <__aeabi_dcmpeq>
 8008720:	b108      	cbz	r0, 8008726 <__cvt+0x9e>
 8008722:	f8cd 901c 	str.w	r9, [sp, #28]
 8008726:	2230      	movs	r2, #48	; 0x30
 8008728:	9b07      	ldr	r3, [sp, #28]
 800872a:	454b      	cmp	r3, r9
 800872c:	d307      	bcc.n	800873e <__cvt+0xb6>
 800872e:	4630      	mov	r0, r6
 8008730:	9b07      	ldr	r3, [sp, #28]
 8008732:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008734:	1b9b      	subs	r3, r3, r6
 8008736:	6013      	str	r3, [r2, #0]
 8008738:	b008      	add	sp, #32
 800873a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800873e:	1c59      	adds	r1, r3, #1
 8008740:	9107      	str	r1, [sp, #28]
 8008742:	701a      	strb	r2, [r3, #0]
 8008744:	e7f0      	b.n	8008728 <__cvt+0xa0>

08008746 <__exponent>:
 8008746:	4603      	mov	r3, r0
 8008748:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800874a:	2900      	cmp	r1, #0
 800874c:	f803 2b02 	strb.w	r2, [r3], #2
 8008750:	bfb6      	itet	lt
 8008752:	222d      	movlt	r2, #45	; 0x2d
 8008754:	222b      	movge	r2, #43	; 0x2b
 8008756:	4249      	neglt	r1, r1
 8008758:	2909      	cmp	r1, #9
 800875a:	7042      	strb	r2, [r0, #1]
 800875c:	dd2a      	ble.n	80087b4 <__exponent+0x6e>
 800875e:	f10d 0207 	add.w	r2, sp, #7
 8008762:	4617      	mov	r7, r2
 8008764:	260a      	movs	r6, #10
 8008766:	fb91 f5f6 	sdiv	r5, r1, r6
 800876a:	4694      	mov	ip, r2
 800876c:	fb06 1415 	mls	r4, r6, r5, r1
 8008770:	3430      	adds	r4, #48	; 0x30
 8008772:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8008776:	460c      	mov	r4, r1
 8008778:	2c63      	cmp	r4, #99	; 0x63
 800877a:	4629      	mov	r1, r5
 800877c:	f102 32ff 	add.w	r2, r2, #4294967295
 8008780:	dcf1      	bgt.n	8008766 <__exponent+0x20>
 8008782:	3130      	adds	r1, #48	; 0x30
 8008784:	f1ac 0402 	sub.w	r4, ip, #2
 8008788:	f802 1c01 	strb.w	r1, [r2, #-1]
 800878c:	4622      	mov	r2, r4
 800878e:	1c41      	adds	r1, r0, #1
 8008790:	42ba      	cmp	r2, r7
 8008792:	d30a      	bcc.n	80087aa <__exponent+0x64>
 8008794:	f10d 0209 	add.w	r2, sp, #9
 8008798:	eba2 020c 	sub.w	r2, r2, ip
 800879c:	42bc      	cmp	r4, r7
 800879e:	bf88      	it	hi
 80087a0:	2200      	movhi	r2, #0
 80087a2:	4413      	add	r3, r2
 80087a4:	1a18      	subs	r0, r3, r0
 80087a6:	b003      	add	sp, #12
 80087a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80087aa:	f812 5b01 	ldrb.w	r5, [r2], #1
 80087ae:	f801 5f01 	strb.w	r5, [r1, #1]!
 80087b2:	e7ed      	b.n	8008790 <__exponent+0x4a>
 80087b4:	2330      	movs	r3, #48	; 0x30
 80087b6:	3130      	adds	r1, #48	; 0x30
 80087b8:	7083      	strb	r3, [r0, #2]
 80087ba:	70c1      	strb	r1, [r0, #3]
 80087bc:	1d03      	adds	r3, r0, #4
 80087be:	e7f1      	b.n	80087a4 <__exponent+0x5e>

080087c0 <_printf_float>:
 80087c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087c4:	b091      	sub	sp, #68	; 0x44
 80087c6:	460c      	mov	r4, r1
 80087c8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80087cc:	4616      	mov	r6, r2
 80087ce:	461f      	mov	r7, r3
 80087d0:	4605      	mov	r5, r0
 80087d2:	f000 ff37 	bl	8009644 <_localeconv_r>
 80087d6:	6803      	ldr	r3, [r0, #0]
 80087d8:	4618      	mov	r0, r3
 80087da:	9309      	str	r3, [sp, #36]	; 0x24
 80087dc:	f7f7 fcc2 	bl	8000164 <strlen>
 80087e0:	2300      	movs	r3, #0
 80087e2:	930e      	str	r3, [sp, #56]	; 0x38
 80087e4:	f8d8 3000 	ldr.w	r3, [r8]
 80087e8:	900a      	str	r0, [sp, #40]	; 0x28
 80087ea:	3307      	adds	r3, #7
 80087ec:	f023 0307 	bic.w	r3, r3, #7
 80087f0:	f103 0208 	add.w	r2, r3, #8
 80087f4:	f894 9018 	ldrb.w	r9, [r4, #24]
 80087f8:	f8d4 b000 	ldr.w	fp, [r4]
 80087fc:	f8c8 2000 	str.w	r2, [r8]
 8008800:	e9d3 a800 	ldrd	sl, r8, [r3]
 8008804:	4652      	mov	r2, sl
 8008806:	4643      	mov	r3, r8
 8008808:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800880c:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8008810:	930b      	str	r3, [sp, #44]	; 0x2c
 8008812:	f04f 32ff 	mov.w	r2, #4294967295
 8008816:	4650      	mov	r0, sl
 8008818:	4b9c      	ldr	r3, [pc, #624]	; (8008a8c <_printf_float+0x2cc>)
 800881a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800881c:	f7f8 f900 	bl	8000a20 <__aeabi_dcmpun>
 8008820:	bb70      	cbnz	r0, 8008880 <_printf_float+0xc0>
 8008822:	f04f 32ff 	mov.w	r2, #4294967295
 8008826:	4650      	mov	r0, sl
 8008828:	4b98      	ldr	r3, [pc, #608]	; (8008a8c <_printf_float+0x2cc>)
 800882a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800882c:	f7f8 f8da 	bl	80009e4 <__aeabi_dcmple>
 8008830:	bb30      	cbnz	r0, 8008880 <_printf_float+0xc0>
 8008832:	2200      	movs	r2, #0
 8008834:	2300      	movs	r3, #0
 8008836:	4650      	mov	r0, sl
 8008838:	4641      	mov	r1, r8
 800883a:	f7f8 f8c9 	bl	80009d0 <__aeabi_dcmplt>
 800883e:	b110      	cbz	r0, 8008846 <_printf_float+0x86>
 8008840:	232d      	movs	r3, #45	; 0x2d
 8008842:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008846:	4a92      	ldr	r2, [pc, #584]	; (8008a90 <_printf_float+0x2d0>)
 8008848:	4b92      	ldr	r3, [pc, #584]	; (8008a94 <_printf_float+0x2d4>)
 800884a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800884e:	bf94      	ite	ls
 8008850:	4690      	movls	r8, r2
 8008852:	4698      	movhi	r8, r3
 8008854:	2303      	movs	r3, #3
 8008856:	f04f 0a00 	mov.w	sl, #0
 800885a:	6123      	str	r3, [r4, #16]
 800885c:	f02b 0304 	bic.w	r3, fp, #4
 8008860:	6023      	str	r3, [r4, #0]
 8008862:	4633      	mov	r3, r6
 8008864:	4621      	mov	r1, r4
 8008866:	4628      	mov	r0, r5
 8008868:	9700      	str	r7, [sp, #0]
 800886a:	aa0f      	add	r2, sp, #60	; 0x3c
 800886c:	f000 f9d6 	bl	8008c1c <_printf_common>
 8008870:	3001      	adds	r0, #1
 8008872:	f040 8090 	bne.w	8008996 <_printf_float+0x1d6>
 8008876:	f04f 30ff 	mov.w	r0, #4294967295
 800887a:	b011      	add	sp, #68	; 0x44
 800887c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008880:	4652      	mov	r2, sl
 8008882:	4643      	mov	r3, r8
 8008884:	4650      	mov	r0, sl
 8008886:	4641      	mov	r1, r8
 8008888:	f7f8 f8ca 	bl	8000a20 <__aeabi_dcmpun>
 800888c:	b148      	cbz	r0, 80088a2 <_printf_float+0xe2>
 800888e:	f1b8 0f00 	cmp.w	r8, #0
 8008892:	bfb8      	it	lt
 8008894:	232d      	movlt	r3, #45	; 0x2d
 8008896:	4a80      	ldr	r2, [pc, #512]	; (8008a98 <_printf_float+0x2d8>)
 8008898:	bfb8      	it	lt
 800889a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800889e:	4b7f      	ldr	r3, [pc, #508]	; (8008a9c <_printf_float+0x2dc>)
 80088a0:	e7d3      	b.n	800884a <_printf_float+0x8a>
 80088a2:	6863      	ldr	r3, [r4, #4]
 80088a4:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80088a8:	1c5a      	adds	r2, r3, #1
 80088aa:	d142      	bne.n	8008932 <_printf_float+0x172>
 80088ac:	2306      	movs	r3, #6
 80088ae:	6063      	str	r3, [r4, #4]
 80088b0:	2200      	movs	r2, #0
 80088b2:	9206      	str	r2, [sp, #24]
 80088b4:	aa0e      	add	r2, sp, #56	; 0x38
 80088b6:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80088ba:	aa0d      	add	r2, sp, #52	; 0x34
 80088bc:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80088c0:	9203      	str	r2, [sp, #12]
 80088c2:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80088c6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80088ca:	6023      	str	r3, [r4, #0]
 80088cc:	6863      	ldr	r3, [r4, #4]
 80088ce:	4652      	mov	r2, sl
 80088d0:	9300      	str	r3, [sp, #0]
 80088d2:	4628      	mov	r0, r5
 80088d4:	4643      	mov	r3, r8
 80088d6:	910b      	str	r1, [sp, #44]	; 0x2c
 80088d8:	f7ff fed6 	bl	8008688 <__cvt>
 80088dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80088de:	4680      	mov	r8, r0
 80088e0:	2947      	cmp	r1, #71	; 0x47
 80088e2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80088e4:	d108      	bne.n	80088f8 <_printf_float+0x138>
 80088e6:	1cc8      	adds	r0, r1, #3
 80088e8:	db02      	blt.n	80088f0 <_printf_float+0x130>
 80088ea:	6863      	ldr	r3, [r4, #4]
 80088ec:	4299      	cmp	r1, r3
 80088ee:	dd40      	ble.n	8008972 <_printf_float+0x1b2>
 80088f0:	f1a9 0902 	sub.w	r9, r9, #2
 80088f4:	fa5f f989 	uxtb.w	r9, r9
 80088f8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80088fc:	d81f      	bhi.n	800893e <_printf_float+0x17e>
 80088fe:	464a      	mov	r2, r9
 8008900:	3901      	subs	r1, #1
 8008902:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008906:	910d      	str	r1, [sp, #52]	; 0x34
 8008908:	f7ff ff1d 	bl	8008746 <__exponent>
 800890c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800890e:	4682      	mov	sl, r0
 8008910:	1813      	adds	r3, r2, r0
 8008912:	2a01      	cmp	r2, #1
 8008914:	6123      	str	r3, [r4, #16]
 8008916:	dc02      	bgt.n	800891e <_printf_float+0x15e>
 8008918:	6822      	ldr	r2, [r4, #0]
 800891a:	07d2      	lsls	r2, r2, #31
 800891c:	d501      	bpl.n	8008922 <_printf_float+0x162>
 800891e:	3301      	adds	r3, #1
 8008920:	6123      	str	r3, [r4, #16]
 8008922:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8008926:	2b00      	cmp	r3, #0
 8008928:	d09b      	beq.n	8008862 <_printf_float+0xa2>
 800892a:	232d      	movs	r3, #45	; 0x2d
 800892c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008930:	e797      	b.n	8008862 <_printf_float+0xa2>
 8008932:	2947      	cmp	r1, #71	; 0x47
 8008934:	d1bc      	bne.n	80088b0 <_printf_float+0xf0>
 8008936:	2b00      	cmp	r3, #0
 8008938:	d1ba      	bne.n	80088b0 <_printf_float+0xf0>
 800893a:	2301      	movs	r3, #1
 800893c:	e7b7      	b.n	80088ae <_printf_float+0xee>
 800893e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8008942:	d118      	bne.n	8008976 <_printf_float+0x1b6>
 8008944:	2900      	cmp	r1, #0
 8008946:	6863      	ldr	r3, [r4, #4]
 8008948:	dd0b      	ble.n	8008962 <_printf_float+0x1a2>
 800894a:	6121      	str	r1, [r4, #16]
 800894c:	b913      	cbnz	r3, 8008954 <_printf_float+0x194>
 800894e:	6822      	ldr	r2, [r4, #0]
 8008950:	07d0      	lsls	r0, r2, #31
 8008952:	d502      	bpl.n	800895a <_printf_float+0x19a>
 8008954:	3301      	adds	r3, #1
 8008956:	440b      	add	r3, r1
 8008958:	6123      	str	r3, [r4, #16]
 800895a:	f04f 0a00 	mov.w	sl, #0
 800895e:	65a1      	str	r1, [r4, #88]	; 0x58
 8008960:	e7df      	b.n	8008922 <_printf_float+0x162>
 8008962:	b913      	cbnz	r3, 800896a <_printf_float+0x1aa>
 8008964:	6822      	ldr	r2, [r4, #0]
 8008966:	07d2      	lsls	r2, r2, #31
 8008968:	d501      	bpl.n	800896e <_printf_float+0x1ae>
 800896a:	3302      	adds	r3, #2
 800896c:	e7f4      	b.n	8008958 <_printf_float+0x198>
 800896e:	2301      	movs	r3, #1
 8008970:	e7f2      	b.n	8008958 <_printf_float+0x198>
 8008972:	f04f 0967 	mov.w	r9, #103	; 0x67
 8008976:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008978:	4299      	cmp	r1, r3
 800897a:	db05      	blt.n	8008988 <_printf_float+0x1c8>
 800897c:	6823      	ldr	r3, [r4, #0]
 800897e:	6121      	str	r1, [r4, #16]
 8008980:	07d8      	lsls	r0, r3, #31
 8008982:	d5ea      	bpl.n	800895a <_printf_float+0x19a>
 8008984:	1c4b      	adds	r3, r1, #1
 8008986:	e7e7      	b.n	8008958 <_printf_float+0x198>
 8008988:	2900      	cmp	r1, #0
 800898a:	bfcc      	ite	gt
 800898c:	2201      	movgt	r2, #1
 800898e:	f1c1 0202 	rsble	r2, r1, #2
 8008992:	4413      	add	r3, r2
 8008994:	e7e0      	b.n	8008958 <_printf_float+0x198>
 8008996:	6823      	ldr	r3, [r4, #0]
 8008998:	055a      	lsls	r2, r3, #21
 800899a:	d407      	bmi.n	80089ac <_printf_float+0x1ec>
 800899c:	6923      	ldr	r3, [r4, #16]
 800899e:	4642      	mov	r2, r8
 80089a0:	4631      	mov	r1, r6
 80089a2:	4628      	mov	r0, r5
 80089a4:	47b8      	blx	r7
 80089a6:	3001      	adds	r0, #1
 80089a8:	d12b      	bne.n	8008a02 <_printf_float+0x242>
 80089aa:	e764      	b.n	8008876 <_printf_float+0xb6>
 80089ac:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80089b0:	f240 80dd 	bls.w	8008b6e <_printf_float+0x3ae>
 80089b4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80089b8:	2200      	movs	r2, #0
 80089ba:	2300      	movs	r3, #0
 80089bc:	f7f7 fffe 	bl	80009bc <__aeabi_dcmpeq>
 80089c0:	2800      	cmp	r0, #0
 80089c2:	d033      	beq.n	8008a2c <_printf_float+0x26c>
 80089c4:	2301      	movs	r3, #1
 80089c6:	4631      	mov	r1, r6
 80089c8:	4628      	mov	r0, r5
 80089ca:	4a35      	ldr	r2, [pc, #212]	; (8008aa0 <_printf_float+0x2e0>)
 80089cc:	47b8      	blx	r7
 80089ce:	3001      	adds	r0, #1
 80089d0:	f43f af51 	beq.w	8008876 <_printf_float+0xb6>
 80089d4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80089d8:	429a      	cmp	r2, r3
 80089da:	db02      	blt.n	80089e2 <_printf_float+0x222>
 80089dc:	6823      	ldr	r3, [r4, #0]
 80089de:	07d8      	lsls	r0, r3, #31
 80089e0:	d50f      	bpl.n	8008a02 <_printf_float+0x242>
 80089e2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80089e6:	4631      	mov	r1, r6
 80089e8:	4628      	mov	r0, r5
 80089ea:	47b8      	blx	r7
 80089ec:	3001      	adds	r0, #1
 80089ee:	f43f af42 	beq.w	8008876 <_printf_float+0xb6>
 80089f2:	f04f 0800 	mov.w	r8, #0
 80089f6:	f104 091a 	add.w	r9, r4, #26
 80089fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80089fc:	3b01      	subs	r3, #1
 80089fe:	4543      	cmp	r3, r8
 8008a00:	dc09      	bgt.n	8008a16 <_printf_float+0x256>
 8008a02:	6823      	ldr	r3, [r4, #0]
 8008a04:	079b      	lsls	r3, r3, #30
 8008a06:	f100 8104 	bmi.w	8008c12 <_printf_float+0x452>
 8008a0a:	68e0      	ldr	r0, [r4, #12]
 8008a0c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008a0e:	4298      	cmp	r0, r3
 8008a10:	bfb8      	it	lt
 8008a12:	4618      	movlt	r0, r3
 8008a14:	e731      	b.n	800887a <_printf_float+0xba>
 8008a16:	2301      	movs	r3, #1
 8008a18:	464a      	mov	r2, r9
 8008a1a:	4631      	mov	r1, r6
 8008a1c:	4628      	mov	r0, r5
 8008a1e:	47b8      	blx	r7
 8008a20:	3001      	adds	r0, #1
 8008a22:	f43f af28 	beq.w	8008876 <_printf_float+0xb6>
 8008a26:	f108 0801 	add.w	r8, r8, #1
 8008a2a:	e7e6      	b.n	80089fa <_printf_float+0x23a>
 8008a2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	dc38      	bgt.n	8008aa4 <_printf_float+0x2e4>
 8008a32:	2301      	movs	r3, #1
 8008a34:	4631      	mov	r1, r6
 8008a36:	4628      	mov	r0, r5
 8008a38:	4a19      	ldr	r2, [pc, #100]	; (8008aa0 <_printf_float+0x2e0>)
 8008a3a:	47b8      	blx	r7
 8008a3c:	3001      	adds	r0, #1
 8008a3e:	f43f af1a 	beq.w	8008876 <_printf_float+0xb6>
 8008a42:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8008a46:	4313      	orrs	r3, r2
 8008a48:	d102      	bne.n	8008a50 <_printf_float+0x290>
 8008a4a:	6823      	ldr	r3, [r4, #0]
 8008a4c:	07d9      	lsls	r1, r3, #31
 8008a4e:	d5d8      	bpl.n	8008a02 <_printf_float+0x242>
 8008a50:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008a54:	4631      	mov	r1, r6
 8008a56:	4628      	mov	r0, r5
 8008a58:	47b8      	blx	r7
 8008a5a:	3001      	adds	r0, #1
 8008a5c:	f43f af0b 	beq.w	8008876 <_printf_float+0xb6>
 8008a60:	f04f 0900 	mov.w	r9, #0
 8008a64:	f104 0a1a 	add.w	sl, r4, #26
 8008a68:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008a6a:	425b      	negs	r3, r3
 8008a6c:	454b      	cmp	r3, r9
 8008a6e:	dc01      	bgt.n	8008a74 <_printf_float+0x2b4>
 8008a70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008a72:	e794      	b.n	800899e <_printf_float+0x1de>
 8008a74:	2301      	movs	r3, #1
 8008a76:	4652      	mov	r2, sl
 8008a78:	4631      	mov	r1, r6
 8008a7a:	4628      	mov	r0, r5
 8008a7c:	47b8      	blx	r7
 8008a7e:	3001      	adds	r0, #1
 8008a80:	f43f aef9 	beq.w	8008876 <_printf_float+0xb6>
 8008a84:	f109 0901 	add.w	r9, r9, #1
 8008a88:	e7ee      	b.n	8008a68 <_printf_float+0x2a8>
 8008a8a:	bf00      	nop
 8008a8c:	7fefffff 	.word	0x7fefffff
 8008a90:	0800cc41 	.word	0x0800cc41
 8008a94:	0800cc45 	.word	0x0800cc45
 8008a98:	0800cc49 	.word	0x0800cc49
 8008a9c:	0800cc4d 	.word	0x0800cc4d
 8008aa0:	0800cc51 	.word	0x0800cc51
 8008aa4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008aa6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008aa8:	429a      	cmp	r2, r3
 8008aaa:	bfa8      	it	ge
 8008aac:	461a      	movge	r2, r3
 8008aae:	2a00      	cmp	r2, #0
 8008ab0:	4691      	mov	r9, r2
 8008ab2:	dc37      	bgt.n	8008b24 <_printf_float+0x364>
 8008ab4:	f04f 0b00 	mov.w	fp, #0
 8008ab8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008abc:	f104 021a 	add.w	r2, r4, #26
 8008ac0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8008ac4:	ebaa 0309 	sub.w	r3, sl, r9
 8008ac8:	455b      	cmp	r3, fp
 8008aca:	dc33      	bgt.n	8008b34 <_printf_float+0x374>
 8008acc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008ad0:	429a      	cmp	r2, r3
 8008ad2:	db3b      	blt.n	8008b4c <_printf_float+0x38c>
 8008ad4:	6823      	ldr	r3, [r4, #0]
 8008ad6:	07da      	lsls	r2, r3, #31
 8008ad8:	d438      	bmi.n	8008b4c <_printf_float+0x38c>
 8008ada:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8008ade:	eba2 0903 	sub.w	r9, r2, r3
 8008ae2:	eba2 020a 	sub.w	r2, r2, sl
 8008ae6:	4591      	cmp	r9, r2
 8008ae8:	bfa8      	it	ge
 8008aea:	4691      	movge	r9, r2
 8008aec:	f1b9 0f00 	cmp.w	r9, #0
 8008af0:	dc34      	bgt.n	8008b5c <_printf_float+0x39c>
 8008af2:	f04f 0800 	mov.w	r8, #0
 8008af6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008afa:	f104 0a1a 	add.w	sl, r4, #26
 8008afe:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008b02:	1a9b      	subs	r3, r3, r2
 8008b04:	eba3 0309 	sub.w	r3, r3, r9
 8008b08:	4543      	cmp	r3, r8
 8008b0a:	f77f af7a 	ble.w	8008a02 <_printf_float+0x242>
 8008b0e:	2301      	movs	r3, #1
 8008b10:	4652      	mov	r2, sl
 8008b12:	4631      	mov	r1, r6
 8008b14:	4628      	mov	r0, r5
 8008b16:	47b8      	blx	r7
 8008b18:	3001      	adds	r0, #1
 8008b1a:	f43f aeac 	beq.w	8008876 <_printf_float+0xb6>
 8008b1e:	f108 0801 	add.w	r8, r8, #1
 8008b22:	e7ec      	b.n	8008afe <_printf_float+0x33e>
 8008b24:	4613      	mov	r3, r2
 8008b26:	4631      	mov	r1, r6
 8008b28:	4642      	mov	r2, r8
 8008b2a:	4628      	mov	r0, r5
 8008b2c:	47b8      	blx	r7
 8008b2e:	3001      	adds	r0, #1
 8008b30:	d1c0      	bne.n	8008ab4 <_printf_float+0x2f4>
 8008b32:	e6a0      	b.n	8008876 <_printf_float+0xb6>
 8008b34:	2301      	movs	r3, #1
 8008b36:	4631      	mov	r1, r6
 8008b38:	4628      	mov	r0, r5
 8008b3a:	920b      	str	r2, [sp, #44]	; 0x2c
 8008b3c:	47b8      	blx	r7
 8008b3e:	3001      	adds	r0, #1
 8008b40:	f43f ae99 	beq.w	8008876 <_printf_float+0xb6>
 8008b44:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008b46:	f10b 0b01 	add.w	fp, fp, #1
 8008b4a:	e7b9      	b.n	8008ac0 <_printf_float+0x300>
 8008b4c:	4631      	mov	r1, r6
 8008b4e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008b52:	4628      	mov	r0, r5
 8008b54:	47b8      	blx	r7
 8008b56:	3001      	adds	r0, #1
 8008b58:	d1bf      	bne.n	8008ada <_printf_float+0x31a>
 8008b5a:	e68c      	b.n	8008876 <_printf_float+0xb6>
 8008b5c:	464b      	mov	r3, r9
 8008b5e:	4631      	mov	r1, r6
 8008b60:	4628      	mov	r0, r5
 8008b62:	eb08 020a 	add.w	r2, r8, sl
 8008b66:	47b8      	blx	r7
 8008b68:	3001      	adds	r0, #1
 8008b6a:	d1c2      	bne.n	8008af2 <_printf_float+0x332>
 8008b6c:	e683      	b.n	8008876 <_printf_float+0xb6>
 8008b6e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008b70:	2a01      	cmp	r2, #1
 8008b72:	dc01      	bgt.n	8008b78 <_printf_float+0x3b8>
 8008b74:	07db      	lsls	r3, r3, #31
 8008b76:	d539      	bpl.n	8008bec <_printf_float+0x42c>
 8008b78:	2301      	movs	r3, #1
 8008b7a:	4642      	mov	r2, r8
 8008b7c:	4631      	mov	r1, r6
 8008b7e:	4628      	mov	r0, r5
 8008b80:	47b8      	blx	r7
 8008b82:	3001      	adds	r0, #1
 8008b84:	f43f ae77 	beq.w	8008876 <_printf_float+0xb6>
 8008b88:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008b8c:	4631      	mov	r1, r6
 8008b8e:	4628      	mov	r0, r5
 8008b90:	47b8      	blx	r7
 8008b92:	3001      	adds	r0, #1
 8008b94:	f43f ae6f 	beq.w	8008876 <_printf_float+0xb6>
 8008b98:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8008ba4:	f7f7 ff0a 	bl	80009bc <__aeabi_dcmpeq>
 8008ba8:	b9d8      	cbnz	r0, 8008be2 <_printf_float+0x422>
 8008baa:	f109 33ff 	add.w	r3, r9, #4294967295
 8008bae:	f108 0201 	add.w	r2, r8, #1
 8008bb2:	4631      	mov	r1, r6
 8008bb4:	4628      	mov	r0, r5
 8008bb6:	47b8      	blx	r7
 8008bb8:	3001      	adds	r0, #1
 8008bba:	d10e      	bne.n	8008bda <_printf_float+0x41a>
 8008bbc:	e65b      	b.n	8008876 <_printf_float+0xb6>
 8008bbe:	2301      	movs	r3, #1
 8008bc0:	464a      	mov	r2, r9
 8008bc2:	4631      	mov	r1, r6
 8008bc4:	4628      	mov	r0, r5
 8008bc6:	47b8      	blx	r7
 8008bc8:	3001      	adds	r0, #1
 8008bca:	f43f ae54 	beq.w	8008876 <_printf_float+0xb6>
 8008bce:	f108 0801 	add.w	r8, r8, #1
 8008bd2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008bd4:	3b01      	subs	r3, #1
 8008bd6:	4543      	cmp	r3, r8
 8008bd8:	dcf1      	bgt.n	8008bbe <_printf_float+0x3fe>
 8008bda:	4653      	mov	r3, sl
 8008bdc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008be0:	e6de      	b.n	80089a0 <_printf_float+0x1e0>
 8008be2:	f04f 0800 	mov.w	r8, #0
 8008be6:	f104 091a 	add.w	r9, r4, #26
 8008bea:	e7f2      	b.n	8008bd2 <_printf_float+0x412>
 8008bec:	2301      	movs	r3, #1
 8008bee:	4642      	mov	r2, r8
 8008bf0:	e7df      	b.n	8008bb2 <_printf_float+0x3f2>
 8008bf2:	2301      	movs	r3, #1
 8008bf4:	464a      	mov	r2, r9
 8008bf6:	4631      	mov	r1, r6
 8008bf8:	4628      	mov	r0, r5
 8008bfa:	47b8      	blx	r7
 8008bfc:	3001      	adds	r0, #1
 8008bfe:	f43f ae3a 	beq.w	8008876 <_printf_float+0xb6>
 8008c02:	f108 0801 	add.w	r8, r8, #1
 8008c06:	68e3      	ldr	r3, [r4, #12]
 8008c08:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008c0a:	1a5b      	subs	r3, r3, r1
 8008c0c:	4543      	cmp	r3, r8
 8008c0e:	dcf0      	bgt.n	8008bf2 <_printf_float+0x432>
 8008c10:	e6fb      	b.n	8008a0a <_printf_float+0x24a>
 8008c12:	f04f 0800 	mov.w	r8, #0
 8008c16:	f104 0919 	add.w	r9, r4, #25
 8008c1a:	e7f4      	b.n	8008c06 <_printf_float+0x446>

08008c1c <_printf_common>:
 8008c1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c20:	4616      	mov	r6, r2
 8008c22:	4699      	mov	r9, r3
 8008c24:	688a      	ldr	r2, [r1, #8]
 8008c26:	690b      	ldr	r3, [r1, #16]
 8008c28:	4607      	mov	r7, r0
 8008c2a:	4293      	cmp	r3, r2
 8008c2c:	bfb8      	it	lt
 8008c2e:	4613      	movlt	r3, r2
 8008c30:	6033      	str	r3, [r6, #0]
 8008c32:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008c36:	460c      	mov	r4, r1
 8008c38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008c3c:	b10a      	cbz	r2, 8008c42 <_printf_common+0x26>
 8008c3e:	3301      	adds	r3, #1
 8008c40:	6033      	str	r3, [r6, #0]
 8008c42:	6823      	ldr	r3, [r4, #0]
 8008c44:	0699      	lsls	r1, r3, #26
 8008c46:	bf42      	ittt	mi
 8008c48:	6833      	ldrmi	r3, [r6, #0]
 8008c4a:	3302      	addmi	r3, #2
 8008c4c:	6033      	strmi	r3, [r6, #0]
 8008c4e:	6825      	ldr	r5, [r4, #0]
 8008c50:	f015 0506 	ands.w	r5, r5, #6
 8008c54:	d106      	bne.n	8008c64 <_printf_common+0x48>
 8008c56:	f104 0a19 	add.w	sl, r4, #25
 8008c5a:	68e3      	ldr	r3, [r4, #12]
 8008c5c:	6832      	ldr	r2, [r6, #0]
 8008c5e:	1a9b      	subs	r3, r3, r2
 8008c60:	42ab      	cmp	r3, r5
 8008c62:	dc2b      	bgt.n	8008cbc <_printf_common+0xa0>
 8008c64:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008c68:	1e13      	subs	r3, r2, #0
 8008c6a:	6822      	ldr	r2, [r4, #0]
 8008c6c:	bf18      	it	ne
 8008c6e:	2301      	movne	r3, #1
 8008c70:	0692      	lsls	r2, r2, #26
 8008c72:	d430      	bmi.n	8008cd6 <_printf_common+0xba>
 8008c74:	4649      	mov	r1, r9
 8008c76:	4638      	mov	r0, r7
 8008c78:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008c7c:	47c0      	blx	r8
 8008c7e:	3001      	adds	r0, #1
 8008c80:	d023      	beq.n	8008cca <_printf_common+0xae>
 8008c82:	6823      	ldr	r3, [r4, #0]
 8008c84:	6922      	ldr	r2, [r4, #16]
 8008c86:	f003 0306 	and.w	r3, r3, #6
 8008c8a:	2b04      	cmp	r3, #4
 8008c8c:	bf14      	ite	ne
 8008c8e:	2500      	movne	r5, #0
 8008c90:	6833      	ldreq	r3, [r6, #0]
 8008c92:	f04f 0600 	mov.w	r6, #0
 8008c96:	bf08      	it	eq
 8008c98:	68e5      	ldreq	r5, [r4, #12]
 8008c9a:	f104 041a 	add.w	r4, r4, #26
 8008c9e:	bf08      	it	eq
 8008ca0:	1aed      	subeq	r5, r5, r3
 8008ca2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8008ca6:	bf08      	it	eq
 8008ca8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008cac:	4293      	cmp	r3, r2
 8008cae:	bfc4      	itt	gt
 8008cb0:	1a9b      	subgt	r3, r3, r2
 8008cb2:	18ed      	addgt	r5, r5, r3
 8008cb4:	42b5      	cmp	r5, r6
 8008cb6:	d11a      	bne.n	8008cee <_printf_common+0xd2>
 8008cb8:	2000      	movs	r0, #0
 8008cba:	e008      	b.n	8008cce <_printf_common+0xb2>
 8008cbc:	2301      	movs	r3, #1
 8008cbe:	4652      	mov	r2, sl
 8008cc0:	4649      	mov	r1, r9
 8008cc2:	4638      	mov	r0, r7
 8008cc4:	47c0      	blx	r8
 8008cc6:	3001      	adds	r0, #1
 8008cc8:	d103      	bne.n	8008cd2 <_printf_common+0xb6>
 8008cca:	f04f 30ff 	mov.w	r0, #4294967295
 8008cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cd2:	3501      	adds	r5, #1
 8008cd4:	e7c1      	b.n	8008c5a <_printf_common+0x3e>
 8008cd6:	2030      	movs	r0, #48	; 0x30
 8008cd8:	18e1      	adds	r1, r4, r3
 8008cda:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008cde:	1c5a      	adds	r2, r3, #1
 8008ce0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008ce4:	4422      	add	r2, r4
 8008ce6:	3302      	adds	r3, #2
 8008ce8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008cec:	e7c2      	b.n	8008c74 <_printf_common+0x58>
 8008cee:	2301      	movs	r3, #1
 8008cf0:	4622      	mov	r2, r4
 8008cf2:	4649      	mov	r1, r9
 8008cf4:	4638      	mov	r0, r7
 8008cf6:	47c0      	blx	r8
 8008cf8:	3001      	adds	r0, #1
 8008cfa:	d0e6      	beq.n	8008cca <_printf_common+0xae>
 8008cfc:	3601      	adds	r6, #1
 8008cfe:	e7d9      	b.n	8008cb4 <_printf_common+0x98>

08008d00 <_printf_i>:
 8008d00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008d04:	7e0f      	ldrb	r7, [r1, #24]
 8008d06:	4691      	mov	r9, r2
 8008d08:	2f78      	cmp	r7, #120	; 0x78
 8008d0a:	4680      	mov	r8, r0
 8008d0c:	460c      	mov	r4, r1
 8008d0e:	469a      	mov	sl, r3
 8008d10:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008d12:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008d16:	d807      	bhi.n	8008d28 <_printf_i+0x28>
 8008d18:	2f62      	cmp	r7, #98	; 0x62
 8008d1a:	d80a      	bhi.n	8008d32 <_printf_i+0x32>
 8008d1c:	2f00      	cmp	r7, #0
 8008d1e:	f000 80d5 	beq.w	8008ecc <_printf_i+0x1cc>
 8008d22:	2f58      	cmp	r7, #88	; 0x58
 8008d24:	f000 80c1 	beq.w	8008eaa <_printf_i+0x1aa>
 8008d28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008d2c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008d30:	e03a      	b.n	8008da8 <_printf_i+0xa8>
 8008d32:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008d36:	2b15      	cmp	r3, #21
 8008d38:	d8f6      	bhi.n	8008d28 <_printf_i+0x28>
 8008d3a:	a101      	add	r1, pc, #4	; (adr r1, 8008d40 <_printf_i+0x40>)
 8008d3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008d40:	08008d99 	.word	0x08008d99
 8008d44:	08008dad 	.word	0x08008dad
 8008d48:	08008d29 	.word	0x08008d29
 8008d4c:	08008d29 	.word	0x08008d29
 8008d50:	08008d29 	.word	0x08008d29
 8008d54:	08008d29 	.word	0x08008d29
 8008d58:	08008dad 	.word	0x08008dad
 8008d5c:	08008d29 	.word	0x08008d29
 8008d60:	08008d29 	.word	0x08008d29
 8008d64:	08008d29 	.word	0x08008d29
 8008d68:	08008d29 	.word	0x08008d29
 8008d6c:	08008eb3 	.word	0x08008eb3
 8008d70:	08008dd9 	.word	0x08008dd9
 8008d74:	08008e6d 	.word	0x08008e6d
 8008d78:	08008d29 	.word	0x08008d29
 8008d7c:	08008d29 	.word	0x08008d29
 8008d80:	08008ed5 	.word	0x08008ed5
 8008d84:	08008d29 	.word	0x08008d29
 8008d88:	08008dd9 	.word	0x08008dd9
 8008d8c:	08008d29 	.word	0x08008d29
 8008d90:	08008d29 	.word	0x08008d29
 8008d94:	08008e75 	.word	0x08008e75
 8008d98:	682b      	ldr	r3, [r5, #0]
 8008d9a:	1d1a      	adds	r2, r3, #4
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	602a      	str	r2, [r5, #0]
 8008da0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008da4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008da8:	2301      	movs	r3, #1
 8008daa:	e0a0      	b.n	8008eee <_printf_i+0x1ee>
 8008dac:	6820      	ldr	r0, [r4, #0]
 8008dae:	682b      	ldr	r3, [r5, #0]
 8008db0:	0607      	lsls	r7, r0, #24
 8008db2:	f103 0104 	add.w	r1, r3, #4
 8008db6:	6029      	str	r1, [r5, #0]
 8008db8:	d501      	bpl.n	8008dbe <_printf_i+0xbe>
 8008dba:	681e      	ldr	r6, [r3, #0]
 8008dbc:	e003      	b.n	8008dc6 <_printf_i+0xc6>
 8008dbe:	0646      	lsls	r6, r0, #25
 8008dc0:	d5fb      	bpl.n	8008dba <_printf_i+0xba>
 8008dc2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008dc6:	2e00      	cmp	r6, #0
 8008dc8:	da03      	bge.n	8008dd2 <_printf_i+0xd2>
 8008dca:	232d      	movs	r3, #45	; 0x2d
 8008dcc:	4276      	negs	r6, r6
 8008dce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008dd2:	230a      	movs	r3, #10
 8008dd4:	4859      	ldr	r0, [pc, #356]	; (8008f3c <_printf_i+0x23c>)
 8008dd6:	e012      	b.n	8008dfe <_printf_i+0xfe>
 8008dd8:	682b      	ldr	r3, [r5, #0]
 8008dda:	6820      	ldr	r0, [r4, #0]
 8008ddc:	1d19      	adds	r1, r3, #4
 8008dde:	6029      	str	r1, [r5, #0]
 8008de0:	0605      	lsls	r5, r0, #24
 8008de2:	d501      	bpl.n	8008de8 <_printf_i+0xe8>
 8008de4:	681e      	ldr	r6, [r3, #0]
 8008de6:	e002      	b.n	8008dee <_printf_i+0xee>
 8008de8:	0641      	lsls	r1, r0, #25
 8008dea:	d5fb      	bpl.n	8008de4 <_printf_i+0xe4>
 8008dec:	881e      	ldrh	r6, [r3, #0]
 8008dee:	2f6f      	cmp	r7, #111	; 0x6f
 8008df0:	bf0c      	ite	eq
 8008df2:	2308      	moveq	r3, #8
 8008df4:	230a      	movne	r3, #10
 8008df6:	4851      	ldr	r0, [pc, #324]	; (8008f3c <_printf_i+0x23c>)
 8008df8:	2100      	movs	r1, #0
 8008dfa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008dfe:	6865      	ldr	r5, [r4, #4]
 8008e00:	2d00      	cmp	r5, #0
 8008e02:	bfa8      	it	ge
 8008e04:	6821      	ldrge	r1, [r4, #0]
 8008e06:	60a5      	str	r5, [r4, #8]
 8008e08:	bfa4      	itt	ge
 8008e0a:	f021 0104 	bicge.w	r1, r1, #4
 8008e0e:	6021      	strge	r1, [r4, #0]
 8008e10:	b90e      	cbnz	r6, 8008e16 <_printf_i+0x116>
 8008e12:	2d00      	cmp	r5, #0
 8008e14:	d04b      	beq.n	8008eae <_printf_i+0x1ae>
 8008e16:	4615      	mov	r5, r2
 8008e18:	fbb6 f1f3 	udiv	r1, r6, r3
 8008e1c:	fb03 6711 	mls	r7, r3, r1, r6
 8008e20:	5dc7      	ldrb	r7, [r0, r7]
 8008e22:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008e26:	4637      	mov	r7, r6
 8008e28:	42bb      	cmp	r3, r7
 8008e2a:	460e      	mov	r6, r1
 8008e2c:	d9f4      	bls.n	8008e18 <_printf_i+0x118>
 8008e2e:	2b08      	cmp	r3, #8
 8008e30:	d10b      	bne.n	8008e4a <_printf_i+0x14a>
 8008e32:	6823      	ldr	r3, [r4, #0]
 8008e34:	07de      	lsls	r6, r3, #31
 8008e36:	d508      	bpl.n	8008e4a <_printf_i+0x14a>
 8008e38:	6923      	ldr	r3, [r4, #16]
 8008e3a:	6861      	ldr	r1, [r4, #4]
 8008e3c:	4299      	cmp	r1, r3
 8008e3e:	bfde      	ittt	le
 8008e40:	2330      	movle	r3, #48	; 0x30
 8008e42:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008e46:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008e4a:	1b52      	subs	r2, r2, r5
 8008e4c:	6122      	str	r2, [r4, #16]
 8008e4e:	464b      	mov	r3, r9
 8008e50:	4621      	mov	r1, r4
 8008e52:	4640      	mov	r0, r8
 8008e54:	f8cd a000 	str.w	sl, [sp]
 8008e58:	aa03      	add	r2, sp, #12
 8008e5a:	f7ff fedf 	bl	8008c1c <_printf_common>
 8008e5e:	3001      	adds	r0, #1
 8008e60:	d14a      	bne.n	8008ef8 <_printf_i+0x1f8>
 8008e62:	f04f 30ff 	mov.w	r0, #4294967295
 8008e66:	b004      	add	sp, #16
 8008e68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e6c:	6823      	ldr	r3, [r4, #0]
 8008e6e:	f043 0320 	orr.w	r3, r3, #32
 8008e72:	6023      	str	r3, [r4, #0]
 8008e74:	2778      	movs	r7, #120	; 0x78
 8008e76:	4832      	ldr	r0, [pc, #200]	; (8008f40 <_printf_i+0x240>)
 8008e78:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008e7c:	6823      	ldr	r3, [r4, #0]
 8008e7e:	6829      	ldr	r1, [r5, #0]
 8008e80:	061f      	lsls	r7, r3, #24
 8008e82:	f851 6b04 	ldr.w	r6, [r1], #4
 8008e86:	d402      	bmi.n	8008e8e <_printf_i+0x18e>
 8008e88:	065f      	lsls	r7, r3, #25
 8008e8a:	bf48      	it	mi
 8008e8c:	b2b6      	uxthmi	r6, r6
 8008e8e:	07df      	lsls	r7, r3, #31
 8008e90:	bf48      	it	mi
 8008e92:	f043 0320 	orrmi.w	r3, r3, #32
 8008e96:	6029      	str	r1, [r5, #0]
 8008e98:	bf48      	it	mi
 8008e9a:	6023      	strmi	r3, [r4, #0]
 8008e9c:	b91e      	cbnz	r6, 8008ea6 <_printf_i+0x1a6>
 8008e9e:	6823      	ldr	r3, [r4, #0]
 8008ea0:	f023 0320 	bic.w	r3, r3, #32
 8008ea4:	6023      	str	r3, [r4, #0]
 8008ea6:	2310      	movs	r3, #16
 8008ea8:	e7a6      	b.n	8008df8 <_printf_i+0xf8>
 8008eaa:	4824      	ldr	r0, [pc, #144]	; (8008f3c <_printf_i+0x23c>)
 8008eac:	e7e4      	b.n	8008e78 <_printf_i+0x178>
 8008eae:	4615      	mov	r5, r2
 8008eb0:	e7bd      	b.n	8008e2e <_printf_i+0x12e>
 8008eb2:	682b      	ldr	r3, [r5, #0]
 8008eb4:	6826      	ldr	r6, [r4, #0]
 8008eb6:	1d18      	adds	r0, r3, #4
 8008eb8:	6961      	ldr	r1, [r4, #20]
 8008eba:	6028      	str	r0, [r5, #0]
 8008ebc:	0635      	lsls	r5, r6, #24
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	d501      	bpl.n	8008ec6 <_printf_i+0x1c6>
 8008ec2:	6019      	str	r1, [r3, #0]
 8008ec4:	e002      	b.n	8008ecc <_printf_i+0x1cc>
 8008ec6:	0670      	lsls	r0, r6, #25
 8008ec8:	d5fb      	bpl.n	8008ec2 <_printf_i+0x1c2>
 8008eca:	8019      	strh	r1, [r3, #0]
 8008ecc:	2300      	movs	r3, #0
 8008ece:	4615      	mov	r5, r2
 8008ed0:	6123      	str	r3, [r4, #16]
 8008ed2:	e7bc      	b.n	8008e4e <_printf_i+0x14e>
 8008ed4:	682b      	ldr	r3, [r5, #0]
 8008ed6:	2100      	movs	r1, #0
 8008ed8:	1d1a      	adds	r2, r3, #4
 8008eda:	602a      	str	r2, [r5, #0]
 8008edc:	681d      	ldr	r5, [r3, #0]
 8008ede:	6862      	ldr	r2, [r4, #4]
 8008ee0:	4628      	mov	r0, r5
 8008ee2:	f000 fc26 	bl	8009732 <memchr>
 8008ee6:	b108      	cbz	r0, 8008eec <_printf_i+0x1ec>
 8008ee8:	1b40      	subs	r0, r0, r5
 8008eea:	6060      	str	r0, [r4, #4]
 8008eec:	6863      	ldr	r3, [r4, #4]
 8008eee:	6123      	str	r3, [r4, #16]
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ef6:	e7aa      	b.n	8008e4e <_printf_i+0x14e>
 8008ef8:	462a      	mov	r2, r5
 8008efa:	4649      	mov	r1, r9
 8008efc:	4640      	mov	r0, r8
 8008efe:	6923      	ldr	r3, [r4, #16]
 8008f00:	47d0      	blx	sl
 8008f02:	3001      	adds	r0, #1
 8008f04:	d0ad      	beq.n	8008e62 <_printf_i+0x162>
 8008f06:	6823      	ldr	r3, [r4, #0]
 8008f08:	079b      	lsls	r3, r3, #30
 8008f0a:	d413      	bmi.n	8008f34 <_printf_i+0x234>
 8008f0c:	68e0      	ldr	r0, [r4, #12]
 8008f0e:	9b03      	ldr	r3, [sp, #12]
 8008f10:	4298      	cmp	r0, r3
 8008f12:	bfb8      	it	lt
 8008f14:	4618      	movlt	r0, r3
 8008f16:	e7a6      	b.n	8008e66 <_printf_i+0x166>
 8008f18:	2301      	movs	r3, #1
 8008f1a:	4632      	mov	r2, r6
 8008f1c:	4649      	mov	r1, r9
 8008f1e:	4640      	mov	r0, r8
 8008f20:	47d0      	blx	sl
 8008f22:	3001      	adds	r0, #1
 8008f24:	d09d      	beq.n	8008e62 <_printf_i+0x162>
 8008f26:	3501      	adds	r5, #1
 8008f28:	68e3      	ldr	r3, [r4, #12]
 8008f2a:	9903      	ldr	r1, [sp, #12]
 8008f2c:	1a5b      	subs	r3, r3, r1
 8008f2e:	42ab      	cmp	r3, r5
 8008f30:	dcf2      	bgt.n	8008f18 <_printf_i+0x218>
 8008f32:	e7eb      	b.n	8008f0c <_printf_i+0x20c>
 8008f34:	2500      	movs	r5, #0
 8008f36:	f104 0619 	add.w	r6, r4, #25
 8008f3a:	e7f5      	b.n	8008f28 <_printf_i+0x228>
 8008f3c:	0800cc53 	.word	0x0800cc53
 8008f40:	0800cc64 	.word	0x0800cc64

08008f44 <_scanf_float>:
 8008f44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f48:	b087      	sub	sp, #28
 8008f4a:	9303      	str	r3, [sp, #12]
 8008f4c:	688b      	ldr	r3, [r1, #8]
 8008f4e:	4617      	mov	r7, r2
 8008f50:	1e5a      	subs	r2, r3, #1
 8008f52:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008f56:	bf85      	ittet	hi
 8008f58:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008f5c:	195b      	addhi	r3, r3, r5
 8008f5e:	2300      	movls	r3, #0
 8008f60:	9302      	strhi	r3, [sp, #8]
 8008f62:	bf88      	it	hi
 8008f64:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008f68:	468b      	mov	fp, r1
 8008f6a:	f04f 0500 	mov.w	r5, #0
 8008f6e:	bf8c      	ite	hi
 8008f70:	608b      	strhi	r3, [r1, #8]
 8008f72:	9302      	strls	r3, [sp, #8]
 8008f74:	680b      	ldr	r3, [r1, #0]
 8008f76:	4680      	mov	r8, r0
 8008f78:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008f7c:	f84b 3b1c 	str.w	r3, [fp], #28
 8008f80:	460c      	mov	r4, r1
 8008f82:	465e      	mov	r6, fp
 8008f84:	46aa      	mov	sl, r5
 8008f86:	46a9      	mov	r9, r5
 8008f88:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008f8c:	9501      	str	r5, [sp, #4]
 8008f8e:	68a2      	ldr	r2, [r4, #8]
 8008f90:	b152      	cbz	r2, 8008fa8 <_scanf_float+0x64>
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	781b      	ldrb	r3, [r3, #0]
 8008f96:	2b4e      	cmp	r3, #78	; 0x4e
 8008f98:	d864      	bhi.n	8009064 <_scanf_float+0x120>
 8008f9a:	2b40      	cmp	r3, #64	; 0x40
 8008f9c:	d83c      	bhi.n	8009018 <_scanf_float+0xd4>
 8008f9e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008fa2:	b2c8      	uxtb	r0, r1
 8008fa4:	280e      	cmp	r0, #14
 8008fa6:	d93a      	bls.n	800901e <_scanf_float+0xda>
 8008fa8:	f1b9 0f00 	cmp.w	r9, #0
 8008fac:	d003      	beq.n	8008fb6 <_scanf_float+0x72>
 8008fae:	6823      	ldr	r3, [r4, #0]
 8008fb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008fb4:	6023      	str	r3, [r4, #0]
 8008fb6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008fba:	f1ba 0f01 	cmp.w	sl, #1
 8008fbe:	f200 8113 	bhi.w	80091e8 <_scanf_float+0x2a4>
 8008fc2:	455e      	cmp	r6, fp
 8008fc4:	f200 8105 	bhi.w	80091d2 <_scanf_float+0x28e>
 8008fc8:	2501      	movs	r5, #1
 8008fca:	4628      	mov	r0, r5
 8008fcc:	b007      	add	sp, #28
 8008fce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fd2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008fd6:	2a0d      	cmp	r2, #13
 8008fd8:	d8e6      	bhi.n	8008fa8 <_scanf_float+0x64>
 8008fda:	a101      	add	r1, pc, #4	; (adr r1, 8008fe0 <_scanf_float+0x9c>)
 8008fdc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008fe0:	0800911f 	.word	0x0800911f
 8008fe4:	08008fa9 	.word	0x08008fa9
 8008fe8:	08008fa9 	.word	0x08008fa9
 8008fec:	08008fa9 	.word	0x08008fa9
 8008ff0:	0800917f 	.word	0x0800917f
 8008ff4:	08009157 	.word	0x08009157
 8008ff8:	08008fa9 	.word	0x08008fa9
 8008ffc:	08008fa9 	.word	0x08008fa9
 8009000:	0800912d 	.word	0x0800912d
 8009004:	08008fa9 	.word	0x08008fa9
 8009008:	08008fa9 	.word	0x08008fa9
 800900c:	08008fa9 	.word	0x08008fa9
 8009010:	08008fa9 	.word	0x08008fa9
 8009014:	080090e5 	.word	0x080090e5
 8009018:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800901c:	e7db      	b.n	8008fd6 <_scanf_float+0x92>
 800901e:	290e      	cmp	r1, #14
 8009020:	d8c2      	bhi.n	8008fa8 <_scanf_float+0x64>
 8009022:	a001      	add	r0, pc, #4	; (adr r0, 8009028 <_scanf_float+0xe4>)
 8009024:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009028:	080090d7 	.word	0x080090d7
 800902c:	08008fa9 	.word	0x08008fa9
 8009030:	080090d7 	.word	0x080090d7
 8009034:	0800916b 	.word	0x0800916b
 8009038:	08008fa9 	.word	0x08008fa9
 800903c:	08009085 	.word	0x08009085
 8009040:	080090c1 	.word	0x080090c1
 8009044:	080090c1 	.word	0x080090c1
 8009048:	080090c1 	.word	0x080090c1
 800904c:	080090c1 	.word	0x080090c1
 8009050:	080090c1 	.word	0x080090c1
 8009054:	080090c1 	.word	0x080090c1
 8009058:	080090c1 	.word	0x080090c1
 800905c:	080090c1 	.word	0x080090c1
 8009060:	080090c1 	.word	0x080090c1
 8009064:	2b6e      	cmp	r3, #110	; 0x6e
 8009066:	d809      	bhi.n	800907c <_scanf_float+0x138>
 8009068:	2b60      	cmp	r3, #96	; 0x60
 800906a:	d8b2      	bhi.n	8008fd2 <_scanf_float+0x8e>
 800906c:	2b54      	cmp	r3, #84	; 0x54
 800906e:	d077      	beq.n	8009160 <_scanf_float+0x21c>
 8009070:	2b59      	cmp	r3, #89	; 0x59
 8009072:	d199      	bne.n	8008fa8 <_scanf_float+0x64>
 8009074:	2d07      	cmp	r5, #7
 8009076:	d197      	bne.n	8008fa8 <_scanf_float+0x64>
 8009078:	2508      	movs	r5, #8
 800907a:	e029      	b.n	80090d0 <_scanf_float+0x18c>
 800907c:	2b74      	cmp	r3, #116	; 0x74
 800907e:	d06f      	beq.n	8009160 <_scanf_float+0x21c>
 8009080:	2b79      	cmp	r3, #121	; 0x79
 8009082:	e7f6      	b.n	8009072 <_scanf_float+0x12e>
 8009084:	6821      	ldr	r1, [r4, #0]
 8009086:	05c8      	lsls	r0, r1, #23
 8009088:	d51a      	bpl.n	80090c0 <_scanf_float+0x17c>
 800908a:	9b02      	ldr	r3, [sp, #8]
 800908c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8009090:	6021      	str	r1, [r4, #0]
 8009092:	f109 0901 	add.w	r9, r9, #1
 8009096:	b11b      	cbz	r3, 80090a0 <_scanf_float+0x15c>
 8009098:	3b01      	subs	r3, #1
 800909a:	3201      	adds	r2, #1
 800909c:	9302      	str	r3, [sp, #8]
 800909e:	60a2      	str	r2, [r4, #8]
 80090a0:	68a3      	ldr	r3, [r4, #8]
 80090a2:	3b01      	subs	r3, #1
 80090a4:	60a3      	str	r3, [r4, #8]
 80090a6:	6923      	ldr	r3, [r4, #16]
 80090a8:	3301      	adds	r3, #1
 80090aa:	6123      	str	r3, [r4, #16]
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	3b01      	subs	r3, #1
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	607b      	str	r3, [r7, #4]
 80090b4:	f340 8084 	ble.w	80091c0 <_scanf_float+0x27c>
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	3301      	adds	r3, #1
 80090bc:	603b      	str	r3, [r7, #0]
 80090be:	e766      	b.n	8008f8e <_scanf_float+0x4a>
 80090c0:	eb1a 0f05 	cmn.w	sl, r5
 80090c4:	f47f af70 	bne.w	8008fa8 <_scanf_float+0x64>
 80090c8:	6822      	ldr	r2, [r4, #0]
 80090ca:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80090ce:	6022      	str	r2, [r4, #0]
 80090d0:	f806 3b01 	strb.w	r3, [r6], #1
 80090d4:	e7e4      	b.n	80090a0 <_scanf_float+0x15c>
 80090d6:	6822      	ldr	r2, [r4, #0]
 80090d8:	0610      	lsls	r0, r2, #24
 80090da:	f57f af65 	bpl.w	8008fa8 <_scanf_float+0x64>
 80090de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80090e2:	e7f4      	b.n	80090ce <_scanf_float+0x18a>
 80090e4:	f1ba 0f00 	cmp.w	sl, #0
 80090e8:	d10e      	bne.n	8009108 <_scanf_float+0x1c4>
 80090ea:	f1b9 0f00 	cmp.w	r9, #0
 80090ee:	d10e      	bne.n	800910e <_scanf_float+0x1ca>
 80090f0:	6822      	ldr	r2, [r4, #0]
 80090f2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80090f6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80090fa:	d108      	bne.n	800910e <_scanf_float+0x1ca>
 80090fc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009100:	f04f 0a01 	mov.w	sl, #1
 8009104:	6022      	str	r2, [r4, #0]
 8009106:	e7e3      	b.n	80090d0 <_scanf_float+0x18c>
 8009108:	f1ba 0f02 	cmp.w	sl, #2
 800910c:	d055      	beq.n	80091ba <_scanf_float+0x276>
 800910e:	2d01      	cmp	r5, #1
 8009110:	d002      	beq.n	8009118 <_scanf_float+0x1d4>
 8009112:	2d04      	cmp	r5, #4
 8009114:	f47f af48 	bne.w	8008fa8 <_scanf_float+0x64>
 8009118:	3501      	adds	r5, #1
 800911a:	b2ed      	uxtb	r5, r5
 800911c:	e7d8      	b.n	80090d0 <_scanf_float+0x18c>
 800911e:	f1ba 0f01 	cmp.w	sl, #1
 8009122:	f47f af41 	bne.w	8008fa8 <_scanf_float+0x64>
 8009126:	f04f 0a02 	mov.w	sl, #2
 800912a:	e7d1      	b.n	80090d0 <_scanf_float+0x18c>
 800912c:	b97d      	cbnz	r5, 800914e <_scanf_float+0x20a>
 800912e:	f1b9 0f00 	cmp.w	r9, #0
 8009132:	f47f af3c 	bne.w	8008fae <_scanf_float+0x6a>
 8009136:	6822      	ldr	r2, [r4, #0]
 8009138:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800913c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009140:	f47f af39 	bne.w	8008fb6 <_scanf_float+0x72>
 8009144:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009148:	2501      	movs	r5, #1
 800914a:	6022      	str	r2, [r4, #0]
 800914c:	e7c0      	b.n	80090d0 <_scanf_float+0x18c>
 800914e:	2d03      	cmp	r5, #3
 8009150:	d0e2      	beq.n	8009118 <_scanf_float+0x1d4>
 8009152:	2d05      	cmp	r5, #5
 8009154:	e7de      	b.n	8009114 <_scanf_float+0x1d0>
 8009156:	2d02      	cmp	r5, #2
 8009158:	f47f af26 	bne.w	8008fa8 <_scanf_float+0x64>
 800915c:	2503      	movs	r5, #3
 800915e:	e7b7      	b.n	80090d0 <_scanf_float+0x18c>
 8009160:	2d06      	cmp	r5, #6
 8009162:	f47f af21 	bne.w	8008fa8 <_scanf_float+0x64>
 8009166:	2507      	movs	r5, #7
 8009168:	e7b2      	b.n	80090d0 <_scanf_float+0x18c>
 800916a:	6822      	ldr	r2, [r4, #0]
 800916c:	0591      	lsls	r1, r2, #22
 800916e:	f57f af1b 	bpl.w	8008fa8 <_scanf_float+0x64>
 8009172:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8009176:	6022      	str	r2, [r4, #0]
 8009178:	f8cd 9004 	str.w	r9, [sp, #4]
 800917c:	e7a8      	b.n	80090d0 <_scanf_float+0x18c>
 800917e:	6822      	ldr	r2, [r4, #0]
 8009180:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8009184:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009188:	d006      	beq.n	8009198 <_scanf_float+0x254>
 800918a:	0550      	lsls	r0, r2, #21
 800918c:	f57f af0c 	bpl.w	8008fa8 <_scanf_float+0x64>
 8009190:	f1b9 0f00 	cmp.w	r9, #0
 8009194:	f43f af0f 	beq.w	8008fb6 <_scanf_float+0x72>
 8009198:	0591      	lsls	r1, r2, #22
 800919a:	bf58      	it	pl
 800919c:	9901      	ldrpl	r1, [sp, #4]
 800919e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80091a2:	bf58      	it	pl
 80091a4:	eba9 0101 	subpl.w	r1, r9, r1
 80091a8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80091ac:	f04f 0900 	mov.w	r9, #0
 80091b0:	bf58      	it	pl
 80091b2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80091b6:	6022      	str	r2, [r4, #0]
 80091b8:	e78a      	b.n	80090d0 <_scanf_float+0x18c>
 80091ba:	f04f 0a03 	mov.w	sl, #3
 80091be:	e787      	b.n	80090d0 <_scanf_float+0x18c>
 80091c0:	4639      	mov	r1, r7
 80091c2:	4640      	mov	r0, r8
 80091c4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80091c8:	4798      	blx	r3
 80091ca:	2800      	cmp	r0, #0
 80091cc:	f43f aedf 	beq.w	8008f8e <_scanf_float+0x4a>
 80091d0:	e6ea      	b.n	8008fa8 <_scanf_float+0x64>
 80091d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80091d6:	463a      	mov	r2, r7
 80091d8:	4640      	mov	r0, r8
 80091da:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80091de:	4798      	blx	r3
 80091e0:	6923      	ldr	r3, [r4, #16]
 80091e2:	3b01      	subs	r3, #1
 80091e4:	6123      	str	r3, [r4, #16]
 80091e6:	e6ec      	b.n	8008fc2 <_scanf_float+0x7e>
 80091e8:	1e6b      	subs	r3, r5, #1
 80091ea:	2b06      	cmp	r3, #6
 80091ec:	d825      	bhi.n	800923a <_scanf_float+0x2f6>
 80091ee:	2d02      	cmp	r5, #2
 80091f0:	d836      	bhi.n	8009260 <_scanf_float+0x31c>
 80091f2:	455e      	cmp	r6, fp
 80091f4:	f67f aee8 	bls.w	8008fc8 <_scanf_float+0x84>
 80091f8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80091fc:	463a      	mov	r2, r7
 80091fe:	4640      	mov	r0, r8
 8009200:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009204:	4798      	blx	r3
 8009206:	6923      	ldr	r3, [r4, #16]
 8009208:	3b01      	subs	r3, #1
 800920a:	6123      	str	r3, [r4, #16]
 800920c:	e7f1      	b.n	80091f2 <_scanf_float+0x2ae>
 800920e:	9802      	ldr	r0, [sp, #8]
 8009210:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009214:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8009218:	463a      	mov	r2, r7
 800921a:	9002      	str	r0, [sp, #8]
 800921c:	4640      	mov	r0, r8
 800921e:	4798      	blx	r3
 8009220:	6923      	ldr	r3, [r4, #16]
 8009222:	3b01      	subs	r3, #1
 8009224:	6123      	str	r3, [r4, #16]
 8009226:	f10a 3aff 	add.w	sl, sl, #4294967295
 800922a:	fa5f fa8a 	uxtb.w	sl, sl
 800922e:	f1ba 0f02 	cmp.w	sl, #2
 8009232:	d1ec      	bne.n	800920e <_scanf_float+0x2ca>
 8009234:	3d03      	subs	r5, #3
 8009236:	b2ed      	uxtb	r5, r5
 8009238:	1b76      	subs	r6, r6, r5
 800923a:	6823      	ldr	r3, [r4, #0]
 800923c:	05da      	lsls	r2, r3, #23
 800923e:	d52f      	bpl.n	80092a0 <_scanf_float+0x35c>
 8009240:	055b      	lsls	r3, r3, #21
 8009242:	d510      	bpl.n	8009266 <_scanf_float+0x322>
 8009244:	455e      	cmp	r6, fp
 8009246:	f67f aebf 	bls.w	8008fc8 <_scanf_float+0x84>
 800924a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800924e:	463a      	mov	r2, r7
 8009250:	4640      	mov	r0, r8
 8009252:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009256:	4798      	blx	r3
 8009258:	6923      	ldr	r3, [r4, #16]
 800925a:	3b01      	subs	r3, #1
 800925c:	6123      	str	r3, [r4, #16]
 800925e:	e7f1      	b.n	8009244 <_scanf_float+0x300>
 8009260:	46aa      	mov	sl, r5
 8009262:	9602      	str	r6, [sp, #8]
 8009264:	e7df      	b.n	8009226 <_scanf_float+0x2e2>
 8009266:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800926a:	6923      	ldr	r3, [r4, #16]
 800926c:	2965      	cmp	r1, #101	; 0x65
 800926e:	f103 33ff 	add.w	r3, r3, #4294967295
 8009272:	f106 35ff 	add.w	r5, r6, #4294967295
 8009276:	6123      	str	r3, [r4, #16]
 8009278:	d00c      	beq.n	8009294 <_scanf_float+0x350>
 800927a:	2945      	cmp	r1, #69	; 0x45
 800927c:	d00a      	beq.n	8009294 <_scanf_float+0x350>
 800927e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009282:	463a      	mov	r2, r7
 8009284:	4640      	mov	r0, r8
 8009286:	4798      	blx	r3
 8009288:	6923      	ldr	r3, [r4, #16]
 800928a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800928e:	3b01      	subs	r3, #1
 8009290:	1eb5      	subs	r5, r6, #2
 8009292:	6123      	str	r3, [r4, #16]
 8009294:	463a      	mov	r2, r7
 8009296:	4640      	mov	r0, r8
 8009298:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800929c:	4798      	blx	r3
 800929e:	462e      	mov	r6, r5
 80092a0:	6825      	ldr	r5, [r4, #0]
 80092a2:	f015 0510 	ands.w	r5, r5, #16
 80092a6:	d155      	bne.n	8009354 <_scanf_float+0x410>
 80092a8:	7035      	strb	r5, [r6, #0]
 80092aa:	6823      	ldr	r3, [r4, #0]
 80092ac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80092b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80092b4:	d11d      	bne.n	80092f2 <_scanf_float+0x3ae>
 80092b6:	9b01      	ldr	r3, [sp, #4]
 80092b8:	454b      	cmp	r3, r9
 80092ba:	eba3 0209 	sub.w	r2, r3, r9
 80092be:	d125      	bne.n	800930c <_scanf_float+0x3c8>
 80092c0:	2200      	movs	r2, #0
 80092c2:	4659      	mov	r1, fp
 80092c4:	4640      	mov	r0, r8
 80092c6:	f7ff f943 	bl	8008550 <_strtod_r>
 80092ca:	9b03      	ldr	r3, [sp, #12]
 80092cc:	f8d4 c000 	ldr.w	ip, [r4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	f01c 0f02 	tst.w	ip, #2
 80092d6:	4606      	mov	r6, r0
 80092d8:	460f      	mov	r7, r1
 80092da:	f103 0204 	add.w	r2, r3, #4
 80092de:	d020      	beq.n	8009322 <_scanf_float+0x3de>
 80092e0:	9903      	ldr	r1, [sp, #12]
 80092e2:	600a      	str	r2, [r1, #0]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	e9c3 6700 	strd	r6, r7, [r3]
 80092ea:	68e3      	ldr	r3, [r4, #12]
 80092ec:	3301      	adds	r3, #1
 80092ee:	60e3      	str	r3, [r4, #12]
 80092f0:	e66b      	b.n	8008fca <_scanf_float+0x86>
 80092f2:	9b04      	ldr	r3, [sp, #16]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d0e3      	beq.n	80092c0 <_scanf_float+0x37c>
 80092f8:	9905      	ldr	r1, [sp, #20]
 80092fa:	230a      	movs	r3, #10
 80092fc:	462a      	mov	r2, r5
 80092fe:	4640      	mov	r0, r8
 8009300:	3101      	adds	r1, #1
 8009302:	f7ff f9b5 	bl	8008670 <_strtol_r>
 8009306:	9b04      	ldr	r3, [sp, #16]
 8009308:	9e05      	ldr	r6, [sp, #20]
 800930a:	1ac2      	subs	r2, r0, r3
 800930c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8009310:	429e      	cmp	r6, r3
 8009312:	bf28      	it	cs
 8009314:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8009318:	4630      	mov	r0, r6
 800931a:	490f      	ldr	r1, [pc, #60]	; (8009358 <_scanf_float+0x414>)
 800931c:	f000 f8e2 	bl	80094e4 <siprintf>
 8009320:	e7ce      	b.n	80092c0 <_scanf_float+0x37c>
 8009322:	f01c 0f04 	tst.w	ip, #4
 8009326:	d1db      	bne.n	80092e0 <_scanf_float+0x39c>
 8009328:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800932c:	f8cc 2000 	str.w	r2, [ip]
 8009330:	f8d3 8000 	ldr.w	r8, [r3]
 8009334:	4602      	mov	r2, r0
 8009336:	460b      	mov	r3, r1
 8009338:	f7f7 fb72 	bl	8000a20 <__aeabi_dcmpun>
 800933c:	b128      	cbz	r0, 800934a <_scanf_float+0x406>
 800933e:	4807      	ldr	r0, [pc, #28]	; (800935c <_scanf_float+0x418>)
 8009340:	f000 fa1a 	bl	8009778 <nanf>
 8009344:	f8c8 0000 	str.w	r0, [r8]
 8009348:	e7cf      	b.n	80092ea <_scanf_float+0x3a6>
 800934a:	4630      	mov	r0, r6
 800934c:	4639      	mov	r1, r7
 800934e:	f7f7 fbc5 	bl	8000adc <__aeabi_d2f>
 8009352:	e7f7      	b.n	8009344 <_scanf_float+0x400>
 8009354:	2500      	movs	r5, #0
 8009356:	e638      	b.n	8008fca <_scanf_float+0x86>
 8009358:	0800cc75 	.word	0x0800cc75
 800935c:	0800cf10 	.word	0x0800cf10

08009360 <std>:
 8009360:	2300      	movs	r3, #0
 8009362:	b510      	push	{r4, lr}
 8009364:	4604      	mov	r4, r0
 8009366:	e9c0 3300 	strd	r3, r3, [r0]
 800936a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800936e:	6083      	str	r3, [r0, #8]
 8009370:	8181      	strh	r1, [r0, #12]
 8009372:	6643      	str	r3, [r0, #100]	; 0x64
 8009374:	81c2      	strh	r2, [r0, #14]
 8009376:	6183      	str	r3, [r0, #24]
 8009378:	4619      	mov	r1, r3
 800937a:	2208      	movs	r2, #8
 800937c:	305c      	adds	r0, #92	; 0x5c
 800937e:	f000 f92e 	bl	80095de <memset>
 8009382:	4b0d      	ldr	r3, [pc, #52]	; (80093b8 <std+0x58>)
 8009384:	6224      	str	r4, [r4, #32]
 8009386:	6263      	str	r3, [r4, #36]	; 0x24
 8009388:	4b0c      	ldr	r3, [pc, #48]	; (80093bc <std+0x5c>)
 800938a:	62a3      	str	r3, [r4, #40]	; 0x28
 800938c:	4b0c      	ldr	r3, [pc, #48]	; (80093c0 <std+0x60>)
 800938e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009390:	4b0c      	ldr	r3, [pc, #48]	; (80093c4 <std+0x64>)
 8009392:	6323      	str	r3, [r4, #48]	; 0x30
 8009394:	4b0c      	ldr	r3, [pc, #48]	; (80093c8 <std+0x68>)
 8009396:	429c      	cmp	r4, r3
 8009398:	d006      	beq.n	80093a8 <std+0x48>
 800939a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800939e:	4294      	cmp	r4, r2
 80093a0:	d002      	beq.n	80093a8 <std+0x48>
 80093a2:	33d0      	adds	r3, #208	; 0xd0
 80093a4:	429c      	cmp	r4, r3
 80093a6:	d105      	bne.n	80093b4 <std+0x54>
 80093a8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80093ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80093b0:	f000 b9bc 	b.w	800972c <__retarget_lock_init_recursive>
 80093b4:	bd10      	pop	{r4, pc}
 80093b6:	bf00      	nop
 80093b8:	08009525 	.word	0x08009525
 80093bc:	08009547 	.word	0x08009547
 80093c0:	0800957f 	.word	0x0800957f
 80093c4:	080095a3 	.word	0x080095a3
 80093c8:	200027e8 	.word	0x200027e8

080093cc <stdio_exit_handler>:
 80093cc:	4a02      	ldr	r2, [pc, #8]	; (80093d8 <stdio_exit_handler+0xc>)
 80093ce:	4903      	ldr	r1, [pc, #12]	; (80093dc <stdio_exit_handler+0x10>)
 80093d0:	4803      	ldr	r0, [pc, #12]	; (80093e0 <stdio_exit_handler+0x14>)
 80093d2:	f000 b869 	b.w	80094a8 <_fwalk_sglue>
 80093d6:	bf00      	nop
 80093d8:	20000018 	.word	0x20000018
 80093dc:	0800ba39 	.word	0x0800ba39
 80093e0:	20000190 	.word	0x20000190

080093e4 <cleanup_stdio>:
 80093e4:	6841      	ldr	r1, [r0, #4]
 80093e6:	4b0c      	ldr	r3, [pc, #48]	; (8009418 <cleanup_stdio+0x34>)
 80093e8:	b510      	push	{r4, lr}
 80093ea:	4299      	cmp	r1, r3
 80093ec:	4604      	mov	r4, r0
 80093ee:	d001      	beq.n	80093f4 <cleanup_stdio+0x10>
 80093f0:	f002 fb22 	bl	800ba38 <_fflush_r>
 80093f4:	68a1      	ldr	r1, [r4, #8]
 80093f6:	4b09      	ldr	r3, [pc, #36]	; (800941c <cleanup_stdio+0x38>)
 80093f8:	4299      	cmp	r1, r3
 80093fa:	d002      	beq.n	8009402 <cleanup_stdio+0x1e>
 80093fc:	4620      	mov	r0, r4
 80093fe:	f002 fb1b 	bl	800ba38 <_fflush_r>
 8009402:	68e1      	ldr	r1, [r4, #12]
 8009404:	4b06      	ldr	r3, [pc, #24]	; (8009420 <cleanup_stdio+0x3c>)
 8009406:	4299      	cmp	r1, r3
 8009408:	d004      	beq.n	8009414 <cleanup_stdio+0x30>
 800940a:	4620      	mov	r0, r4
 800940c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009410:	f002 bb12 	b.w	800ba38 <_fflush_r>
 8009414:	bd10      	pop	{r4, pc}
 8009416:	bf00      	nop
 8009418:	200027e8 	.word	0x200027e8
 800941c:	20002850 	.word	0x20002850
 8009420:	200028b8 	.word	0x200028b8

08009424 <global_stdio_init.part.0>:
 8009424:	b510      	push	{r4, lr}
 8009426:	4b0b      	ldr	r3, [pc, #44]	; (8009454 <global_stdio_init.part.0+0x30>)
 8009428:	4c0b      	ldr	r4, [pc, #44]	; (8009458 <global_stdio_init.part.0+0x34>)
 800942a:	4a0c      	ldr	r2, [pc, #48]	; (800945c <global_stdio_init.part.0+0x38>)
 800942c:	4620      	mov	r0, r4
 800942e:	601a      	str	r2, [r3, #0]
 8009430:	2104      	movs	r1, #4
 8009432:	2200      	movs	r2, #0
 8009434:	f7ff ff94 	bl	8009360 <std>
 8009438:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800943c:	2201      	movs	r2, #1
 800943e:	2109      	movs	r1, #9
 8009440:	f7ff ff8e 	bl	8009360 <std>
 8009444:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009448:	2202      	movs	r2, #2
 800944a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800944e:	2112      	movs	r1, #18
 8009450:	f7ff bf86 	b.w	8009360 <std>
 8009454:	20002920 	.word	0x20002920
 8009458:	200027e8 	.word	0x200027e8
 800945c:	080093cd 	.word	0x080093cd

08009460 <__sfp_lock_acquire>:
 8009460:	4801      	ldr	r0, [pc, #4]	; (8009468 <__sfp_lock_acquire+0x8>)
 8009462:	f000 b964 	b.w	800972e <__retarget_lock_acquire_recursive>
 8009466:	bf00      	nop
 8009468:	20002929 	.word	0x20002929

0800946c <__sfp_lock_release>:
 800946c:	4801      	ldr	r0, [pc, #4]	; (8009474 <__sfp_lock_release+0x8>)
 800946e:	f000 b95f 	b.w	8009730 <__retarget_lock_release_recursive>
 8009472:	bf00      	nop
 8009474:	20002929 	.word	0x20002929

08009478 <__sinit>:
 8009478:	b510      	push	{r4, lr}
 800947a:	4604      	mov	r4, r0
 800947c:	f7ff fff0 	bl	8009460 <__sfp_lock_acquire>
 8009480:	6a23      	ldr	r3, [r4, #32]
 8009482:	b11b      	cbz	r3, 800948c <__sinit+0x14>
 8009484:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009488:	f7ff bff0 	b.w	800946c <__sfp_lock_release>
 800948c:	4b04      	ldr	r3, [pc, #16]	; (80094a0 <__sinit+0x28>)
 800948e:	6223      	str	r3, [r4, #32]
 8009490:	4b04      	ldr	r3, [pc, #16]	; (80094a4 <__sinit+0x2c>)
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d1f5      	bne.n	8009484 <__sinit+0xc>
 8009498:	f7ff ffc4 	bl	8009424 <global_stdio_init.part.0>
 800949c:	e7f2      	b.n	8009484 <__sinit+0xc>
 800949e:	bf00      	nop
 80094a0:	080093e5 	.word	0x080093e5
 80094a4:	20002920 	.word	0x20002920

080094a8 <_fwalk_sglue>:
 80094a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094ac:	4607      	mov	r7, r0
 80094ae:	4688      	mov	r8, r1
 80094b0:	4614      	mov	r4, r2
 80094b2:	2600      	movs	r6, #0
 80094b4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80094b8:	f1b9 0901 	subs.w	r9, r9, #1
 80094bc:	d505      	bpl.n	80094ca <_fwalk_sglue+0x22>
 80094be:	6824      	ldr	r4, [r4, #0]
 80094c0:	2c00      	cmp	r4, #0
 80094c2:	d1f7      	bne.n	80094b4 <_fwalk_sglue+0xc>
 80094c4:	4630      	mov	r0, r6
 80094c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094ca:	89ab      	ldrh	r3, [r5, #12]
 80094cc:	2b01      	cmp	r3, #1
 80094ce:	d907      	bls.n	80094e0 <_fwalk_sglue+0x38>
 80094d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80094d4:	3301      	adds	r3, #1
 80094d6:	d003      	beq.n	80094e0 <_fwalk_sglue+0x38>
 80094d8:	4629      	mov	r1, r5
 80094da:	4638      	mov	r0, r7
 80094dc:	47c0      	blx	r8
 80094de:	4306      	orrs	r6, r0
 80094e0:	3568      	adds	r5, #104	; 0x68
 80094e2:	e7e9      	b.n	80094b8 <_fwalk_sglue+0x10>

080094e4 <siprintf>:
 80094e4:	b40e      	push	{r1, r2, r3}
 80094e6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80094ea:	b500      	push	{lr}
 80094ec:	b09c      	sub	sp, #112	; 0x70
 80094ee:	ab1d      	add	r3, sp, #116	; 0x74
 80094f0:	9002      	str	r0, [sp, #8]
 80094f2:	9006      	str	r0, [sp, #24]
 80094f4:	9107      	str	r1, [sp, #28]
 80094f6:	9104      	str	r1, [sp, #16]
 80094f8:	4808      	ldr	r0, [pc, #32]	; (800951c <siprintf+0x38>)
 80094fa:	4909      	ldr	r1, [pc, #36]	; (8009520 <siprintf+0x3c>)
 80094fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8009500:	9105      	str	r1, [sp, #20]
 8009502:	6800      	ldr	r0, [r0, #0]
 8009504:	a902      	add	r1, sp, #8
 8009506:	9301      	str	r3, [sp, #4]
 8009508:	f002 f916 	bl	800b738 <_svfiprintf_r>
 800950c:	2200      	movs	r2, #0
 800950e:	9b02      	ldr	r3, [sp, #8]
 8009510:	701a      	strb	r2, [r3, #0]
 8009512:	b01c      	add	sp, #112	; 0x70
 8009514:	f85d eb04 	ldr.w	lr, [sp], #4
 8009518:	b003      	add	sp, #12
 800951a:	4770      	bx	lr
 800951c:	200001dc 	.word	0x200001dc
 8009520:	ffff0208 	.word	0xffff0208

08009524 <__sread>:
 8009524:	b510      	push	{r4, lr}
 8009526:	460c      	mov	r4, r1
 8009528:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800952c:	f000 f8b0 	bl	8009690 <_read_r>
 8009530:	2800      	cmp	r0, #0
 8009532:	bfab      	itete	ge
 8009534:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009536:	89a3      	ldrhlt	r3, [r4, #12]
 8009538:	181b      	addge	r3, r3, r0
 800953a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800953e:	bfac      	ite	ge
 8009540:	6563      	strge	r3, [r4, #84]	; 0x54
 8009542:	81a3      	strhlt	r3, [r4, #12]
 8009544:	bd10      	pop	{r4, pc}

08009546 <__swrite>:
 8009546:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800954a:	461f      	mov	r7, r3
 800954c:	898b      	ldrh	r3, [r1, #12]
 800954e:	4605      	mov	r5, r0
 8009550:	05db      	lsls	r3, r3, #23
 8009552:	460c      	mov	r4, r1
 8009554:	4616      	mov	r6, r2
 8009556:	d505      	bpl.n	8009564 <__swrite+0x1e>
 8009558:	2302      	movs	r3, #2
 800955a:	2200      	movs	r2, #0
 800955c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009560:	f000 f884 	bl	800966c <_lseek_r>
 8009564:	89a3      	ldrh	r3, [r4, #12]
 8009566:	4632      	mov	r2, r6
 8009568:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800956c:	81a3      	strh	r3, [r4, #12]
 800956e:	4628      	mov	r0, r5
 8009570:	463b      	mov	r3, r7
 8009572:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009576:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800957a:	f000 b89b 	b.w	80096b4 <_write_r>

0800957e <__sseek>:
 800957e:	b510      	push	{r4, lr}
 8009580:	460c      	mov	r4, r1
 8009582:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009586:	f000 f871 	bl	800966c <_lseek_r>
 800958a:	1c43      	adds	r3, r0, #1
 800958c:	89a3      	ldrh	r3, [r4, #12]
 800958e:	bf15      	itete	ne
 8009590:	6560      	strne	r0, [r4, #84]	; 0x54
 8009592:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009596:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800959a:	81a3      	strheq	r3, [r4, #12]
 800959c:	bf18      	it	ne
 800959e:	81a3      	strhne	r3, [r4, #12]
 80095a0:	bd10      	pop	{r4, pc}

080095a2 <__sclose>:
 80095a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095a6:	f000 b851 	b.w	800964c <_close_r>

080095aa <memmove>:
 80095aa:	4288      	cmp	r0, r1
 80095ac:	b510      	push	{r4, lr}
 80095ae:	eb01 0402 	add.w	r4, r1, r2
 80095b2:	d902      	bls.n	80095ba <memmove+0x10>
 80095b4:	4284      	cmp	r4, r0
 80095b6:	4623      	mov	r3, r4
 80095b8:	d807      	bhi.n	80095ca <memmove+0x20>
 80095ba:	1e43      	subs	r3, r0, #1
 80095bc:	42a1      	cmp	r1, r4
 80095be:	d008      	beq.n	80095d2 <memmove+0x28>
 80095c0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80095c4:	f803 2f01 	strb.w	r2, [r3, #1]!
 80095c8:	e7f8      	b.n	80095bc <memmove+0x12>
 80095ca:	4601      	mov	r1, r0
 80095cc:	4402      	add	r2, r0
 80095ce:	428a      	cmp	r2, r1
 80095d0:	d100      	bne.n	80095d4 <memmove+0x2a>
 80095d2:	bd10      	pop	{r4, pc}
 80095d4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80095d8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80095dc:	e7f7      	b.n	80095ce <memmove+0x24>

080095de <memset>:
 80095de:	4603      	mov	r3, r0
 80095e0:	4402      	add	r2, r0
 80095e2:	4293      	cmp	r3, r2
 80095e4:	d100      	bne.n	80095e8 <memset+0xa>
 80095e6:	4770      	bx	lr
 80095e8:	f803 1b01 	strb.w	r1, [r3], #1
 80095ec:	e7f9      	b.n	80095e2 <memset+0x4>

080095ee <strncmp>:
 80095ee:	b510      	push	{r4, lr}
 80095f0:	b16a      	cbz	r2, 800960e <strncmp+0x20>
 80095f2:	3901      	subs	r1, #1
 80095f4:	1884      	adds	r4, r0, r2
 80095f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80095fa:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80095fe:	429a      	cmp	r2, r3
 8009600:	d103      	bne.n	800960a <strncmp+0x1c>
 8009602:	42a0      	cmp	r0, r4
 8009604:	d001      	beq.n	800960a <strncmp+0x1c>
 8009606:	2a00      	cmp	r2, #0
 8009608:	d1f5      	bne.n	80095f6 <strncmp+0x8>
 800960a:	1ad0      	subs	r0, r2, r3
 800960c:	bd10      	pop	{r4, pc}
 800960e:	4610      	mov	r0, r2
 8009610:	e7fc      	b.n	800960c <strncmp+0x1e>

08009612 <strpbrk>:
 8009612:	b570      	push	{r4, r5, r6, lr}
 8009614:	4603      	mov	r3, r0
 8009616:	7800      	ldrb	r0, [r0, #0]
 8009618:	b190      	cbz	r0, 8009640 <strpbrk+0x2e>
 800961a:	460c      	mov	r4, r1
 800961c:	4618      	mov	r0, r3
 800961e:	f813 5b01 	ldrb.w	r5, [r3], #1
 8009622:	b14d      	cbz	r5, 8009638 <strpbrk+0x26>
 8009624:	460a      	mov	r2, r1
 8009626:	e001      	b.n	800962c <strpbrk+0x1a>
 8009628:	42ae      	cmp	r6, r5
 800962a:	d009      	beq.n	8009640 <strpbrk+0x2e>
 800962c:	4614      	mov	r4, r2
 800962e:	f812 6b01 	ldrb.w	r6, [r2], #1
 8009632:	2e00      	cmp	r6, #0
 8009634:	d1f8      	bne.n	8009628 <strpbrk+0x16>
 8009636:	e7f1      	b.n	800961c <strpbrk+0xa>
 8009638:	7823      	ldrb	r3, [r4, #0]
 800963a:	2b00      	cmp	r3, #0
 800963c:	bf08      	it	eq
 800963e:	2000      	moveq	r0, #0
 8009640:	bd70      	pop	{r4, r5, r6, pc}
	...

08009644 <_localeconv_r>:
 8009644:	4800      	ldr	r0, [pc, #0]	; (8009648 <_localeconv_r+0x4>)
 8009646:	4770      	bx	lr
 8009648:	20000114 	.word	0x20000114

0800964c <_close_r>:
 800964c:	b538      	push	{r3, r4, r5, lr}
 800964e:	2300      	movs	r3, #0
 8009650:	4d05      	ldr	r5, [pc, #20]	; (8009668 <_close_r+0x1c>)
 8009652:	4604      	mov	r4, r0
 8009654:	4608      	mov	r0, r1
 8009656:	602b      	str	r3, [r5, #0]
 8009658:	f7f9 f928 	bl	80028ac <_close>
 800965c:	1c43      	adds	r3, r0, #1
 800965e:	d102      	bne.n	8009666 <_close_r+0x1a>
 8009660:	682b      	ldr	r3, [r5, #0]
 8009662:	b103      	cbz	r3, 8009666 <_close_r+0x1a>
 8009664:	6023      	str	r3, [r4, #0]
 8009666:	bd38      	pop	{r3, r4, r5, pc}
 8009668:	20002924 	.word	0x20002924

0800966c <_lseek_r>:
 800966c:	b538      	push	{r3, r4, r5, lr}
 800966e:	4604      	mov	r4, r0
 8009670:	4608      	mov	r0, r1
 8009672:	4611      	mov	r1, r2
 8009674:	2200      	movs	r2, #0
 8009676:	4d05      	ldr	r5, [pc, #20]	; (800968c <_lseek_r+0x20>)
 8009678:	602a      	str	r2, [r5, #0]
 800967a:	461a      	mov	r2, r3
 800967c:	f7f9 f920 	bl	80028c0 <_lseek>
 8009680:	1c43      	adds	r3, r0, #1
 8009682:	d102      	bne.n	800968a <_lseek_r+0x1e>
 8009684:	682b      	ldr	r3, [r5, #0]
 8009686:	b103      	cbz	r3, 800968a <_lseek_r+0x1e>
 8009688:	6023      	str	r3, [r4, #0]
 800968a:	bd38      	pop	{r3, r4, r5, pc}
 800968c:	20002924 	.word	0x20002924

08009690 <_read_r>:
 8009690:	b538      	push	{r3, r4, r5, lr}
 8009692:	4604      	mov	r4, r0
 8009694:	4608      	mov	r0, r1
 8009696:	4611      	mov	r1, r2
 8009698:	2200      	movs	r2, #0
 800969a:	4d05      	ldr	r5, [pc, #20]	; (80096b0 <_read_r+0x20>)
 800969c:	602a      	str	r2, [r5, #0]
 800969e:	461a      	mov	r2, r3
 80096a0:	f7f9 f8ea 	bl	8002878 <_read>
 80096a4:	1c43      	adds	r3, r0, #1
 80096a6:	d102      	bne.n	80096ae <_read_r+0x1e>
 80096a8:	682b      	ldr	r3, [r5, #0]
 80096aa:	b103      	cbz	r3, 80096ae <_read_r+0x1e>
 80096ac:	6023      	str	r3, [r4, #0]
 80096ae:	bd38      	pop	{r3, r4, r5, pc}
 80096b0:	20002924 	.word	0x20002924

080096b4 <_write_r>:
 80096b4:	b538      	push	{r3, r4, r5, lr}
 80096b6:	4604      	mov	r4, r0
 80096b8:	4608      	mov	r0, r1
 80096ba:	4611      	mov	r1, r2
 80096bc:	2200      	movs	r2, #0
 80096be:	4d05      	ldr	r5, [pc, #20]	; (80096d4 <_write_r+0x20>)
 80096c0:	602a      	str	r2, [r5, #0]
 80096c2:	461a      	mov	r2, r3
 80096c4:	f7f9 f8e5 	bl	8002892 <_write>
 80096c8:	1c43      	adds	r3, r0, #1
 80096ca:	d102      	bne.n	80096d2 <_write_r+0x1e>
 80096cc:	682b      	ldr	r3, [r5, #0]
 80096ce:	b103      	cbz	r3, 80096d2 <_write_r+0x1e>
 80096d0:	6023      	str	r3, [r4, #0]
 80096d2:	bd38      	pop	{r3, r4, r5, pc}
 80096d4:	20002924 	.word	0x20002924

080096d8 <__errno>:
 80096d8:	4b01      	ldr	r3, [pc, #4]	; (80096e0 <__errno+0x8>)
 80096da:	6818      	ldr	r0, [r3, #0]
 80096dc:	4770      	bx	lr
 80096de:	bf00      	nop
 80096e0:	200001dc 	.word	0x200001dc

080096e4 <__libc_init_array>:
 80096e4:	b570      	push	{r4, r5, r6, lr}
 80096e6:	2600      	movs	r6, #0
 80096e8:	4d0c      	ldr	r5, [pc, #48]	; (800971c <__libc_init_array+0x38>)
 80096ea:	4c0d      	ldr	r4, [pc, #52]	; (8009720 <__libc_init_array+0x3c>)
 80096ec:	1b64      	subs	r4, r4, r5
 80096ee:	10a4      	asrs	r4, r4, #2
 80096f0:	42a6      	cmp	r6, r4
 80096f2:	d109      	bne.n	8009708 <__libc_init_array+0x24>
 80096f4:	f002 fcfa 	bl	800c0ec <_init>
 80096f8:	2600      	movs	r6, #0
 80096fa:	4d0a      	ldr	r5, [pc, #40]	; (8009724 <__libc_init_array+0x40>)
 80096fc:	4c0a      	ldr	r4, [pc, #40]	; (8009728 <__libc_init_array+0x44>)
 80096fe:	1b64      	subs	r4, r4, r5
 8009700:	10a4      	asrs	r4, r4, #2
 8009702:	42a6      	cmp	r6, r4
 8009704:	d105      	bne.n	8009712 <__libc_init_array+0x2e>
 8009706:	bd70      	pop	{r4, r5, r6, pc}
 8009708:	f855 3b04 	ldr.w	r3, [r5], #4
 800970c:	4798      	blx	r3
 800970e:	3601      	adds	r6, #1
 8009710:	e7ee      	b.n	80096f0 <__libc_init_array+0xc>
 8009712:	f855 3b04 	ldr.w	r3, [r5], #4
 8009716:	4798      	blx	r3
 8009718:	3601      	adds	r6, #1
 800971a:	e7f2      	b.n	8009702 <__libc_init_array+0x1e>
 800971c:	0800cf14 	.word	0x0800cf14
 8009720:	0800cf14 	.word	0x0800cf14
 8009724:	0800cf14 	.word	0x0800cf14
 8009728:	0800cf18 	.word	0x0800cf18

0800972c <__retarget_lock_init_recursive>:
 800972c:	4770      	bx	lr

0800972e <__retarget_lock_acquire_recursive>:
 800972e:	4770      	bx	lr

08009730 <__retarget_lock_release_recursive>:
 8009730:	4770      	bx	lr

08009732 <memchr>:
 8009732:	4603      	mov	r3, r0
 8009734:	b510      	push	{r4, lr}
 8009736:	b2c9      	uxtb	r1, r1
 8009738:	4402      	add	r2, r0
 800973a:	4293      	cmp	r3, r2
 800973c:	4618      	mov	r0, r3
 800973e:	d101      	bne.n	8009744 <memchr+0x12>
 8009740:	2000      	movs	r0, #0
 8009742:	e003      	b.n	800974c <memchr+0x1a>
 8009744:	7804      	ldrb	r4, [r0, #0]
 8009746:	3301      	adds	r3, #1
 8009748:	428c      	cmp	r4, r1
 800974a:	d1f6      	bne.n	800973a <memchr+0x8>
 800974c:	bd10      	pop	{r4, pc}

0800974e <memcpy>:
 800974e:	440a      	add	r2, r1
 8009750:	4291      	cmp	r1, r2
 8009752:	f100 33ff 	add.w	r3, r0, #4294967295
 8009756:	d100      	bne.n	800975a <memcpy+0xc>
 8009758:	4770      	bx	lr
 800975a:	b510      	push	{r4, lr}
 800975c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009760:	4291      	cmp	r1, r2
 8009762:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009766:	d1f9      	bne.n	800975c <memcpy+0xe>
 8009768:	bd10      	pop	{r4, pc}
	...

0800976c <nan>:
 800976c:	2000      	movs	r0, #0
 800976e:	4901      	ldr	r1, [pc, #4]	; (8009774 <nan+0x8>)
 8009770:	4770      	bx	lr
 8009772:	bf00      	nop
 8009774:	7ff80000 	.word	0x7ff80000

08009778 <nanf>:
 8009778:	4800      	ldr	r0, [pc, #0]	; (800977c <nanf+0x4>)
 800977a:	4770      	bx	lr
 800977c:	7fc00000 	.word	0x7fc00000

08009780 <quorem>:
 8009780:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009784:	6903      	ldr	r3, [r0, #16]
 8009786:	690c      	ldr	r4, [r1, #16]
 8009788:	4607      	mov	r7, r0
 800978a:	42a3      	cmp	r3, r4
 800978c:	db7f      	blt.n	800988e <quorem+0x10e>
 800978e:	3c01      	subs	r4, #1
 8009790:	f100 0514 	add.w	r5, r0, #20
 8009794:	f101 0814 	add.w	r8, r1, #20
 8009798:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800979c:	9301      	str	r3, [sp, #4]
 800979e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80097a2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80097a6:	3301      	adds	r3, #1
 80097a8:	429a      	cmp	r2, r3
 80097aa:	fbb2 f6f3 	udiv	r6, r2, r3
 80097ae:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80097b2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80097b6:	d331      	bcc.n	800981c <quorem+0x9c>
 80097b8:	f04f 0e00 	mov.w	lr, #0
 80097bc:	4640      	mov	r0, r8
 80097be:	46ac      	mov	ip, r5
 80097c0:	46f2      	mov	sl, lr
 80097c2:	f850 2b04 	ldr.w	r2, [r0], #4
 80097c6:	b293      	uxth	r3, r2
 80097c8:	fb06 e303 	mla	r3, r6, r3, lr
 80097cc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80097d0:	0c1a      	lsrs	r2, r3, #16
 80097d2:	b29b      	uxth	r3, r3
 80097d4:	fb06 220e 	mla	r2, r6, lr, r2
 80097d8:	ebaa 0303 	sub.w	r3, sl, r3
 80097dc:	f8dc a000 	ldr.w	sl, [ip]
 80097e0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80097e4:	fa1f fa8a 	uxth.w	sl, sl
 80097e8:	4453      	add	r3, sl
 80097ea:	f8dc a000 	ldr.w	sl, [ip]
 80097ee:	b292      	uxth	r2, r2
 80097f0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80097f4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80097f8:	b29b      	uxth	r3, r3
 80097fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80097fe:	4581      	cmp	r9, r0
 8009800:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009804:	f84c 3b04 	str.w	r3, [ip], #4
 8009808:	d2db      	bcs.n	80097c2 <quorem+0x42>
 800980a:	f855 300b 	ldr.w	r3, [r5, fp]
 800980e:	b92b      	cbnz	r3, 800981c <quorem+0x9c>
 8009810:	9b01      	ldr	r3, [sp, #4]
 8009812:	3b04      	subs	r3, #4
 8009814:	429d      	cmp	r5, r3
 8009816:	461a      	mov	r2, r3
 8009818:	d32d      	bcc.n	8009876 <quorem+0xf6>
 800981a:	613c      	str	r4, [r7, #16]
 800981c:	4638      	mov	r0, r7
 800981e:	f001 fd4b 	bl	800b2b8 <__mcmp>
 8009822:	2800      	cmp	r0, #0
 8009824:	db23      	blt.n	800986e <quorem+0xee>
 8009826:	4629      	mov	r1, r5
 8009828:	2000      	movs	r0, #0
 800982a:	3601      	adds	r6, #1
 800982c:	f858 2b04 	ldr.w	r2, [r8], #4
 8009830:	f8d1 c000 	ldr.w	ip, [r1]
 8009834:	b293      	uxth	r3, r2
 8009836:	1ac3      	subs	r3, r0, r3
 8009838:	0c12      	lsrs	r2, r2, #16
 800983a:	fa1f f08c 	uxth.w	r0, ip
 800983e:	4403      	add	r3, r0
 8009840:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8009844:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009848:	b29b      	uxth	r3, r3
 800984a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800984e:	45c1      	cmp	r9, r8
 8009850:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009854:	f841 3b04 	str.w	r3, [r1], #4
 8009858:	d2e8      	bcs.n	800982c <quorem+0xac>
 800985a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800985e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009862:	b922      	cbnz	r2, 800986e <quorem+0xee>
 8009864:	3b04      	subs	r3, #4
 8009866:	429d      	cmp	r5, r3
 8009868:	461a      	mov	r2, r3
 800986a:	d30a      	bcc.n	8009882 <quorem+0x102>
 800986c:	613c      	str	r4, [r7, #16]
 800986e:	4630      	mov	r0, r6
 8009870:	b003      	add	sp, #12
 8009872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009876:	6812      	ldr	r2, [r2, #0]
 8009878:	3b04      	subs	r3, #4
 800987a:	2a00      	cmp	r2, #0
 800987c:	d1cd      	bne.n	800981a <quorem+0x9a>
 800987e:	3c01      	subs	r4, #1
 8009880:	e7c8      	b.n	8009814 <quorem+0x94>
 8009882:	6812      	ldr	r2, [r2, #0]
 8009884:	3b04      	subs	r3, #4
 8009886:	2a00      	cmp	r2, #0
 8009888:	d1f0      	bne.n	800986c <quorem+0xec>
 800988a:	3c01      	subs	r4, #1
 800988c:	e7eb      	b.n	8009866 <quorem+0xe6>
 800988e:	2000      	movs	r0, #0
 8009890:	e7ee      	b.n	8009870 <quorem+0xf0>
 8009892:	0000      	movs	r0, r0
 8009894:	0000      	movs	r0, r0
	...

08009898 <_dtoa_r>:
 8009898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800989c:	4616      	mov	r6, r2
 800989e:	461f      	mov	r7, r3
 80098a0:	69c4      	ldr	r4, [r0, #28]
 80098a2:	b099      	sub	sp, #100	; 0x64
 80098a4:	4605      	mov	r5, r0
 80098a6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80098aa:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80098ae:	b974      	cbnz	r4, 80098ce <_dtoa_r+0x36>
 80098b0:	2010      	movs	r0, #16
 80098b2:	f001 f977 	bl	800aba4 <malloc>
 80098b6:	4602      	mov	r2, r0
 80098b8:	61e8      	str	r0, [r5, #28]
 80098ba:	b920      	cbnz	r0, 80098c6 <_dtoa_r+0x2e>
 80098bc:	21ef      	movs	r1, #239	; 0xef
 80098be:	4bac      	ldr	r3, [pc, #688]	; (8009b70 <_dtoa_r+0x2d8>)
 80098c0:	48ac      	ldr	r0, [pc, #688]	; (8009b74 <_dtoa_r+0x2dc>)
 80098c2:	f002 f8f1 	bl	800baa8 <__assert_func>
 80098c6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80098ca:	6004      	str	r4, [r0, #0]
 80098cc:	60c4      	str	r4, [r0, #12]
 80098ce:	69eb      	ldr	r3, [r5, #28]
 80098d0:	6819      	ldr	r1, [r3, #0]
 80098d2:	b151      	cbz	r1, 80098ea <_dtoa_r+0x52>
 80098d4:	685a      	ldr	r2, [r3, #4]
 80098d6:	2301      	movs	r3, #1
 80098d8:	4093      	lsls	r3, r2
 80098da:	604a      	str	r2, [r1, #4]
 80098dc:	608b      	str	r3, [r1, #8]
 80098de:	4628      	mov	r0, r5
 80098e0:	f001 fa66 	bl	800adb0 <_Bfree>
 80098e4:	2200      	movs	r2, #0
 80098e6:	69eb      	ldr	r3, [r5, #28]
 80098e8:	601a      	str	r2, [r3, #0]
 80098ea:	1e3b      	subs	r3, r7, #0
 80098ec:	bfaf      	iteee	ge
 80098ee:	2300      	movge	r3, #0
 80098f0:	2201      	movlt	r2, #1
 80098f2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80098f6:	9305      	strlt	r3, [sp, #20]
 80098f8:	bfa8      	it	ge
 80098fa:	f8c8 3000 	strge.w	r3, [r8]
 80098fe:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8009902:	4b9d      	ldr	r3, [pc, #628]	; (8009b78 <_dtoa_r+0x2e0>)
 8009904:	bfb8      	it	lt
 8009906:	f8c8 2000 	strlt.w	r2, [r8]
 800990a:	ea33 0309 	bics.w	r3, r3, r9
 800990e:	d119      	bne.n	8009944 <_dtoa_r+0xac>
 8009910:	f242 730f 	movw	r3, #9999	; 0x270f
 8009914:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009916:	6013      	str	r3, [r2, #0]
 8009918:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800991c:	4333      	orrs	r3, r6
 800991e:	f000 8589 	beq.w	800a434 <_dtoa_r+0xb9c>
 8009922:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009924:	b953      	cbnz	r3, 800993c <_dtoa_r+0xa4>
 8009926:	4b95      	ldr	r3, [pc, #596]	; (8009b7c <_dtoa_r+0x2e4>)
 8009928:	e023      	b.n	8009972 <_dtoa_r+0xda>
 800992a:	4b95      	ldr	r3, [pc, #596]	; (8009b80 <_dtoa_r+0x2e8>)
 800992c:	9303      	str	r3, [sp, #12]
 800992e:	3308      	adds	r3, #8
 8009930:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009932:	6013      	str	r3, [r2, #0]
 8009934:	9803      	ldr	r0, [sp, #12]
 8009936:	b019      	add	sp, #100	; 0x64
 8009938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800993c:	4b8f      	ldr	r3, [pc, #572]	; (8009b7c <_dtoa_r+0x2e4>)
 800993e:	9303      	str	r3, [sp, #12]
 8009940:	3303      	adds	r3, #3
 8009942:	e7f5      	b.n	8009930 <_dtoa_r+0x98>
 8009944:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8009948:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800994c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009950:	2200      	movs	r2, #0
 8009952:	2300      	movs	r3, #0
 8009954:	f7f7 f832 	bl	80009bc <__aeabi_dcmpeq>
 8009958:	4680      	mov	r8, r0
 800995a:	b160      	cbz	r0, 8009976 <_dtoa_r+0xde>
 800995c:	2301      	movs	r3, #1
 800995e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009960:	6013      	str	r3, [r2, #0]
 8009962:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009964:	2b00      	cmp	r3, #0
 8009966:	f000 8562 	beq.w	800a42e <_dtoa_r+0xb96>
 800996a:	4b86      	ldr	r3, [pc, #536]	; (8009b84 <_dtoa_r+0x2ec>)
 800996c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800996e:	6013      	str	r3, [r2, #0]
 8009970:	3b01      	subs	r3, #1
 8009972:	9303      	str	r3, [sp, #12]
 8009974:	e7de      	b.n	8009934 <_dtoa_r+0x9c>
 8009976:	ab16      	add	r3, sp, #88	; 0x58
 8009978:	9301      	str	r3, [sp, #4]
 800997a:	ab17      	add	r3, sp, #92	; 0x5c
 800997c:	9300      	str	r3, [sp, #0]
 800997e:	4628      	mov	r0, r5
 8009980:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009984:	f001 fda8 	bl	800b4d8 <__d2b>
 8009988:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800998c:	4682      	mov	sl, r0
 800998e:	2c00      	cmp	r4, #0
 8009990:	d07e      	beq.n	8009a90 <_dtoa_r+0x1f8>
 8009992:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009996:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009998:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800999c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80099a0:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80099a4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80099a8:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80099ac:	4619      	mov	r1, r3
 80099ae:	2200      	movs	r2, #0
 80099b0:	4b75      	ldr	r3, [pc, #468]	; (8009b88 <_dtoa_r+0x2f0>)
 80099b2:	f7f6 fbe3 	bl	800017c <__aeabi_dsub>
 80099b6:	a368      	add	r3, pc, #416	; (adr r3, 8009b58 <_dtoa_r+0x2c0>)
 80099b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099bc:	f7f6 fd96 	bl	80004ec <__aeabi_dmul>
 80099c0:	a367      	add	r3, pc, #412	; (adr r3, 8009b60 <_dtoa_r+0x2c8>)
 80099c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099c6:	f7f6 fbdb 	bl	8000180 <__adddf3>
 80099ca:	4606      	mov	r6, r0
 80099cc:	4620      	mov	r0, r4
 80099ce:	460f      	mov	r7, r1
 80099d0:	f7f6 fd22 	bl	8000418 <__aeabi_i2d>
 80099d4:	a364      	add	r3, pc, #400	; (adr r3, 8009b68 <_dtoa_r+0x2d0>)
 80099d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099da:	f7f6 fd87 	bl	80004ec <__aeabi_dmul>
 80099de:	4602      	mov	r2, r0
 80099e0:	460b      	mov	r3, r1
 80099e2:	4630      	mov	r0, r6
 80099e4:	4639      	mov	r1, r7
 80099e6:	f7f6 fbcb 	bl	8000180 <__adddf3>
 80099ea:	4606      	mov	r6, r0
 80099ec:	460f      	mov	r7, r1
 80099ee:	f7f7 f82d 	bl	8000a4c <__aeabi_d2iz>
 80099f2:	2200      	movs	r2, #0
 80099f4:	4683      	mov	fp, r0
 80099f6:	2300      	movs	r3, #0
 80099f8:	4630      	mov	r0, r6
 80099fa:	4639      	mov	r1, r7
 80099fc:	f7f6 ffe8 	bl	80009d0 <__aeabi_dcmplt>
 8009a00:	b148      	cbz	r0, 8009a16 <_dtoa_r+0x17e>
 8009a02:	4658      	mov	r0, fp
 8009a04:	f7f6 fd08 	bl	8000418 <__aeabi_i2d>
 8009a08:	4632      	mov	r2, r6
 8009a0a:	463b      	mov	r3, r7
 8009a0c:	f7f6 ffd6 	bl	80009bc <__aeabi_dcmpeq>
 8009a10:	b908      	cbnz	r0, 8009a16 <_dtoa_r+0x17e>
 8009a12:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009a16:	f1bb 0f16 	cmp.w	fp, #22
 8009a1a:	d857      	bhi.n	8009acc <_dtoa_r+0x234>
 8009a1c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009a20:	4b5a      	ldr	r3, [pc, #360]	; (8009b8c <_dtoa_r+0x2f4>)
 8009a22:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a2a:	f7f6 ffd1 	bl	80009d0 <__aeabi_dcmplt>
 8009a2e:	2800      	cmp	r0, #0
 8009a30:	d04e      	beq.n	8009ad0 <_dtoa_r+0x238>
 8009a32:	2300      	movs	r3, #0
 8009a34:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009a38:	930f      	str	r3, [sp, #60]	; 0x3c
 8009a3a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009a3c:	1b1b      	subs	r3, r3, r4
 8009a3e:	1e5a      	subs	r2, r3, #1
 8009a40:	bf46      	itte	mi
 8009a42:	f1c3 0901 	rsbmi	r9, r3, #1
 8009a46:	2300      	movmi	r3, #0
 8009a48:	f04f 0900 	movpl.w	r9, #0
 8009a4c:	9209      	str	r2, [sp, #36]	; 0x24
 8009a4e:	bf48      	it	mi
 8009a50:	9309      	strmi	r3, [sp, #36]	; 0x24
 8009a52:	f1bb 0f00 	cmp.w	fp, #0
 8009a56:	db3d      	blt.n	8009ad4 <_dtoa_r+0x23c>
 8009a58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a5a:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8009a5e:	445b      	add	r3, fp
 8009a60:	9309      	str	r3, [sp, #36]	; 0x24
 8009a62:	2300      	movs	r3, #0
 8009a64:	930a      	str	r3, [sp, #40]	; 0x28
 8009a66:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009a68:	2b09      	cmp	r3, #9
 8009a6a:	d867      	bhi.n	8009b3c <_dtoa_r+0x2a4>
 8009a6c:	2b05      	cmp	r3, #5
 8009a6e:	bfc4      	itt	gt
 8009a70:	3b04      	subgt	r3, #4
 8009a72:	9322      	strgt	r3, [sp, #136]	; 0x88
 8009a74:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009a76:	bfc8      	it	gt
 8009a78:	2400      	movgt	r4, #0
 8009a7a:	f1a3 0302 	sub.w	r3, r3, #2
 8009a7e:	bfd8      	it	le
 8009a80:	2401      	movle	r4, #1
 8009a82:	2b03      	cmp	r3, #3
 8009a84:	f200 8086 	bhi.w	8009b94 <_dtoa_r+0x2fc>
 8009a88:	e8df f003 	tbb	[pc, r3]
 8009a8c:	5637392c 	.word	0x5637392c
 8009a90:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8009a94:	441c      	add	r4, r3
 8009a96:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8009a9a:	2b20      	cmp	r3, #32
 8009a9c:	bfc1      	itttt	gt
 8009a9e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009aa2:	fa09 f903 	lslgt.w	r9, r9, r3
 8009aa6:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8009aaa:	fa26 f303 	lsrgt.w	r3, r6, r3
 8009aae:	bfd6      	itet	le
 8009ab0:	f1c3 0320 	rsble	r3, r3, #32
 8009ab4:	ea49 0003 	orrgt.w	r0, r9, r3
 8009ab8:	fa06 f003 	lslle.w	r0, r6, r3
 8009abc:	f7f6 fc9c 	bl	80003f8 <__aeabi_ui2d>
 8009ac0:	2201      	movs	r2, #1
 8009ac2:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8009ac6:	3c01      	subs	r4, #1
 8009ac8:	9213      	str	r2, [sp, #76]	; 0x4c
 8009aca:	e76f      	b.n	80099ac <_dtoa_r+0x114>
 8009acc:	2301      	movs	r3, #1
 8009ace:	e7b3      	b.n	8009a38 <_dtoa_r+0x1a0>
 8009ad0:	900f      	str	r0, [sp, #60]	; 0x3c
 8009ad2:	e7b2      	b.n	8009a3a <_dtoa_r+0x1a2>
 8009ad4:	f1cb 0300 	rsb	r3, fp, #0
 8009ad8:	930a      	str	r3, [sp, #40]	; 0x28
 8009ada:	2300      	movs	r3, #0
 8009adc:	eba9 090b 	sub.w	r9, r9, fp
 8009ae0:	930e      	str	r3, [sp, #56]	; 0x38
 8009ae2:	e7c0      	b.n	8009a66 <_dtoa_r+0x1ce>
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	930b      	str	r3, [sp, #44]	; 0x2c
 8009ae8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	dc55      	bgt.n	8009b9a <_dtoa_r+0x302>
 8009aee:	2301      	movs	r3, #1
 8009af0:	461a      	mov	r2, r3
 8009af2:	9306      	str	r3, [sp, #24]
 8009af4:	9308      	str	r3, [sp, #32]
 8009af6:	9223      	str	r2, [sp, #140]	; 0x8c
 8009af8:	e00b      	b.n	8009b12 <_dtoa_r+0x27a>
 8009afa:	2301      	movs	r3, #1
 8009afc:	e7f3      	b.n	8009ae6 <_dtoa_r+0x24e>
 8009afe:	2300      	movs	r3, #0
 8009b00:	930b      	str	r3, [sp, #44]	; 0x2c
 8009b02:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009b04:	445b      	add	r3, fp
 8009b06:	9306      	str	r3, [sp, #24]
 8009b08:	3301      	adds	r3, #1
 8009b0a:	2b01      	cmp	r3, #1
 8009b0c:	9308      	str	r3, [sp, #32]
 8009b0e:	bfb8      	it	lt
 8009b10:	2301      	movlt	r3, #1
 8009b12:	2100      	movs	r1, #0
 8009b14:	2204      	movs	r2, #4
 8009b16:	69e8      	ldr	r0, [r5, #28]
 8009b18:	f102 0614 	add.w	r6, r2, #20
 8009b1c:	429e      	cmp	r6, r3
 8009b1e:	d940      	bls.n	8009ba2 <_dtoa_r+0x30a>
 8009b20:	6041      	str	r1, [r0, #4]
 8009b22:	4628      	mov	r0, r5
 8009b24:	f001 f904 	bl	800ad30 <_Balloc>
 8009b28:	9003      	str	r0, [sp, #12]
 8009b2a:	2800      	cmp	r0, #0
 8009b2c:	d13c      	bne.n	8009ba8 <_dtoa_r+0x310>
 8009b2e:	4602      	mov	r2, r0
 8009b30:	f240 11af 	movw	r1, #431	; 0x1af
 8009b34:	4b16      	ldr	r3, [pc, #88]	; (8009b90 <_dtoa_r+0x2f8>)
 8009b36:	e6c3      	b.n	80098c0 <_dtoa_r+0x28>
 8009b38:	2301      	movs	r3, #1
 8009b3a:	e7e1      	b.n	8009b00 <_dtoa_r+0x268>
 8009b3c:	2401      	movs	r4, #1
 8009b3e:	2300      	movs	r3, #0
 8009b40:	940b      	str	r4, [sp, #44]	; 0x2c
 8009b42:	9322      	str	r3, [sp, #136]	; 0x88
 8009b44:	f04f 33ff 	mov.w	r3, #4294967295
 8009b48:	2200      	movs	r2, #0
 8009b4a:	9306      	str	r3, [sp, #24]
 8009b4c:	9308      	str	r3, [sp, #32]
 8009b4e:	2312      	movs	r3, #18
 8009b50:	e7d1      	b.n	8009af6 <_dtoa_r+0x25e>
 8009b52:	bf00      	nop
 8009b54:	f3af 8000 	nop.w
 8009b58:	636f4361 	.word	0x636f4361
 8009b5c:	3fd287a7 	.word	0x3fd287a7
 8009b60:	8b60c8b3 	.word	0x8b60c8b3
 8009b64:	3fc68a28 	.word	0x3fc68a28
 8009b68:	509f79fb 	.word	0x509f79fb
 8009b6c:	3fd34413 	.word	0x3fd34413
 8009b70:	0800cc8f 	.word	0x0800cc8f
 8009b74:	0800cca6 	.word	0x0800cca6
 8009b78:	7ff00000 	.word	0x7ff00000
 8009b7c:	0800cc8b 	.word	0x0800cc8b
 8009b80:	0800cc82 	.word	0x0800cc82
 8009b84:	0800cc52 	.word	0x0800cc52
 8009b88:	3ff80000 	.word	0x3ff80000
 8009b8c:	0800cdf0 	.word	0x0800cdf0
 8009b90:	0800ccfe 	.word	0x0800ccfe
 8009b94:	2301      	movs	r3, #1
 8009b96:	930b      	str	r3, [sp, #44]	; 0x2c
 8009b98:	e7d4      	b.n	8009b44 <_dtoa_r+0x2ac>
 8009b9a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009b9c:	9306      	str	r3, [sp, #24]
 8009b9e:	9308      	str	r3, [sp, #32]
 8009ba0:	e7b7      	b.n	8009b12 <_dtoa_r+0x27a>
 8009ba2:	3101      	adds	r1, #1
 8009ba4:	0052      	lsls	r2, r2, #1
 8009ba6:	e7b7      	b.n	8009b18 <_dtoa_r+0x280>
 8009ba8:	69eb      	ldr	r3, [r5, #28]
 8009baa:	9a03      	ldr	r2, [sp, #12]
 8009bac:	601a      	str	r2, [r3, #0]
 8009bae:	9b08      	ldr	r3, [sp, #32]
 8009bb0:	2b0e      	cmp	r3, #14
 8009bb2:	f200 80a8 	bhi.w	8009d06 <_dtoa_r+0x46e>
 8009bb6:	2c00      	cmp	r4, #0
 8009bb8:	f000 80a5 	beq.w	8009d06 <_dtoa_r+0x46e>
 8009bbc:	f1bb 0f00 	cmp.w	fp, #0
 8009bc0:	dd34      	ble.n	8009c2c <_dtoa_r+0x394>
 8009bc2:	4b9a      	ldr	r3, [pc, #616]	; (8009e2c <_dtoa_r+0x594>)
 8009bc4:	f00b 020f 	and.w	r2, fp, #15
 8009bc8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009bcc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009bd0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009bd4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8009bd8:	ea4f 142b 	mov.w	r4, fp, asr #4
 8009bdc:	d016      	beq.n	8009c0c <_dtoa_r+0x374>
 8009bde:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009be2:	4b93      	ldr	r3, [pc, #588]	; (8009e30 <_dtoa_r+0x598>)
 8009be4:	2703      	movs	r7, #3
 8009be6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009bea:	f7f6 fda9 	bl	8000740 <__aeabi_ddiv>
 8009bee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009bf2:	f004 040f 	and.w	r4, r4, #15
 8009bf6:	4e8e      	ldr	r6, [pc, #568]	; (8009e30 <_dtoa_r+0x598>)
 8009bf8:	b954      	cbnz	r4, 8009c10 <_dtoa_r+0x378>
 8009bfa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009bfe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009c02:	f7f6 fd9d 	bl	8000740 <__aeabi_ddiv>
 8009c06:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009c0a:	e029      	b.n	8009c60 <_dtoa_r+0x3c8>
 8009c0c:	2702      	movs	r7, #2
 8009c0e:	e7f2      	b.n	8009bf6 <_dtoa_r+0x35e>
 8009c10:	07e1      	lsls	r1, r4, #31
 8009c12:	d508      	bpl.n	8009c26 <_dtoa_r+0x38e>
 8009c14:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009c18:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009c1c:	f7f6 fc66 	bl	80004ec <__aeabi_dmul>
 8009c20:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009c24:	3701      	adds	r7, #1
 8009c26:	1064      	asrs	r4, r4, #1
 8009c28:	3608      	adds	r6, #8
 8009c2a:	e7e5      	b.n	8009bf8 <_dtoa_r+0x360>
 8009c2c:	f000 80a5 	beq.w	8009d7a <_dtoa_r+0x4e2>
 8009c30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009c34:	f1cb 0400 	rsb	r4, fp, #0
 8009c38:	4b7c      	ldr	r3, [pc, #496]	; (8009e2c <_dtoa_r+0x594>)
 8009c3a:	f004 020f 	and.w	r2, r4, #15
 8009c3e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c46:	f7f6 fc51 	bl	80004ec <__aeabi_dmul>
 8009c4a:	2702      	movs	r7, #2
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009c52:	4e77      	ldr	r6, [pc, #476]	; (8009e30 <_dtoa_r+0x598>)
 8009c54:	1124      	asrs	r4, r4, #4
 8009c56:	2c00      	cmp	r4, #0
 8009c58:	f040 8084 	bne.w	8009d64 <_dtoa_r+0x4cc>
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d1d2      	bne.n	8009c06 <_dtoa_r+0x36e>
 8009c60:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8009c64:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8009c68:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	f000 8087 	beq.w	8009d7e <_dtoa_r+0x4e6>
 8009c70:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009c74:	2200      	movs	r2, #0
 8009c76:	4b6f      	ldr	r3, [pc, #444]	; (8009e34 <_dtoa_r+0x59c>)
 8009c78:	f7f6 feaa 	bl	80009d0 <__aeabi_dcmplt>
 8009c7c:	2800      	cmp	r0, #0
 8009c7e:	d07e      	beq.n	8009d7e <_dtoa_r+0x4e6>
 8009c80:	9b08      	ldr	r3, [sp, #32]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d07b      	beq.n	8009d7e <_dtoa_r+0x4e6>
 8009c86:	9b06      	ldr	r3, [sp, #24]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	dd38      	ble.n	8009cfe <_dtoa_r+0x466>
 8009c8c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009c90:	2200      	movs	r2, #0
 8009c92:	4b69      	ldr	r3, [pc, #420]	; (8009e38 <_dtoa_r+0x5a0>)
 8009c94:	f7f6 fc2a 	bl	80004ec <__aeabi_dmul>
 8009c98:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009c9c:	9c06      	ldr	r4, [sp, #24]
 8009c9e:	f10b 38ff 	add.w	r8, fp, #4294967295
 8009ca2:	3701      	adds	r7, #1
 8009ca4:	4638      	mov	r0, r7
 8009ca6:	f7f6 fbb7 	bl	8000418 <__aeabi_i2d>
 8009caa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009cae:	f7f6 fc1d 	bl	80004ec <__aeabi_dmul>
 8009cb2:	2200      	movs	r2, #0
 8009cb4:	4b61      	ldr	r3, [pc, #388]	; (8009e3c <_dtoa_r+0x5a4>)
 8009cb6:	f7f6 fa63 	bl	8000180 <__adddf3>
 8009cba:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8009cbe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009cc2:	9611      	str	r6, [sp, #68]	; 0x44
 8009cc4:	2c00      	cmp	r4, #0
 8009cc6:	d15d      	bne.n	8009d84 <_dtoa_r+0x4ec>
 8009cc8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009ccc:	2200      	movs	r2, #0
 8009cce:	4b5c      	ldr	r3, [pc, #368]	; (8009e40 <_dtoa_r+0x5a8>)
 8009cd0:	f7f6 fa54 	bl	800017c <__aeabi_dsub>
 8009cd4:	4602      	mov	r2, r0
 8009cd6:	460b      	mov	r3, r1
 8009cd8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009cdc:	4633      	mov	r3, r6
 8009cde:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009ce0:	f7f6 fe94 	bl	8000a0c <__aeabi_dcmpgt>
 8009ce4:	2800      	cmp	r0, #0
 8009ce6:	f040 8295 	bne.w	800a214 <_dtoa_r+0x97c>
 8009cea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009cee:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009cf0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8009cf4:	f7f6 fe6c 	bl	80009d0 <__aeabi_dcmplt>
 8009cf8:	2800      	cmp	r0, #0
 8009cfa:	f040 8289 	bne.w	800a210 <_dtoa_r+0x978>
 8009cfe:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8009d02:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009d06:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	f2c0 8151 	blt.w	8009fb0 <_dtoa_r+0x718>
 8009d0e:	f1bb 0f0e 	cmp.w	fp, #14
 8009d12:	f300 814d 	bgt.w	8009fb0 <_dtoa_r+0x718>
 8009d16:	4b45      	ldr	r3, [pc, #276]	; (8009e2c <_dtoa_r+0x594>)
 8009d18:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009d1c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009d20:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8009d24:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	f280 80da 	bge.w	8009ee0 <_dtoa_r+0x648>
 8009d2c:	9b08      	ldr	r3, [sp, #32]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	f300 80d6 	bgt.w	8009ee0 <_dtoa_r+0x648>
 8009d34:	f040 826b 	bne.w	800a20e <_dtoa_r+0x976>
 8009d38:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	4b40      	ldr	r3, [pc, #256]	; (8009e40 <_dtoa_r+0x5a8>)
 8009d40:	f7f6 fbd4 	bl	80004ec <__aeabi_dmul>
 8009d44:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d48:	f7f6 fe56 	bl	80009f8 <__aeabi_dcmpge>
 8009d4c:	9c08      	ldr	r4, [sp, #32]
 8009d4e:	4626      	mov	r6, r4
 8009d50:	2800      	cmp	r0, #0
 8009d52:	f040 8241 	bne.w	800a1d8 <_dtoa_r+0x940>
 8009d56:	2331      	movs	r3, #49	; 0x31
 8009d58:	9f03      	ldr	r7, [sp, #12]
 8009d5a:	f10b 0b01 	add.w	fp, fp, #1
 8009d5e:	f807 3b01 	strb.w	r3, [r7], #1
 8009d62:	e23d      	b.n	800a1e0 <_dtoa_r+0x948>
 8009d64:	07e2      	lsls	r2, r4, #31
 8009d66:	d505      	bpl.n	8009d74 <_dtoa_r+0x4dc>
 8009d68:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009d6c:	f7f6 fbbe 	bl	80004ec <__aeabi_dmul>
 8009d70:	2301      	movs	r3, #1
 8009d72:	3701      	adds	r7, #1
 8009d74:	1064      	asrs	r4, r4, #1
 8009d76:	3608      	adds	r6, #8
 8009d78:	e76d      	b.n	8009c56 <_dtoa_r+0x3be>
 8009d7a:	2702      	movs	r7, #2
 8009d7c:	e770      	b.n	8009c60 <_dtoa_r+0x3c8>
 8009d7e:	46d8      	mov	r8, fp
 8009d80:	9c08      	ldr	r4, [sp, #32]
 8009d82:	e78f      	b.n	8009ca4 <_dtoa_r+0x40c>
 8009d84:	9903      	ldr	r1, [sp, #12]
 8009d86:	4b29      	ldr	r3, [pc, #164]	; (8009e2c <_dtoa_r+0x594>)
 8009d88:	4421      	add	r1, r4
 8009d8a:	9112      	str	r1, [sp, #72]	; 0x48
 8009d8c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009d8e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009d92:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8009d96:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009d9a:	2900      	cmp	r1, #0
 8009d9c:	d054      	beq.n	8009e48 <_dtoa_r+0x5b0>
 8009d9e:	2000      	movs	r0, #0
 8009da0:	4928      	ldr	r1, [pc, #160]	; (8009e44 <_dtoa_r+0x5ac>)
 8009da2:	f7f6 fccd 	bl	8000740 <__aeabi_ddiv>
 8009da6:	463b      	mov	r3, r7
 8009da8:	4632      	mov	r2, r6
 8009daa:	f7f6 f9e7 	bl	800017c <__aeabi_dsub>
 8009dae:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009db2:	9f03      	ldr	r7, [sp, #12]
 8009db4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009db8:	f7f6 fe48 	bl	8000a4c <__aeabi_d2iz>
 8009dbc:	4604      	mov	r4, r0
 8009dbe:	f7f6 fb2b 	bl	8000418 <__aeabi_i2d>
 8009dc2:	4602      	mov	r2, r0
 8009dc4:	460b      	mov	r3, r1
 8009dc6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009dca:	f7f6 f9d7 	bl	800017c <__aeabi_dsub>
 8009dce:	4602      	mov	r2, r0
 8009dd0:	460b      	mov	r3, r1
 8009dd2:	3430      	adds	r4, #48	; 0x30
 8009dd4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009dd8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009ddc:	f807 4b01 	strb.w	r4, [r7], #1
 8009de0:	f7f6 fdf6 	bl	80009d0 <__aeabi_dcmplt>
 8009de4:	2800      	cmp	r0, #0
 8009de6:	d173      	bne.n	8009ed0 <_dtoa_r+0x638>
 8009de8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009dec:	2000      	movs	r0, #0
 8009dee:	4911      	ldr	r1, [pc, #68]	; (8009e34 <_dtoa_r+0x59c>)
 8009df0:	f7f6 f9c4 	bl	800017c <__aeabi_dsub>
 8009df4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009df8:	f7f6 fdea 	bl	80009d0 <__aeabi_dcmplt>
 8009dfc:	2800      	cmp	r0, #0
 8009dfe:	f040 80b6 	bne.w	8009f6e <_dtoa_r+0x6d6>
 8009e02:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009e04:	429f      	cmp	r7, r3
 8009e06:	f43f af7a 	beq.w	8009cfe <_dtoa_r+0x466>
 8009e0a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009e0e:	2200      	movs	r2, #0
 8009e10:	4b09      	ldr	r3, [pc, #36]	; (8009e38 <_dtoa_r+0x5a0>)
 8009e12:	f7f6 fb6b 	bl	80004ec <__aeabi_dmul>
 8009e16:	2200      	movs	r2, #0
 8009e18:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009e1c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009e20:	4b05      	ldr	r3, [pc, #20]	; (8009e38 <_dtoa_r+0x5a0>)
 8009e22:	f7f6 fb63 	bl	80004ec <__aeabi_dmul>
 8009e26:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009e2a:	e7c3      	b.n	8009db4 <_dtoa_r+0x51c>
 8009e2c:	0800cdf0 	.word	0x0800cdf0
 8009e30:	0800cdc8 	.word	0x0800cdc8
 8009e34:	3ff00000 	.word	0x3ff00000
 8009e38:	40240000 	.word	0x40240000
 8009e3c:	401c0000 	.word	0x401c0000
 8009e40:	40140000 	.word	0x40140000
 8009e44:	3fe00000 	.word	0x3fe00000
 8009e48:	4630      	mov	r0, r6
 8009e4a:	4639      	mov	r1, r7
 8009e4c:	f7f6 fb4e 	bl	80004ec <__aeabi_dmul>
 8009e50:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009e52:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009e56:	9c03      	ldr	r4, [sp, #12]
 8009e58:	9314      	str	r3, [sp, #80]	; 0x50
 8009e5a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009e5e:	f7f6 fdf5 	bl	8000a4c <__aeabi_d2iz>
 8009e62:	9015      	str	r0, [sp, #84]	; 0x54
 8009e64:	f7f6 fad8 	bl	8000418 <__aeabi_i2d>
 8009e68:	4602      	mov	r2, r0
 8009e6a:	460b      	mov	r3, r1
 8009e6c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009e70:	f7f6 f984 	bl	800017c <__aeabi_dsub>
 8009e74:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009e76:	4606      	mov	r6, r0
 8009e78:	3330      	adds	r3, #48	; 0x30
 8009e7a:	f804 3b01 	strb.w	r3, [r4], #1
 8009e7e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009e80:	460f      	mov	r7, r1
 8009e82:	429c      	cmp	r4, r3
 8009e84:	f04f 0200 	mov.w	r2, #0
 8009e88:	d124      	bne.n	8009ed4 <_dtoa_r+0x63c>
 8009e8a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009e8e:	4baf      	ldr	r3, [pc, #700]	; (800a14c <_dtoa_r+0x8b4>)
 8009e90:	f7f6 f976 	bl	8000180 <__adddf3>
 8009e94:	4602      	mov	r2, r0
 8009e96:	460b      	mov	r3, r1
 8009e98:	4630      	mov	r0, r6
 8009e9a:	4639      	mov	r1, r7
 8009e9c:	f7f6 fdb6 	bl	8000a0c <__aeabi_dcmpgt>
 8009ea0:	2800      	cmp	r0, #0
 8009ea2:	d163      	bne.n	8009f6c <_dtoa_r+0x6d4>
 8009ea4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009ea8:	2000      	movs	r0, #0
 8009eaa:	49a8      	ldr	r1, [pc, #672]	; (800a14c <_dtoa_r+0x8b4>)
 8009eac:	f7f6 f966 	bl	800017c <__aeabi_dsub>
 8009eb0:	4602      	mov	r2, r0
 8009eb2:	460b      	mov	r3, r1
 8009eb4:	4630      	mov	r0, r6
 8009eb6:	4639      	mov	r1, r7
 8009eb8:	f7f6 fd8a 	bl	80009d0 <__aeabi_dcmplt>
 8009ebc:	2800      	cmp	r0, #0
 8009ebe:	f43f af1e 	beq.w	8009cfe <_dtoa_r+0x466>
 8009ec2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8009ec4:	1e7b      	subs	r3, r7, #1
 8009ec6:	9314      	str	r3, [sp, #80]	; 0x50
 8009ec8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8009ecc:	2b30      	cmp	r3, #48	; 0x30
 8009ece:	d0f8      	beq.n	8009ec2 <_dtoa_r+0x62a>
 8009ed0:	46c3      	mov	fp, r8
 8009ed2:	e03b      	b.n	8009f4c <_dtoa_r+0x6b4>
 8009ed4:	4b9e      	ldr	r3, [pc, #632]	; (800a150 <_dtoa_r+0x8b8>)
 8009ed6:	f7f6 fb09 	bl	80004ec <__aeabi_dmul>
 8009eda:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009ede:	e7bc      	b.n	8009e5a <_dtoa_r+0x5c2>
 8009ee0:	9f03      	ldr	r7, [sp, #12]
 8009ee2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8009ee6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009eea:	4640      	mov	r0, r8
 8009eec:	4649      	mov	r1, r9
 8009eee:	f7f6 fc27 	bl	8000740 <__aeabi_ddiv>
 8009ef2:	f7f6 fdab 	bl	8000a4c <__aeabi_d2iz>
 8009ef6:	4604      	mov	r4, r0
 8009ef8:	f7f6 fa8e 	bl	8000418 <__aeabi_i2d>
 8009efc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009f00:	f7f6 faf4 	bl	80004ec <__aeabi_dmul>
 8009f04:	4602      	mov	r2, r0
 8009f06:	460b      	mov	r3, r1
 8009f08:	4640      	mov	r0, r8
 8009f0a:	4649      	mov	r1, r9
 8009f0c:	f7f6 f936 	bl	800017c <__aeabi_dsub>
 8009f10:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8009f14:	f807 6b01 	strb.w	r6, [r7], #1
 8009f18:	9e03      	ldr	r6, [sp, #12]
 8009f1a:	f8dd c020 	ldr.w	ip, [sp, #32]
 8009f1e:	1bbe      	subs	r6, r7, r6
 8009f20:	45b4      	cmp	ip, r6
 8009f22:	4602      	mov	r2, r0
 8009f24:	460b      	mov	r3, r1
 8009f26:	d136      	bne.n	8009f96 <_dtoa_r+0x6fe>
 8009f28:	f7f6 f92a 	bl	8000180 <__adddf3>
 8009f2c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009f30:	4680      	mov	r8, r0
 8009f32:	4689      	mov	r9, r1
 8009f34:	f7f6 fd6a 	bl	8000a0c <__aeabi_dcmpgt>
 8009f38:	bb58      	cbnz	r0, 8009f92 <_dtoa_r+0x6fa>
 8009f3a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009f3e:	4640      	mov	r0, r8
 8009f40:	4649      	mov	r1, r9
 8009f42:	f7f6 fd3b 	bl	80009bc <__aeabi_dcmpeq>
 8009f46:	b108      	cbz	r0, 8009f4c <_dtoa_r+0x6b4>
 8009f48:	07e3      	lsls	r3, r4, #31
 8009f4a:	d422      	bmi.n	8009f92 <_dtoa_r+0x6fa>
 8009f4c:	4651      	mov	r1, sl
 8009f4e:	4628      	mov	r0, r5
 8009f50:	f000 ff2e 	bl	800adb0 <_Bfree>
 8009f54:	2300      	movs	r3, #0
 8009f56:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009f58:	703b      	strb	r3, [r7, #0]
 8009f5a:	f10b 0301 	add.w	r3, fp, #1
 8009f5e:	6013      	str	r3, [r2, #0]
 8009f60:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	f43f ace6 	beq.w	8009934 <_dtoa_r+0x9c>
 8009f68:	601f      	str	r7, [r3, #0]
 8009f6a:	e4e3      	b.n	8009934 <_dtoa_r+0x9c>
 8009f6c:	4627      	mov	r7, r4
 8009f6e:	463b      	mov	r3, r7
 8009f70:	461f      	mov	r7, r3
 8009f72:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009f76:	2a39      	cmp	r2, #57	; 0x39
 8009f78:	d107      	bne.n	8009f8a <_dtoa_r+0x6f2>
 8009f7a:	9a03      	ldr	r2, [sp, #12]
 8009f7c:	429a      	cmp	r2, r3
 8009f7e:	d1f7      	bne.n	8009f70 <_dtoa_r+0x6d8>
 8009f80:	2230      	movs	r2, #48	; 0x30
 8009f82:	9903      	ldr	r1, [sp, #12]
 8009f84:	f108 0801 	add.w	r8, r8, #1
 8009f88:	700a      	strb	r2, [r1, #0]
 8009f8a:	781a      	ldrb	r2, [r3, #0]
 8009f8c:	3201      	adds	r2, #1
 8009f8e:	701a      	strb	r2, [r3, #0]
 8009f90:	e79e      	b.n	8009ed0 <_dtoa_r+0x638>
 8009f92:	46d8      	mov	r8, fp
 8009f94:	e7eb      	b.n	8009f6e <_dtoa_r+0x6d6>
 8009f96:	2200      	movs	r2, #0
 8009f98:	4b6d      	ldr	r3, [pc, #436]	; (800a150 <_dtoa_r+0x8b8>)
 8009f9a:	f7f6 faa7 	bl	80004ec <__aeabi_dmul>
 8009f9e:	2200      	movs	r2, #0
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	4680      	mov	r8, r0
 8009fa4:	4689      	mov	r9, r1
 8009fa6:	f7f6 fd09 	bl	80009bc <__aeabi_dcmpeq>
 8009faa:	2800      	cmp	r0, #0
 8009fac:	d09b      	beq.n	8009ee6 <_dtoa_r+0x64e>
 8009fae:	e7cd      	b.n	8009f4c <_dtoa_r+0x6b4>
 8009fb0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009fb2:	2a00      	cmp	r2, #0
 8009fb4:	f000 80c4 	beq.w	800a140 <_dtoa_r+0x8a8>
 8009fb8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009fba:	2a01      	cmp	r2, #1
 8009fbc:	f300 80a8 	bgt.w	800a110 <_dtoa_r+0x878>
 8009fc0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009fc2:	2a00      	cmp	r2, #0
 8009fc4:	f000 80a0 	beq.w	800a108 <_dtoa_r+0x870>
 8009fc8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009fcc:	464f      	mov	r7, r9
 8009fce:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009fd0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009fd2:	2101      	movs	r1, #1
 8009fd4:	441a      	add	r2, r3
 8009fd6:	4628      	mov	r0, r5
 8009fd8:	4499      	add	r9, r3
 8009fda:	9209      	str	r2, [sp, #36]	; 0x24
 8009fdc:	f000 ffe8 	bl	800afb0 <__i2b>
 8009fe0:	4606      	mov	r6, r0
 8009fe2:	b15f      	cbz	r7, 8009ffc <_dtoa_r+0x764>
 8009fe4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	dd08      	ble.n	8009ffc <_dtoa_r+0x764>
 8009fea:	42bb      	cmp	r3, r7
 8009fec:	bfa8      	it	ge
 8009fee:	463b      	movge	r3, r7
 8009ff0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ff2:	eba9 0903 	sub.w	r9, r9, r3
 8009ff6:	1aff      	subs	r7, r7, r3
 8009ff8:	1ad3      	subs	r3, r2, r3
 8009ffa:	9309      	str	r3, [sp, #36]	; 0x24
 8009ffc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ffe:	b1f3      	cbz	r3, 800a03e <_dtoa_r+0x7a6>
 800a000:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a002:	2b00      	cmp	r3, #0
 800a004:	f000 80a0 	beq.w	800a148 <_dtoa_r+0x8b0>
 800a008:	2c00      	cmp	r4, #0
 800a00a:	dd10      	ble.n	800a02e <_dtoa_r+0x796>
 800a00c:	4631      	mov	r1, r6
 800a00e:	4622      	mov	r2, r4
 800a010:	4628      	mov	r0, r5
 800a012:	f001 f88b 	bl	800b12c <__pow5mult>
 800a016:	4652      	mov	r2, sl
 800a018:	4601      	mov	r1, r0
 800a01a:	4606      	mov	r6, r0
 800a01c:	4628      	mov	r0, r5
 800a01e:	f000 ffdd 	bl	800afdc <__multiply>
 800a022:	4680      	mov	r8, r0
 800a024:	4651      	mov	r1, sl
 800a026:	4628      	mov	r0, r5
 800a028:	f000 fec2 	bl	800adb0 <_Bfree>
 800a02c:	46c2      	mov	sl, r8
 800a02e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a030:	1b1a      	subs	r2, r3, r4
 800a032:	d004      	beq.n	800a03e <_dtoa_r+0x7a6>
 800a034:	4651      	mov	r1, sl
 800a036:	4628      	mov	r0, r5
 800a038:	f001 f878 	bl	800b12c <__pow5mult>
 800a03c:	4682      	mov	sl, r0
 800a03e:	2101      	movs	r1, #1
 800a040:	4628      	mov	r0, r5
 800a042:	f000 ffb5 	bl	800afb0 <__i2b>
 800a046:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a048:	4604      	mov	r4, r0
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	f340 8082 	ble.w	800a154 <_dtoa_r+0x8bc>
 800a050:	461a      	mov	r2, r3
 800a052:	4601      	mov	r1, r0
 800a054:	4628      	mov	r0, r5
 800a056:	f001 f869 	bl	800b12c <__pow5mult>
 800a05a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a05c:	4604      	mov	r4, r0
 800a05e:	2b01      	cmp	r3, #1
 800a060:	dd7b      	ble.n	800a15a <_dtoa_r+0x8c2>
 800a062:	f04f 0800 	mov.w	r8, #0
 800a066:	6923      	ldr	r3, [r4, #16]
 800a068:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a06c:	6918      	ldr	r0, [r3, #16]
 800a06e:	f000 ff51 	bl	800af14 <__hi0bits>
 800a072:	f1c0 0020 	rsb	r0, r0, #32
 800a076:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a078:	4418      	add	r0, r3
 800a07a:	f010 001f 	ands.w	r0, r0, #31
 800a07e:	f000 8092 	beq.w	800a1a6 <_dtoa_r+0x90e>
 800a082:	f1c0 0320 	rsb	r3, r0, #32
 800a086:	2b04      	cmp	r3, #4
 800a088:	f340 8085 	ble.w	800a196 <_dtoa_r+0x8fe>
 800a08c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a08e:	f1c0 001c 	rsb	r0, r0, #28
 800a092:	4403      	add	r3, r0
 800a094:	4481      	add	r9, r0
 800a096:	4407      	add	r7, r0
 800a098:	9309      	str	r3, [sp, #36]	; 0x24
 800a09a:	f1b9 0f00 	cmp.w	r9, #0
 800a09e:	dd05      	ble.n	800a0ac <_dtoa_r+0x814>
 800a0a0:	4651      	mov	r1, sl
 800a0a2:	464a      	mov	r2, r9
 800a0a4:	4628      	mov	r0, r5
 800a0a6:	f001 f89b 	bl	800b1e0 <__lshift>
 800a0aa:	4682      	mov	sl, r0
 800a0ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	dd05      	ble.n	800a0be <_dtoa_r+0x826>
 800a0b2:	4621      	mov	r1, r4
 800a0b4:	461a      	mov	r2, r3
 800a0b6:	4628      	mov	r0, r5
 800a0b8:	f001 f892 	bl	800b1e0 <__lshift>
 800a0bc:	4604      	mov	r4, r0
 800a0be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d072      	beq.n	800a1aa <_dtoa_r+0x912>
 800a0c4:	4621      	mov	r1, r4
 800a0c6:	4650      	mov	r0, sl
 800a0c8:	f001 f8f6 	bl	800b2b8 <__mcmp>
 800a0cc:	2800      	cmp	r0, #0
 800a0ce:	da6c      	bge.n	800a1aa <_dtoa_r+0x912>
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	4651      	mov	r1, sl
 800a0d4:	220a      	movs	r2, #10
 800a0d6:	4628      	mov	r0, r5
 800a0d8:	f000 fe8c 	bl	800adf4 <__multadd>
 800a0dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a0de:	4682      	mov	sl, r0
 800a0e0:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	f000 81ac 	beq.w	800a442 <_dtoa_r+0xbaa>
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	4631      	mov	r1, r6
 800a0ee:	220a      	movs	r2, #10
 800a0f0:	4628      	mov	r0, r5
 800a0f2:	f000 fe7f 	bl	800adf4 <__multadd>
 800a0f6:	9b06      	ldr	r3, [sp, #24]
 800a0f8:	4606      	mov	r6, r0
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	f300 8093 	bgt.w	800a226 <_dtoa_r+0x98e>
 800a100:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a102:	2b02      	cmp	r3, #2
 800a104:	dc59      	bgt.n	800a1ba <_dtoa_r+0x922>
 800a106:	e08e      	b.n	800a226 <_dtoa_r+0x98e>
 800a108:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a10a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a10e:	e75d      	b.n	8009fcc <_dtoa_r+0x734>
 800a110:	9b08      	ldr	r3, [sp, #32]
 800a112:	1e5c      	subs	r4, r3, #1
 800a114:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a116:	42a3      	cmp	r3, r4
 800a118:	bfbf      	itttt	lt
 800a11a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a11c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800a11e:	1ae3      	sublt	r3, r4, r3
 800a120:	18d2      	addlt	r2, r2, r3
 800a122:	bfa8      	it	ge
 800a124:	1b1c      	subge	r4, r3, r4
 800a126:	9b08      	ldr	r3, [sp, #32]
 800a128:	bfbe      	ittt	lt
 800a12a:	940a      	strlt	r4, [sp, #40]	; 0x28
 800a12c:	920e      	strlt	r2, [sp, #56]	; 0x38
 800a12e:	2400      	movlt	r4, #0
 800a130:	2b00      	cmp	r3, #0
 800a132:	bfb5      	itete	lt
 800a134:	eba9 0703 	sublt.w	r7, r9, r3
 800a138:	464f      	movge	r7, r9
 800a13a:	2300      	movlt	r3, #0
 800a13c:	9b08      	ldrge	r3, [sp, #32]
 800a13e:	e747      	b.n	8009fd0 <_dtoa_r+0x738>
 800a140:	464f      	mov	r7, r9
 800a142:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a144:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800a146:	e74c      	b.n	8009fe2 <_dtoa_r+0x74a>
 800a148:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a14a:	e773      	b.n	800a034 <_dtoa_r+0x79c>
 800a14c:	3fe00000 	.word	0x3fe00000
 800a150:	40240000 	.word	0x40240000
 800a154:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a156:	2b01      	cmp	r3, #1
 800a158:	dc18      	bgt.n	800a18c <_dtoa_r+0x8f4>
 800a15a:	9b04      	ldr	r3, [sp, #16]
 800a15c:	b9b3      	cbnz	r3, 800a18c <_dtoa_r+0x8f4>
 800a15e:	9b05      	ldr	r3, [sp, #20]
 800a160:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a164:	b993      	cbnz	r3, 800a18c <_dtoa_r+0x8f4>
 800a166:	9b05      	ldr	r3, [sp, #20]
 800a168:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a16c:	0d1b      	lsrs	r3, r3, #20
 800a16e:	051b      	lsls	r3, r3, #20
 800a170:	b17b      	cbz	r3, 800a192 <_dtoa_r+0x8fa>
 800a172:	f04f 0801 	mov.w	r8, #1
 800a176:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a178:	f109 0901 	add.w	r9, r9, #1
 800a17c:	3301      	adds	r3, #1
 800a17e:	9309      	str	r3, [sp, #36]	; 0x24
 800a180:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a182:	2b00      	cmp	r3, #0
 800a184:	f47f af6f 	bne.w	800a066 <_dtoa_r+0x7ce>
 800a188:	2001      	movs	r0, #1
 800a18a:	e774      	b.n	800a076 <_dtoa_r+0x7de>
 800a18c:	f04f 0800 	mov.w	r8, #0
 800a190:	e7f6      	b.n	800a180 <_dtoa_r+0x8e8>
 800a192:	4698      	mov	r8, r3
 800a194:	e7f4      	b.n	800a180 <_dtoa_r+0x8e8>
 800a196:	d080      	beq.n	800a09a <_dtoa_r+0x802>
 800a198:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a19a:	331c      	adds	r3, #28
 800a19c:	441a      	add	r2, r3
 800a19e:	4499      	add	r9, r3
 800a1a0:	441f      	add	r7, r3
 800a1a2:	9209      	str	r2, [sp, #36]	; 0x24
 800a1a4:	e779      	b.n	800a09a <_dtoa_r+0x802>
 800a1a6:	4603      	mov	r3, r0
 800a1a8:	e7f6      	b.n	800a198 <_dtoa_r+0x900>
 800a1aa:	9b08      	ldr	r3, [sp, #32]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	dc34      	bgt.n	800a21a <_dtoa_r+0x982>
 800a1b0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a1b2:	2b02      	cmp	r3, #2
 800a1b4:	dd31      	ble.n	800a21a <_dtoa_r+0x982>
 800a1b6:	9b08      	ldr	r3, [sp, #32]
 800a1b8:	9306      	str	r3, [sp, #24]
 800a1ba:	9b06      	ldr	r3, [sp, #24]
 800a1bc:	b963      	cbnz	r3, 800a1d8 <_dtoa_r+0x940>
 800a1be:	4621      	mov	r1, r4
 800a1c0:	2205      	movs	r2, #5
 800a1c2:	4628      	mov	r0, r5
 800a1c4:	f000 fe16 	bl	800adf4 <__multadd>
 800a1c8:	4601      	mov	r1, r0
 800a1ca:	4604      	mov	r4, r0
 800a1cc:	4650      	mov	r0, sl
 800a1ce:	f001 f873 	bl	800b2b8 <__mcmp>
 800a1d2:	2800      	cmp	r0, #0
 800a1d4:	f73f adbf 	bgt.w	8009d56 <_dtoa_r+0x4be>
 800a1d8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a1da:	9f03      	ldr	r7, [sp, #12]
 800a1dc:	ea6f 0b03 	mvn.w	fp, r3
 800a1e0:	f04f 0800 	mov.w	r8, #0
 800a1e4:	4621      	mov	r1, r4
 800a1e6:	4628      	mov	r0, r5
 800a1e8:	f000 fde2 	bl	800adb0 <_Bfree>
 800a1ec:	2e00      	cmp	r6, #0
 800a1ee:	f43f aead 	beq.w	8009f4c <_dtoa_r+0x6b4>
 800a1f2:	f1b8 0f00 	cmp.w	r8, #0
 800a1f6:	d005      	beq.n	800a204 <_dtoa_r+0x96c>
 800a1f8:	45b0      	cmp	r8, r6
 800a1fa:	d003      	beq.n	800a204 <_dtoa_r+0x96c>
 800a1fc:	4641      	mov	r1, r8
 800a1fe:	4628      	mov	r0, r5
 800a200:	f000 fdd6 	bl	800adb0 <_Bfree>
 800a204:	4631      	mov	r1, r6
 800a206:	4628      	mov	r0, r5
 800a208:	f000 fdd2 	bl	800adb0 <_Bfree>
 800a20c:	e69e      	b.n	8009f4c <_dtoa_r+0x6b4>
 800a20e:	2400      	movs	r4, #0
 800a210:	4626      	mov	r6, r4
 800a212:	e7e1      	b.n	800a1d8 <_dtoa_r+0x940>
 800a214:	46c3      	mov	fp, r8
 800a216:	4626      	mov	r6, r4
 800a218:	e59d      	b.n	8009d56 <_dtoa_r+0x4be>
 800a21a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	f000 80c8 	beq.w	800a3b2 <_dtoa_r+0xb1a>
 800a222:	9b08      	ldr	r3, [sp, #32]
 800a224:	9306      	str	r3, [sp, #24]
 800a226:	2f00      	cmp	r7, #0
 800a228:	dd05      	ble.n	800a236 <_dtoa_r+0x99e>
 800a22a:	4631      	mov	r1, r6
 800a22c:	463a      	mov	r2, r7
 800a22e:	4628      	mov	r0, r5
 800a230:	f000 ffd6 	bl	800b1e0 <__lshift>
 800a234:	4606      	mov	r6, r0
 800a236:	f1b8 0f00 	cmp.w	r8, #0
 800a23a:	d05b      	beq.n	800a2f4 <_dtoa_r+0xa5c>
 800a23c:	4628      	mov	r0, r5
 800a23e:	6871      	ldr	r1, [r6, #4]
 800a240:	f000 fd76 	bl	800ad30 <_Balloc>
 800a244:	4607      	mov	r7, r0
 800a246:	b928      	cbnz	r0, 800a254 <_dtoa_r+0x9bc>
 800a248:	4602      	mov	r2, r0
 800a24a:	f240 21ef 	movw	r1, #751	; 0x2ef
 800a24e:	4b81      	ldr	r3, [pc, #516]	; (800a454 <_dtoa_r+0xbbc>)
 800a250:	f7ff bb36 	b.w	80098c0 <_dtoa_r+0x28>
 800a254:	6932      	ldr	r2, [r6, #16]
 800a256:	f106 010c 	add.w	r1, r6, #12
 800a25a:	3202      	adds	r2, #2
 800a25c:	0092      	lsls	r2, r2, #2
 800a25e:	300c      	adds	r0, #12
 800a260:	f7ff fa75 	bl	800974e <memcpy>
 800a264:	2201      	movs	r2, #1
 800a266:	4639      	mov	r1, r7
 800a268:	4628      	mov	r0, r5
 800a26a:	f000 ffb9 	bl	800b1e0 <__lshift>
 800a26e:	46b0      	mov	r8, r6
 800a270:	4606      	mov	r6, r0
 800a272:	9b03      	ldr	r3, [sp, #12]
 800a274:	9a03      	ldr	r2, [sp, #12]
 800a276:	3301      	adds	r3, #1
 800a278:	9308      	str	r3, [sp, #32]
 800a27a:	9b06      	ldr	r3, [sp, #24]
 800a27c:	4413      	add	r3, r2
 800a27e:	930b      	str	r3, [sp, #44]	; 0x2c
 800a280:	9b04      	ldr	r3, [sp, #16]
 800a282:	f003 0301 	and.w	r3, r3, #1
 800a286:	930a      	str	r3, [sp, #40]	; 0x28
 800a288:	9b08      	ldr	r3, [sp, #32]
 800a28a:	4621      	mov	r1, r4
 800a28c:	3b01      	subs	r3, #1
 800a28e:	4650      	mov	r0, sl
 800a290:	9304      	str	r3, [sp, #16]
 800a292:	f7ff fa75 	bl	8009780 <quorem>
 800a296:	4641      	mov	r1, r8
 800a298:	9006      	str	r0, [sp, #24]
 800a29a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a29e:	4650      	mov	r0, sl
 800a2a0:	f001 f80a 	bl	800b2b8 <__mcmp>
 800a2a4:	4632      	mov	r2, r6
 800a2a6:	9009      	str	r0, [sp, #36]	; 0x24
 800a2a8:	4621      	mov	r1, r4
 800a2aa:	4628      	mov	r0, r5
 800a2ac:	f001 f820 	bl	800b2f0 <__mdiff>
 800a2b0:	68c2      	ldr	r2, [r0, #12]
 800a2b2:	4607      	mov	r7, r0
 800a2b4:	bb02      	cbnz	r2, 800a2f8 <_dtoa_r+0xa60>
 800a2b6:	4601      	mov	r1, r0
 800a2b8:	4650      	mov	r0, sl
 800a2ba:	f000 fffd 	bl	800b2b8 <__mcmp>
 800a2be:	4602      	mov	r2, r0
 800a2c0:	4639      	mov	r1, r7
 800a2c2:	4628      	mov	r0, r5
 800a2c4:	920c      	str	r2, [sp, #48]	; 0x30
 800a2c6:	f000 fd73 	bl	800adb0 <_Bfree>
 800a2ca:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a2cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a2ce:	9f08      	ldr	r7, [sp, #32]
 800a2d0:	ea43 0102 	orr.w	r1, r3, r2
 800a2d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2d6:	4319      	orrs	r1, r3
 800a2d8:	d110      	bne.n	800a2fc <_dtoa_r+0xa64>
 800a2da:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a2de:	d029      	beq.n	800a334 <_dtoa_r+0xa9c>
 800a2e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	dd02      	ble.n	800a2ec <_dtoa_r+0xa54>
 800a2e6:	9b06      	ldr	r3, [sp, #24]
 800a2e8:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800a2ec:	9b04      	ldr	r3, [sp, #16]
 800a2ee:	f883 9000 	strb.w	r9, [r3]
 800a2f2:	e777      	b.n	800a1e4 <_dtoa_r+0x94c>
 800a2f4:	4630      	mov	r0, r6
 800a2f6:	e7ba      	b.n	800a26e <_dtoa_r+0x9d6>
 800a2f8:	2201      	movs	r2, #1
 800a2fa:	e7e1      	b.n	800a2c0 <_dtoa_r+0xa28>
 800a2fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	db04      	blt.n	800a30c <_dtoa_r+0xa74>
 800a302:	9922      	ldr	r1, [sp, #136]	; 0x88
 800a304:	430b      	orrs	r3, r1
 800a306:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a308:	430b      	orrs	r3, r1
 800a30a:	d120      	bne.n	800a34e <_dtoa_r+0xab6>
 800a30c:	2a00      	cmp	r2, #0
 800a30e:	dded      	ble.n	800a2ec <_dtoa_r+0xa54>
 800a310:	4651      	mov	r1, sl
 800a312:	2201      	movs	r2, #1
 800a314:	4628      	mov	r0, r5
 800a316:	f000 ff63 	bl	800b1e0 <__lshift>
 800a31a:	4621      	mov	r1, r4
 800a31c:	4682      	mov	sl, r0
 800a31e:	f000 ffcb 	bl	800b2b8 <__mcmp>
 800a322:	2800      	cmp	r0, #0
 800a324:	dc03      	bgt.n	800a32e <_dtoa_r+0xa96>
 800a326:	d1e1      	bne.n	800a2ec <_dtoa_r+0xa54>
 800a328:	f019 0f01 	tst.w	r9, #1
 800a32c:	d0de      	beq.n	800a2ec <_dtoa_r+0xa54>
 800a32e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a332:	d1d8      	bne.n	800a2e6 <_dtoa_r+0xa4e>
 800a334:	2339      	movs	r3, #57	; 0x39
 800a336:	9a04      	ldr	r2, [sp, #16]
 800a338:	7013      	strb	r3, [r2, #0]
 800a33a:	463b      	mov	r3, r7
 800a33c:	461f      	mov	r7, r3
 800a33e:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800a342:	3b01      	subs	r3, #1
 800a344:	2a39      	cmp	r2, #57	; 0x39
 800a346:	d06b      	beq.n	800a420 <_dtoa_r+0xb88>
 800a348:	3201      	adds	r2, #1
 800a34a:	701a      	strb	r2, [r3, #0]
 800a34c:	e74a      	b.n	800a1e4 <_dtoa_r+0x94c>
 800a34e:	2a00      	cmp	r2, #0
 800a350:	dd07      	ble.n	800a362 <_dtoa_r+0xaca>
 800a352:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a356:	d0ed      	beq.n	800a334 <_dtoa_r+0xa9c>
 800a358:	9a04      	ldr	r2, [sp, #16]
 800a35a:	f109 0301 	add.w	r3, r9, #1
 800a35e:	7013      	strb	r3, [r2, #0]
 800a360:	e740      	b.n	800a1e4 <_dtoa_r+0x94c>
 800a362:	9b08      	ldr	r3, [sp, #32]
 800a364:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a366:	f803 9c01 	strb.w	r9, [r3, #-1]
 800a36a:	4293      	cmp	r3, r2
 800a36c:	d042      	beq.n	800a3f4 <_dtoa_r+0xb5c>
 800a36e:	4651      	mov	r1, sl
 800a370:	2300      	movs	r3, #0
 800a372:	220a      	movs	r2, #10
 800a374:	4628      	mov	r0, r5
 800a376:	f000 fd3d 	bl	800adf4 <__multadd>
 800a37a:	45b0      	cmp	r8, r6
 800a37c:	4682      	mov	sl, r0
 800a37e:	f04f 0300 	mov.w	r3, #0
 800a382:	f04f 020a 	mov.w	r2, #10
 800a386:	4641      	mov	r1, r8
 800a388:	4628      	mov	r0, r5
 800a38a:	d107      	bne.n	800a39c <_dtoa_r+0xb04>
 800a38c:	f000 fd32 	bl	800adf4 <__multadd>
 800a390:	4680      	mov	r8, r0
 800a392:	4606      	mov	r6, r0
 800a394:	9b08      	ldr	r3, [sp, #32]
 800a396:	3301      	adds	r3, #1
 800a398:	9308      	str	r3, [sp, #32]
 800a39a:	e775      	b.n	800a288 <_dtoa_r+0x9f0>
 800a39c:	f000 fd2a 	bl	800adf4 <__multadd>
 800a3a0:	4631      	mov	r1, r6
 800a3a2:	4680      	mov	r8, r0
 800a3a4:	2300      	movs	r3, #0
 800a3a6:	220a      	movs	r2, #10
 800a3a8:	4628      	mov	r0, r5
 800a3aa:	f000 fd23 	bl	800adf4 <__multadd>
 800a3ae:	4606      	mov	r6, r0
 800a3b0:	e7f0      	b.n	800a394 <_dtoa_r+0xafc>
 800a3b2:	9b08      	ldr	r3, [sp, #32]
 800a3b4:	9306      	str	r3, [sp, #24]
 800a3b6:	9f03      	ldr	r7, [sp, #12]
 800a3b8:	4621      	mov	r1, r4
 800a3ba:	4650      	mov	r0, sl
 800a3bc:	f7ff f9e0 	bl	8009780 <quorem>
 800a3c0:	9b03      	ldr	r3, [sp, #12]
 800a3c2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a3c6:	f807 9b01 	strb.w	r9, [r7], #1
 800a3ca:	1afa      	subs	r2, r7, r3
 800a3cc:	9b06      	ldr	r3, [sp, #24]
 800a3ce:	4293      	cmp	r3, r2
 800a3d0:	dd07      	ble.n	800a3e2 <_dtoa_r+0xb4a>
 800a3d2:	4651      	mov	r1, sl
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	220a      	movs	r2, #10
 800a3d8:	4628      	mov	r0, r5
 800a3da:	f000 fd0b 	bl	800adf4 <__multadd>
 800a3de:	4682      	mov	sl, r0
 800a3e0:	e7ea      	b.n	800a3b8 <_dtoa_r+0xb20>
 800a3e2:	9b06      	ldr	r3, [sp, #24]
 800a3e4:	f04f 0800 	mov.w	r8, #0
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	bfcc      	ite	gt
 800a3ec:	461f      	movgt	r7, r3
 800a3ee:	2701      	movle	r7, #1
 800a3f0:	9b03      	ldr	r3, [sp, #12]
 800a3f2:	441f      	add	r7, r3
 800a3f4:	4651      	mov	r1, sl
 800a3f6:	2201      	movs	r2, #1
 800a3f8:	4628      	mov	r0, r5
 800a3fa:	f000 fef1 	bl	800b1e0 <__lshift>
 800a3fe:	4621      	mov	r1, r4
 800a400:	4682      	mov	sl, r0
 800a402:	f000 ff59 	bl	800b2b8 <__mcmp>
 800a406:	2800      	cmp	r0, #0
 800a408:	dc97      	bgt.n	800a33a <_dtoa_r+0xaa2>
 800a40a:	d102      	bne.n	800a412 <_dtoa_r+0xb7a>
 800a40c:	f019 0f01 	tst.w	r9, #1
 800a410:	d193      	bne.n	800a33a <_dtoa_r+0xaa2>
 800a412:	463b      	mov	r3, r7
 800a414:	461f      	mov	r7, r3
 800a416:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a41a:	2a30      	cmp	r2, #48	; 0x30
 800a41c:	d0fa      	beq.n	800a414 <_dtoa_r+0xb7c>
 800a41e:	e6e1      	b.n	800a1e4 <_dtoa_r+0x94c>
 800a420:	9a03      	ldr	r2, [sp, #12]
 800a422:	429a      	cmp	r2, r3
 800a424:	d18a      	bne.n	800a33c <_dtoa_r+0xaa4>
 800a426:	2331      	movs	r3, #49	; 0x31
 800a428:	f10b 0b01 	add.w	fp, fp, #1
 800a42c:	e797      	b.n	800a35e <_dtoa_r+0xac6>
 800a42e:	4b0a      	ldr	r3, [pc, #40]	; (800a458 <_dtoa_r+0xbc0>)
 800a430:	f7ff ba9f 	b.w	8009972 <_dtoa_r+0xda>
 800a434:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a436:	2b00      	cmp	r3, #0
 800a438:	f47f aa77 	bne.w	800992a <_dtoa_r+0x92>
 800a43c:	4b07      	ldr	r3, [pc, #28]	; (800a45c <_dtoa_r+0xbc4>)
 800a43e:	f7ff ba98 	b.w	8009972 <_dtoa_r+0xda>
 800a442:	9b06      	ldr	r3, [sp, #24]
 800a444:	2b00      	cmp	r3, #0
 800a446:	dcb6      	bgt.n	800a3b6 <_dtoa_r+0xb1e>
 800a448:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a44a:	2b02      	cmp	r3, #2
 800a44c:	f73f aeb5 	bgt.w	800a1ba <_dtoa_r+0x922>
 800a450:	e7b1      	b.n	800a3b6 <_dtoa_r+0xb1e>
 800a452:	bf00      	nop
 800a454:	0800ccfe 	.word	0x0800ccfe
 800a458:	0800cc51 	.word	0x0800cc51
 800a45c:	0800cc82 	.word	0x0800cc82

0800a460 <_free_r>:
 800a460:	b538      	push	{r3, r4, r5, lr}
 800a462:	4605      	mov	r5, r0
 800a464:	2900      	cmp	r1, #0
 800a466:	d040      	beq.n	800a4ea <_free_r+0x8a>
 800a468:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a46c:	1f0c      	subs	r4, r1, #4
 800a46e:	2b00      	cmp	r3, #0
 800a470:	bfb8      	it	lt
 800a472:	18e4      	addlt	r4, r4, r3
 800a474:	f000 fc50 	bl	800ad18 <__malloc_lock>
 800a478:	4a1c      	ldr	r2, [pc, #112]	; (800a4ec <_free_r+0x8c>)
 800a47a:	6813      	ldr	r3, [r2, #0]
 800a47c:	b933      	cbnz	r3, 800a48c <_free_r+0x2c>
 800a47e:	6063      	str	r3, [r4, #4]
 800a480:	6014      	str	r4, [r2, #0]
 800a482:	4628      	mov	r0, r5
 800a484:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a488:	f000 bc4c 	b.w	800ad24 <__malloc_unlock>
 800a48c:	42a3      	cmp	r3, r4
 800a48e:	d908      	bls.n	800a4a2 <_free_r+0x42>
 800a490:	6820      	ldr	r0, [r4, #0]
 800a492:	1821      	adds	r1, r4, r0
 800a494:	428b      	cmp	r3, r1
 800a496:	bf01      	itttt	eq
 800a498:	6819      	ldreq	r1, [r3, #0]
 800a49a:	685b      	ldreq	r3, [r3, #4]
 800a49c:	1809      	addeq	r1, r1, r0
 800a49e:	6021      	streq	r1, [r4, #0]
 800a4a0:	e7ed      	b.n	800a47e <_free_r+0x1e>
 800a4a2:	461a      	mov	r2, r3
 800a4a4:	685b      	ldr	r3, [r3, #4]
 800a4a6:	b10b      	cbz	r3, 800a4ac <_free_r+0x4c>
 800a4a8:	42a3      	cmp	r3, r4
 800a4aa:	d9fa      	bls.n	800a4a2 <_free_r+0x42>
 800a4ac:	6811      	ldr	r1, [r2, #0]
 800a4ae:	1850      	adds	r0, r2, r1
 800a4b0:	42a0      	cmp	r0, r4
 800a4b2:	d10b      	bne.n	800a4cc <_free_r+0x6c>
 800a4b4:	6820      	ldr	r0, [r4, #0]
 800a4b6:	4401      	add	r1, r0
 800a4b8:	1850      	adds	r0, r2, r1
 800a4ba:	4283      	cmp	r3, r0
 800a4bc:	6011      	str	r1, [r2, #0]
 800a4be:	d1e0      	bne.n	800a482 <_free_r+0x22>
 800a4c0:	6818      	ldr	r0, [r3, #0]
 800a4c2:	685b      	ldr	r3, [r3, #4]
 800a4c4:	4408      	add	r0, r1
 800a4c6:	6010      	str	r0, [r2, #0]
 800a4c8:	6053      	str	r3, [r2, #4]
 800a4ca:	e7da      	b.n	800a482 <_free_r+0x22>
 800a4cc:	d902      	bls.n	800a4d4 <_free_r+0x74>
 800a4ce:	230c      	movs	r3, #12
 800a4d0:	602b      	str	r3, [r5, #0]
 800a4d2:	e7d6      	b.n	800a482 <_free_r+0x22>
 800a4d4:	6820      	ldr	r0, [r4, #0]
 800a4d6:	1821      	adds	r1, r4, r0
 800a4d8:	428b      	cmp	r3, r1
 800a4da:	bf01      	itttt	eq
 800a4dc:	6819      	ldreq	r1, [r3, #0]
 800a4de:	685b      	ldreq	r3, [r3, #4]
 800a4e0:	1809      	addeq	r1, r1, r0
 800a4e2:	6021      	streq	r1, [r4, #0]
 800a4e4:	6063      	str	r3, [r4, #4]
 800a4e6:	6054      	str	r4, [r2, #4]
 800a4e8:	e7cb      	b.n	800a482 <_free_r+0x22>
 800a4ea:	bd38      	pop	{r3, r4, r5, pc}
 800a4ec:	2000292c 	.word	0x2000292c

0800a4f0 <rshift>:
 800a4f0:	6903      	ldr	r3, [r0, #16]
 800a4f2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a4f6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a4fa:	f100 0414 	add.w	r4, r0, #20
 800a4fe:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a502:	dd46      	ble.n	800a592 <rshift+0xa2>
 800a504:	f011 011f 	ands.w	r1, r1, #31
 800a508:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a50c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a510:	d10c      	bne.n	800a52c <rshift+0x3c>
 800a512:	4629      	mov	r1, r5
 800a514:	f100 0710 	add.w	r7, r0, #16
 800a518:	42b1      	cmp	r1, r6
 800a51a:	d335      	bcc.n	800a588 <rshift+0x98>
 800a51c:	1a9b      	subs	r3, r3, r2
 800a51e:	009b      	lsls	r3, r3, #2
 800a520:	1eea      	subs	r2, r5, #3
 800a522:	4296      	cmp	r6, r2
 800a524:	bf38      	it	cc
 800a526:	2300      	movcc	r3, #0
 800a528:	4423      	add	r3, r4
 800a52a:	e015      	b.n	800a558 <rshift+0x68>
 800a52c:	46a1      	mov	r9, r4
 800a52e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a532:	f1c1 0820 	rsb	r8, r1, #32
 800a536:	40cf      	lsrs	r7, r1
 800a538:	f105 0e04 	add.w	lr, r5, #4
 800a53c:	4576      	cmp	r6, lr
 800a53e:	46f4      	mov	ip, lr
 800a540:	d816      	bhi.n	800a570 <rshift+0x80>
 800a542:	1a9a      	subs	r2, r3, r2
 800a544:	0092      	lsls	r2, r2, #2
 800a546:	3a04      	subs	r2, #4
 800a548:	3501      	adds	r5, #1
 800a54a:	42ae      	cmp	r6, r5
 800a54c:	bf38      	it	cc
 800a54e:	2200      	movcc	r2, #0
 800a550:	18a3      	adds	r3, r4, r2
 800a552:	50a7      	str	r7, [r4, r2]
 800a554:	b107      	cbz	r7, 800a558 <rshift+0x68>
 800a556:	3304      	adds	r3, #4
 800a558:	42a3      	cmp	r3, r4
 800a55a:	eba3 0204 	sub.w	r2, r3, r4
 800a55e:	bf08      	it	eq
 800a560:	2300      	moveq	r3, #0
 800a562:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a566:	6102      	str	r2, [r0, #16]
 800a568:	bf08      	it	eq
 800a56a:	6143      	streq	r3, [r0, #20]
 800a56c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a570:	f8dc c000 	ldr.w	ip, [ip]
 800a574:	fa0c fc08 	lsl.w	ip, ip, r8
 800a578:	ea4c 0707 	orr.w	r7, ip, r7
 800a57c:	f849 7b04 	str.w	r7, [r9], #4
 800a580:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a584:	40cf      	lsrs	r7, r1
 800a586:	e7d9      	b.n	800a53c <rshift+0x4c>
 800a588:	f851 cb04 	ldr.w	ip, [r1], #4
 800a58c:	f847 cf04 	str.w	ip, [r7, #4]!
 800a590:	e7c2      	b.n	800a518 <rshift+0x28>
 800a592:	4623      	mov	r3, r4
 800a594:	e7e0      	b.n	800a558 <rshift+0x68>

0800a596 <__hexdig_fun>:
 800a596:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a59a:	2b09      	cmp	r3, #9
 800a59c:	d802      	bhi.n	800a5a4 <__hexdig_fun+0xe>
 800a59e:	3820      	subs	r0, #32
 800a5a0:	b2c0      	uxtb	r0, r0
 800a5a2:	4770      	bx	lr
 800a5a4:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a5a8:	2b05      	cmp	r3, #5
 800a5aa:	d801      	bhi.n	800a5b0 <__hexdig_fun+0x1a>
 800a5ac:	3847      	subs	r0, #71	; 0x47
 800a5ae:	e7f7      	b.n	800a5a0 <__hexdig_fun+0xa>
 800a5b0:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a5b4:	2b05      	cmp	r3, #5
 800a5b6:	d801      	bhi.n	800a5bc <__hexdig_fun+0x26>
 800a5b8:	3827      	subs	r0, #39	; 0x27
 800a5ba:	e7f1      	b.n	800a5a0 <__hexdig_fun+0xa>
 800a5bc:	2000      	movs	r0, #0
 800a5be:	4770      	bx	lr

0800a5c0 <__gethex>:
 800a5c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5c4:	4681      	mov	r9, r0
 800a5c6:	468a      	mov	sl, r1
 800a5c8:	4617      	mov	r7, r2
 800a5ca:	680a      	ldr	r2, [r1, #0]
 800a5cc:	b085      	sub	sp, #20
 800a5ce:	f102 0b02 	add.w	fp, r2, #2
 800a5d2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a5d6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a5da:	9302      	str	r3, [sp, #8]
 800a5dc:	32fe      	adds	r2, #254	; 0xfe
 800a5de:	eb02 030b 	add.w	r3, r2, fp
 800a5e2:	46d8      	mov	r8, fp
 800a5e4:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800a5e8:	9301      	str	r3, [sp, #4]
 800a5ea:	2830      	cmp	r0, #48	; 0x30
 800a5ec:	d0f7      	beq.n	800a5de <__gethex+0x1e>
 800a5ee:	f7ff ffd2 	bl	800a596 <__hexdig_fun>
 800a5f2:	4604      	mov	r4, r0
 800a5f4:	2800      	cmp	r0, #0
 800a5f6:	d138      	bne.n	800a66a <__gethex+0xaa>
 800a5f8:	2201      	movs	r2, #1
 800a5fa:	4640      	mov	r0, r8
 800a5fc:	49a7      	ldr	r1, [pc, #668]	; (800a89c <__gethex+0x2dc>)
 800a5fe:	f7fe fff6 	bl	80095ee <strncmp>
 800a602:	4606      	mov	r6, r0
 800a604:	2800      	cmp	r0, #0
 800a606:	d169      	bne.n	800a6dc <__gethex+0x11c>
 800a608:	f898 0001 	ldrb.w	r0, [r8, #1]
 800a60c:	465d      	mov	r5, fp
 800a60e:	f7ff ffc2 	bl	800a596 <__hexdig_fun>
 800a612:	2800      	cmp	r0, #0
 800a614:	d064      	beq.n	800a6e0 <__gethex+0x120>
 800a616:	465a      	mov	r2, fp
 800a618:	7810      	ldrb	r0, [r2, #0]
 800a61a:	4690      	mov	r8, r2
 800a61c:	2830      	cmp	r0, #48	; 0x30
 800a61e:	f102 0201 	add.w	r2, r2, #1
 800a622:	d0f9      	beq.n	800a618 <__gethex+0x58>
 800a624:	f7ff ffb7 	bl	800a596 <__hexdig_fun>
 800a628:	2301      	movs	r3, #1
 800a62a:	fab0 f480 	clz	r4, r0
 800a62e:	465e      	mov	r6, fp
 800a630:	0964      	lsrs	r4, r4, #5
 800a632:	9301      	str	r3, [sp, #4]
 800a634:	4642      	mov	r2, r8
 800a636:	4615      	mov	r5, r2
 800a638:	7828      	ldrb	r0, [r5, #0]
 800a63a:	3201      	adds	r2, #1
 800a63c:	f7ff ffab 	bl	800a596 <__hexdig_fun>
 800a640:	2800      	cmp	r0, #0
 800a642:	d1f8      	bne.n	800a636 <__gethex+0x76>
 800a644:	2201      	movs	r2, #1
 800a646:	4628      	mov	r0, r5
 800a648:	4994      	ldr	r1, [pc, #592]	; (800a89c <__gethex+0x2dc>)
 800a64a:	f7fe ffd0 	bl	80095ee <strncmp>
 800a64e:	b978      	cbnz	r0, 800a670 <__gethex+0xb0>
 800a650:	b946      	cbnz	r6, 800a664 <__gethex+0xa4>
 800a652:	1c6e      	adds	r6, r5, #1
 800a654:	4632      	mov	r2, r6
 800a656:	4615      	mov	r5, r2
 800a658:	7828      	ldrb	r0, [r5, #0]
 800a65a:	3201      	adds	r2, #1
 800a65c:	f7ff ff9b 	bl	800a596 <__hexdig_fun>
 800a660:	2800      	cmp	r0, #0
 800a662:	d1f8      	bne.n	800a656 <__gethex+0x96>
 800a664:	1b73      	subs	r3, r6, r5
 800a666:	009e      	lsls	r6, r3, #2
 800a668:	e004      	b.n	800a674 <__gethex+0xb4>
 800a66a:	2400      	movs	r4, #0
 800a66c:	4626      	mov	r6, r4
 800a66e:	e7e1      	b.n	800a634 <__gethex+0x74>
 800a670:	2e00      	cmp	r6, #0
 800a672:	d1f7      	bne.n	800a664 <__gethex+0xa4>
 800a674:	782b      	ldrb	r3, [r5, #0]
 800a676:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a67a:	2b50      	cmp	r3, #80	; 0x50
 800a67c:	d13d      	bne.n	800a6fa <__gethex+0x13a>
 800a67e:	786b      	ldrb	r3, [r5, #1]
 800a680:	2b2b      	cmp	r3, #43	; 0x2b
 800a682:	d02f      	beq.n	800a6e4 <__gethex+0x124>
 800a684:	2b2d      	cmp	r3, #45	; 0x2d
 800a686:	d031      	beq.n	800a6ec <__gethex+0x12c>
 800a688:	f04f 0b00 	mov.w	fp, #0
 800a68c:	1c69      	adds	r1, r5, #1
 800a68e:	7808      	ldrb	r0, [r1, #0]
 800a690:	f7ff ff81 	bl	800a596 <__hexdig_fun>
 800a694:	1e42      	subs	r2, r0, #1
 800a696:	b2d2      	uxtb	r2, r2
 800a698:	2a18      	cmp	r2, #24
 800a69a:	d82e      	bhi.n	800a6fa <__gethex+0x13a>
 800a69c:	f1a0 0210 	sub.w	r2, r0, #16
 800a6a0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a6a4:	f7ff ff77 	bl	800a596 <__hexdig_fun>
 800a6a8:	f100 3cff 	add.w	ip, r0, #4294967295
 800a6ac:	fa5f fc8c 	uxtb.w	ip, ip
 800a6b0:	f1bc 0f18 	cmp.w	ip, #24
 800a6b4:	d91d      	bls.n	800a6f2 <__gethex+0x132>
 800a6b6:	f1bb 0f00 	cmp.w	fp, #0
 800a6ba:	d000      	beq.n	800a6be <__gethex+0xfe>
 800a6bc:	4252      	negs	r2, r2
 800a6be:	4416      	add	r6, r2
 800a6c0:	f8ca 1000 	str.w	r1, [sl]
 800a6c4:	b1dc      	cbz	r4, 800a6fe <__gethex+0x13e>
 800a6c6:	9b01      	ldr	r3, [sp, #4]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	bf14      	ite	ne
 800a6cc:	f04f 0800 	movne.w	r8, #0
 800a6d0:	f04f 0806 	moveq.w	r8, #6
 800a6d4:	4640      	mov	r0, r8
 800a6d6:	b005      	add	sp, #20
 800a6d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6dc:	4645      	mov	r5, r8
 800a6de:	4626      	mov	r6, r4
 800a6e0:	2401      	movs	r4, #1
 800a6e2:	e7c7      	b.n	800a674 <__gethex+0xb4>
 800a6e4:	f04f 0b00 	mov.w	fp, #0
 800a6e8:	1ca9      	adds	r1, r5, #2
 800a6ea:	e7d0      	b.n	800a68e <__gethex+0xce>
 800a6ec:	f04f 0b01 	mov.w	fp, #1
 800a6f0:	e7fa      	b.n	800a6e8 <__gethex+0x128>
 800a6f2:	230a      	movs	r3, #10
 800a6f4:	fb03 0002 	mla	r0, r3, r2, r0
 800a6f8:	e7d0      	b.n	800a69c <__gethex+0xdc>
 800a6fa:	4629      	mov	r1, r5
 800a6fc:	e7e0      	b.n	800a6c0 <__gethex+0x100>
 800a6fe:	4621      	mov	r1, r4
 800a700:	eba5 0308 	sub.w	r3, r5, r8
 800a704:	3b01      	subs	r3, #1
 800a706:	2b07      	cmp	r3, #7
 800a708:	dc0a      	bgt.n	800a720 <__gethex+0x160>
 800a70a:	4648      	mov	r0, r9
 800a70c:	f000 fb10 	bl	800ad30 <_Balloc>
 800a710:	4604      	mov	r4, r0
 800a712:	b940      	cbnz	r0, 800a726 <__gethex+0x166>
 800a714:	4602      	mov	r2, r0
 800a716:	21e4      	movs	r1, #228	; 0xe4
 800a718:	4b61      	ldr	r3, [pc, #388]	; (800a8a0 <__gethex+0x2e0>)
 800a71a:	4862      	ldr	r0, [pc, #392]	; (800a8a4 <__gethex+0x2e4>)
 800a71c:	f001 f9c4 	bl	800baa8 <__assert_func>
 800a720:	3101      	adds	r1, #1
 800a722:	105b      	asrs	r3, r3, #1
 800a724:	e7ef      	b.n	800a706 <__gethex+0x146>
 800a726:	2300      	movs	r3, #0
 800a728:	469b      	mov	fp, r3
 800a72a:	f100 0a14 	add.w	sl, r0, #20
 800a72e:	f8cd a004 	str.w	sl, [sp, #4]
 800a732:	45a8      	cmp	r8, r5
 800a734:	d344      	bcc.n	800a7c0 <__gethex+0x200>
 800a736:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a73a:	4658      	mov	r0, fp
 800a73c:	f848 bb04 	str.w	fp, [r8], #4
 800a740:	eba8 080a 	sub.w	r8, r8, sl
 800a744:	ea4f 02a8 	mov.w	r2, r8, asr #2
 800a748:	6122      	str	r2, [r4, #16]
 800a74a:	ea4f 1842 	mov.w	r8, r2, lsl #5
 800a74e:	f000 fbe1 	bl	800af14 <__hi0bits>
 800a752:	683d      	ldr	r5, [r7, #0]
 800a754:	eba8 0800 	sub.w	r8, r8, r0
 800a758:	45a8      	cmp	r8, r5
 800a75a:	dd59      	ble.n	800a810 <__gethex+0x250>
 800a75c:	eba8 0805 	sub.w	r8, r8, r5
 800a760:	4641      	mov	r1, r8
 800a762:	4620      	mov	r0, r4
 800a764:	f000 ff5f 	bl	800b626 <__any_on>
 800a768:	4683      	mov	fp, r0
 800a76a:	b1b8      	cbz	r0, 800a79c <__gethex+0x1dc>
 800a76c:	f04f 0b01 	mov.w	fp, #1
 800a770:	f108 33ff 	add.w	r3, r8, #4294967295
 800a774:	1159      	asrs	r1, r3, #5
 800a776:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a77a:	f003 021f 	and.w	r2, r3, #31
 800a77e:	fa0b f202 	lsl.w	r2, fp, r2
 800a782:	420a      	tst	r2, r1
 800a784:	d00a      	beq.n	800a79c <__gethex+0x1dc>
 800a786:	455b      	cmp	r3, fp
 800a788:	dd06      	ble.n	800a798 <__gethex+0x1d8>
 800a78a:	4620      	mov	r0, r4
 800a78c:	f1a8 0102 	sub.w	r1, r8, #2
 800a790:	f000 ff49 	bl	800b626 <__any_on>
 800a794:	2800      	cmp	r0, #0
 800a796:	d138      	bne.n	800a80a <__gethex+0x24a>
 800a798:	f04f 0b02 	mov.w	fp, #2
 800a79c:	4641      	mov	r1, r8
 800a79e:	4620      	mov	r0, r4
 800a7a0:	f7ff fea6 	bl	800a4f0 <rshift>
 800a7a4:	4446      	add	r6, r8
 800a7a6:	68bb      	ldr	r3, [r7, #8]
 800a7a8:	42b3      	cmp	r3, r6
 800a7aa:	da41      	bge.n	800a830 <__gethex+0x270>
 800a7ac:	4621      	mov	r1, r4
 800a7ae:	4648      	mov	r0, r9
 800a7b0:	f000 fafe 	bl	800adb0 <_Bfree>
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a7b8:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800a7bc:	6013      	str	r3, [r2, #0]
 800a7be:	e789      	b.n	800a6d4 <__gethex+0x114>
 800a7c0:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800a7c4:	2a2e      	cmp	r2, #46	; 0x2e
 800a7c6:	d014      	beq.n	800a7f2 <__gethex+0x232>
 800a7c8:	2b20      	cmp	r3, #32
 800a7ca:	d106      	bne.n	800a7da <__gethex+0x21a>
 800a7cc:	9b01      	ldr	r3, [sp, #4]
 800a7ce:	f843 bb04 	str.w	fp, [r3], #4
 800a7d2:	f04f 0b00 	mov.w	fp, #0
 800a7d6:	9301      	str	r3, [sp, #4]
 800a7d8:	465b      	mov	r3, fp
 800a7da:	7828      	ldrb	r0, [r5, #0]
 800a7dc:	9303      	str	r3, [sp, #12]
 800a7de:	f7ff feda 	bl	800a596 <__hexdig_fun>
 800a7e2:	9b03      	ldr	r3, [sp, #12]
 800a7e4:	f000 000f 	and.w	r0, r0, #15
 800a7e8:	4098      	lsls	r0, r3
 800a7ea:	ea4b 0b00 	orr.w	fp, fp, r0
 800a7ee:	3304      	adds	r3, #4
 800a7f0:	e79f      	b.n	800a732 <__gethex+0x172>
 800a7f2:	45a8      	cmp	r8, r5
 800a7f4:	d8e8      	bhi.n	800a7c8 <__gethex+0x208>
 800a7f6:	2201      	movs	r2, #1
 800a7f8:	4628      	mov	r0, r5
 800a7fa:	4928      	ldr	r1, [pc, #160]	; (800a89c <__gethex+0x2dc>)
 800a7fc:	9303      	str	r3, [sp, #12]
 800a7fe:	f7fe fef6 	bl	80095ee <strncmp>
 800a802:	9b03      	ldr	r3, [sp, #12]
 800a804:	2800      	cmp	r0, #0
 800a806:	d1df      	bne.n	800a7c8 <__gethex+0x208>
 800a808:	e793      	b.n	800a732 <__gethex+0x172>
 800a80a:	f04f 0b03 	mov.w	fp, #3
 800a80e:	e7c5      	b.n	800a79c <__gethex+0x1dc>
 800a810:	da0b      	bge.n	800a82a <__gethex+0x26a>
 800a812:	eba5 0808 	sub.w	r8, r5, r8
 800a816:	4621      	mov	r1, r4
 800a818:	4642      	mov	r2, r8
 800a81a:	4648      	mov	r0, r9
 800a81c:	f000 fce0 	bl	800b1e0 <__lshift>
 800a820:	4604      	mov	r4, r0
 800a822:	eba6 0608 	sub.w	r6, r6, r8
 800a826:	f100 0a14 	add.w	sl, r0, #20
 800a82a:	f04f 0b00 	mov.w	fp, #0
 800a82e:	e7ba      	b.n	800a7a6 <__gethex+0x1e6>
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	42b3      	cmp	r3, r6
 800a834:	dd74      	ble.n	800a920 <__gethex+0x360>
 800a836:	1b9e      	subs	r6, r3, r6
 800a838:	42b5      	cmp	r5, r6
 800a83a:	dc35      	bgt.n	800a8a8 <__gethex+0x2e8>
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	2b02      	cmp	r3, #2
 800a840:	d023      	beq.n	800a88a <__gethex+0x2ca>
 800a842:	2b03      	cmp	r3, #3
 800a844:	d025      	beq.n	800a892 <__gethex+0x2d2>
 800a846:	2b01      	cmp	r3, #1
 800a848:	d115      	bne.n	800a876 <__gethex+0x2b6>
 800a84a:	42b5      	cmp	r5, r6
 800a84c:	d113      	bne.n	800a876 <__gethex+0x2b6>
 800a84e:	2d01      	cmp	r5, #1
 800a850:	d10b      	bne.n	800a86a <__gethex+0x2aa>
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	9a02      	ldr	r2, [sp, #8]
 800a856:	f04f 0862 	mov.w	r8, #98	; 0x62
 800a85a:	6013      	str	r3, [r2, #0]
 800a85c:	2301      	movs	r3, #1
 800a85e:	6123      	str	r3, [r4, #16]
 800a860:	f8ca 3000 	str.w	r3, [sl]
 800a864:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a866:	601c      	str	r4, [r3, #0]
 800a868:	e734      	b.n	800a6d4 <__gethex+0x114>
 800a86a:	4620      	mov	r0, r4
 800a86c:	1e69      	subs	r1, r5, #1
 800a86e:	f000 feda 	bl	800b626 <__any_on>
 800a872:	2800      	cmp	r0, #0
 800a874:	d1ed      	bne.n	800a852 <__gethex+0x292>
 800a876:	4621      	mov	r1, r4
 800a878:	4648      	mov	r0, r9
 800a87a:	f000 fa99 	bl	800adb0 <_Bfree>
 800a87e:	2300      	movs	r3, #0
 800a880:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a882:	f04f 0850 	mov.w	r8, #80	; 0x50
 800a886:	6013      	str	r3, [r2, #0]
 800a888:	e724      	b.n	800a6d4 <__gethex+0x114>
 800a88a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d1f2      	bne.n	800a876 <__gethex+0x2b6>
 800a890:	e7df      	b.n	800a852 <__gethex+0x292>
 800a892:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a894:	2b00      	cmp	r3, #0
 800a896:	d1dc      	bne.n	800a852 <__gethex+0x292>
 800a898:	e7ed      	b.n	800a876 <__gethex+0x2b6>
 800a89a:	bf00      	nop
 800a89c:	0800cae9 	.word	0x0800cae9
 800a8a0:	0800ccfe 	.word	0x0800ccfe
 800a8a4:	0800cd0f 	.word	0x0800cd0f
 800a8a8:	f106 38ff 	add.w	r8, r6, #4294967295
 800a8ac:	f1bb 0f00 	cmp.w	fp, #0
 800a8b0:	d133      	bne.n	800a91a <__gethex+0x35a>
 800a8b2:	f1b8 0f00 	cmp.w	r8, #0
 800a8b6:	d004      	beq.n	800a8c2 <__gethex+0x302>
 800a8b8:	4641      	mov	r1, r8
 800a8ba:	4620      	mov	r0, r4
 800a8bc:	f000 feb3 	bl	800b626 <__any_on>
 800a8c0:	4683      	mov	fp, r0
 800a8c2:	2301      	movs	r3, #1
 800a8c4:	ea4f 1268 	mov.w	r2, r8, asr #5
 800a8c8:	f008 081f 	and.w	r8, r8, #31
 800a8cc:	fa03 f308 	lsl.w	r3, r3, r8
 800a8d0:	f04f 0802 	mov.w	r8, #2
 800a8d4:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a8d8:	4631      	mov	r1, r6
 800a8da:	4213      	tst	r3, r2
 800a8dc:	4620      	mov	r0, r4
 800a8de:	bf18      	it	ne
 800a8e0:	f04b 0b02 	orrne.w	fp, fp, #2
 800a8e4:	1bad      	subs	r5, r5, r6
 800a8e6:	f7ff fe03 	bl	800a4f0 <rshift>
 800a8ea:	687e      	ldr	r6, [r7, #4]
 800a8ec:	f1bb 0f00 	cmp.w	fp, #0
 800a8f0:	d04a      	beq.n	800a988 <__gethex+0x3c8>
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	2b02      	cmp	r3, #2
 800a8f6:	d016      	beq.n	800a926 <__gethex+0x366>
 800a8f8:	2b03      	cmp	r3, #3
 800a8fa:	d018      	beq.n	800a92e <__gethex+0x36e>
 800a8fc:	2b01      	cmp	r3, #1
 800a8fe:	d109      	bne.n	800a914 <__gethex+0x354>
 800a900:	f01b 0f02 	tst.w	fp, #2
 800a904:	d006      	beq.n	800a914 <__gethex+0x354>
 800a906:	f8da 3000 	ldr.w	r3, [sl]
 800a90a:	ea4b 0b03 	orr.w	fp, fp, r3
 800a90e:	f01b 0f01 	tst.w	fp, #1
 800a912:	d10f      	bne.n	800a934 <__gethex+0x374>
 800a914:	f048 0810 	orr.w	r8, r8, #16
 800a918:	e036      	b.n	800a988 <__gethex+0x3c8>
 800a91a:	f04f 0b01 	mov.w	fp, #1
 800a91e:	e7d0      	b.n	800a8c2 <__gethex+0x302>
 800a920:	f04f 0801 	mov.w	r8, #1
 800a924:	e7e2      	b.n	800a8ec <__gethex+0x32c>
 800a926:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a928:	f1c3 0301 	rsb	r3, r3, #1
 800a92c:	930f      	str	r3, [sp, #60]	; 0x3c
 800a92e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a930:	2b00      	cmp	r3, #0
 800a932:	d0ef      	beq.n	800a914 <__gethex+0x354>
 800a934:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a938:	f104 0214 	add.w	r2, r4, #20
 800a93c:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800a940:	9301      	str	r3, [sp, #4]
 800a942:	2300      	movs	r3, #0
 800a944:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800a948:	4694      	mov	ip, r2
 800a94a:	f852 1b04 	ldr.w	r1, [r2], #4
 800a94e:	f1b1 3fff 	cmp.w	r1, #4294967295
 800a952:	d01e      	beq.n	800a992 <__gethex+0x3d2>
 800a954:	3101      	adds	r1, #1
 800a956:	f8cc 1000 	str.w	r1, [ip]
 800a95a:	f1b8 0f02 	cmp.w	r8, #2
 800a95e:	f104 0214 	add.w	r2, r4, #20
 800a962:	d13d      	bne.n	800a9e0 <__gethex+0x420>
 800a964:	683b      	ldr	r3, [r7, #0]
 800a966:	3b01      	subs	r3, #1
 800a968:	42ab      	cmp	r3, r5
 800a96a:	d10b      	bne.n	800a984 <__gethex+0x3c4>
 800a96c:	2301      	movs	r3, #1
 800a96e:	1169      	asrs	r1, r5, #5
 800a970:	f005 051f 	and.w	r5, r5, #31
 800a974:	fa03 f505 	lsl.w	r5, r3, r5
 800a978:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a97c:	421d      	tst	r5, r3
 800a97e:	bf18      	it	ne
 800a980:	f04f 0801 	movne.w	r8, #1
 800a984:	f048 0820 	orr.w	r8, r8, #32
 800a988:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a98a:	601c      	str	r4, [r3, #0]
 800a98c:	9b02      	ldr	r3, [sp, #8]
 800a98e:	601e      	str	r6, [r3, #0]
 800a990:	e6a0      	b.n	800a6d4 <__gethex+0x114>
 800a992:	4290      	cmp	r0, r2
 800a994:	f842 3c04 	str.w	r3, [r2, #-4]
 800a998:	d8d6      	bhi.n	800a948 <__gethex+0x388>
 800a99a:	68a2      	ldr	r2, [r4, #8]
 800a99c:	4593      	cmp	fp, r2
 800a99e:	db17      	blt.n	800a9d0 <__gethex+0x410>
 800a9a0:	6861      	ldr	r1, [r4, #4]
 800a9a2:	4648      	mov	r0, r9
 800a9a4:	3101      	adds	r1, #1
 800a9a6:	f000 f9c3 	bl	800ad30 <_Balloc>
 800a9aa:	4682      	mov	sl, r0
 800a9ac:	b918      	cbnz	r0, 800a9b6 <__gethex+0x3f6>
 800a9ae:	4602      	mov	r2, r0
 800a9b0:	2184      	movs	r1, #132	; 0x84
 800a9b2:	4b1a      	ldr	r3, [pc, #104]	; (800aa1c <__gethex+0x45c>)
 800a9b4:	e6b1      	b.n	800a71a <__gethex+0x15a>
 800a9b6:	6922      	ldr	r2, [r4, #16]
 800a9b8:	f104 010c 	add.w	r1, r4, #12
 800a9bc:	3202      	adds	r2, #2
 800a9be:	0092      	lsls	r2, r2, #2
 800a9c0:	300c      	adds	r0, #12
 800a9c2:	f7fe fec4 	bl	800974e <memcpy>
 800a9c6:	4621      	mov	r1, r4
 800a9c8:	4648      	mov	r0, r9
 800a9ca:	f000 f9f1 	bl	800adb0 <_Bfree>
 800a9ce:	4654      	mov	r4, sl
 800a9d0:	6922      	ldr	r2, [r4, #16]
 800a9d2:	1c51      	adds	r1, r2, #1
 800a9d4:	6121      	str	r1, [r4, #16]
 800a9d6:	2101      	movs	r1, #1
 800a9d8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800a9dc:	6151      	str	r1, [r2, #20]
 800a9de:	e7bc      	b.n	800a95a <__gethex+0x39a>
 800a9e0:	6921      	ldr	r1, [r4, #16]
 800a9e2:	4559      	cmp	r1, fp
 800a9e4:	dd0b      	ble.n	800a9fe <__gethex+0x43e>
 800a9e6:	2101      	movs	r1, #1
 800a9e8:	4620      	mov	r0, r4
 800a9ea:	f7ff fd81 	bl	800a4f0 <rshift>
 800a9ee:	68bb      	ldr	r3, [r7, #8]
 800a9f0:	3601      	adds	r6, #1
 800a9f2:	42b3      	cmp	r3, r6
 800a9f4:	f6ff aeda 	blt.w	800a7ac <__gethex+0x1ec>
 800a9f8:	f04f 0801 	mov.w	r8, #1
 800a9fc:	e7c2      	b.n	800a984 <__gethex+0x3c4>
 800a9fe:	f015 051f 	ands.w	r5, r5, #31
 800aa02:	d0f9      	beq.n	800a9f8 <__gethex+0x438>
 800aa04:	9b01      	ldr	r3, [sp, #4]
 800aa06:	f1c5 0520 	rsb	r5, r5, #32
 800aa0a:	441a      	add	r2, r3
 800aa0c:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800aa10:	f000 fa80 	bl	800af14 <__hi0bits>
 800aa14:	42a8      	cmp	r0, r5
 800aa16:	dbe6      	blt.n	800a9e6 <__gethex+0x426>
 800aa18:	e7ee      	b.n	800a9f8 <__gethex+0x438>
 800aa1a:	bf00      	nop
 800aa1c:	0800ccfe 	.word	0x0800ccfe

0800aa20 <L_shift>:
 800aa20:	f1c2 0208 	rsb	r2, r2, #8
 800aa24:	0092      	lsls	r2, r2, #2
 800aa26:	b570      	push	{r4, r5, r6, lr}
 800aa28:	f1c2 0620 	rsb	r6, r2, #32
 800aa2c:	6843      	ldr	r3, [r0, #4]
 800aa2e:	6804      	ldr	r4, [r0, #0]
 800aa30:	fa03 f506 	lsl.w	r5, r3, r6
 800aa34:	432c      	orrs	r4, r5
 800aa36:	40d3      	lsrs	r3, r2
 800aa38:	6004      	str	r4, [r0, #0]
 800aa3a:	f840 3f04 	str.w	r3, [r0, #4]!
 800aa3e:	4288      	cmp	r0, r1
 800aa40:	d3f4      	bcc.n	800aa2c <L_shift+0xc>
 800aa42:	bd70      	pop	{r4, r5, r6, pc}

0800aa44 <__match>:
 800aa44:	b530      	push	{r4, r5, lr}
 800aa46:	6803      	ldr	r3, [r0, #0]
 800aa48:	3301      	adds	r3, #1
 800aa4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aa4e:	b914      	cbnz	r4, 800aa56 <__match+0x12>
 800aa50:	6003      	str	r3, [r0, #0]
 800aa52:	2001      	movs	r0, #1
 800aa54:	bd30      	pop	{r4, r5, pc}
 800aa56:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa5a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800aa5e:	2d19      	cmp	r5, #25
 800aa60:	bf98      	it	ls
 800aa62:	3220      	addls	r2, #32
 800aa64:	42a2      	cmp	r2, r4
 800aa66:	d0f0      	beq.n	800aa4a <__match+0x6>
 800aa68:	2000      	movs	r0, #0
 800aa6a:	e7f3      	b.n	800aa54 <__match+0x10>

0800aa6c <__hexnan>:
 800aa6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa70:	2500      	movs	r5, #0
 800aa72:	680b      	ldr	r3, [r1, #0]
 800aa74:	4682      	mov	sl, r0
 800aa76:	115e      	asrs	r6, r3, #5
 800aa78:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800aa7c:	f013 031f 	ands.w	r3, r3, #31
 800aa80:	bf18      	it	ne
 800aa82:	3604      	addne	r6, #4
 800aa84:	1f37      	subs	r7, r6, #4
 800aa86:	4690      	mov	r8, r2
 800aa88:	46b9      	mov	r9, r7
 800aa8a:	463c      	mov	r4, r7
 800aa8c:	46ab      	mov	fp, r5
 800aa8e:	b087      	sub	sp, #28
 800aa90:	6801      	ldr	r1, [r0, #0]
 800aa92:	9301      	str	r3, [sp, #4]
 800aa94:	f846 5c04 	str.w	r5, [r6, #-4]
 800aa98:	9502      	str	r5, [sp, #8]
 800aa9a:	784a      	ldrb	r2, [r1, #1]
 800aa9c:	1c4b      	adds	r3, r1, #1
 800aa9e:	9303      	str	r3, [sp, #12]
 800aaa0:	b342      	cbz	r2, 800aaf4 <__hexnan+0x88>
 800aaa2:	4610      	mov	r0, r2
 800aaa4:	9105      	str	r1, [sp, #20]
 800aaa6:	9204      	str	r2, [sp, #16]
 800aaa8:	f7ff fd75 	bl	800a596 <__hexdig_fun>
 800aaac:	2800      	cmp	r0, #0
 800aaae:	d14f      	bne.n	800ab50 <__hexnan+0xe4>
 800aab0:	9a04      	ldr	r2, [sp, #16]
 800aab2:	9905      	ldr	r1, [sp, #20]
 800aab4:	2a20      	cmp	r2, #32
 800aab6:	d818      	bhi.n	800aaea <__hexnan+0x7e>
 800aab8:	9b02      	ldr	r3, [sp, #8]
 800aaba:	459b      	cmp	fp, r3
 800aabc:	dd13      	ble.n	800aae6 <__hexnan+0x7a>
 800aabe:	454c      	cmp	r4, r9
 800aac0:	d206      	bcs.n	800aad0 <__hexnan+0x64>
 800aac2:	2d07      	cmp	r5, #7
 800aac4:	dc04      	bgt.n	800aad0 <__hexnan+0x64>
 800aac6:	462a      	mov	r2, r5
 800aac8:	4649      	mov	r1, r9
 800aaca:	4620      	mov	r0, r4
 800aacc:	f7ff ffa8 	bl	800aa20 <L_shift>
 800aad0:	4544      	cmp	r4, r8
 800aad2:	d950      	bls.n	800ab76 <__hexnan+0x10a>
 800aad4:	2300      	movs	r3, #0
 800aad6:	f1a4 0904 	sub.w	r9, r4, #4
 800aada:	f844 3c04 	str.w	r3, [r4, #-4]
 800aade:	461d      	mov	r5, r3
 800aae0:	464c      	mov	r4, r9
 800aae2:	f8cd b008 	str.w	fp, [sp, #8]
 800aae6:	9903      	ldr	r1, [sp, #12]
 800aae8:	e7d7      	b.n	800aa9a <__hexnan+0x2e>
 800aaea:	2a29      	cmp	r2, #41	; 0x29
 800aaec:	d155      	bne.n	800ab9a <__hexnan+0x12e>
 800aaee:	3102      	adds	r1, #2
 800aaf0:	f8ca 1000 	str.w	r1, [sl]
 800aaf4:	f1bb 0f00 	cmp.w	fp, #0
 800aaf8:	d04f      	beq.n	800ab9a <__hexnan+0x12e>
 800aafa:	454c      	cmp	r4, r9
 800aafc:	d206      	bcs.n	800ab0c <__hexnan+0xa0>
 800aafe:	2d07      	cmp	r5, #7
 800ab00:	dc04      	bgt.n	800ab0c <__hexnan+0xa0>
 800ab02:	462a      	mov	r2, r5
 800ab04:	4649      	mov	r1, r9
 800ab06:	4620      	mov	r0, r4
 800ab08:	f7ff ff8a 	bl	800aa20 <L_shift>
 800ab0c:	4544      	cmp	r4, r8
 800ab0e:	d934      	bls.n	800ab7a <__hexnan+0x10e>
 800ab10:	4623      	mov	r3, r4
 800ab12:	f1a8 0204 	sub.w	r2, r8, #4
 800ab16:	f853 1b04 	ldr.w	r1, [r3], #4
 800ab1a:	429f      	cmp	r7, r3
 800ab1c:	f842 1f04 	str.w	r1, [r2, #4]!
 800ab20:	d2f9      	bcs.n	800ab16 <__hexnan+0xaa>
 800ab22:	1b3b      	subs	r3, r7, r4
 800ab24:	f023 0303 	bic.w	r3, r3, #3
 800ab28:	3304      	adds	r3, #4
 800ab2a:	3e03      	subs	r6, #3
 800ab2c:	3401      	adds	r4, #1
 800ab2e:	42a6      	cmp	r6, r4
 800ab30:	bf38      	it	cc
 800ab32:	2304      	movcc	r3, #4
 800ab34:	2200      	movs	r2, #0
 800ab36:	4443      	add	r3, r8
 800ab38:	f843 2b04 	str.w	r2, [r3], #4
 800ab3c:	429f      	cmp	r7, r3
 800ab3e:	d2fb      	bcs.n	800ab38 <__hexnan+0xcc>
 800ab40:	683b      	ldr	r3, [r7, #0]
 800ab42:	b91b      	cbnz	r3, 800ab4c <__hexnan+0xe0>
 800ab44:	4547      	cmp	r7, r8
 800ab46:	d126      	bne.n	800ab96 <__hexnan+0x12a>
 800ab48:	2301      	movs	r3, #1
 800ab4a:	603b      	str	r3, [r7, #0]
 800ab4c:	2005      	movs	r0, #5
 800ab4e:	e025      	b.n	800ab9c <__hexnan+0x130>
 800ab50:	3501      	adds	r5, #1
 800ab52:	2d08      	cmp	r5, #8
 800ab54:	f10b 0b01 	add.w	fp, fp, #1
 800ab58:	dd06      	ble.n	800ab68 <__hexnan+0xfc>
 800ab5a:	4544      	cmp	r4, r8
 800ab5c:	d9c3      	bls.n	800aae6 <__hexnan+0x7a>
 800ab5e:	2300      	movs	r3, #0
 800ab60:	2501      	movs	r5, #1
 800ab62:	f844 3c04 	str.w	r3, [r4, #-4]
 800ab66:	3c04      	subs	r4, #4
 800ab68:	6822      	ldr	r2, [r4, #0]
 800ab6a:	f000 000f 	and.w	r0, r0, #15
 800ab6e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800ab72:	6020      	str	r0, [r4, #0]
 800ab74:	e7b7      	b.n	800aae6 <__hexnan+0x7a>
 800ab76:	2508      	movs	r5, #8
 800ab78:	e7b5      	b.n	800aae6 <__hexnan+0x7a>
 800ab7a:	9b01      	ldr	r3, [sp, #4]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d0df      	beq.n	800ab40 <__hexnan+0xd4>
 800ab80:	f04f 32ff 	mov.w	r2, #4294967295
 800ab84:	f1c3 0320 	rsb	r3, r3, #32
 800ab88:	40da      	lsrs	r2, r3
 800ab8a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ab8e:	4013      	ands	r3, r2
 800ab90:	f846 3c04 	str.w	r3, [r6, #-4]
 800ab94:	e7d4      	b.n	800ab40 <__hexnan+0xd4>
 800ab96:	3f04      	subs	r7, #4
 800ab98:	e7d2      	b.n	800ab40 <__hexnan+0xd4>
 800ab9a:	2004      	movs	r0, #4
 800ab9c:	b007      	add	sp, #28
 800ab9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800aba4 <malloc>:
 800aba4:	4b02      	ldr	r3, [pc, #8]	; (800abb0 <malloc+0xc>)
 800aba6:	4601      	mov	r1, r0
 800aba8:	6818      	ldr	r0, [r3, #0]
 800abaa:	f000 b823 	b.w	800abf4 <_malloc_r>
 800abae:	bf00      	nop
 800abb0:	200001dc 	.word	0x200001dc

0800abb4 <sbrk_aligned>:
 800abb4:	b570      	push	{r4, r5, r6, lr}
 800abb6:	4e0e      	ldr	r6, [pc, #56]	; (800abf0 <sbrk_aligned+0x3c>)
 800abb8:	460c      	mov	r4, r1
 800abba:	6831      	ldr	r1, [r6, #0]
 800abbc:	4605      	mov	r5, r0
 800abbe:	b911      	cbnz	r1, 800abc6 <sbrk_aligned+0x12>
 800abc0:	f000 ff62 	bl	800ba88 <_sbrk_r>
 800abc4:	6030      	str	r0, [r6, #0]
 800abc6:	4621      	mov	r1, r4
 800abc8:	4628      	mov	r0, r5
 800abca:	f000 ff5d 	bl	800ba88 <_sbrk_r>
 800abce:	1c43      	adds	r3, r0, #1
 800abd0:	d00a      	beq.n	800abe8 <sbrk_aligned+0x34>
 800abd2:	1cc4      	adds	r4, r0, #3
 800abd4:	f024 0403 	bic.w	r4, r4, #3
 800abd8:	42a0      	cmp	r0, r4
 800abda:	d007      	beq.n	800abec <sbrk_aligned+0x38>
 800abdc:	1a21      	subs	r1, r4, r0
 800abde:	4628      	mov	r0, r5
 800abe0:	f000 ff52 	bl	800ba88 <_sbrk_r>
 800abe4:	3001      	adds	r0, #1
 800abe6:	d101      	bne.n	800abec <sbrk_aligned+0x38>
 800abe8:	f04f 34ff 	mov.w	r4, #4294967295
 800abec:	4620      	mov	r0, r4
 800abee:	bd70      	pop	{r4, r5, r6, pc}
 800abf0:	20002930 	.word	0x20002930

0800abf4 <_malloc_r>:
 800abf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800abf8:	1ccd      	adds	r5, r1, #3
 800abfa:	f025 0503 	bic.w	r5, r5, #3
 800abfe:	3508      	adds	r5, #8
 800ac00:	2d0c      	cmp	r5, #12
 800ac02:	bf38      	it	cc
 800ac04:	250c      	movcc	r5, #12
 800ac06:	2d00      	cmp	r5, #0
 800ac08:	4607      	mov	r7, r0
 800ac0a:	db01      	blt.n	800ac10 <_malloc_r+0x1c>
 800ac0c:	42a9      	cmp	r1, r5
 800ac0e:	d905      	bls.n	800ac1c <_malloc_r+0x28>
 800ac10:	230c      	movs	r3, #12
 800ac12:	2600      	movs	r6, #0
 800ac14:	603b      	str	r3, [r7, #0]
 800ac16:	4630      	mov	r0, r6
 800ac18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac1c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800acf0 <_malloc_r+0xfc>
 800ac20:	f000 f87a 	bl	800ad18 <__malloc_lock>
 800ac24:	f8d8 3000 	ldr.w	r3, [r8]
 800ac28:	461c      	mov	r4, r3
 800ac2a:	bb5c      	cbnz	r4, 800ac84 <_malloc_r+0x90>
 800ac2c:	4629      	mov	r1, r5
 800ac2e:	4638      	mov	r0, r7
 800ac30:	f7ff ffc0 	bl	800abb4 <sbrk_aligned>
 800ac34:	1c43      	adds	r3, r0, #1
 800ac36:	4604      	mov	r4, r0
 800ac38:	d155      	bne.n	800ace6 <_malloc_r+0xf2>
 800ac3a:	f8d8 4000 	ldr.w	r4, [r8]
 800ac3e:	4626      	mov	r6, r4
 800ac40:	2e00      	cmp	r6, #0
 800ac42:	d145      	bne.n	800acd0 <_malloc_r+0xdc>
 800ac44:	2c00      	cmp	r4, #0
 800ac46:	d048      	beq.n	800acda <_malloc_r+0xe6>
 800ac48:	6823      	ldr	r3, [r4, #0]
 800ac4a:	4631      	mov	r1, r6
 800ac4c:	4638      	mov	r0, r7
 800ac4e:	eb04 0903 	add.w	r9, r4, r3
 800ac52:	f000 ff19 	bl	800ba88 <_sbrk_r>
 800ac56:	4581      	cmp	r9, r0
 800ac58:	d13f      	bne.n	800acda <_malloc_r+0xe6>
 800ac5a:	6821      	ldr	r1, [r4, #0]
 800ac5c:	4638      	mov	r0, r7
 800ac5e:	1a6d      	subs	r5, r5, r1
 800ac60:	4629      	mov	r1, r5
 800ac62:	f7ff ffa7 	bl	800abb4 <sbrk_aligned>
 800ac66:	3001      	adds	r0, #1
 800ac68:	d037      	beq.n	800acda <_malloc_r+0xe6>
 800ac6a:	6823      	ldr	r3, [r4, #0]
 800ac6c:	442b      	add	r3, r5
 800ac6e:	6023      	str	r3, [r4, #0]
 800ac70:	f8d8 3000 	ldr.w	r3, [r8]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d038      	beq.n	800acea <_malloc_r+0xf6>
 800ac78:	685a      	ldr	r2, [r3, #4]
 800ac7a:	42a2      	cmp	r2, r4
 800ac7c:	d12b      	bne.n	800acd6 <_malloc_r+0xe2>
 800ac7e:	2200      	movs	r2, #0
 800ac80:	605a      	str	r2, [r3, #4]
 800ac82:	e00f      	b.n	800aca4 <_malloc_r+0xb0>
 800ac84:	6822      	ldr	r2, [r4, #0]
 800ac86:	1b52      	subs	r2, r2, r5
 800ac88:	d41f      	bmi.n	800acca <_malloc_r+0xd6>
 800ac8a:	2a0b      	cmp	r2, #11
 800ac8c:	d917      	bls.n	800acbe <_malloc_r+0xca>
 800ac8e:	1961      	adds	r1, r4, r5
 800ac90:	42a3      	cmp	r3, r4
 800ac92:	6025      	str	r5, [r4, #0]
 800ac94:	bf18      	it	ne
 800ac96:	6059      	strne	r1, [r3, #4]
 800ac98:	6863      	ldr	r3, [r4, #4]
 800ac9a:	bf08      	it	eq
 800ac9c:	f8c8 1000 	streq.w	r1, [r8]
 800aca0:	5162      	str	r2, [r4, r5]
 800aca2:	604b      	str	r3, [r1, #4]
 800aca4:	4638      	mov	r0, r7
 800aca6:	f104 060b 	add.w	r6, r4, #11
 800acaa:	f000 f83b 	bl	800ad24 <__malloc_unlock>
 800acae:	f026 0607 	bic.w	r6, r6, #7
 800acb2:	1d23      	adds	r3, r4, #4
 800acb4:	1af2      	subs	r2, r6, r3
 800acb6:	d0ae      	beq.n	800ac16 <_malloc_r+0x22>
 800acb8:	1b9b      	subs	r3, r3, r6
 800acba:	50a3      	str	r3, [r4, r2]
 800acbc:	e7ab      	b.n	800ac16 <_malloc_r+0x22>
 800acbe:	42a3      	cmp	r3, r4
 800acc0:	6862      	ldr	r2, [r4, #4]
 800acc2:	d1dd      	bne.n	800ac80 <_malloc_r+0x8c>
 800acc4:	f8c8 2000 	str.w	r2, [r8]
 800acc8:	e7ec      	b.n	800aca4 <_malloc_r+0xb0>
 800acca:	4623      	mov	r3, r4
 800accc:	6864      	ldr	r4, [r4, #4]
 800acce:	e7ac      	b.n	800ac2a <_malloc_r+0x36>
 800acd0:	4634      	mov	r4, r6
 800acd2:	6876      	ldr	r6, [r6, #4]
 800acd4:	e7b4      	b.n	800ac40 <_malloc_r+0x4c>
 800acd6:	4613      	mov	r3, r2
 800acd8:	e7cc      	b.n	800ac74 <_malloc_r+0x80>
 800acda:	230c      	movs	r3, #12
 800acdc:	4638      	mov	r0, r7
 800acde:	603b      	str	r3, [r7, #0]
 800ace0:	f000 f820 	bl	800ad24 <__malloc_unlock>
 800ace4:	e797      	b.n	800ac16 <_malloc_r+0x22>
 800ace6:	6025      	str	r5, [r4, #0]
 800ace8:	e7dc      	b.n	800aca4 <_malloc_r+0xb0>
 800acea:	605b      	str	r3, [r3, #4]
 800acec:	deff      	udf	#255	; 0xff
 800acee:	bf00      	nop
 800acf0:	2000292c 	.word	0x2000292c

0800acf4 <__ascii_mbtowc>:
 800acf4:	b082      	sub	sp, #8
 800acf6:	b901      	cbnz	r1, 800acfa <__ascii_mbtowc+0x6>
 800acf8:	a901      	add	r1, sp, #4
 800acfa:	b142      	cbz	r2, 800ad0e <__ascii_mbtowc+0x1a>
 800acfc:	b14b      	cbz	r3, 800ad12 <__ascii_mbtowc+0x1e>
 800acfe:	7813      	ldrb	r3, [r2, #0]
 800ad00:	600b      	str	r3, [r1, #0]
 800ad02:	7812      	ldrb	r2, [r2, #0]
 800ad04:	1e10      	subs	r0, r2, #0
 800ad06:	bf18      	it	ne
 800ad08:	2001      	movne	r0, #1
 800ad0a:	b002      	add	sp, #8
 800ad0c:	4770      	bx	lr
 800ad0e:	4610      	mov	r0, r2
 800ad10:	e7fb      	b.n	800ad0a <__ascii_mbtowc+0x16>
 800ad12:	f06f 0001 	mvn.w	r0, #1
 800ad16:	e7f8      	b.n	800ad0a <__ascii_mbtowc+0x16>

0800ad18 <__malloc_lock>:
 800ad18:	4801      	ldr	r0, [pc, #4]	; (800ad20 <__malloc_lock+0x8>)
 800ad1a:	f7fe bd08 	b.w	800972e <__retarget_lock_acquire_recursive>
 800ad1e:	bf00      	nop
 800ad20:	20002928 	.word	0x20002928

0800ad24 <__malloc_unlock>:
 800ad24:	4801      	ldr	r0, [pc, #4]	; (800ad2c <__malloc_unlock+0x8>)
 800ad26:	f7fe bd03 	b.w	8009730 <__retarget_lock_release_recursive>
 800ad2a:	bf00      	nop
 800ad2c:	20002928 	.word	0x20002928

0800ad30 <_Balloc>:
 800ad30:	b570      	push	{r4, r5, r6, lr}
 800ad32:	69c6      	ldr	r6, [r0, #28]
 800ad34:	4604      	mov	r4, r0
 800ad36:	460d      	mov	r5, r1
 800ad38:	b976      	cbnz	r6, 800ad58 <_Balloc+0x28>
 800ad3a:	2010      	movs	r0, #16
 800ad3c:	f7ff ff32 	bl	800aba4 <malloc>
 800ad40:	4602      	mov	r2, r0
 800ad42:	61e0      	str	r0, [r4, #28]
 800ad44:	b920      	cbnz	r0, 800ad50 <_Balloc+0x20>
 800ad46:	216b      	movs	r1, #107	; 0x6b
 800ad48:	4b17      	ldr	r3, [pc, #92]	; (800ada8 <_Balloc+0x78>)
 800ad4a:	4818      	ldr	r0, [pc, #96]	; (800adac <_Balloc+0x7c>)
 800ad4c:	f000 feac 	bl	800baa8 <__assert_func>
 800ad50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ad54:	6006      	str	r6, [r0, #0]
 800ad56:	60c6      	str	r6, [r0, #12]
 800ad58:	69e6      	ldr	r6, [r4, #28]
 800ad5a:	68f3      	ldr	r3, [r6, #12]
 800ad5c:	b183      	cbz	r3, 800ad80 <_Balloc+0x50>
 800ad5e:	69e3      	ldr	r3, [r4, #28]
 800ad60:	68db      	ldr	r3, [r3, #12]
 800ad62:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ad66:	b9b8      	cbnz	r0, 800ad98 <_Balloc+0x68>
 800ad68:	2101      	movs	r1, #1
 800ad6a:	fa01 f605 	lsl.w	r6, r1, r5
 800ad6e:	1d72      	adds	r2, r6, #5
 800ad70:	4620      	mov	r0, r4
 800ad72:	0092      	lsls	r2, r2, #2
 800ad74:	f000 feb6 	bl	800bae4 <_calloc_r>
 800ad78:	b160      	cbz	r0, 800ad94 <_Balloc+0x64>
 800ad7a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ad7e:	e00e      	b.n	800ad9e <_Balloc+0x6e>
 800ad80:	2221      	movs	r2, #33	; 0x21
 800ad82:	2104      	movs	r1, #4
 800ad84:	4620      	mov	r0, r4
 800ad86:	f000 fead 	bl	800bae4 <_calloc_r>
 800ad8a:	69e3      	ldr	r3, [r4, #28]
 800ad8c:	60f0      	str	r0, [r6, #12]
 800ad8e:	68db      	ldr	r3, [r3, #12]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d1e4      	bne.n	800ad5e <_Balloc+0x2e>
 800ad94:	2000      	movs	r0, #0
 800ad96:	bd70      	pop	{r4, r5, r6, pc}
 800ad98:	6802      	ldr	r2, [r0, #0]
 800ad9a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ad9e:	2300      	movs	r3, #0
 800ada0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ada4:	e7f7      	b.n	800ad96 <_Balloc+0x66>
 800ada6:	bf00      	nop
 800ada8:	0800cc8f 	.word	0x0800cc8f
 800adac:	0800cd6f 	.word	0x0800cd6f

0800adb0 <_Bfree>:
 800adb0:	b570      	push	{r4, r5, r6, lr}
 800adb2:	69c6      	ldr	r6, [r0, #28]
 800adb4:	4605      	mov	r5, r0
 800adb6:	460c      	mov	r4, r1
 800adb8:	b976      	cbnz	r6, 800add8 <_Bfree+0x28>
 800adba:	2010      	movs	r0, #16
 800adbc:	f7ff fef2 	bl	800aba4 <malloc>
 800adc0:	4602      	mov	r2, r0
 800adc2:	61e8      	str	r0, [r5, #28]
 800adc4:	b920      	cbnz	r0, 800add0 <_Bfree+0x20>
 800adc6:	218f      	movs	r1, #143	; 0x8f
 800adc8:	4b08      	ldr	r3, [pc, #32]	; (800adec <_Bfree+0x3c>)
 800adca:	4809      	ldr	r0, [pc, #36]	; (800adf0 <_Bfree+0x40>)
 800adcc:	f000 fe6c 	bl	800baa8 <__assert_func>
 800add0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800add4:	6006      	str	r6, [r0, #0]
 800add6:	60c6      	str	r6, [r0, #12]
 800add8:	b13c      	cbz	r4, 800adea <_Bfree+0x3a>
 800adda:	69eb      	ldr	r3, [r5, #28]
 800addc:	6862      	ldr	r2, [r4, #4]
 800adde:	68db      	ldr	r3, [r3, #12]
 800ade0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ade4:	6021      	str	r1, [r4, #0]
 800ade6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800adea:	bd70      	pop	{r4, r5, r6, pc}
 800adec:	0800cc8f 	.word	0x0800cc8f
 800adf0:	0800cd6f 	.word	0x0800cd6f

0800adf4 <__multadd>:
 800adf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800adf8:	4607      	mov	r7, r0
 800adfa:	460c      	mov	r4, r1
 800adfc:	461e      	mov	r6, r3
 800adfe:	2000      	movs	r0, #0
 800ae00:	690d      	ldr	r5, [r1, #16]
 800ae02:	f101 0c14 	add.w	ip, r1, #20
 800ae06:	f8dc 3000 	ldr.w	r3, [ip]
 800ae0a:	3001      	adds	r0, #1
 800ae0c:	b299      	uxth	r1, r3
 800ae0e:	fb02 6101 	mla	r1, r2, r1, r6
 800ae12:	0c1e      	lsrs	r6, r3, #16
 800ae14:	0c0b      	lsrs	r3, r1, #16
 800ae16:	fb02 3306 	mla	r3, r2, r6, r3
 800ae1a:	b289      	uxth	r1, r1
 800ae1c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ae20:	4285      	cmp	r5, r0
 800ae22:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ae26:	f84c 1b04 	str.w	r1, [ip], #4
 800ae2a:	dcec      	bgt.n	800ae06 <__multadd+0x12>
 800ae2c:	b30e      	cbz	r6, 800ae72 <__multadd+0x7e>
 800ae2e:	68a3      	ldr	r3, [r4, #8]
 800ae30:	42ab      	cmp	r3, r5
 800ae32:	dc19      	bgt.n	800ae68 <__multadd+0x74>
 800ae34:	6861      	ldr	r1, [r4, #4]
 800ae36:	4638      	mov	r0, r7
 800ae38:	3101      	adds	r1, #1
 800ae3a:	f7ff ff79 	bl	800ad30 <_Balloc>
 800ae3e:	4680      	mov	r8, r0
 800ae40:	b928      	cbnz	r0, 800ae4e <__multadd+0x5a>
 800ae42:	4602      	mov	r2, r0
 800ae44:	21ba      	movs	r1, #186	; 0xba
 800ae46:	4b0c      	ldr	r3, [pc, #48]	; (800ae78 <__multadd+0x84>)
 800ae48:	480c      	ldr	r0, [pc, #48]	; (800ae7c <__multadd+0x88>)
 800ae4a:	f000 fe2d 	bl	800baa8 <__assert_func>
 800ae4e:	6922      	ldr	r2, [r4, #16]
 800ae50:	f104 010c 	add.w	r1, r4, #12
 800ae54:	3202      	adds	r2, #2
 800ae56:	0092      	lsls	r2, r2, #2
 800ae58:	300c      	adds	r0, #12
 800ae5a:	f7fe fc78 	bl	800974e <memcpy>
 800ae5e:	4621      	mov	r1, r4
 800ae60:	4638      	mov	r0, r7
 800ae62:	f7ff ffa5 	bl	800adb0 <_Bfree>
 800ae66:	4644      	mov	r4, r8
 800ae68:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ae6c:	3501      	adds	r5, #1
 800ae6e:	615e      	str	r6, [r3, #20]
 800ae70:	6125      	str	r5, [r4, #16]
 800ae72:	4620      	mov	r0, r4
 800ae74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae78:	0800ccfe 	.word	0x0800ccfe
 800ae7c:	0800cd6f 	.word	0x0800cd6f

0800ae80 <__s2b>:
 800ae80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae84:	4615      	mov	r5, r2
 800ae86:	2209      	movs	r2, #9
 800ae88:	461f      	mov	r7, r3
 800ae8a:	3308      	adds	r3, #8
 800ae8c:	460c      	mov	r4, r1
 800ae8e:	fb93 f3f2 	sdiv	r3, r3, r2
 800ae92:	4606      	mov	r6, r0
 800ae94:	2201      	movs	r2, #1
 800ae96:	2100      	movs	r1, #0
 800ae98:	429a      	cmp	r2, r3
 800ae9a:	db09      	blt.n	800aeb0 <__s2b+0x30>
 800ae9c:	4630      	mov	r0, r6
 800ae9e:	f7ff ff47 	bl	800ad30 <_Balloc>
 800aea2:	b940      	cbnz	r0, 800aeb6 <__s2b+0x36>
 800aea4:	4602      	mov	r2, r0
 800aea6:	21d3      	movs	r1, #211	; 0xd3
 800aea8:	4b18      	ldr	r3, [pc, #96]	; (800af0c <__s2b+0x8c>)
 800aeaa:	4819      	ldr	r0, [pc, #100]	; (800af10 <__s2b+0x90>)
 800aeac:	f000 fdfc 	bl	800baa8 <__assert_func>
 800aeb0:	0052      	lsls	r2, r2, #1
 800aeb2:	3101      	adds	r1, #1
 800aeb4:	e7f0      	b.n	800ae98 <__s2b+0x18>
 800aeb6:	9b08      	ldr	r3, [sp, #32]
 800aeb8:	2d09      	cmp	r5, #9
 800aeba:	6143      	str	r3, [r0, #20]
 800aebc:	f04f 0301 	mov.w	r3, #1
 800aec0:	6103      	str	r3, [r0, #16]
 800aec2:	dd16      	ble.n	800aef2 <__s2b+0x72>
 800aec4:	f104 0909 	add.w	r9, r4, #9
 800aec8:	46c8      	mov	r8, r9
 800aeca:	442c      	add	r4, r5
 800aecc:	f818 3b01 	ldrb.w	r3, [r8], #1
 800aed0:	4601      	mov	r1, r0
 800aed2:	220a      	movs	r2, #10
 800aed4:	4630      	mov	r0, r6
 800aed6:	3b30      	subs	r3, #48	; 0x30
 800aed8:	f7ff ff8c 	bl	800adf4 <__multadd>
 800aedc:	45a0      	cmp	r8, r4
 800aede:	d1f5      	bne.n	800aecc <__s2b+0x4c>
 800aee0:	f1a5 0408 	sub.w	r4, r5, #8
 800aee4:	444c      	add	r4, r9
 800aee6:	1b2d      	subs	r5, r5, r4
 800aee8:	1963      	adds	r3, r4, r5
 800aeea:	42bb      	cmp	r3, r7
 800aeec:	db04      	blt.n	800aef8 <__s2b+0x78>
 800aeee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aef2:	2509      	movs	r5, #9
 800aef4:	340a      	adds	r4, #10
 800aef6:	e7f6      	b.n	800aee6 <__s2b+0x66>
 800aef8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800aefc:	4601      	mov	r1, r0
 800aefe:	220a      	movs	r2, #10
 800af00:	4630      	mov	r0, r6
 800af02:	3b30      	subs	r3, #48	; 0x30
 800af04:	f7ff ff76 	bl	800adf4 <__multadd>
 800af08:	e7ee      	b.n	800aee8 <__s2b+0x68>
 800af0a:	bf00      	nop
 800af0c:	0800ccfe 	.word	0x0800ccfe
 800af10:	0800cd6f 	.word	0x0800cd6f

0800af14 <__hi0bits>:
 800af14:	0c02      	lsrs	r2, r0, #16
 800af16:	0412      	lsls	r2, r2, #16
 800af18:	4603      	mov	r3, r0
 800af1a:	b9ca      	cbnz	r2, 800af50 <__hi0bits+0x3c>
 800af1c:	0403      	lsls	r3, r0, #16
 800af1e:	2010      	movs	r0, #16
 800af20:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800af24:	bf04      	itt	eq
 800af26:	021b      	lsleq	r3, r3, #8
 800af28:	3008      	addeq	r0, #8
 800af2a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800af2e:	bf04      	itt	eq
 800af30:	011b      	lsleq	r3, r3, #4
 800af32:	3004      	addeq	r0, #4
 800af34:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800af38:	bf04      	itt	eq
 800af3a:	009b      	lsleq	r3, r3, #2
 800af3c:	3002      	addeq	r0, #2
 800af3e:	2b00      	cmp	r3, #0
 800af40:	db05      	blt.n	800af4e <__hi0bits+0x3a>
 800af42:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800af46:	f100 0001 	add.w	r0, r0, #1
 800af4a:	bf08      	it	eq
 800af4c:	2020      	moveq	r0, #32
 800af4e:	4770      	bx	lr
 800af50:	2000      	movs	r0, #0
 800af52:	e7e5      	b.n	800af20 <__hi0bits+0xc>

0800af54 <__lo0bits>:
 800af54:	6803      	ldr	r3, [r0, #0]
 800af56:	4602      	mov	r2, r0
 800af58:	f013 0007 	ands.w	r0, r3, #7
 800af5c:	d00b      	beq.n	800af76 <__lo0bits+0x22>
 800af5e:	07d9      	lsls	r1, r3, #31
 800af60:	d421      	bmi.n	800afa6 <__lo0bits+0x52>
 800af62:	0798      	lsls	r0, r3, #30
 800af64:	bf49      	itett	mi
 800af66:	085b      	lsrmi	r3, r3, #1
 800af68:	089b      	lsrpl	r3, r3, #2
 800af6a:	2001      	movmi	r0, #1
 800af6c:	6013      	strmi	r3, [r2, #0]
 800af6e:	bf5c      	itt	pl
 800af70:	2002      	movpl	r0, #2
 800af72:	6013      	strpl	r3, [r2, #0]
 800af74:	4770      	bx	lr
 800af76:	b299      	uxth	r1, r3
 800af78:	b909      	cbnz	r1, 800af7e <__lo0bits+0x2a>
 800af7a:	2010      	movs	r0, #16
 800af7c:	0c1b      	lsrs	r3, r3, #16
 800af7e:	b2d9      	uxtb	r1, r3
 800af80:	b909      	cbnz	r1, 800af86 <__lo0bits+0x32>
 800af82:	3008      	adds	r0, #8
 800af84:	0a1b      	lsrs	r3, r3, #8
 800af86:	0719      	lsls	r1, r3, #28
 800af88:	bf04      	itt	eq
 800af8a:	091b      	lsreq	r3, r3, #4
 800af8c:	3004      	addeq	r0, #4
 800af8e:	0799      	lsls	r1, r3, #30
 800af90:	bf04      	itt	eq
 800af92:	089b      	lsreq	r3, r3, #2
 800af94:	3002      	addeq	r0, #2
 800af96:	07d9      	lsls	r1, r3, #31
 800af98:	d403      	bmi.n	800afa2 <__lo0bits+0x4e>
 800af9a:	085b      	lsrs	r3, r3, #1
 800af9c:	f100 0001 	add.w	r0, r0, #1
 800afa0:	d003      	beq.n	800afaa <__lo0bits+0x56>
 800afa2:	6013      	str	r3, [r2, #0]
 800afa4:	4770      	bx	lr
 800afa6:	2000      	movs	r0, #0
 800afa8:	4770      	bx	lr
 800afaa:	2020      	movs	r0, #32
 800afac:	4770      	bx	lr
	...

0800afb0 <__i2b>:
 800afb0:	b510      	push	{r4, lr}
 800afb2:	460c      	mov	r4, r1
 800afb4:	2101      	movs	r1, #1
 800afb6:	f7ff febb 	bl	800ad30 <_Balloc>
 800afba:	4602      	mov	r2, r0
 800afbc:	b928      	cbnz	r0, 800afca <__i2b+0x1a>
 800afbe:	f240 1145 	movw	r1, #325	; 0x145
 800afc2:	4b04      	ldr	r3, [pc, #16]	; (800afd4 <__i2b+0x24>)
 800afc4:	4804      	ldr	r0, [pc, #16]	; (800afd8 <__i2b+0x28>)
 800afc6:	f000 fd6f 	bl	800baa8 <__assert_func>
 800afca:	2301      	movs	r3, #1
 800afcc:	6144      	str	r4, [r0, #20]
 800afce:	6103      	str	r3, [r0, #16]
 800afd0:	bd10      	pop	{r4, pc}
 800afd2:	bf00      	nop
 800afd4:	0800ccfe 	.word	0x0800ccfe
 800afd8:	0800cd6f 	.word	0x0800cd6f

0800afdc <__multiply>:
 800afdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afe0:	4691      	mov	r9, r2
 800afe2:	690a      	ldr	r2, [r1, #16]
 800afe4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800afe8:	460c      	mov	r4, r1
 800afea:	429a      	cmp	r2, r3
 800afec:	bfbe      	ittt	lt
 800afee:	460b      	movlt	r3, r1
 800aff0:	464c      	movlt	r4, r9
 800aff2:	4699      	movlt	r9, r3
 800aff4:	6927      	ldr	r7, [r4, #16]
 800aff6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800affa:	68a3      	ldr	r3, [r4, #8]
 800affc:	6861      	ldr	r1, [r4, #4]
 800affe:	eb07 060a 	add.w	r6, r7, sl
 800b002:	42b3      	cmp	r3, r6
 800b004:	b085      	sub	sp, #20
 800b006:	bfb8      	it	lt
 800b008:	3101      	addlt	r1, #1
 800b00a:	f7ff fe91 	bl	800ad30 <_Balloc>
 800b00e:	b930      	cbnz	r0, 800b01e <__multiply+0x42>
 800b010:	4602      	mov	r2, r0
 800b012:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800b016:	4b43      	ldr	r3, [pc, #268]	; (800b124 <__multiply+0x148>)
 800b018:	4843      	ldr	r0, [pc, #268]	; (800b128 <__multiply+0x14c>)
 800b01a:	f000 fd45 	bl	800baa8 <__assert_func>
 800b01e:	f100 0514 	add.w	r5, r0, #20
 800b022:	462b      	mov	r3, r5
 800b024:	2200      	movs	r2, #0
 800b026:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b02a:	4543      	cmp	r3, r8
 800b02c:	d321      	bcc.n	800b072 <__multiply+0x96>
 800b02e:	f104 0314 	add.w	r3, r4, #20
 800b032:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b036:	f109 0314 	add.w	r3, r9, #20
 800b03a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b03e:	9202      	str	r2, [sp, #8]
 800b040:	1b3a      	subs	r2, r7, r4
 800b042:	3a15      	subs	r2, #21
 800b044:	f022 0203 	bic.w	r2, r2, #3
 800b048:	3204      	adds	r2, #4
 800b04a:	f104 0115 	add.w	r1, r4, #21
 800b04e:	428f      	cmp	r7, r1
 800b050:	bf38      	it	cc
 800b052:	2204      	movcc	r2, #4
 800b054:	9201      	str	r2, [sp, #4]
 800b056:	9a02      	ldr	r2, [sp, #8]
 800b058:	9303      	str	r3, [sp, #12]
 800b05a:	429a      	cmp	r2, r3
 800b05c:	d80c      	bhi.n	800b078 <__multiply+0x9c>
 800b05e:	2e00      	cmp	r6, #0
 800b060:	dd03      	ble.n	800b06a <__multiply+0x8e>
 800b062:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b066:	2b00      	cmp	r3, #0
 800b068:	d05a      	beq.n	800b120 <__multiply+0x144>
 800b06a:	6106      	str	r6, [r0, #16]
 800b06c:	b005      	add	sp, #20
 800b06e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b072:	f843 2b04 	str.w	r2, [r3], #4
 800b076:	e7d8      	b.n	800b02a <__multiply+0x4e>
 800b078:	f8b3 a000 	ldrh.w	sl, [r3]
 800b07c:	f1ba 0f00 	cmp.w	sl, #0
 800b080:	d023      	beq.n	800b0ca <__multiply+0xee>
 800b082:	46a9      	mov	r9, r5
 800b084:	f04f 0c00 	mov.w	ip, #0
 800b088:	f104 0e14 	add.w	lr, r4, #20
 800b08c:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b090:	f8d9 1000 	ldr.w	r1, [r9]
 800b094:	fa1f fb82 	uxth.w	fp, r2
 800b098:	b289      	uxth	r1, r1
 800b09a:	fb0a 110b 	mla	r1, sl, fp, r1
 800b09e:	4461      	add	r1, ip
 800b0a0:	f8d9 c000 	ldr.w	ip, [r9]
 800b0a4:	0c12      	lsrs	r2, r2, #16
 800b0a6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800b0aa:	fb0a c202 	mla	r2, sl, r2, ip
 800b0ae:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b0b2:	b289      	uxth	r1, r1
 800b0b4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b0b8:	4577      	cmp	r7, lr
 800b0ba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b0be:	f849 1b04 	str.w	r1, [r9], #4
 800b0c2:	d8e3      	bhi.n	800b08c <__multiply+0xb0>
 800b0c4:	9a01      	ldr	r2, [sp, #4]
 800b0c6:	f845 c002 	str.w	ip, [r5, r2]
 800b0ca:	9a03      	ldr	r2, [sp, #12]
 800b0cc:	3304      	adds	r3, #4
 800b0ce:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b0d2:	f1b9 0f00 	cmp.w	r9, #0
 800b0d6:	d021      	beq.n	800b11c <__multiply+0x140>
 800b0d8:	46ae      	mov	lr, r5
 800b0da:	f04f 0a00 	mov.w	sl, #0
 800b0de:	6829      	ldr	r1, [r5, #0]
 800b0e0:	f104 0c14 	add.w	ip, r4, #20
 800b0e4:	f8bc b000 	ldrh.w	fp, [ip]
 800b0e8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b0ec:	b289      	uxth	r1, r1
 800b0ee:	fb09 220b 	mla	r2, r9, fp, r2
 800b0f2:	4452      	add	r2, sl
 800b0f4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b0f8:	f84e 1b04 	str.w	r1, [lr], #4
 800b0fc:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b100:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b104:	f8be 1000 	ldrh.w	r1, [lr]
 800b108:	4567      	cmp	r7, ip
 800b10a:	fb09 110a 	mla	r1, r9, sl, r1
 800b10e:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800b112:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b116:	d8e5      	bhi.n	800b0e4 <__multiply+0x108>
 800b118:	9a01      	ldr	r2, [sp, #4]
 800b11a:	50a9      	str	r1, [r5, r2]
 800b11c:	3504      	adds	r5, #4
 800b11e:	e79a      	b.n	800b056 <__multiply+0x7a>
 800b120:	3e01      	subs	r6, #1
 800b122:	e79c      	b.n	800b05e <__multiply+0x82>
 800b124:	0800ccfe 	.word	0x0800ccfe
 800b128:	0800cd6f 	.word	0x0800cd6f

0800b12c <__pow5mult>:
 800b12c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b130:	4615      	mov	r5, r2
 800b132:	f012 0203 	ands.w	r2, r2, #3
 800b136:	4606      	mov	r6, r0
 800b138:	460f      	mov	r7, r1
 800b13a:	d007      	beq.n	800b14c <__pow5mult+0x20>
 800b13c:	4c25      	ldr	r4, [pc, #148]	; (800b1d4 <__pow5mult+0xa8>)
 800b13e:	3a01      	subs	r2, #1
 800b140:	2300      	movs	r3, #0
 800b142:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b146:	f7ff fe55 	bl	800adf4 <__multadd>
 800b14a:	4607      	mov	r7, r0
 800b14c:	10ad      	asrs	r5, r5, #2
 800b14e:	d03d      	beq.n	800b1cc <__pow5mult+0xa0>
 800b150:	69f4      	ldr	r4, [r6, #28]
 800b152:	b97c      	cbnz	r4, 800b174 <__pow5mult+0x48>
 800b154:	2010      	movs	r0, #16
 800b156:	f7ff fd25 	bl	800aba4 <malloc>
 800b15a:	4602      	mov	r2, r0
 800b15c:	61f0      	str	r0, [r6, #28]
 800b15e:	b928      	cbnz	r0, 800b16c <__pow5mult+0x40>
 800b160:	f240 11b3 	movw	r1, #435	; 0x1b3
 800b164:	4b1c      	ldr	r3, [pc, #112]	; (800b1d8 <__pow5mult+0xac>)
 800b166:	481d      	ldr	r0, [pc, #116]	; (800b1dc <__pow5mult+0xb0>)
 800b168:	f000 fc9e 	bl	800baa8 <__assert_func>
 800b16c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b170:	6004      	str	r4, [r0, #0]
 800b172:	60c4      	str	r4, [r0, #12]
 800b174:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800b178:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b17c:	b94c      	cbnz	r4, 800b192 <__pow5mult+0x66>
 800b17e:	f240 2171 	movw	r1, #625	; 0x271
 800b182:	4630      	mov	r0, r6
 800b184:	f7ff ff14 	bl	800afb0 <__i2b>
 800b188:	2300      	movs	r3, #0
 800b18a:	4604      	mov	r4, r0
 800b18c:	f8c8 0008 	str.w	r0, [r8, #8]
 800b190:	6003      	str	r3, [r0, #0]
 800b192:	f04f 0900 	mov.w	r9, #0
 800b196:	07eb      	lsls	r3, r5, #31
 800b198:	d50a      	bpl.n	800b1b0 <__pow5mult+0x84>
 800b19a:	4639      	mov	r1, r7
 800b19c:	4622      	mov	r2, r4
 800b19e:	4630      	mov	r0, r6
 800b1a0:	f7ff ff1c 	bl	800afdc <__multiply>
 800b1a4:	4680      	mov	r8, r0
 800b1a6:	4639      	mov	r1, r7
 800b1a8:	4630      	mov	r0, r6
 800b1aa:	f7ff fe01 	bl	800adb0 <_Bfree>
 800b1ae:	4647      	mov	r7, r8
 800b1b0:	106d      	asrs	r5, r5, #1
 800b1b2:	d00b      	beq.n	800b1cc <__pow5mult+0xa0>
 800b1b4:	6820      	ldr	r0, [r4, #0]
 800b1b6:	b938      	cbnz	r0, 800b1c8 <__pow5mult+0x9c>
 800b1b8:	4622      	mov	r2, r4
 800b1ba:	4621      	mov	r1, r4
 800b1bc:	4630      	mov	r0, r6
 800b1be:	f7ff ff0d 	bl	800afdc <__multiply>
 800b1c2:	6020      	str	r0, [r4, #0]
 800b1c4:	f8c0 9000 	str.w	r9, [r0]
 800b1c8:	4604      	mov	r4, r0
 800b1ca:	e7e4      	b.n	800b196 <__pow5mult+0x6a>
 800b1cc:	4638      	mov	r0, r7
 800b1ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b1d2:	bf00      	nop
 800b1d4:	0800ceb8 	.word	0x0800ceb8
 800b1d8:	0800cc8f 	.word	0x0800cc8f
 800b1dc:	0800cd6f 	.word	0x0800cd6f

0800b1e0 <__lshift>:
 800b1e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b1e4:	460c      	mov	r4, r1
 800b1e6:	4607      	mov	r7, r0
 800b1e8:	4691      	mov	r9, r2
 800b1ea:	6923      	ldr	r3, [r4, #16]
 800b1ec:	6849      	ldr	r1, [r1, #4]
 800b1ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b1f2:	68a3      	ldr	r3, [r4, #8]
 800b1f4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b1f8:	f108 0601 	add.w	r6, r8, #1
 800b1fc:	42b3      	cmp	r3, r6
 800b1fe:	db0b      	blt.n	800b218 <__lshift+0x38>
 800b200:	4638      	mov	r0, r7
 800b202:	f7ff fd95 	bl	800ad30 <_Balloc>
 800b206:	4605      	mov	r5, r0
 800b208:	b948      	cbnz	r0, 800b21e <__lshift+0x3e>
 800b20a:	4602      	mov	r2, r0
 800b20c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800b210:	4b27      	ldr	r3, [pc, #156]	; (800b2b0 <__lshift+0xd0>)
 800b212:	4828      	ldr	r0, [pc, #160]	; (800b2b4 <__lshift+0xd4>)
 800b214:	f000 fc48 	bl	800baa8 <__assert_func>
 800b218:	3101      	adds	r1, #1
 800b21a:	005b      	lsls	r3, r3, #1
 800b21c:	e7ee      	b.n	800b1fc <__lshift+0x1c>
 800b21e:	2300      	movs	r3, #0
 800b220:	f100 0114 	add.w	r1, r0, #20
 800b224:	f100 0210 	add.w	r2, r0, #16
 800b228:	4618      	mov	r0, r3
 800b22a:	4553      	cmp	r3, sl
 800b22c:	db33      	blt.n	800b296 <__lshift+0xb6>
 800b22e:	6920      	ldr	r0, [r4, #16]
 800b230:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b234:	f104 0314 	add.w	r3, r4, #20
 800b238:	f019 091f 	ands.w	r9, r9, #31
 800b23c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b240:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b244:	d02b      	beq.n	800b29e <__lshift+0xbe>
 800b246:	468a      	mov	sl, r1
 800b248:	2200      	movs	r2, #0
 800b24a:	f1c9 0e20 	rsb	lr, r9, #32
 800b24e:	6818      	ldr	r0, [r3, #0]
 800b250:	fa00 f009 	lsl.w	r0, r0, r9
 800b254:	4310      	orrs	r0, r2
 800b256:	f84a 0b04 	str.w	r0, [sl], #4
 800b25a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b25e:	459c      	cmp	ip, r3
 800b260:	fa22 f20e 	lsr.w	r2, r2, lr
 800b264:	d8f3      	bhi.n	800b24e <__lshift+0x6e>
 800b266:	ebac 0304 	sub.w	r3, ip, r4
 800b26a:	3b15      	subs	r3, #21
 800b26c:	f023 0303 	bic.w	r3, r3, #3
 800b270:	3304      	adds	r3, #4
 800b272:	f104 0015 	add.w	r0, r4, #21
 800b276:	4584      	cmp	ip, r0
 800b278:	bf38      	it	cc
 800b27a:	2304      	movcc	r3, #4
 800b27c:	50ca      	str	r2, [r1, r3]
 800b27e:	b10a      	cbz	r2, 800b284 <__lshift+0xa4>
 800b280:	f108 0602 	add.w	r6, r8, #2
 800b284:	3e01      	subs	r6, #1
 800b286:	4638      	mov	r0, r7
 800b288:	4621      	mov	r1, r4
 800b28a:	612e      	str	r6, [r5, #16]
 800b28c:	f7ff fd90 	bl	800adb0 <_Bfree>
 800b290:	4628      	mov	r0, r5
 800b292:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b296:	f842 0f04 	str.w	r0, [r2, #4]!
 800b29a:	3301      	adds	r3, #1
 800b29c:	e7c5      	b.n	800b22a <__lshift+0x4a>
 800b29e:	3904      	subs	r1, #4
 800b2a0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b2a4:	459c      	cmp	ip, r3
 800b2a6:	f841 2f04 	str.w	r2, [r1, #4]!
 800b2aa:	d8f9      	bhi.n	800b2a0 <__lshift+0xc0>
 800b2ac:	e7ea      	b.n	800b284 <__lshift+0xa4>
 800b2ae:	bf00      	nop
 800b2b0:	0800ccfe 	.word	0x0800ccfe
 800b2b4:	0800cd6f 	.word	0x0800cd6f

0800b2b8 <__mcmp>:
 800b2b8:	4603      	mov	r3, r0
 800b2ba:	690a      	ldr	r2, [r1, #16]
 800b2bc:	6900      	ldr	r0, [r0, #16]
 800b2be:	b530      	push	{r4, r5, lr}
 800b2c0:	1a80      	subs	r0, r0, r2
 800b2c2:	d10d      	bne.n	800b2e0 <__mcmp+0x28>
 800b2c4:	3314      	adds	r3, #20
 800b2c6:	3114      	adds	r1, #20
 800b2c8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b2cc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b2d0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b2d4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b2d8:	4295      	cmp	r5, r2
 800b2da:	d002      	beq.n	800b2e2 <__mcmp+0x2a>
 800b2dc:	d304      	bcc.n	800b2e8 <__mcmp+0x30>
 800b2de:	2001      	movs	r0, #1
 800b2e0:	bd30      	pop	{r4, r5, pc}
 800b2e2:	42a3      	cmp	r3, r4
 800b2e4:	d3f4      	bcc.n	800b2d0 <__mcmp+0x18>
 800b2e6:	e7fb      	b.n	800b2e0 <__mcmp+0x28>
 800b2e8:	f04f 30ff 	mov.w	r0, #4294967295
 800b2ec:	e7f8      	b.n	800b2e0 <__mcmp+0x28>
	...

0800b2f0 <__mdiff>:
 800b2f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2f4:	460d      	mov	r5, r1
 800b2f6:	4607      	mov	r7, r0
 800b2f8:	4611      	mov	r1, r2
 800b2fa:	4628      	mov	r0, r5
 800b2fc:	4614      	mov	r4, r2
 800b2fe:	f7ff ffdb 	bl	800b2b8 <__mcmp>
 800b302:	1e06      	subs	r6, r0, #0
 800b304:	d111      	bne.n	800b32a <__mdiff+0x3a>
 800b306:	4631      	mov	r1, r6
 800b308:	4638      	mov	r0, r7
 800b30a:	f7ff fd11 	bl	800ad30 <_Balloc>
 800b30e:	4602      	mov	r2, r0
 800b310:	b928      	cbnz	r0, 800b31e <__mdiff+0x2e>
 800b312:	f240 2137 	movw	r1, #567	; 0x237
 800b316:	4b3a      	ldr	r3, [pc, #232]	; (800b400 <__mdiff+0x110>)
 800b318:	483a      	ldr	r0, [pc, #232]	; (800b404 <__mdiff+0x114>)
 800b31a:	f000 fbc5 	bl	800baa8 <__assert_func>
 800b31e:	2301      	movs	r3, #1
 800b320:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800b324:	4610      	mov	r0, r2
 800b326:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b32a:	bfa4      	itt	ge
 800b32c:	4623      	movge	r3, r4
 800b32e:	462c      	movge	r4, r5
 800b330:	4638      	mov	r0, r7
 800b332:	6861      	ldr	r1, [r4, #4]
 800b334:	bfa6      	itte	ge
 800b336:	461d      	movge	r5, r3
 800b338:	2600      	movge	r6, #0
 800b33a:	2601      	movlt	r6, #1
 800b33c:	f7ff fcf8 	bl	800ad30 <_Balloc>
 800b340:	4602      	mov	r2, r0
 800b342:	b918      	cbnz	r0, 800b34c <__mdiff+0x5c>
 800b344:	f240 2145 	movw	r1, #581	; 0x245
 800b348:	4b2d      	ldr	r3, [pc, #180]	; (800b400 <__mdiff+0x110>)
 800b34a:	e7e5      	b.n	800b318 <__mdiff+0x28>
 800b34c:	f102 0814 	add.w	r8, r2, #20
 800b350:	46c2      	mov	sl, r8
 800b352:	f04f 0c00 	mov.w	ip, #0
 800b356:	6927      	ldr	r7, [r4, #16]
 800b358:	60c6      	str	r6, [r0, #12]
 800b35a:	692e      	ldr	r6, [r5, #16]
 800b35c:	f104 0014 	add.w	r0, r4, #20
 800b360:	f105 0914 	add.w	r9, r5, #20
 800b364:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800b368:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b36c:	3410      	adds	r4, #16
 800b36e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800b372:	f859 3b04 	ldr.w	r3, [r9], #4
 800b376:	fa1f f18b 	uxth.w	r1, fp
 800b37a:	4461      	add	r1, ip
 800b37c:	fa1f fc83 	uxth.w	ip, r3
 800b380:	0c1b      	lsrs	r3, r3, #16
 800b382:	eba1 010c 	sub.w	r1, r1, ip
 800b386:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b38a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800b38e:	b289      	uxth	r1, r1
 800b390:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800b394:	454e      	cmp	r6, r9
 800b396:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800b39a:	f84a 1b04 	str.w	r1, [sl], #4
 800b39e:	d8e6      	bhi.n	800b36e <__mdiff+0x7e>
 800b3a0:	1b73      	subs	r3, r6, r5
 800b3a2:	3b15      	subs	r3, #21
 800b3a4:	f023 0303 	bic.w	r3, r3, #3
 800b3a8:	3515      	adds	r5, #21
 800b3aa:	3304      	adds	r3, #4
 800b3ac:	42ae      	cmp	r6, r5
 800b3ae:	bf38      	it	cc
 800b3b0:	2304      	movcc	r3, #4
 800b3b2:	4418      	add	r0, r3
 800b3b4:	4443      	add	r3, r8
 800b3b6:	461e      	mov	r6, r3
 800b3b8:	4605      	mov	r5, r0
 800b3ba:	4575      	cmp	r5, lr
 800b3bc:	d30e      	bcc.n	800b3dc <__mdiff+0xec>
 800b3be:	f10e 0103 	add.w	r1, lr, #3
 800b3c2:	1a09      	subs	r1, r1, r0
 800b3c4:	f021 0103 	bic.w	r1, r1, #3
 800b3c8:	3803      	subs	r0, #3
 800b3ca:	4586      	cmp	lr, r0
 800b3cc:	bf38      	it	cc
 800b3ce:	2100      	movcc	r1, #0
 800b3d0:	440b      	add	r3, r1
 800b3d2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b3d6:	b189      	cbz	r1, 800b3fc <__mdiff+0x10c>
 800b3d8:	6117      	str	r7, [r2, #16]
 800b3da:	e7a3      	b.n	800b324 <__mdiff+0x34>
 800b3dc:	f855 8b04 	ldr.w	r8, [r5], #4
 800b3e0:	fa1f f188 	uxth.w	r1, r8
 800b3e4:	4461      	add	r1, ip
 800b3e6:	140c      	asrs	r4, r1, #16
 800b3e8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b3ec:	b289      	uxth	r1, r1
 800b3ee:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b3f2:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800b3f6:	f846 1b04 	str.w	r1, [r6], #4
 800b3fa:	e7de      	b.n	800b3ba <__mdiff+0xca>
 800b3fc:	3f01      	subs	r7, #1
 800b3fe:	e7e8      	b.n	800b3d2 <__mdiff+0xe2>
 800b400:	0800ccfe 	.word	0x0800ccfe
 800b404:	0800cd6f 	.word	0x0800cd6f

0800b408 <__ulp>:
 800b408:	4b0e      	ldr	r3, [pc, #56]	; (800b444 <__ulp+0x3c>)
 800b40a:	400b      	ands	r3, r1
 800b40c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800b410:	2b00      	cmp	r3, #0
 800b412:	dc08      	bgt.n	800b426 <__ulp+0x1e>
 800b414:	425b      	negs	r3, r3
 800b416:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800b41a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b41e:	da04      	bge.n	800b42a <__ulp+0x22>
 800b420:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b424:	4113      	asrs	r3, r2
 800b426:	2200      	movs	r2, #0
 800b428:	e008      	b.n	800b43c <__ulp+0x34>
 800b42a:	f1a2 0314 	sub.w	r3, r2, #20
 800b42e:	2b1e      	cmp	r3, #30
 800b430:	bfd6      	itet	le
 800b432:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800b436:	2201      	movgt	r2, #1
 800b438:	40da      	lsrle	r2, r3
 800b43a:	2300      	movs	r3, #0
 800b43c:	4619      	mov	r1, r3
 800b43e:	4610      	mov	r0, r2
 800b440:	4770      	bx	lr
 800b442:	bf00      	nop
 800b444:	7ff00000 	.word	0x7ff00000

0800b448 <__b2d>:
 800b448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b44a:	6905      	ldr	r5, [r0, #16]
 800b44c:	f100 0714 	add.w	r7, r0, #20
 800b450:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800b454:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800b458:	1f2e      	subs	r6, r5, #4
 800b45a:	4620      	mov	r0, r4
 800b45c:	f7ff fd5a 	bl	800af14 <__hi0bits>
 800b460:	f1c0 0220 	rsb	r2, r0, #32
 800b464:	280a      	cmp	r0, #10
 800b466:	4603      	mov	r3, r0
 800b468:	f8df c068 	ldr.w	ip, [pc, #104]	; 800b4d4 <__b2d+0x8c>
 800b46c:	600a      	str	r2, [r1, #0]
 800b46e:	dc12      	bgt.n	800b496 <__b2d+0x4e>
 800b470:	f1c0 0e0b 	rsb	lr, r0, #11
 800b474:	fa24 f20e 	lsr.w	r2, r4, lr
 800b478:	42b7      	cmp	r7, r6
 800b47a:	ea42 010c 	orr.w	r1, r2, ip
 800b47e:	bf2c      	ite	cs
 800b480:	2200      	movcs	r2, #0
 800b482:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 800b486:	3315      	adds	r3, #21
 800b488:	fa04 f303 	lsl.w	r3, r4, r3
 800b48c:	fa22 f20e 	lsr.w	r2, r2, lr
 800b490:	431a      	orrs	r2, r3
 800b492:	4610      	mov	r0, r2
 800b494:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b496:	42b7      	cmp	r7, r6
 800b498:	bf2e      	itee	cs
 800b49a:	2200      	movcs	r2, #0
 800b49c:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 800b4a0:	f1a5 0608 	subcc.w	r6, r5, #8
 800b4a4:	3b0b      	subs	r3, #11
 800b4a6:	d012      	beq.n	800b4ce <__b2d+0x86>
 800b4a8:	f1c3 0520 	rsb	r5, r3, #32
 800b4ac:	fa22 f105 	lsr.w	r1, r2, r5
 800b4b0:	409c      	lsls	r4, r3
 800b4b2:	430c      	orrs	r4, r1
 800b4b4:	42be      	cmp	r6, r7
 800b4b6:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 800b4ba:	bf94      	ite	ls
 800b4bc:	2400      	movls	r4, #0
 800b4be:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800b4c2:	409a      	lsls	r2, r3
 800b4c4:	40ec      	lsrs	r4, r5
 800b4c6:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800b4ca:	4322      	orrs	r2, r4
 800b4cc:	e7e1      	b.n	800b492 <__b2d+0x4a>
 800b4ce:	ea44 010c 	orr.w	r1, r4, ip
 800b4d2:	e7de      	b.n	800b492 <__b2d+0x4a>
 800b4d4:	3ff00000 	.word	0x3ff00000

0800b4d8 <__d2b>:
 800b4d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b4da:	2101      	movs	r1, #1
 800b4dc:	4617      	mov	r7, r2
 800b4de:	461c      	mov	r4, r3
 800b4e0:	9e08      	ldr	r6, [sp, #32]
 800b4e2:	f7ff fc25 	bl	800ad30 <_Balloc>
 800b4e6:	4605      	mov	r5, r0
 800b4e8:	b930      	cbnz	r0, 800b4f8 <__d2b+0x20>
 800b4ea:	4602      	mov	r2, r0
 800b4ec:	f240 310f 	movw	r1, #783	; 0x30f
 800b4f0:	4b22      	ldr	r3, [pc, #136]	; (800b57c <__d2b+0xa4>)
 800b4f2:	4823      	ldr	r0, [pc, #140]	; (800b580 <__d2b+0xa8>)
 800b4f4:	f000 fad8 	bl	800baa8 <__assert_func>
 800b4f8:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800b4fc:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800b500:	bb24      	cbnz	r4, 800b54c <__d2b+0x74>
 800b502:	2f00      	cmp	r7, #0
 800b504:	9301      	str	r3, [sp, #4]
 800b506:	d026      	beq.n	800b556 <__d2b+0x7e>
 800b508:	4668      	mov	r0, sp
 800b50a:	9700      	str	r7, [sp, #0]
 800b50c:	f7ff fd22 	bl	800af54 <__lo0bits>
 800b510:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b514:	b1e8      	cbz	r0, 800b552 <__d2b+0x7a>
 800b516:	f1c0 0320 	rsb	r3, r0, #32
 800b51a:	fa02 f303 	lsl.w	r3, r2, r3
 800b51e:	430b      	orrs	r3, r1
 800b520:	40c2      	lsrs	r2, r0
 800b522:	616b      	str	r3, [r5, #20]
 800b524:	9201      	str	r2, [sp, #4]
 800b526:	9b01      	ldr	r3, [sp, #4]
 800b528:	2b00      	cmp	r3, #0
 800b52a:	bf14      	ite	ne
 800b52c:	2102      	movne	r1, #2
 800b52e:	2101      	moveq	r1, #1
 800b530:	61ab      	str	r3, [r5, #24]
 800b532:	6129      	str	r1, [r5, #16]
 800b534:	b1bc      	cbz	r4, 800b566 <__d2b+0x8e>
 800b536:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800b53a:	4404      	add	r4, r0
 800b53c:	6034      	str	r4, [r6, #0]
 800b53e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b542:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b544:	6018      	str	r0, [r3, #0]
 800b546:	4628      	mov	r0, r5
 800b548:	b003      	add	sp, #12
 800b54a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b54c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b550:	e7d7      	b.n	800b502 <__d2b+0x2a>
 800b552:	6169      	str	r1, [r5, #20]
 800b554:	e7e7      	b.n	800b526 <__d2b+0x4e>
 800b556:	a801      	add	r0, sp, #4
 800b558:	f7ff fcfc 	bl	800af54 <__lo0bits>
 800b55c:	9b01      	ldr	r3, [sp, #4]
 800b55e:	2101      	movs	r1, #1
 800b560:	616b      	str	r3, [r5, #20]
 800b562:	3020      	adds	r0, #32
 800b564:	e7e5      	b.n	800b532 <__d2b+0x5a>
 800b566:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b56a:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800b56e:	6030      	str	r0, [r6, #0]
 800b570:	6918      	ldr	r0, [r3, #16]
 800b572:	f7ff fccf 	bl	800af14 <__hi0bits>
 800b576:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800b57a:	e7e2      	b.n	800b542 <__d2b+0x6a>
 800b57c:	0800ccfe 	.word	0x0800ccfe
 800b580:	0800cd6f 	.word	0x0800cd6f

0800b584 <__ratio>:
 800b584:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b588:	4688      	mov	r8, r1
 800b58a:	4669      	mov	r1, sp
 800b58c:	4681      	mov	r9, r0
 800b58e:	f7ff ff5b 	bl	800b448 <__b2d>
 800b592:	460f      	mov	r7, r1
 800b594:	4604      	mov	r4, r0
 800b596:	460d      	mov	r5, r1
 800b598:	4640      	mov	r0, r8
 800b59a:	a901      	add	r1, sp, #4
 800b59c:	f7ff ff54 	bl	800b448 <__b2d>
 800b5a0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b5a4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b5a8:	468b      	mov	fp, r1
 800b5aa:	eba3 0c02 	sub.w	ip, r3, r2
 800b5ae:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b5b2:	1a9b      	subs	r3, r3, r2
 800b5b4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	bfd5      	itete	le
 800b5bc:	460a      	movle	r2, r1
 800b5be:	462a      	movgt	r2, r5
 800b5c0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b5c4:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b5c8:	bfd8      	it	le
 800b5ca:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b5ce:	465b      	mov	r3, fp
 800b5d0:	4602      	mov	r2, r0
 800b5d2:	4639      	mov	r1, r7
 800b5d4:	4620      	mov	r0, r4
 800b5d6:	f7f5 f8b3 	bl	8000740 <__aeabi_ddiv>
 800b5da:	b003      	add	sp, #12
 800b5dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b5e0 <__copybits>:
 800b5e0:	3901      	subs	r1, #1
 800b5e2:	b570      	push	{r4, r5, r6, lr}
 800b5e4:	1149      	asrs	r1, r1, #5
 800b5e6:	6914      	ldr	r4, [r2, #16]
 800b5e8:	3101      	adds	r1, #1
 800b5ea:	f102 0314 	add.w	r3, r2, #20
 800b5ee:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b5f2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b5f6:	1f05      	subs	r5, r0, #4
 800b5f8:	42a3      	cmp	r3, r4
 800b5fa:	d30c      	bcc.n	800b616 <__copybits+0x36>
 800b5fc:	1aa3      	subs	r3, r4, r2
 800b5fe:	3b11      	subs	r3, #17
 800b600:	f023 0303 	bic.w	r3, r3, #3
 800b604:	3211      	adds	r2, #17
 800b606:	42a2      	cmp	r2, r4
 800b608:	bf88      	it	hi
 800b60a:	2300      	movhi	r3, #0
 800b60c:	4418      	add	r0, r3
 800b60e:	2300      	movs	r3, #0
 800b610:	4288      	cmp	r0, r1
 800b612:	d305      	bcc.n	800b620 <__copybits+0x40>
 800b614:	bd70      	pop	{r4, r5, r6, pc}
 800b616:	f853 6b04 	ldr.w	r6, [r3], #4
 800b61a:	f845 6f04 	str.w	r6, [r5, #4]!
 800b61e:	e7eb      	b.n	800b5f8 <__copybits+0x18>
 800b620:	f840 3b04 	str.w	r3, [r0], #4
 800b624:	e7f4      	b.n	800b610 <__copybits+0x30>

0800b626 <__any_on>:
 800b626:	f100 0214 	add.w	r2, r0, #20
 800b62a:	6900      	ldr	r0, [r0, #16]
 800b62c:	114b      	asrs	r3, r1, #5
 800b62e:	4298      	cmp	r0, r3
 800b630:	b510      	push	{r4, lr}
 800b632:	db11      	blt.n	800b658 <__any_on+0x32>
 800b634:	dd0a      	ble.n	800b64c <__any_on+0x26>
 800b636:	f011 011f 	ands.w	r1, r1, #31
 800b63a:	d007      	beq.n	800b64c <__any_on+0x26>
 800b63c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b640:	fa24 f001 	lsr.w	r0, r4, r1
 800b644:	fa00 f101 	lsl.w	r1, r0, r1
 800b648:	428c      	cmp	r4, r1
 800b64a:	d10b      	bne.n	800b664 <__any_on+0x3e>
 800b64c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b650:	4293      	cmp	r3, r2
 800b652:	d803      	bhi.n	800b65c <__any_on+0x36>
 800b654:	2000      	movs	r0, #0
 800b656:	bd10      	pop	{r4, pc}
 800b658:	4603      	mov	r3, r0
 800b65a:	e7f7      	b.n	800b64c <__any_on+0x26>
 800b65c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b660:	2900      	cmp	r1, #0
 800b662:	d0f5      	beq.n	800b650 <__any_on+0x2a>
 800b664:	2001      	movs	r0, #1
 800b666:	e7f6      	b.n	800b656 <__any_on+0x30>

0800b668 <__ascii_wctomb>:
 800b668:	4603      	mov	r3, r0
 800b66a:	4608      	mov	r0, r1
 800b66c:	b141      	cbz	r1, 800b680 <__ascii_wctomb+0x18>
 800b66e:	2aff      	cmp	r2, #255	; 0xff
 800b670:	d904      	bls.n	800b67c <__ascii_wctomb+0x14>
 800b672:	228a      	movs	r2, #138	; 0x8a
 800b674:	f04f 30ff 	mov.w	r0, #4294967295
 800b678:	601a      	str	r2, [r3, #0]
 800b67a:	4770      	bx	lr
 800b67c:	2001      	movs	r0, #1
 800b67e:	700a      	strb	r2, [r1, #0]
 800b680:	4770      	bx	lr

0800b682 <__ssputs_r>:
 800b682:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b686:	461f      	mov	r7, r3
 800b688:	688e      	ldr	r6, [r1, #8]
 800b68a:	4682      	mov	sl, r0
 800b68c:	42be      	cmp	r6, r7
 800b68e:	460c      	mov	r4, r1
 800b690:	4690      	mov	r8, r2
 800b692:	680b      	ldr	r3, [r1, #0]
 800b694:	d82c      	bhi.n	800b6f0 <__ssputs_r+0x6e>
 800b696:	898a      	ldrh	r2, [r1, #12]
 800b698:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b69c:	d026      	beq.n	800b6ec <__ssputs_r+0x6a>
 800b69e:	6965      	ldr	r5, [r4, #20]
 800b6a0:	6909      	ldr	r1, [r1, #16]
 800b6a2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b6a6:	eba3 0901 	sub.w	r9, r3, r1
 800b6aa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b6ae:	1c7b      	adds	r3, r7, #1
 800b6b0:	444b      	add	r3, r9
 800b6b2:	106d      	asrs	r5, r5, #1
 800b6b4:	429d      	cmp	r5, r3
 800b6b6:	bf38      	it	cc
 800b6b8:	461d      	movcc	r5, r3
 800b6ba:	0553      	lsls	r3, r2, #21
 800b6bc:	d527      	bpl.n	800b70e <__ssputs_r+0x8c>
 800b6be:	4629      	mov	r1, r5
 800b6c0:	f7ff fa98 	bl	800abf4 <_malloc_r>
 800b6c4:	4606      	mov	r6, r0
 800b6c6:	b360      	cbz	r0, 800b722 <__ssputs_r+0xa0>
 800b6c8:	464a      	mov	r2, r9
 800b6ca:	6921      	ldr	r1, [r4, #16]
 800b6cc:	f7fe f83f 	bl	800974e <memcpy>
 800b6d0:	89a3      	ldrh	r3, [r4, #12]
 800b6d2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b6d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b6da:	81a3      	strh	r3, [r4, #12]
 800b6dc:	6126      	str	r6, [r4, #16]
 800b6de:	444e      	add	r6, r9
 800b6e0:	6026      	str	r6, [r4, #0]
 800b6e2:	463e      	mov	r6, r7
 800b6e4:	6165      	str	r5, [r4, #20]
 800b6e6:	eba5 0509 	sub.w	r5, r5, r9
 800b6ea:	60a5      	str	r5, [r4, #8]
 800b6ec:	42be      	cmp	r6, r7
 800b6ee:	d900      	bls.n	800b6f2 <__ssputs_r+0x70>
 800b6f0:	463e      	mov	r6, r7
 800b6f2:	4632      	mov	r2, r6
 800b6f4:	4641      	mov	r1, r8
 800b6f6:	6820      	ldr	r0, [r4, #0]
 800b6f8:	f7fd ff57 	bl	80095aa <memmove>
 800b6fc:	2000      	movs	r0, #0
 800b6fe:	68a3      	ldr	r3, [r4, #8]
 800b700:	1b9b      	subs	r3, r3, r6
 800b702:	60a3      	str	r3, [r4, #8]
 800b704:	6823      	ldr	r3, [r4, #0]
 800b706:	4433      	add	r3, r6
 800b708:	6023      	str	r3, [r4, #0]
 800b70a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b70e:	462a      	mov	r2, r5
 800b710:	f000 f9fc 	bl	800bb0c <_realloc_r>
 800b714:	4606      	mov	r6, r0
 800b716:	2800      	cmp	r0, #0
 800b718:	d1e0      	bne.n	800b6dc <__ssputs_r+0x5a>
 800b71a:	4650      	mov	r0, sl
 800b71c:	6921      	ldr	r1, [r4, #16]
 800b71e:	f7fe fe9f 	bl	800a460 <_free_r>
 800b722:	230c      	movs	r3, #12
 800b724:	f8ca 3000 	str.w	r3, [sl]
 800b728:	89a3      	ldrh	r3, [r4, #12]
 800b72a:	f04f 30ff 	mov.w	r0, #4294967295
 800b72e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b732:	81a3      	strh	r3, [r4, #12]
 800b734:	e7e9      	b.n	800b70a <__ssputs_r+0x88>
	...

0800b738 <_svfiprintf_r>:
 800b738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b73c:	4698      	mov	r8, r3
 800b73e:	898b      	ldrh	r3, [r1, #12]
 800b740:	4607      	mov	r7, r0
 800b742:	061b      	lsls	r3, r3, #24
 800b744:	460d      	mov	r5, r1
 800b746:	4614      	mov	r4, r2
 800b748:	b09d      	sub	sp, #116	; 0x74
 800b74a:	d50e      	bpl.n	800b76a <_svfiprintf_r+0x32>
 800b74c:	690b      	ldr	r3, [r1, #16]
 800b74e:	b963      	cbnz	r3, 800b76a <_svfiprintf_r+0x32>
 800b750:	2140      	movs	r1, #64	; 0x40
 800b752:	f7ff fa4f 	bl	800abf4 <_malloc_r>
 800b756:	6028      	str	r0, [r5, #0]
 800b758:	6128      	str	r0, [r5, #16]
 800b75a:	b920      	cbnz	r0, 800b766 <_svfiprintf_r+0x2e>
 800b75c:	230c      	movs	r3, #12
 800b75e:	603b      	str	r3, [r7, #0]
 800b760:	f04f 30ff 	mov.w	r0, #4294967295
 800b764:	e0d0      	b.n	800b908 <_svfiprintf_r+0x1d0>
 800b766:	2340      	movs	r3, #64	; 0x40
 800b768:	616b      	str	r3, [r5, #20]
 800b76a:	2300      	movs	r3, #0
 800b76c:	9309      	str	r3, [sp, #36]	; 0x24
 800b76e:	2320      	movs	r3, #32
 800b770:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b774:	2330      	movs	r3, #48	; 0x30
 800b776:	f04f 0901 	mov.w	r9, #1
 800b77a:	f8cd 800c 	str.w	r8, [sp, #12]
 800b77e:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800b920 <_svfiprintf_r+0x1e8>
 800b782:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b786:	4623      	mov	r3, r4
 800b788:	469a      	mov	sl, r3
 800b78a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b78e:	b10a      	cbz	r2, 800b794 <_svfiprintf_r+0x5c>
 800b790:	2a25      	cmp	r2, #37	; 0x25
 800b792:	d1f9      	bne.n	800b788 <_svfiprintf_r+0x50>
 800b794:	ebba 0b04 	subs.w	fp, sl, r4
 800b798:	d00b      	beq.n	800b7b2 <_svfiprintf_r+0x7a>
 800b79a:	465b      	mov	r3, fp
 800b79c:	4622      	mov	r2, r4
 800b79e:	4629      	mov	r1, r5
 800b7a0:	4638      	mov	r0, r7
 800b7a2:	f7ff ff6e 	bl	800b682 <__ssputs_r>
 800b7a6:	3001      	adds	r0, #1
 800b7a8:	f000 80a9 	beq.w	800b8fe <_svfiprintf_r+0x1c6>
 800b7ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b7ae:	445a      	add	r2, fp
 800b7b0:	9209      	str	r2, [sp, #36]	; 0x24
 800b7b2:	f89a 3000 	ldrb.w	r3, [sl]
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	f000 80a1 	beq.w	800b8fe <_svfiprintf_r+0x1c6>
 800b7bc:	2300      	movs	r3, #0
 800b7be:	f04f 32ff 	mov.w	r2, #4294967295
 800b7c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b7c6:	f10a 0a01 	add.w	sl, sl, #1
 800b7ca:	9304      	str	r3, [sp, #16]
 800b7cc:	9307      	str	r3, [sp, #28]
 800b7ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b7d2:	931a      	str	r3, [sp, #104]	; 0x68
 800b7d4:	4654      	mov	r4, sl
 800b7d6:	2205      	movs	r2, #5
 800b7d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7dc:	4850      	ldr	r0, [pc, #320]	; (800b920 <_svfiprintf_r+0x1e8>)
 800b7de:	f7fd ffa8 	bl	8009732 <memchr>
 800b7e2:	9a04      	ldr	r2, [sp, #16]
 800b7e4:	b9d8      	cbnz	r0, 800b81e <_svfiprintf_r+0xe6>
 800b7e6:	06d0      	lsls	r0, r2, #27
 800b7e8:	bf44      	itt	mi
 800b7ea:	2320      	movmi	r3, #32
 800b7ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b7f0:	0711      	lsls	r1, r2, #28
 800b7f2:	bf44      	itt	mi
 800b7f4:	232b      	movmi	r3, #43	; 0x2b
 800b7f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b7fa:	f89a 3000 	ldrb.w	r3, [sl]
 800b7fe:	2b2a      	cmp	r3, #42	; 0x2a
 800b800:	d015      	beq.n	800b82e <_svfiprintf_r+0xf6>
 800b802:	4654      	mov	r4, sl
 800b804:	2000      	movs	r0, #0
 800b806:	f04f 0c0a 	mov.w	ip, #10
 800b80a:	9a07      	ldr	r2, [sp, #28]
 800b80c:	4621      	mov	r1, r4
 800b80e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b812:	3b30      	subs	r3, #48	; 0x30
 800b814:	2b09      	cmp	r3, #9
 800b816:	d94d      	bls.n	800b8b4 <_svfiprintf_r+0x17c>
 800b818:	b1b0      	cbz	r0, 800b848 <_svfiprintf_r+0x110>
 800b81a:	9207      	str	r2, [sp, #28]
 800b81c:	e014      	b.n	800b848 <_svfiprintf_r+0x110>
 800b81e:	eba0 0308 	sub.w	r3, r0, r8
 800b822:	fa09 f303 	lsl.w	r3, r9, r3
 800b826:	4313      	orrs	r3, r2
 800b828:	46a2      	mov	sl, r4
 800b82a:	9304      	str	r3, [sp, #16]
 800b82c:	e7d2      	b.n	800b7d4 <_svfiprintf_r+0x9c>
 800b82e:	9b03      	ldr	r3, [sp, #12]
 800b830:	1d19      	adds	r1, r3, #4
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	9103      	str	r1, [sp, #12]
 800b836:	2b00      	cmp	r3, #0
 800b838:	bfbb      	ittet	lt
 800b83a:	425b      	neglt	r3, r3
 800b83c:	f042 0202 	orrlt.w	r2, r2, #2
 800b840:	9307      	strge	r3, [sp, #28]
 800b842:	9307      	strlt	r3, [sp, #28]
 800b844:	bfb8      	it	lt
 800b846:	9204      	strlt	r2, [sp, #16]
 800b848:	7823      	ldrb	r3, [r4, #0]
 800b84a:	2b2e      	cmp	r3, #46	; 0x2e
 800b84c:	d10c      	bne.n	800b868 <_svfiprintf_r+0x130>
 800b84e:	7863      	ldrb	r3, [r4, #1]
 800b850:	2b2a      	cmp	r3, #42	; 0x2a
 800b852:	d134      	bne.n	800b8be <_svfiprintf_r+0x186>
 800b854:	9b03      	ldr	r3, [sp, #12]
 800b856:	3402      	adds	r4, #2
 800b858:	1d1a      	adds	r2, r3, #4
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	9203      	str	r2, [sp, #12]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	bfb8      	it	lt
 800b862:	f04f 33ff 	movlt.w	r3, #4294967295
 800b866:	9305      	str	r3, [sp, #20]
 800b868:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800b924 <_svfiprintf_r+0x1ec>
 800b86c:	2203      	movs	r2, #3
 800b86e:	4650      	mov	r0, sl
 800b870:	7821      	ldrb	r1, [r4, #0]
 800b872:	f7fd ff5e 	bl	8009732 <memchr>
 800b876:	b138      	cbz	r0, 800b888 <_svfiprintf_r+0x150>
 800b878:	2240      	movs	r2, #64	; 0x40
 800b87a:	9b04      	ldr	r3, [sp, #16]
 800b87c:	eba0 000a 	sub.w	r0, r0, sl
 800b880:	4082      	lsls	r2, r0
 800b882:	4313      	orrs	r3, r2
 800b884:	3401      	adds	r4, #1
 800b886:	9304      	str	r3, [sp, #16]
 800b888:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b88c:	2206      	movs	r2, #6
 800b88e:	4826      	ldr	r0, [pc, #152]	; (800b928 <_svfiprintf_r+0x1f0>)
 800b890:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b894:	f7fd ff4d 	bl	8009732 <memchr>
 800b898:	2800      	cmp	r0, #0
 800b89a:	d038      	beq.n	800b90e <_svfiprintf_r+0x1d6>
 800b89c:	4b23      	ldr	r3, [pc, #140]	; (800b92c <_svfiprintf_r+0x1f4>)
 800b89e:	bb1b      	cbnz	r3, 800b8e8 <_svfiprintf_r+0x1b0>
 800b8a0:	9b03      	ldr	r3, [sp, #12]
 800b8a2:	3307      	adds	r3, #7
 800b8a4:	f023 0307 	bic.w	r3, r3, #7
 800b8a8:	3308      	adds	r3, #8
 800b8aa:	9303      	str	r3, [sp, #12]
 800b8ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8ae:	4433      	add	r3, r6
 800b8b0:	9309      	str	r3, [sp, #36]	; 0x24
 800b8b2:	e768      	b.n	800b786 <_svfiprintf_r+0x4e>
 800b8b4:	460c      	mov	r4, r1
 800b8b6:	2001      	movs	r0, #1
 800b8b8:	fb0c 3202 	mla	r2, ip, r2, r3
 800b8bc:	e7a6      	b.n	800b80c <_svfiprintf_r+0xd4>
 800b8be:	2300      	movs	r3, #0
 800b8c0:	f04f 0c0a 	mov.w	ip, #10
 800b8c4:	4619      	mov	r1, r3
 800b8c6:	3401      	adds	r4, #1
 800b8c8:	9305      	str	r3, [sp, #20]
 800b8ca:	4620      	mov	r0, r4
 800b8cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b8d0:	3a30      	subs	r2, #48	; 0x30
 800b8d2:	2a09      	cmp	r2, #9
 800b8d4:	d903      	bls.n	800b8de <_svfiprintf_r+0x1a6>
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d0c6      	beq.n	800b868 <_svfiprintf_r+0x130>
 800b8da:	9105      	str	r1, [sp, #20]
 800b8dc:	e7c4      	b.n	800b868 <_svfiprintf_r+0x130>
 800b8de:	4604      	mov	r4, r0
 800b8e0:	2301      	movs	r3, #1
 800b8e2:	fb0c 2101 	mla	r1, ip, r1, r2
 800b8e6:	e7f0      	b.n	800b8ca <_svfiprintf_r+0x192>
 800b8e8:	ab03      	add	r3, sp, #12
 800b8ea:	9300      	str	r3, [sp, #0]
 800b8ec:	462a      	mov	r2, r5
 800b8ee:	4638      	mov	r0, r7
 800b8f0:	4b0f      	ldr	r3, [pc, #60]	; (800b930 <_svfiprintf_r+0x1f8>)
 800b8f2:	a904      	add	r1, sp, #16
 800b8f4:	f7fc ff64 	bl	80087c0 <_printf_float>
 800b8f8:	1c42      	adds	r2, r0, #1
 800b8fa:	4606      	mov	r6, r0
 800b8fc:	d1d6      	bne.n	800b8ac <_svfiprintf_r+0x174>
 800b8fe:	89ab      	ldrh	r3, [r5, #12]
 800b900:	065b      	lsls	r3, r3, #25
 800b902:	f53f af2d 	bmi.w	800b760 <_svfiprintf_r+0x28>
 800b906:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b908:	b01d      	add	sp, #116	; 0x74
 800b90a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b90e:	ab03      	add	r3, sp, #12
 800b910:	9300      	str	r3, [sp, #0]
 800b912:	462a      	mov	r2, r5
 800b914:	4638      	mov	r0, r7
 800b916:	4b06      	ldr	r3, [pc, #24]	; (800b930 <_svfiprintf_r+0x1f8>)
 800b918:	a904      	add	r1, sp, #16
 800b91a:	f7fd f9f1 	bl	8008d00 <_printf_i>
 800b91e:	e7eb      	b.n	800b8f8 <_svfiprintf_r+0x1c0>
 800b920:	0800cec4 	.word	0x0800cec4
 800b924:	0800ceca 	.word	0x0800ceca
 800b928:	0800cece 	.word	0x0800cece
 800b92c:	080087c1 	.word	0x080087c1
 800b930:	0800b683 	.word	0x0800b683

0800b934 <__sflush_r>:
 800b934:	898a      	ldrh	r2, [r1, #12]
 800b936:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b938:	4605      	mov	r5, r0
 800b93a:	0710      	lsls	r0, r2, #28
 800b93c:	460c      	mov	r4, r1
 800b93e:	d457      	bmi.n	800b9f0 <__sflush_r+0xbc>
 800b940:	684b      	ldr	r3, [r1, #4]
 800b942:	2b00      	cmp	r3, #0
 800b944:	dc04      	bgt.n	800b950 <__sflush_r+0x1c>
 800b946:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b948:	2b00      	cmp	r3, #0
 800b94a:	dc01      	bgt.n	800b950 <__sflush_r+0x1c>
 800b94c:	2000      	movs	r0, #0
 800b94e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b950:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b952:	2e00      	cmp	r6, #0
 800b954:	d0fa      	beq.n	800b94c <__sflush_r+0x18>
 800b956:	2300      	movs	r3, #0
 800b958:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b95c:	682f      	ldr	r7, [r5, #0]
 800b95e:	6a21      	ldr	r1, [r4, #32]
 800b960:	602b      	str	r3, [r5, #0]
 800b962:	d032      	beq.n	800b9ca <__sflush_r+0x96>
 800b964:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b966:	89a3      	ldrh	r3, [r4, #12]
 800b968:	075a      	lsls	r2, r3, #29
 800b96a:	d505      	bpl.n	800b978 <__sflush_r+0x44>
 800b96c:	6863      	ldr	r3, [r4, #4]
 800b96e:	1ac0      	subs	r0, r0, r3
 800b970:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b972:	b10b      	cbz	r3, 800b978 <__sflush_r+0x44>
 800b974:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b976:	1ac0      	subs	r0, r0, r3
 800b978:	2300      	movs	r3, #0
 800b97a:	4602      	mov	r2, r0
 800b97c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b97e:	4628      	mov	r0, r5
 800b980:	6a21      	ldr	r1, [r4, #32]
 800b982:	47b0      	blx	r6
 800b984:	1c43      	adds	r3, r0, #1
 800b986:	89a3      	ldrh	r3, [r4, #12]
 800b988:	d106      	bne.n	800b998 <__sflush_r+0x64>
 800b98a:	6829      	ldr	r1, [r5, #0]
 800b98c:	291d      	cmp	r1, #29
 800b98e:	d82b      	bhi.n	800b9e8 <__sflush_r+0xb4>
 800b990:	4a28      	ldr	r2, [pc, #160]	; (800ba34 <__sflush_r+0x100>)
 800b992:	410a      	asrs	r2, r1
 800b994:	07d6      	lsls	r6, r2, #31
 800b996:	d427      	bmi.n	800b9e8 <__sflush_r+0xb4>
 800b998:	2200      	movs	r2, #0
 800b99a:	6062      	str	r2, [r4, #4]
 800b99c:	6922      	ldr	r2, [r4, #16]
 800b99e:	04d9      	lsls	r1, r3, #19
 800b9a0:	6022      	str	r2, [r4, #0]
 800b9a2:	d504      	bpl.n	800b9ae <__sflush_r+0x7a>
 800b9a4:	1c42      	adds	r2, r0, #1
 800b9a6:	d101      	bne.n	800b9ac <__sflush_r+0x78>
 800b9a8:	682b      	ldr	r3, [r5, #0]
 800b9aa:	b903      	cbnz	r3, 800b9ae <__sflush_r+0x7a>
 800b9ac:	6560      	str	r0, [r4, #84]	; 0x54
 800b9ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b9b0:	602f      	str	r7, [r5, #0]
 800b9b2:	2900      	cmp	r1, #0
 800b9b4:	d0ca      	beq.n	800b94c <__sflush_r+0x18>
 800b9b6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b9ba:	4299      	cmp	r1, r3
 800b9bc:	d002      	beq.n	800b9c4 <__sflush_r+0x90>
 800b9be:	4628      	mov	r0, r5
 800b9c0:	f7fe fd4e 	bl	800a460 <_free_r>
 800b9c4:	2000      	movs	r0, #0
 800b9c6:	6360      	str	r0, [r4, #52]	; 0x34
 800b9c8:	e7c1      	b.n	800b94e <__sflush_r+0x1a>
 800b9ca:	2301      	movs	r3, #1
 800b9cc:	4628      	mov	r0, r5
 800b9ce:	47b0      	blx	r6
 800b9d0:	1c41      	adds	r1, r0, #1
 800b9d2:	d1c8      	bne.n	800b966 <__sflush_r+0x32>
 800b9d4:	682b      	ldr	r3, [r5, #0]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d0c5      	beq.n	800b966 <__sflush_r+0x32>
 800b9da:	2b1d      	cmp	r3, #29
 800b9dc:	d001      	beq.n	800b9e2 <__sflush_r+0xae>
 800b9de:	2b16      	cmp	r3, #22
 800b9e0:	d101      	bne.n	800b9e6 <__sflush_r+0xb2>
 800b9e2:	602f      	str	r7, [r5, #0]
 800b9e4:	e7b2      	b.n	800b94c <__sflush_r+0x18>
 800b9e6:	89a3      	ldrh	r3, [r4, #12]
 800b9e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b9ec:	81a3      	strh	r3, [r4, #12]
 800b9ee:	e7ae      	b.n	800b94e <__sflush_r+0x1a>
 800b9f0:	690f      	ldr	r7, [r1, #16]
 800b9f2:	2f00      	cmp	r7, #0
 800b9f4:	d0aa      	beq.n	800b94c <__sflush_r+0x18>
 800b9f6:	0793      	lsls	r3, r2, #30
 800b9f8:	bf18      	it	ne
 800b9fa:	2300      	movne	r3, #0
 800b9fc:	680e      	ldr	r6, [r1, #0]
 800b9fe:	bf08      	it	eq
 800ba00:	694b      	ldreq	r3, [r1, #20]
 800ba02:	1bf6      	subs	r6, r6, r7
 800ba04:	600f      	str	r7, [r1, #0]
 800ba06:	608b      	str	r3, [r1, #8]
 800ba08:	2e00      	cmp	r6, #0
 800ba0a:	dd9f      	ble.n	800b94c <__sflush_r+0x18>
 800ba0c:	4633      	mov	r3, r6
 800ba0e:	463a      	mov	r2, r7
 800ba10:	4628      	mov	r0, r5
 800ba12:	6a21      	ldr	r1, [r4, #32]
 800ba14:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800ba18:	47e0      	blx	ip
 800ba1a:	2800      	cmp	r0, #0
 800ba1c:	dc06      	bgt.n	800ba2c <__sflush_r+0xf8>
 800ba1e:	89a3      	ldrh	r3, [r4, #12]
 800ba20:	f04f 30ff 	mov.w	r0, #4294967295
 800ba24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ba28:	81a3      	strh	r3, [r4, #12]
 800ba2a:	e790      	b.n	800b94e <__sflush_r+0x1a>
 800ba2c:	4407      	add	r7, r0
 800ba2e:	1a36      	subs	r6, r6, r0
 800ba30:	e7ea      	b.n	800ba08 <__sflush_r+0xd4>
 800ba32:	bf00      	nop
 800ba34:	dfbffffe 	.word	0xdfbffffe

0800ba38 <_fflush_r>:
 800ba38:	b538      	push	{r3, r4, r5, lr}
 800ba3a:	690b      	ldr	r3, [r1, #16]
 800ba3c:	4605      	mov	r5, r0
 800ba3e:	460c      	mov	r4, r1
 800ba40:	b913      	cbnz	r3, 800ba48 <_fflush_r+0x10>
 800ba42:	2500      	movs	r5, #0
 800ba44:	4628      	mov	r0, r5
 800ba46:	bd38      	pop	{r3, r4, r5, pc}
 800ba48:	b118      	cbz	r0, 800ba52 <_fflush_r+0x1a>
 800ba4a:	6a03      	ldr	r3, [r0, #32]
 800ba4c:	b90b      	cbnz	r3, 800ba52 <_fflush_r+0x1a>
 800ba4e:	f7fd fd13 	bl	8009478 <__sinit>
 800ba52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d0f3      	beq.n	800ba42 <_fflush_r+0xa>
 800ba5a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ba5c:	07d0      	lsls	r0, r2, #31
 800ba5e:	d404      	bmi.n	800ba6a <_fflush_r+0x32>
 800ba60:	0599      	lsls	r1, r3, #22
 800ba62:	d402      	bmi.n	800ba6a <_fflush_r+0x32>
 800ba64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ba66:	f7fd fe62 	bl	800972e <__retarget_lock_acquire_recursive>
 800ba6a:	4628      	mov	r0, r5
 800ba6c:	4621      	mov	r1, r4
 800ba6e:	f7ff ff61 	bl	800b934 <__sflush_r>
 800ba72:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ba74:	4605      	mov	r5, r0
 800ba76:	07da      	lsls	r2, r3, #31
 800ba78:	d4e4      	bmi.n	800ba44 <_fflush_r+0xc>
 800ba7a:	89a3      	ldrh	r3, [r4, #12]
 800ba7c:	059b      	lsls	r3, r3, #22
 800ba7e:	d4e1      	bmi.n	800ba44 <_fflush_r+0xc>
 800ba80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ba82:	f7fd fe55 	bl	8009730 <__retarget_lock_release_recursive>
 800ba86:	e7dd      	b.n	800ba44 <_fflush_r+0xc>

0800ba88 <_sbrk_r>:
 800ba88:	b538      	push	{r3, r4, r5, lr}
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	4d05      	ldr	r5, [pc, #20]	; (800baa4 <_sbrk_r+0x1c>)
 800ba8e:	4604      	mov	r4, r0
 800ba90:	4608      	mov	r0, r1
 800ba92:	602b      	str	r3, [r5, #0]
 800ba94:	f7f6 ff16 	bl	80028c4 <_sbrk>
 800ba98:	1c43      	adds	r3, r0, #1
 800ba9a:	d102      	bne.n	800baa2 <_sbrk_r+0x1a>
 800ba9c:	682b      	ldr	r3, [r5, #0]
 800ba9e:	b103      	cbz	r3, 800baa2 <_sbrk_r+0x1a>
 800baa0:	6023      	str	r3, [r4, #0]
 800baa2:	bd38      	pop	{r3, r4, r5, pc}
 800baa4:	20002924 	.word	0x20002924

0800baa8 <__assert_func>:
 800baa8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800baaa:	4614      	mov	r4, r2
 800baac:	461a      	mov	r2, r3
 800baae:	4b09      	ldr	r3, [pc, #36]	; (800bad4 <__assert_func+0x2c>)
 800bab0:	4605      	mov	r5, r0
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	68d8      	ldr	r0, [r3, #12]
 800bab6:	b14c      	cbz	r4, 800bacc <__assert_func+0x24>
 800bab8:	4b07      	ldr	r3, [pc, #28]	; (800bad8 <__assert_func+0x30>)
 800baba:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800babe:	9100      	str	r1, [sp, #0]
 800bac0:	462b      	mov	r3, r5
 800bac2:	4906      	ldr	r1, [pc, #24]	; (800badc <__assert_func+0x34>)
 800bac4:	f000 f852 	bl	800bb6c <fiprintf>
 800bac8:	f000 f862 	bl	800bb90 <abort>
 800bacc:	4b04      	ldr	r3, [pc, #16]	; (800bae0 <__assert_func+0x38>)
 800bace:	461c      	mov	r4, r3
 800bad0:	e7f3      	b.n	800baba <__assert_func+0x12>
 800bad2:	bf00      	nop
 800bad4:	200001dc 	.word	0x200001dc
 800bad8:	0800ced5 	.word	0x0800ced5
 800badc:	0800cee2 	.word	0x0800cee2
 800bae0:	0800cf10 	.word	0x0800cf10

0800bae4 <_calloc_r>:
 800bae4:	b570      	push	{r4, r5, r6, lr}
 800bae6:	fba1 5402 	umull	r5, r4, r1, r2
 800baea:	b934      	cbnz	r4, 800bafa <_calloc_r+0x16>
 800baec:	4629      	mov	r1, r5
 800baee:	f7ff f881 	bl	800abf4 <_malloc_r>
 800baf2:	4606      	mov	r6, r0
 800baf4:	b928      	cbnz	r0, 800bb02 <_calloc_r+0x1e>
 800baf6:	4630      	mov	r0, r6
 800baf8:	bd70      	pop	{r4, r5, r6, pc}
 800bafa:	220c      	movs	r2, #12
 800bafc:	2600      	movs	r6, #0
 800bafe:	6002      	str	r2, [r0, #0]
 800bb00:	e7f9      	b.n	800baf6 <_calloc_r+0x12>
 800bb02:	462a      	mov	r2, r5
 800bb04:	4621      	mov	r1, r4
 800bb06:	f7fd fd6a 	bl	80095de <memset>
 800bb0a:	e7f4      	b.n	800baf6 <_calloc_r+0x12>

0800bb0c <_realloc_r>:
 800bb0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb10:	4680      	mov	r8, r0
 800bb12:	4614      	mov	r4, r2
 800bb14:	460e      	mov	r6, r1
 800bb16:	b921      	cbnz	r1, 800bb22 <_realloc_r+0x16>
 800bb18:	4611      	mov	r1, r2
 800bb1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bb1e:	f7ff b869 	b.w	800abf4 <_malloc_r>
 800bb22:	b92a      	cbnz	r2, 800bb30 <_realloc_r+0x24>
 800bb24:	f7fe fc9c 	bl	800a460 <_free_r>
 800bb28:	4625      	mov	r5, r4
 800bb2a:	4628      	mov	r0, r5
 800bb2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb30:	f000 f835 	bl	800bb9e <_malloc_usable_size_r>
 800bb34:	4284      	cmp	r4, r0
 800bb36:	4607      	mov	r7, r0
 800bb38:	d802      	bhi.n	800bb40 <_realloc_r+0x34>
 800bb3a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bb3e:	d812      	bhi.n	800bb66 <_realloc_r+0x5a>
 800bb40:	4621      	mov	r1, r4
 800bb42:	4640      	mov	r0, r8
 800bb44:	f7ff f856 	bl	800abf4 <_malloc_r>
 800bb48:	4605      	mov	r5, r0
 800bb4a:	2800      	cmp	r0, #0
 800bb4c:	d0ed      	beq.n	800bb2a <_realloc_r+0x1e>
 800bb4e:	42bc      	cmp	r4, r7
 800bb50:	4622      	mov	r2, r4
 800bb52:	4631      	mov	r1, r6
 800bb54:	bf28      	it	cs
 800bb56:	463a      	movcs	r2, r7
 800bb58:	f7fd fdf9 	bl	800974e <memcpy>
 800bb5c:	4631      	mov	r1, r6
 800bb5e:	4640      	mov	r0, r8
 800bb60:	f7fe fc7e 	bl	800a460 <_free_r>
 800bb64:	e7e1      	b.n	800bb2a <_realloc_r+0x1e>
 800bb66:	4635      	mov	r5, r6
 800bb68:	e7df      	b.n	800bb2a <_realloc_r+0x1e>
	...

0800bb6c <fiprintf>:
 800bb6c:	b40e      	push	{r1, r2, r3}
 800bb6e:	b503      	push	{r0, r1, lr}
 800bb70:	4601      	mov	r1, r0
 800bb72:	ab03      	add	r3, sp, #12
 800bb74:	4805      	ldr	r0, [pc, #20]	; (800bb8c <fiprintf+0x20>)
 800bb76:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb7a:	6800      	ldr	r0, [r0, #0]
 800bb7c:	9301      	str	r3, [sp, #4]
 800bb7e:	f000 f83d 	bl	800bbfc <_vfiprintf_r>
 800bb82:	b002      	add	sp, #8
 800bb84:	f85d eb04 	ldr.w	lr, [sp], #4
 800bb88:	b003      	add	sp, #12
 800bb8a:	4770      	bx	lr
 800bb8c:	200001dc 	.word	0x200001dc

0800bb90 <abort>:
 800bb90:	2006      	movs	r0, #6
 800bb92:	b508      	push	{r3, lr}
 800bb94:	f000 fa0a 	bl	800bfac <raise>
 800bb98:	2001      	movs	r0, #1
 800bb9a:	f7f6 fe67 	bl	800286c <_exit>

0800bb9e <_malloc_usable_size_r>:
 800bb9e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bba2:	1f18      	subs	r0, r3, #4
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	bfbc      	itt	lt
 800bba8:	580b      	ldrlt	r3, [r1, r0]
 800bbaa:	18c0      	addlt	r0, r0, r3
 800bbac:	4770      	bx	lr

0800bbae <__sfputc_r>:
 800bbae:	6893      	ldr	r3, [r2, #8]
 800bbb0:	b410      	push	{r4}
 800bbb2:	3b01      	subs	r3, #1
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	6093      	str	r3, [r2, #8]
 800bbb8:	da07      	bge.n	800bbca <__sfputc_r+0x1c>
 800bbba:	6994      	ldr	r4, [r2, #24]
 800bbbc:	42a3      	cmp	r3, r4
 800bbbe:	db01      	blt.n	800bbc4 <__sfputc_r+0x16>
 800bbc0:	290a      	cmp	r1, #10
 800bbc2:	d102      	bne.n	800bbca <__sfputc_r+0x1c>
 800bbc4:	bc10      	pop	{r4}
 800bbc6:	f000 b933 	b.w	800be30 <__swbuf_r>
 800bbca:	6813      	ldr	r3, [r2, #0]
 800bbcc:	1c58      	adds	r0, r3, #1
 800bbce:	6010      	str	r0, [r2, #0]
 800bbd0:	7019      	strb	r1, [r3, #0]
 800bbd2:	4608      	mov	r0, r1
 800bbd4:	bc10      	pop	{r4}
 800bbd6:	4770      	bx	lr

0800bbd8 <__sfputs_r>:
 800bbd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbda:	4606      	mov	r6, r0
 800bbdc:	460f      	mov	r7, r1
 800bbde:	4614      	mov	r4, r2
 800bbe0:	18d5      	adds	r5, r2, r3
 800bbe2:	42ac      	cmp	r4, r5
 800bbe4:	d101      	bne.n	800bbea <__sfputs_r+0x12>
 800bbe6:	2000      	movs	r0, #0
 800bbe8:	e007      	b.n	800bbfa <__sfputs_r+0x22>
 800bbea:	463a      	mov	r2, r7
 800bbec:	4630      	mov	r0, r6
 800bbee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbf2:	f7ff ffdc 	bl	800bbae <__sfputc_r>
 800bbf6:	1c43      	adds	r3, r0, #1
 800bbf8:	d1f3      	bne.n	800bbe2 <__sfputs_r+0xa>
 800bbfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bbfc <_vfiprintf_r>:
 800bbfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc00:	460d      	mov	r5, r1
 800bc02:	4614      	mov	r4, r2
 800bc04:	4698      	mov	r8, r3
 800bc06:	4606      	mov	r6, r0
 800bc08:	b09d      	sub	sp, #116	; 0x74
 800bc0a:	b118      	cbz	r0, 800bc14 <_vfiprintf_r+0x18>
 800bc0c:	6a03      	ldr	r3, [r0, #32]
 800bc0e:	b90b      	cbnz	r3, 800bc14 <_vfiprintf_r+0x18>
 800bc10:	f7fd fc32 	bl	8009478 <__sinit>
 800bc14:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bc16:	07d9      	lsls	r1, r3, #31
 800bc18:	d405      	bmi.n	800bc26 <_vfiprintf_r+0x2a>
 800bc1a:	89ab      	ldrh	r3, [r5, #12]
 800bc1c:	059a      	lsls	r2, r3, #22
 800bc1e:	d402      	bmi.n	800bc26 <_vfiprintf_r+0x2a>
 800bc20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bc22:	f7fd fd84 	bl	800972e <__retarget_lock_acquire_recursive>
 800bc26:	89ab      	ldrh	r3, [r5, #12]
 800bc28:	071b      	lsls	r3, r3, #28
 800bc2a:	d501      	bpl.n	800bc30 <_vfiprintf_r+0x34>
 800bc2c:	692b      	ldr	r3, [r5, #16]
 800bc2e:	b99b      	cbnz	r3, 800bc58 <_vfiprintf_r+0x5c>
 800bc30:	4629      	mov	r1, r5
 800bc32:	4630      	mov	r0, r6
 800bc34:	f000 f93a 	bl	800beac <__swsetup_r>
 800bc38:	b170      	cbz	r0, 800bc58 <_vfiprintf_r+0x5c>
 800bc3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bc3c:	07dc      	lsls	r4, r3, #31
 800bc3e:	d504      	bpl.n	800bc4a <_vfiprintf_r+0x4e>
 800bc40:	f04f 30ff 	mov.w	r0, #4294967295
 800bc44:	b01d      	add	sp, #116	; 0x74
 800bc46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc4a:	89ab      	ldrh	r3, [r5, #12]
 800bc4c:	0598      	lsls	r0, r3, #22
 800bc4e:	d4f7      	bmi.n	800bc40 <_vfiprintf_r+0x44>
 800bc50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bc52:	f7fd fd6d 	bl	8009730 <__retarget_lock_release_recursive>
 800bc56:	e7f3      	b.n	800bc40 <_vfiprintf_r+0x44>
 800bc58:	2300      	movs	r3, #0
 800bc5a:	9309      	str	r3, [sp, #36]	; 0x24
 800bc5c:	2320      	movs	r3, #32
 800bc5e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bc62:	2330      	movs	r3, #48	; 0x30
 800bc64:	f04f 0901 	mov.w	r9, #1
 800bc68:	f8cd 800c 	str.w	r8, [sp, #12]
 800bc6c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800be1c <_vfiprintf_r+0x220>
 800bc70:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bc74:	4623      	mov	r3, r4
 800bc76:	469a      	mov	sl, r3
 800bc78:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bc7c:	b10a      	cbz	r2, 800bc82 <_vfiprintf_r+0x86>
 800bc7e:	2a25      	cmp	r2, #37	; 0x25
 800bc80:	d1f9      	bne.n	800bc76 <_vfiprintf_r+0x7a>
 800bc82:	ebba 0b04 	subs.w	fp, sl, r4
 800bc86:	d00b      	beq.n	800bca0 <_vfiprintf_r+0xa4>
 800bc88:	465b      	mov	r3, fp
 800bc8a:	4622      	mov	r2, r4
 800bc8c:	4629      	mov	r1, r5
 800bc8e:	4630      	mov	r0, r6
 800bc90:	f7ff ffa2 	bl	800bbd8 <__sfputs_r>
 800bc94:	3001      	adds	r0, #1
 800bc96:	f000 80a9 	beq.w	800bdec <_vfiprintf_r+0x1f0>
 800bc9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bc9c:	445a      	add	r2, fp
 800bc9e:	9209      	str	r2, [sp, #36]	; 0x24
 800bca0:	f89a 3000 	ldrb.w	r3, [sl]
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	f000 80a1 	beq.w	800bdec <_vfiprintf_r+0x1f0>
 800bcaa:	2300      	movs	r3, #0
 800bcac:	f04f 32ff 	mov.w	r2, #4294967295
 800bcb0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bcb4:	f10a 0a01 	add.w	sl, sl, #1
 800bcb8:	9304      	str	r3, [sp, #16]
 800bcba:	9307      	str	r3, [sp, #28]
 800bcbc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bcc0:	931a      	str	r3, [sp, #104]	; 0x68
 800bcc2:	4654      	mov	r4, sl
 800bcc4:	2205      	movs	r2, #5
 800bcc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bcca:	4854      	ldr	r0, [pc, #336]	; (800be1c <_vfiprintf_r+0x220>)
 800bccc:	f7fd fd31 	bl	8009732 <memchr>
 800bcd0:	9a04      	ldr	r2, [sp, #16]
 800bcd2:	b9d8      	cbnz	r0, 800bd0c <_vfiprintf_r+0x110>
 800bcd4:	06d1      	lsls	r1, r2, #27
 800bcd6:	bf44      	itt	mi
 800bcd8:	2320      	movmi	r3, #32
 800bcda:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bcde:	0713      	lsls	r3, r2, #28
 800bce0:	bf44      	itt	mi
 800bce2:	232b      	movmi	r3, #43	; 0x2b
 800bce4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bce8:	f89a 3000 	ldrb.w	r3, [sl]
 800bcec:	2b2a      	cmp	r3, #42	; 0x2a
 800bcee:	d015      	beq.n	800bd1c <_vfiprintf_r+0x120>
 800bcf0:	4654      	mov	r4, sl
 800bcf2:	2000      	movs	r0, #0
 800bcf4:	f04f 0c0a 	mov.w	ip, #10
 800bcf8:	9a07      	ldr	r2, [sp, #28]
 800bcfa:	4621      	mov	r1, r4
 800bcfc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bd00:	3b30      	subs	r3, #48	; 0x30
 800bd02:	2b09      	cmp	r3, #9
 800bd04:	d94d      	bls.n	800bda2 <_vfiprintf_r+0x1a6>
 800bd06:	b1b0      	cbz	r0, 800bd36 <_vfiprintf_r+0x13a>
 800bd08:	9207      	str	r2, [sp, #28]
 800bd0a:	e014      	b.n	800bd36 <_vfiprintf_r+0x13a>
 800bd0c:	eba0 0308 	sub.w	r3, r0, r8
 800bd10:	fa09 f303 	lsl.w	r3, r9, r3
 800bd14:	4313      	orrs	r3, r2
 800bd16:	46a2      	mov	sl, r4
 800bd18:	9304      	str	r3, [sp, #16]
 800bd1a:	e7d2      	b.n	800bcc2 <_vfiprintf_r+0xc6>
 800bd1c:	9b03      	ldr	r3, [sp, #12]
 800bd1e:	1d19      	adds	r1, r3, #4
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	9103      	str	r1, [sp, #12]
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	bfbb      	ittet	lt
 800bd28:	425b      	neglt	r3, r3
 800bd2a:	f042 0202 	orrlt.w	r2, r2, #2
 800bd2e:	9307      	strge	r3, [sp, #28]
 800bd30:	9307      	strlt	r3, [sp, #28]
 800bd32:	bfb8      	it	lt
 800bd34:	9204      	strlt	r2, [sp, #16]
 800bd36:	7823      	ldrb	r3, [r4, #0]
 800bd38:	2b2e      	cmp	r3, #46	; 0x2e
 800bd3a:	d10c      	bne.n	800bd56 <_vfiprintf_r+0x15a>
 800bd3c:	7863      	ldrb	r3, [r4, #1]
 800bd3e:	2b2a      	cmp	r3, #42	; 0x2a
 800bd40:	d134      	bne.n	800bdac <_vfiprintf_r+0x1b0>
 800bd42:	9b03      	ldr	r3, [sp, #12]
 800bd44:	3402      	adds	r4, #2
 800bd46:	1d1a      	adds	r2, r3, #4
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	9203      	str	r2, [sp, #12]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	bfb8      	it	lt
 800bd50:	f04f 33ff 	movlt.w	r3, #4294967295
 800bd54:	9305      	str	r3, [sp, #20]
 800bd56:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800be20 <_vfiprintf_r+0x224>
 800bd5a:	2203      	movs	r2, #3
 800bd5c:	4650      	mov	r0, sl
 800bd5e:	7821      	ldrb	r1, [r4, #0]
 800bd60:	f7fd fce7 	bl	8009732 <memchr>
 800bd64:	b138      	cbz	r0, 800bd76 <_vfiprintf_r+0x17a>
 800bd66:	2240      	movs	r2, #64	; 0x40
 800bd68:	9b04      	ldr	r3, [sp, #16]
 800bd6a:	eba0 000a 	sub.w	r0, r0, sl
 800bd6e:	4082      	lsls	r2, r0
 800bd70:	4313      	orrs	r3, r2
 800bd72:	3401      	adds	r4, #1
 800bd74:	9304      	str	r3, [sp, #16]
 800bd76:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd7a:	2206      	movs	r2, #6
 800bd7c:	4829      	ldr	r0, [pc, #164]	; (800be24 <_vfiprintf_r+0x228>)
 800bd7e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bd82:	f7fd fcd6 	bl	8009732 <memchr>
 800bd86:	2800      	cmp	r0, #0
 800bd88:	d03f      	beq.n	800be0a <_vfiprintf_r+0x20e>
 800bd8a:	4b27      	ldr	r3, [pc, #156]	; (800be28 <_vfiprintf_r+0x22c>)
 800bd8c:	bb1b      	cbnz	r3, 800bdd6 <_vfiprintf_r+0x1da>
 800bd8e:	9b03      	ldr	r3, [sp, #12]
 800bd90:	3307      	adds	r3, #7
 800bd92:	f023 0307 	bic.w	r3, r3, #7
 800bd96:	3308      	adds	r3, #8
 800bd98:	9303      	str	r3, [sp, #12]
 800bd9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd9c:	443b      	add	r3, r7
 800bd9e:	9309      	str	r3, [sp, #36]	; 0x24
 800bda0:	e768      	b.n	800bc74 <_vfiprintf_r+0x78>
 800bda2:	460c      	mov	r4, r1
 800bda4:	2001      	movs	r0, #1
 800bda6:	fb0c 3202 	mla	r2, ip, r2, r3
 800bdaa:	e7a6      	b.n	800bcfa <_vfiprintf_r+0xfe>
 800bdac:	2300      	movs	r3, #0
 800bdae:	f04f 0c0a 	mov.w	ip, #10
 800bdb2:	4619      	mov	r1, r3
 800bdb4:	3401      	adds	r4, #1
 800bdb6:	9305      	str	r3, [sp, #20]
 800bdb8:	4620      	mov	r0, r4
 800bdba:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bdbe:	3a30      	subs	r2, #48	; 0x30
 800bdc0:	2a09      	cmp	r2, #9
 800bdc2:	d903      	bls.n	800bdcc <_vfiprintf_r+0x1d0>
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d0c6      	beq.n	800bd56 <_vfiprintf_r+0x15a>
 800bdc8:	9105      	str	r1, [sp, #20]
 800bdca:	e7c4      	b.n	800bd56 <_vfiprintf_r+0x15a>
 800bdcc:	4604      	mov	r4, r0
 800bdce:	2301      	movs	r3, #1
 800bdd0:	fb0c 2101 	mla	r1, ip, r1, r2
 800bdd4:	e7f0      	b.n	800bdb8 <_vfiprintf_r+0x1bc>
 800bdd6:	ab03      	add	r3, sp, #12
 800bdd8:	9300      	str	r3, [sp, #0]
 800bdda:	462a      	mov	r2, r5
 800bddc:	4630      	mov	r0, r6
 800bdde:	4b13      	ldr	r3, [pc, #76]	; (800be2c <_vfiprintf_r+0x230>)
 800bde0:	a904      	add	r1, sp, #16
 800bde2:	f7fc fced 	bl	80087c0 <_printf_float>
 800bde6:	4607      	mov	r7, r0
 800bde8:	1c78      	adds	r0, r7, #1
 800bdea:	d1d6      	bne.n	800bd9a <_vfiprintf_r+0x19e>
 800bdec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bdee:	07d9      	lsls	r1, r3, #31
 800bdf0:	d405      	bmi.n	800bdfe <_vfiprintf_r+0x202>
 800bdf2:	89ab      	ldrh	r3, [r5, #12]
 800bdf4:	059a      	lsls	r2, r3, #22
 800bdf6:	d402      	bmi.n	800bdfe <_vfiprintf_r+0x202>
 800bdf8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bdfa:	f7fd fc99 	bl	8009730 <__retarget_lock_release_recursive>
 800bdfe:	89ab      	ldrh	r3, [r5, #12]
 800be00:	065b      	lsls	r3, r3, #25
 800be02:	f53f af1d 	bmi.w	800bc40 <_vfiprintf_r+0x44>
 800be06:	9809      	ldr	r0, [sp, #36]	; 0x24
 800be08:	e71c      	b.n	800bc44 <_vfiprintf_r+0x48>
 800be0a:	ab03      	add	r3, sp, #12
 800be0c:	9300      	str	r3, [sp, #0]
 800be0e:	462a      	mov	r2, r5
 800be10:	4630      	mov	r0, r6
 800be12:	4b06      	ldr	r3, [pc, #24]	; (800be2c <_vfiprintf_r+0x230>)
 800be14:	a904      	add	r1, sp, #16
 800be16:	f7fc ff73 	bl	8008d00 <_printf_i>
 800be1a:	e7e4      	b.n	800bde6 <_vfiprintf_r+0x1ea>
 800be1c:	0800cec4 	.word	0x0800cec4
 800be20:	0800ceca 	.word	0x0800ceca
 800be24:	0800cece 	.word	0x0800cece
 800be28:	080087c1 	.word	0x080087c1
 800be2c:	0800bbd9 	.word	0x0800bbd9

0800be30 <__swbuf_r>:
 800be30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be32:	460e      	mov	r6, r1
 800be34:	4614      	mov	r4, r2
 800be36:	4605      	mov	r5, r0
 800be38:	b118      	cbz	r0, 800be42 <__swbuf_r+0x12>
 800be3a:	6a03      	ldr	r3, [r0, #32]
 800be3c:	b90b      	cbnz	r3, 800be42 <__swbuf_r+0x12>
 800be3e:	f7fd fb1b 	bl	8009478 <__sinit>
 800be42:	69a3      	ldr	r3, [r4, #24]
 800be44:	60a3      	str	r3, [r4, #8]
 800be46:	89a3      	ldrh	r3, [r4, #12]
 800be48:	071a      	lsls	r2, r3, #28
 800be4a:	d525      	bpl.n	800be98 <__swbuf_r+0x68>
 800be4c:	6923      	ldr	r3, [r4, #16]
 800be4e:	b31b      	cbz	r3, 800be98 <__swbuf_r+0x68>
 800be50:	6823      	ldr	r3, [r4, #0]
 800be52:	6922      	ldr	r2, [r4, #16]
 800be54:	b2f6      	uxtb	r6, r6
 800be56:	1a98      	subs	r0, r3, r2
 800be58:	6963      	ldr	r3, [r4, #20]
 800be5a:	4637      	mov	r7, r6
 800be5c:	4283      	cmp	r3, r0
 800be5e:	dc04      	bgt.n	800be6a <__swbuf_r+0x3a>
 800be60:	4621      	mov	r1, r4
 800be62:	4628      	mov	r0, r5
 800be64:	f7ff fde8 	bl	800ba38 <_fflush_r>
 800be68:	b9e0      	cbnz	r0, 800bea4 <__swbuf_r+0x74>
 800be6a:	68a3      	ldr	r3, [r4, #8]
 800be6c:	3b01      	subs	r3, #1
 800be6e:	60a3      	str	r3, [r4, #8]
 800be70:	6823      	ldr	r3, [r4, #0]
 800be72:	1c5a      	adds	r2, r3, #1
 800be74:	6022      	str	r2, [r4, #0]
 800be76:	701e      	strb	r6, [r3, #0]
 800be78:	6962      	ldr	r2, [r4, #20]
 800be7a:	1c43      	adds	r3, r0, #1
 800be7c:	429a      	cmp	r2, r3
 800be7e:	d004      	beq.n	800be8a <__swbuf_r+0x5a>
 800be80:	89a3      	ldrh	r3, [r4, #12]
 800be82:	07db      	lsls	r3, r3, #31
 800be84:	d506      	bpl.n	800be94 <__swbuf_r+0x64>
 800be86:	2e0a      	cmp	r6, #10
 800be88:	d104      	bne.n	800be94 <__swbuf_r+0x64>
 800be8a:	4621      	mov	r1, r4
 800be8c:	4628      	mov	r0, r5
 800be8e:	f7ff fdd3 	bl	800ba38 <_fflush_r>
 800be92:	b938      	cbnz	r0, 800bea4 <__swbuf_r+0x74>
 800be94:	4638      	mov	r0, r7
 800be96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be98:	4621      	mov	r1, r4
 800be9a:	4628      	mov	r0, r5
 800be9c:	f000 f806 	bl	800beac <__swsetup_r>
 800bea0:	2800      	cmp	r0, #0
 800bea2:	d0d5      	beq.n	800be50 <__swbuf_r+0x20>
 800bea4:	f04f 37ff 	mov.w	r7, #4294967295
 800bea8:	e7f4      	b.n	800be94 <__swbuf_r+0x64>
	...

0800beac <__swsetup_r>:
 800beac:	b538      	push	{r3, r4, r5, lr}
 800beae:	4b2a      	ldr	r3, [pc, #168]	; (800bf58 <__swsetup_r+0xac>)
 800beb0:	4605      	mov	r5, r0
 800beb2:	6818      	ldr	r0, [r3, #0]
 800beb4:	460c      	mov	r4, r1
 800beb6:	b118      	cbz	r0, 800bec0 <__swsetup_r+0x14>
 800beb8:	6a03      	ldr	r3, [r0, #32]
 800beba:	b90b      	cbnz	r3, 800bec0 <__swsetup_r+0x14>
 800bebc:	f7fd fadc 	bl	8009478 <__sinit>
 800bec0:	89a3      	ldrh	r3, [r4, #12]
 800bec2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bec6:	0718      	lsls	r0, r3, #28
 800bec8:	d422      	bmi.n	800bf10 <__swsetup_r+0x64>
 800beca:	06d9      	lsls	r1, r3, #27
 800becc:	d407      	bmi.n	800bede <__swsetup_r+0x32>
 800bece:	2309      	movs	r3, #9
 800bed0:	602b      	str	r3, [r5, #0]
 800bed2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bed6:	f04f 30ff 	mov.w	r0, #4294967295
 800beda:	81a3      	strh	r3, [r4, #12]
 800bedc:	e034      	b.n	800bf48 <__swsetup_r+0x9c>
 800bede:	0758      	lsls	r0, r3, #29
 800bee0:	d512      	bpl.n	800bf08 <__swsetup_r+0x5c>
 800bee2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bee4:	b141      	cbz	r1, 800bef8 <__swsetup_r+0x4c>
 800bee6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800beea:	4299      	cmp	r1, r3
 800beec:	d002      	beq.n	800bef4 <__swsetup_r+0x48>
 800beee:	4628      	mov	r0, r5
 800bef0:	f7fe fab6 	bl	800a460 <_free_r>
 800bef4:	2300      	movs	r3, #0
 800bef6:	6363      	str	r3, [r4, #52]	; 0x34
 800bef8:	89a3      	ldrh	r3, [r4, #12]
 800befa:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800befe:	81a3      	strh	r3, [r4, #12]
 800bf00:	2300      	movs	r3, #0
 800bf02:	6063      	str	r3, [r4, #4]
 800bf04:	6923      	ldr	r3, [r4, #16]
 800bf06:	6023      	str	r3, [r4, #0]
 800bf08:	89a3      	ldrh	r3, [r4, #12]
 800bf0a:	f043 0308 	orr.w	r3, r3, #8
 800bf0e:	81a3      	strh	r3, [r4, #12]
 800bf10:	6923      	ldr	r3, [r4, #16]
 800bf12:	b94b      	cbnz	r3, 800bf28 <__swsetup_r+0x7c>
 800bf14:	89a3      	ldrh	r3, [r4, #12]
 800bf16:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bf1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bf1e:	d003      	beq.n	800bf28 <__swsetup_r+0x7c>
 800bf20:	4621      	mov	r1, r4
 800bf22:	4628      	mov	r0, r5
 800bf24:	f000 f883 	bl	800c02e <__smakebuf_r>
 800bf28:	89a0      	ldrh	r0, [r4, #12]
 800bf2a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bf2e:	f010 0301 	ands.w	r3, r0, #1
 800bf32:	d00a      	beq.n	800bf4a <__swsetup_r+0x9e>
 800bf34:	2300      	movs	r3, #0
 800bf36:	60a3      	str	r3, [r4, #8]
 800bf38:	6963      	ldr	r3, [r4, #20]
 800bf3a:	425b      	negs	r3, r3
 800bf3c:	61a3      	str	r3, [r4, #24]
 800bf3e:	6923      	ldr	r3, [r4, #16]
 800bf40:	b943      	cbnz	r3, 800bf54 <__swsetup_r+0xa8>
 800bf42:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bf46:	d1c4      	bne.n	800bed2 <__swsetup_r+0x26>
 800bf48:	bd38      	pop	{r3, r4, r5, pc}
 800bf4a:	0781      	lsls	r1, r0, #30
 800bf4c:	bf58      	it	pl
 800bf4e:	6963      	ldrpl	r3, [r4, #20]
 800bf50:	60a3      	str	r3, [r4, #8]
 800bf52:	e7f4      	b.n	800bf3e <__swsetup_r+0x92>
 800bf54:	2000      	movs	r0, #0
 800bf56:	e7f7      	b.n	800bf48 <__swsetup_r+0x9c>
 800bf58:	200001dc 	.word	0x200001dc

0800bf5c <_raise_r>:
 800bf5c:	291f      	cmp	r1, #31
 800bf5e:	b538      	push	{r3, r4, r5, lr}
 800bf60:	4604      	mov	r4, r0
 800bf62:	460d      	mov	r5, r1
 800bf64:	d904      	bls.n	800bf70 <_raise_r+0x14>
 800bf66:	2316      	movs	r3, #22
 800bf68:	6003      	str	r3, [r0, #0]
 800bf6a:	f04f 30ff 	mov.w	r0, #4294967295
 800bf6e:	bd38      	pop	{r3, r4, r5, pc}
 800bf70:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800bf72:	b112      	cbz	r2, 800bf7a <_raise_r+0x1e>
 800bf74:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bf78:	b94b      	cbnz	r3, 800bf8e <_raise_r+0x32>
 800bf7a:	4620      	mov	r0, r4
 800bf7c:	f000 f830 	bl	800bfe0 <_getpid_r>
 800bf80:	462a      	mov	r2, r5
 800bf82:	4601      	mov	r1, r0
 800bf84:	4620      	mov	r0, r4
 800bf86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bf8a:	f000 b817 	b.w	800bfbc <_kill_r>
 800bf8e:	2b01      	cmp	r3, #1
 800bf90:	d00a      	beq.n	800bfa8 <_raise_r+0x4c>
 800bf92:	1c59      	adds	r1, r3, #1
 800bf94:	d103      	bne.n	800bf9e <_raise_r+0x42>
 800bf96:	2316      	movs	r3, #22
 800bf98:	6003      	str	r3, [r0, #0]
 800bf9a:	2001      	movs	r0, #1
 800bf9c:	e7e7      	b.n	800bf6e <_raise_r+0x12>
 800bf9e:	2400      	movs	r4, #0
 800bfa0:	4628      	mov	r0, r5
 800bfa2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bfa6:	4798      	blx	r3
 800bfa8:	2000      	movs	r0, #0
 800bfaa:	e7e0      	b.n	800bf6e <_raise_r+0x12>

0800bfac <raise>:
 800bfac:	4b02      	ldr	r3, [pc, #8]	; (800bfb8 <raise+0xc>)
 800bfae:	4601      	mov	r1, r0
 800bfb0:	6818      	ldr	r0, [r3, #0]
 800bfb2:	f7ff bfd3 	b.w	800bf5c <_raise_r>
 800bfb6:	bf00      	nop
 800bfb8:	200001dc 	.word	0x200001dc

0800bfbc <_kill_r>:
 800bfbc:	b538      	push	{r3, r4, r5, lr}
 800bfbe:	2300      	movs	r3, #0
 800bfc0:	4d06      	ldr	r5, [pc, #24]	; (800bfdc <_kill_r+0x20>)
 800bfc2:	4604      	mov	r4, r0
 800bfc4:	4608      	mov	r0, r1
 800bfc6:	4611      	mov	r1, r2
 800bfc8:	602b      	str	r3, [r5, #0]
 800bfca:	f7f6 fc47 	bl	800285c <_kill>
 800bfce:	1c43      	adds	r3, r0, #1
 800bfd0:	d102      	bne.n	800bfd8 <_kill_r+0x1c>
 800bfd2:	682b      	ldr	r3, [r5, #0]
 800bfd4:	b103      	cbz	r3, 800bfd8 <_kill_r+0x1c>
 800bfd6:	6023      	str	r3, [r4, #0]
 800bfd8:	bd38      	pop	{r3, r4, r5, pc}
 800bfda:	bf00      	nop
 800bfdc:	20002924 	.word	0x20002924

0800bfe0 <_getpid_r>:
 800bfe0:	f7f6 bc3a 	b.w	8002858 <_getpid>

0800bfe4 <__swhatbuf_r>:
 800bfe4:	b570      	push	{r4, r5, r6, lr}
 800bfe6:	460c      	mov	r4, r1
 800bfe8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bfec:	4615      	mov	r5, r2
 800bfee:	2900      	cmp	r1, #0
 800bff0:	461e      	mov	r6, r3
 800bff2:	b096      	sub	sp, #88	; 0x58
 800bff4:	da0c      	bge.n	800c010 <__swhatbuf_r+0x2c>
 800bff6:	89a3      	ldrh	r3, [r4, #12]
 800bff8:	2100      	movs	r1, #0
 800bffa:	f013 0f80 	tst.w	r3, #128	; 0x80
 800bffe:	bf0c      	ite	eq
 800c000:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c004:	2340      	movne	r3, #64	; 0x40
 800c006:	2000      	movs	r0, #0
 800c008:	6031      	str	r1, [r6, #0]
 800c00a:	602b      	str	r3, [r5, #0]
 800c00c:	b016      	add	sp, #88	; 0x58
 800c00e:	bd70      	pop	{r4, r5, r6, pc}
 800c010:	466a      	mov	r2, sp
 800c012:	f000 f849 	bl	800c0a8 <_fstat_r>
 800c016:	2800      	cmp	r0, #0
 800c018:	dbed      	blt.n	800bff6 <__swhatbuf_r+0x12>
 800c01a:	9901      	ldr	r1, [sp, #4]
 800c01c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c020:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c024:	4259      	negs	r1, r3
 800c026:	4159      	adcs	r1, r3
 800c028:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c02c:	e7eb      	b.n	800c006 <__swhatbuf_r+0x22>

0800c02e <__smakebuf_r>:
 800c02e:	898b      	ldrh	r3, [r1, #12]
 800c030:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c032:	079d      	lsls	r5, r3, #30
 800c034:	4606      	mov	r6, r0
 800c036:	460c      	mov	r4, r1
 800c038:	d507      	bpl.n	800c04a <__smakebuf_r+0x1c>
 800c03a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c03e:	6023      	str	r3, [r4, #0]
 800c040:	6123      	str	r3, [r4, #16]
 800c042:	2301      	movs	r3, #1
 800c044:	6163      	str	r3, [r4, #20]
 800c046:	b002      	add	sp, #8
 800c048:	bd70      	pop	{r4, r5, r6, pc}
 800c04a:	466a      	mov	r2, sp
 800c04c:	ab01      	add	r3, sp, #4
 800c04e:	f7ff ffc9 	bl	800bfe4 <__swhatbuf_r>
 800c052:	9900      	ldr	r1, [sp, #0]
 800c054:	4605      	mov	r5, r0
 800c056:	4630      	mov	r0, r6
 800c058:	f7fe fdcc 	bl	800abf4 <_malloc_r>
 800c05c:	b948      	cbnz	r0, 800c072 <__smakebuf_r+0x44>
 800c05e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c062:	059a      	lsls	r2, r3, #22
 800c064:	d4ef      	bmi.n	800c046 <__smakebuf_r+0x18>
 800c066:	f023 0303 	bic.w	r3, r3, #3
 800c06a:	f043 0302 	orr.w	r3, r3, #2
 800c06e:	81a3      	strh	r3, [r4, #12]
 800c070:	e7e3      	b.n	800c03a <__smakebuf_r+0xc>
 800c072:	89a3      	ldrh	r3, [r4, #12]
 800c074:	6020      	str	r0, [r4, #0]
 800c076:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c07a:	81a3      	strh	r3, [r4, #12]
 800c07c:	9b00      	ldr	r3, [sp, #0]
 800c07e:	6120      	str	r0, [r4, #16]
 800c080:	6163      	str	r3, [r4, #20]
 800c082:	9b01      	ldr	r3, [sp, #4]
 800c084:	b15b      	cbz	r3, 800c09e <__smakebuf_r+0x70>
 800c086:	4630      	mov	r0, r6
 800c088:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c08c:	f000 f81e 	bl	800c0cc <_isatty_r>
 800c090:	b128      	cbz	r0, 800c09e <__smakebuf_r+0x70>
 800c092:	89a3      	ldrh	r3, [r4, #12]
 800c094:	f023 0303 	bic.w	r3, r3, #3
 800c098:	f043 0301 	orr.w	r3, r3, #1
 800c09c:	81a3      	strh	r3, [r4, #12]
 800c09e:	89a3      	ldrh	r3, [r4, #12]
 800c0a0:	431d      	orrs	r5, r3
 800c0a2:	81a5      	strh	r5, [r4, #12]
 800c0a4:	e7cf      	b.n	800c046 <__smakebuf_r+0x18>
	...

0800c0a8 <_fstat_r>:
 800c0a8:	b538      	push	{r3, r4, r5, lr}
 800c0aa:	2300      	movs	r3, #0
 800c0ac:	4d06      	ldr	r5, [pc, #24]	; (800c0c8 <_fstat_r+0x20>)
 800c0ae:	4604      	mov	r4, r0
 800c0b0:	4608      	mov	r0, r1
 800c0b2:	4611      	mov	r1, r2
 800c0b4:	602b      	str	r3, [r5, #0]
 800c0b6:	f7f6 fbfc 	bl	80028b2 <_fstat>
 800c0ba:	1c43      	adds	r3, r0, #1
 800c0bc:	d102      	bne.n	800c0c4 <_fstat_r+0x1c>
 800c0be:	682b      	ldr	r3, [r5, #0]
 800c0c0:	b103      	cbz	r3, 800c0c4 <_fstat_r+0x1c>
 800c0c2:	6023      	str	r3, [r4, #0]
 800c0c4:	bd38      	pop	{r3, r4, r5, pc}
 800c0c6:	bf00      	nop
 800c0c8:	20002924 	.word	0x20002924

0800c0cc <_isatty_r>:
 800c0cc:	b538      	push	{r3, r4, r5, lr}
 800c0ce:	2300      	movs	r3, #0
 800c0d0:	4d05      	ldr	r5, [pc, #20]	; (800c0e8 <_isatty_r+0x1c>)
 800c0d2:	4604      	mov	r4, r0
 800c0d4:	4608      	mov	r0, r1
 800c0d6:	602b      	str	r3, [r5, #0]
 800c0d8:	f7f6 fbf0 	bl	80028bc <_isatty>
 800c0dc:	1c43      	adds	r3, r0, #1
 800c0de:	d102      	bne.n	800c0e6 <_isatty_r+0x1a>
 800c0e0:	682b      	ldr	r3, [r5, #0]
 800c0e2:	b103      	cbz	r3, 800c0e6 <_isatty_r+0x1a>
 800c0e4:	6023      	str	r3, [r4, #0]
 800c0e6:	bd38      	pop	{r3, r4, r5, pc}
 800c0e8:	20002924 	.word	0x20002924

0800c0ec <_init>:
 800c0ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0ee:	bf00      	nop
 800c0f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c0f2:	bc08      	pop	{r3}
 800c0f4:	469e      	mov	lr, r3
 800c0f6:	4770      	bx	lr

0800c0f8 <_fini>:
 800c0f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0fa:	bf00      	nop
 800c0fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c0fe:	bc08      	pop	{r3}
 800c100:	469e      	mov	lr, r3
 800c102:	4770      	bx	lr
